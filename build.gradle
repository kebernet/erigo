buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
    }
    dependencies {
        classpath 'gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.13.1'
        classpath 'com.netflix.nebula:nebula-publishing-plugin:4.9.1'
    }
}



repositories {
    mavenCentral()
}

allprojects{
    apply plugin: 'nebula.maven-publish'
    apply plugin: 'maven'
    group 'net.kebernet.configuration'
    version '0.1'
    buildscript {
        repositories {
            mavenCentral()
            mavenLocal()
            jcenter()
            maven {
                url "https://plugins.gradle.org/m2/"
            }
            maven {
                url 'https://maven.google.com'
            }
            maven {
                url "https://oss.sonatype.org/content/repositories/snapshots/"
            }
            maven {
                url  "https://dl.bintray.com/gesellix/gradle-plugins/"
            }
        }
    }
    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url 'https://maven.google.com'
        }
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
}

configure(subprojects - project(':android')) {

    task installGitHooks(type: Copy) {
        from(new File(rootProject.rootDir, '/etc/pre-commit.sh')) {
            rename('(.*)\\.sh', '$1')
        }
        into { new File(rootProject.rootDir, '.git/hooks/') }


    }

    build.dependsOn installGitHooks
    apply plugin: 'java'
    apply plugin: 'findbugs'
    apply plugin: "jacoco"


    sourceCompatibility = 1.8

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    javadoc {
        failOnError = false

    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    jacocoTestReport {
        reports {
            xml.enabled false
            csv.enabled false
            html.destination "${buildDir}/reports/jacoco"
        }
    }

    check.dependsOn jacocoTestReport
    check.dependsOn javadocJar

    test {
        testLogging {
            events "passed", "skipped", "failed", "standardOut", "standardError"
        }
        jacoco {
            append = false
            destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        }
    }

    tasks.withType(FindBugs) {
        reports {
            xml.enabled false
            html.enabled true
        }
    }
    test {
        testLogging {
            exceptionFormat = 'full'
        }
    }
}

allprojects {
    apply plugin: "com.github.hierynomus.license"
    license {
        header rootProject.file('etc/header.txt')
        strictCheck true
        mapping("java", "SLASHSTAR_STYLE")
        exclude("**/*.txt")
    }
}

