configurations {
    j2o
    j2oCp
}

Properties local = readProperties(project.rootProject.file('local.properties'))

dependencies {
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.1'
    compile group: 'com.google.guava', name: 'guava', version: '22.0'
    compile group: 'javax.jmdns', name: 'jmdns', version: '3.4.1'
    compile group: 'javax.inject', name: 'javax.inject', version: '1'
    compile group: 'io.swagger', name: 'swagger-annotations', version: '1.5.10'
    compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'

    j2oCp files(local.getProperty("j2objc.home")+'/lib/j2objc_annotations.jar')

    // Sources dependencies for things that need to get cross compiled to ObjC
    j2o group: 'javax.jmdns', name: 'jmdns', version: '3.4.1', classifier: 'sources'
    j2o group: 'com.google.code.gson', name: 'gson', version: '2.8.1', classifier: 'sources'
    j2o group: 'io.swagger', name: 'swagger-annotations', version: '1.5.10', classifier: 'sources'
    j2o group: 'com.google.guava', name: 'guava', version: '22.0', classifier: 'sources'
    j2o group: 'com.google.errorprone', name: 'error_prone_annotations', version: '2.1.1', classifier: 'sources'
    j2o group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2', classifier: 'sources'
    j2o group: 'javax.inject', name: 'javax.inject', version: '1', classifier: 'sources'


    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.eclipse.jetty', name: 'jetty-server', version: '9.3.9.v20160517'
    testCompile group: 'org.eclipse.jetty', name: 'jetty-servlet', version: '9.3.9.v20160517'
}

test {
    systemProperties = [
            "test.resources": file("src/test/resources").getAbsolutePath(),
            "build.dir" : project.buildDir.getAbsolutePath()
    ]
}

//
//  J2Objc Stuff
//

sourceSets.main.compileClasspath += configurations.j2oCp
sourceSets.test.compileClasspath += configurations.j2oCp
sourceSets.test.runtimeClasspath += configurations.j2oCp

Properties readProperties(File f){
    Properties p = new Properties()
    if(f.exists()) {
        p.load(f.newDataInputStream())
    }
    return p
}

List<String> listAllSources(List<String> list, File root, File thisDir) {
    for(File f: thisDir.listFiles()){
        if(f.name.endsWith(".java") && !f.name.equals("package-info.java")){
            println("Added "+f.getAbsolutePath())
            list.add(f.getAbsolutePath().substring(root.getAbsolutePath().length() + 1))
        } else if(f.isDirectory()) {
            listAllSources(list, root, f)
        }
    }
    return list
}
ArrayList<String> excluded = new ArrayList<>()
excluded.addAll(readProperties(project.file("src/main/j2objc/excluded-classes.properties")).values())


def compileDeps = ""
project.configurations.compile.each {
    if(compileDeps != ""){
        compileDeps+= ":"
    }
    compileDeps+=it.getAbsolutePath()
}

def j2oargs = [local["j2objc.home"] + '/j2objc',
               '--verbose',
               '-use-arc',
               '-sourcepath', file("build/j2oSources").getAbsolutePath(),
               '-classpath', compileDeps,
               '-d', project.rootProject.file("ios/app/Erigo").getAbsolutePath(),
               '--prefixes', file('src/main/j2objc/prefixes.properties').getAbsolutePath()]


task extractJ2o(dependsOn: compileJava) {
    doLast {
        configurations.j2o.resolvedConfiguration.files.each {
            println "Extracting: " + it
            def f = file(it.toString())
            copy {
                from zipTree(f)
                into 'build/j2oSources'
            }
        }
    }
}

task copySources(dependsOn: extractJ2o) {
    doLast {
        println("Copying... " + excluded)
        copy {
            from('src/main/java') {
                include '**/*.java'
                exclude excluded
            }
            into 'build/j2oSources'
        }
        copy {
            from('src/main/j2objc/java') {
                include '**/*.java'
                exclude excluded
            }
            into 'build/j2oSources'
        }
    }

}
//Commented. I need to figure out javax.xml.bind.annotation.XmlTransient;

if( local["j2objc.home"] != null){
    task j2objc(dependsOn: copySources) {
        doFirst {
            println local["j2objc.home"] + '/j2objc' + ' ' + j2oargs.join(" ")
        }
        doLast {
            def commandLine = listAllSources(j2oargs, file("build/j2oSources"), file("build/j2oSources"))
            println(commandLine)
            def result = new ProcessBuilder()
                    .command(commandLine)
                    .redirectError(file("build/j2o.err"))
                    .redirectOutput(file("build/j2o.out"))
                    .start()
                    .waitFor()
            if(result != 0){
                throw new RuntimeException("Failed to gen J2Objc "+result)
            }
        }
    }

    build.dependsOn j2objc
    j2objc.dependsOn copySources
}
