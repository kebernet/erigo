/*
 *     Copyright (c) 2017 Robert Cooper
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
package net.kebernet.configuration.desktop;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import net.kebernet.configuration.client.app.DeviceSettingsView;
import net.kebernet.configuration.client.model.Group;
import net.miginfocom.swing.MigLayout;

import javax.swing.*;
import java.awt.*;
import java.util.HashMap;
import java.util.Map;

/**
 * Created by rcooper on 7/11/17.
 */
public class GroupView {
    private final SettingViewFactory factory;
    private final Group group;
    private final Map<String, String> values;
    private final DeviceSettingsView.SettingsChangedCallback callback;
    JPanel root;
    private JLabel description;
    private JPanel fields;


    public GroupView(SettingViewFactory factory, Group group, Map<String, String> values, DeviceSettingsView.SettingsChangedCallback callback) {
        this.factory = factory;
        this.group = group;
        this.values = values;
        this.callback = callback;
        render();
    }

    private void render() {
        this.description.setText(group.getDescription());
        this.fields.setLayout(new MigLayout("wrap 2", "[30%][grow]"));
        group.getSettings().forEach((setting) -> {
            JLabel label = new JLabel(setting.getDescription());
            JComponent component = factory.getComponentForType(setting.getType(),
                    values.get(setting.getName()),
                    (value) -> dispatchValueChange(setting.getName(), value));
            fields.add(label);
            fields.add(component, "growx");
        });
        fields.revalidate();
        fields.repaint();
    }

    private void dispatchValueChange(String name, String value) {
        if(this.callback != null){
            this.callback.onSettingChanged(name, value);
        }
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("GroupView");
        frame.setContentPane(new GroupView(new SettingViewFactory(), new Group(), new HashMap<>(), null).root);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        root = new JPanel();
        root.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        description = new JLabel();
        description.setText("Label");
        root.add(description, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        root.add(scrollPane1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        fields = new JPanel();
        fields.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        scrollPane1.setViewportView(fields);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return root;
    }
}


