//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/base/Ascii.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Ascii.h"
#include "com/google/common/base/Preconditions.h"
#include "java/lang/CharSequence.h"
#include "java/lang/StringBuilder.h"

@interface ComGoogleCommonBaseAscii ()

- (instancetype)init;

+ (jint)getAlphaIndexWithChar:(jchar)c;

@end

__attribute__((unused)) static void ComGoogleCommonBaseAscii_init(ComGoogleCommonBaseAscii *self);

__attribute__((unused)) static ComGoogleCommonBaseAscii *new_ComGoogleCommonBaseAscii_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonBaseAscii *create_ComGoogleCommonBaseAscii_init();

__attribute__((unused)) static jint ComGoogleCommonBaseAscii_getAlphaIndexWithChar_(jchar c);

@implementation ComGoogleCommonBaseAscii

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonBaseAscii_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (NSString *)toLowerCaseWithNSString:(NSString *)string {
  return ComGoogleCommonBaseAscii_toLowerCaseWithNSString_(string);
}

+ (NSString *)toLowerCaseWithJavaLangCharSequence:(id<JavaLangCharSequence>)chars {
  return ComGoogleCommonBaseAscii_toLowerCaseWithJavaLangCharSequence_(chars);
}

+ (jchar)toLowerCaseWithChar:(jchar)c {
  return ComGoogleCommonBaseAscii_toLowerCaseWithChar_(c);
}

+ (NSString *)toUpperCaseWithNSString:(NSString *)string {
  return ComGoogleCommonBaseAscii_toUpperCaseWithNSString_(string);
}

+ (NSString *)toUpperCaseWithJavaLangCharSequence:(id<JavaLangCharSequence>)chars {
  return ComGoogleCommonBaseAscii_toUpperCaseWithJavaLangCharSequence_(chars);
}

+ (jchar)toUpperCaseWithChar:(jchar)c {
  return ComGoogleCommonBaseAscii_toUpperCaseWithChar_(c);
}

+ (jboolean)isLowerCaseWithChar:(jchar)c {
  return ComGoogleCommonBaseAscii_isLowerCaseWithChar_(c);
}

+ (jboolean)isUpperCaseWithChar:(jchar)c {
  return ComGoogleCommonBaseAscii_isUpperCaseWithChar_(c);
}

+ (NSString *)truncateWithJavaLangCharSequence:(id<JavaLangCharSequence>)seq
                                       withInt:(jint)maxLength
                                  withNSString:(NSString *)truncationIndicator {
  return ComGoogleCommonBaseAscii_truncateWithJavaLangCharSequence_withInt_withNSString_(seq, maxLength, truncationIndicator);
}

+ (jboolean)equalsIgnoreCaseWithJavaLangCharSequence:(id<JavaLangCharSequence>)s1
                            withJavaLangCharSequence:(id<JavaLangCharSequence>)s2 {
  return ComGoogleCommonBaseAscii_equalsIgnoreCaseWithJavaLangCharSequence_withJavaLangCharSequence_(s1, s2);
}

+ (jint)getAlphaIndexWithChar:(jchar)c {
  return ComGoogleCommonBaseAscii_getAlphaIndexWithChar_(c);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "C", 0x9, 0, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 4, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 4, 2, -1, -1, -1, -1 },
    { NULL, "C", 0x9, 4, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 5, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 6, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 11, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(toLowerCaseWithNSString:);
  methods[2].selector = @selector(toLowerCaseWithJavaLangCharSequence:);
  methods[3].selector = @selector(toLowerCaseWithChar:);
  methods[4].selector = @selector(toUpperCaseWithNSString:);
  methods[5].selector = @selector(toUpperCaseWithJavaLangCharSequence:);
  methods[6].selector = @selector(toUpperCaseWithChar:);
  methods[7].selector = @selector(isLowerCaseWithChar:);
  methods[8].selector = @selector(isUpperCaseWithChar:);
  methods[9].selector = @selector(truncateWithJavaLangCharSequence:withInt:withNSString:);
  methods[10].selector = @selector(equalsIgnoreCaseWithJavaLangCharSequence:withJavaLangCharSequence:);
  methods[11].selector = @selector(getAlphaIndexWithChar:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NUL", "B", .constantValue.asChar = ComGoogleCommonBaseAscii_NUL, 0x19, -1, -1, -1, -1 },
    { "SOH", "B", .constantValue.asChar = ComGoogleCommonBaseAscii_SOH, 0x19, -1, -1, -1, -1 },
    { "STX", "B", .constantValue.asChar = ComGoogleCommonBaseAscii_STX, 0x19, -1, -1, -1, -1 },
    { "ETX", "B", .constantValue.asChar = ComGoogleCommonBaseAscii_ETX, 0x19, -1, -1, -1, -1 },
    { "EOT", "B", .constantValue.asChar = ComGoogleCommonBaseAscii_EOT, 0x19, -1, -1, -1, -1 },
    { "ENQ", "B", .constantValue.asChar = ComGoogleCommonBaseAscii_ENQ, 0x19, -1, -1, -1, -1 },
    { "ACK", "B", .constantValue.asChar = ComGoogleCommonBaseAscii_ACK, 0x19, -1, -1, -1, -1 },
    { "BEL", "B", .constantValue.asChar = ComGoogleCommonBaseAscii_BEL, 0x19, -1, -1, -1, -1 },
    { "BS", "B", .constantValue.asChar = ComGoogleCommonBaseAscii_BS, 0x19, -1, -1, -1, -1 },
    { "HT", "B", .constantValue.asChar = ComGoogleCommonBaseAscii_HT, 0x19, -1, -1, -1, -1 },
    { "LF", "B", .constantValue.asChar = ComGoogleCommonBaseAscii_LF, 0x19, -1, -1, -1, -1 },
    { "NL", "B", .constantValue.asChar = ComGoogleCommonBaseAscii_NL, 0x19, -1, -1, -1, -1 },
    { "VT", "B", .constantValue.asChar = ComGoogleCommonBaseAscii_VT, 0x19, -1, -1, -1, -1 },
    { "FF", "B", .constantValue.asChar = ComGoogleCommonBaseAscii_FF, 0x19, -1, -1, -1, -1 },
    { "CR", "B", .constantValue.asChar = ComGoogleCommonBaseAscii_CR, 0x19, -1, -1, -1, -1 },
    { "SO", "B", .constantValue.asChar = ComGoogleCommonBaseAscii_SO, 0x19, -1, -1, -1, -1 },
    { "SI", "B", .constantValue.asChar = ComGoogleCommonBaseAscii_SI, 0x19, -1, -1, -1, -1 },
    { "DLE", "B", .constantValue.asChar = ComGoogleCommonBaseAscii_DLE, 0x19, -1, -1, -1, -1 },
    { "DC1", "B", .constantValue.asChar = ComGoogleCommonBaseAscii_DC1, 0x19, -1, -1, -1, -1 },
    { "XON", "B", .constantValue.asChar = ComGoogleCommonBaseAscii_XON, 0x19, -1, -1, -1, -1 },
    { "DC2", "B", .constantValue.asChar = ComGoogleCommonBaseAscii_DC2, 0x19, -1, -1, -1, -1 },
    { "DC3", "B", .constantValue.asChar = ComGoogleCommonBaseAscii_DC3, 0x19, -1, -1, -1, -1 },
    { "XOFF", "B", .constantValue.asChar = ComGoogleCommonBaseAscii_XOFF, 0x19, -1, -1, -1, -1 },
    { "DC4", "B", .constantValue.asChar = ComGoogleCommonBaseAscii_DC4, 0x19, -1, -1, -1, -1 },
    { "NAK", "B", .constantValue.asChar = ComGoogleCommonBaseAscii_NAK, 0x19, -1, -1, -1, -1 },
    { "SYN", "B", .constantValue.asChar = ComGoogleCommonBaseAscii_SYN, 0x19, -1, -1, -1, -1 },
    { "ETB", "B", .constantValue.asChar = ComGoogleCommonBaseAscii_ETB, 0x19, -1, -1, -1, -1 },
    { "CAN", "B", .constantValue.asChar = ComGoogleCommonBaseAscii_CAN, 0x19, -1, -1, -1, -1 },
    { "EM", "B", .constantValue.asChar = ComGoogleCommonBaseAscii_EM, 0x19, -1, -1, -1, -1 },
    { "SUB", "B", .constantValue.asChar = ComGoogleCommonBaseAscii_SUB, 0x19, -1, -1, -1, -1 },
    { "ESC", "B", .constantValue.asChar = ComGoogleCommonBaseAscii_ESC, 0x19, -1, -1, -1, -1 },
    { "FS", "B", .constantValue.asChar = ComGoogleCommonBaseAscii_FS, 0x19, -1, -1, -1, -1 },
    { "GS", "B", .constantValue.asChar = ComGoogleCommonBaseAscii_GS, 0x19, -1, -1, -1, -1 },
    { "RS", "B", .constantValue.asChar = ComGoogleCommonBaseAscii_RS, 0x19, -1, -1, -1, -1 },
    { "US", "B", .constantValue.asChar = ComGoogleCommonBaseAscii_US, 0x19, -1, -1, -1, -1 },
    { "SP", "B", .constantValue.asChar = ComGoogleCommonBaseAscii_SP, 0x19, -1, -1, -1, -1 },
    { "SPACE", "B", .constantValue.asChar = ComGoogleCommonBaseAscii_SPACE, 0x19, -1, -1, -1, -1 },
    { "DEL", "B", .constantValue.asChar = ComGoogleCommonBaseAscii_DEL, 0x19, -1, -1, -1, -1 },
    { "MIN", "C", .constantValue.asUnichar = ComGoogleCommonBaseAscii_MIN, 0x19, -1, -1, -1, -1 },
    { "MAX", "C", .constantValue.asUnichar = ComGoogleCommonBaseAscii_MAX, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "toLowerCase", "LNSString;", "LJavaLangCharSequence;", "C", "toUpperCase", "isLowerCase", "isUpperCase", "truncate", "LJavaLangCharSequence;ILNSString;", "equalsIgnoreCase", "LJavaLangCharSequence;LJavaLangCharSequence;", "getAlphaIndex" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseAscii = { "Ascii", "com.google.common.base", ptrTable, methods, fields, 7, 0x11, 12, 40, -1, -1, -1, -1, -1 };
  return &_ComGoogleCommonBaseAscii;
}

@end

void ComGoogleCommonBaseAscii_init(ComGoogleCommonBaseAscii *self) {
  NSObject_init(self);
}

ComGoogleCommonBaseAscii *new_ComGoogleCommonBaseAscii_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseAscii, init)
}

ComGoogleCommonBaseAscii *create_ComGoogleCommonBaseAscii_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonBaseAscii, init)
}

NSString *ComGoogleCommonBaseAscii_toLowerCaseWithNSString_(NSString *string) {
  ComGoogleCommonBaseAscii_initialize();
  jint length = [((NSString *) nil_chk(string)) java_length];
  for (jint i = 0; i < length; i++) {
    if (ComGoogleCommonBaseAscii_isUpperCaseWithChar_([string charAtWithInt:i])) {
      IOSCharArray *chars = [string java_toCharArray];
      for (; i < length; i++) {
        jchar c = IOSCharArray_Get(nil_chk(chars), i);
        if (ComGoogleCommonBaseAscii_isUpperCaseWithChar_(c)) {
          *IOSCharArray_GetRef(chars, i) = (jchar) (c ^ (jint) 0x20);
        }
      }
      return NSString_java_valueOfChars_(chars);
    }
  }
  return string;
}

NSString *ComGoogleCommonBaseAscii_toLowerCaseWithJavaLangCharSequence_(id<JavaLangCharSequence> chars) {
  ComGoogleCommonBaseAscii_initialize();
  if ([chars isKindOfClass:[NSString class]]) {
    return ComGoogleCommonBaseAscii_toLowerCaseWithNSString_((NSString *) cast_chk(chars, [NSString class]));
  }
  IOSCharArray *newChars = [IOSCharArray newArrayWithLength:[((id<JavaLangCharSequence>) nil_chk(chars)) java_length]];
  for (jint i = 0; i < newChars->size_; i++) {
    *IOSCharArray_GetRef(newChars, i) = ComGoogleCommonBaseAscii_toLowerCaseWithChar_([chars charAtWithInt:i]);
  }
  return NSString_java_valueOfChars_(newChars);
}

jchar ComGoogleCommonBaseAscii_toLowerCaseWithChar_(jchar c) {
  ComGoogleCommonBaseAscii_initialize();
  return ComGoogleCommonBaseAscii_isUpperCaseWithChar_(c) ? (jchar) (c ^ (jint) 0x20) : c;
}

NSString *ComGoogleCommonBaseAscii_toUpperCaseWithNSString_(NSString *string) {
  ComGoogleCommonBaseAscii_initialize();
  jint length = [((NSString *) nil_chk(string)) java_length];
  for (jint i = 0; i < length; i++) {
    if (ComGoogleCommonBaseAscii_isLowerCaseWithChar_([string charAtWithInt:i])) {
      IOSCharArray *chars = [string java_toCharArray];
      for (; i < length; i++) {
        jchar c = IOSCharArray_Get(nil_chk(chars), i);
        if (ComGoogleCommonBaseAscii_isLowerCaseWithChar_(c)) {
          *IOSCharArray_GetRef(chars, i) = (jchar) (c & (jint) 0x5f);
        }
      }
      return NSString_java_valueOfChars_(chars);
    }
  }
  return string;
}

NSString *ComGoogleCommonBaseAscii_toUpperCaseWithJavaLangCharSequence_(id<JavaLangCharSequence> chars) {
  ComGoogleCommonBaseAscii_initialize();
  if ([chars isKindOfClass:[NSString class]]) {
    return ComGoogleCommonBaseAscii_toUpperCaseWithNSString_((NSString *) cast_chk(chars, [NSString class]));
  }
  IOSCharArray *newChars = [IOSCharArray newArrayWithLength:[((id<JavaLangCharSequence>) nil_chk(chars)) java_length]];
  for (jint i = 0; i < newChars->size_; i++) {
    *IOSCharArray_GetRef(newChars, i) = ComGoogleCommonBaseAscii_toUpperCaseWithChar_([chars charAtWithInt:i]);
  }
  return NSString_java_valueOfChars_(newChars);
}

jchar ComGoogleCommonBaseAscii_toUpperCaseWithChar_(jchar c) {
  ComGoogleCommonBaseAscii_initialize();
  return ComGoogleCommonBaseAscii_isLowerCaseWithChar_(c) ? (jchar) (c & (jint) 0x5f) : c;
}

jboolean ComGoogleCommonBaseAscii_isLowerCaseWithChar_(jchar c) {
  ComGoogleCommonBaseAscii_initialize();
  return (c >= 'a') && (c <= 'z');
}

jboolean ComGoogleCommonBaseAscii_isUpperCaseWithChar_(jchar c) {
  ComGoogleCommonBaseAscii_initialize();
  return (c >= 'A') && (c <= 'Z');
}

NSString *ComGoogleCommonBaseAscii_truncateWithJavaLangCharSequence_withInt_withNSString_(id<JavaLangCharSequence> seq, jint maxLength, NSString *truncationIndicator) {
  ComGoogleCommonBaseAscii_initialize();
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(seq);
  jint truncationLength = maxLength - [((NSString *) nil_chk(truncationIndicator)) java_length];
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withInt_withInt_(truncationLength >= 0, @"maxLength (%s) must be >= length of the truncation indicator (%s)", maxLength, [truncationIndicator java_length]);
  if ([((id<JavaLangCharSequence>) nil_chk(seq)) java_length] <= maxLength) {
    NSString *string = [seq description];
    if ([((NSString *) nil_chk(string)) java_length] <= maxLength) {
      return string;
    }
    seq = string;
  }
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([new_JavaLangStringBuilder_initWithInt_(maxLength) appendWithJavaLangCharSequence:seq withInt:0 withInt:truncationLength])) appendWithNSString:truncationIndicator])) description];
}

jboolean ComGoogleCommonBaseAscii_equalsIgnoreCaseWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> s1, id<JavaLangCharSequence> s2) {
  ComGoogleCommonBaseAscii_initialize();
  jint length = [((id<JavaLangCharSequence>) nil_chk(s1)) java_length];
  if (s1 == s2) {
    return true;
  }
  if (length != [((id<JavaLangCharSequence>) nil_chk(s2)) java_length]) {
    return false;
  }
  for (jint i = 0; i < length; i++) {
    jchar c1 = [s1 charAtWithInt:i];
    jchar c2 = [s2 charAtWithInt:i];
    if (c1 == c2) {
      continue;
    }
    jint alphaIndex = ComGoogleCommonBaseAscii_getAlphaIndexWithChar_(c1);
    if (alphaIndex < 26 && alphaIndex == ComGoogleCommonBaseAscii_getAlphaIndexWithChar_(c2)) {
      continue;
    }
    return false;
  }
  return true;
}

jint ComGoogleCommonBaseAscii_getAlphaIndexWithChar_(jchar c) {
  ComGoogleCommonBaseAscii_initialize();
  return (jchar) ((c | (jint) 0x20) - 'a');
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonBaseAscii)
