//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/base/CaseFormat.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Ascii.h"
#include "com/google/common/base/CaseFormat.h"
#include "com/google/common/base/CharMatcher.h"
#include "com/google/common/base/Converter.h"
#include "com/google/common/base/Preconditions.h"
#include "java/io/Serializable.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/annotation/Annotation.h"
#include "javax/annotation/Nullable.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ComGoogleCommonBaseCaseFormat () {
 @public
  ComGoogleCommonBaseCharMatcher *wordBoundary_;
  NSString *wordSeparator_;
}

- (NSString *)normalizeFirstWordWithNSString:(NSString *)word;

+ (NSString *)firstCharOnlyToUpperWithNSString:(NSString *)word;

@end

J2OBJC_FIELD_SETTER(ComGoogleCommonBaseCaseFormat, wordBoundary_, ComGoogleCommonBaseCharMatcher *)
J2OBJC_FIELD_SETTER(ComGoogleCommonBaseCaseFormat, wordSeparator_, NSString *)

__attribute__((unused)) static void ComGoogleCommonBaseCaseFormat_initWithComGoogleCommonBaseCharMatcher_withNSString_withNSString_withInt_(ComGoogleCommonBaseCaseFormat *self, ComGoogleCommonBaseCharMatcher *wordBoundary, NSString *wordSeparator, NSString *__name, jint __ordinal);

__attribute__((unused)) static ComGoogleCommonBaseCaseFormat *new_ComGoogleCommonBaseCaseFormat_initWithComGoogleCommonBaseCharMatcher_withNSString_withNSString_withInt_(ComGoogleCommonBaseCharMatcher *wordBoundary, NSString *wordSeparator, NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

__attribute__((unused)) static NSString *ComGoogleCommonBaseCaseFormat_toWithComGoogleCommonBaseCaseFormat_withNSString_(ComGoogleCommonBaseCaseFormat *self, ComGoogleCommonBaseCaseFormat *format, NSString *str);

__attribute__((unused)) static NSString *ComGoogleCommonBaseCaseFormat_normalizeFirstWordWithNSString_(ComGoogleCommonBaseCaseFormat *self, NSString *word);

__attribute__((unused)) static NSString *ComGoogleCommonBaseCaseFormat_firstCharOnlyToUpperWithNSString_(NSString *word);

@interface ComGoogleCommonBaseCaseFormat_1 : ComGoogleCommonBaseCaseFormat < NSCopying >

- (NSString *)normalizeWordWithNSString:(NSString *)word;

- (NSString *)convertWithComGoogleCommonBaseCaseFormat:(ComGoogleCommonBaseCaseFormat *)format
                                          withNSString:(NSString *)s;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonBaseCaseFormat_1)

__attribute__((unused)) static void ComGoogleCommonBaseCaseFormat_1_initWithComGoogleCommonBaseCharMatcher_withNSString_withNSString_withInt_(ComGoogleCommonBaseCaseFormat_1 *self, ComGoogleCommonBaseCharMatcher *wordBoundary, NSString *wordSeparator, NSString *__name, jint __ordinal);

__attribute__((unused)) static ComGoogleCommonBaseCaseFormat_1 *new_ComGoogleCommonBaseCaseFormat_1_initWithComGoogleCommonBaseCharMatcher_withNSString_withNSString_withInt_(ComGoogleCommonBaseCharMatcher *wordBoundary, NSString *wordSeparator, NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface ComGoogleCommonBaseCaseFormat_2 : ComGoogleCommonBaseCaseFormat < NSCopying >

- (NSString *)normalizeWordWithNSString:(NSString *)word;

- (NSString *)convertWithComGoogleCommonBaseCaseFormat:(ComGoogleCommonBaseCaseFormat *)format
                                          withNSString:(NSString *)s;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonBaseCaseFormat_2)

__attribute__((unused)) static void ComGoogleCommonBaseCaseFormat_2_initWithComGoogleCommonBaseCharMatcher_withNSString_withNSString_withInt_(ComGoogleCommonBaseCaseFormat_2 *self, ComGoogleCommonBaseCharMatcher *wordBoundary, NSString *wordSeparator, NSString *__name, jint __ordinal);

__attribute__((unused)) static ComGoogleCommonBaseCaseFormat_2 *new_ComGoogleCommonBaseCaseFormat_2_initWithComGoogleCommonBaseCharMatcher_withNSString_withNSString_withInt_(ComGoogleCommonBaseCharMatcher *wordBoundary, NSString *wordSeparator, NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface ComGoogleCommonBaseCaseFormat_3 : ComGoogleCommonBaseCaseFormat < NSCopying >

- (NSString *)normalizeWordWithNSString:(NSString *)word;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonBaseCaseFormat_3)

__attribute__((unused)) static void ComGoogleCommonBaseCaseFormat_3_initWithComGoogleCommonBaseCharMatcher_withNSString_withNSString_withInt_(ComGoogleCommonBaseCaseFormat_3 *self, ComGoogleCommonBaseCharMatcher *wordBoundary, NSString *wordSeparator, NSString *__name, jint __ordinal);

__attribute__((unused)) static ComGoogleCommonBaseCaseFormat_3 *new_ComGoogleCommonBaseCaseFormat_3_initWithComGoogleCommonBaseCharMatcher_withNSString_withNSString_withInt_(ComGoogleCommonBaseCharMatcher *wordBoundary, NSString *wordSeparator, NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface ComGoogleCommonBaseCaseFormat_4 : ComGoogleCommonBaseCaseFormat < NSCopying >

- (NSString *)normalizeWordWithNSString:(NSString *)word;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonBaseCaseFormat_4)

__attribute__((unused)) static void ComGoogleCommonBaseCaseFormat_4_initWithComGoogleCommonBaseCharMatcher_withNSString_withNSString_withInt_(ComGoogleCommonBaseCaseFormat_4 *self, ComGoogleCommonBaseCharMatcher *wordBoundary, NSString *wordSeparator, NSString *__name, jint __ordinal);

__attribute__((unused)) static ComGoogleCommonBaseCaseFormat_4 *new_ComGoogleCommonBaseCaseFormat_4_initWithComGoogleCommonBaseCharMatcher_withNSString_withNSString_withInt_(ComGoogleCommonBaseCharMatcher *wordBoundary, NSString *wordSeparator, NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface ComGoogleCommonBaseCaseFormat_5 : ComGoogleCommonBaseCaseFormat < NSCopying >

- (NSString *)normalizeWordWithNSString:(NSString *)word;

- (NSString *)convertWithComGoogleCommonBaseCaseFormat:(ComGoogleCommonBaseCaseFormat *)format
                                          withNSString:(NSString *)s;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonBaseCaseFormat_5)

__attribute__((unused)) static void ComGoogleCommonBaseCaseFormat_5_initWithComGoogleCommonBaseCharMatcher_withNSString_withNSString_withInt_(ComGoogleCommonBaseCaseFormat_5 *self, ComGoogleCommonBaseCharMatcher *wordBoundary, NSString *wordSeparator, NSString *__name, jint __ordinal);

__attribute__((unused)) static ComGoogleCommonBaseCaseFormat_5 *new_ComGoogleCommonBaseCaseFormat_5_initWithComGoogleCommonBaseCharMatcher_withNSString_withNSString_withInt_(ComGoogleCommonBaseCharMatcher *wordBoundary, NSString *wordSeparator, NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface ComGoogleCommonBaseCaseFormat_StringConverter : ComGoogleCommonBaseConverter < JavaIoSerializable > {
 @public
  ComGoogleCommonBaseCaseFormat *sourceFormat_;
  ComGoogleCommonBaseCaseFormat *targetFormat_;
}

- (instancetype)initWithComGoogleCommonBaseCaseFormat:(ComGoogleCommonBaseCaseFormat *)sourceFormat
                    withComGoogleCommonBaseCaseFormat:(ComGoogleCommonBaseCaseFormat *)targetFormat;

- (NSString *)doForwardWithId:(NSString *)s;

- (NSString *)doBackwardWithId:(NSString *)s;

- (jboolean)isEqual:(id)object;

- (NSUInteger)hash;

- (NSString *)description;

- (NSString *)applyWithId:(NSString *)arg0;

- (NSString *)correctedDoForwardWithId:(NSString *)arg0;

- (NSString *)convertWithId:(NSString *)arg0;

- (NSString *)correctedDoBackwardWithId:(NSString *)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonBaseCaseFormat_StringConverter)

J2OBJC_FIELD_SETTER(ComGoogleCommonBaseCaseFormat_StringConverter, sourceFormat_, ComGoogleCommonBaseCaseFormat *)
J2OBJC_FIELD_SETTER(ComGoogleCommonBaseCaseFormat_StringConverter, targetFormat_, ComGoogleCommonBaseCaseFormat *)

inline jlong ComGoogleCommonBaseCaseFormat_StringConverter_get_serialVersionUID();
#define ComGoogleCommonBaseCaseFormat_StringConverter_serialVersionUID 0LL
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonBaseCaseFormat_StringConverter, serialVersionUID, jlong)

__attribute__((unused)) static void ComGoogleCommonBaseCaseFormat_StringConverter_initWithComGoogleCommonBaseCaseFormat_withComGoogleCommonBaseCaseFormat_(ComGoogleCommonBaseCaseFormat_StringConverter *self, ComGoogleCommonBaseCaseFormat *sourceFormat, ComGoogleCommonBaseCaseFormat *targetFormat);

__attribute__((unused)) static ComGoogleCommonBaseCaseFormat_StringConverter *new_ComGoogleCommonBaseCaseFormat_StringConverter_initWithComGoogleCommonBaseCaseFormat_withComGoogleCommonBaseCaseFormat_(ComGoogleCommonBaseCaseFormat *sourceFormat, ComGoogleCommonBaseCaseFormat *targetFormat) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonBaseCaseFormat_StringConverter *create_ComGoogleCommonBaseCaseFormat_StringConverter_initWithComGoogleCommonBaseCaseFormat_withComGoogleCommonBaseCaseFormat_(ComGoogleCommonBaseCaseFormat *sourceFormat, ComGoogleCommonBaseCaseFormat *targetFormat);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonBaseCaseFormat_StringConverter__Annotations$0();

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonBaseCaseFormat_StringConverter)

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonBaseCaseFormat)

ComGoogleCommonBaseCaseFormat *ComGoogleCommonBaseCaseFormat_values_[5];

@implementation ComGoogleCommonBaseCaseFormat

- (NSString *)toWithComGoogleCommonBaseCaseFormat:(ComGoogleCommonBaseCaseFormat *)format
                                     withNSString:(NSString *)str {
  return ComGoogleCommonBaseCaseFormat_toWithComGoogleCommonBaseCaseFormat_withNSString_(self, format, str);
}

- (NSString *)convertWithComGoogleCommonBaseCaseFormat:(ComGoogleCommonBaseCaseFormat *)format
                                          withNSString:(NSString *)s {
  JavaLangStringBuilder *out = nil;
  jint i = 0;
  jint j = -1;
  while (true) {
    jint unseq$1 = ++j;
    if (!((j = [((ComGoogleCommonBaseCharMatcher *) nil_chk(wordBoundary_)) indexInWithJavaLangCharSequence:s withInt:unseq$1]) != -1)) break;
    if (i == 0) {
      out = new_JavaLangStringBuilder_initWithInt_([((NSString *) nil_chk(s)) java_length] + 4 * [((NSString *) nil_chk(wordSeparator_)) java_length]);
      (void) [out appendWithNSString:ComGoogleCommonBaseCaseFormat_normalizeFirstWordWithNSString_(nil_chk(format), [s java_substring:i endIndex:j])];
    }
    else {
      (void) [((JavaLangStringBuilder *) nil_chk(out)) appendWithNSString:[((ComGoogleCommonBaseCaseFormat *) nil_chk(format)) normalizeWordWithNSString:[((NSString *) nil_chk(s)) java_substring:i endIndex:j]]];
    }
    (void) [out appendWithNSString:format->wordSeparator_];
    i = j + [((NSString *) nil_chk(wordSeparator_)) java_length];
  }
  return (i == 0) ? ComGoogleCommonBaseCaseFormat_normalizeFirstWordWithNSString_(nil_chk(format), s) : [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(out)) appendWithNSString:[((ComGoogleCommonBaseCaseFormat *) nil_chk(format)) normalizeWordWithNSString:[((NSString *) nil_chk(s)) java_substring:i]]])) description];
}

- (ComGoogleCommonBaseConverter *)converterToWithComGoogleCommonBaseCaseFormat:(ComGoogleCommonBaseCaseFormat *)targetFormat {
  return new_ComGoogleCommonBaseCaseFormat_StringConverter_initWithComGoogleCommonBaseCaseFormat_withComGoogleCommonBaseCaseFormat_(self, targetFormat);
}

- (NSString *)normalizeWordWithNSString:(NSString *)word {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)normalizeFirstWordWithNSString:(NSString *)word {
  return ComGoogleCommonBaseCaseFormat_normalizeFirstWordWithNSString_(self, word);
}

+ (NSString *)firstCharOnlyToUpperWithNSString:(NSString *)word {
  return ComGoogleCommonBaseCaseFormat_firstCharOnlyToUpperWithNSString_(word);
}

+ (IOSObjectArray *)values {
  return ComGoogleCommonBaseCaseFormat_values();
}

+ (ComGoogleCommonBaseCaseFormat *)valueOfWithNSString:(NSString *)name {
  return ComGoogleCommonBaseCaseFormat_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x11, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 2, 1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseConverter;", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "LNSString;", 0x400, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 8, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 9, 7, -1, -1, -1, -1 },
    { NULL, "[LComGoogleCommonBaseCaseFormat;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseCaseFormat;", 0x9, 10, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(toWithComGoogleCommonBaseCaseFormat:withNSString:);
  methods[1].selector = @selector(convertWithComGoogleCommonBaseCaseFormat:withNSString:);
  methods[2].selector = @selector(converterToWithComGoogleCommonBaseCaseFormat:);
  methods[3].selector = @selector(normalizeWordWithNSString:);
  methods[4].selector = @selector(normalizeFirstWordWithNSString:);
  methods[5].selector = @selector(firstCharOnlyToUpperWithNSString:);
  methods[6].selector = @selector(values);
  methods[7].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOWER_HYPHEN", "LComGoogleCommonBaseCaseFormat;", .constantValue.asLong = 0, 0x4019, -1, 11, -1, -1 },
    { "LOWER_UNDERSCORE", "LComGoogleCommonBaseCaseFormat;", .constantValue.asLong = 0, 0x4019, -1, 12, -1, -1 },
    { "LOWER_CAMEL", "LComGoogleCommonBaseCaseFormat;", .constantValue.asLong = 0, 0x4019, -1, 13, -1, -1 },
    { "UPPER_CAMEL", "LComGoogleCommonBaseCaseFormat;", .constantValue.asLong = 0, 0x4019, -1, 14, -1, -1 },
    { "UPPER_UNDERSCORE", "LComGoogleCommonBaseCaseFormat;", .constantValue.asLong = 0, 0x4019, -1, 15, -1, -1 },
    { "wordBoundary_", "LComGoogleCommonBaseCharMatcher;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "wordSeparator_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "to", "LComGoogleCommonBaseCaseFormat;LNSString;", "convert", "converterTo", "LComGoogleCommonBaseCaseFormat;", "(Lcom/google/common/base/CaseFormat;)Lcom/google/common/base/Converter<Ljava/lang/String;Ljava/lang/String;>;", "normalizeWord", "LNSString;", "normalizeFirstWord", "firstCharOnlyToUpper", "valueOf", &JreEnum(ComGoogleCommonBaseCaseFormat, LOWER_HYPHEN), &JreEnum(ComGoogleCommonBaseCaseFormat, LOWER_UNDERSCORE), &JreEnum(ComGoogleCommonBaseCaseFormat, LOWER_CAMEL), &JreEnum(ComGoogleCommonBaseCaseFormat, UPPER_CAMEL), &JreEnum(ComGoogleCommonBaseCaseFormat, UPPER_UNDERSCORE), "LComGoogleCommonBaseCaseFormat_StringConverter;", "Ljava/lang/Enum<Lcom/google/common/base/CaseFormat;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseCaseFormat = { "CaseFormat", "com.google.common.base", ptrTable, methods, fields, 7, 0x4401, 8, 7, -1, 16, -1, 17, -1 };
  return &_ComGoogleCommonBaseCaseFormat;
}

+ (void)initialize {
  if (self == [ComGoogleCommonBaseCaseFormat class]) {
    JreEnum(ComGoogleCommonBaseCaseFormat, LOWER_HYPHEN) = new_ComGoogleCommonBaseCaseFormat_1_initWithComGoogleCommonBaseCharMatcher_withNSString_withNSString_withInt_(ComGoogleCommonBaseCharMatcher_isWithChar_('-'), @"-", @"LOWER_HYPHEN", 0);
    JreEnum(ComGoogleCommonBaseCaseFormat, LOWER_UNDERSCORE) = new_ComGoogleCommonBaseCaseFormat_2_initWithComGoogleCommonBaseCharMatcher_withNSString_withNSString_withInt_(ComGoogleCommonBaseCharMatcher_isWithChar_('_'), @"_", @"LOWER_UNDERSCORE", 1);
    JreEnum(ComGoogleCommonBaseCaseFormat, LOWER_CAMEL) = new_ComGoogleCommonBaseCaseFormat_3_initWithComGoogleCommonBaseCharMatcher_withNSString_withNSString_withInt_(ComGoogleCommonBaseCharMatcher_inRangeWithChar_withChar_('A', 'Z'), @"", @"LOWER_CAMEL", 2);
    JreEnum(ComGoogleCommonBaseCaseFormat, UPPER_CAMEL) = new_ComGoogleCommonBaseCaseFormat_4_initWithComGoogleCommonBaseCharMatcher_withNSString_withNSString_withInt_(ComGoogleCommonBaseCharMatcher_inRangeWithChar_withChar_('A', 'Z'), @"", @"UPPER_CAMEL", 3);
    JreEnum(ComGoogleCommonBaseCaseFormat, UPPER_UNDERSCORE) = new_ComGoogleCommonBaseCaseFormat_5_initWithComGoogleCommonBaseCharMatcher_withNSString_withNSString_withInt_(ComGoogleCommonBaseCharMatcher_isWithChar_('_'), @"_", @"UPPER_UNDERSCORE", 4);
    J2OBJC_SET_INITIALIZED(ComGoogleCommonBaseCaseFormat)
  }
}

@end

void ComGoogleCommonBaseCaseFormat_initWithComGoogleCommonBaseCharMatcher_withNSString_withNSString_withInt_(ComGoogleCommonBaseCaseFormat *self, ComGoogleCommonBaseCharMatcher *wordBoundary, NSString *wordSeparator, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
  self->wordBoundary_ = wordBoundary;
  self->wordSeparator_ = wordSeparator;
}

ComGoogleCommonBaseCaseFormat *new_ComGoogleCommonBaseCaseFormat_initWithComGoogleCommonBaseCharMatcher_withNSString_withNSString_withInt_(ComGoogleCommonBaseCharMatcher *wordBoundary, NSString *wordSeparator, NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseCaseFormat, initWithComGoogleCommonBaseCharMatcher_withNSString_withNSString_withInt_, wordBoundary, wordSeparator, __name, __ordinal)
}

NSString *ComGoogleCommonBaseCaseFormat_toWithComGoogleCommonBaseCaseFormat_withNSString_(ComGoogleCommonBaseCaseFormat *self, ComGoogleCommonBaseCaseFormat *format, NSString *str) {
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(format);
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(str);
  return (format == self) ? str : [self convertWithComGoogleCommonBaseCaseFormat:format withNSString:str];
}

NSString *ComGoogleCommonBaseCaseFormat_normalizeFirstWordWithNSString_(ComGoogleCommonBaseCaseFormat *self, NSString *word) {
  return (self == JreEnum(ComGoogleCommonBaseCaseFormat, LOWER_CAMEL)) ? ComGoogleCommonBaseAscii_toLowerCaseWithNSString_(word) : [self normalizeWordWithNSString:word];
}

NSString *ComGoogleCommonBaseCaseFormat_firstCharOnlyToUpperWithNSString_(NSString *word) {
  ComGoogleCommonBaseCaseFormat_initialize();
  return ([((NSString *) nil_chk(word)) java_isEmpty]) ? word : JreStrcat("C$", ComGoogleCommonBaseAscii_toUpperCaseWithChar_([word charAtWithInt:0]), ComGoogleCommonBaseAscii_toLowerCaseWithNSString_([word java_substring:1]));
}

IOSObjectArray *ComGoogleCommonBaseCaseFormat_values() {
  ComGoogleCommonBaseCaseFormat_initialize();
  return [IOSObjectArray arrayWithObjects:ComGoogleCommonBaseCaseFormat_values_ count:5 type:ComGoogleCommonBaseCaseFormat_class_()];
}

ComGoogleCommonBaseCaseFormat *ComGoogleCommonBaseCaseFormat_valueOfWithNSString_(NSString *name) {
  ComGoogleCommonBaseCaseFormat_initialize();
  for (int i = 0; i < 5; i++) {
    ComGoogleCommonBaseCaseFormat *e = ComGoogleCommonBaseCaseFormat_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ComGoogleCommonBaseCaseFormat *ComGoogleCommonBaseCaseFormat_fromOrdinal(NSUInteger ordinal) {
  ComGoogleCommonBaseCaseFormat_initialize();
  if (ordinal >= 5) {
    return nil;
  }
  return ComGoogleCommonBaseCaseFormat_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonBaseCaseFormat)

@implementation ComGoogleCommonBaseCaseFormat_1

- (NSString *)normalizeWordWithNSString:(NSString *)word {
  return ComGoogleCommonBaseAscii_toLowerCaseWithNSString_(word);
}

- (NSString *)convertWithComGoogleCommonBaseCaseFormat:(ComGoogleCommonBaseCaseFormat *)format
                                          withNSString:(NSString *)s {
  if (format == JreLoadEnum(ComGoogleCommonBaseCaseFormat, LOWER_UNDERSCORE)) {
    return [((NSString *) nil_chk(s)) java_replace:'-' withChar:'_'];
  }
  if (format == JreLoadEnum(ComGoogleCommonBaseCaseFormat, UPPER_UNDERSCORE)) {
    return ComGoogleCommonBaseAscii_toUpperCaseWithNSString_([((NSString *) nil_chk(s)) java_replace:'-' withChar:'_']);
  }
  return [super convertWithComGoogleCommonBaseCaseFormat:format withNSString:s];
}

- (void)dealloc {
  JreCheckFinalize(self, [ComGoogleCommonBaseCaseFormat_1 class]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(normalizeWordWithNSString:);
  methods[1].selector = @selector(convertWithComGoogleCommonBaseCaseFormat:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "normalizeWord", "LNSString;", "convert", "LComGoogleCommonBaseCaseFormat;LNSString;", "LComGoogleCommonBaseCaseFormat;" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseCaseFormat_1 = { "", "com.google.common.base", ptrTable, methods, NULL, 7, 0xc018, 2, 0, 4, -1, -1, -1, -1 };
  return &_ComGoogleCommonBaseCaseFormat_1;
}

@end

void ComGoogleCommonBaseCaseFormat_1_initWithComGoogleCommonBaseCharMatcher_withNSString_withNSString_withInt_(ComGoogleCommonBaseCaseFormat_1 *self, ComGoogleCommonBaseCharMatcher *wordBoundary, NSString *wordSeparator, NSString *__name, jint __ordinal) {
  ComGoogleCommonBaseCaseFormat_initWithComGoogleCommonBaseCharMatcher_withNSString_withNSString_withInt_(self, wordBoundary, wordSeparator, __name, __ordinal);
}

ComGoogleCommonBaseCaseFormat_1 *new_ComGoogleCommonBaseCaseFormat_1_initWithComGoogleCommonBaseCharMatcher_withNSString_withNSString_withInt_(ComGoogleCommonBaseCharMatcher *wordBoundary, NSString *wordSeparator, NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseCaseFormat_1, initWithComGoogleCommonBaseCharMatcher_withNSString_withNSString_withInt_, wordBoundary, wordSeparator, __name, __ordinal)
}

@implementation ComGoogleCommonBaseCaseFormat_2

- (NSString *)normalizeWordWithNSString:(NSString *)word {
  return ComGoogleCommonBaseAscii_toLowerCaseWithNSString_(word);
}

- (NSString *)convertWithComGoogleCommonBaseCaseFormat:(ComGoogleCommonBaseCaseFormat *)format
                                          withNSString:(NSString *)s {
  if (format == JreLoadEnum(ComGoogleCommonBaseCaseFormat, LOWER_HYPHEN)) {
    return [((NSString *) nil_chk(s)) java_replace:'_' withChar:'-'];
  }
  if (format == JreLoadEnum(ComGoogleCommonBaseCaseFormat, UPPER_UNDERSCORE)) {
    return ComGoogleCommonBaseAscii_toUpperCaseWithNSString_(s);
  }
  return [super convertWithComGoogleCommonBaseCaseFormat:format withNSString:s];
}

- (void)dealloc {
  JreCheckFinalize(self, [ComGoogleCommonBaseCaseFormat_2 class]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(normalizeWordWithNSString:);
  methods[1].selector = @selector(convertWithComGoogleCommonBaseCaseFormat:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "normalizeWord", "LNSString;", "convert", "LComGoogleCommonBaseCaseFormat;LNSString;", "LComGoogleCommonBaseCaseFormat;" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseCaseFormat_2 = { "", "com.google.common.base", ptrTable, methods, NULL, 7, 0xc018, 2, 0, 4, -1, -1, -1, -1 };
  return &_ComGoogleCommonBaseCaseFormat_2;
}

@end

void ComGoogleCommonBaseCaseFormat_2_initWithComGoogleCommonBaseCharMatcher_withNSString_withNSString_withInt_(ComGoogleCommonBaseCaseFormat_2 *self, ComGoogleCommonBaseCharMatcher *wordBoundary, NSString *wordSeparator, NSString *__name, jint __ordinal) {
  ComGoogleCommonBaseCaseFormat_initWithComGoogleCommonBaseCharMatcher_withNSString_withNSString_withInt_(self, wordBoundary, wordSeparator, __name, __ordinal);
}

ComGoogleCommonBaseCaseFormat_2 *new_ComGoogleCommonBaseCaseFormat_2_initWithComGoogleCommonBaseCharMatcher_withNSString_withNSString_withInt_(ComGoogleCommonBaseCharMatcher *wordBoundary, NSString *wordSeparator, NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseCaseFormat_2, initWithComGoogleCommonBaseCharMatcher_withNSString_withNSString_withInt_, wordBoundary, wordSeparator, __name, __ordinal)
}

@implementation ComGoogleCommonBaseCaseFormat_3

- (NSString *)normalizeWordWithNSString:(NSString *)word {
  return ComGoogleCommonBaseCaseFormat_firstCharOnlyToUpperWithNSString_(word);
}

- (void)dealloc {
  JreCheckFinalize(self, [ComGoogleCommonBaseCaseFormat_3 class]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x0, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(normalizeWordWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "normalizeWord", "LNSString;", "LComGoogleCommonBaseCaseFormat;" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseCaseFormat_3 = { "", "com.google.common.base", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 2, -1, -1, -1, -1 };
  return &_ComGoogleCommonBaseCaseFormat_3;
}

@end

void ComGoogleCommonBaseCaseFormat_3_initWithComGoogleCommonBaseCharMatcher_withNSString_withNSString_withInt_(ComGoogleCommonBaseCaseFormat_3 *self, ComGoogleCommonBaseCharMatcher *wordBoundary, NSString *wordSeparator, NSString *__name, jint __ordinal) {
  ComGoogleCommonBaseCaseFormat_initWithComGoogleCommonBaseCharMatcher_withNSString_withNSString_withInt_(self, wordBoundary, wordSeparator, __name, __ordinal);
}

ComGoogleCommonBaseCaseFormat_3 *new_ComGoogleCommonBaseCaseFormat_3_initWithComGoogleCommonBaseCharMatcher_withNSString_withNSString_withInt_(ComGoogleCommonBaseCharMatcher *wordBoundary, NSString *wordSeparator, NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseCaseFormat_3, initWithComGoogleCommonBaseCharMatcher_withNSString_withNSString_withInt_, wordBoundary, wordSeparator, __name, __ordinal)
}

@implementation ComGoogleCommonBaseCaseFormat_4

- (NSString *)normalizeWordWithNSString:(NSString *)word {
  return ComGoogleCommonBaseCaseFormat_firstCharOnlyToUpperWithNSString_(word);
}

- (void)dealloc {
  JreCheckFinalize(self, [ComGoogleCommonBaseCaseFormat_4 class]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x0, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(normalizeWordWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "normalizeWord", "LNSString;", "LComGoogleCommonBaseCaseFormat;" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseCaseFormat_4 = { "", "com.google.common.base", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 2, -1, -1, -1, -1 };
  return &_ComGoogleCommonBaseCaseFormat_4;
}

@end

void ComGoogleCommonBaseCaseFormat_4_initWithComGoogleCommonBaseCharMatcher_withNSString_withNSString_withInt_(ComGoogleCommonBaseCaseFormat_4 *self, ComGoogleCommonBaseCharMatcher *wordBoundary, NSString *wordSeparator, NSString *__name, jint __ordinal) {
  ComGoogleCommonBaseCaseFormat_initWithComGoogleCommonBaseCharMatcher_withNSString_withNSString_withInt_(self, wordBoundary, wordSeparator, __name, __ordinal);
}

ComGoogleCommonBaseCaseFormat_4 *new_ComGoogleCommonBaseCaseFormat_4_initWithComGoogleCommonBaseCharMatcher_withNSString_withNSString_withInt_(ComGoogleCommonBaseCharMatcher *wordBoundary, NSString *wordSeparator, NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseCaseFormat_4, initWithComGoogleCommonBaseCharMatcher_withNSString_withNSString_withInt_, wordBoundary, wordSeparator, __name, __ordinal)
}

@implementation ComGoogleCommonBaseCaseFormat_5

- (NSString *)normalizeWordWithNSString:(NSString *)word {
  return ComGoogleCommonBaseAscii_toUpperCaseWithNSString_(word);
}

- (NSString *)convertWithComGoogleCommonBaseCaseFormat:(ComGoogleCommonBaseCaseFormat *)format
                                          withNSString:(NSString *)s {
  if (format == JreLoadEnum(ComGoogleCommonBaseCaseFormat, LOWER_HYPHEN)) {
    return ComGoogleCommonBaseAscii_toLowerCaseWithNSString_([((NSString *) nil_chk(s)) java_replace:'_' withChar:'-']);
  }
  if (format == JreLoadEnum(ComGoogleCommonBaseCaseFormat, LOWER_UNDERSCORE)) {
    return ComGoogleCommonBaseAscii_toLowerCaseWithNSString_(s);
  }
  return [super convertWithComGoogleCommonBaseCaseFormat:format withNSString:s];
}

- (void)dealloc {
  JreCheckFinalize(self, [ComGoogleCommonBaseCaseFormat_5 class]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(normalizeWordWithNSString:);
  methods[1].selector = @selector(convertWithComGoogleCommonBaseCaseFormat:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "normalizeWord", "LNSString;", "convert", "LComGoogleCommonBaseCaseFormat;LNSString;", "LComGoogleCommonBaseCaseFormat;" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseCaseFormat_5 = { "", "com.google.common.base", ptrTable, methods, NULL, 7, 0xc018, 2, 0, 4, -1, -1, -1, -1 };
  return &_ComGoogleCommonBaseCaseFormat_5;
}

@end

void ComGoogleCommonBaseCaseFormat_5_initWithComGoogleCommonBaseCharMatcher_withNSString_withNSString_withInt_(ComGoogleCommonBaseCaseFormat_5 *self, ComGoogleCommonBaseCharMatcher *wordBoundary, NSString *wordSeparator, NSString *__name, jint __ordinal) {
  ComGoogleCommonBaseCaseFormat_initWithComGoogleCommonBaseCharMatcher_withNSString_withNSString_withInt_(self, wordBoundary, wordSeparator, __name, __ordinal);
}

ComGoogleCommonBaseCaseFormat_5 *new_ComGoogleCommonBaseCaseFormat_5_initWithComGoogleCommonBaseCharMatcher_withNSString_withNSString_withInt_(ComGoogleCommonBaseCharMatcher *wordBoundary, NSString *wordSeparator, NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseCaseFormat_5, initWithComGoogleCommonBaseCharMatcher_withNSString_withNSString_withInt_, wordBoundary, wordSeparator, __name, __ordinal)
}

@implementation ComGoogleCommonBaseCaseFormat_StringConverter

- (instancetype)initWithComGoogleCommonBaseCaseFormat:(ComGoogleCommonBaseCaseFormat *)sourceFormat
                    withComGoogleCommonBaseCaseFormat:(ComGoogleCommonBaseCaseFormat *)targetFormat {
  ComGoogleCommonBaseCaseFormat_StringConverter_initWithComGoogleCommonBaseCaseFormat_withComGoogleCommonBaseCaseFormat_(self, sourceFormat, targetFormat);
  return self;
}

- (NSString *)doForwardWithId:(NSString *)s {
  return ComGoogleCommonBaseCaseFormat_toWithComGoogleCommonBaseCaseFormat_withNSString_(nil_chk(sourceFormat_), targetFormat_, s);
}

- (NSString *)doBackwardWithId:(NSString *)s {
  return ComGoogleCommonBaseCaseFormat_toWithComGoogleCommonBaseCaseFormat_withNSString_(nil_chk(targetFormat_), sourceFormat_, s);
}

- (jboolean)isEqual:(id)object {
  if ([object isKindOfClass:[ComGoogleCommonBaseCaseFormat_StringConverter class]]) {
    ComGoogleCommonBaseCaseFormat_StringConverter *that = (ComGoogleCommonBaseCaseFormat_StringConverter *) cast_chk(object, [ComGoogleCommonBaseCaseFormat_StringConverter class]);
    return [((ComGoogleCommonBaseCaseFormat *) nil_chk(sourceFormat_)) isEqual:((ComGoogleCommonBaseCaseFormat_StringConverter *) nil_chk(that))->sourceFormat_] && [((ComGoogleCommonBaseCaseFormat *) nil_chk(targetFormat_)) isEqual:that->targetFormat_];
  }
  return false;
}

- (NSUInteger)hash {
  return ((jint) [((ComGoogleCommonBaseCaseFormat *) nil_chk(sourceFormat_)) hash]) ^ ((jint) [((ComGoogleCommonBaseCaseFormat *) nil_chk(targetFormat_)) hash]);
}

- (NSString *)description {
  return JreStrcat("@$@C", sourceFormat_, @".converterTo(", targetFormat_, ')');
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, 3, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, 6 },
    { NULL, "I", 0x1, 7, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonBaseCaseFormat:withComGoogleCommonBaseCaseFormat:);
  methods[1].selector = @selector(doForwardWithId:);
  methods[2].selector = @selector(doBackwardWithId:);
  methods[3].selector = @selector(isEqual:);
  methods[4].selector = @selector(hash);
  methods[5].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sourceFormat_", "LComGoogleCommonBaseCaseFormat;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "targetFormat_", "LComGoogleCommonBaseCaseFormat;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = ComGoogleCommonBaseCaseFormat_StringConverter_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonBaseCaseFormat;LComGoogleCommonBaseCaseFormat;", "doForward", "LNSString;", "doBackward", "equals", "LNSObject;", (void *)&ComGoogleCommonBaseCaseFormat_StringConverter__Annotations$0, "hashCode", "toString", "LComGoogleCommonBaseCaseFormat;", "Lcom/google/common/base/Converter<Ljava/lang/String;Ljava/lang/String;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseCaseFormat_StringConverter = { "StringConverter", "com.google.common.base", ptrTable, methods, fields, 7, 0x1a, 6, 3, 9, -1, -1, 10, -1 };
  return &_ComGoogleCommonBaseCaseFormat_StringConverter;
}

@end

void ComGoogleCommonBaseCaseFormat_StringConverter_initWithComGoogleCommonBaseCaseFormat_withComGoogleCommonBaseCaseFormat_(ComGoogleCommonBaseCaseFormat_StringConverter *self, ComGoogleCommonBaseCaseFormat *sourceFormat, ComGoogleCommonBaseCaseFormat *targetFormat) {
  ComGoogleCommonBaseConverter_init(self);
  self->sourceFormat_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(sourceFormat);
  self->targetFormat_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(targetFormat);
}

ComGoogleCommonBaseCaseFormat_StringConverter *new_ComGoogleCommonBaseCaseFormat_StringConverter_initWithComGoogleCommonBaseCaseFormat_withComGoogleCommonBaseCaseFormat_(ComGoogleCommonBaseCaseFormat *sourceFormat, ComGoogleCommonBaseCaseFormat *targetFormat) {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseCaseFormat_StringConverter, initWithComGoogleCommonBaseCaseFormat_withComGoogleCommonBaseCaseFormat_, sourceFormat, targetFormat)
}

ComGoogleCommonBaseCaseFormat_StringConverter *create_ComGoogleCommonBaseCaseFormat_StringConverter_initWithComGoogleCommonBaseCaseFormat_withComGoogleCommonBaseCaseFormat_(ComGoogleCommonBaseCaseFormat *sourceFormat, ComGoogleCommonBaseCaseFormat *targetFormat) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonBaseCaseFormat_StringConverter, initWithComGoogleCommonBaseCaseFormat_withComGoogleCommonBaseCaseFormat_, sourceFormat, targetFormat)
}

IOSObjectArray *ComGoogleCommonBaseCaseFormat_StringConverter__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonBaseCaseFormat_StringConverter)
