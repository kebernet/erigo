//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/base/CharMatcher.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/CharMatcher.h"
#include "com/google/common/base/Platform.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/base/Predicate.h"
#include "com/google/common/base/SmallCharMatcher.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Arrays.h"
#include "java/util/BitSet.h"
#include "java/util/function/Predicate.h"

@class ComGoogleCommonBaseCharMatcher_IsEither;

#pragma clang diagnostic ignored "-Wprotocol"

@interface ComGoogleCommonBaseCharMatcher ()

+ (ComGoogleCommonBaseCharMatcher *)precomputedPositiveWithInt:(jint)totalCharacters
                                            withJavaUtilBitSet:(JavaUtilBitSet *)table
                                                  withNSString:(NSString *)description_;

+ (jboolean)isSmallWithInt:(jint)totalCharacters
                   withInt:(jint)tableLength;

- (NSString *)finishCollapseFromWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence
                                                 withInt:(jint)start
                                                 withInt:(jint)end
                                                withChar:(jchar)replacement
                               withJavaLangStringBuilder:(JavaLangStringBuilder *)builder
                                             withBoolean:(jboolean)inMatchingGroup;

+ (NSString *)showCharacterWithChar:(jchar)c;

+ (ComGoogleCommonBaseCharMatcher_IsEither *)isEitherWithChar:(jchar)c1
                                                     withChar:(jchar)c2;

@end

inline jint ComGoogleCommonBaseCharMatcher_get_DISTINCT_CHARS();
#define ComGoogleCommonBaseCharMatcher_DISTINCT_CHARS 65536
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonBaseCharMatcher, DISTINCT_CHARS, jint)

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher *ComGoogleCommonBaseCharMatcher_precomputedPositiveWithInt_withJavaUtilBitSet_withNSString_(jint totalCharacters, JavaUtilBitSet *table, NSString *description_);

__attribute__((unused)) static jboolean ComGoogleCommonBaseCharMatcher_isSmallWithInt_withInt_(jint totalCharacters, jint tableLength);

__attribute__((unused)) static NSString *ComGoogleCommonBaseCharMatcher_finishCollapseFromWithJavaLangCharSequence_withInt_withInt_withChar_withJavaLangStringBuilder_withBoolean_(ComGoogleCommonBaseCharMatcher *self, id<JavaLangCharSequence> sequence, jint start, jint end, jchar replacement, JavaLangStringBuilder *builder, jboolean inMatchingGroup);

__attribute__((unused)) static NSString *ComGoogleCommonBaseCharMatcher_showCharacterWithChar_(jchar c);

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_IsEither *ComGoogleCommonBaseCharMatcher_isEitherWithChar_withChar_(jchar c1, jchar c2);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonBaseCharMatcher__Annotations$0();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonBaseCharMatcher__Annotations$1();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonBaseCharMatcher__Annotations$2();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonBaseCharMatcher__Annotations$3();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonBaseCharMatcher__Annotations$4();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonBaseCharMatcher__Annotations$5();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonBaseCharMatcher__Annotations$6();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonBaseCharMatcher__Annotations$7();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonBaseCharMatcher__Annotations$8();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonBaseCharMatcher__Annotations$9();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonBaseCharMatcher__Annotations$10();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonBaseCharMatcher__Annotations$11();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonBaseCharMatcher__Annotations$12();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonBaseCharMatcher__Annotations$13();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonBaseCharMatcher__Annotations$14();

@interface ComGoogleCommonBaseCharMatcher_1 : ComGoogleCommonBaseCharMatcher_NegatedFastMatcher {
 @public
  NSString *val$description_;
}

- (instancetype)initWithNSString:(NSString *)capture$0
withComGoogleCommonBaseCharMatcher:(ComGoogleCommonBaseCharMatcher *)original;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonBaseCharMatcher_1)

__attribute__((unused)) static void ComGoogleCommonBaseCharMatcher_1_initWithNSString_withComGoogleCommonBaseCharMatcher_(ComGoogleCommonBaseCharMatcher_1 *self, NSString *capture$0, ComGoogleCommonBaseCharMatcher *original);

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_1 *new_ComGoogleCommonBaseCharMatcher_1_initWithNSString_withComGoogleCommonBaseCharMatcher_(NSString *capture$0, ComGoogleCommonBaseCharMatcher *original) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_1 *create_ComGoogleCommonBaseCharMatcher_1_initWithNSString_withComGoogleCommonBaseCharMatcher_(NSString *capture$0, ComGoogleCommonBaseCharMatcher *original);

@interface ComGoogleCommonBaseCharMatcher_NamedFastMatcher () {
 @public
  NSString *description__;
}

@end

J2OBJC_FIELD_SETTER(ComGoogleCommonBaseCharMatcher_NamedFastMatcher, description__, NSString *)

@interface ComGoogleCommonBaseCharMatcher_BitSetMatcher : ComGoogleCommonBaseCharMatcher_NamedFastMatcher {
 @public
  JavaUtilBitSet *table_;
}

- (instancetype)initWithJavaUtilBitSet:(JavaUtilBitSet *)table
                          withNSString:(NSString *)description_;

- (jboolean)matchesWithChar:(jchar)c;

- (void)setBitsWithJavaUtilBitSet:(JavaUtilBitSet *)bitSet;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonBaseCharMatcher_BitSetMatcher)

J2OBJC_FIELD_SETTER(ComGoogleCommonBaseCharMatcher_BitSetMatcher, table_, JavaUtilBitSet *)

__attribute__((unused)) static void ComGoogleCommonBaseCharMatcher_BitSetMatcher_initWithJavaUtilBitSet_withNSString_(ComGoogleCommonBaseCharMatcher_BitSetMatcher *self, JavaUtilBitSet *table, NSString *description_);

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_BitSetMatcher *new_ComGoogleCommonBaseCharMatcher_BitSetMatcher_initWithJavaUtilBitSet_withNSString_(JavaUtilBitSet *table, NSString *description_) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_BitSetMatcher *create_ComGoogleCommonBaseCharMatcher_BitSetMatcher_initWithJavaUtilBitSet_withNSString_(JavaUtilBitSet *table, NSString *description_);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonBaseCharMatcher_BitSetMatcher)

@interface ComGoogleCommonBaseCharMatcher_Any : ComGoogleCommonBaseCharMatcher_NamedFastMatcher

- (instancetype)init;

- (jboolean)matchesWithChar:(jchar)c;

- (jint)indexInWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence;

- (jint)indexInWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence
                                withInt:(jint)start;

- (jint)lastIndexInWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence;

- (jboolean)matchesAllOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence;

- (jboolean)matchesNoneOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence;

- (NSString *)removeFromWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence;

- (NSString *)replaceFromWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence
                                         withChar:(jchar)replacement;

- (NSString *)replaceFromWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence
                         withJavaLangCharSequence:(id<JavaLangCharSequence>)replacement;

- (NSString *)collapseFromWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence
                                          withChar:(jchar)replacement;

- (NSString *)trimFromWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence;

- (jint)countInWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence;

- (ComGoogleCommonBaseCharMatcher *)and__WithComGoogleCommonBaseCharMatcher:(ComGoogleCommonBaseCharMatcher *)other;

- (ComGoogleCommonBaseCharMatcher *)or__WithComGoogleCommonBaseCharMatcher:(ComGoogleCommonBaseCharMatcher *)other;

- (ComGoogleCommonBaseCharMatcher *)negate;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonBaseCharMatcher_Any)

inline ComGoogleCommonBaseCharMatcher_Any *ComGoogleCommonBaseCharMatcher_Any_get_INSTANCE();
static ComGoogleCommonBaseCharMatcher_Any *ComGoogleCommonBaseCharMatcher_Any_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonBaseCharMatcher_Any, INSTANCE, ComGoogleCommonBaseCharMatcher_Any *)

__attribute__((unused)) static void ComGoogleCommonBaseCharMatcher_Any_init(ComGoogleCommonBaseCharMatcher_Any *self);

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_Any *new_ComGoogleCommonBaseCharMatcher_Any_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_Any *create_ComGoogleCommonBaseCharMatcher_Any_init();

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonBaseCharMatcher_Any)

@interface ComGoogleCommonBaseCharMatcher_None : ComGoogleCommonBaseCharMatcher_NamedFastMatcher

- (instancetype)init;

- (jboolean)matchesWithChar:(jchar)c;

- (jint)indexInWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence;

- (jint)indexInWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence
                                withInt:(jint)start;

- (jint)lastIndexInWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence;

- (jboolean)matchesAllOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence;

- (jboolean)matchesNoneOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence;

- (NSString *)removeFromWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence;

- (NSString *)replaceFromWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence
                                         withChar:(jchar)replacement;

- (NSString *)replaceFromWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence
                         withJavaLangCharSequence:(id<JavaLangCharSequence>)replacement;

- (NSString *)collapseFromWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence
                                          withChar:(jchar)replacement;

- (NSString *)trimFromWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence;

- (NSString *)trimLeadingFromWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence;

- (NSString *)trimTrailingFromWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence;

- (jint)countInWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence;

- (ComGoogleCommonBaseCharMatcher *)and__WithComGoogleCommonBaseCharMatcher:(ComGoogleCommonBaseCharMatcher *)other;

- (ComGoogleCommonBaseCharMatcher *)or__WithComGoogleCommonBaseCharMatcher:(ComGoogleCommonBaseCharMatcher *)other;

- (ComGoogleCommonBaseCharMatcher *)negate;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonBaseCharMatcher_None)

inline ComGoogleCommonBaseCharMatcher_None *ComGoogleCommonBaseCharMatcher_None_get_INSTANCE();
static ComGoogleCommonBaseCharMatcher_None *ComGoogleCommonBaseCharMatcher_None_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonBaseCharMatcher_None, INSTANCE, ComGoogleCommonBaseCharMatcher_None *)

__attribute__((unused)) static void ComGoogleCommonBaseCharMatcher_None_init(ComGoogleCommonBaseCharMatcher_None *self);

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_None *new_ComGoogleCommonBaseCharMatcher_None_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_None *create_ComGoogleCommonBaseCharMatcher_None_init();

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonBaseCharMatcher_None)

@interface ComGoogleCommonBaseCharMatcher_BreakingWhitespace : ComGoogleCommonBaseCharMatcher

- (instancetype)init;

- (jboolean)matchesWithChar:(jchar)c;

- (NSString *)description;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonBaseCharMatcher_BreakingWhitespace)

inline ComGoogleCommonBaseCharMatcher *ComGoogleCommonBaseCharMatcher_BreakingWhitespace_get_INSTANCE();
static ComGoogleCommonBaseCharMatcher *ComGoogleCommonBaseCharMatcher_BreakingWhitespace_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonBaseCharMatcher_BreakingWhitespace, INSTANCE, ComGoogleCommonBaseCharMatcher *)

__attribute__((unused)) static void ComGoogleCommonBaseCharMatcher_BreakingWhitespace_init(ComGoogleCommonBaseCharMatcher_BreakingWhitespace *self);

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_BreakingWhitespace *new_ComGoogleCommonBaseCharMatcher_BreakingWhitespace_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_BreakingWhitespace *create_ComGoogleCommonBaseCharMatcher_BreakingWhitespace_init();

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonBaseCharMatcher_BreakingWhitespace)

@interface ComGoogleCommonBaseCharMatcher_Ascii : ComGoogleCommonBaseCharMatcher_NamedFastMatcher

- (instancetype)init;

- (jboolean)matchesWithChar:(jchar)c;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonBaseCharMatcher_Ascii)

inline ComGoogleCommonBaseCharMatcher_Ascii *ComGoogleCommonBaseCharMatcher_Ascii_get_INSTANCE();
static ComGoogleCommonBaseCharMatcher_Ascii *ComGoogleCommonBaseCharMatcher_Ascii_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonBaseCharMatcher_Ascii, INSTANCE, ComGoogleCommonBaseCharMatcher_Ascii *)

__attribute__((unused)) static void ComGoogleCommonBaseCharMatcher_Ascii_init(ComGoogleCommonBaseCharMatcher_Ascii *self);

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_Ascii *new_ComGoogleCommonBaseCharMatcher_Ascii_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_Ascii *create_ComGoogleCommonBaseCharMatcher_Ascii_init();

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonBaseCharMatcher_Ascii)

@interface ComGoogleCommonBaseCharMatcher_RangesMatcher : ComGoogleCommonBaseCharMatcher {
 @public
  NSString *description__;
  IOSCharArray *rangeStarts_;
  IOSCharArray *rangeEnds_;
}

- (instancetype)initWithNSString:(NSString *)description_
                   withCharArray:(IOSCharArray *)rangeStarts
                   withCharArray:(IOSCharArray *)rangeEnds;

- (jboolean)matchesWithChar:(jchar)c;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonBaseCharMatcher_RangesMatcher)

J2OBJC_FIELD_SETTER(ComGoogleCommonBaseCharMatcher_RangesMatcher, description__, NSString *)
J2OBJC_FIELD_SETTER(ComGoogleCommonBaseCharMatcher_RangesMatcher, rangeStarts_, IOSCharArray *)
J2OBJC_FIELD_SETTER(ComGoogleCommonBaseCharMatcher_RangesMatcher, rangeEnds_, IOSCharArray *)

__attribute__((unused)) static void ComGoogleCommonBaseCharMatcher_RangesMatcher_initWithNSString_withCharArray_withCharArray_(ComGoogleCommonBaseCharMatcher_RangesMatcher *self, NSString *description_, IOSCharArray *rangeStarts, IOSCharArray *rangeEnds);

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_RangesMatcher *new_ComGoogleCommonBaseCharMatcher_RangesMatcher_initWithNSString_withCharArray_withCharArray_(NSString *description_, IOSCharArray *rangeStarts, IOSCharArray *rangeEnds) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_RangesMatcher *create_ComGoogleCommonBaseCharMatcher_RangesMatcher_initWithNSString_withCharArray_withCharArray_(NSString *description_, IOSCharArray *rangeStarts, IOSCharArray *rangeEnds);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonBaseCharMatcher_RangesMatcher)

@interface ComGoogleCommonBaseCharMatcher_Digit : ComGoogleCommonBaseCharMatcher_RangesMatcher

+ (IOSCharArray *)zeroes;

+ (IOSCharArray *)nines;

- (instancetype)init;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonBaseCharMatcher_Digit)

inline NSString *ComGoogleCommonBaseCharMatcher_Digit_get_ZEROES();
static NSString *ComGoogleCommonBaseCharMatcher_Digit_ZEROES = @"0\u0660\u06f0\u07c0\u0966\u09e6\u0a66\u0ae6\u0b66\u0be6\u0c66\u0ce6\u0d66\u0e50\u0ed0\u0f20\u1040\u1090\u17e0\u1810\u1946\u19d0\u1b50\u1bb0\u1c40\u1c50\ua620\ua8d0\ua900\uaa50\uff10";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonBaseCharMatcher_Digit, ZEROES, NSString *)

inline ComGoogleCommonBaseCharMatcher_Digit *ComGoogleCommonBaseCharMatcher_Digit_get_INSTANCE();
static ComGoogleCommonBaseCharMatcher_Digit *ComGoogleCommonBaseCharMatcher_Digit_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonBaseCharMatcher_Digit, INSTANCE, ComGoogleCommonBaseCharMatcher_Digit *)

__attribute__((unused)) static IOSCharArray *ComGoogleCommonBaseCharMatcher_Digit_zeroes();

__attribute__((unused)) static IOSCharArray *ComGoogleCommonBaseCharMatcher_Digit_nines();

__attribute__((unused)) static void ComGoogleCommonBaseCharMatcher_Digit_init(ComGoogleCommonBaseCharMatcher_Digit *self);

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_Digit *new_ComGoogleCommonBaseCharMatcher_Digit_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_Digit *create_ComGoogleCommonBaseCharMatcher_Digit_init();

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonBaseCharMatcher_Digit)

@interface ComGoogleCommonBaseCharMatcher_JavaDigit : ComGoogleCommonBaseCharMatcher

- (instancetype)init;

- (jboolean)matchesWithChar:(jchar)c;

- (NSString *)description;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonBaseCharMatcher_JavaDigit)

inline ComGoogleCommonBaseCharMatcher_JavaDigit *ComGoogleCommonBaseCharMatcher_JavaDigit_get_INSTANCE();
static ComGoogleCommonBaseCharMatcher_JavaDigit *ComGoogleCommonBaseCharMatcher_JavaDigit_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonBaseCharMatcher_JavaDigit, INSTANCE, ComGoogleCommonBaseCharMatcher_JavaDigit *)

__attribute__((unused)) static void ComGoogleCommonBaseCharMatcher_JavaDigit_init(ComGoogleCommonBaseCharMatcher_JavaDigit *self);

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_JavaDigit *new_ComGoogleCommonBaseCharMatcher_JavaDigit_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_JavaDigit *create_ComGoogleCommonBaseCharMatcher_JavaDigit_init();

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonBaseCharMatcher_JavaDigit)

@interface ComGoogleCommonBaseCharMatcher_JavaLetter : ComGoogleCommonBaseCharMatcher

- (instancetype)init;

- (jboolean)matchesWithChar:(jchar)c;

- (NSString *)description;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonBaseCharMatcher_JavaLetter)

inline ComGoogleCommonBaseCharMatcher_JavaLetter *ComGoogleCommonBaseCharMatcher_JavaLetter_get_INSTANCE();
static ComGoogleCommonBaseCharMatcher_JavaLetter *ComGoogleCommonBaseCharMatcher_JavaLetter_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonBaseCharMatcher_JavaLetter, INSTANCE, ComGoogleCommonBaseCharMatcher_JavaLetter *)

__attribute__((unused)) static void ComGoogleCommonBaseCharMatcher_JavaLetter_init(ComGoogleCommonBaseCharMatcher_JavaLetter *self);

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_JavaLetter *new_ComGoogleCommonBaseCharMatcher_JavaLetter_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_JavaLetter *create_ComGoogleCommonBaseCharMatcher_JavaLetter_init();

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonBaseCharMatcher_JavaLetter)

@interface ComGoogleCommonBaseCharMatcher_JavaLetterOrDigit : ComGoogleCommonBaseCharMatcher

- (instancetype)init;

- (jboolean)matchesWithChar:(jchar)c;

- (NSString *)description;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonBaseCharMatcher_JavaLetterOrDigit)

inline ComGoogleCommonBaseCharMatcher_JavaLetterOrDigit *ComGoogleCommonBaseCharMatcher_JavaLetterOrDigit_get_INSTANCE();
static ComGoogleCommonBaseCharMatcher_JavaLetterOrDigit *ComGoogleCommonBaseCharMatcher_JavaLetterOrDigit_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonBaseCharMatcher_JavaLetterOrDigit, INSTANCE, ComGoogleCommonBaseCharMatcher_JavaLetterOrDigit *)

__attribute__((unused)) static void ComGoogleCommonBaseCharMatcher_JavaLetterOrDigit_init(ComGoogleCommonBaseCharMatcher_JavaLetterOrDigit *self);

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_JavaLetterOrDigit *new_ComGoogleCommonBaseCharMatcher_JavaLetterOrDigit_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_JavaLetterOrDigit *create_ComGoogleCommonBaseCharMatcher_JavaLetterOrDigit_init();

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonBaseCharMatcher_JavaLetterOrDigit)

@interface ComGoogleCommonBaseCharMatcher_JavaUpperCase : ComGoogleCommonBaseCharMatcher

- (instancetype)init;

- (jboolean)matchesWithChar:(jchar)c;

- (NSString *)description;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonBaseCharMatcher_JavaUpperCase)

inline ComGoogleCommonBaseCharMatcher_JavaUpperCase *ComGoogleCommonBaseCharMatcher_JavaUpperCase_get_INSTANCE();
static ComGoogleCommonBaseCharMatcher_JavaUpperCase *ComGoogleCommonBaseCharMatcher_JavaUpperCase_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonBaseCharMatcher_JavaUpperCase, INSTANCE, ComGoogleCommonBaseCharMatcher_JavaUpperCase *)

__attribute__((unused)) static void ComGoogleCommonBaseCharMatcher_JavaUpperCase_init(ComGoogleCommonBaseCharMatcher_JavaUpperCase *self);

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_JavaUpperCase *new_ComGoogleCommonBaseCharMatcher_JavaUpperCase_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_JavaUpperCase *create_ComGoogleCommonBaseCharMatcher_JavaUpperCase_init();

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonBaseCharMatcher_JavaUpperCase)

@interface ComGoogleCommonBaseCharMatcher_JavaLowerCase : ComGoogleCommonBaseCharMatcher

- (instancetype)init;

- (jboolean)matchesWithChar:(jchar)c;

- (NSString *)description;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonBaseCharMatcher_JavaLowerCase)

inline ComGoogleCommonBaseCharMatcher_JavaLowerCase *ComGoogleCommonBaseCharMatcher_JavaLowerCase_get_INSTANCE();
static ComGoogleCommonBaseCharMatcher_JavaLowerCase *ComGoogleCommonBaseCharMatcher_JavaLowerCase_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonBaseCharMatcher_JavaLowerCase, INSTANCE, ComGoogleCommonBaseCharMatcher_JavaLowerCase *)

__attribute__((unused)) static void ComGoogleCommonBaseCharMatcher_JavaLowerCase_init(ComGoogleCommonBaseCharMatcher_JavaLowerCase *self);

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_JavaLowerCase *new_ComGoogleCommonBaseCharMatcher_JavaLowerCase_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_JavaLowerCase *create_ComGoogleCommonBaseCharMatcher_JavaLowerCase_init();

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonBaseCharMatcher_JavaLowerCase)

@interface ComGoogleCommonBaseCharMatcher_JavaIsoControl : ComGoogleCommonBaseCharMatcher_NamedFastMatcher

- (instancetype)init;

- (jboolean)matchesWithChar:(jchar)c;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonBaseCharMatcher_JavaIsoControl)

inline ComGoogleCommonBaseCharMatcher_JavaIsoControl *ComGoogleCommonBaseCharMatcher_JavaIsoControl_get_INSTANCE();
static ComGoogleCommonBaseCharMatcher_JavaIsoControl *ComGoogleCommonBaseCharMatcher_JavaIsoControl_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonBaseCharMatcher_JavaIsoControl, INSTANCE, ComGoogleCommonBaseCharMatcher_JavaIsoControl *)

__attribute__((unused)) static void ComGoogleCommonBaseCharMatcher_JavaIsoControl_init(ComGoogleCommonBaseCharMatcher_JavaIsoControl *self);

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_JavaIsoControl *new_ComGoogleCommonBaseCharMatcher_JavaIsoControl_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_JavaIsoControl *create_ComGoogleCommonBaseCharMatcher_JavaIsoControl_init();

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonBaseCharMatcher_JavaIsoControl)

@interface ComGoogleCommonBaseCharMatcher_Invisible : ComGoogleCommonBaseCharMatcher_RangesMatcher

- (instancetype)init;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonBaseCharMatcher_Invisible)

inline NSString *ComGoogleCommonBaseCharMatcher_Invisible_get_RANGE_STARTS();
static NSString *ComGoogleCommonBaseCharMatcher_Invisible_RANGE_STARTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonBaseCharMatcher_Invisible, RANGE_STARTS, NSString *)

inline NSString *ComGoogleCommonBaseCharMatcher_Invisible_get_RANGE_ENDS();
static NSString *ComGoogleCommonBaseCharMatcher_Invisible_RANGE_ENDS = @" \u00a0\u00ad\u0604\u061c\u06dd\u070f\u1680\u180e\u200f\u202f\u2064\u2066\u2067\u2068\u2069\u206f\u3000\uf8ff\ufeff\ufff9\ufffb";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonBaseCharMatcher_Invisible, RANGE_ENDS, NSString *)

inline ComGoogleCommonBaseCharMatcher_Invisible *ComGoogleCommonBaseCharMatcher_Invisible_get_INSTANCE();
static ComGoogleCommonBaseCharMatcher_Invisible *ComGoogleCommonBaseCharMatcher_Invisible_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonBaseCharMatcher_Invisible, INSTANCE, ComGoogleCommonBaseCharMatcher_Invisible *)

__attribute__((unused)) static void ComGoogleCommonBaseCharMatcher_Invisible_init(ComGoogleCommonBaseCharMatcher_Invisible *self);

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_Invisible *new_ComGoogleCommonBaseCharMatcher_Invisible_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_Invisible *create_ComGoogleCommonBaseCharMatcher_Invisible_init();

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonBaseCharMatcher_Invisible)

@interface ComGoogleCommonBaseCharMatcher_SingleWidth : ComGoogleCommonBaseCharMatcher_RangesMatcher

- (instancetype)init;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonBaseCharMatcher_SingleWidth)

inline ComGoogleCommonBaseCharMatcher_SingleWidth *ComGoogleCommonBaseCharMatcher_SingleWidth_get_INSTANCE();
static ComGoogleCommonBaseCharMatcher_SingleWidth *ComGoogleCommonBaseCharMatcher_SingleWidth_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonBaseCharMatcher_SingleWidth, INSTANCE, ComGoogleCommonBaseCharMatcher_SingleWidth *)

__attribute__((unused)) static void ComGoogleCommonBaseCharMatcher_SingleWidth_init(ComGoogleCommonBaseCharMatcher_SingleWidth *self);

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_SingleWidth *new_ComGoogleCommonBaseCharMatcher_SingleWidth_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_SingleWidth *create_ComGoogleCommonBaseCharMatcher_SingleWidth_init();

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonBaseCharMatcher_SingleWidth)

@interface ComGoogleCommonBaseCharMatcher_And : ComGoogleCommonBaseCharMatcher {
 @public
  ComGoogleCommonBaseCharMatcher *first_;
  ComGoogleCommonBaseCharMatcher *second_;
}

- (instancetype)initWithComGoogleCommonBaseCharMatcher:(ComGoogleCommonBaseCharMatcher *)a
                    withComGoogleCommonBaseCharMatcher:(ComGoogleCommonBaseCharMatcher *)b;

- (jboolean)matchesWithChar:(jchar)c;

- (void)setBitsWithJavaUtilBitSet:(JavaUtilBitSet *)table;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonBaseCharMatcher_And)

J2OBJC_FIELD_SETTER(ComGoogleCommonBaseCharMatcher_And, first_, ComGoogleCommonBaseCharMatcher *)
J2OBJC_FIELD_SETTER(ComGoogleCommonBaseCharMatcher_And, second_, ComGoogleCommonBaseCharMatcher *)

__attribute__((unused)) static void ComGoogleCommonBaseCharMatcher_And_initWithComGoogleCommonBaseCharMatcher_withComGoogleCommonBaseCharMatcher_(ComGoogleCommonBaseCharMatcher_And *self, ComGoogleCommonBaseCharMatcher *a, ComGoogleCommonBaseCharMatcher *b);

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_And *new_ComGoogleCommonBaseCharMatcher_And_initWithComGoogleCommonBaseCharMatcher_withComGoogleCommonBaseCharMatcher_(ComGoogleCommonBaseCharMatcher *a, ComGoogleCommonBaseCharMatcher *b) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_And *create_ComGoogleCommonBaseCharMatcher_And_initWithComGoogleCommonBaseCharMatcher_withComGoogleCommonBaseCharMatcher_(ComGoogleCommonBaseCharMatcher *a, ComGoogleCommonBaseCharMatcher *b);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonBaseCharMatcher_And)

@interface ComGoogleCommonBaseCharMatcher_Or : ComGoogleCommonBaseCharMatcher {
 @public
  ComGoogleCommonBaseCharMatcher *first_;
  ComGoogleCommonBaseCharMatcher *second_;
}

- (instancetype)initWithComGoogleCommonBaseCharMatcher:(ComGoogleCommonBaseCharMatcher *)a
                    withComGoogleCommonBaseCharMatcher:(ComGoogleCommonBaseCharMatcher *)b;

- (void)setBitsWithJavaUtilBitSet:(JavaUtilBitSet *)table;

- (jboolean)matchesWithChar:(jchar)c;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonBaseCharMatcher_Or)

J2OBJC_FIELD_SETTER(ComGoogleCommonBaseCharMatcher_Or, first_, ComGoogleCommonBaseCharMatcher *)
J2OBJC_FIELD_SETTER(ComGoogleCommonBaseCharMatcher_Or, second_, ComGoogleCommonBaseCharMatcher *)

__attribute__((unused)) static void ComGoogleCommonBaseCharMatcher_Or_initWithComGoogleCommonBaseCharMatcher_withComGoogleCommonBaseCharMatcher_(ComGoogleCommonBaseCharMatcher_Or *self, ComGoogleCommonBaseCharMatcher *a, ComGoogleCommonBaseCharMatcher *b);

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_Or *new_ComGoogleCommonBaseCharMatcher_Or_initWithComGoogleCommonBaseCharMatcher_withComGoogleCommonBaseCharMatcher_(ComGoogleCommonBaseCharMatcher *a, ComGoogleCommonBaseCharMatcher *b) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_Or *create_ComGoogleCommonBaseCharMatcher_Or_initWithComGoogleCommonBaseCharMatcher_withComGoogleCommonBaseCharMatcher_(ComGoogleCommonBaseCharMatcher *a, ComGoogleCommonBaseCharMatcher *b);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonBaseCharMatcher_Or)

@interface ComGoogleCommonBaseCharMatcher_Is : ComGoogleCommonBaseCharMatcher_FastMatcher {
 @public
  jchar match_;
}

- (instancetype)initWithChar:(jchar)match;

- (jboolean)matchesWithChar:(jchar)c;

- (NSString *)replaceFromWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence
                                         withChar:(jchar)replacement;

- (ComGoogleCommonBaseCharMatcher *)and__WithComGoogleCommonBaseCharMatcher:(ComGoogleCommonBaseCharMatcher *)other;

- (ComGoogleCommonBaseCharMatcher *)or__WithComGoogleCommonBaseCharMatcher:(ComGoogleCommonBaseCharMatcher *)other;

- (ComGoogleCommonBaseCharMatcher *)negate;

- (void)setBitsWithJavaUtilBitSet:(JavaUtilBitSet *)table;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonBaseCharMatcher_Is)

__attribute__((unused)) static void ComGoogleCommonBaseCharMatcher_Is_initWithChar_(ComGoogleCommonBaseCharMatcher_Is *self, jchar match);

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_Is *new_ComGoogleCommonBaseCharMatcher_Is_initWithChar_(jchar match) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_Is *create_ComGoogleCommonBaseCharMatcher_Is_initWithChar_(jchar match);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonBaseCharMatcher_Is)

@interface ComGoogleCommonBaseCharMatcher_IsNot : ComGoogleCommonBaseCharMatcher_FastMatcher {
 @public
  jchar match_;
}

- (instancetype)initWithChar:(jchar)match;

- (jboolean)matchesWithChar:(jchar)c;

- (ComGoogleCommonBaseCharMatcher *)and__WithComGoogleCommonBaseCharMatcher:(ComGoogleCommonBaseCharMatcher *)other;

- (ComGoogleCommonBaseCharMatcher *)or__WithComGoogleCommonBaseCharMatcher:(ComGoogleCommonBaseCharMatcher *)other;

- (void)setBitsWithJavaUtilBitSet:(JavaUtilBitSet *)table;

- (ComGoogleCommonBaseCharMatcher *)negate;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonBaseCharMatcher_IsNot)

__attribute__((unused)) static void ComGoogleCommonBaseCharMatcher_IsNot_initWithChar_(ComGoogleCommonBaseCharMatcher_IsNot *self, jchar match);

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_IsNot *new_ComGoogleCommonBaseCharMatcher_IsNot_initWithChar_(jchar match) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_IsNot *create_ComGoogleCommonBaseCharMatcher_IsNot_initWithChar_(jchar match);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonBaseCharMatcher_IsNot)

@interface ComGoogleCommonBaseCharMatcher_IsEither : ComGoogleCommonBaseCharMatcher_FastMatcher {
 @public
  jchar match1_;
  jchar match2_;
}

- (instancetype)initWithChar:(jchar)match1
                    withChar:(jchar)match2;

- (jboolean)matchesWithChar:(jchar)c;

- (void)setBitsWithJavaUtilBitSet:(JavaUtilBitSet *)table;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonBaseCharMatcher_IsEither)

__attribute__((unused)) static void ComGoogleCommonBaseCharMatcher_IsEither_initWithChar_withChar_(ComGoogleCommonBaseCharMatcher_IsEither *self, jchar match1, jchar match2);

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_IsEither *new_ComGoogleCommonBaseCharMatcher_IsEither_initWithChar_withChar_(jchar match1, jchar match2) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_IsEither *create_ComGoogleCommonBaseCharMatcher_IsEither_initWithChar_withChar_(jchar match1, jchar match2);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonBaseCharMatcher_IsEither)

@interface ComGoogleCommonBaseCharMatcher_AnyOf : ComGoogleCommonBaseCharMatcher {
 @public
  IOSCharArray *chars_;
}

- (instancetype)initWithJavaLangCharSequence:(id<JavaLangCharSequence>)chars;

- (jboolean)matchesWithChar:(jchar)c;

- (void)setBitsWithJavaUtilBitSet:(JavaUtilBitSet *)table;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonBaseCharMatcher_AnyOf)

J2OBJC_FIELD_SETTER(ComGoogleCommonBaseCharMatcher_AnyOf, chars_, IOSCharArray *)

__attribute__((unused)) static void ComGoogleCommonBaseCharMatcher_AnyOf_initWithJavaLangCharSequence_(ComGoogleCommonBaseCharMatcher_AnyOf *self, id<JavaLangCharSequence> chars);

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_AnyOf *new_ComGoogleCommonBaseCharMatcher_AnyOf_initWithJavaLangCharSequence_(id<JavaLangCharSequence> chars) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_AnyOf *create_ComGoogleCommonBaseCharMatcher_AnyOf_initWithJavaLangCharSequence_(id<JavaLangCharSequence> chars);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonBaseCharMatcher_AnyOf)

@interface ComGoogleCommonBaseCharMatcher_InRange : ComGoogleCommonBaseCharMatcher_FastMatcher {
 @public
  jchar startInclusive_;
  jchar endInclusive_;
}

- (instancetype)initWithChar:(jchar)startInclusive
                    withChar:(jchar)endInclusive;

- (jboolean)matchesWithChar:(jchar)c;

- (void)setBitsWithJavaUtilBitSet:(JavaUtilBitSet *)table;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonBaseCharMatcher_InRange)

__attribute__((unused)) static void ComGoogleCommonBaseCharMatcher_InRange_initWithChar_withChar_(ComGoogleCommonBaseCharMatcher_InRange *self, jchar startInclusive, jchar endInclusive);

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_InRange *new_ComGoogleCommonBaseCharMatcher_InRange_initWithChar_withChar_(jchar startInclusive, jchar endInclusive) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_InRange *create_ComGoogleCommonBaseCharMatcher_InRange_initWithChar_withChar_(jchar startInclusive, jchar endInclusive);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonBaseCharMatcher_InRange)

@interface ComGoogleCommonBaseCharMatcher_ForPredicate : ComGoogleCommonBaseCharMatcher {
 @public
  id<ComGoogleCommonBasePredicate> predicate_;
}

- (instancetype)initWithComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate>)predicate;

- (jboolean)matchesWithChar:(jchar)c;

- (jboolean)applyWithId:(JavaLangCharacter *)character;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonBaseCharMatcher_ForPredicate)

J2OBJC_FIELD_SETTER(ComGoogleCommonBaseCharMatcher_ForPredicate, predicate_, id<ComGoogleCommonBasePredicate>)

__attribute__((unused)) static void ComGoogleCommonBaseCharMatcher_ForPredicate_initWithComGoogleCommonBasePredicate_(ComGoogleCommonBaseCharMatcher_ForPredicate *self, id<ComGoogleCommonBasePredicate> predicate);

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_ForPredicate *new_ComGoogleCommonBaseCharMatcher_ForPredicate_initWithComGoogleCommonBasePredicate_(id<ComGoogleCommonBasePredicate> predicate) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonBaseCharMatcher_ForPredicate *create_ComGoogleCommonBaseCharMatcher_ForPredicate_initWithComGoogleCommonBasePredicate_(id<ComGoogleCommonBasePredicate> predicate);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonBaseCharMatcher_ForPredicate)

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonBaseCharMatcher)

ComGoogleCommonBaseCharMatcher *ComGoogleCommonBaseCharMatcher_WHITESPACE;
ComGoogleCommonBaseCharMatcher *ComGoogleCommonBaseCharMatcher_BREAKING_WHITESPACE;
ComGoogleCommonBaseCharMatcher *ComGoogleCommonBaseCharMatcher_ASCII;
ComGoogleCommonBaseCharMatcher *ComGoogleCommonBaseCharMatcher_DIGIT;
ComGoogleCommonBaseCharMatcher *ComGoogleCommonBaseCharMatcher_JAVA_DIGIT;
ComGoogleCommonBaseCharMatcher *ComGoogleCommonBaseCharMatcher_JAVA_LETTER;
ComGoogleCommonBaseCharMatcher *ComGoogleCommonBaseCharMatcher_JAVA_LETTER_OR_DIGIT;
ComGoogleCommonBaseCharMatcher *ComGoogleCommonBaseCharMatcher_JAVA_UPPER_CASE;
ComGoogleCommonBaseCharMatcher *ComGoogleCommonBaseCharMatcher_JAVA_LOWER_CASE;
ComGoogleCommonBaseCharMatcher *ComGoogleCommonBaseCharMatcher_JAVA_ISO_CONTROL;
ComGoogleCommonBaseCharMatcher *ComGoogleCommonBaseCharMatcher_INVISIBLE;
ComGoogleCommonBaseCharMatcher *ComGoogleCommonBaseCharMatcher_SINGLE_WIDTH;
ComGoogleCommonBaseCharMatcher *ComGoogleCommonBaseCharMatcher_ANY;
ComGoogleCommonBaseCharMatcher *ComGoogleCommonBaseCharMatcher_NONE;

@implementation ComGoogleCommonBaseCharMatcher

+ (ComGoogleCommonBaseCharMatcher *)any {
  return ComGoogleCommonBaseCharMatcher_any();
}

+ (ComGoogleCommonBaseCharMatcher *)none {
  return ComGoogleCommonBaseCharMatcher_none();
}

+ (ComGoogleCommonBaseCharMatcher *)whitespace {
  return ComGoogleCommonBaseCharMatcher_whitespace();
}

+ (ComGoogleCommonBaseCharMatcher *)breakingWhitespace {
  return ComGoogleCommonBaseCharMatcher_breakingWhitespace();
}

+ (ComGoogleCommonBaseCharMatcher *)ascii {
  return ComGoogleCommonBaseCharMatcher_ascii();
}

+ (ComGoogleCommonBaseCharMatcher *)digit {
  return ComGoogleCommonBaseCharMatcher_digit();
}

+ (ComGoogleCommonBaseCharMatcher *)javaDigit {
  return ComGoogleCommonBaseCharMatcher_javaDigit();
}

+ (ComGoogleCommonBaseCharMatcher *)javaLetter {
  return ComGoogleCommonBaseCharMatcher_javaLetter();
}

+ (ComGoogleCommonBaseCharMatcher *)javaLetterOrDigit {
  return ComGoogleCommonBaseCharMatcher_javaLetterOrDigit();
}

+ (ComGoogleCommonBaseCharMatcher *)javaUpperCase {
  return ComGoogleCommonBaseCharMatcher_javaUpperCase();
}

+ (ComGoogleCommonBaseCharMatcher *)javaLowerCase {
  return ComGoogleCommonBaseCharMatcher_javaLowerCase();
}

+ (ComGoogleCommonBaseCharMatcher *)javaIsoControl {
  return ComGoogleCommonBaseCharMatcher_javaIsoControl();
}

+ (ComGoogleCommonBaseCharMatcher *)invisible {
  return ComGoogleCommonBaseCharMatcher_invisible();
}

+ (ComGoogleCommonBaseCharMatcher *)singleWidth {
  return ComGoogleCommonBaseCharMatcher_singleWidth();
}

+ (ComGoogleCommonBaseCharMatcher *)isWithChar:(jchar)match {
  return ComGoogleCommonBaseCharMatcher_isWithChar_(match);
}

+ (ComGoogleCommonBaseCharMatcher *)isNotWithChar:(jchar)match {
  return ComGoogleCommonBaseCharMatcher_isNotWithChar_(match);
}

+ (ComGoogleCommonBaseCharMatcher *)anyOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence {
  return ComGoogleCommonBaseCharMatcher_anyOfWithJavaLangCharSequence_(sequence);
}

+ (ComGoogleCommonBaseCharMatcher *)noneOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence {
  return ComGoogleCommonBaseCharMatcher_noneOfWithJavaLangCharSequence_(sequence);
}

+ (ComGoogleCommonBaseCharMatcher *)inRangeWithChar:(jchar)startInclusive
                                           withChar:(jchar)endInclusive {
  return ComGoogleCommonBaseCharMatcher_inRangeWithChar_withChar_(startInclusive, endInclusive);
}

+ (ComGoogleCommonBaseCharMatcher *)forPredicateWithComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate>)predicate {
  return ComGoogleCommonBaseCharMatcher_forPredicateWithComGoogleCommonBasePredicate_(predicate);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonBaseCharMatcher_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)matchesWithChar:(jchar)c {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (ComGoogleCommonBaseCharMatcher *)negate {
  return new_ComGoogleCommonBaseCharMatcher_Negated_initWithComGoogleCommonBaseCharMatcher_(self);
}

- (ComGoogleCommonBaseCharMatcher *)and__WithComGoogleCommonBaseCharMatcher:(ComGoogleCommonBaseCharMatcher *)other {
  return new_ComGoogleCommonBaseCharMatcher_And_initWithComGoogleCommonBaseCharMatcher_withComGoogleCommonBaseCharMatcher_(self, other);
}

- (ComGoogleCommonBaseCharMatcher *)or__WithComGoogleCommonBaseCharMatcher:(ComGoogleCommonBaseCharMatcher *)other {
  return new_ComGoogleCommonBaseCharMatcher_Or_initWithComGoogleCommonBaseCharMatcher_withComGoogleCommonBaseCharMatcher_(self, other);
}

- (ComGoogleCommonBaseCharMatcher *)precomputed {
  return ComGoogleCommonBasePlatform_precomputeCharMatcherWithComGoogleCommonBaseCharMatcher_(self);
}

- (ComGoogleCommonBaseCharMatcher *)precomputedInternal {
  JavaUtilBitSet *table = new_JavaUtilBitSet_init();
  [self setBitsWithJavaUtilBitSet:table];
  jint totalCharacters = [table cardinality];
  if (totalCharacters * 2 <= ComGoogleCommonBaseCharMatcher_DISTINCT_CHARS) {
    return ComGoogleCommonBaseCharMatcher_precomputedPositiveWithInt_withJavaUtilBitSet_withNSString_(totalCharacters, table, [self description]);
  }
  else {
    [table flipWithInt:JavaLangCharacter_MIN_VALUE withInt:JavaLangCharacter_MAX_VALUE + 1];
    jint negatedCharacters = ComGoogleCommonBaseCharMatcher_DISTINCT_CHARS - totalCharacters;
    NSString *suffix = @".negate()";
    NSString *description_ = [self description];
    NSString *negatedDescription = [((NSString *) nil_chk(description_)) java_hasSuffix:suffix] ? [description_ java_substring:0 endIndex:[description_ java_length] - [suffix java_length]] : JreStrcat("$$", description_, suffix);
    return new_ComGoogleCommonBaseCharMatcher_1_initWithNSString_withComGoogleCommonBaseCharMatcher_(description_, ComGoogleCommonBaseCharMatcher_precomputedPositiveWithInt_withJavaUtilBitSet_withNSString_(negatedCharacters, table, negatedDescription));
  }
}

+ (ComGoogleCommonBaseCharMatcher *)precomputedPositiveWithInt:(jint)totalCharacters
                                            withJavaUtilBitSet:(JavaUtilBitSet *)table
                                                  withNSString:(NSString *)description_ {
  return ComGoogleCommonBaseCharMatcher_precomputedPositiveWithInt_withJavaUtilBitSet_withNSString_(totalCharacters, table, description_);
}

+ (jboolean)isSmallWithInt:(jint)totalCharacters
                   withInt:(jint)tableLength {
  return ComGoogleCommonBaseCharMatcher_isSmallWithInt_withInt_(totalCharacters, tableLength);
}

- (void)setBitsWithJavaUtilBitSet:(JavaUtilBitSet *)table {
  for (jint c = JavaLangCharacter_MAX_VALUE; c >= JavaLangCharacter_MIN_VALUE; c--) {
    if ([self matchesWithChar:(jchar) c]) {
      [((JavaUtilBitSet *) nil_chk(table)) setWithInt:c];
    }
  }
}

- (jboolean)matchesAnyOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence {
  return ![self matchesNoneOfWithJavaLangCharSequence:sequence];
}

- (jboolean)matchesAllOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence {
  for (jint i = [((id<JavaLangCharSequence>) nil_chk(sequence)) java_length] - 1; i >= 0; i--) {
    if (![self matchesWithChar:[sequence charAtWithInt:i]]) {
      return false;
    }
  }
  return true;
}

- (jboolean)matchesNoneOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence {
  return [self indexInWithJavaLangCharSequence:sequence] == -1;
}

- (jint)indexInWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence {
  return [self indexInWithJavaLangCharSequence:sequence withInt:0];
}

- (jint)indexInWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence
                                withInt:(jint)start {
  jint length = [((id<JavaLangCharSequence>) nil_chk(sequence)) java_length];
  ComGoogleCommonBasePreconditions_checkPositionIndexWithInt_withInt_(start, length);
  for (jint i = start; i < length; i++) {
    if ([self matchesWithChar:[sequence charAtWithInt:i]]) {
      return i;
    }
  }
  return -1;
}

- (jint)lastIndexInWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence {
  for (jint i = [((id<JavaLangCharSequence>) nil_chk(sequence)) java_length] - 1; i >= 0; i--) {
    if ([self matchesWithChar:[sequence charAtWithInt:i]]) {
      return i;
    }
  }
  return -1;
}

- (jint)countInWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence {
  jint count = 0;
  for (jint i = 0; i < [((id<JavaLangCharSequence>) nil_chk(sequence)) java_length]; i++) {
    if ([self matchesWithChar:[sequence charAtWithInt:i]]) {
      count++;
    }
  }
  return count;
}

- (NSString *)removeFromWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence {
  NSString *string = [((id<JavaLangCharSequence>) nil_chk(sequence)) description];
  jint pos = [self indexInWithJavaLangCharSequence:string];
  if (pos == -1) {
    return string;
  }
  IOSCharArray *chars = [((NSString *) nil_chk(string)) java_toCharArray];
  jint spread = 1;
  while (true) {
    pos++;
    while (true) {
      if (pos == ((IOSCharArray *) nil_chk(chars))->size_) {
        goto break_OUT;
      }
      if ([self matchesWithChar:IOSCharArray_Get(chars, pos)]) {
        break;
      }
      *IOSCharArray_GetRef(chars, pos - spread) = IOSCharArray_Get(chars, pos);
      pos++;
    }
    spread++;
  }
  break_OUT: ;
  return [NSString java_stringWithCharacters:chars offset:0 length:pos - spread];
}

- (NSString *)retainFromWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence {
  return [((ComGoogleCommonBaseCharMatcher *) nil_chk([self negate])) removeFromWithJavaLangCharSequence:sequence];
}

- (NSString *)replaceFromWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence
                                         withChar:(jchar)replacement {
  NSString *string = [((id<JavaLangCharSequence>) nil_chk(sequence)) description];
  jint pos = [self indexInWithJavaLangCharSequence:string];
  if (pos == -1) {
    return string;
  }
  IOSCharArray *chars = [((NSString *) nil_chk(string)) java_toCharArray];
  *IOSCharArray_GetRef(nil_chk(chars), pos) = replacement;
  for (jint i = pos + 1; i < chars->size_; i++) {
    if ([self matchesWithChar:IOSCharArray_Get(chars, i)]) {
      *IOSCharArray_GetRef(chars, i) = replacement;
    }
  }
  return [NSString java_stringWithCharacters:chars];
}

- (NSString *)replaceFromWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence
                         withJavaLangCharSequence:(id<JavaLangCharSequence>)replacement {
  jint replacementLen = [((id<JavaLangCharSequence>) nil_chk(replacement)) java_length];
  if (replacementLen == 0) {
    return [self removeFromWithJavaLangCharSequence:sequence];
  }
  if (replacementLen == 1) {
    return [self replaceFromWithJavaLangCharSequence:sequence withChar:[replacement charAtWithInt:0]];
  }
  NSString *string = [((id<JavaLangCharSequence>) nil_chk(sequence)) description];
  jint pos = [self indexInWithJavaLangCharSequence:string];
  if (pos == -1) {
    return string;
  }
  jint len = [((NSString *) nil_chk(string)) java_length];
  JavaLangStringBuilder *buf = new_JavaLangStringBuilder_initWithInt_((len * 3 / 2) + 16);
  jint oldpos = 0;
  do {
    (void) [buf appendWithJavaLangCharSequence:string withInt:oldpos withInt:pos];
    (void) [buf appendWithJavaLangCharSequence:replacement];
    oldpos = pos + 1;
    pos = [self indexInWithJavaLangCharSequence:string withInt:oldpos];
  }
  while (pos != -1);
  (void) [buf appendWithJavaLangCharSequence:string withInt:oldpos withInt:len];
  return [buf description];
}

- (NSString *)trimFromWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence {
  jint len = [((id<JavaLangCharSequence>) nil_chk(sequence)) java_length];
  jint first;
  jint last;
  for (first = 0; first < len; first++) {
    if (![self matchesWithChar:[sequence charAtWithInt:first]]) {
      break;
    }
  }
  for (last = len - 1; last > first; last--) {
    if (![self matchesWithChar:[sequence charAtWithInt:last]]) {
      break;
    }
  }
  return [((id<JavaLangCharSequence>) nil_chk([sequence subSequenceFrom:first to:last + 1])) description];
}

- (NSString *)trimLeadingFromWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence {
  jint len = [((id<JavaLangCharSequence>) nil_chk(sequence)) java_length];
  for (jint first = 0; first < len; first++) {
    if (![self matchesWithChar:[sequence charAtWithInt:first]]) {
      return [((id<JavaLangCharSequence>) nil_chk([sequence subSequenceFrom:first to:len])) description];
    }
  }
  return @"";
}

- (NSString *)trimTrailingFromWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence {
  jint len = [((id<JavaLangCharSequence>) nil_chk(sequence)) java_length];
  for (jint last = len - 1; last >= 0; last--) {
    if (![self matchesWithChar:[sequence charAtWithInt:last]]) {
      return [((id<JavaLangCharSequence>) nil_chk([sequence subSequenceFrom:0 to:last + 1])) description];
    }
  }
  return @"";
}

- (NSString *)collapseFromWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence
                                          withChar:(jchar)replacement {
  jint len = [((id<JavaLangCharSequence>) nil_chk(sequence)) java_length];
  for (jint i = 0; i < len; i++) {
    jchar c = [sequence charAtWithInt:i];
    if ([self matchesWithChar:c]) {
      if (c == replacement && (i == len - 1 || ![self matchesWithChar:[sequence charAtWithInt:i + 1]])) {
        i++;
      }
      else {
        JavaLangStringBuilder *builder = [((JavaLangStringBuilder *) nil_chk([new_JavaLangStringBuilder_initWithInt_(len) appendWithJavaLangCharSequence:sequence withInt:0 withInt:i])) appendWithChar:replacement];
        return ComGoogleCommonBaseCharMatcher_finishCollapseFromWithJavaLangCharSequence_withInt_withInt_withChar_withJavaLangStringBuilder_withBoolean_(self, sequence, i + 1, len, replacement, builder, true);
      }
    }
  }
  return [sequence description];
}

- (NSString *)trimAndCollapseFromWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence
                                                 withChar:(jchar)replacement {
  jint len = [((id<JavaLangCharSequence>) nil_chk(sequence)) java_length];
  jint first = 0;
  jint last = len - 1;
  while (first < len && [self matchesWithChar:[sequence charAtWithInt:first]]) {
    first++;
  }
  while (last > first && [self matchesWithChar:[sequence charAtWithInt:last]]) {
    last--;
  }
  return (first == 0 && last == len - 1) ? [self collapseFromWithJavaLangCharSequence:sequence withChar:replacement] : ComGoogleCommonBaseCharMatcher_finishCollapseFromWithJavaLangCharSequence_withInt_withInt_withChar_withJavaLangStringBuilder_withBoolean_(self, sequence, first, last + 1, replacement, new_JavaLangStringBuilder_initWithInt_(last + 1 - first), false);
}

- (NSString *)finishCollapseFromWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence
                                                 withInt:(jint)start
                                                 withInt:(jint)end
                                                withChar:(jchar)replacement
                               withJavaLangStringBuilder:(JavaLangStringBuilder *)builder
                                             withBoolean:(jboolean)inMatchingGroup {
  return ComGoogleCommonBaseCharMatcher_finishCollapseFromWithJavaLangCharSequence_withInt_withInt_withChar_withJavaLangStringBuilder_withBoolean_(self, sequence, start, end, replacement, builder, inMatchingGroup);
}

- (jboolean)applyWithId:(JavaLangCharacter *)character {
  return [self matchesWithChar:[((JavaLangCharacter *) nil_chk(character)) charValue]];
}

- (NSString *)description {
  return [super description];
}

+ (NSString *)showCharacterWithChar:(jchar)c {
  return ComGoogleCommonBaseCharMatcher_showCharacterWithChar_(c);
}

+ (ComGoogleCommonBaseCharMatcher_IsEither *)isEitherWithChar:(jchar)c1
                                                     withChar:(jchar)c2 {
  return ComGoogleCommonBaseCharMatcher_isEitherWithChar_withChar_(c1, c2);
}

- (jboolean)testWithId:(JavaLangCharacter *)arg0 {
  return ComGoogleCommonBasePredicate_testWithId_(self, arg0);
}

- (id<JavaUtilFunctionPredicate>)and__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_and__WithJavaUtilFunctionPredicate_(self, arg0);
}

- (id<JavaUtilFunctionPredicate>)or__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_or__WithJavaUtilFunctionPredicate_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LComGoogleCommonBaseCharMatcher;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseCharMatcher;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseCharMatcher;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseCharMatcher;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseCharMatcher;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseCharMatcher;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseCharMatcher;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseCharMatcher;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseCharMatcher;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseCharMatcher;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseCharMatcher;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseCharMatcher;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseCharMatcher;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseCharMatcher;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseCharMatcher;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseCharMatcher;", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseCharMatcher;", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseCharMatcher;", 0x9, 5, 4, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseCharMatcher;", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseCharMatcher;", 0x9, 8, 9, -1, 10, -1, -1 },
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 11, 1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseCharMatcher;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseCharMatcher;", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseCharMatcher;", 0x1, 14, 13, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseCharMatcher;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseCharMatcher;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseCharMatcher;", 0xa, 15, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 19, 20, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 21, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 22, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 23, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 24, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 26, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 27, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 28, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 29, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 30, 31, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 30, 32, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 33, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 34, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 35, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 36, 31, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 37, 31, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 38, 39, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 40, 41, -1, -1, 42, -1 },
    { NULL, "LNSString;", 0x1, 43, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 44, 1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseCharMatcher_IsEither;", 0xa, 45, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(any);
  methods[1].selector = @selector(none);
  methods[2].selector = @selector(whitespace);
  methods[3].selector = @selector(breakingWhitespace);
  methods[4].selector = @selector(ascii);
  methods[5].selector = @selector(digit);
  methods[6].selector = @selector(javaDigit);
  methods[7].selector = @selector(javaLetter);
  methods[8].selector = @selector(javaLetterOrDigit);
  methods[9].selector = @selector(javaUpperCase);
  methods[10].selector = @selector(javaLowerCase);
  methods[11].selector = @selector(javaIsoControl);
  methods[12].selector = @selector(invisible);
  methods[13].selector = @selector(singleWidth);
  methods[14].selector = @selector(isWithChar:);
  methods[15].selector = @selector(isNotWithChar:);
  methods[16].selector = @selector(anyOfWithJavaLangCharSequence:);
  methods[17].selector = @selector(noneOfWithJavaLangCharSequence:);
  methods[18].selector = @selector(inRangeWithChar:withChar:);
  methods[19].selector = @selector(forPredicateWithComGoogleCommonBasePredicate:);
  methods[20].selector = @selector(init);
  methods[21].selector = @selector(matchesWithChar:);
  methods[22].selector = @selector(negate);
  methods[23].selector = @selector(and__WithComGoogleCommonBaseCharMatcher:);
  methods[24].selector = @selector(or__WithComGoogleCommonBaseCharMatcher:);
  methods[25].selector = @selector(precomputed);
  methods[26].selector = @selector(precomputedInternal);
  methods[27].selector = @selector(precomputedPositiveWithInt:withJavaUtilBitSet:withNSString:);
  methods[28].selector = @selector(isSmallWithInt:withInt:);
  methods[29].selector = @selector(setBitsWithJavaUtilBitSet:);
  methods[30].selector = @selector(matchesAnyOfWithJavaLangCharSequence:);
  methods[31].selector = @selector(matchesAllOfWithJavaLangCharSequence:);
  methods[32].selector = @selector(matchesNoneOfWithJavaLangCharSequence:);
  methods[33].selector = @selector(indexInWithJavaLangCharSequence:);
  methods[34].selector = @selector(indexInWithJavaLangCharSequence:withInt:);
  methods[35].selector = @selector(lastIndexInWithJavaLangCharSequence:);
  methods[36].selector = @selector(countInWithJavaLangCharSequence:);
  methods[37].selector = @selector(removeFromWithJavaLangCharSequence:);
  methods[38].selector = @selector(retainFromWithJavaLangCharSequence:);
  methods[39].selector = @selector(replaceFromWithJavaLangCharSequence:withChar:);
  methods[40].selector = @selector(replaceFromWithJavaLangCharSequence:withJavaLangCharSequence:);
  methods[41].selector = @selector(trimFromWithJavaLangCharSequence:);
  methods[42].selector = @selector(trimLeadingFromWithJavaLangCharSequence:);
  methods[43].selector = @selector(trimTrailingFromWithJavaLangCharSequence:);
  methods[44].selector = @selector(collapseFromWithJavaLangCharSequence:withChar:);
  methods[45].selector = @selector(trimAndCollapseFromWithJavaLangCharSequence:withChar:);
  methods[46].selector = @selector(finishCollapseFromWithJavaLangCharSequence:withInt:withInt:withChar:withJavaLangStringBuilder:withBoolean:);
  methods[47].selector = @selector(applyWithId:);
  methods[48].selector = @selector(description);
  methods[49].selector = @selector(showCharacterWithChar:);
  methods[50].selector = @selector(isEitherWithChar:withChar:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "WHITESPACE", "LComGoogleCommonBaseCharMatcher;", .constantValue.asLong = 0, 0x19, -1, 46, -1, 47 },
    { "BREAKING_WHITESPACE", "LComGoogleCommonBaseCharMatcher;", .constantValue.asLong = 0, 0x19, -1, 48, -1, 49 },
    { "ASCII", "LComGoogleCommonBaseCharMatcher;", .constantValue.asLong = 0, 0x19, -1, 50, -1, 51 },
    { "DIGIT", "LComGoogleCommonBaseCharMatcher;", .constantValue.asLong = 0, 0x19, -1, 52, -1, 53 },
    { "JAVA_DIGIT", "LComGoogleCommonBaseCharMatcher;", .constantValue.asLong = 0, 0x19, -1, 54, -1, 55 },
    { "JAVA_LETTER", "LComGoogleCommonBaseCharMatcher;", .constantValue.asLong = 0, 0x19, -1, 56, -1, 57 },
    { "JAVA_LETTER_OR_DIGIT", "LComGoogleCommonBaseCharMatcher;", .constantValue.asLong = 0, 0x19, -1, 58, -1, 59 },
    { "JAVA_UPPER_CASE", "LComGoogleCommonBaseCharMatcher;", .constantValue.asLong = 0, 0x19, -1, 60, -1, 61 },
    { "JAVA_LOWER_CASE", "LComGoogleCommonBaseCharMatcher;", .constantValue.asLong = 0, 0x19, -1, 62, -1, 63 },
    { "JAVA_ISO_CONTROL", "LComGoogleCommonBaseCharMatcher;", .constantValue.asLong = 0, 0x19, -1, 64, -1, 65 },
    { "INVISIBLE", "LComGoogleCommonBaseCharMatcher;", .constantValue.asLong = 0, 0x19, -1, 66, -1, 67 },
    { "SINGLE_WIDTH", "LComGoogleCommonBaseCharMatcher;", .constantValue.asLong = 0, 0x19, -1, 68, -1, 69 },
    { "ANY", "LComGoogleCommonBaseCharMatcher;", .constantValue.asLong = 0, 0x19, -1, 70, -1, 71 },
    { "NONE", "LComGoogleCommonBaseCharMatcher;", .constantValue.asLong = 0, 0x19, -1, 72, -1, 73 },
    { "DISTINCT_CHARS", "I", .constantValue.asInt = ComGoogleCommonBaseCharMatcher_DISTINCT_CHARS, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "is", "C", "isNot", "anyOf", "LJavaLangCharSequence;", "noneOf", "inRange", "CC", "forPredicate", "LComGoogleCommonBasePredicate;", "(Lcom/google/common/base/Predicate<-Ljava/lang/Character;>;)Lcom/google/common/base/CharMatcher;", "matches", "and", "LComGoogleCommonBaseCharMatcher;", "or", "precomputedPositive", "ILJavaUtilBitSet;LNSString;", "isSmall", "II", "setBits", "LJavaUtilBitSet;", "matchesAnyOf", "matchesAllOf", "matchesNoneOf", "indexIn", "LJavaLangCharSequence;I", "lastIndexIn", "countIn", "removeFrom", "retainFrom", "replaceFrom", "LJavaLangCharSequence;C", "LJavaLangCharSequence;LJavaLangCharSequence;", "trimFrom", "trimLeadingFrom", "trimTrailingFrom", "collapseFrom", "trimAndCollapseFrom", "finishCollapseFrom", "LJavaLangCharSequence;IICLJavaLangStringBuilder;Z", "apply", "LJavaLangCharacter;", (void *)&ComGoogleCommonBaseCharMatcher__Annotations$0, "toString", "showCharacter", "isEither", &ComGoogleCommonBaseCharMatcher_WHITESPACE, (void *)&ComGoogleCommonBaseCharMatcher__Annotations$1, &ComGoogleCommonBaseCharMatcher_BREAKING_WHITESPACE, (void *)&ComGoogleCommonBaseCharMatcher__Annotations$2, &ComGoogleCommonBaseCharMatcher_ASCII, (void *)&ComGoogleCommonBaseCharMatcher__Annotations$3, &ComGoogleCommonBaseCharMatcher_DIGIT, (void *)&ComGoogleCommonBaseCharMatcher__Annotations$4, &ComGoogleCommonBaseCharMatcher_JAVA_DIGIT, (void *)&ComGoogleCommonBaseCharMatcher__Annotations$5, &ComGoogleCommonBaseCharMatcher_JAVA_LETTER, (void *)&ComGoogleCommonBaseCharMatcher__Annotations$6, &ComGoogleCommonBaseCharMatcher_JAVA_LETTER_OR_DIGIT, (void *)&ComGoogleCommonBaseCharMatcher__Annotations$7, &ComGoogleCommonBaseCharMatcher_JAVA_UPPER_CASE, (void *)&ComGoogleCommonBaseCharMatcher__Annotations$8, &ComGoogleCommonBaseCharMatcher_JAVA_LOWER_CASE, (void *)&ComGoogleCommonBaseCharMatcher__Annotations$9, &ComGoogleCommonBaseCharMatcher_JAVA_ISO_CONTROL, (void *)&ComGoogleCommonBaseCharMatcher__Annotations$10, &ComGoogleCommonBaseCharMatcher_INVISIBLE, (void *)&ComGoogleCommonBaseCharMatcher__Annotations$11, &ComGoogleCommonBaseCharMatcher_SINGLE_WIDTH, (void *)&ComGoogleCommonBaseCharMatcher__Annotations$12, &ComGoogleCommonBaseCharMatcher_ANY, (void *)&ComGoogleCommonBaseCharMatcher__Annotations$13, &ComGoogleCommonBaseCharMatcher_NONE, (void *)&ComGoogleCommonBaseCharMatcher__Annotations$14, "LComGoogleCommonBaseCharMatcher_FastMatcher;LComGoogleCommonBaseCharMatcher_NamedFastMatcher;LComGoogleCommonBaseCharMatcher_NegatedFastMatcher;LComGoogleCommonBaseCharMatcher_BitSetMatcher;LComGoogleCommonBaseCharMatcher_Any;LComGoogleCommonBaseCharMatcher_None;LComGoogleCommonBaseCharMatcher_Whitespace;LComGoogleCommonBaseCharMatcher_BreakingWhitespace;LComGoogleCommonBaseCharMatcher_Ascii;LComGoogleCommonBaseCharMatcher_RangesMatcher;LComGoogleCommonBaseCharMatcher_Digit;LComGoogleCommonBaseCharMatcher_JavaDigit;LComGoogleCommonBaseCharMatcher_JavaLetter;LComGoogleCommonBaseCharMatcher_JavaLetterOrDigit;LComGoogleCommonBaseCharMatcher_JavaUpperCase;LComGoogleCommonBaseCharMatcher_JavaLowerCase;LComGoogleCommonBaseCharMatcher_JavaIsoControl;LComGoogleCommonBaseCharMatcher_Invisible;LComGoogleCommonBaseCharMatcher_SingleWidth;LComGoogleCommonBaseCharMatcher_Negated;LComGoogleCommonBaseCharMatcher_And;LComGoogleCommonBaseCharMatcher_Or;LComGoogleCommonBaseCharMatcher_Is;LComGoogleCommonBaseCharMatcher_IsNot;LComGoogleCommonBaseCharMatcher_IsEither;LComGoogleCommonBaseCharMatcher_AnyOf;LComGoogleCommonBaseCharMatcher_InRange;LComGoogleCommonBaseCharMatcher_ForPredicate;", "Ljava/lang/Object;Lcom/google/common/base/Predicate<Ljava/lang/Character;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseCharMatcher = { "CharMatcher", "com.google.common.base", ptrTable, methods, fields, 7, 0x401, 51, 15, -1, 74, -1, 75, -1 };
  return &_ComGoogleCommonBaseCharMatcher;
}

+ (void)initialize {
  if (self == [ComGoogleCommonBaseCharMatcher class]) {
    ComGoogleCommonBaseCharMatcher_WHITESPACE = ComGoogleCommonBaseCharMatcher_whitespace();
    ComGoogleCommonBaseCharMatcher_BREAKING_WHITESPACE = ComGoogleCommonBaseCharMatcher_breakingWhitespace();
    ComGoogleCommonBaseCharMatcher_ASCII = ComGoogleCommonBaseCharMatcher_ascii();
    ComGoogleCommonBaseCharMatcher_DIGIT = ComGoogleCommonBaseCharMatcher_digit();
    ComGoogleCommonBaseCharMatcher_JAVA_DIGIT = ComGoogleCommonBaseCharMatcher_javaDigit();
    ComGoogleCommonBaseCharMatcher_JAVA_LETTER = ComGoogleCommonBaseCharMatcher_javaLetter();
    ComGoogleCommonBaseCharMatcher_JAVA_LETTER_OR_DIGIT = ComGoogleCommonBaseCharMatcher_javaLetterOrDigit();
    ComGoogleCommonBaseCharMatcher_JAVA_UPPER_CASE = ComGoogleCommonBaseCharMatcher_javaUpperCase();
    ComGoogleCommonBaseCharMatcher_JAVA_LOWER_CASE = ComGoogleCommonBaseCharMatcher_javaLowerCase();
    ComGoogleCommonBaseCharMatcher_JAVA_ISO_CONTROL = ComGoogleCommonBaseCharMatcher_javaIsoControl();
    ComGoogleCommonBaseCharMatcher_INVISIBLE = ComGoogleCommonBaseCharMatcher_invisible();
    ComGoogleCommonBaseCharMatcher_SINGLE_WIDTH = ComGoogleCommonBaseCharMatcher_singleWidth();
    ComGoogleCommonBaseCharMatcher_ANY = ComGoogleCommonBaseCharMatcher_any();
    ComGoogleCommonBaseCharMatcher_NONE = ComGoogleCommonBaseCharMatcher_none();
    J2OBJC_SET_INITIALIZED(ComGoogleCommonBaseCharMatcher)
  }
}

@end

ComGoogleCommonBaseCharMatcher *ComGoogleCommonBaseCharMatcher_any() {
  ComGoogleCommonBaseCharMatcher_initialize();
  return JreLoadStatic(ComGoogleCommonBaseCharMatcher_Any, INSTANCE);
}

ComGoogleCommonBaseCharMatcher *ComGoogleCommonBaseCharMatcher_none() {
  ComGoogleCommonBaseCharMatcher_initialize();
  return JreLoadStatic(ComGoogleCommonBaseCharMatcher_None, INSTANCE);
}

ComGoogleCommonBaseCharMatcher *ComGoogleCommonBaseCharMatcher_whitespace() {
  ComGoogleCommonBaseCharMatcher_initialize();
  return JreLoadStatic(ComGoogleCommonBaseCharMatcher_Whitespace, INSTANCE);
}

ComGoogleCommonBaseCharMatcher *ComGoogleCommonBaseCharMatcher_breakingWhitespace() {
  ComGoogleCommonBaseCharMatcher_initialize();
  return JreLoadStatic(ComGoogleCommonBaseCharMatcher_BreakingWhitespace, INSTANCE);
}

ComGoogleCommonBaseCharMatcher *ComGoogleCommonBaseCharMatcher_ascii() {
  ComGoogleCommonBaseCharMatcher_initialize();
  return JreLoadStatic(ComGoogleCommonBaseCharMatcher_Ascii, INSTANCE);
}

ComGoogleCommonBaseCharMatcher *ComGoogleCommonBaseCharMatcher_digit() {
  ComGoogleCommonBaseCharMatcher_initialize();
  return JreLoadStatic(ComGoogleCommonBaseCharMatcher_Digit, INSTANCE);
}

ComGoogleCommonBaseCharMatcher *ComGoogleCommonBaseCharMatcher_javaDigit() {
  ComGoogleCommonBaseCharMatcher_initialize();
  return JreLoadStatic(ComGoogleCommonBaseCharMatcher_JavaDigit, INSTANCE);
}

ComGoogleCommonBaseCharMatcher *ComGoogleCommonBaseCharMatcher_javaLetter() {
  ComGoogleCommonBaseCharMatcher_initialize();
  return JreLoadStatic(ComGoogleCommonBaseCharMatcher_JavaLetter, INSTANCE);
}

ComGoogleCommonBaseCharMatcher *ComGoogleCommonBaseCharMatcher_javaLetterOrDigit() {
  ComGoogleCommonBaseCharMatcher_initialize();
  return JreLoadStatic(ComGoogleCommonBaseCharMatcher_JavaLetterOrDigit, INSTANCE);
}

ComGoogleCommonBaseCharMatcher *ComGoogleCommonBaseCharMatcher_javaUpperCase() {
  ComGoogleCommonBaseCharMatcher_initialize();
  return JreLoadStatic(ComGoogleCommonBaseCharMatcher_JavaUpperCase, INSTANCE);
}

ComGoogleCommonBaseCharMatcher *ComGoogleCommonBaseCharMatcher_javaLowerCase() {
  ComGoogleCommonBaseCharMatcher_initialize();
  return JreLoadStatic(ComGoogleCommonBaseCharMatcher_JavaLowerCase, INSTANCE);
}

ComGoogleCommonBaseCharMatcher *ComGoogleCommonBaseCharMatcher_javaIsoControl() {
  ComGoogleCommonBaseCharMatcher_initialize();
  return JreLoadStatic(ComGoogleCommonBaseCharMatcher_JavaIsoControl, INSTANCE);
}

ComGoogleCommonBaseCharMatcher *ComGoogleCommonBaseCharMatcher_invisible() {
  ComGoogleCommonBaseCharMatcher_initialize();
  return JreLoadStatic(ComGoogleCommonBaseCharMatcher_Invisible, INSTANCE);
}

ComGoogleCommonBaseCharMatcher *ComGoogleCommonBaseCharMatcher_singleWidth() {
  ComGoogleCommonBaseCharMatcher_initialize();
  return JreLoadStatic(ComGoogleCommonBaseCharMatcher_SingleWidth, INSTANCE);
}

ComGoogleCommonBaseCharMatcher *ComGoogleCommonBaseCharMatcher_isWithChar_(jchar match) {
  ComGoogleCommonBaseCharMatcher_initialize();
  return new_ComGoogleCommonBaseCharMatcher_Is_initWithChar_(match);
}

ComGoogleCommonBaseCharMatcher *ComGoogleCommonBaseCharMatcher_isNotWithChar_(jchar match) {
  ComGoogleCommonBaseCharMatcher_initialize();
  return new_ComGoogleCommonBaseCharMatcher_IsNot_initWithChar_(match);
}

ComGoogleCommonBaseCharMatcher *ComGoogleCommonBaseCharMatcher_anyOfWithJavaLangCharSequence_(id<JavaLangCharSequence> sequence) {
  ComGoogleCommonBaseCharMatcher_initialize();
  switch ([((id<JavaLangCharSequence>) nil_chk(sequence)) java_length]) {
    case 0:
    return ComGoogleCommonBaseCharMatcher_none();
    case 1:
    return ComGoogleCommonBaseCharMatcher_isWithChar_([sequence charAtWithInt:0]);
    case 2:
    return ComGoogleCommonBaseCharMatcher_isEitherWithChar_withChar_([sequence charAtWithInt:0], [sequence charAtWithInt:1]);
    default:
    return new_ComGoogleCommonBaseCharMatcher_AnyOf_initWithJavaLangCharSequence_(sequence);
  }
}

ComGoogleCommonBaseCharMatcher *ComGoogleCommonBaseCharMatcher_noneOfWithJavaLangCharSequence_(id<JavaLangCharSequence> sequence) {
  ComGoogleCommonBaseCharMatcher_initialize();
  return [((ComGoogleCommonBaseCharMatcher *) nil_chk(ComGoogleCommonBaseCharMatcher_anyOfWithJavaLangCharSequence_(sequence))) negate];
}

ComGoogleCommonBaseCharMatcher *ComGoogleCommonBaseCharMatcher_inRangeWithChar_withChar_(jchar startInclusive, jchar endInclusive) {
  ComGoogleCommonBaseCharMatcher_initialize();
  return new_ComGoogleCommonBaseCharMatcher_InRange_initWithChar_withChar_(startInclusive, endInclusive);
}

ComGoogleCommonBaseCharMatcher *ComGoogleCommonBaseCharMatcher_forPredicateWithComGoogleCommonBasePredicate_(id<ComGoogleCommonBasePredicate> predicate) {
  ComGoogleCommonBaseCharMatcher_initialize();
  return [predicate isKindOfClass:[ComGoogleCommonBaseCharMatcher class]] ? (ComGoogleCommonBaseCharMatcher *) cast_chk(predicate, [ComGoogleCommonBaseCharMatcher class]) : new_ComGoogleCommonBaseCharMatcher_ForPredicate_initWithComGoogleCommonBasePredicate_(predicate);
}

void ComGoogleCommonBaseCharMatcher_init(ComGoogleCommonBaseCharMatcher *self) {
  NSObject_init(self);
}

ComGoogleCommonBaseCharMatcher *ComGoogleCommonBaseCharMatcher_precomputedPositiveWithInt_withJavaUtilBitSet_withNSString_(jint totalCharacters, JavaUtilBitSet *table, NSString *description_) {
  ComGoogleCommonBaseCharMatcher_initialize();
  {
    jchar c1;
    jchar c2;
    switch (totalCharacters) {
      case 0:
      return ComGoogleCommonBaseCharMatcher_none();
      case 1:
      return ComGoogleCommonBaseCharMatcher_isWithChar_((jchar) [((JavaUtilBitSet *) nil_chk(table)) nextSetBitWithInt:0]);
      case 2:
      c1 = (jchar) [((JavaUtilBitSet *) nil_chk(table)) nextSetBitWithInt:0];
      c2 = (jchar) [table nextSetBitWithInt:c1 + 1];
      return ComGoogleCommonBaseCharMatcher_isEitherWithChar_withChar_(c1, c2);
      default:
      return ComGoogleCommonBaseCharMatcher_isSmallWithInt_withInt_(totalCharacters, [((JavaUtilBitSet *) nil_chk(table)) length]) ? ComGoogleCommonBaseSmallCharMatcher_fromWithJavaUtilBitSet_withNSString_(table, description_) : new_ComGoogleCommonBaseCharMatcher_BitSetMatcher_initWithJavaUtilBitSet_withNSString_(table, description_);
    }
  }
}

jboolean ComGoogleCommonBaseCharMatcher_isSmallWithInt_withInt_(jint totalCharacters, jint tableLength) {
  ComGoogleCommonBaseCharMatcher_initialize();
  return totalCharacters <= ComGoogleCommonBaseSmallCharMatcher_MAX_SIZE && tableLength > (totalCharacters * 4 * JavaLangCharacter_SIZE);
}

NSString *ComGoogleCommonBaseCharMatcher_finishCollapseFromWithJavaLangCharSequence_withInt_withInt_withChar_withJavaLangStringBuilder_withBoolean_(ComGoogleCommonBaseCharMatcher *self, id<JavaLangCharSequence> sequence, jint start, jint end, jchar replacement, JavaLangStringBuilder *builder, jboolean inMatchingGroup) {
  for (jint i = start; i < end; i++) {
    jchar c = [((id<JavaLangCharSequence>) nil_chk(sequence)) charAtWithInt:i];
    if ([self matchesWithChar:c]) {
      if (!inMatchingGroup) {
        (void) [((JavaLangStringBuilder *) nil_chk(builder)) appendWithChar:replacement];
        inMatchingGroup = true;
      }
    }
    else {
      (void) [((JavaLangStringBuilder *) nil_chk(builder)) appendWithChar:c];
      inMatchingGroup = false;
    }
  }
  return [((JavaLangStringBuilder *) nil_chk(builder)) description];
}

NSString *ComGoogleCommonBaseCharMatcher_showCharacterWithChar_(jchar c) {
  ComGoogleCommonBaseCharMatcher_initialize();
  NSString *hex = @"0123456789ABCDEF";
  IOSCharArray *tmp = [IOSCharArray newArrayWithChars:(jchar[]){ '\\', 'u', 0x0000, 0x0000, 0x0000, 0x0000 } count:6];
  for (jint i = 0; i < 4; i++) {
    *IOSCharArray_GetRef(tmp, 5 - i) = [hex charAtWithInt:c & (jint) 0xF];
    c = (jchar) (JreRShift32(c, 4));
  }
  return NSString_java_valueOfChars_(tmp);
}

ComGoogleCommonBaseCharMatcher_IsEither *ComGoogleCommonBaseCharMatcher_isEitherWithChar_withChar_(jchar c1, jchar c2) {
  ComGoogleCommonBaseCharMatcher_initialize();
  return new_ComGoogleCommonBaseCharMatcher_IsEither_initWithChar_withChar_(c1, c2);
}

IOSObjectArray *ComGoogleCommonBaseCharMatcher__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonBaseCharMatcher__Annotations$1() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonBaseCharMatcher__Annotations$2() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonBaseCharMatcher__Annotations$3() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonBaseCharMatcher__Annotations$4() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonBaseCharMatcher__Annotations$5() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonBaseCharMatcher__Annotations$6() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonBaseCharMatcher__Annotations$7() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonBaseCharMatcher__Annotations$8() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonBaseCharMatcher__Annotations$9() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonBaseCharMatcher__Annotations$10() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonBaseCharMatcher__Annotations$11() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonBaseCharMatcher__Annotations$12() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonBaseCharMatcher__Annotations$13() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonBaseCharMatcher__Annotations$14() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonBaseCharMatcher)

@implementation ComGoogleCommonBaseCharMatcher_Negated

- (instancetype)initWithComGoogleCommonBaseCharMatcher:(ComGoogleCommonBaseCharMatcher *)original {
  ComGoogleCommonBaseCharMatcher_Negated_initWithComGoogleCommonBaseCharMatcher_(self, original);
  return self;
}

- (jboolean)matchesWithChar:(jchar)c {
  return ![((ComGoogleCommonBaseCharMatcher *) nil_chk(original_)) matchesWithChar:c];
}

- (jboolean)matchesAllOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence {
  return [((ComGoogleCommonBaseCharMatcher *) nil_chk(original_)) matchesNoneOfWithJavaLangCharSequence:sequence];
}

- (jboolean)matchesNoneOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence {
  return [((ComGoogleCommonBaseCharMatcher *) nil_chk(original_)) matchesAllOfWithJavaLangCharSequence:sequence];
}

- (jint)countInWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence {
  return [((id<JavaLangCharSequence>) nil_chk(sequence)) java_length] - [((ComGoogleCommonBaseCharMatcher *) nil_chk(original_)) countInWithJavaLangCharSequence:sequence];
}

- (void)setBitsWithJavaUtilBitSet:(JavaUtilBitSet *)table {
  JavaUtilBitSet *tmp = new_JavaUtilBitSet_init();
  [((ComGoogleCommonBaseCharMatcher *) nil_chk(original_)) setBitsWithJavaUtilBitSet:tmp];
  [tmp flipWithInt:JavaLangCharacter_MIN_VALUE withInt:JavaLangCharacter_MAX_VALUE + 1];
  [((JavaUtilBitSet *) nil_chk(table)) or__WithJavaUtilBitSet:tmp];
}

- (ComGoogleCommonBaseCharMatcher *)negate {
  return original_;
}

- (NSString *)description {
  return JreStrcat("@$", original_, @".negate()");
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 7, 8, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseCharMatcher;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 9, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonBaseCharMatcher:);
  methods[1].selector = @selector(matchesWithChar:);
  methods[2].selector = @selector(matchesAllOfWithJavaLangCharSequence:);
  methods[3].selector = @selector(matchesNoneOfWithJavaLangCharSequence:);
  methods[4].selector = @selector(countInWithJavaLangCharSequence:);
  methods[5].selector = @selector(setBitsWithJavaUtilBitSet:);
  methods[6].selector = @selector(negate);
  methods[7].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "original_", "LComGoogleCommonBaseCharMatcher;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonBaseCharMatcher;", "matches", "C", "matchesAllOf", "LJavaLangCharSequence;", "matchesNoneOf", "countIn", "setBits", "LJavaUtilBitSet;", "toString" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseCharMatcher_Negated = { "Negated", "com.google.common.base", ptrTable, methods, fields, 7, 0xa, 8, 1, 0, -1, -1, -1, -1 };
  return &_ComGoogleCommonBaseCharMatcher_Negated;
}

@end

void ComGoogleCommonBaseCharMatcher_Negated_initWithComGoogleCommonBaseCharMatcher_(ComGoogleCommonBaseCharMatcher_Negated *self, ComGoogleCommonBaseCharMatcher *original) {
  ComGoogleCommonBaseCharMatcher_init(self);
  self->original_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(original);
}

ComGoogleCommonBaseCharMatcher_Negated *new_ComGoogleCommonBaseCharMatcher_Negated_initWithComGoogleCommonBaseCharMatcher_(ComGoogleCommonBaseCharMatcher *original) {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseCharMatcher_Negated, initWithComGoogleCommonBaseCharMatcher_, original)
}

ComGoogleCommonBaseCharMatcher_Negated *create_ComGoogleCommonBaseCharMatcher_Negated_initWithComGoogleCommonBaseCharMatcher_(ComGoogleCommonBaseCharMatcher *original) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonBaseCharMatcher_Negated, initWithComGoogleCommonBaseCharMatcher_, original)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonBaseCharMatcher_Negated)

@implementation ComGoogleCommonBaseCharMatcher_NegatedFastMatcher

- (instancetype)initWithComGoogleCommonBaseCharMatcher:(ComGoogleCommonBaseCharMatcher *)original {
  ComGoogleCommonBaseCharMatcher_NegatedFastMatcher_initWithComGoogleCommonBaseCharMatcher_(self, original);
  return self;
}

- (ComGoogleCommonBaseCharMatcher *)precomputed {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseCharMatcher;", 0x11, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonBaseCharMatcher:);
  methods[1].selector = @selector(precomputed);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LComGoogleCommonBaseCharMatcher;" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseCharMatcher_NegatedFastMatcher = { "NegatedFastMatcher", "com.google.common.base", ptrTable, methods, NULL, 7, 0x8, 2, 0, 0, -1, -1, -1, -1 };
  return &_ComGoogleCommonBaseCharMatcher_NegatedFastMatcher;
}

@end

void ComGoogleCommonBaseCharMatcher_NegatedFastMatcher_initWithComGoogleCommonBaseCharMatcher_(ComGoogleCommonBaseCharMatcher_NegatedFastMatcher *self, ComGoogleCommonBaseCharMatcher *original) {
  ComGoogleCommonBaseCharMatcher_Negated_initWithComGoogleCommonBaseCharMatcher_(self, original);
}

ComGoogleCommonBaseCharMatcher_NegatedFastMatcher *new_ComGoogleCommonBaseCharMatcher_NegatedFastMatcher_initWithComGoogleCommonBaseCharMatcher_(ComGoogleCommonBaseCharMatcher *original) {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseCharMatcher_NegatedFastMatcher, initWithComGoogleCommonBaseCharMatcher_, original)
}

ComGoogleCommonBaseCharMatcher_NegatedFastMatcher *create_ComGoogleCommonBaseCharMatcher_NegatedFastMatcher_initWithComGoogleCommonBaseCharMatcher_(ComGoogleCommonBaseCharMatcher *original) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonBaseCharMatcher_NegatedFastMatcher, initWithComGoogleCommonBaseCharMatcher_, original)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonBaseCharMatcher_NegatedFastMatcher)

@implementation ComGoogleCommonBaseCharMatcher_1

- (instancetype)initWithNSString:(NSString *)capture$0
withComGoogleCommonBaseCharMatcher:(ComGoogleCommonBaseCharMatcher *)original {
  ComGoogleCommonBaseCharMatcher_1_initWithNSString_withComGoogleCommonBaseCharMatcher_(self, capture$0, original);
  return self;
}

- (NSString *)description {
  return val$description_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withComGoogleCommonBaseCharMatcher:);
  methods[1].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$description_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonBaseCharMatcher;", "toString", "precomputedInternal" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseCharMatcher_1 = { "", "com.google.common.base", ptrTable, methods, fields, 7, 0x8018, 2, 1, 0, -1, 2, -1, -1 };
  return &_ComGoogleCommonBaseCharMatcher_1;
}

@end

void ComGoogleCommonBaseCharMatcher_1_initWithNSString_withComGoogleCommonBaseCharMatcher_(ComGoogleCommonBaseCharMatcher_1 *self, NSString *capture$0, ComGoogleCommonBaseCharMatcher *original) {
  self->val$description_ = capture$0;
  ComGoogleCommonBaseCharMatcher_NegatedFastMatcher_initWithComGoogleCommonBaseCharMatcher_(self, original);
}

ComGoogleCommonBaseCharMatcher_1 *new_ComGoogleCommonBaseCharMatcher_1_initWithNSString_withComGoogleCommonBaseCharMatcher_(NSString *capture$0, ComGoogleCommonBaseCharMatcher *original) {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseCharMatcher_1, initWithNSString_withComGoogleCommonBaseCharMatcher_, capture$0, original)
}

ComGoogleCommonBaseCharMatcher_1 *create_ComGoogleCommonBaseCharMatcher_1_initWithNSString_withComGoogleCommonBaseCharMatcher_(NSString *capture$0, ComGoogleCommonBaseCharMatcher *original) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonBaseCharMatcher_1, initWithNSString_withComGoogleCommonBaseCharMatcher_, capture$0, original)
}

@implementation ComGoogleCommonBaseCharMatcher_FastMatcher

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonBaseCharMatcher_FastMatcher_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (ComGoogleCommonBaseCharMatcher *)precomputed {
  return self;
}

- (ComGoogleCommonBaseCharMatcher *)negate {
  return new_ComGoogleCommonBaseCharMatcher_NegatedFastMatcher_initWithComGoogleCommonBaseCharMatcher_(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseCharMatcher;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseCharMatcher;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(precomputed);
  methods[2].selector = @selector(negate);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LComGoogleCommonBaseCharMatcher;" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseCharMatcher_FastMatcher = { "FastMatcher", "com.google.common.base", ptrTable, methods, NULL, 7, 0x408, 3, 0, 0, -1, -1, -1, -1 };
  return &_ComGoogleCommonBaseCharMatcher_FastMatcher;
}

@end

void ComGoogleCommonBaseCharMatcher_FastMatcher_init(ComGoogleCommonBaseCharMatcher_FastMatcher *self) {
  ComGoogleCommonBaseCharMatcher_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonBaseCharMatcher_FastMatcher)

@implementation ComGoogleCommonBaseCharMatcher_NamedFastMatcher

- (instancetype)initWithNSString:(NSString *)description_ {
  ComGoogleCommonBaseCharMatcher_NamedFastMatcher_initWithNSString_(self, description_);
  return self;
}

- (NSString *)description {
  return description__;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, 1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "description__", "LNSString;", .constantValue.asLong = 0, 0x12, 2, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "toString", "description", "LComGoogleCommonBaseCharMatcher;" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseCharMatcher_NamedFastMatcher = { "NamedFastMatcher", "com.google.common.base", ptrTable, methods, fields, 7, 0x408, 2, 1, 3, -1, -1, -1, -1 };
  return &_ComGoogleCommonBaseCharMatcher_NamedFastMatcher;
}

@end

void ComGoogleCommonBaseCharMatcher_NamedFastMatcher_initWithNSString_(ComGoogleCommonBaseCharMatcher_NamedFastMatcher *self, NSString *description_) {
  ComGoogleCommonBaseCharMatcher_FastMatcher_init(self);
  self->description__ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(description_);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonBaseCharMatcher_NamedFastMatcher)

@implementation ComGoogleCommonBaseCharMatcher_BitSetMatcher

- (instancetype)initWithJavaUtilBitSet:(JavaUtilBitSet *)table
                          withNSString:(NSString *)description_ {
  ComGoogleCommonBaseCharMatcher_BitSetMatcher_initWithJavaUtilBitSet_withNSString_(self, table, description_);
  return self;
}

- (jboolean)matchesWithChar:(jchar)c {
  return [((JavaUtilBitSet *) nil_chk(table_)) getWithInt:c];
}

- (void)setBitsWithJavaUtilBitSet:(JavaUtilBitSet *)bitSet {
  [((JavaUtilBitSet *) nil_chk(bitSet)) or__WithJavaUtilBitSet:table_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilBitSet:withNSString:);
  methods[1].selector = @selector(matchesWithChar:);
  methods[2].selector = @selector(setBitsWithJavaUtilBitSet:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "table_", "LJavaUtilBitSet;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilBitSet;LNSString;", "matches", "C", "setBits", "LJavaUtilBitSet;", "LComGoogleCommonBaseCharMatcher;" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseCharMatcher_BitSetMatcher = { "BitSetMatcher", "com.google.common.base", ptrTable, methods, fields, 7, 0x1a, 3, 1, 5, -1, -1, -1, -1 };
  return &_ComGoogleCommonBaseCharMatcher_BitSetMatcher;
}

@end

void ComGoogleCommonBaseCharMatcher_BitSetMatcher_initWithJavaUtilBitSet_withNSString_(ComGoogleCommonBaseCharMatcher_BitSetMatcher *self, JavaUtilBitSet *table, NSString *description_) {
  ComGoogleCommonBaseCharMatcher_NamedFastMatcher_initWithNSString_(self, description_);
  if ([((JavaUtilBitSet *) nil_chk(table)) length] + JavaLangLong_SIZE < [table size]) {
    table = (JavaUtilBitSet *) cast_chk([table java_clone], [JavaUtilBitSet class]);
  }
  self->table_ = table;
}

ComGoogleCommonBaseCharMatcher_BitSetMatcher *new_ComGoogleCommonBaseCharMatcher_BitSetMatcher_initWithJavaUtilBitSet_withNSString_(JavaUtilBitSet *table, NSString *description_) {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseCharMatcher_BitSetMatcher, initWithJavaUtilBitSet_withNSString_, table, description_)
}

ComGoogleCommonBaseCharMatcher_BitSetMatcher *create_ComGoogleCommonBaseCharMatcher_BitSetMatcher_initWithJavaUtilBitSet_withNSString_(JavaUtilBitSet *table, NSString *description_) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonBaseCharMatcher_BitSetMatcher, initWithJavaUtilBitSet_withNSString_, table, description_)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonBaseCharMatcher_BitSetMatcher)

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonBaseCharMatcher_Any)

@implementation ComGoogleCommonBaseCharMatcher_Any

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonBaseCharMatcher_Any_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)matchesWithChar:(jchar)c {
  return true;
}

- (jint)indexInWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence {
  return ([((id<JavaLangCharSequence>) nil_chk(sequence)) java_length] == 0) ? -1 : 0;
}

- (jint)indexInWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence
                                withInt:(jint)start {
  jint length = [((id<JavaLangCharSequence>) nil_chk(sequence)) java_length];
  ComGoogleCommonBasePreconditions_checkPositionIndexWithInt_withInt_(start, length);
  return (start == length) ? -1 : start;
}

- (jint)lastIndexInWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence {
  return [((id<JavaLangCharSequence>) nil_chk(sequence)) java_length] - 1;
}

- (jboolean)matchesAllOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence {
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(sequence);
  return true;
}

- (jboolean)matchesNoneOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence {
  return [((id<JavaLangCharSequence>) nil_chk(sequence)) java_length] == 0;
}

- (NSString *)removeFromWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence {
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(sequence);
  return @"";
}

- (NSString *)replaceFromWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence
                                         withChar:(jchar)replacement {
  IOSCharArray *array = [IOSCharArray newArrayWithLength:[((id<JavaLangCharSequence>) nil_chk(sequence)) java_length]];
  JavaUtilArrays_fillWithCharArray_withChar_(array, replacement);
  return [NSString java_stringWithCharacters:array];
}

- (NSString *)replaceFromWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence
                         withJavaLangCharSequence:(id<JavaLangCharSequence>)replacement {
  JavaLangStringBuilder *result = new_JavaLangStringBuilder_initWithInt_([((id<JavaLangCharSequence>) nil_chk(sequence)) java_length] * [((id<JavaLangCharSequence>) nil_chk(replacement)) java_length]);
  for (jint i = 0; i < [sequence java_length]; i++) {
    (void) [result appendWithJavaLangCharSequence:replacement];
  }
  return [result description];
}

- (NSString *)collapseFromWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence
                                          withChar:(jchar)replacement {
  return ([((id<JavaLangCharSequence>) nil_chk(sequence)) java_length] == 0) ? @"" : NSString_java_valueOfChar_(replacement);
}

- (NSString *)trimFromWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence {
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(sequence);
  return @"";
}

- (jint)countInWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence {
  return [((id<JavaLangCharSequence>) nil_chk(sequence)) java_length];
}

- (ComGoogleCommonBaseCharMatcher *)and__WithComGoogleCommonBaseCharMatcher:(ComGoogleCommonBaseCharMatcher *)other {
  return ComGoogleCommonBasePreconditions_checkNotNullWithId_(other);
}

- (ComGoogleCommonBaseCharMatcher *)or__WithComGoogleCommonBaseCharMatcher:(ComGoogleCommonBaseCharMatcher *)other {
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(other);
  return self;
}

- (ComGoogleCommonBaseCharMatcher *)negate {
  return ComGoogleCommonBaseCharMatcher_none();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 9, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 12, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 13, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 14, 3, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseCharMatcher;", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseCharMatcher;", 0x1, 17, 16, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseCharMatcher;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(matchesWithChar:);
  methods[2].selector = @selector(indexInWithJavaLangCharSequence:);
  methods[3].selector = @selector(indexInWithJavaLangCharSequence:withInt:);
  methods[4].selector = @selector(lastIndexInWithJavaLangCharSequence:);
  methods[5].selector = @selector(matchesAllOfWithJavaLangCharSequence:);
  methods[6].selector = @selector(matchesNoneOfWithJavaLangCharSequence:);
  methods[7].selector = @selector(removeFromWithJavaLangCharSequence:);
  methods[8].selector = @selector(replaceFromWithJavaLangCharSequence:withChar:);
  methods[9].selector = @selector(replaceFromWithJavaLangCharSequence:withJavaLangCharSequence:);
  methods[10].selector = @selector(collapseFromWithJavaLangCharSequence:withChar:);
  methods[11].selector = @selector(trimFromWithJavaLangCharSequence:);
  methods[12].selector = @selector(countInWithJavaLangCharSequence:);
  methods[13].selector = @selector(and__WithComGoogleCommonBaseCharMatcher:);
  methods[14].selector = @selector(or__WithComGoogleCommonBaseCharMatcher:);
  methods[15].selector = @selector(negate);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LComGoogleCommonBaseCharMatcher_Any;", .constantValue.asLong = 0, 0x18, -1, 18, -1, -1 },
  };
  static const void *ptrTable[] = { "matches", "C", "indexIn", "LJavaLangCharSequence;", "LJavaLangCharSequence;I", "lastIndexIn", "matchesAllOf", "matchesNoneOf", "removeFrom", "replaceFrom", "LJavaLangCharSequence;C", "LJavaLangCharSequence;LJavaLangCharSequence;", "collapseFrom", "trimFrom", "countIn", "and", "LComGoogleCommonBaseCharMatcher;", "or", &ComGoogleCommonBaseCharMatcher_Any_INSTANCE };
  static const J2ObjcClassInfo _ComGoogleCommonBaseCharMatcher_Any = { "Any", "com.google.common.base", ptrTable, methods, fields, 7, 0x1a, 16, 1, 16, -1, -1, -1, -1 };
  return &_ComGoogleCommonBaseCharMatcher_Any;
}

+ (void)initialize {
  if (self == [ComGoogleCommonBaseCharMatcher_Any class]) {
    ComGoogleCommonBaseCharMatcher_Any_INSTANCE = new_ComGoogleCommonBaseCharMatcher_Any_init();
    J2OBJC_SET_INITIALIZED(ComGoogleCommonBaseCharMatcher_Any)
  }
}

@end

void ComGoogleCommonBaseCharMatcher_Any_init(ComGoogleCommonBaseCharMatcher_Any *self) {
  ComGoogleCommonBaseCharMatcher_NamedFastMatcher_initWithNSString_(self, @"CharMatcher.any()");
}

ComGoogleCommonBaseCharMatcher_Any *new_ComGoogleCommonBaseCharMatcher_Any_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseCharMatcher_Any, init)
}

ComGoogleCommonBaseCharMatcher_Any *create_ComGoogleCommonBaseCharMatcher_Any_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonBaseCharMatcher_Any, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonBaseCharMatcher_Any)

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonBaseCharMatcher_None)

@implementation ComGoogleCommonBaseCharMatcher_None

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonBaseCharMatcher_None_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)matchesWithChar:(jchar)c {
  return false;
}

- (jint)indexInWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence {
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(sequence);
  return -1;
}

- (jint)indexInWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence
                                withInt:(jint)start {
  jint length = [((id<JavaLangCharSequence>) nil_chk(sequence)) java_length];
  ComGoogleCommonBasePreconditions_checkPositionIndexWithInt_withInt_(start, length);
  return -1;
}

- (jint)lastIndexInWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence {
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(sequence);
  return -1;
}

- (jboolean)matchesAllOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence {
  return [((id<JavaLangCharSequence>) nil_chk(sequence)) java_length] == 0;
}

- (jboolean)matchesNoneOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence {
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(sequence);
  return true;
}

- (NSString *)removeFromWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence {
  return [((id<JavaLangCharSequence>) nil_chk(sequence)) description];
}

- (NSString *)replaceFromWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence
                                         withChar:(jchar)replacement {
  return [((id<JavaLangCharSequence>) nil_chk(sequence)) description];
}

- (NSString *)replaceFromWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence
                         withJavaLangCharSequence:(id<JavaLangCharSequence>)replacement {
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(replacement);
  return [((id<JavaLangCharSequence>) nil_chk(sequence)) description];
}

- (NSString *)collapseFromWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence
                                          withChar:(jchar)replacement {
  return [((id<JavaLangCharSequence>) nil_chk(sequence)) description];
}

- (NSString *)trimFromWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence {
  return [((id<JavaLangCharSequence>) nil_chk(sequence)) description];
}

- (NSString *)trimLeadingFromWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence {
  return [((id<JavaLangCharSequence>) nil_chk(sequence)) description];
}

- (NSString *)trimTrailingFromWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence {
  return [((id<JavaLangCharSequence>) nil_chk(sequence)) description];
}

- (jint)countInWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence {
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(sequence);
  return 0;
}

- (ComGoogleCommonBaseCharMatcher *)and__WithComGoogleCommonBaseCharMatcher:(ComGoogleCommonBaseCharMatcher *)other {
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(other);
  return self;
}

- (ComGoogleCommonBaseCharMatcher *)or__WithComGoogleCommonBaseCharMatcher:(ComGoogleCommonBaseCharMatcher *)other {
  return ComGoogleCommonBasePreconditions_checkNotNullWithId_(other);
}

- (ComGoogleCommonBaseCharMatcher *)negate {
  return ComGoogleCommonBaseCharMatcher_any();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 9, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 12, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 13, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 14, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 15, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 16, 3, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseCharMatcher;", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseCharMatcher;", 0x1, 19, 18, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseCharMatcher;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(matchesWithChar:);
  methods[2].selector = @selector(indexInWithJavaLangCharSequence:);
  methods[3].selector = @selector(indexInWithJavaLangCharSequence:withInt:);
  methods[4].selector = @selector(lastIndexInWithJavaLangCharSequence:);
  methods[5].selector = @selector(matchesAllOfWithJavaLangCharSequence:);
  methods[6].selector = @selector(matchesNoneOfWithJavaLangCharSequence:);
  methods[7].selector = @selector(removeFromWithJavaLangCharSequence:);
  methods[8].selector = @selector(replaceFromWithJavaLangCharSequence:withChar:);
  methods[9].selector = @selector(replaceFromWithJavaLangCharSequence:withJavaLangCharSequence:);
  methods[10].selector = @selector(collapseFromWithJavaLangCharSequence:withChar:);
  methods[11].selector = @selector(trimFromWithJavaLangCharSequence:);
  methods[12].selector = @selector(trimLeadingFromWithJavaLangCharSequence:);
  methods[13].selector = @selector(trimTrailingFromWithJavaLangCharSequence:);
  methods[14].selector = @selector(countInWithJavaLangCharSequence:);
  methods[15].selector = @selector(and__WithComGoogleCommonBaseCharMatcher:);
  methods[16].selector = @selector(or__WithComGoogleCommonBaseCharMatcher:);
  methods[17].selector = @selector(negate);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LComGoogleCommonBaseCharMatcher_None;", .constantValue.asLong = 0, 0x18, -1, 20, -1, -1 },
  };
  static const void *ptrTable[] = { "matches", "C", "indexIn", "LJavaLangCharSequence;", "LJavaLangCharSequence;I", "lastIndexIn", "matchesAllOf", "matchesNoneOf", "removeFrom", "replaceFrom", "LJavaLangCharSequence;C", "LJavaLangCharSequence;LJavaLangCharSequence;", "collapseFrom", "trimFrom", "trimLeadingFrom", "trimTrailingFrom", "countIn", "and", "LComGoogleCommonBaseCharMatcher;", "or", &ComGoogleCommonBaseCharMatcher_None_INSTANCE };
  static const J2ObjcClassInfo _ComGoogleCommonBaseCharMatcher_None = { "None", "com.google.common.base", ptrTable, methods, fields, 7, 0x1a, 18, 1, 18, -1, -1, -1, -1 };
  return &_ComGoogleCommonBaseCharMatcher_None;
}

+ (void)initialize {
  if (self == [ComGoogleCommonBaseCharMatcher_None class]) {
    ComGoogleCommonBaseCharMatcher_None_INSTANCE = new_ComGoogleCommonBaseCharMatcher_None_init();
    J2OBJC_SET_INITIALIZED(ComGoogleCommonBaseCharMatcher_None)
  }
}

@end

void ComGoogleCommonBaseCharMatcher_None_init(ComGoogleCommonBaseCharMatcher_None *self) {
  ComGoogleCommonBaseCharMatcher_NamedFastMatcher_initWithNSString_(self, @"CharMatcher.none()");
}

ComGoogleCommonBaseCharMatcher_None *new_ComGoogleCommonBaseCharMatcher_None_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseCharMatcher_None, init)
}

ComGoogleCommonBaseCharMatcher_None *create_ComGoogleCommonBaseCharMatcher_None_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonBaseCharMatcher_None, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonBaseCharMatcher_None)

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonBaseCharMatcher_Whitespace)

NSString *ComGoogleCommonBaseCharMatcher_Whitespace_TABLE = @"\u2002\u3000\x0d\xc2\x85\u200a\u2005\u2000\u3000\u2029\x0b\u3000\u2008\u2003\u205f\u3000\u1680\t \u2006\u2001\u202f\u00a0\x0c\u2009\u3000\u2004\u3000\u3000\u2028\n\u2007\u3000";
jint ComGoogleCommonBaseCharMatcher_Whitespace_SHIFT;
ComGoogleCommonBaseCharMatcher_Whitespace *ComGoogleCommonBaseCharMatcher_Whitespace_INSTANCE;

@implementation ComGoogleCommonBaseCharMatcher_Whitespace

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonBaseCharMatcher_Whitespace_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)matchesWithChar:(jchar)c {
  return [((NSString *) nil_chk(ComGoogleCommonBaseCharMatcher_Whitespace_TABLE)) charAtWithInt:JreURShift32((ComGoogleCommonBaseCharMatcher_Whitespace_MULTIPLIER * c), ComGoogleCommonBaseCharMatcher_Whitespace_SHIFT)] == c;
}

- (void)setBitsWithJavaUtilBitSet:(JavaUtilBitSet *)table {
  for (jint i = 0; i < [((NSString *) nil_chk(ComGoogleCommonBaseCharMatcher_Whitespace_TABLE)) java_length]; i++) {
    [((JavaUtilBitSet *) nil_chk(table)) setWithInt:[ComGoogleCommonBaseCharMatcher_Whitespace_TABLE charAtWithInt:i]];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(matchesWithChar:);
  methods[2].selector = @selector(setBitsWithJavaUtilBitSet:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TABLE", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 4, -1, -1 },
    { "MULTIPLIER", "I", .constantValue.asInt = ComGoogleCommonBaseCharMatcher_Whitespace_MULTIPLIER, 0x18, -1, -1, -1, -1 },
    { "SHIFT", "I", .constantValue.asLong = 0, 0x18, -1, 5, -1, -1 },
    { "INSTANCE", "LComGoogleCommonBaseCharMatcher_Whitespace;", .constantValue.asLong = 0, 0x18, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "matches", "C", "setBits", "LJavaUtilBitSet;", &ComGoogleCommonBaseCharMatcher_Whitespace_TABLE, &ComGoogleCommonBaseCharMatcher_Whitespace_SHIFT, &ComGoogleCommonBaseCharMatcher_Whitespace_INSTANCE, "LComGoogleCommonBaseCharMatcher;" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseCharMatcher_Whitespace = { "Whitespace", "com.google.common.base", ptrTable, methods, fields, 7, 0x18, 3, 4, 7, -1, -1, -1, -1 };
  return &_ComGoogleCommonBaseCharMatcher_Whitespace;
}

+ (void)initialize {
  if (self == [ComGoogleCommonBaseCharMatcher_Whitespace class]) {
    ComGoogleCommonBaseCharMatcher_Whitespace_SHIFT = JavaLangInteger_numberOfLeadingZerosWithInt_([((NSString *) nil_chk(ComGoogleCommonBaseCharMatcher_Whitespace_TABLE)) java_length] - 1);
    ComGoogleCommonBaseCharMatcher_Whitespace_INSTANCE = new_ComGoogleCommonBaseCharMatcher_Whitespace_init();
    J2OBJC_SET_INITIALIZED(ComGoogleCommonBaseCharMatcher_Whitespace)
  }
}

@end

void ComGoogleCommonBaseCharMatcher_Whitespace_init(ComGoogleCommonBaseCharMatcher_Whitespace *self) {
  ComGoogleCommonBaseCharMatcher_NamedFastMatcher_initWithNSString_(self, @"CharMatcher.whitespace()");
}

ComGoogleCommonBaseCharMatcher_Whitespace *new_ComGoogleCommonBaseCharMatcher_Whitespace_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseCharMatcher_Whitespace, init)
}

ComGoogleCommonBaseCharMatcher_Whitespace *create_ComGoogleCommonBaseCharMatcher_Whitespace_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonBaseCharMatcher_Whitespace, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonBaseCharMatcher_Whitespace)

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonBaseCharMatcher_BreakingWhitespace)

@implementation ComGoogleCommonBaseCharMatcher_BreakingWhitespace

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonBaseCharMatcher_BreakingWhitespace_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)matchesWithChar:(jchar)c {
  switch (c) {
    case 0x0009:
    case 0x000a:
    case 0x000b:
    case 0x000c:
    case 0x000d:
    case ' ':
    case 0x0085:
    case 0x1680:
    case 0x2028:
    case 0x2029:
    case 0x205f:
    case 0x3000:
    return true;
    case 0x2007:
    return false;
    default:
    return c >= 0x2000 && c <= 0x200a;
  }
}

- (NSString *)description {
  return @"CharMatcher.breakingWhitespace()";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(matchesWithChar:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LComGoogleCommonBaseCharMatcher;", .constantValue.asLong = 0, 0x18, -1, 3, -1, -1 },
  };
  static const void *ptrTable[] = { "matches", "C", "toString", &ComGoogleCommonBaseCharMatcher_BreakingWhitespace_INSTANCE, "LComGoogleCommonBaseCharMatcher;" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseCharMatcher_BreakingWhitespace = { "BreakingWhitespace", "com.google.common.base", ptrTable, methods, fields, 7, 0x1a, 3, 1, 4, -1, -1, -1, -1 };
  return &_ComGoogleCommonBaseCharMatcher_BreakingWhitespace;
}

+ (void)initialize {
  if (self == [ComGoogleCommonBaseCharMatcher_BreakingWhitespace class]) {
    ComGoogleCommonBaseCharMatcher_BreakingWhitespace_INSTANCE = new_ComGoogleCommonBaseCharMatcher_BreakingWhitespace_init();
    J2OBJC_SET_INITIALIZED(ComGoogleCommonBaseCharMatcher_BreakingWhitespace)
  }
}

@end

void ComGoogleCommonBaseCharMatcher_BreakingWhitespace_init(ComGoogleCommonBaseCharMatcher_BreakingWhitespace *self) {
  ComGoogleCommonBaseCharMatcher_init(self);
}

ComGoogleCommonBaseCharMatcher_BreakingWhitespace *new_ComGoogleCommonBaseCharMatcher_BreakingWhitespace_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseCharMatcher_BreakingWhitespace, init)
}

ComGoogleCommonBaseCharMatcher_BreakingWhitespace *create_ComGoogleCommonBaseCharMatcher_BreakingWhitespace_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonBaseCharMatcher_BreakingWhitespace, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonBaseCharMatcher_BreakingWhitespace)

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonBaseCharMatcher_Ascii)

@implementation ComGoogleCommonBaseCharMatcher_Ascii

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonBaseCharMatcher_Ascii_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)matchesWithChar:(jchar)c {
  return c <= 0x007f;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(matchesWithChar:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LComGoogleCommonBaseCharMatcher_Ascii;", .constantValue.asLong = 0, 0x18, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { "matches", "C", &ComGoogleCommonBaseCharMatcher_Ascii_INSTANCE, "LComGoogleCommonBaseCharMatcher;" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseCharMatcher_Ascii = { "Ascii", "com.google.common.base", ptrTable, methods, fields, 7, 0x1a, 2, 1, 3, -1, -1, -1, -1 };
  return &_ComGoogleCommonBaseCharMatcher_Ascii;
}

+ (void)initialize {
  if (self == [ComGoogleCommonBaseCharMatcher_Ascii class]) {
    ComGoogleCommonBaseCharMatcher_Ascii_INSTANCE = new_ComGoogleCommonBaseCharMatcher_Ascii_init();
    J2OBJC_SET_INITIALIZED(ComGoogleCommonBaseCharMatcher_Ascii)
  }
}

@end

void ComGoogleCommonBaseCharMatcher_Ascii_init(ComGoogleCommonBaseCharMatcher_Ascii *self) {
  ComGoogleCommonBaseCharMatcher_NamedFastMatcher_initWithNSString_(self, @"CharMatcher.ascii()");
}

ComGoogleCommonBaseCharMatcher_Ascii *new_ComGoogleCommonBaseCharMatcher_Ascii_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseCharMatcher_Ascii, init)
}

ComGoogleCommonBaseCharMatcher_Ascii *create_ComGoogleCommonBaseCharMatcher_Ascii_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonBaseCharMatcher_Ascii, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonBaseCharMatcher_Ascii)

@implementation ComGoogleCommonBaseCharMatcher_RangesMatcher

- (instancetype)initWithNSString:(NSString *)description_
                   withCharArray:(IOSCharArray *)rangeStarts
                   withCharArray:(IOSCharArray *)rangeEnds {
  ComGoogleCommonBaseCharMatcher_RangesMatcher_initWithNSString_withCharArray_withCharArray_(self, description_, rangeStarts, rangeEnds);
  return self;
}

- (jboolean)matchesWithChar:(jchar)c {
  jint index = JavaUtilArrays_binarySearchWithCharArray_withChar_(rangeStarts_, c);
  if (index >= 0) {
    return true;
  }
  else {
    index = ~index - 1;
    return index >= 0 && c <= IOSCharArray_Get(nil_chk(rangeEnds_), index);
  }
}

- (NSString *)description {
  return description__;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withCharArray:withCharArray:);
  methods[1].selector = @selector(matchesWithChar:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "description__", "LNSString;", .constantValue.asLong = 0, 0x12, 4, -1, -1, -1 },
    { "rangeStarts_", "[C", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "rangeEnds_", "[C", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;[C[C", "matches", "C", "toString", "description", "LComGoogleCommonBaseCharMatcher;" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseCharMatcher_RangesMatcher = { "RangesMatcher", "com.google.common.base", ptrTable, methods, fields, 7, 0xa, 3, 3, 5, -1, -1, -1, -1 };
  return &_ComGoogleCommonBaseCharMatcher_RangesMatcher;
}

@end

void ComGoogleCommonBaseCharMatcher_RangesMatcher_initWithNSString_withCharArray_withCharArray_(ComGoogleCommonBaseCharMatcher_RangesMatcher *self, NSString *description_, IOSCharArray *rangeStarts, IOSCharArray *rangeEnds) {
  ComGoogleCommonBaseCharMatcher_init(self);
  self->description__ = description_;
  self->rangeStarts_ = rangeStarts;
  self->rangeEnds_ = rangeEnds;
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_(((IOSCharArray *) nil_chk(rangeStarts))->size_ == ((IOSCharArray *) nil_chk(rangeEnds))->size_);
  for (jint i = 0; i < rangeStarts->size_; i++) {
    ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_(IOSCharArray_Get(rangeStarts, i) <= IOSCharArray_Get(rangeEnds, i));
    if (i + 1 < rangeStarts->size_) {
      ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_(IOSCharArray_Get(rangeEnds, i) < IOSCharArray_Get(rangeStarts, i + 1));
    }
  }
}

ComGoogleCommonBaseCharMatcher_RangesMatcher *new_ComGoogleCommonBaseCharMatcher_RangesMatcher_initWithNSString_withCharArray_withCharArray_(NSString *description_, IOSCharArray *rangeStarts, IOSCharArray *rangeEnds) {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseCharMatcher_RangesMatcher, initWithNSString_withCharArray_withCharArray_, description_, rangeStarts, rangeEnds)
}

ComGoogleCommonBaseCharMatcher_RangesMatcher *create_ComGoogleCommonBaseCharMatcher_RangesMatcher_initWithNSString_withCharArray_withCharArray_(NSString *description_, IOSCharArray *rangeStarts, IOSCharArray *rangeEnds) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonBaseCharMatcher_RangesMatcher, initWithNSString_withCharArray_withCharArray_, description_, rangeStarts, rangeEnds)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonBaseCharMatcher_RangesMatcher)

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonBaseCharMatcher_Digit)

@implementation ComGoogleCommonBaseCharMatcher_Digit

+ (IOSCharArray *)zeroes {
  return ComGoogleCommonBaseCharMatcher_Digit_zeroes();
}

+ (IOSCharArray *)nines {
  return ComGoogleCommonBaseCharMatcher_Digit_nines();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonBaseCharMatcher_Digit_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[C", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "[C", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(zeroes);
  methods[1].selector = @selector(nines);
  methods[2].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ZEROES", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 0, -1, -1 },
    { "INSTANCE", "LComGoogleCommonBaseCharMatcher_Digit;", .constantValue.asLong = 0, 0x18, -1, 1, -1, -1 },
  };
  static const void *ptrTable[] = { &ComGoogleCommonBaseCharMatcher_Digit_ZEROES, &ComGoogleCommonBaseCharMatcher_Digit_INSTANCE, "LComGoogleCommonBaseCharMatcher;" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseCharMatcher_Digit = { "Digit", "com.google.common.base", ptrTable, methods, fields, 7, 0x1a, 3, 2, 2, -1, -1, -1, -1 };
  return &_ComGoogleCommonBaseCharMatcher_Digit;
}

+ (void)initialize {
  if (self == [ComGoogleCommonBaseCharMatcher_Digit class]) {
    ComGoogleCommonBaseCharMatcher_Digit_INSTANCE = new_ComGoogleCommonBaseCharMatcher_Digit_init();
    J2OBJC_SET_INITIALIZED(ComGoogleCommonBaseCharMatcher_Digit)
  }
}

@end

IOSCharArray *ComGoogleCommonBaseCharMatcher_Digit_zeroes() {
  ComGoogleCommonBaseCharMatcher_Digit_initialize();
  return [((NSString *) nil_chk(ComGoogleCommonBaseCharMatcher_Digit_ZEROES)) java_toCharArray];
}

IOSCharArray *ComGoogleCommonBaseCharMatcher_Digit_nines() {
  ComGoogleCommonBaseCharMatcher_Digit_initialize();
  IOSCharArray *nines = [IOSCharArray newArrayWithLength:[((NSString *) nil_chk(ComGoogleCommonBaseCharMatcher_Digit_ZEROES)) java_length]];
  for (jint i = 0; i < [ComGoogleCommonBaseCharMatcher_Digit_ZEROES java_length]; i++) {
    *IOSCharArray_GetRef(nines, i) = (jchar) ([ComGoogleCommonBaseCharMatcher_Digit_ZEROES charAtWithInt:i] + 9);
  }
  return nines;
}

void ComGoogleCommonBaseCharMatcher_Digit_init(ComGoogleCommonBaseCharMatcher_Digit *self) {
  ComGoogleCommonBaseCharMatcher_RangesMatcher_initWithNSString_withCharArray_withCharArray_(self, @"CharMatcher.digit()", ComGoogleCommonBaseCharMatcher_Digit_zeroes(), ComGoogleCommonBaseCharMatcher_Digit_nines());
}

ComGoogleCommonBaseCharMatcher_Digit *new_ComGoogleCommonBaseCharMatcher_Digit_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseCharMatcher_Digit, init)
}

ComGoogleCommonBaseCharMatcher_Digit *create_ComGoogleCommonBaseCharMatcher_Digit_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonBaseCharMatcher_Digit, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonBaseCharMatcher_Digit)

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonBaseCharMatcher_JavaDigit)

@implementation ComGoogleCommonBaseCharMatcher_JavaDigit

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonBaseCharMatcher_JavaDigit_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)matchesWithChar:(jchar)c {
  return JavaLangCharacter_isDigitWithChar_(c);
}

- (NSString *)description {
  return @"CharMatcher.javaDigit()";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(matchesWithChar:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LComGoogleCommonBaseCharMatcher_JavaDigit;", .constantValue.asLong = 0, 0x18, -1, 3, -1, -1 },
  };
  static const void *ptrTable[] = { "matches", "C", "toString", &ComGoogleCommonBaseCharMatcher_JavaDigit_INSTANCE, "LComGoogleCommonBaseCharMatcher;" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseCharMatcher_JavaDigit = { "JavaDigit", "com.google.common.base", ptrTable, methods, fields, 7, 0x1a, 3, 1, 4, -1, -1, -1, -1 };
  return &_ComGoogleCommonBaseCharMatcher_JavaDigit;
}

+ (void)initialize {
  if (self == [ComGoogleCommonBaseCharMatcher_JavaDigit class]) {
    ComGoogleCommonBaseCharMatcher_JavaDigit_INSTANCE = new_ComGoogleCommonBaseCharMatcher_JavaDigit_init();
    J2OBJC_SET_INITIALIZED(ComGoogleCommonBaseCharMatcher_JavaDigit)
  }
}

@end

void ComGoogleCommonBaseCharMatcher_JavaDigit_init(ComGoogleCommonBaseCharMatcher_JavaDigit *self) {
  ComGoogleCommonBaseCharMatcher_init(self);
}

ComGoogleCommonBaseCharMatcher_JavaDigit *new_ComGoogleCommonBaseCharMatcher_JavaDigit_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseCharMatcher_JavaDigit, init)
}

ComGoogleCommonBaseCharMatcher_JavaDigit *create_ComGoogleCommonBaseCharMatcher_JavaDigit_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonBaseCharMatcher_JavaDigit, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonBaseCharMatcher_JavaDigit)

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonBaseCharMatcher_JavaLetter)

@implementation ComGoogleCommonBaseCharMatcher_JavaLetter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonBaseCharMatcher_JavaLetter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)matchesWithChar:(jchar)c {
  return JavaLangCharacter_isLetterWithChar_(c);
}

- (NSString *)description {
  return @"CharMatcher.javaLetter()";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(matchesWithChar:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LComGoogleCommonBaseCharMatcher_JavaLetter;", .constantValue.asLong = 0, 0x18, -1, 3, -1, -1 },
  };
  static const void *ptrTable[] = { "matches", "C", "toString", &ComGoogleCommonBaseCharMatcher_JavaLetter_INSTANCE, "LComGoogleCommonBaseCharMatcher;" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseCharMatcher_JavaLetter = { "JavaLetter", "com.google.common.base", ptrTable, methods, fields, 7, 0x1a, 3, 1, 4, -1, -1, -1, -1 };
  return &_ComGoogleCommonBaseCharMatcher_JavaLetter;
}

+ (void)initialize {
  if (self == [ComGoogleCommonBaseCharMatcher_JavaLetter class]) {
    ComGoogleCommonBaseCharMatcher_JavaLetter_INSTANCE = new_ComGoogleCommonBaseCharMatcher_JavaLetter_init();
    J2OBJC_SET_INITIALIZED(ComGoogleCommonBaseCharMatcher_JavaLetter)
  }
}

@end

void ComGoogleCommonBaseCharMatcher_JavaLetter_init(ComGoogleCommonBaseCharMatcher_JavaLetter *self) {
  ComGoogleCommonBaseCharMatcher_init(self);
}

ComGoogleCommonBaseCharMatcher_JavaLetter *new_ComGoogleCommonBaseCharMatcher_JavaLetter_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseCharMatcher_JavaLetter, init)
}

ComGoogleCommonBaseCharMatcher_JavaLetter *create_ComGoogleCommonBaseCharMatcher_JavaLetter_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonBaseCharMatcher_JavaLetter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonBaseCharMatcher_JavaLetter)

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonBaseCharMatcher_JavaLetterOrDigit)

@implementation ComGoogleCommonBaseCharMatcher_JavaLetterOrDigit

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonBaseCharMatcher_JavaLetterOrDigit_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)matchesWithChar:(jchar)c {
  return JavaLangCharacter_isLetterOrDigitWithChar_(c);
}

- (NSString *)description {
  return @"CharMatcher.javaLetterOrDigit()";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(matchesWithChar:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LComGoogleCommonBaseCharMatcher_JavaLetterOrDigit;", .constantValue.asLong = 0, 0x18, -1, 3, -1, -1 },
  };
  static const void *ptrTable[] = { "matches", "C", "toString", &ComGoogleCommonBaseCharMatcher_JavaLetterOrDigit_INSTANCE, "LComGoogleCommonBaseCharMatcher;" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseCharMatcher_JavaLetterOrDigit = { "JavaLetterOrDigit", "com.google.common.base", ptrTable, methods, fields, 7, 0x1a, 3, 1, 4, -1, -1, -1, -1 };
  return &_ComGoogleCommonBaseCharMatcher_JavaLetterOrDigit;
}

+ (void)initialize {
  if (self == [ComGoogleCommonBaseCharMatcher_JavaLetterOrDigit class]) {
    ComGoogleCommonBaseCharMatcher_JavaLetterOrDigit_INSTANCE = new_ComGoogleCommonBaseCharMatcher_JavaLetterOrDigit_init();
    J2OBJC_SET_INITIALIZED(ComGoogleCommonBaseCharMatcher_JavaLetterOrDigit)
  }
}

@end

void ComGoogleCommonBaseCharMatcher_JavaLetterOrDigit_init(ComGoogleCommonBaseCharMatcher_JavaLetterOrDigit *self) {
  ComGoogleCommonBaseCharMatcher_init(self);
}

ComGoogleCommonBaseCharMatcher_JavaLetterOrDigit *new_ComGoogleCommonBaseCharMatcher_JavaLetterOrDigit_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseCharMatcher_JavaLetterOrDigit, init)
}

ComGoogleCommonBaseCharMatcher_JavaLetterOrDigit *create_ComGoogleCommonBaseCharMatcher_JavaLetterOrDigit_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonBaseCharMatcher_JavaLetterOrDigit, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonBaseCharMatcher_JavaLetterOrDigit)

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonBaseCharMatcher_JavaUpperCase)

@implementation ComGoogleCommonBaseCharMatcher_JavaUpperCase

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonBaseCharMatcher_JavaUpperCase_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)matchesWithChar:(jchar)c {
  return JavaLangCharacter_isUpperCaseWithChar_(c);
}

- (NSString *)description {
  return @"CharMatcher.javaUpperCase()";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(matchesWithChar:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LComGoogleCommonBaseCharMatcher_JavaUpperCase;", .constantValue.asLong = 0, 0x18, -1, 3, -1, -1 },
  };
  static const void *ptrTable[] = { "matches", "C", "toString", &ComGoogleCommonBaseCharMatcher_JavaUpperCase_INSTANCE, "LComGoogleCommonBaseCharMatcher;" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseCharMatcher_JavaUpperCase = { "JavaUpperCase", "com.google.common.base", ptrTable, methods, fields, 7, 0x1a, 3, 1, 4, -1, -1, -1, -1 };
  return &_ComGoogleCommonBaseCharMatcher_JavaUpperCase;
}

+ (void)initialize {
  if (self == [ComGoogleCommonBaseCharMatcher_JavaUpperCase class]) {
    ComGoogleCommonBaseCharMatcher_JavaUpperCase_INSTANCE = new_ComGoogleCommonBaseCharMatcher_JavaUpperCase_init();
    J2OBJC_SET_INITIALIZED(ComGoogleCommonBaseCharMatcher_JavaUpperCase)
  }
}

@end

void ComGoogleCommonBaseCharMatcher_JavaUpperCase_init(ComGoogleCommonBaseCharMatcher_JavaUpperCase *self) {
  ComGoogleCommonBaseCharMatcher_init(self);
}

ComGoogleCommonBaseCharMatcher_JavaUpperCase *new_ComGoogleCommonBaseCharMatcher_JavaUpperCase_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseCharMatcher_JavaUpperCase, init)
}

ComGoogleCommonBaseCharMatcher_JavaUpperCase *create_ComGoogleCommonBaseCharMatcher_JavaUpperCase_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonBaseCharMatcher_JavaUpperCase, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonBaseCharMatcher_JavaUpperCase)

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonBaseCharMatcher_JavaLowerCase)

@implementation ComGoogleCommonBaseCharMatcher_JavaLowerCase

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonBaseCharMatcher_JavaLowerCase_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)matchesWithChar:(jchar)c {
  return JavaLangCharacter_isLowerCaseWithChar_(c);
}

- (NSString *)description {
  return @"CharMatcher.javaLowerCase()";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(matchesWithChar:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LComGoogleCommonBaseCharMatcher_JavaLowerCase;", .constantValue.asLong = 0, 0x18, -1, 3, -1, -1 },
  };
  static const void *ptrTable[] = { "matches", "C", "toString", &ComGoogleCommonBaseCharMatcher_JavaLowerCase_INSTANCE, "LComGoogleCommonBaseCharMatcher;" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseCharMatcher_JavaLowerCase = { "JavaLowerCase", "com.google.common.base", ptrTable, methods, fields, 7, 0x1a, 3, 1, 4, -1, -1, -1, -1 };
  return &_ComGoogleCommonBaseCharMatcher_JavaLowerCase;
}

+ (void)initialize {
  if (self == [ComGoogleCommonBaseCharMatcher_JavaLowerCase class]) {
    ComGoogleCommonBaseCharMatcher_JavaLowerCase_INSTANCE = new_ComGoogleCommonBaseCharMatcher_JavaLowerCase_init();
    J2OBJC_SET_INITIALIZED(ComGoogleCommonBaseCharMatcher_JavaLowerCase)
  }
}

@end

void ComGoogleCommonBaseCharMatcher_JavaLowerCase_init(ComGoogleCommonBaseCharMatcher_JavaLowerCase *self) {
  ComGoogleCommonBaseCharMatcher_init(self);
}

ComGoogleCommonBaseCharMatcher_JavaLowerCase *new_ComGoogleCommonBaseCharMatcher_JavaLowerCase_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseCharMatcher_JavaLowerCase, init)
}

ComGoogleCommonBaseCharMatcher_JavaLowerCase *create_ComGoogleCommonBaseCharMatcher_JavaLowerCase_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonBaseCharMatcher_JavaLowerCase, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonBaseCharMatcher_JavaLowerCase)

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonBaseCharMatcher_JavaIsoControl)

@implementation ComGoogleCommonBaseCharMatcher_JavaIsoControl

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonBaseCharMatcher_JavaIsoControl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)matchesWithChar:(jchar)c {
  return c <= 0x001f || (c >= 0x007f && c <= 0x009f);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(matchesWithChar:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LComGoogleCommonBaseCharMatcher_JavaIsoControl;", .constantValue.asLong = 0, 0x18, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { "matches", "C", &ComGoogleCommonBaseCharMatcher_JavaIsoControl_INSTANCE, "LComGoogleCommonBaseCharMatcher;" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseCharMatcher_JavaIsoControl = { "JavaIsoControl", "com.google.common.base", ptrTable, methods, fields, 7, 0x1a, 2, 1, 3, -1, -1, -1, -1 };
  return &_ComGoogleCommonBaseCharMatcher_JavaIsoControl;
}

+ (void)initialize {
  if (self == [ComGoogleCommonBaseCharMatcher_JavaIsoControl class]) {
    ComGoogleCommonBaseCharMatcher_JavaIsoControl_INSTANCE = new_ComGoogleCommonBaseCharMatcher_JavaIsoControl_init();
    J2OBJC_SET_INITIALIZED(ComGoogleCommonBaseCharMatcher_JavaIsoControl)
  }
}

@end

void ComGoogleCommonBaseCharMatcher_JavaIsoControl_init(ComGoogleCommonBaseCharMatcher_JavaIsoControl *self) {
  ComGoogleCommonBaseCharMatcher_NamedFastMatcher_initWithNSString_(self, @"CharMatcher.javaIsoControl()");
}

ComGoogleCommonBaseCharMatcher_JavaIsoControl *new_ComGoogleCommonBaseCharMatcher_JavaIsoControl_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseCharMatcher_JavaIsoControl, init)
}

ComGoogleCommonBaseCharMatcher_JavaIsoControl *create_ComGoogleCommonBaseCharMatcher_JavaIsoControl_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonBaseCharMatcher_JavaIsoControl, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonBaseCharMatcher_JavaIsoControl)

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonBaseCharMatcher_Invisible)

@implementation ComGoogleCommonBaseCharMatcher_Invisible

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonBaseCharMatcher_Invisible_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "RANGE_STARTS", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 0, -1, -1 },
    { "RANGE_ENDS", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 1, -1, -1 },
    { "INSTANCE", "LComGoogleCommonBaseCharMatcher_Invisible;", .constantValue.asLong = 0, 0x18, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { &ComGoogleCommonBaseCharMatcher_Invisible_RANGE_STARTS, &ComGoogleCommonBaseCharMatcher_Invisible_RANGE_ENDS, &ComGoogleCommonBaseCharMatcher_Invisible_INSTANCE, "LComGoogleCommonBaseCharMatcher;" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseCharMatcher_Invisible = { "Invisible", "com.google.common.base", ptrTable, methods, fields, 7, 0x1a, 1, 3, 3, -1, -1, -1, -1 };
  return &_ComGoogleCommonBaseCharMatcher_Invisible;
}

+ (void)initialize {
  if (self == [ComGoogleCommonBaseCharMatcher_Invisible class]) {
    ComGoogleCommonBaseCharMatcher_Invisible_RANGE_STARTS = [NSString stringWithCharacters:(jchar[]) { (int) 0x0, (int) 0x7f, (int) 0xad, (int) 0x600, (int) 0x61c, (int) 0x6dd, (int) 0x70f, (int) 0x1680, (int) 0x180e, (int) 0x2000, (int) 0x2028, (int) 0x205f, (int) 0x2066, (int) 0x2067, (int) 0x2068, (int) 0x2069, (int) 0x206a, (int) 0x3000, (int) 0xd800, (int) 0xfeff, (int) 0xfff9, (int) 0xfffa } length:22];
    ComGoogleCommonBaseCharMatcher_Invisible_INSTANCE = new_ComGoogleCommonBaseCharMatcher_Invisible_init();
    J2OBJC_SET_INITIALIZED(ComGoogleCommonBaseCharMatcher_Invisible)
  }
}

@end

void ComGoogleCommonBaseCharMatcher_Invisible_init(ComGoogleCommonBaseCharMatcher_Invisible *self) {
  ComGoogleCommonBaseCharMatcher_RangesMatcher_initWithNSString_withCharArray_withCharArray_(self, @"CharMatcher.invisible()", [((NSString *) nil_chk(ComGoogleCommonBaseCharMatcher_Invisible_RANGE_STARTS)) java_toCharArray], [((NSString *) nil_chk(ComGoogleCommonBaseCharMatcher_Invisible_RANGE_ENDS)) java_toCharArray]);
}

ComGoogleCommonBaseCharMatcher_Invisible *new_ComGoogleCommonBaseCharMatcher_Invisible_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseCharMatcher_Invisible, init)
}

ComGoogleCommonBaseCharMatcher_Invisible *create_ComGoogleCommonBaseCharMatcher_Invisible_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonBaseCharMatcher_Invisible, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonBaseCharMatcher_Invisible)

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonBaseCharMatcher_SingleWidth)

@implementation ComGoogleCommonBaseCharMatcher_SingleWidth

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonBaseCharMatcher_SingleWidth_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LComGoogleCommonBaseCharMatcher_SingleWidth;", .constantValue.asLong = 0, 0x18, -1, 0, -1, -1 },
  };
  static const void *ptrTable[] = { &ComGoogleCommonBaseCharMatcher_SingleWidth_INSTANCE, "LComGoogleCommonBaseCharMatcher;" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseCharMatcher_SingleWidth = { "SingleWidth", "com.google.common.base", ptrTable, methods, fields, 7, 0x1a, 1, 1, 1, -1, -1, -1, -1 };
  return &_ComGoogleCommonBaseCharMatcher_SingleWidth;
}

+ (void)initialize {
  if (self == [ComGoogleCommonBaseCharMatcher_SingleWidth class]) {
    ComGoogleCommonBaseCharMatcher_SingleWidth_INSTANCE = new_ComGoogleCommonBaseCharMatcher_SingleWidth_init();
    J2OBJC_SET_INITIALIZED(ComGoogleCommonBaseCharMatcher_SingleWidth)
  }
}

@end

void ComGoogleCommonBaseCharMatcher_SingleWidth_init(ComGoogleCommonBaseCharMatcher_SingleWidth *self) {
  ComGoogleCommonBaseCharMatcher_RangesMatcher_initWithNSString_withCharArray_withCharArray_(self, @"CharMatcher.singleWidth()", [@"\x00\u05be\u05d0\u05f3\u0600\u0750\u0e00\u1e00\u2100\ufb50\ufe70\uff61" java_toCharArray], [@"\u04f9\u05be\u05ea\u05f4\u06ff\u077f\u0e7f\u20af\u213a\ufdff\ufeff\uffdc" java_toCharArray]);
}

ComGoogleCommonBaseCharMatcher_SingleWidth *new_ComGoogleCommonBaseCharMatcher_SingleWidth_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseCharMatcher_SingleWidth, init)
}

ComGoogleCommonBaseCharMatcher_SingleWidth *create_ComGoogleCommonBaseCharMatcher_SingleWidth_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonBaseCharMatcher_SingleWidth, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonBaseCharMatcher_SingleWidth)

@implementation ComGoogleCommonBaseCharMatcher_And

- (instancetype)initWithComGoogleCommonBaseCharMatcher:(ComGoogleCommonBaseCharMatcher *)a
                    withComGoogleCommonBaseCharMatcher:(ComGoogleCommonBaseCharMatcher *)b {
  ComGoogleCommonBaseCharMatcher_And_initWithComGoogleCommonBaseCharMatcher_withComGoogleCommonBaseCharMatcher_(self, a, b);
  return self;
}

- (jboolean)matchesWithChar:(jchar)c {
  return [((ComGoogleCommonBaseCharMatcher *) nil_chk(first_)) matchesWithChar:c] && [((ComGoogleCommonBaseCharMatcher *) nil_chk(second_)) matchesWithChar:c];
}

- (void)setBitsWithJavaUtilBitSet:(JavaUtilBitSet *)table {
  JavaUtilBitSet *tmp1 = new_JavaUtilBitSet_init();
  [((ComGoogleCommonBaseCharMatcher *) nil_chk(first_)) setBitsWithJavaUtilBitSet:tmp1];
  JavaUtilBitSet *tmp2 = new_JavaUtilBitSet_init();
  [((ComGoogleCommonBaseCharMatcher *) nil_chk(second_)) setBitsWithJavaUtilBitSet:tmp2];
  [tmp1 and__WithJavaUtilBitSet:tmp2];
  [((JavaUtilBitSet *) nil_chk(table)) or__WithJavaUtilBitSet:tmp1];
}

- (NSString *)description {
  return JreStrcat("$@$@C", @"CharMatcher.and(", first_, @", ", second_, ')');
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonBaseCharMatcher:withComGoogleCommonBaseCharMatcher:);
  methods[1].selector = @selector(matchesWithChar:);
  methods[2].selector = @selector(setBitsWithJavaUtilBitSet:);
  methods[3].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "first_", "LComGoogleCommonBaseCharMatcher;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "second_", "LComGoogleCommonBaseCharMatcher;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonBaseCharMatcher;LComGoogleCommonBaseCharMatcher;", "matches", "C", "setBits", "LJavaUtilBitSet;", "toString", "LComGoogleCommonBaseCharMatcher;" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseCharMatcher_And = { "And", "com.google.common.base", ptrTable, methods, fields, 7, 0x1a, 4, 2, 6, -1, -1, -1, -1 };
  return &_ComGoogleCommonBaseCharMatcher_And;
}

@end

void ComGoogleCommonBaseCharMatcher_And_initWithComGoogleCommonBaseCharMatcher_withComGoogleCommonBaseCharMatcher_(ComGoogleCommonBaseCharMatcher_And *self, ComGoogleCommonBaseCharMatcher *a, ComGoogleCommonBaseCharMatcher *b) {
  ComGoogleCommonBaseCharMatcher_init(self);
  self->first_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(a);
  self->second_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(b);
}

ComGoogleCommonBaseCharMatcher_And *new_ComGoogleCommonBaseCharMatcher_And_initWithComGoogleCommonBaseCharMatcher_withComGoogleCommonBaseCharMatcher_(ComGoogleCommonBaseCharMatcher *a, ComGoogleCommonBaseCharMatcher *b) {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseCharMatcher_And, initWithComGoogleCommonBaseCharMatcher_withComGoogleCommonBaseCharMatcher_, a, b)
}

ComGoogleCommonBaseCharMatcher_And *create_ComGoogleCommonBaseCharMatcher_And_initWithComGoogleCommonBaseCharMatcher_withComGoogleCommonBaseCharMatcher_(ComGoogleCommonBaseCharMatcher *a, ComGoogleCommonBaseCharMatcher *b) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonBaseCharMatcher_And, initWithComGoogleCommonBaseCharMatcher_withComGoogleCommonBaseCharMatcher_, a, b)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonBaseCharMatcher_And)

@implementation ComGoogleCommonBaseCharMatcher_Or

- (instancetype)initWithComGoogleCommonBaseCharMatcher:(ComGoogleCommonBaseCharMatcher *)a
                    withComGoogleCommonBaseCharMatcher:(ComGoogleCommonBaseCharMatcher *)b {
  ComGoogleCommonBaseCharMatcher_Or_initWithComGoogleCommonBaseCharMatcher_withComGoogleCommonBaseCharMatcher_(self, a, b);
  return self;
}

- (void)setBitsWithJavaUtilBitSet:(JavaUtilBitSet *)table {
  [((ComGoogleCommonBaseCharMatcher *) nil_chk(first_)) setBitsWithJavaUtilBitSet:table];
  [((ComGoogleCommonBaseCharMatcher *) nil_chk(second_)) setBitsWithJavaUtilBitSet:table];
}

- (jboolean)matchesWithChar:(jchar)c {
  return [((ComGoogleCommonBaseCharMatcher *) nil_chk(first_)) matchesWithChar:c] || [((ComGoogleCommonBaseCharMatcher *) nil_chk(second_)) matchesWithChar:c];
}

- (NSString *)description {
  return JreStrcat("$@$@C", @"CharMatcher.or(", first_, @", ", second_, ')');
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonBaseCharMatcher:withComGoogleCommonBaseCharMatcher:);
  methods[1].selector = @selector(setBitsWithJavaUtilBitSet:);
  methods[2].selector = @selector(matchesWithChar:);
  methods[3].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "first_", "LComGoogleCommonBaseCharMatcher;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "second_", "LComGoogleCommonBaseCharMatcher;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonBaseCharMatcher;LComGoogleCommonBaseCharMatcher;", "setBits", "LJavaUtilBitSet;", "matches", "C", "toString", "LComGoogleCommonBaseCharMatcher;" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseCharMatcher_Or = { "Or", "com.google.common.base", ptrTable, methods, fields, 7, 0x1a, 4, 2, 6, -1, -1, -1, -1 };
  return &_ComGoogleCommonBaseCharMatcher_Or;
}

@end

void ComGoogleCommonBaseCharMatcher_Or_initWithComGoogleCommonBaseCharMatcher_withComGoogleCommonBaseCharMatcher_(ComGoogleCommonBaseCharMatcher_Or *self, ComGoogleCommonBaseCharMatcher *a, ComGoogleCommonBaseCharMatcher *b) {
  ComGoogleCommonBaseCharMatcher_init(self);
  self->first_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(a);
  self->second_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(b);
}

ComGoogleCommonBaseCharMatcher_Or *new_ComGoogleCommonBaseCharMatcher_Or_initWithComGoogleCommonBaseCharMatcher_withComGoogleCommonBaseCharMatcher_(ComGoogleCommonBaseCharMatcher *a, ComGoogleCommonBaseCharMatcher *b) {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseCharMatcher_Or, initWithComGoogleCommonBaseCharMatcher_withComGoogleCommonBaseCharMatcher_, a, b)
}

ComGoogleCommonBaseCharMatcher_Or *create_ComGoogleCommonBaseCharMatcher_Or_initWithComGoogleCommonBaseCharMatcher_withComGoogleCommonBaseCharMatcher_(ComGoogleCommonBaseCharMatcher *a, ComGoogleCommonBaseCharMatcher *b) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonBaseCharMatcher_Or, initWithComGoogleCommonBaseCharMatcher_withComGoogleCommonBaseCharMatcher_, a, b)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonBaseCharMatcher_Or)

@implementation ComGoogleCommonBaseCharMatcher_Is

- (instancetype)initWithChar:(jchar)match {
  ComGoogleCommonBaseCharMatcher_Is_initWithChar_(self, match);
  return self;
}

- (jboolean)matchesWithChar:(jchar)c {
  return c == match_;
}

- (NSString *)replaceFromWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence
                                         withChar:(jchar)replacement {
  return [((NSString *) nil_chk([((id<JavaLangCharSequence>) nil_chk(sequence)) description])) java_replace:match_ withChar:replacement];
}

- (ComGoogleCommonBaseCharMatcher *)and__WithComGoogleCommonBaseCharMatcher:(ComGoogleCommonBaseCharMatcher *)other {
  return [((ComGoogleCommonBaseCharMatcher *) nil_chk(other)) matchesWithChar:match_] ? self : ComGoogleCommonBaseCharMatcher_none();
}

- (ComGoogleCommonBaseCharMatcher *)or__WithComGoogleCommonBaseCharMatcher:(ComGoogleCommonBaseCharMatcher *)other {
  return [((ComGoogleCommonBaseCharMatcher *) nil_chk(other)) matchesWithChar:match_] ? other : [super or__WithComGoogleCommonBaseCharMatcher:other];
}

- (ComGoogleCommonBaseCharMatcher *)negate {
  return ComGoogleCommonBaseCharMatcher_isNotWithChar_(match_);
}

- (void)setBitsWithJavaUtilBitSet:(JavaUtilBitSet *)table {
  [((JavaUtilBitSet *) nil_chk(table)) setWithInt:match_];
}

- (NSString *)description {
  return JreStrcat("$$$", @"CharMatcher.is('", ComGoogleCommonBaseCharMatcher_showCharacterWithChar_(match_), @"')");
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseCharMatcher;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseCharMatcher;", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseCharMatcher;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 9, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithChar:);
  methods[1].selector = @selector(matchesWithChar:);
  methods[2].selector = @selector(replaceFromWithJavaLangCharSequence:withChar:);
  methods[3].selector = @selector(and__WithComGoogleCommonBaseCharMatcher:);
  methods[4].selector = @selector(or__WithComGoogleCommonBaseCharMatcher:);
  methods[5].selector = @selector(negate);
  methods[6].selector = @selector(setBitsWithJavaUtilBitSet:);
  methods[7].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "match_", "C", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "C", "matches", "replaceFrom", "LJavaLangCharSequence;C", "and", "LComGoogleCommonBaseCharMatcher;", "or", "setBits", "LJavaUtilBitSet;", "toString" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseCharMatcher_Is = { "Is", "com.google.common.base", ptrTable, methods, fields, 7, 0x1a, 8, 1, 5, -1, -1, -1, -1 };
  return &_ComGoogleCommonBaseCharMatcher_Is;
}

@end

void ComGoogleCommonBaseCharMatcher_Is_initWithChar_(ComGoogleCommonBaseCharMatcher_Is *self, jchar match) {
  ComGoogleCommonBaseCharMatcher_FastMatcher_init(self);
  self->match_ = match;
}

ComGoogleCommonBaseCharMatcher_Is *new_ComGoogleCommonBaseCharMatcher_Is_initWithChar_(jchar match) {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseCharMatcher_Is, initWithChar_, match)
}

ComGoogleCommonBaseCharMatcher_Is *create_ComGoogleCommonBaseCharMatcher_Is_initWithChar_(jchar match) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonBaseCharMatcher_Is, initWithChar_, match)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonBaseCharMatcher_Is)

@implementation ComGoogleCommonBaseCharMatcher_IsNot

- (instancetype)initWithChar:(jchar)match {
  ComGoogleCommonBaseCharMatcher_IsNot_initWithChar_(self, match);
  return self;
}

- (jboolean)matchesWithChar:(jchar)c {
  return c != match_;
}

- (ComGoogleCommonBaseCharMatcher *)and__WithComGoogleCommonBaseCharMatcher:(ComGoogleCommonBaseCharMatcher *)other {
  return [((ComGoogleCommonBaseCharMatcher *) nil_chk(other)) matchesWithChar:match_] ? [super and__WithComGoogleCommonBaseCharMatcher:other] : other;
}

- (ComGoogleCommonBaseCharMatcher *)or__WithComGoogleCommonBaseCharMatcher:(ComGoogleCommonBaseCharMatcher *)other {
  return [((ComGoogleCommonBaseCharMatcher *) nil_chk(other)) matchesWithChar:match_] ? ComGoogleCommonBaseCharMatcher_any() : self;
}

- (void)setBitsWithJavaUtilBitSet:(JavaUtilBitSet *)table {
  [((JavaUtilBitSet *) nil_chk(table)) setWithInt:0 withInt:match_];
  [table setWithInt:match_ + 1 withInt:JavaLangCharacter_MAX_VALUE + 1];
}

- (ComGoogleCommonBaseCharMatcher *)negate {
  return ComGoogleCommonBaseCharMatcher_isWithChar_(match_);
}

- (NSString *)description {
  return JreStrcat("$$$", @"CharMatcher.isNot('", ComGoogleCommonBaseCharMatcher_showCharacterWithChar_(match_), @"')");
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseCharMatcher;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseCharMatcher;", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 5, 6, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseCharMatcher;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithChar:);
  methods[1].selector = @selector(matchesWithChar:);
  methods[2].selector = @selector(and__WithComGoogleCommonBaseCharMatcher:);
  methods[3].selector = @selector(or__WithComGoogleCommonBaseCharMatcher:);
  methods[4].selector = @selector(setBitsWithJavaUtilBitSet:);
  methods[5].selector = @selector(negate);
  methods[6].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "match_", "C", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "C", "matches", "and", "LComGoogleCommonBaseCharMatcher;", "or", "setBits", "LJavaUtilBitSet;", "toString" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseCharMatcher_IsNot = { "IsNot", "com.google.common.base", ptrTable, methods, fields, 7, 0x1a, 7, 1, 3, -1, -1, -1, -1 };
  return &_ComGoogleCommonBaseCharMatcher_IsNot;
}

@end

void ComGoogleCommonBaseCharMatcher_IsNot_initWithChar_(ComGoogleCommonBaseCharMatcher_IsNot *self, jchar match) {
  ComGoogleCommonBaseCharMatcher_FastMatcher_init(self);
  self->match_ = match;
}

ComGoogleCommonBaseCharMatcher_IsNot *new_ComGoogleCommonBaseCharMatcher_IsNot_initWithChar_(jchar match) {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseCharMatcher_IsNot, initWithChar_, match)
}

ComGoogleCommonBaseCharMatcher_IsNot *create_ComGoogleCommonBaseCharMatcher_IsNot_initWithChar_(jchar match) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonBaseCharMatcher_IsNot, initWithChar_, match)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonBaseCharMatcher_IsNot)

@implementation ComGoogleCommonBaseCharMatcher_IsEither

- (instancetype)initWithChar:(jchar)match1
                    withChar:(jchar)match2 {
  ComGoogleCommonBaseCharMatcher_IsEither_initWithChar_withChar_(self, match1, match2);
  return self;
}

- (jboolean)matchesWithChar:(jchar)c {
  return c == match1_ || c == match2_;
}

- (void)setBitsWithJavaUtilBitSet:(JavaUtilBitSet *)table {
  [((JavaUtilBitSet *) nil_chk(table)) setWithInt:match1_];
  [table setWithInt:match2_];
}

- (NSString *)description {
  return JreStrcat("$$$$", @"CharMatcher.anyOf(\"", ComGoogleCommonBaseCharMatcher_showCharacterWithChar_(match1_), ComGoogleCommonBaseCharMatcher_showCharacterWithChar_(match2_), @"\")");
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithChar:withChar:);
  methods[1].selector = @selector(matchesWithChar:);
  methods[2].selector = @selector(setBitsWithJavaUtilBitSet:);
  methods[3].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "match1_", "C", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "match2_", "C", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "CC", "matches", "C", "setBits", "LJavaUtilBitSet;", "toString", "LComGoogleCommonBaseCharMatcher;" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseCharMatcher_IsEither = { "IsEither", "com.google.common.base", ptrTable, methods, fields, 7, 0x1a, 4, 2, 6, -1, -1, -1, -1 };
  return &_ComGoogleCommonBaseCharMatcher_IsEither;
}

@end

void ComGoogleCommonBaseCharMatcher_IsEither_initWithChar_withChar_(ComGoogleCommonBaseCharMatcher_IsEither *self, jchar match1, jchar match2) {
  ComGoogleCommonBaseCharMatcher_FastMatcher_init(self);
  self->match1_ = match1;
  self->match2_ = match2;
}

ComGoogleCommonBaseCharMatcher_IsEither *new_ComGoogleCommonBaseCharMatcher_IsEither_initWithChar_withChar_(jchar match1, jchar match2) {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseCharMatcher_IsEither, initWithChar_withChar_, match1, match2)
}

ComGoogleCommonBaseCharMatcher_IsEither *create_ComGoogleCommonBaseCharMatcher_IsEither_initWithChar_withChar_(jchar match1, jchar match2) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonBaseCharMatcher_IsEither, initWithChar_withChar_, match1, match2)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonBaseCharMatcher_IsEither)

@implementation ComGoogleCommonBaseCharMatcher_AnyOf

- (instancetype)initWithJavaLangCharSequence:(id<JavaLangCharSequence>)chars {
  ComGoogleCommonBaseCharMatcher_AnyOf_initWithJavaLangCharSequence_(self, chars);
  return self;
}

- (jboolean)matchesWithChar:(jchar)c {
  return JavaUtilArrays_binarySearchWithCharArray_withChar_(chars_, c) >= 0;
}

- (void)setBitsWithJavaUtilBitSet:(JavaUtilBitSet *)table {
  {
    IOSCharArray *a__ = chars_;
    jchar const *b__ = ((IOSCharArray *) nil_chk(a__))->buffer_;
    jchar const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jchar c = *b__++;
      [((JavaUtilBitSet *) nil_chk(table)) setWithInt:c];
    }
  }
}

- (NSString *)description {
  JavaLangStringBuilder *description_ = new_JavaLangStringBuilder_initWithNSString_(@"CharMatcher.anyOf(\"");
  {
    IOSCharArray *a__ = chars_;
    jchar const *b__ = ((IOSCharArray *) nil_chk(a__))->buffer_;
    jchar const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jchar c = *b__++;
      (void) [description_ appendWithNSString:ComGoogleCommonBaseCharMatcher_showCharacterWithChar_(c)];
    }
  }
  (void) [description_ appendWithNSString:@"\")"];
  return [description_ description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangCharSequence:);
  methods[1].selector = @selector(matchesWithChar:);
  methods[2].selector = @selector(setBitsWithJavaUtilBitSet:);
  methods[3].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "chars_", "[C", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangCharSequence;", "matches", "C", "setBits", "LJavaUtilBitSet;", "toString", "LComGoogleCommonBaseCharMatcher;" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseCharMatcher_AnyOf = { "AnyOf", "com.google.common.base", ptrTable, methods, fields, 7, 0x1a, 4, 1, 6, -1, -1, -1, -1 };
  return &_ComGoogleCommonBaseCharMatcher_AnyOf;
}

@end

void ComGoogleCommonBaseCharMatcher_AnyOf_initWithJavaLangCharSequence_(ComGoogleCommonBaseCharMatcher_AnyOf *self, id<JavaLangCharSequence> chars) {
  ComGoogleCommonBaseCharMatcher_init(self);
  self->chars_ = [((NSString *) nil_chk([((id<JavaLangCharSequence>) nil_chk(chars)) description])) java_toCharArray];
  JavaUtilArrays_sortWithCharArray_(self->chars_);
}

ComGoogleCommonBaseCharMatcher_AnyOf *new_ComGoogleCommonBaseCharMatcher_AnyOf_initWithJavaLangCharSequence_(id<JavaLangCharSequence> chars) {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseCharMatcher_AnyOf, initWithJavaLangCharSequence_, chars)
}

ComGoogleCommonBaseCharMatcher_AnyOf *create_ComGoogleCommonBaseCharMatcher_AnyOf_initWithJavaLangCharSequence_(id<JavaLangCharSequence> chars) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonBaseCharMatcher_AnyOf, initWithJavaLangCharSequence_, chars)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonBaseCharMatcher_AnyOf)

@implementation ComGoogleCommonBaseCharMatcher_InRange

- (instancetype)initWithChar:(jchar)startInclusive
                    withChar:(jchar)endInclusive {
  ComGoogleCommonBaseCharMatcher_InRange_initWithChar_withChar_(self, startInclusive, endInclusive);
  return self;
}

- (jboolean)matchesWithChar:(jchar)c {
  return startInclusive_ <= c && c <= endInclusive_;
}

- (void)setBitsWithJavaUtilBitSet:(JavaUtilBitSet *)table {
  [((JavaUtilBitSet *) nil_chk(table)) setWithInt:startInclusive_ withInt:endInclusive_ + 1];
}

- (NSString *)description {
  return JreStrcat("$$$$$", @"CharMatcher.inRange('", ComGoogleCommonBaseCharMatcher_showCharacterWithChar_(startInclusive_), @"', '", ComGoogleCommonBaseCharMatcher_showCharacterWithChar_(endInclusive_), @"')");
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithChar:withChar:);
  methods[1].selector = @selector(matchesWithChar:);
  methods[2].selector = @selector(setBitsWithJavaUtilBitSet:);
  methods[3].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "startInclusive_", "C", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "endInclusive_", "C", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "CC", "matches", "C", "setBits", "LJavaUtilBitSet;", "toString", "LComGoogleCommonBaseCharMatcher;" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseCharMatcher_InRange = { "InRange", "com.google.common.base", ptrTable, methods, fields, 7, 0x1a, 4, 2, 6, -1, -1, -1, -1 };
  return &_ComGoogleCommonBaseCharMatcher_InRange;
}

@end

void ComGoogleCommonBaseCharMatcher_InRange_initWithChar_withChar_(ComGoogleCommonBaseCharMatcher_InRange *self, jchar startInclusive, jchar endInclusive) {
  ComGoogleCommonBaseCharMatcher_FastMatcher_init(self);
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_(endInclusive >= startInclusive);
  self->startInclusive_ = startInclusive;
  self->endInclusive_ = endInclusive;
}

ComGoogleCommonBaseCharMatcher_InRange *new_ComGoogleCommonBaseCharMatcher_InRange_initWithChar_withChar_(jchar startInclusive, jchar endInclusive) {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseCharMatcher_InRange, initWithChar_withChar_, startInclusive, endInclusive)
}

ComGoogleCommonBaseCharMatcher_InRange *create_ComGoogleCommonBaseCharMatcher_InRange_initWithChar_withChar_(jchar startInclusive, jchar endInclusive) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonBaseCharMatcher_InRange, initWithChar_withChar_, startInclusive, endInclusive)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonBaseCharMatcher_InRange)

@implementation ComGoogleCommonBaseCharMatcher_ForPredicate

- (instancetype)initWithComGoogleCommonBasePredicate:(id<ComGoogleCommonBasePredicate>)predicate {
  ComGoogleCommonBaseCharMatcher_ForPredicate_initWithComGoogleCommonBasePredicate_(self, predicate);
  return self;
}

- (jboolean)matchesWithChar:(jchar)c {
  return [((id<ComGoogleCommonBasePredicate>) nil_chk(predicate_)) applyWithId:JavaLangCharacter_valueOfWithChar_(c)];
}

- (jboolean)applyWithId:(JavaLangCharacter *)character {
  return [((id<ComGoogleCommonBasePredicate>) nil_chk(predicate_)) applyWithId:ComGoogleCommonBasePreconditions_checkNotNullWithId_(character)];
}

- (NSString *)description {
  return JreStrcat("$@C", @"CharMatcher.forPredicate(", predicate_, ')');
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonBasePredicate:);
  methods[1].selector = @selector(matchesWithChar:);
  methods[2].selector = @selector(applyWithId:);
  methods[3].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "predicate_", "LComGoogleCommonBasePredicate;", .constantValue.asLong = 0, 0x12, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonBasePredicate;", "(Lcom/google/common/base/Predicate<-Ljava/lang/Character;>;)V", "matches", "C", "apply", "LJavaLangCharacter;", "toString", "Lcom/google/common/base/Predicate<-Ljava/lang/Character;>;", "LComGoogleCommonBaseCharMatcher;" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseCharMatcher_ForPredicate = { "ForPredicate", "com.google.common.base", ptrTable, methods, fields, 7, 0x1a, 4, 1, 8, -1, -1, -1, -1 };
  return &_ComGoogleCommonBaseCharMatcher_ForPredicate;
}

@end

void ComGoogleCommonBaseCharMatcher_ForPredicate_initWithComGoogleCommonBasePredicate_(ComGoogleCommonBaseCharMatcher_ForPredicate *self, id<ComGoogleCommonBasePredicate> predicate) {
  ComGoogleCommonBaseCharMatcher_init(self);
  self->predicate_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(predicate);
}

ComGoogleCommonBaseCharMatcher_ForPredicate *new_ComGoogleCommonBaseCharMatcher_ForPredicate_initWithComGoogleCommonBasePredicate_(id<ComGoogleCommonBasePredicate> predicate) {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseCharMatcher_ForPredicate, initWithComGoogleCommonBasePredicate_, predicate)
}

ComGoogleCommonBaseCharMatcher_ForPredicate *create_ComGoogleCommonBaseCharMatcher_ForPredicate_initWithComGoogleCommonBasePredicate_(id<ComGoogleCommonBasePredicate> predicate) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonBaseCharMatcher_ForPredicate, initWithComGoogleCommonBasePredicate_, predicate)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonBaseCharMatcher_ForPredicate)
