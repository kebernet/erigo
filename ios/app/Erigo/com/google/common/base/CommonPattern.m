//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/base/CommonPattern.java
//

#include "J2ObjC_source.h"
#include "com/google/common/base/CommonMatcher.h"
#include "com/google/common/base/CommonPattern.h"
#include "java/lang/CharSequence.h"

@implementation ComGoogleCommonBaseCommonPattern

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonBaseCommonPattern_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (ComGoogleCommonBaseCommonMatcher *)matcherWithJavaLangCharSequence:(id<JavaLangCharSequence>)t {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)pattern {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)flags {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)description {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSUInteger)hash {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isEqual:(id)o {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseCommonMatcher;", 0x400, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, 2, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, 3, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(matcherWithJavaLangCharSequence:);
  methods[2].selector = @selector(pattern);
  methods[3].selector = @selector(flags);
  methods[4].selector = @selector(description);
  methods[5].selector = @selector(hash);
  methods[6].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "matcher", "LJavaLangCharSequence;", "toString", "hashCode", "equals", "LNSObject;" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseCommonPattern = { "CommonPattern", "com.google.common.base", ptrTable, methods, NULL, 7, 0x400, 7, 0, -1, -1, -1, -1, -1 };
  return &_ComGoogleCommonBaseCommonPattern;
}

@end

void ComGoogleCommonBaseCommonPattern_init(ComGoogleCommonBaseCommonPattern *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonBaseCommonPattern)
