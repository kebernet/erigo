//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/base/JdkPattern.java
//

#include "J2ObjC_source.h"
#include "com/google/common/base/CommonMatcher.h"
#include "com/google/common/base/CommonPattern.h"
#include "com/google/common/base/JdkPattern.h"
#include "com/google/common/base/Preconditions.h"
#include "java/lang/CharSequence.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface ComGoogleCommonBaseJdkPattern () {
 @public
  JavaUtilRegexPattern *pattern_;
}

@end

J2OBJC_FIELD_SETTER(ComGoogleCommonBaseJdkPattern, pattern_, JavaUtilRegexPattern *)

inline jlong ComGoogleCommonBaseJdkPattern_get_serialVersionUID();
#define ComGoogleCommonBaseJdkPattern_serialVersionUID 0LL
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonBaseJdkPattern, serialVersionUID, jlong)

@interface ComGoogleCommonBaseJdkPattern_JdkMatcher : ComGoogleCommonBaseCommonMatcher {
 @public
  JavaUtilRegexMatcher *matcher_;
}

- (instancetype)initWithJavaUtilRegexMatcher:(JavaUtilRegexMatcher *)matcher;

- (jboolean)matches;

- (jboolean)find;

- (jboolean)findWithInt:(jint)index;

- (NSString *)replaceAllWithNSString:(NSString *)replacement;

- (jint)end;

- (jint)start;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonBaseJdkPattern_JdkMatcher)

J2OBJC_FIELD_SETTER(ComGoogleCommonBaseJdkPattern_JdkMatcher, matcher_, JavaUtilRegexMatcher *)

__attribute__((unused)) static void ComGoogleCommonBaseJdkPattern_JdkMatcher_initWithJavaUtilRegexMatcher_(ComGoogleCommonBaseJdkPattern_JdkMatcher *self, JavaUtilRegexMatcher *matcher);

__attribute__((unused)) static ComGoogleCommonBaseJdkPattern_JdkMatcher *new_ComGoogleCommonBaseJdkPattern_JdkMatcher_initWithJavaUtilRegexMatcher_(JavaUtilRegexMatcher *matcher) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonBaseJdkPattern_JdkMatcher *create_ComGoogleCommonBaseJdkPattern_JdkMatcher_initWithJavaUtilRegexMatcher_(JavaUtilRegexMatcher *matcher);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonBaseJdkPattern_JdkMatcher)

@implementation ComGoogleCommonBaseJdkPattern

- (instancetype)initWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern {
  ComGoogleCommonBaseJdkPattern_initWithJavaUtilRegexPattern_(self, pattern);
  return self;
}

- (ComGoogleCommonBaseCommonMatcher *)matcherWithJavaLangCharSequence:(id<JavaLangCharSequence>)t {
  return new_ComGoogleCommonBaseJdkPattern_JdkMatcher_initWithJavaUtilRegexMatcher_([((JavaUtilRegexPattern *) nil_chk(pattern_)) matcherWithJavaLangCharSequence:t]);
}

- (NSString *)pattern {
  return [((JavaUtilRegexPattern *) nil_chk(pattern_)) pattern];
}

- (jint)flags {
  return [((JavaUtilRegexPattern *) nil_chk(pattern_)) flags];
}

- (NSString *)description {
  return [((JavaUtilRegexPattern *) nil_chk(pattern_)) description];
}

- (NSUInteger)hash {
  return ((jint) [((JavaUtilRegexPattern *) nil_chk(pattern_)) hash]);
}

- (jboolean)isEqual:(id)o {
  if (!([o isKindOfClass:[ComGoogleCommonBaseJdkPattern class]])) {
    return false;
  }
  return [((JavaUtilRegexPattern *) nil_chk(pattern_)) isEqual:((ComGoogleCommonBaseJdkPattern *) nil_chk(((ComGoogleCommonBaseJdkPattern *) cast_chk(o, [ComGoogleCommonBaseJdkPattern class]))))->pattern_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseCommonMatcher;", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilRegexPattern:);
  methods[1].selector = @selector(matcherWithJavaLangCharSequence:);
  methods[2].selector = @selector(pattern);
  methods[3].selector = @selector(flags);
  methods[4].selector = @selector(description);
  methods[5].selector = @selector(hash);
  methods[6].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "pattern_", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = ComGoogleCommonBaseJdkPattern_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilRegexPattern;", "matcher", "LJavaLangCharSequence;", "toString", "hashCode", "equals", "LNSObject;", "LComGoogleCommonBaseJdkPattern_JdkMatcher;" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseJdkPattern = { "JdkPattern", "com.google.common.base", ptrTable, methods, fields, 7, 0x10, 7, 2, -1, 7, -1, -1, -1 };
  return &_ComGoogleCommonBaseJdkPattern;
}

@end

void ComGoogleCommonBaseJdkPattern_initWithJavaUtilRegexPattern_(ComGoogleCommonBaseJdkPattern *self, JavaUtilRegexPattern *pattern) {
  ComGoogleCommonBaseCommonPattern_init(self);
  self->pattern_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(pattern);
}

ComGoogleCommonBaseJdkPattern *new_ComGoogleCommonBaseJdkPattern_initWithJavaUtilRegexPattern_(JavaUtilRegexPattern *pattern) {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseJdkPattern, initWithJavaUtilRegexPattern_, pattern)
}

ComGoogleCommonBaseJdkPattern *create_ComGoogleCommonBaseJdkPattern_initWithJavaUtilRegexPattern_(JavaUtilRegexPattern *pattern) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonBaseJdkPattern, initWithJavaUtilRegexPattern_, pattern)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonBaseJdkPattern)

@implementation ComGoogleCommonBaseJdkPattern_JdkMatcher

- (instancetype)initWithJavaUtilRegexMatcher:(JavaUtilRegexMatcher *)matcher {
  ComGoogleCommonBaseJdkPattern_JdkMatcher_initWithJavaUtilRegexMatcher_(self, matcher);
  return self;
}

- (jboolean)matches {
  return [((JavaUtilRegexMatcher *) nil_chk(matcher_)) matches];
}

- (jboolean)find {
  return [((JavaUtilRegexMatcher *) nil_chk(matcher_)) find];
}

- (jboolean)findWithInt:(jint)index {
  return [((JavaUtilRegexMatcher *) nil_chk(matcher_)) findWithInt:index];
}

- (NSString *)replaceAllWithNSString:(NSString *)replacement {
  return [((JavaUtilRegexMatcher *) nil_chk(matcher_)) replaceAllWithNSString:replacement];
}

- (jint)end {
  return [((JavaUtilRegexMatcher *) nil_chk(matcher_)) end];
}

- (jint)start {
  return [((JavaUtilRegexMatcher *) nil_chk(matcher_)) start];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilRegexMatcher:);
  methods[1].selector = @selector(matches);
  methods[2].selector = @selector(find);
  methods[3].selector = @selector(findWithInt:);
  methods[4].selector = @selector(replaceAllWithNSString:);
  methods[5].selector = @selector(end);
  methods[6].selector = @selector(start);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "matcher_", "LJavaUtilRegexMatcher;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilRegexMatcher;", "find", "I", "replaceAll", "LNSString;", "LComGoogleCommonBaseJdkPattern;" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseJdkPattern_JdkMatcher = { "JdkMatcher", "com.google.common.base", ptrTable, methods, fields, 7, 0x1a, 7, 1, 5, -1, -1, -1, -1 };
  return &_ComGoogleCommonBaseJdkPattern_JdkMatcher;
}

@end

void ComGoogleCommonBaseJdkPattern_JdkMatcher_initWithJavaUtilRegexMatcher_(ComGoogleCommonBaseJdkPattern_JdkMatcher *self, JavaUtilRegexMatcher *matcher) {
  ComGoogleCommonBaseCommonMatcher_init(self);
  self->matcher_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(matcher);
}

ComGoogleCommonBaseJdkPattern_JdkMatcher *new_ComGoogleCommonBaseJdkPattern_JdkMatcher_initWithJavaUtilRegexMatcher_(JavaUtilRegexMatcher *matcher) {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseJdkPattern_JdkMatcher, initWithJavaUtilRegexMatcher_, matcher)
}

ComGoogleCommonBaseJdkPattern_JdkMatcher *create_ComGoogleCommonBaseJdkPattern_JdkMatcher_initWithJavaUtilRegexMatcher_(JavaUtilRegexMatcher *matcher) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonBaseJdkPattern_JdkMatcher, initWithJavaUtilRegexMatcher_, matcher)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonBaseJdkPattern_JdkMatcher)
