//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/base/Splitter.java
//

#include "J2ObjC_source.h"
#include "com/google/common/base/AbstractIterator.h"
#include "com/google/common/base/CharMatcher.h"
#include "com/google/common/base/CommonMatcher.h"
#include "com/google/common/base/CommonPattern.h"
#include "com/google/common/base/JdkPattern.h"
#include "com/google/common/base/Joiner.h"
#include "com/google/common/base/Platform.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/base/Splitter.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Integer.h"
#include "java/lang/Iterable.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Spliterator.h"
#include "java/util/function/Consumer.h"
#include "java/util/regex/Pattern.h"

@class ComGoogleCommonBaseSplitter_SplittingIterator;
@protocol ComGoogleCommonBaseSplitter_Strategy;

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ComGoogleCommonBaseSplitter () {
 @public
  ComGoogleCommonBaseCharMatcher *trimmer_;
  jboolean omitEmptyStrings_;
  id<ComGoogleCommonBaseSplitter_Strategy> strategy_;
  jint limit_;
}

- (instancetype)initWithComGoogleCommonBaseSplitter_Strategy:(id<ComGoogleCommonBaseSplitter_Strategy>)strategy;

- (instancetype)initWithComGoogleCommonBaseSplitter_Strategy:(id<ComGoogleCommonBaseSplitter_Strategy>)strategy
                                                 withBoolean:(jboolean)omitEmptyStrings
                          withComGoogleCommonBaseCharMatcher:(ComGoogleCommonBaseCharMatcher *)trimmer
                                                     withInt:(jint)limit;

+ (ComGoogleCommonBaseSplitter *)onWithComGoogleCommonBaseCommonPattern:(ComGoogleCommonBaseCommonPattern *)separatorPattern;

- (id<JavaUtilIterator>)splittingIteratorWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence;

@end

J2OBJC_FIELD_SETTER(ComGoogleCommonBaseSplitter, trimmer_, ComGoogleCommonBaseCharMatcher *)
J2OBJC_FIELD_SETTER(ComGoogleCommonBaseSplitter, strategy_, id<ComGoogleCommonBaseSplitter_Strategy>)

__attribute__((unused)) static void ComGoogleCommonBaseSplitter_initWithComGoogleCommonBaseSplitter_Strategy_(ComGoogleCommonBaseSplitter *self, id<ComGoogleCommonBaseSplitter_Strategy> strategy);

__attribute__((unused)) static ComGoogleCommonBaseSplitter *new_ComGoogleCommonBaseSplitter_initWithComGoogleCommonBaseSplitter_Strategy_(id<ComGoogleCommonBaseSplitter_Strategy> strategy) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonBaseSplitter *create_ComGoogleCommonBaseSplitter_initWithComGoogleCommonBaseSplitter_Strategy_(id<ComGoogleCommonBaseSplitter_Strategy> strategy);

__attribute__((unused)) static void ComGoogleCommonBaseSplitter_initWithComGoogleCommonBaseSplitter_Strategy_withBoolean_withComGoogleCommonBaseCharMatcher_withInt_(ComGoogleCommonBaseSplitter *self, id<ComGoogleCommonBaseSplitter_Strategy> strategy, jboolean omitEmptyStrings, ComGoogleCommonBaseCharMatcher *trimmer, jint limit);

__attribute__((unused)) static ComGoogleCommonBaseSplitter *new_ComGoogleCommonBaseSplitter_initWithComGoogleCommonBaseSplitter_Strategy_withBoolean_withComGoogleCommonBaseCharMatcher_withInt_(id<ComGoogleCommonBaseSplitter_Strategy> strategy, jboolean omitEmptyStrings, ComGoogleCommonBaseCharMatcher *trimmer, jint limit) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonBaseSplitter *create_ComGoogleCommonBaseSplitter_initWithComGoogleCommonBaseSplitter_Strategy_withBoolean_withComGoogleCommonBaseCharMatcher_withInt_(id<ComGoogleCommonBaseSplitter_Strategy> strategy, jboolean omitEmptyStrings, ComGoogleCommonBaseCharMatcher *trimmer, jint limit);

__attribute__((unused)) static ComGoogleCommonBaseSplitter *ComGoogleCommonBaseSplitter_onWithComGoogleCommonBaseCommonPattern_(ComGoogleCommonBaseCommonPattern *separatorPattern);

__attribute__((unused)) static id<JavaUtilIterator> ComGoogleCommonBaseSplitter_splittingIteratorWithJavaLangCharSequence_(ComGoogleCommonBaseSplitter *self, id<JavaLangCharSequence> sequence);

@protocol ComGoogleCommonBaseSplitter_Strategy < JavaObject >

- (id<JavaUtilIterator>)iteratorWithComGoogleCommonBaseSplitter:(ComGoogleCommonBaseSplitter *)splitter
                                       withJavaLangCharSequence:(id<JavaLangCharSequence>)toSplit;

@end

@interface ComGoogleCommonBaseSplitter_Strategy : NSObject

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonBaseSplitter_Strategy)

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonBaseSplitter_Strategy)

@interface ComGoogleCommonBaseSplitter_1 : NSObject < ComGoogleCommonBaseSplitter_Strategy > {
 @public
  ComGoogleCommonBaseCharMatcher *val$separatorMatcher_;
}

- (instancetype)initWithComGoogleCommonBaseCharMatcher:(ComGoogleCommonBaseCharMatcher *)capture$0;

- (ComGoogleCommonBaseSplitter_SplittingIterator *)iteratorWithComGoogleCommonBaseSplitter:(ComGoogleCommonBaseSplitter *)splitter
                                                                  withJavaLangCharSequence:(id<JavaLangCharSequence>)toSplit;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonBaseSplitter_1)

__attribute__((unused)) static void ComGoogleCommonBaseSplitter_1_initWithComGoogleCommonBaseCharMatcher_(ComGoogleCommonBaseSplitter_1 *self, ComGoogleCommonBaseCharMatcher *capture$0);

__attribute__((unused)) static ComGoogleCommonBaseSplitter_1 *new_ComGoogleCommonBaseSplitter_1_initWithComGoogleCommonBaseCharMatcher_(ComGoogleCommonBaseCharMatcher *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonBaseSplitter_1 *create_ComGoogleCommonBaseSplitter_1_initWithComGoogleCommonBaseCharMatcher_(ComGoogleCommonBaseCharMatcher *capture$0);

@interface ComGoogleCommonBaseSplitter_SplittingIterator : ComGoogleCommonBaseAbstractIterator {
 @public
  id<JavaLangCharSequence> toSplit_;
  ComGoogleCommonBaseCharMatcher *trimmer_;
  jboolean omitEmptyStrings_;
  jint offset_;
  jint limit_;
}

- (jint)separatorStartWithInt:(jint)start;

- (jint)separatorEndWithInt:(jint)separatorPosition;

- (instancetype)initWithComGoogleCommonBaseSplitter:(ComGoogleCommonBaseSplitter *)splitter
                           withJavaLangCharSequence:(id<JavaLangCharSequence>)toSplit;

- (NSString *)computeNext;

- (NSString *)endOfData;

- (NSString *)next;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonBaseSplitter_SplittingIterator)

J2OBJC_FIELD_SETTER(ComGoogleCommonBaseSplitter_SplittingIterator, toSplit_, id<JavaLangCharSequence>)
J2OBJC_FIELD_SETTER(ComGoogleCommonBaseSplitter_SplittingIterator, trimmer_, ComGoogleCommonBaseCharMatcher *)

__attribute__((unused)) static void ComGoogleCommonBaseSplitter_SplittingIterator_initWithComGoogleCommonBaseSplitter_withJavaLangCharSequence_(ComGoogleCommonBaseSplitter_SplittingIterator *self, ComGoogleCommonBaseSplitter *splitter, id<JavaLangCharSequence> toSplit);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonBaseSplitter_SplittingIterator)

@interface ComGoogleCommonBaseSplitter_1_1 : ComGoogleCommonBaseSplitter_SplittingIterator {
 @public
  ComGoogleCommonBaseSplitter_1 *this$0_;
}

- (instancetype)initWithComGoogleCommonBaseSplitter_1:(ComGoogleCommonBaseSplitter_1 *)outer$
                      withComGoogleCommonBaseSplitter:(ComGoogleCommonBaseSplitter *)splitter
                             withJavaLangCharSequence:(id<JavaLangCharSequence>)toSplit;

- (jint)separatorStartWithInt:(jint)start;

- (jint)separatorEndWithInt:(jint)separatorPosition;

- (NSString *)endOfData;

- (NSString *)next;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonBaseSplitter_1_1)

__attribute__((unused)) static void ComGoogleCommonBaseSplitter_1_1_initWithComGoogleCommonBaseSplitter_1_withComGoogleCommonBaseSplitter_withJavaLangCharSequence_(ComGoogleCommonBaseSplitter_1_1 *self, ComGoogleCommonBaseSplitter_1 *outer$, ComGoogleCommonBaseSplitter *splitter, id<JavaLangCharSequence> toSplit);

__attribute__((unused)) static ComGoogleCommonBaseSplitter_1_1 *new_ComGoogleCommonBaseSplitter_1_1_initWithComGoogleCommonBaseSplitter_1_withComGoogleCommonBaseSplitter_withJavaLangCharSequence_(ComGoogleCommonBaseSplitter_1 *outer$, ComGoogleCommonBaseSplitter *splitter, id<JavaLangCharSequence> toSplit) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonBaseSplitter_1_1 *create_ComGoogleCommonBaseSplitter_1_1_initWithComGoogleCommonBaseSplitter_1_withComGoogleCommonBaseSplitter_withJavaLangCharSequence_(ComGoogleCommonBaseSplitter_1 *outer$, ComGoogleCommonBaseSplitter *splitter, id<JavaLangCharSequence> toSplit);

@interface ComGoogleCommonBaseSplitter_2 : NSObject < ComGoogleCommonBaseSplitter_Strategy > {
 @public
  NSString *val$separator_;
}

- (instancetype)initWithNSString:(NSString *)capture$0;

- (ComGoogleCommonBaseSplitter_SplittingIterator *)iteratorWithComGoogleCommonBaseSplitter:(ComGoogleCommonBaseSplitter *)splitter
                                                                  withJavaLangCharSequence:(id<JavaLangCharSequence>)toSplit;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonBaseSplitter_2)

__attribute__((unused)) static void ComGoogleCommonBaseSplitter_2_initWithNSString_(ComGoogleCommonBaseSplitter_2 *self, NSString *capture$0);

__attribute__((unused)) static ComGoogleCommonBaseSplitter_2 *new_ComGoogleCommonBaseSplitter_2_initWithNSString_(NSString *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonBaseSplitter_2 *create_ComGoogleCommonBaseSplitter_2_initWithNSString_(NSString *capture$0);

@interface ComGoogleCommonBaseSplitter_2_1 : ComGoogleCommonBaseSplitter_SplittingIterator {
 @public
  ComGoogleCommonBaseSplitter_2 *this$0_;
}

- (instancetype)initWithComGoogleCommonBaseSplitter_2:(ComGoogleCommonBaseSplitter_2 *)outer$
                      withComGoogleCommonBaseSplitter:(ComGoogleCommonBaseSplitter *)splitter
                             withJavaLangCharSequence:(id<JavaLangCharSequence>)toSplit;

- (jint)separatorStartWithInt:(jint)start;

- (jint)separatorEndWithInt:(jint)separatorPosition;

- (NSString *)endOfData;

- (NSString *)next;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonBaseSplitter_2_1)

__attribute__((unused)) static void ComGoogleCommonBaseSplitter_2_1_initWithComGoogleCommonBaseSplitter_2_withComGoogleCommonBaseSplitter_withJavaLangCharSequence_(ComGoogleCommonBaseSplitter_2_1 *self, ComGoogleCommonBaseSplitter_2 *outer$, ComGoogleCommonBaseSplitter *splitter, id<JavaLangCharSequence> toSplit);

__attribute__((unused)) static ComGoogleCommonBaseSplitter_2_1 *new_ComGoogleCommonBaseSplitter_2_1_initWithComGoogleCommonBaseSplitter_2_withComGoogleCommonBaseSplitter_withJavaLangCharSequence_(ComGoogleCommonBaseSplitter_2 *outer$, ComGoogleCommonBaseSplitter *splitter, id<JavaLangCharSequence> toSplit) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonBaseSplitter_2_1 *create_ComGoogleCommonBaseSplitter_2_1_initWithComGoogleCommonBaseSplitter_2_withComGoogleCommonBaseSplitter_withJavaLangCharSequence_(ComGoogleCommonBaseSplitter_2 *outer$, ComGoogleCommonBaseSplitter *splitter, id<JavaLangCharSequence> toSplit);

@interface ComGoogleCommonBaseSplitter_3 : NSObject < ComGoogleCommonBaseSplitter_Strategy > {
 @public
  ComGoogleCommonBaseCommonPattern *val$separatorPattern_;
}

- (instancetype)initWithComGoogleCommonBaseCommonPattern:(ComGoogleCommonBaseCommonPattern *)capture$0;

- (ComGoogleCommonBaseSplitter_SplittingIterator *)iteratorWithComGoogleCommonBaseSplitter:(ComGoogleCommonBaseSplitter *)splitter
                                                                  withJavaLangCharSequence:(id<JavaLangCharSequence>)toSplit;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonBaseSplitter_3)

__attribute__((unused)) static void ComGoogleCommonBaseSplitter_3_initWithComGoogleCommonBaseCommonPattern_(ComGoogleCommonBaseSplitter_3 *self, ComGoogleCommonBaseCommonPattern *capture$0);

__attribute__((unused)) static ComGoogleCommonBaseSplitter_3 *new_ComGoogleCommonBaseSplitter_3_initWithComGoogleCommonBaseCommonPattern_(ComGoogleCommonBaseCommonPattern *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonBaseSplitter_3 *create_ComGoogleCommonBaseSplitter_3_initWithComGoogleCommonBaseCommonPattern_(ComGoogleCommonBaseCommonPattern *capture$0);

@interface ComGoogleCommonBaseSplitter_3_1 : ComGoogleCommonBaseSplitter_SplittingIterator {
 @public
  ComGoogleCommonBaseCommonMatcher *val$matcher_;
}

- (instancetype)initWithComGoogleCommonBaseCommonMatcher:(ComGoogleCommonBaseCommonMatcher *)capture$0
                         withComGoogleCommonBaseSplitter:(ComGoogleCommonBaseSplitter *)splitter
                                withJavaLangCharSequence:(id<JavaLangCharSequence>)toSplit;

- (jint)separatorStartWithInt:(jint)start;

- (jint)separatorEndWithInt:(jint)separatorPosition;

- (NSString *)endOfData;

- (NSString *)next;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonBaseSplitter_3_1)

__attribute__((unused)) static void ComGoogleCommonBaseSplitter_3_1_initWithComGoogleCommonBaseCommonMatcher_withComGoogleCommonBaseSplitter_withJavaLangCharSequence_(ComGoogleCommonBaseSplitter_3_1 *self, ComGoogleCommonBaseCommonMatcher *capture$0, ComGoogleCommonBaseSplitter *splitter, id<JavaLangCharSequence> toSplit);

__attribute__((unused)) static ComGoogleCommonBaseSplitter_3_1 *new_ComGoogleCommonBaseSplitter_3_1_initWithComGoogleCommonBaseCommonMatcher_withComGoogleCommonBaseSplitter_withJavaLangCharSequence_(ComGoogleCommonBaseCommonMatcher *capture$0, ComGoogleCommonBaseSplitter *splitter, id<JavaLangCharSequence> toSplit) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonBaseSplitter_3_1 *create_ComGoogleCommonBaseSplitter_3_1_initWithComGoogleCommonBaseCommonMatcher_withComGoogleCommonBaseSplitter_withJavaLangCharSequence_(ComGoogleCommonBaseCommonMatcher *capture$0, ComGoogleCommonBaseSplitter *splitter, id<JavaLangCharSequence> toSplit);

@interface ComGoogleCommonBaseSplitter_4 : NSObject < ComGoogleCommonBaseSplitter_Strategy > {
 @public
  jint val$length_;
}

- (instancetype)initWithInt:(jint)capture$0;

- (ComGoogleCommonBaseSplitter_SplittingIterator *)iteratorWithComGoogleCommonBaseSplitter:(ComGoogleCommonBaseSplitter *)splitter
                                                                  withJavaLangCharSequence:(id<JavaLangCharSequence>)toSplit;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonBaseSplitter_4)

__attribute__((unused)) static void ComGoogleCommonBaseSplitter_4_initWithInt_(ComGoogleCommonBaseSplitter_4 *self, jint capture$0);

__attribute__((unused)) static ComGoogleCommonBaseSplitter_4 *new_ComGoogleCommonBaseSplitter_4_initWithInt_(jint capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonBaseSplitter_4 *create_ComGoogleCommonBaseSplitter_4_initWithInt_(jint capture$0);

@interface ComGoogleCommonBaseSplitter_4_1 : ComGoogleCommonBaseSplitter_SplittingIterator {
 @public
  ComGoogleCommonBaseSplitter_4 *this$0_;
}

- (instancetype)initWithComGoogleCommonBaseSplitter_4:(ComGoogleCommonBaseSplitter_4 *)outer$
                      withComGoogleCommonBaseSplitter:(ComGoogleCommonBaseSplitter *)splitter
                             withJavaLangCharSequence:(id<JavaLangCharSequence>)toSplit;

- (jint)separatorStartWithInt:(jint)start;

- (jint)separatorEndWithInt:(jint)separatorPosition;

- (NSString *)endOfData;

- (NSString *)next;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonBaseSplitter_4_1)

__attribute__((unused)) static void ComGoogleCommonBaseSplitter_4_1_initWithComGoogleCommonBaseSplitter_4_withComGoogleCommonBaseSplitter_withJavaLangCharSequence_(ComGoogleCommonBaseSplitter_4_1 *self, ComGoogleCommonBaseSplitter_4 *outer$, ComGoogleCommonBaseSplitter *splitter, id<JavaLangCharSequence> toSplit);

__attribute__((unused)) static ComGoogleCommonBaseSplitter_4_1 *new_ComGoogleCommonBaseSplitter_4_1_initWithComGoogleCommonBaseSplitter_4_withComGoogleCommonBaseSplitter_withJavaLangCharSequence_(ComGoogleCommonBaseSplitter_4 *outer$, ComGoogleCommonBaseSplitter *splitter, id<JavaLangCharSequence> toSplit) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonBaseSplitter_4_1 *create_ComGoogleCommonBaseSplitter_4_1_initWithComGoogleCommonBaseSplitter_4_withComGoogleCommonBaseSplitter_withJavaLangCharSequence_(ComGoogleCommonBaseSplitter_4 *outer$, ComGoogleCommonBaseSplitter *splitter, id<JavaLangCharSequence> toSplit);

@interface ComGoogleCommonBaseSplitter_5 : NSObject < JavaLangIterable > {
 @public
  ComGoogleCommonBaseSplitter *this$0_;
  id<JavaLangCharSequence> val$sequence_;
}

- (instancetype)initWithComGoogleCommonBaseSplitter:(ComGoogleCommonBaseSplitter *)outer$
                           withJavaLangCharSequence:(id<JavaLangCharSequence>)capture$0;

- (id<JavaUtilIterator>)iterator;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonBaseSplitter_5)

__attribute__((unused)) static void ComGoogleCommonBaseSplitter_5_initWithComGoogleCommonBaseSplitter_withJavaLangCharSequence_(ComGoogleCommonBaseSplitter_5 *self, ComGoogleCommonBaseSplitter *outer$, id<JavaLangCharSequence> capture$0);

__attribute__((unused)) static ComGoogleCommonBaseSplitter_5 *new_ComGoogleCommonBaseSplitter_5_initWithComGoogleCommonBaseSplitter_withJavaLangCharSequence_(ComGoogleCommonBaseSplitter *outer$, id<JavaLangCharSequence> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonBaseSplitter_5 *create_ComGoogleCommonBaseSplitter_5_initWithComGoogleCommonBaseSplitter_withJavaLangCharSequence_(ComGoogleCommonBaseSplitter *outer$, id<JavaLangCharSequence> capture$0);

@interface ComGoogleCommonBaseSplitter_MapSplitter () {
 @public
  ComGoogleCommonBaseSplitter *outerSplitter_;
  ComGoogleCommonBaseSplitter *entrySplitter_;
}

- (instancetype)initWithComGoogleCommonBaseSplitter:(ComGoogleCommonBaseSplitter *)outerSplitter
                    withComGoogleCommonBaseSplitter:(ComGoogleCommonBaseSplitter *)entrySplitter;

@end

J2OBJC_FIELD_SETTER(ComGoogleCommonBaseSplitter_MapSplitter, outerSplitter_, ComGoogleCommonBaseSplitter *)
J2OBJC_FIELD_SETTER(ComGoogleCommonBaseSplitter_MapSplitter, entrySplitter_, ComGoogleCommonBaseSplitter *)

inline NSString *ComGoogleCommonBaseSplitter_MapSplitter_get_INVALID_ENTRY_MESSAGE();
static NSString *ComGoogleCommonBaseSplitter_MapSplitter_INVALID_ENTRY_MESSAGE = @"Chunk [%s] is not a valid entry";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonBaseSplitter_MapSplitter, INVALID_ENTRY_MESSAGE, NSString *)

__attribute__((unused)) static void ComGoogleCommonBaseSplitter_MapSplitter_initWithComGoogleCommonBaseSplitter_withComGoogleCommonBaseSplitter_(ComGoogleCommonBaseSplitter_MapSplitter *self, ComGoogleCommonBaseSplitter *outerSplitter, ComGoogleCommonBaseSplitter *entrySplitter);

__attribute__((unused)) static ComGoogleCommonBaseSplitter_MapSplitter *new_ComGoogleCommonBaseSplitter_MapSplitter_initWithComGoogleCommonBaseSplitter_withComGoogleCommonBaseSplitter_(ComGoogleCommonBaseSplitter *outerSplitter, ComGoogleCommonBaseSplitter *entrySplitter) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonBaseSplitter_MapSplitter *create_ComGoogleCommonBaseSplitter_MapSplitter_initWithComGoogleCommonBaseSplitter_withComGoogleCommonBaseSplitter_(ComGoogleCommonBaseSplitter *outerSplitter, ComGoogleCommonBaseSplitter *entrySplitter);

@implementation ComGoogleCommonBaseSplitter

- (instancetype)initWithComGoogleCommonBaseSplitter_Strategy:(id<ComGoogleCommonBaseSplitter_Strategy>)strategy {
  ComGoogleCommonBaseSplitter_initWithComGoogleCommonBaseSplitter_Strategy_(self, strategy);
  return self;
}

- (instancetype)initWithComGoogleCommonBaseSplitter_Strategy:(id<ComGoogleCommonBaseSplitter_Strategy>)strategy
                                                 withBoolean:(jboolean)omitEmptyStrings
                          withComGoogleCommonBaseCharMatcher:(ComGoogleCommonBaseCharMatcher *)trimmer
                                                     withInt:(jint)limit {
  ComGoogleCommonBaseSplitter_initWithComGoogleCommonBaseSplitter_Strategy_withBoolean_withComGoogleCommonBaseCharMatcher_withInt_(self, strategy, omitEmptyStrings, trimmer, limit);
  return self;
}

+ (ComGoogleCommonBaseSplitter *)onWithChar:(jchar)separator {
  return ComGoogleCommonBaseSplitter_onWithChar_(separator);
}

+ (ComGoogleCommonBaseSplitter *)onWithComGoogleCommonBaseCharMatcher:(ComGoogleCommonBaseCharMatcher *)separatorMatcher {
  return ComGoogleCommonBaseSplitter_onWithComGoogleCommonBaseCharMatcher_(separatorMatcher);
}

+ (ComGoogleCommonBaseSplitter *)onWithNSString:(NSString *)separator {
  return ComGoogleCommonBaseSplitter_onWithNSString_(separator);
}

+ (ComGoogleCommonBaseSplitter *)onWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)separatorPattern {
  return ComGoogleCommonBaseSplitter_onWithJavaUtilRegexPattern_(separatorPattern);
}

+ (ComGoogleCommonBaseSplitter *)onWithComGoogleCommonBaseCommonPattern:(ComGoogleCommonBaseCommonPattern *)separatorPattern {
  return ComGoogleCommonBaseSplitter_onWithComGoogleCommonBaseCommonPattern_(separatorPattern);
}

+ (ComGoogleCommonBaseSplitter *)onPatternWithNSString:(NSString *)separatorPattern {
  return ComGoogleCommonBaseSplitter_onPatternWithNSString_(separatorPattern);
}

+ (ComGoogleCommonBaseSplitter *)fixedLengthWithInt:(jint)length {
  return ComGoogleCommonBaseSplitter_fixedLengthWithInt_(length);
}

- (ComGoogleCommonBaseSplitter *)omitEmptyStrings {
  return new_ComGoogleCommonBaseSplitter_initWithComGoogleCommonBaseSplitter_Strategy_withBoolean_withComGoogleCommonBaseCharMatcher_withInt_(strategy_, true, trimmer_, limit_);
}

- (ComGoogleCommonBaseSplitter *)limitWithInt:(jint)limit {
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withInt_(limit > 0, @"must be greater than zero: %s", limit);
  return new_ComGoogleCommonBaseSplitter_initWithComGoogleCommonBaseSplitter_Strategy_withBoolean_withComGoogleCommonBaseCharMatcher_withInt_(strategy_, omitEmptyStrings_, trimmer_, limit);
}

- (ComGoogleCommonBaseSplitter *)trimResults {
  return [self trimResultsWithComGoogleCommonBaseCharMatcher:ComGoogleCommonBaseCharMatcher_whitespace()];
}

- (ComGoogleCommonBaseSplitter *)trimResultsWithComGoogleCommonBaseCharMatcher:(ComGoogleCommonBaseCharMatcher *)trimmer {
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(trimmer);
  return new_ComGoogleCommonBaseSplitter_initWithComGoogleCommonBaseSplitter_Strategy_withBoolean_withComGoogleCommonBaseCharMatcher_withInt_(strategy_, omitEmptyStrings_, trimmer, limit_);
}

- (id<JavaLangIterable>)splitWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence {
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(sequence);
  return new_ComGoogleCommonBaseSplitter_5_initWithComGoogleCommonBaseSplitter_withJavaLangCharSequence_(self, sequence);
}

- (id<JavaUtilIterator>)splittingIteratorWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence {
  return ComGoogleCommonBaseSplitter_splittingIteratorWithJavaLangCharSequence_(self, sequence);
}

- (id<JavaUtilList>)splitToListWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence {
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(sequence);
  id<JavaUtilIterator> iterator = ComGoogleCommonBaseSplitter_splittingIteratorWithJavaLangCharSequence_(self, sequence);
  id<JavaUtilList> result = new_JavaUtilArrayList_init();
  while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
    [result addWithId:[iterator next]];
  }
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(result);
}

- (ComGoogleCommonBaseSplitter_MapSplitter *)withKeyValueSeparatorWithNSString:(NSString *)separator {
  return [self withKeyValueSeparatorWithComGoogleCommonBaseSplitter:ComGoogleCommonBaseSplitter_onWithNSString_(separator)];
}

- (ComGoogleCommonBaseSplitter_MapSplitter *)withKeyValueSeparatorWithChar:(jchar)separator {
  return [self withKeyValueSeparatorWithComGoogleCommonBaseSplitter:ComGoogleCommonBaseSplitter_onWithChar_(separator)];
}

- (ComGoogleCommonBaseSplitter_MapSplitter *)withKeyValueSeparatorWithComGoogleCommonBaseSplitter:(ComGoogleCommonBaseSplitter *)keyValueSplitter {
  return new_ComGoogleCommonBaseSplitter_MapSplitter_initWithComGoogleCommonBaseSplitter_withComGoogleCommonBaseSplitter_(self, keyValueSplitter);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseSplitter;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseSplitter;", 0x9, 2, 4, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseSplitter;", 0x9, 2, 5, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseSplitter;", 0x9, 2, 6, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseSplitter;", 0xa, 2, 7, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseSplitter;", 0x9, 8, 5, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseSplitter;", 0x9, 9, 10, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseSplitter;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseSplitter;", 0x1, 11, 10, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseSplitter;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseSplitter;", 0x1, 12, 4, -1, -1, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x1, 13, 14, -1, 15, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x2, 16, 14, -1, 17, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 18, 14, -1, 19, -1, -1 },
    { NULL, "LComGoogleCommonBaseSplitter_MapSplitter;", 0x1, 20, 5, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseSplitter_MapSplitter;", 0x1, 20, 3, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseSplitter_MapSplitter;", 0x1, 20, 21, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonBaseSplitter_Strategy:);
  methods[1].selector = @selector(initWithComGoogleCommonBaseSplitter_Strategy:withBoolean:withComGoogleCommonBaseCharMatcher:withInt:);
  methods[2].selector = @selector(onWithChar:);
  methods[3].selector = @selector(onWithComGoogleCommonBaseCharMatcher:);
  methods[4].selector = @selector(onWithNSString:);
  methods[5].selector = @selector(onWithJavaUtilRegexPattern:);
  methods[6].selector = @selector(onWithComGoogleCommonBaseCommonPattern:);
  methods[7].selector = @selector(onPatternWithNSString:);
  methods[8].selector = @selector(fixedLengthWithInt:);
  methods[9].selector = @selector(omitEmptyStrings);
  methods[10].selector = @selector(limitWithInt:);
  methods[11].selector = @selector(trimResults);
  methods[12].selector = @selector(trimResultsWithComGoogleCommonBaseCharMatcher:);
  methods[13].selector = @selector(splitWithJavaLangCharSequence:);
  methods[14].selector = @selector(splittingIteratorWithJavaLangCharSequence:);
  methods[15].selector = @selector(splitToListWithJavaLangCharSequence:);
  methods[16].selector = @selector(withKeyValueSeparatorWithNSString:);
  methods[17].selector = @selector(withKeyValueSeparatorWithChar:);
  methods[18].selector = @selector(withKeyValueSeparatorWithComGoogleCommonBaseSplitter:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "trimmer_", "LComGoogleCommonBaseCharMatcher;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "omitEmptyStrings_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "strategy_", "LComGoogleCommonBaseSplitter_Strategy;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "limit_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonBaseSplitter_Strategy;", "LComGoogleCommonBaseSplitter_Strategy;ZLComGoogleCommonBaseCharMatcher;I", "on", "C", "LComGoogleCommonBaseCharMatcher;", "LNSString;", "LJavaUtilRegexPattern;", "LComGoogleCommonBaseCommonPattern;", "onPattern", "fixedLength", "I", "limit", "trimResults", "split", "LJavaLangCharSequence;", "(Ljava/lang/CharSequence;)Ljava/lang/Iterable<Ljava/lang/String;>;", "splittingIterator", "(Ljava/lang/CharSequence;)Ljava/util/Iterator<Ljava/lang/String;>;", "splitToList", "(Ljava/lang/CharSequence;)Ljava/util/List<Ljava/lang/String;>;", "withKeyValueSeparator", "LComGoogleCommonBaseSplitter;", "LComGoogleCommonBaseSplitter_MapSplitter;LComGoogleCommonBaseSplitter_Strategy;LComGoogleCommonBaseSplitter_SplittingIterator;" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseSplitter = { "Splitter", "com.google.common.base", ptrTable, methods, fields, 7, 0x11, 19, 4, -1, 22, -1, -1, -1 };
  return &_ComGoogleCommonBaseSplitter;
}

@end

void ComGoogleCommonBaseSplitter_initWithComGoogleCommonBaseSplitter_Strategy_(ComGoogleCommonBaseSplitter *self, id<ComGoogleCommonBaseSplitter_Strategy> strategy) {
  ComGoogleCommonBaseSplitter_initWithComGoogleCommonBaseSplitter_Strategy_withBoolean_withComGoogleCommonBaseCharMatcher_withInt_(self, strategy, false, ComGoogleCommonBaseCharMatcher_none(), JavaLangInteger_MAX_VALUE);
}

ComGoogleCommonBaseSplitter *new_ComGoogleCommonBaseSplitter_initWithComGoogleCommonBaseSplitter_Strategy_(id<ComGoogleCommonBaseSplitter_Strategy> strategy) {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseSplitter, initWithComGoogleCommonBaseSplitter_Strategy_, strategy)
}

ComGoogleCommonBaseSplitter *create_ComGoogleCommonBaseSplitter_initWithComGoogleCommonBaseSplitter_Strategy_(id<ComGoogleCommonBaseSplitter_Strategy> strategy) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonBaseSplitter, initWithComGoogleCommonBaseSplitter_Strategy_, strategy)
}

void ComGoogleCommonBaseSplitter_initWithComGoogleCommonBaseSplitter_Strategy_withBoolean_withComGoogleCommonBaseCharMatcher_withInt_(ComGoogleCommonBaseSplitter *self, id<ComGoogleCommonBaseSplitter_Strategy> strategy, jboolean omitEmptyStrings, ComGoogleCommonBaseCharMatcher *trimmer, jint limit) {
  NSObject_init(self);
  self->strategy_ = strategy;
  self->omitEmptyStrings_ = omitEmptyStrings;
  self->trimmer_ = trimmer;
  self->limit_ = limit;
}

ComGoogleCommonBaseSplitter *new_ComGoogleCommonBaseSplitter_initWithComGoogleCommonBaseSplitter_Strategy_withBoolean_withComGoogleCommonBaseCharMatcher_withInt_(id<ComGoogleCommonBaseSplitter_Strategy> strategy, jboolean omitEmptyStrings, ComGoogleCommonBaseCharMatcher *trimmer, jint limit) {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseSplitter, initWithComGoogleCommonBaseSplitter_Strategy_withBoolean_withComGoogleCommonBaseCharMatcher_withInt_, strategy, omitEmptyStrings, trimmer, limit)
}

ComGoogleCommonBaseSplitter *create_ComGoogleCommonBaseSplitter_initWithComGoogleCommonBaseSplitter_Strategy_withBoolean_withComGoogleCommonBaseCharMatcher_withInt_(id<ComGoogleCommonBaseSplitter_Strategy> strategy, jboolean omitEmptyStrings, ComGoogleCommonBaseCharMatcher *trimmer, jint limit) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonBaseSplitter, initWithComGoogleCommonBaseSplitter_Strategy_withBoolean_withComGoogleCommonBaseCharMatcher_withInt_, strategy, omitEmptyStrings, trimmer, limit)
}

ComGoogleCommonBaseSplitter *ComGoogleCommonBaseSplitter_onWithChar_(jchar separator) {
  ComGoogleCommonBaseSplitter_initialize();
  return ComGoogleCommonBaseSplitter_onWithComGoogleCommonBaseCharMatcher_(ComGoogleCommonBaseCharMatcher_isWithChar_(separator));
}

ComGoogleCommonBaseSplitter *ComGoogleCommonBaseSplitter_onWithComGoogleCommonBaseCharMatcher_(ComGoogleCommonBaseCharMatcher *separatorMatcher) {
  ComGoogleCommonBaseSplitter_initialize();
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(separatorMatcher);
  return new_ComGoogleCommonBaseSplitter_initWithComGoogleCommonBaseSplitter_Strategy_(new_ComGoogleCommonBaseSplitter_1_initWithComGoogleCommonBaseCharMatcher_(separatorMatcher));
}

ComGoogleCommonBaseSplitter *ComGoogleCommonBaseSplitter_onWithNSString_(NSString *separator) {
  ComGoogleCommonBaseSplitter_initialize();
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withId_([((NSString *) nil_chk(separator)) java_length] != 0, @"The separator may not be the empty string.");
  if ([separator java_length] == 1) {
    return ComGoogleCommonBaseSplitter_onWithChar_([separator charAtWithInt:0]);
  }
  return new_ComGoogleCommonBaseSplitter_initWithComGoogleCommonBaseSplitter_Strategy_(new_ComGoogleCommonBaseSplitter_2_initWithNSString_(separator));
}

ComGoogleCommonBaseSplitter *ComGoogleCommonBaseSplitter_onWithJavaUtilRegexPattern_(JavaUtilRegexPattern *separatorPattern) {
  ComGoogleCommonBaseSplitter_initialize();
  return ComGoogleCommonBaseSplitter_onWithComGoogleCommonBaseCommonPattern_(new_ComGoogleCommonBaseJdkPattern_initWithJavaUtilRegexPattern_(separatorPattern));
}

ComGoogleCommonBaseSplitter *ComGoogleCommonBaseSplitter_onWithComGoogleCommonBaseCommonPattern_(ComGoogleCommonBaseCommonPattern *separatorPattern) {
  ComGoogleCommonBaseSplitter_initialize();
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_(![((ComGoogleCommonBaseCommonMatcher *) nil_chk([((ComGoogleCommonBaseCommonPattern *) nil_chk(separatorPattern)) matcherWithJavaLangCharSequence:@""])) matches], @"The pattern may not match the empty string: %s", separatorPattern);
  return new_ComGoogleCommonBaseSplitter_initWithComGoogleCommonBaseSplitter_Strategy_(new_ComGoogleCommonBaseSplitter_3_initWithComGoogleCommonBaseCommonPattern_(separatorPattern));
}

ComGoogleCommonBaseSplitter *ComGoogleCommonBaseSplitter_onPatternWithNSString_(NSString *separatorPattern) {
  ComGoogleCommonBaseSplitter_initialize();
  return ComGoogleCommonBaseSplitter_onWithComGoogleCommonBaseCommonPattern_(ComGoogleCommonBasePlatform_compilePatternWithNSString_(separatorPattern));
}

ComGoogleCommonBaseSplitter *ComGoogleCommonBaseSplitter_fixedLengthWithInt_(jint length) {
  ComGoogleCommonBaseSplitter_initialize();
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withId_(length > 0, @"The length may not be less than 1");
  return new_ComGoogleCommonBaseSplitter_initWithComGoogleCommonBaseSplitter_Strategy_(new_ComGoogleCommonBaseSplitter_4_initWithInt_(length));
}

id<JavaUtilIterator> ComGoogleCommonBaseSplitter_splittingIteratorWithJavaLangCharSequence_(ComGoogleCommonBaseSplitter *self, id<JavaLangCharSequence> sequence) {
  return [((id<ComGoogleCommonBaseSplitter_Strategy>) nil_chk(self->strategy_)) iteratorWithComGoogleCommonBaseSplitter:self withJavaLangCharSequence:sequence];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonBaseSplitter)

@implementation ComGoogleCommonBaseSplitter_Strategy

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilIterator;", 0x401, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(iteratorWithComGoogleCommonBaseSplitter:withJavaLangCharSequence:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "iterator", "LComGoogleCommonBaseSplitter;LJavaLangCharSequence;", "(Lcom/google/common/base/Splitter;Ljava/lang/CharSequence;)Ljava/util/Iterator<Ljava/lang/String;>;", "LComGoogleCommonBaseSplitter;" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseSplitter_Strategy = { "Strategy", "com.google.common.base", ptrTable, methods, NULL, 7, 0x60a, 1, 0, 3, -1, -1, -1, -1 };
  return &_ComGoogleCommonBaseSplitter_Strategy;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ComGoogleCommonBaseSplitter_Strategy)

@implementation ComGoogleCommonBaseSplitter_1

- (instancetype)initWithComGoogleCommonBaseCharMatcher:(ComGoogleCommonBaseCharMatcher *)capture$0 {
  ComGoogleCommonBaseSplitter_1_initWithComGoogleCommonBaseCharMatcher_(self, capture$0);
  return self;
}

- (ComGoogleCommonBaseSplitter_SplittingIterator *)iteratorWithComGoogleCommonBaseSplitter:(ComGoogleCommonBaseSplitter *)splitter
                                                                  withJavaLangCharSequence:(id<JavaLangCharSequence>)toSplit {
  return new_ComGoogleCommonBaseSplitter_1_1_initWithComGoogleCommonBaseSplitter_1_withComGoogleCommonBaseSplitter_withJavaLangCharSequence_(self, splitter, toSplit);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseSplitter_SplittingIterator;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonBaseCharMatcher:);
  methods[1].selector = @selector(iteratorWithComGoogleCommonBaseSplitter:withJavaLangCharSequence:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$separatorMatcher_", "LComGoogleCommonBaseCharMatcher;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "iterator", "LComGoogleCommonBaseSplitter;LJavaLangCharSequence;", "LComGoogleCommonBaseSplitter;", "onWithComGoogleCommonBaseCharMatcher:" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseSplitter_1 = { "", "com.google.common.base", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, 3, -1, -1 };
  return &_ComGoogleCommonBaseSplitter_1;
}

@end

void ComGoogleCommonBaseSplitter_1_initWithComGoogleCommonBaseCharMatcher_(ComGoogleCommonBaseSplitter_1 *self, ComGoogleCommonBaseCharMatcher *capture$0) {
  self->val$separatorMatcher_ = capture$0;
  NSObject_init(self);
}

ComGoogleCommonBaseSplitter_1 *new_ComGoogleCommonBaseSplitter_1_initWithComGoogleCommonBaseCharMatcher_(ComGoogleCommonBaseCharMatcher *capture$0) {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseSplitter_1, initWithComGoogleCommonBaseCharMatcher_, capture$0)
}

ComGoogleCommonBaseSplitter_1 *create_ComGoogleCommonBaseSplitter_1_initWithComGoogleCommonBaseCharMatcher_(ComGoogleCommonBaseCharMatcher *capture$0) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonBaseSplitter_1, initWithComGoogleCommonBaseCharMatcher_, capture$0)
}

@implementation ComGoogleCommonBaseSplitter_SplittingIterator

- (jint)separatorStartWithInt:(jint)start {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)separatorEndWithInt:(jint)separatorPosition {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (instancetype)initWithComGoogleCommonBaseSplitter:(ComGoogleCommonBaseSplitter *)splitter
                           withJavaLangCharSequence:(id<JavaLangCharSequence>)toSplit {
  ComGoogleCommonBaseSplitter_SplittingIterator_initWithComGoogleCommonBaseSplitter_withJavaLangCharSequence_(self, splitter, toSplit);
  return self;
}

- (NSString *)computeNext {
  jint nextStart = offset_;
  while (offset_ != -1) {
    jint start = nextStart;
    jint end;
    jint separatorPosition = [self separatorStartWithInt:offset_];
    if (separatorPosition == -1) {
      end = [((id<JavaLangCharSequence>) nil_chk(toSplit_)) java_length];
      offset_ = -1;
    }
    else {
      end = separatorPosition;
      offset_ = [self separatorEndWithInt:separatorPosition];
    }
    if (offset_ == nextStart) {
      offset_++;
      if (offset_ > [((id<JavaLangCharSequence>) nil_chk(toSplit_)) java_length]) {
        offset_ = -1;
      }
      continue;
    }
    while (start < end && [((ComGoogleCommonBaseCharMatcher *) nil_chk(trimmer_)) matchesWithChar:[((id<JavaLangCharSequence>) nil_chk(toSplit_)) charAtWithInt:start]]) {
      start++;
    }
    while (end > start && [((ComGoogleCommonBaseCharMatcher *) nil_chk(trimmer_)) matchesWithChar:[((id<JavaLangCharSequence>) nil_chk(toSplit_)) charAtWithInt:end - 1]]) {
      end--;
    }
    if (omitEmptyStrings_ && start == end) {
      nextStart = offset_;
      continue;
    }
    if (limit_ == 1) {
      end = [((id<JavaLangCharSequence>) nil_chk(toSplit_)) java_length];
      offset_ = -1;
      while (end > start && [((ComGoogleCommonBaseCharMatcher *) nil_chk(trimmer_)) matchesWithChar:[toSplit_ charAtWithInt:end - 1]]) {
        end--;
      }
    }
    else {
      limit_--;
    }
    return [((id<JavaLangCharSequence>) nil_chk([((id<JavaLangCharSequence>) nil_chk(toSplit_)) subSequenceFrom:start to:end])) description];
  }
  return [self endOfData];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x400, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x400, 2, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(separatorStartWithInt:);
  methods[1].selector = @selector(separatorEndWithInt:);
  methods[2].selector = @selector(initWithComGoogleCommonBaseSplitter:withJavaLangCharSequence:);
  methods[3].selector = @selector(computeNext);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "toSplit_", "LJavaLangCharSequence;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "trimmer_", "LComGoogleCommonBaseCharMatcher;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "omitEmptyStrings_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "offset_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "limit_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "separatorStart", "I", "separatorEnd", "LComGoogleCommonBaseSplitter;LJavaLangCharSequence;", "LComGoogleCommonBaseSplitter;", "Lcom/google/common/base/AbstractIterator<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseSplitter_SplittingIterator = { "SplittingIterator", "com.google.common.base", ptrTable, methods, fields, 7, 0x40a, 4, 5, 4, -1, -1, 5, -1 };
  return &_ComGoogleCommonBaseSplitter_SplittingIterator;
}

@end

void ComGoogleCommonBaseSplitter_SplittingIterator_initWithComGoogleCommonBaseSplitter_withJavaLangCharSequence_(ComGoogleCommonBaseSplitter_SplittingIterator *self, ComGoogleCommonBaseSplitter *splitter, id<JavaLangCharSequence> toSplit) {
  ComGoogleCommonBaseAbstractIterator_init(self);
  self->offset_ = 0;
  self->trimmer_ = ((ComGoogleCommonBaseSplitter *) nil_chk(splitter))->trimmer_;
  self->omitEmptyStrings_ = splitter->omitEmptyStrings_;
  self->limit_ = splitter->limit_;
  self->toSplit_ = toSplit;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonBaseSplitter_SplittingIterator)

@implementation ComGoogleCommonBaseSplitter_1_1

- (instancetype)initWithComGoogleCommonBaseSplitter_1:(ComGoogleCommonBaseSplitter_1 *)outer$
                      withComGoogleCommonBaseSplitter:(ComGoogleCommonBaseSplitter *)splitter
                             withJavaLangCharSequence:(id<JavaLangCharSequence>)toSplit {
  ComGoogleCommonBaseSplitter_1_1_initWithComGoogleCommonBaseSplitter_1_withComGoogleCommonBaseSplitter_withJavaLangCharSequence_(self, outer$, splitter, toSplit);
  return self;
}

- (jint)separatorStartWithInt:(jint)start {
  return [((ComGoogleCommonBaseCharMatcher *) nil_chk(this$0_->val$separatorMatcher_)) indexInWithJavaLangCharSequence:toSplit_ withInt:start];
}

- (jint)separatorEndWithInt:(jint)separatorPosition {
  return separatorPosition + 1;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 3, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonBaseSplitter_1:withComGoogleCommonBaseSplitter:withJavaLangCharSequence:);
  methods[1].selector = @selector(separatorStartWithInt:);
  methods[2].selector = @selector(separatorEndWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonBaseSplitter_1;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonBaseSplitter;LJavaLangCharSequence;", "separatorStart", "I", "separatorEnd", "LComGoogleCommonBaseSplitter_1;", "iteratorWithComGoogleCommonBaseSplitter:withJavaLangCharSequence:" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseSplitter_1_1 = { "", "com.google.common.base", ptrTable, methods, fields, 7, 0x8018, 3, 1, 4, -1, 5, -1, -1 };
  return &_ComGoogleCommonBaseSplitter_1_1;
}

@end

void ComGoogleCommonBaseSplitter_1_1_initWithComGoogleCommonBaseSplitter_1_withComGoogleCommonBaseSplitter_withJavaLangCharSequence_(ComGoogleCommonBaseSplitter_1_1 *self, ComGoogleCommonBaseSplitter_1 *outer$, ComGoogleCommonBaseSplitter *splitter, id<JavaLangCharSequence> toSplit) {
  self->this$0_ = outer$;
  ComGoogleCommonBaseSplitter_SplittingIterator_initWithComGoogleCommonBaseSplitter_withJavaLangCharSequence_(self, splitter, toSplit);
}

ComGoogleCommonBaseSplitter_1_1 *new_ComGoogleCommonBaseSplitter_1_1_initWithComGoogleCommonBaseSplitter_1_withComGoogleCommonBaseSplitter_withJavaLangCharSequence_(ComGoogleCommonBaseSplitter_1 *outer$, ComGoogleCommonBaseSplitter *splitter, id<JavaLangCharSequence> toSplit) {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseSplitter_1_1, initWithComGoogleCommonBaseSplitter_1_withComGoogleCommonBaseSplitter_withJavaLangCharSequence_, outer$, splitter, toSplit)
}

ComGoogleCommonBaseSplitter_1_1 *create_ComGoogleCommonBaseSplitter_1_1_initWithComGoogleCommonBaseSplitter_1_withComGoogleCommonBaseSplitter_withJavaLangCharSequence_(ComGoogleCommonBaseSplitter_1 *outer$, ComGoogleCommonBaseSplitter *splitter, id<JavaLangCharSequence> toSplit) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonBaseSplitter_1_1, initWithComGoogleCommonBaseSplitter_1_withComGoogleCommonBaseSplitter_withJavaLangCharSequence_, outer$, splitter, toSplit)
}

@implementation ComGoogleCommonBaseSplitter_2

- (instancetype)initWithNSString:(NSString *)capture$0 {
  ComGoogleCommonBaseSplitter_2_initWithNSString_(self, capture$0);
  return self;
}

- (ComGoogleCommonBaseSplitter_SplittingIterator *)iteratorWithComGoogleCommonBaseSplitter:(ComGoogleCommonBaseSplitter *)splitter
                                                                  withJavaLangCharSequence:(id<JavaLangCharSequence>)toSplit {
  return new_ComGoogleCommonBaseSplitter_2_1_initWithComGoogleCommonBaseSplitter_2_withComGoogleCommonBaseSplitter_withJavaLangCharSequence_(self, splitter, toSplit);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseSplitter_SplittingIterator;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(iteratorWithComGoogleCommonBaseSplitter:withJavaLangCharSequence:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$separator_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "iterator", "LComGoogleCommonBaseSplitter;LJavaLangCharSequence;", "LComGoogleCommonBaseSplitter;", "onWithNSString:" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseSplitter_2 = { "", "com.google.common.base", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, 3, -1, -1 };
  return &_ComGoogleCommonBaseSplitter_2;
}

@end

void ComGoogleCommonBaseSplitter_2_initWithNSString_(ComGoogleCommonBaseSplitter_2 *self, NSString *capture$0) {
  self->val$separator_ = capture$0;
  NSObject_init(self);
}

ComGoogleCommonBaseSplitter_2 *new_ComGoogleCommonBaseSplitter_2_initWithNSString_(NSString *capture$0) {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseSplitter_2, initWithNSString_, capture$0)
}

ComGoogleCommonBaseSplitter_2 *create_ComGoogleCommonBaseSplitter_2_initWithNSString_(NSString *capture$0) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonBaseSplitter_2, initWithNSString_, capture$0)
}

@implementation ComGoogleCommonBaseSplitter_2_1

- (instancetype)initWithComGoogleCommonBaseSplitter_2:(ComGoogleCommonBaseSplitter_2 *)outer$
                      withComGoogleCommonBaseSplitter:(ComGoogleCommonBaseSplitter *)splitter
                             withJavaLangCharSequence:(id<JavaLangCharSequence>)toSplit {
  ComGoogleCommonBaseSplitter_2_1_initWithComGoogleCommonBaseSplitter_2_withComGoogleCommonBaseSplitter_withJavaLangCharSequence_(self, outer$, splitter, toSplit);
  return self;
}

- (jint)separatorStartWithInt:(jint)start {
  jint separatorLength = [((NSString *) nil_chk(this$0_->val$separator_)) java_length];
  for (jint p = start, last = [((id<JavaLangCharSequence>) nil_chk(toSplit_)) java_length] - separatorLength; p <= last; p++) {
    {
      for (jint i = 0; i < separatorLength; i++) {
        if ([toSplit_ charAtWithInt:i + p] != [this$0_->val$separator_ charAtWithInt:i]) {
          goto continue_positions;
        }
      }
      return p;
    }
    continue_positions: ;
  }
  return -1;
}

- (jint)separatorEndWithInt:(jint)separatorPosition {
  return separatorPosition + [((NSString *) nil_chk(this$0_->val$separator_)) java_length];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonBaseSplitter_2:withComGoogleCommonBaseSplitter:withJavaLangCharSequence:);
  methods[1].selector = @selector(separatorStartWithInt:);
  methods[2].selector = @selector(separatorEndWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonBaseSplitter_2;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonBaseSplitter;LJavaLangCharSequence;", "separatorStart", "I", "separatorEnd", "LComGoogleCommonBaseSplitter_2;", "iteratorWithComGoogleCommonBaseSplitter:withJavaLangCharSequence:" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseSplitter_2_1 = { "", "com.google.common.base", ptrTable, methods, fields, 7, 0x8018, 3, 1, 4, -1, 5, -1, -1 };
  return &_ComGoogleCommonBaseSplitter_2_1;
}

@end

void ComGoogleCommonBaseSplitter_2_1_initWithComGoogleCommonBaseSplitter_2_withComGoogleCommonBaseSplitter_withJavaLangCharSequence_(ComGoogleCommonBaseSplitter_2_1 *self, ComGoogleCommonBaseSplitter_2 *outer$, ComGoogleCommonBaseSplitter *splitter, id<JavaLangCharSequence> toSplit) {
  self->this$0_ = outer$;
  ComGoogleCommonBaseSplitter_SplittingIterator_initWithComGoogleCommonBaseSplitter_withJavaLangCharSequence_(self, splitter, toSplit);
}

ComGoogleCommonBaseSplitter_2_1 *new_ComGoogleCommonBaseSplitter_2_1_initWithComGoogleCommonBaseSplitter_2_withComGoogleCommonBaseSplitter_withJavaLangCharSequence_(ComGoogleCommonBaseSplitter_2 *outer$, ComGoogleCommonBaseSplitter *splitter, id<JavaLangCharSequence> toSplit) {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseSplitter_2_1, initWithComGoogleCommonBaseSplitter_2_withComGoogleCommonBaseSplitter_withJavaLangCharSequence_, outer$, splitter, toSplit)
}

ComGoogleCommonBaseSplitter_2_1 *create_ComGoogleCommonBaseSplitter_2_1_initWithComGoogleCommonBaseSplitter_2_withComGoogleCommonBaseSplitter_withJavaLangCharSequence_(ComGoogleCommonBaseSplitter_2 *outer$, ComGoogleCommonBaseSplitter *splitter, id<JavaLangCharSequence> toSplit) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonBaseSplitter_2_1, initWithComGoogleCommonBaseSplitter_2_withComGoogleCommonBaseSplitter_withJavaLangCharSequence_, outer$, splitter, toSplit)
}

@implementation ComGoogleCommonBaseSplitter_3

- (instancetype)initWithComGoogleCommonBaseCommonPattern:(ComGoogleCommonBaseCommonPattern *)capture$0 {
  ComGoogleCommonBaseSplitter_3_initWithComGoogleCommonBaseCommonPattern_(self, capture$0);
  return self;
}

- (ComGoogleCommonBaseSplitter_SplittingIterator *)iteratorWithComGoogleCommonBaseSplitter:(ComGoogleCommonBaseSplitter *)splitter
                                                                  withJavaLangCharSequence:(id<JavaLangCharSequence>)toSplit {
  ComGoogleCommonBaseCommonMatcher *matcher = [((ComGoogleCommonBaseCommonPattern *) nil_chk(val$separatorPattern_)) matcherWithJavaLangCharSequence:toSplit];
  return new_ComGoogleCommonBaseSplitter_3_1_initWithComGoogleCommonBaseCommonMatcher_withComGoogleCommonBaseSplitter_withJavaLangCharSequence_(matcher, splitter, toSplit);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseSplitter_SplittingIterator;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonBaseCommonPattern:);
  methods[1].selector = @selector(iteratorWithComGoogleCommonBaseSplitter:withJavaLangCharSequence:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$separatorPattern_", "LComGoogleCommonBaseCommonPattern;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "iterator", "LComGoogleCommonBaseSplitter;LJavaLangCharSequence;", "LComGoogleCommonBaseSplitter;", "onWithComGoogleCommonBaseCommonPattern:" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseSplitter_3 = { "", "com.google.common.base", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, 3, -1, -1 };
  return &_ComGoogleCommonBaseSplitter_3;
}

@end

void ComGoogleCommonBaseSplitter_3_initWithComGoogleCommonBaseCommonPattern_(ComGoogleCommonBaseSplitter_3 *self, ComGoogleCommonBaseCommonPattern *capture$0) {
  self->val$separatorPattern_ = capture$0;
  NSObject_init(self);
}

ComGoogleCommonBaseSplitter_3 *new_ComGoogleCommonBaseSplitter_3_initWithComGoogleCommonBaseCommonPattern_(ComGoogleCommonBaseCommonPattern *capture$0) {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseSplitter_3, initWithComGoogleCommonBaseCommonPattern_, capture$0)
}

ComGoogleCommonBaseSplitter_3 *create_ComGoogleCommonBaseSplitter_3_initWithComGoogleCommonBaseCommonPattern_(ComGoogleCommonBaseCommonPattern *capture$0) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonBaseSplitter_3, initWithComGoogleCommonBaseCommonPattern_, capture$0)
}

@implementation ComGoogleCommonBaseSplitter_3_1

- (instancetype)initWithComGoogleCommonBaseCommonMatcher:(ComGoogleCommonBaseCommonMatcher *)capture$0
                         withComGoogleCommonBaseSplitter:(ComGoogleCommonBaseSplitter *)splitter
                                withJavaLangCharSequence:(id<JavaLangCharSequence>)toSplit {
  ComGoogleCommonBaseSplitter_3_1_initWithComGoogleCommonBaseCommonMatcher_withComGoogleCommonBaseSplitter_withJavaLangCharSequence_(self, capture$0, splitter, toSplit);
  return self;
}

- (jint)separatorStartWithInt:(jint)start {
  return [((ComGoogleCommonBaseCommonMatcher *) nil_chk(val$matcher_)) findWithInt:start] ? [val$matcher_ start] : -1;
}

- (jint)separatorEndWithInt:(jint)separatorPosition {
  return [((ComGoogleCommonBaseCommonMatcher *) nil_chk(val$matcher_)) end];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonBaseCommonMatcher:withComGoogleCommonBaseSplitter:withJavaLangCharSequence:);
  methods[1].selector = @selector(separatorStartWithInt:);
  methods[2].selector = @selector(separatorEndWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$matcher_", "LComGoogleCommonBaseCommonMatcher;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonBaseSplitter;LJavaLangCharSequence;", "separatorStart", "I", "separatorEnd", "LComGoogleCommonBaseSplitter_3;", "iteratorWithComGoogleCommonBaseSplitter:withJavaLangCharSequence:" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseSplitter_3_1 = { "", "com.google.common.base", ptrTable, methods, fields, 7, 0x8018, 3, 1, 4, -1, 5, -1, -1 };
  return &_ComGoogleCommonBaseSplitter_3_1;
}

@end

void ComGoogleCommonBaseSplitter_3_1_initWithComGoogleCommonBaseCommonMatcher_withComGoogleCommonBaseSplitter_withJavaLangCharSequence_(ComGoogleCommonBaseSplitter_3_1 *self, ComGoogleCommonBaseCommonMatcher *capture$0, ComGoogleCommonBaseSplitter *splitter, id<JavaLangCharSequence> toSplit) {
  self->val$matcher_ = capture$0;
  ComGoogleCommonBaseSplitter_SplittingIterator_initWithComGoogleCommonBaseSplitter_withJavaLangCharSequence_(self, splitter, toSplit);
}

ComGoogleCommonBaseSplitter_3_1 *new_ComGoogleCommonBaseSplitter_3_1_initWithComGoogleCommonBaseCommonMatcher_withComGoogleCommonBaseSplitter_withJavaLangCharSequence_(ComGoogleCommonBaseCommonMatcher *capture$0, ComGoogleCommonBaseSplitter *splitter, id<JavaLangCharSequence> toSplit) {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseSplitter_3_1, initWithComGoogleCommonBaseCommonMatcher_withComGoogleCommonBaseSplitter_withJavaLangCharSequence_, capture$0, splitter, toSplit)
}

ComGoogleCommonBaseSplitter_3_1 *create_ComGoogleCommonBaseSplitter_3_1_initWithComGoogleCommonBaseCommonMatcher_withComGoogleCommonBaseSplitter_withJavaLangCharSequence_(ComGoogleCommonBaseCommonMatcher *capture$0, ComGoogleCommonBaseSplitter *splitter, id<JavaLangCharSequence> toSplit) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonBaseSplitter_3_1, initWithComGoogleCommonBaseCommonMatcher_withComGoogleCommonBaseSplitter_withJavaLangCharSequence_, capture$0, splitter, toSplit)
}

@implementation ComGoogleCommonBaseSplitter_4

- (instancetype)initWithInt:(jint)capture$0 {
  ComGoogleCommonBaseSplitter_4_initWithInt_(self, capture$0);
  return self;
}

- (ComGoogleCommonBaseSplitter_SplittingIterator *)iteratorWithComGoogleCommonBaseSplitter:(ComGoogleCommonBaseSplitter *)splitter
                                                                  withJavaLangCharSequence:(id<JavaLangCharSequence>)toSplit {
  return new_ComGoogleCommonBaseSplitter_4_1_initWithComGoogleCommonBaseSplitter_4_withComGoogleCommonBaseSplitter_withJavaLangCharSequence_(self, splitter, toSplit);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonBaseSplitter_SplittingIterator;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(iteratorWithComGoogleCommonBaseSplitter:withJavaLangCharSequence:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$length_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "iterator", "LComGoogleCommonBaseSplitter;LJavaLangCharSequence;", "LComGoogleCommonBaseSplitter;", "fixedLengthWithInt:" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseSplitter_4 = { "", "com.google.common.base", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, 3, -1, -1 };
  return &_ComGoogleCommonBaseSplitter_4;
}

@end

void ComGoogleCommonBaseSplitter_4_initWithInt_(ComGoogleCommonBaseSplitter_4 *self, jint capture$0) {
  self->val$length_ = capture$0;
  NSObject_init(self);
}

ComGoogleCommonBaseSplitter_4 *new_ComGoogleCommonBaseSplitter_4_initWithInt_(jint capture$0) {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseSplitter_4, initWithInt_, capture$0)
}

ComGoogleCommonBaseSplitter_4 *create_ComGoogleCommonBaseSplitter_4_initWithInt_(jint capture$0) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonBaseSplitter_4, initWithInt_, capture$0)
}

@implementation ComGoogleCommonBaseSplitter_4_1

- (instancetype)initWithComGoogleCommonBaseSplitter_4:(ComGoogleCommonBaseSplitter_4 *)outer$
                      withComGoogleCommonBaseSplitter:(ComGoogleCommonBaseSplitter *)splitter
                             withJavaLangCharSequence:(id<JavaLangCharSequence>)toSplit {
  ComGoogleCommonBaseSplitter_4_1_initWithComGoogleCommonBaseSplitter_4_withComGoogleCommonBaseSplitter_withJavaLangCharSequence_(self, outer$, splitter, toSplit);
  return self;
}

- (jint)separatorStartWithInt:(jint)start {
  jint nextChunkStart = start + this$0_->val$length_;
  return (nextChunkStart < [((id<JavaLangCharSequence>) nil_chk(toSplit_)) java_length] ? nextChunkStart : -1);
}

- (jint)separatorEndWithInt:(jint)separatorPosition {
  return separatorPosition;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonBaseSplitter_4:withComGoogleCommonBaseSplitter:withJavaLangCharSequence:);
  methods[1].selector = @selector(separatorStartWithInt:);
  methods[2].selector = @selector(separatorEndWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonBaseSplitter_4;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonBaseSplitter;LJavaLangCharSequence;", "separatorStart", "I", "separatorEnd", "LComGoogleCommonBaseSplitter_4;", "iteratorWithComGoogleCommonBaseSplitter:withJavaLangCharSequence:" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseSplitter_4_1 = { "", "com.google.common.base", ptrTable, methods, fields, 7, 0x8018, 3, 1, 4, -1, 5, -1, -1 };
  return &_ComGoogleCommonBaseSplitter_4_1;
}

@end

void ComGoogleCommonBaseSplitter_4_1_initWithComGoogleCommonBaseSplitter_4_withComGoogleCommonBaseSplitter_withJavaLangCharSequence_(ComGoogleCommonBaseSplitter_4_1 *self, ComGoogleCommonBaseSplitter_4 *outer$, ComGoogleCommonBaseSplitter *splitter, id<JavaLangCharSequence> toSplit) {
  self->this$0_ = outer$;
  ComGoogleCommonBaseSplitter_SplittingIterator_initWithComGoogleCommonBaseSplitter_withJavaLangCharSequence_(self, splitter, toSplit);
}

ComGoogleCommonBaseSplitter_4_1 *new_ComGoogleCommonBaseSplitter_4_1_initWithComGoogleCommonBaseSplitter_4_withComGoogleCommonBaseSplitter_withJavaLangCharSequence_(ComGoogleCommonBaseSplitter_4 *outer$, ComGoogleCommonBaseSplitter *splitter, id<JavaLangCharSequence> toSplit) {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseSplitter_4_1, initWithComGoogleCommonBaseSplitter_4_withComGoogleCommonBaseSplitter_withJavaLangCharSequence_, outer$, splitter, toSplit)
}

ComGoogleCommonBaseSplitter_4_1 *create_ComGoogleCommonBaseSplitter_4_1_initWithComGoogleCommonBaseSplitter_4_withComGoogleCommonBaseSplitter_withJavaLangCharSequence_(ComGoogleCommonBaseSplitter_4 *outer$, ComGoogleCommonBaseSplitter *splitter, id<JavaLangCharSequence> toSplit) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonBaseSplitter_4_1, initWithComGoogleCommonBaseSplitter_4_withComGoogleCommonBaseSplitter_withJavaLangCharSequence_, outer$, splitter, toSplit)
}

@implementation ComGoogleCommonBaseSplitter_5

- (instancetype)initWithComGoogleCommonBaseSplitter:(ComGoogleCommonBaseSplitter *)outer$
                           withJavaLangCharSequence:(id<JavaLangCharSequence>)capture$0 {
  ComGoogleCommonBaseSplitter_5_initWithComGoogleCommonBaseSplitter_withJavaLangCharSequence_(self, outer$, capture$0);
  return self;
}

- (id<JavaUtilIterator>)iterator {
  return ComGoogleCommonBaseSplitter_splittingIteratorWithJavaLangCharSequence_(this$0_, val$sequence_);
}

- (NSString *)description {
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((ComGoogleCommonBaseJoiner *) nil_chk(ComGoogleCommonBaseJoiner_onWithNSString_(@", "))) appendToWithJavaLangStringBuilder:[new_JavaLangStringBuilder_init() appendWithChar:'['] withJavaLangIterable:self])) appendWithChar:']'])) description];
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonBaseSplitter:withJavaLangCharSequence:);
  methods[1].selector = @selector(iterator);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonBaseSplitter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$sequence_", "LJavaLangCharSequence;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Iterator<Ljava/lang/String;>;", "toString", "LComGoogleCommonBaseSplitter;", "splitWithJavaLangCharSequence:", "Ljava/lang/Object;Ljava/lang/Iterable<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseSplitter_5 = { "", "com.google.common.base", ptrTable, methods, fields, 7, 0x8018, 3, 2, 2, -1, 3, 4, -1 };
  return &_ComGoogleCommonBaseSplitter_5;
}

@end

void ComGoogleCommonBaseSplitter_5_initWithComGoogleCommonBaseSplitter_withJavaLangCharSequence_(ComGoogleCommonBaseSplitter_5 *self, ComGoogleCommonBaseSplitter *outer$, id<JavaLangCharSequence> capture$0) {
  self->this$0_ = outer$;
  self->val$sequence_ = capture$0;
  NSObject_init(self);
}

ComGoogleCommonBaseSplitter_5 *new_ComGoogleCommonBaseSplitter_5_initWithComGoogleCommonBaseSplitter_withJavaLangCharSequence_(ComGoogleCommonBaseSplitter *outer$, id<JavaLangCharSequence> capture$0) {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseSplitter_5, initWithComGoogleCommonBaseSplitter_withJavaLangCharSequence_, outer$, capture$0)
}

ComGoogleCommonBaseSplitter_5 *create_ComGoogleCommonBaseSplitter_5_initWithComGoogleCommonBaseSplitter_withJavaLangCharSequence_(ComGoogleCommonBaseSplitter *outer$, id<JavaLangCharSequence> capture$0) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonBaseSplitter_5, initWithComGoogleCommonBaseSplitter_withJavaLangCharSequence_, outer$, capture$0)
}

@implementation ComGoogleCommonBaseSplitter_MapSplitter

- (instancetype)initWithComGoogleCommonBaseSplitter:(ComGoogleCommonBaseSplitter *)outerSplitter
                    withComGoogleCommonBaseSplitter:(ComGoogleCommonBaseSplitter *)entrySplitter {
  ComGoogleCommonBaseSplitter_MapSplitter_initWithComGoogleCommonBaseSplitter_withComGoogleCommonBaseSplitter_(self, outerSplitter, entrySplitter);
  return self;
}

- (id<JavaUtilMap>)splitWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence {
  id<JavaUtilMap> map = new_JavaUtilLinkedHashMap_init();
  for (NSString * __strong entry_ in nil_chk([((ComGoogleCommonBaseSplitter *) nil_chk(outerSplitter_)) splitWithJavaLangCharSequence:sequence])) {
    id<JavaUtilIterator> entryFields = ComGoogleCommonBaseSplitter_splittingIteratorWithJavaLangCharSequence_(nil_chk(entrySplitter_), entry_);
    ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_([((id<JavaUtilIterator>) nil_chk(entryFields)) hasNext], ComGoogleCommonBaseSplitter_MapSplitter_INVALID_ENTRY_MESSAGE, entry_);
    NSString *key = [entryFields next];
    ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_(![map containsKeyWithId:key], @"Duplicate key [%s] found.", key);
    ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_([entryFields hasNext], ComGoogleCommonBaseSplitter_MapSplitter_INVALID_ENTRY_MESSAGE, entry_);
    NSString *value = [entryFields next];
    (void) [map putWithId:key withId:value];
    ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_(![entryFields hasNext], ComGoogleCommonBaseSplitter_MapSplitter_INVALID_ENTRY_MESSAGE, entry_);
  }
  return JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(map);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonBaseSplitter:withComGoogleCommonBaseSplitter:);
  methods[1].selector = @selector(splitWithJavaLangCharSequence:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INVALID_ENTRY_MESSAGE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 4, -1, -1 },
    { "outerSplitter_", "LComGoogleCommonBaseSplitter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "entrySplitter_", "LComGoogleCommonBaseSplitter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonBaseSplitter;LComGoogleCommonBaseSplitter;", "split", "LJavaLangCharSequence;", "(Ljava/lang/CharSequence;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", &ComGoogleCommonBaseSplitter_MapSplitter_INVALID_ENTRY_MESSAGE, "LComGoogleCommonBaseSplitter;" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseSplitter_MapSplitter = { "MapSplitter", "com.google.common.base", ptrTable, methods, fields, 7, 0x19, 2, 3, 5, -1, -1, -1, -1 };
  return &_ComGoogleCommonBaseSplitter_MapSplitter;
}

@end

void ComGoogleCommonBaseSplitter_MapSplitter_initWithComGoogleCommonBaseSplitter_withComGoogleCommonBaseSplitter_(ComGoogleCommonBaseSplitter_MapSplitter *self, ComGoogleCommonBaseSplitter *outerSplitter, ComGoogleCommonBaseSplitter *entrySplitter) {
  NSObject_init(self);
  self->outerSplitter_ = outerSplitter;
  self->entrySplitter_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(entrySplitter);
}

ComGoogleCommonBaseSplitter_MapSplitter *new_ComGoogleCommonBaseSplitter_MapSplitter_initWithComGoogleCommonBaseSplitter_withComGoogleCommonBaseSplitter_(ComGoogleCommonBaseSplitter *outerSplitter, ComGoogleCommonBaseSplitter *entrySplitter) {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseSplitter_MapSplitter, initWithComGoogleCommonBaseSplitter_withComGoogleCommonBaseSplitter_, outerSplitter, entrySplitter)
}

ComGoogleCommonBaseSplitter_MapSplitter *create_ComGoogleCommonBaseSplitter_MapSplitter_initWithComGoogleCommonBaseSplitter_withComGoogleCommonBaseSplitter_(ComGoogleCommonBaseSplitter *outerSplitter, ComGoogleCommonBaseSplitter *entrySplitter) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonBaseSplitter_MapSplitter, initWithComGoogleCommonBaseSplitter_withComGoogleCommonBaseSplitter_, outerSplitter, entrySplitter)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonBaseSplitter_MapSplitter)
