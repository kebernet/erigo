//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/base/Throwables.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonBaseThrowables")
#ifdef RESTRICT_ComGoogleCommonBaseThrowables
#define INCLUDE_ALL_ComGoogleCommonBaseThrowables 0
#else
#define INCLUDE_ALL_ComGoogleCommonBaseThrowables 1
#endif
#undef RESTRICT_ComGoogleCommonBaseThrowables

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonBaseThrowables_) && (INCLUDE_ALL_ComGoogleCommonBaseThrowables || defined(INCLUDE_ComGoogleCommonBaseThrowables))
#define ComGoogleCommonBaseThrowables_

@class IOSClass;
@class JavaLangRuntimeException;
@protocol JavaUtilList;

@interface ComGoogleCommonBaseThrowables : NSObject

#pragma mark Public

+ (id<JavaUtilList>)getCausalChainWithNSException:(NSException *)throwable;
#define getCausalChainWithJavaLangThrowable getCausalChainWithNSException

+ (NSException *)getCauseAsWithNSException:(NSException *)throwable
                              withIOSClass:(IOSClass *)expectedCauseType;
#define getCauseAsWithJavaLangThrowable getCauseAsWithNSException

+ (NSException *)getRootCauseWithNSException:(NSException *)throwable;
#define getRootCauseWithJavaLangThrowable getRootCauseWithNSException

+ (NSString *)getStackTraceAsStringWithNSException:(NSException *)throwable;
#define getStackTraceAsStringWithJavaLangThrowable getStackTraceAsStringWithNSException

+ (id<JavaUtilList>)lazyStackTraceWithNSException:(NSException *)throwable;
#define lazyStackTraceWithJavaLangThrowable lazyStackTraceWithNSException

+ (jboolean)lazyStackTraceIsLazy;

+ (JavaLangRuntimeException *)propagateWithNSException:(NSException *)throwable;
#define propagateWithJavaLangThrowable propagateWithNSException

+ (void)propagateIfInstanceOfWithNSException:(NSException *)throwable
                                withIOSClass:(IOSClass *)declaredType;
#define propagateIfInstanceOfWithJavaLangThrowable propagateIfInstanceOfWithNSException

+ (void)propagateIfPossibleWithNSException:(NSException *)throwable;
#define propagateIfPossibleWithJavaLangThrowable propagateIfPossibleWithNSException

+ (void)propagateIfPossibleWithNSException:(NSException *)throwable
                              withIOSClass:(IOSClass *)declaredType;
#define propagateIfPossibleWithJavaLangThrowable propagateIfPossibleWithNSException

+ (void)propagateIfPossibleWithNSException:(NSException *)throwable
                              withIOSClass:(IOSClass *)declaredType1
                              withIOSClass:(IOSClass *)declaredType2;
#define propagateIfPossibleWithJavaLangThrowable propagateIfPossibleWithNSException

+ (void)throwIfInstanceOfWithNSException:(NSException *)throwable
                            withIOSClass:(IOSClass *)declaredType;
#define throwIfInstanceOfWithJavaLangThrowable throwIfInstanceOfWithNSException

+ (void)throwIfUncheckedWithNSException:(NSException *)throwable;
#define throwIfUncheckedWithJavaLangThrowable throwIfUncheckedWithNSException

@end

J2OBJC_STATIC_INIT(ComGoogleCommonBaseThrowables)

inline NSString *ComGoogleCommonBaseThrowables_get_SHARED_SECRETS_CLASSNAME();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComGoogleCommonBaseThrowables_SHARED_SECRETS_CLASSNAME;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonBaseThrowables, SHARED_SECRETS_CLASSNAME, NSString *)

FOUNDATION_EXPORT void ComGoogleCommonBaseThrowables_throwIfInstanceOfWithNSException_withIOSClass_(NSException *throwable, IOSClass *declaredType);

FOUNDATION_EXPORT void ComGoogleCommonBaseThrowables_propagateIfInstanceOfWithNSException_withIOSClass_(NSException *throwable, IOSClass *declaredType);

FOUNDATION_EXPORT void ComGoogleCommonBaseThrowables_throwIfUncheckedWithNSException_(NSException *throwable);

FOUNDATION_EXPORT void ComGoogleCommonBaseThrowables_propagateIfPossibleWithNSException_(NSException *throwable);

FOUNDATION_EXPORT void ComGoogleCommonBaseThrowables_propagateIfPossibleWithNSException_withIOSClass_(NSException *throwable, IOSClass *declaredType);

FOUNDATION_EXPORT void ComGoogleCommonBaseThrowables_propagateIfPossibleWithNSException_withIOSClass_withIOSClass_(NSException *throwable, IOSClass *declaredType1, IOSClass *declaredType2);

FOUNDATION_EXPORT JavaLangRuntimeException *ComGoogleCommonBaseThrowables_propagateWithNSException_(NSException *throwable);

FOUNDATION_EXPORT NSException *ComGoogleCommonBaseThrowables_getRootCauseWithNSException_(NSException *throwable);

FOUNDATION_EXPORT id<JavaUtilList> ComGoogleCommonBaseThrowables_getCausalChainWithNSException_(NSException *throwable);

FOUNDATION_EXPORT NSException *ComGoogleCommonBaseThrowables_getCauseAsWithNSException_withIOSClass_(NSException *throwable, IOSClass *expectedCauseType);

FOUNDATION_EXPORT NSString *ComGoogleCommonBaseThrowables_getStackTraceAsStringWithNSException_(NSException *throwable);

FOUNDATION_EXPORT id<JavaUtilList> ComGoogleCommonBaseThrowables_lazyStackTraceWithNSException_(NSException *throwable);

FOUNDATION_EXPORT jboolean ComGoogleCommonBaseThrowables_lazyStackTraceIsLazy();

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonBaseThrowables)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonBaseThrowables")
