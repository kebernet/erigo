//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/base/Utf8.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/base/Utf8.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "java/lang/IllegalArgumentException.h"

@interface ComGoogleCommonBaseUtf8 ()

+ (jint)encodedLengthGeneralWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence
                                             withInt:(jint)start;

+ (jboolean)isWellFormedSlowPathWithByteArray:(IOSByteArray *)bytes
                                      withInt:(jint)off
                                      withInt:(jint)end;

+ (NSString *)unpairedSurrogateMsgWithInt:(jint)i;

- (instancetype)init;

@end

__attribute__((unused)) static jint ComGoogleCommonBaseUtf8_encodedLengthGeneralWithJavaLangCharSequence_withInt_(id<JavaLangCharSequence> sequence, jint start);

__attribute__((unused)) static jboolean ComGoogleCommonBaseUtf8_isWellFormedSlowPathWithByteArray_withInt_withInt_(IOSByteArray *bytes, jint off, jint end);

__attribute__((unused)) static NSString *ComGoogleCommonBaseUtf8_unpairedSurrogateMsgWithInt_(jint i);

__attribute__((unused)) static void ComGoogleCommonBaseUtf8_init(ComGoogleCommonBaseUtf8 *self);

__attribute__((unused)) static ComGoogleCommonBaseUtf8 *new_ComGoogleCommonBaseUtf8_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonBaseUtf8 *create_ComGoogleCommonBaseUtf8_init();

@implementation ComGoogleCommonBaseUtf8

+ (jint)encodedLengthWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence {
  return ComGoogleCommonBaseUtf8_encodedLengthWithJavaLangCharSequence_(sequence);
}

+ (jint)encodedLengthGeneralWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence
                                             withInt:(jint)start {
  return ComGoogleCommonBaseUtf8_encodedLengthGeneralWithJavaLangCharSequence_withInt_(sequence, start);
}

+ (jboolean)isWellFormedWithByteArray:(IOSByteArray *)bytes {
  return ComGoogleCommonBaseUtf8_isWellFormedWithByteArray_(bytes);
}

+ (jboolean)isWellFormedWithByteArray:(IOSByteArray *)bytes
                              withInt:(jint)off
                              withInt:(jint)len {
  return ComGoogleCommonBaseUtf8_isWellFormedWithByteArray_withInt_withInt_(bytes, off, len);
}

+ (jboolean)isWellFormedSlowPathWithByteArray:(IOSByteArray *)bytes
                                      withInt:(jint)off
                                      withInt:(jint)end {
  return ComGoogleCommonBaseUtf8_isWellFormedSlowPathWithByteArray_withInt_withInt_(bytes, off, end);
}

+ (NSString *)unpairedSurrogateMsgWithInt:(jint)i {
  return ComGoogleCommonBaseUtf8_unpairedSurrogateMsgWithInt_(i);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonBaseUtf8_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 4, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 7, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 8, 9, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(encodedLengthWithJavaLangCharSequence:);
  methods[1].selector = @selector(encodedLengthGeneralWithJavaLangCharSequence:withInt:);
  methods[2].selector = @selector(isWellFormedWithByteArray:);
  methods[3].selector = @selector(isWellFormedWithByteArray:withInt:withInt:);
  methods[4].selector = @selector(isWellFormedSlowPathWithByteArray:withInt:withInt:);
  methods[5].selector = @selector(unpairedSurrogateMsgWithInt:);
  methods[6].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "encodedLength", "LJavaLangCharSequence;", "encodedLengthGeneral", "LJavaLangCharSequence;I", "isWellFormed", "[B", "[BII", "isWellFormedSlowPath", "unpairedSurrogateMsg", "I" };
  static const J2ObjcClassInfo _ComGoogleCommonBaseUtf8 = { "Utf8", "com.google.common.base", ptrTable, methods, NULL, 7, 0x11, 7, 0, -1, -1, -1, -1, -1 };
  return &_ComGoogleCommonBaseUtf8;
}

@end

jint ComGoogleCommonBaseUtf8_encodedLengthWithJavaLangCharSequence_(id<JavaLangCharSequence> sequence) {
  ComGoogleCommonBaseUtf8_initialize();
  jint utf16Length = [((id<JavaLangCharSequence>) nil_chk(sequence)) java_length];
  jint utf8Length = utf16Length;
  jint i = 0;
  while (i < utf16Length && [sequence charAtWithInt:i] < (jint) 0x80) {
    i++;
  }
  for (; i < utf16Length; i++) {
    jchar c = [sequence charAtWithInt:i];
    if (c < (jint) 0x800) {
      utf8Length += (JreURShift32(((jint) 0x7f - c), 31));
    }
    else {
      utf8Length += ComGoogleCommonBaseUtf8_encodedLengthGeneralWithJavaLangCharSequence_withInt_(sequence, i);
      break;
    }
  }
  if (utf8Length < utf16Length) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$J", @"UTF-8 length does not fit in int: ", (utf8Length + (JreLShift64(1LL, 32)))));
  }
  return utf8Length;
}

jint ComGoogleCommonBaseUtf8_encodedLengthGeneralWithJavaLangCharSequence_withInt_(id<JavaLangCharSequence> sequence, jint start) {
  ComGoogleCommonBaseUtf8_initialize();
  jint utf16Length = [((id<JavaLangCharSequence>) nil_chk(sequence)) java_length];
  jint utf8Length = 0;
  for (jint i = start; i < utf16Length; i++) {
    jchar c = [sequence charAtWithInt:i];
    if (c < (jint) 0x800) {
      utf8Length += JreURShift32(((jint) 0x7f - c), 31);
    }
    else {
      utf8Length += 2;
      if (JavaLangCharacter_MIN_SURROGATE <= c && c <= JavaLangCharacter_MAX_SURROGATE) {
        if (JavaLangCharacter_codePointAtWithJavaLangCharSequence_withInt_(sequence, i) == c) {
          @throw new_JavaLangIllegalArgumentException_initWithNSString_(ComGoogleCommonBaseUtf8_unpairedSurrogateMsgWithInt_(i));
        }
        i++;
      }
    }
  }
  return utf8Length;
}

jboolean ComGoogleCommonBaseUtf8_isWellFormedWithByteArray_(IOSByteArray *bytes) {
  ComGoogleCommonBaseUtf8_initialize();
  return ComGoogleCommonBaseUtf8_isWellFormedWithByteArray_withInt_withInt_(bytes, 0, ((IOSByteArray *) nil_chk(bytes))->size_);
}

jboolean ComGoogleCommonBaseUtf8_isWellFormedWithByteArray_withInt_withInt_(IOSByteArray *bytes, jint off, jint len) {
  ComGoogleCommonBaseUtf8_initialize();
  jint end = off + len;
  ComGoogleCommonBasePreconditions_checkPositionIndexesWithInt_withInt_withInt_(off, end, ((IOSByteArray *) nil_chk(bytes))->size_);
  for (jint i = off; i < end; i++) {
    if (IOSByteArray_Get(bytes, i) < 0) {
      return ComGoogleCommonBaseUtf8_isWellFormedSlowPathWithByteArray_withInt_withInt_(bytes, i, end);
    }
  }
  return true;
}

jboolean ComGoogleCommonBaseUtf8_isWellFormedSlowPathWithByteArray_withInt_withInt_(IOSByteArray *bytes, jint off, jint end) {
  ComGoogleCommonBaseUtf8_initialize();
  jint index = off;
  while (true) {
    jint byte1;
    do {
      if (index >= end) {
        return true;
      }
    }
    while ((byte1 = IOSByteArray_Get(nil_chk(bytes), index++)) >= 0);
    if (byte1 < (jbyte) (jint) 0xE0) {
      if (index == end) {
        return false;
      }
      if (byte1 < (jbyte) (jint) 0xC2 || IOSByteArray_Get(bytes, index++) > (jbyte) (jint) 0xBF) {
        return false;
      }
    }
    else if (byte1 < (jbyte) (jint) 0xF0) {
      if (index + 1 >= end) {
        return false;
      }
      jint byte2 = IOSByteArray_Get(bytes, index++);
      if (byte2 > (jbyte) (jint) 0xBF || (byte1 == (jbyte) (jint) 0xE0 && byte2 < (jbyte) (jint) 0xA0) || (byte1 == (jbyte) (jint) 0xED && (jbyte) (jint) 0xA0 <= byte2) || IOSByteArray_Get(bytes, index++) > (jbyte) (jint) 0xBF) {
        return false;
      }
    }
    else {
      if (index + 2 >= end) {
        return false;
      }
      jint byte2 = IOSByteArray_Get(bytes, index++);
      if (byte2 > (jbyte) (jint) 0xBF || (JreRShift32(((JreLShift32(byte1, 28)) + (byte2 - (jbyte) (jint) 0x90)), 30)) != 0 || IOSByteArray_Get(bytes, index++) > (jbyte) (jint) 0xBF || IOSByteArray_Get(bytes, index++) > (jbyte) (jint) 0xBF) {
        return false;
      }
    }
  }
}

NSString *ComGoogleCommonBaseUtf8_unpairedSurrogateMsgWithInt_(jint i) {
  ComGoogleCommonBaseUtf8_initialize();
  return JreStrcat("$I", @"Unpaired surrogate at index ", i);
}

void ComGoogleCommonBaseUtf8_init(ComGoogleCommonBaseUtf8 *self) {
  NSObject_init(self);
}

ComGoogleCommonBaseUtf8 *new_ComGoogleCommonBaseUtf8_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonBaseUtf8, init)
}

ComGoogleCommonBaseUtf8 *create_ComGoogleCommonBaseUtf8_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonBaseUtf8, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonBaseUtf8)
