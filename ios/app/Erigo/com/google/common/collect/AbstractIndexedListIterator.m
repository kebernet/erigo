//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/collect/AbstractIndexedListIterator.java
//

#include "J2ObjC_source.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/collect/AbstractIndexedListIterator.h"
#include "com/google/common/collect/UnmodifiableListIterator.h"
#include "java/util/NoSuchElementException.h"

@interface ComGoogleCommonCollectAbstractIndexedListIterator () {
 @public
  jint size_;
  jint position_;
}

@end

__attribute__((unused)) static jboolean ComGoogleCommonCollectAbstractIndexedListIterator_hasNext(ComGoogleCommonCollectAbstractIndexedListIterator *self);

__attribute__((unused)) static jboolean ComGoogleCommonCollectAbstractIndexedListIterator_hasPrevious(ComGoogleCommonCollectAbstractIndexedListIterator *self);

@implementation ComGoogleCommonCollectAbstractIndexedListIterator

- (id)getWithInt:(jint)index {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (instancetype)initWithInt:(jint)size {
  ComGoogleCommonCollectAbstractIndexedListIterator_initWithInt_(self, size);
  return self;
}

- (instancetype)initWithInt:(jint)size
                    withInt:(jint)position {
  ComGoogleCommonCollectAbstractIndexedListIterator_initWithInt_withInt_(self, size, position);
  return self;
}

- (jboolean)hasNext {
  return ComGoogleCommonCollectAbstractIndexedListIterator_hasNext(self);
}

- (id)next {
  if (!ComGoogleCommonCollectAbstractIndexedListIterator_hasNext(self)) {
    @throw new_JavaUtilNoSuchElementException_init();
  }
  return [self getWithInt:position_++];
}

- (jint)nextIndex {
  return position_;
}

- (jboolean)hasPrevious {
  return ComGoogleCommonCollectAbstractIndexedListIterator_hasPrevious(self);
}

- (id)previous {
  if (!ComGoogleCommonCollectAbstractIndexedListIterator_hasPrevious(self)) {
    @throw new_JavaUtilNoSuchElementException_init();
  }
  return [self getWithInt:--position_];
}

- (jint)previousIndex {
  return position_ - 1;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x404, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x11, -1, -1, -1, 4, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x11, -1, -1, -1, 4, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getWithInt:);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(initWithInt:withInt:);
  methods[3].selector = @selector(hasNext);
  methods[4].selector = @selector(next);
  methods[5].selector = @selector(nextIndex);
  methods[6].selector = @selector(hasPrevious);
  methods[7].selector = @selector(previous);
  methods[8].selector = @selector(previousIndex);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "size_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "position_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "get", "I", "(I)TE;", "II", "()TE;", "<E:Ljava/lang/Object;>Lcom/google/common/collect/UnmodifiableListIterator<TE;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonCollectAbstractIndexedListIterator = { "AbstractIndexedListIterator", "com.google.common.collect", ptrTable, methods, fields, 7, 0x400, 9, 2, -1, -1, -1, 5, -1 };
  return &_ComGoogleCommonCollectAbstractIndexedListIterator;
}

@end

void ComGoogleCommonCollectAbstractIndexedListIterator_initWithInt_(ComGoogleCommonCollectAbstractIndexedListIterator *self, jint size) {
  ComGoogleCommonCollectAbstractIndexedListIterator_initWithInt_withInt_(self, size, 0);
}

void ComGoogleCommonCollectAbstractIndexedListIterator_initWithInt_withInt_(ComGoogleCommonCollectAbstractIndexedListIterator *self, jint size, jint position) {
  ComGoogleCommonCollectUnmodifiableListIterator_init(self);
  ComGoogleCommonBasePreconditions_checkPositionIndexWithInt_withInt_(position, size);
  self->size_ = size;
  self->position_ = position;
}

jboolean ComGoogleCommonCollectAbstractIndexedListIterator_hasNext(ComGoogleCommonCollectAbstractIndexedListIterator *self) {
  return self->position_ < self->size_;
}

jboolean ComGoogleCommonCollectAbstractIndexedListIterator_hasPrevious(ComGoogleCommonCollectAbstractIndexedListIterator *self) {
  return self->position_ > 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonCollectAbstractIndexedListIterator)
