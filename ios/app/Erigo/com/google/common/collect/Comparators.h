//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/collect/Comparators.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonCollectComparators")
#ifdef RESTRICT_ComGoogleCommonCollectComparators
#define INCLUDE_ALL_ComGoogleCommonCollectComparators 0
#else
#define INCLUDE_ALL_ComGoogleCommonCollectComparators 1
#endif
#undef RESTRICT_ComGoogleCommonCollectComparators

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonCollectComparators_) && (INCLUDE_ALL_ComGoogleCommonCollectComparators || defined(INCLUDE_ComGoogleCommonCollectComparators))
#define ComGoogleCommonCollectComparators_

@protocol JavaLangIterable;
@protocol JavaUtilComparator;
@protocol JavaUtilStreamCollector;

@interface ComGoogleCommonCollectComparators : NSObject

#pragma mark Public

+ (id<JavaUtilComparator>)emptiesFirstWithJavaUtilComparator:(id<JavaUtilComparator>)valueComparator;

+ (id<JavaUtilComparator>)emptiesLastWithJavaUtilComparator:(id<JavaUtilComparator>)valueComparator;

+ (id<JavaUtilStreamCollector>)greatestWithInt:(jint)k
                        withJavaUtilComparator:(id<JavaUtilComparator>)comparator;

+ (jboolean)isInOrderWithJavaLangIterable:(id<JavaLangIterable>)iterable
                   withJavaUtilComparator:(id<JavaUtilComparator>)comparator;

+ (jboolean)isInStrictOrderWithJavaLangIterable:(id<JavaLangIterable>)iterable
                         withJavaUtilComparator:(id<JavaUtilComparator>)comparator;

+ (id<JavaUtilStreamCollector>)leastWithInt:(jint)k
                     withJavaUtilComparator:(id<JavaUtilComparator>)comparator;

+ (id<JavaUtilComparator>)lexicographicalWithJavaUtilComparator:(id<JavaUtilComparator>)comparator;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectComparators)

FOUNDATION_EXPORT id<JavaUtilComparator> ComGoogleCommonCollectComparators_lexicographicalWithJavaUtilComparator_(id<JavaUtilComparator> comparator);

FOUNDATION_EXPORT jboolean ComGoogleCommonCollectComparators_isInOrderWithJavaLangIterable_withJavaUtilComparator_(id<JavaLangIterable> iterable, id<JavaUtilComparator> comparator);

FOUNDATION_EXPORT jboolean ComGoogleCommonCollectComparators_isInStrictOrderWithJavaLangIterable_withJavaUtilComparator_(id<JavaLangIterable> iterable, id<JavaUtilComparator> comparator);

FOUNDATION_EXPORT id<JavaUtilStreamCollector> ComGoogleCommonCollectComparators_leastWithInt_withJavaUtilComparator_(jint k, id<JavaUtilComparator> comparator);

FOUNDATION_EXPORT id<JavaUtilStreamCollector> ComGoogleCommonCollectComparators_greatestWithInt_withJavaUtilComparator_(jint k, id<JavaUtilComparator> comparator);

FOUNDATION_EXPORT id<JavaUtilComparator> ComGoogleCommonCollectComparators_emptiesFirstWithJavaUtilComparator_(id<JavaUtilComparator> valueComparator);

FOUNDATION_EXPORT id<JavaUtilComparator> ComGoogleCommonCollectComparators_emptiesLastWithJavaUtilComparator_(id<JavaUtilComparator> valueComparator);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectComparators)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonCollectComparators")
