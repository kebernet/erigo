//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/collect/ConcurrentHashMultiset.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/collect/AbstractIterator.h"
#include "com/google/common/collect/AbstractMultiset.h"
#include "com/google/common/collect/CollectPreconditions.h"
#include "com/google/common/collect/Collections2.h"
#include "com/google/common/collect/ConcurrentHashMultiset.h"
#include "com/google/common/collect/ForwardingIterator.h"
#include "com/google/common/collect/ForwardingSet.h"
#include "com/google/common/collect/Iterables.h"
#include "com/google/common/collect/Iterators.h"
#include "com/google/common/collect/Lists.h"
#include "com/google/common/collect/Maps.h"
#include "com/google/common/collect/Multiset.h"
#include "com/google/common/collect/Multisets.h"
#include "com/google/common/collect/Serialization.h"
#include "com/google/common/math/IntMath.h"
#include "com/google/common/primitives/Ints.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/lang/ArithmeticException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Iterable.h"
#include "java/lang/Math.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/ConcurrentMap.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "javax/annotation/Nullable.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ComGoogleCommonCollectConcurrentHashMultiset () {
 @public
  id<JavaUtilConcurrentConcurrentMap> countMap_;
}

- (id<JavaUtilList>)snapshot;

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)stream;

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)stream;

@end

J2OBJC_FIELD_SETTER(ComGoogleCommonCollectConcurrentHashMultiset, countMap_, id<JavaUtilConcurrentConcurrentMap>)

inline jlong ComGoogleCommonCollectConcurrentHashMultiset_get_serialVersionUID();
#define ComGoogleCommonCollectConcurrentHashMultiset_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonCollectConcurrentHashMultiset, serialVersionUID, jlong)

__attribute__((unused)) static id<JavaUtilList> ComGoogleCommonCollectConcurrentHashMultiset_snapshot(ComGoogleCommonCollectConcurrentHashMultiset *self);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonCollectConcurrentHashMultiset__Annotations$0();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonCollectConcurrentHashMultiset__Annotations$1();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonCollectConcurrentHashMultiset__Annotations$2();

@interface ComGoogleCommonCollectConcurrentHashMultiset_FieldSettersHolder : NSObject

- (instancetype)init;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonCollectConcurrentHashMultiset_FieldSettersHolder)

inline ComGoogleCommonCollectSerialization_FieldSetter *ComGoogleCommonCollectConcurrentHashMultiset_FieldSettersHolder_get_COUNT_MAP_FIELD_SETTER();
static ComGoogleCommonCollectSerialization_FieldSetter *ComGoogleCommonCollectConcurrentHashMultiset_FieldSettersHolder_COUNT_MAP_FIELD_SETTER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonCollectConcurrentHashMultiset_FieldSettersHolder, COUNT_MAP_FIELD_SETTER, ComGoogleCommonCollectSerialization_FieldSetter *)

__attribute__((unused)) static void ComGoogleCommonCollectConcurrentHashMultiset_FieldSettersHolder_init(ComGoogleCommonCollectConcurrentHashMultiset_FieldSettersHolder *self);

__attribute__((unused)) static ComGoogleCommonCollectConcurrentHashMultiset_FieldSettersHolder *new_ComGoogleCommonCollectConcurrentHashMultiset_FieldSettersHolder_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonCollectConcurrentHashMultiset_FieldSettersHolder *create_ComGoogleCommonCollectConcurrentHashMultiset_FieldSettersHolder_init();

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectConcurrentHashMultiset_FieldSettersHolder)

@interface ComGoogleCommonCollectConcurrentHashMultiset_1 : ComGoogleCommonCollectForwardingSet {
 @public
  id<JavaUtilSet> val$delegate_;
}

- (instancetype)initWithJavaUtilSet:(id<JavaUtilSet>)capture$0;

- (id<JavaUtilSet>)delegate;

- (jboolean)containsWithId:(id)object;

- (jboolean)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection;

- (jboolean)removeWithId:(id)object;

- (jboolean)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)c;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectConcurrentHashMultiset_1)

__attribute__((unused)) static void ComGoogleCommonCollectConcurrentHashMultiset_1_initWithJavaUtilSet_(ComGoogleCommonCollectConcurrentHashMultiset_1 *self, id<JavaUtilSet> capture$0);

__attribute__((unused)) static ComGoogleCommonCollectConcurrentHashMultiset_1 *new_ComGoogleCommonCollectConcurrentHashMultiset_1_initWithJavaUtilSet_(id<JavaUtilSet> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonCollectConcurrentHashMultiset_1 *create_ComGoogleCommonCollectConcurrentHashMultiset_1_initWithJavaUtilSet_(id<JavaUtilSet> capture$0);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonCollectConcurrentHashMultiset_1__Annotations$0();

@interface ComGoogleCommonCollectConcurrentHashMultiset_2 : ComGoogleCommonCollectAbstractIterator {
 @public
  id<JavaUtilIterator> mapEntries_;
}

- (instancetype)initWithComGoogleCommonCollectConcurrentHashMultiset:(ComGoogleCommonCollectConcurrentHashMultiset *)outer$;

- (id<ComGoogleCommonCollectMultiset_Entry>)computeNext;

- (id<ComGoogleCommonCollectMultiset_Entry>)endOfData;

- (id<ComGoogleCommonCollectMultiset_Entry>)next;

- (id<ComGoogleCommonCollectMultiset_Entry>)peek;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectConcurrentHashMultiset_2)

J2OBJC_FIELD_SETTER(ComGoogleCommonCollectConcurrentHashMultiset_2, mapEntries_, id<JavaUtilIterator>)

__attribute__((unused)) static void ComGoogleCommonCollectConcurrentHashMultiset_2_initWithComGoogleCommonCollectConcurrentHashMultiset_(ComGoogleCommonCollectConcurrentHashMultiset_2 *self, ComGoogleCommonCollectConcurrentHashMultiset *outer$);

__attribute__((unused)) static ComGoogleCommonCollectConcurrentHashMultiset_2 *new_ComGoogleCommonCollectConcurrentHashMultiset_2_initWithComGoogleCommonCollectConcurrentHashMultiset_(ComGoogleCommonCollectConcurrentHashMultiset *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonCollectConcurrentHashMultiset_2 *create_ComGoogleCommonCollectConcurrentHashMultiset_2_initWithComGoogleCommonCollectConcurrentHashMultiset_(ComGoogleCommonCollectConcurrentHashMultiset *outer$);

@interface ComGoogleCommonCollectConcurrentHashMultiset_3 : ComGoogleCommonCollectForwardingIterator {
 @public
  ComGoogleCommonCollectConcurrentHashMultiset *this$0_;
  id<JavaUtilIterator> val$readOnlyIterator_;
  id<ComGoogleCommonCollectMultiset_Entry> last_;
}

- (instancetype)initWithComGoogleCommonCollectConcurrentHashMultiset:(ComGoogleCommonCollectConcurrentHashMultiset *)outer$
                                                withJavaUtilIterator:(id<JavaUtilIterator>)capture$0;

- (id<JavaUtilIterator>)delegate;

- (id<ComGoogleCommonCollectMultiset_Entry>)next;

- (void)remove;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectConcurrentHashMultiset_3)

J2OBJC_FIELD_SETTER(ComGoogleCommonCollectConcurrentHashMultiset_3, last_, id<ComGoogleCommonCollectMultiset_Entry>)

__attribute__((unused)) static void ComGoogleCommonCollectConcurrentHashMultiset_3_initWithComGoogleCommonCollectConcurrentHashMultiset_withJavaUtilIterator_(ComGoogleCommonCollectConcurrentHashMultiset_3 *self, ComGoogleCommonCollectConcurrentHashMultiset *outer$, id<JavaUtilIterator> capture$0);

__attribute__((unused)) static ComGoogleCommonCollectConcurrentHashMultiset_3 *new_ComGoogleCommonCollectConcurrentHashMultiset_3_initWithComGoogleCommonCollectConcurrentHashMultiset_withJavaUtilIterator_(ComGoogleCommonCollectConcurrentHashMultiset *outer$, id<JavaUtilIterator> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonCollectConcurrentHashMultiset_3 *create_ComGoogleCommonCollectConcurrentHashMultiset_3_initWithComGoogleCommonCollectConcurrentHashMultiset_withJavaUtilIterator_(ComGoogleCommonCollectConcurrentHashMultiset *outer$, id<JavaUtilIterator> capture$0);

@interface ComGoogleCommonCollectConcurrentHashMultiset_EntrySet : ComGoogleCommonCollectAbstractMultiset_EntrySet {
 @public
  __unsafe_unretained ComGoogleCommonCollectConcurrentHashMultiset *this$1_;
}

- (instancetype)initWithComGoogleCommonCollectConcurrentHashMultiset:(ComGoogleCommonCollectConcurrentHashMultiset *)outer$;

- (ComGoogleCommonCollectConcurrentHashMultiset *)multiset;

- (IOSObjectArray *)toArray;

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)array;

- (id<JavaUtilList>)snapshot;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonCollectConcurrentHashMultiset_EntrySet)

__attribute__((unused)) static void ComGoogleCommonCollectConcurrentHashMultiset_EntrySet_initWithComGoogleCommonCollectConcurrentHashMultiset_(ComGoogleCommonCollectConcurrentHashMultiset_EntrySet *self, ComGoogleCommonCollectConcurrentHashMultiset *outer$);

__attribute__((unused)) static ComGoogleCommonCollectConcurrentHashMultiset_EntrySet *new_ComGoogleCommonCollectConcurrentHashMultiset_EntrySet_initWithComGoogleCommonCollectConcurrentHashMultiset_(ComGoogleCommonCollectConcurrentHashMultiset *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonCollectConcurrentHashMultiset_EntrySet *create_ComGoogleCommonCollectConcurrentHashMultiset_EntrySet_initWithComGoogleCommonCollectConcurrentHashMultiset_(ComGoogleCommonCollectConcurrentHashMultiset *outer$);

__attribute__((unused)) static id<JavaUtilList> ComGoogleCommonCollectConcurrentHashMultiset_EntrySet_snapshot(ComGoogleCommonCollectConcurrentHashMultiset_EntrySet *self);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonCollectConcurrentHashMultiset_EntrySet)

@implementation ComGoogleCommonCollectConcurrentHashMultiset

+ (ComGoogleCommonCollectConcurrentHashMultiset *)create {
  return ComGoogleCommonCollectConcurrentHashMultiset_create();
}

+ (ComGoogleCommonCollectConcurrentHashMultiset *)createWithJavaLangIterable:(id<JavaLangIterable>)elements {
  return ComGoogleCommonCollectConcurrentHashMultiset_createWithJavaLangIterable_(elements);
}

+ (ComGoogleCommonCollectConcurrentHashMultiset *)createWithJavaUtilConcurrentConcurrentMap:(id<JavaUtilConcurrentConcurrentMap>)countMap {
  return ComGoogleCommonCollectConcurrentHashMultiset_createWithJavaUtilConcurrentConcurrentMap_(countMap);
}

- (instancetype)initWithJavaUtilConcurrentConcurrentMap:(id<JavaUtilConcurrentConcurrentMap>)countMap {
  ComGoogleCommonCollectConcurrentHashMultiset_initWithJavaUtilConcurrentConcurrentMap_(self, countMap);
  return self;
}

- (jint)countWithId:(id)element {
  JavaUtilConcurrentAtomicAtomicInteger *existingCounter = ComGoogleCommonCollectMaps_safeGetWithJavaUtilMap_withId_(countMap_, element);
  return (existingCounter == nil) ? 0 : [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(existingCounter)) get];
}

- (jint)size {
  jlong sum = 0LL;
  for (JavaUtilConcurrentAtomicAtomicInteger * __strong value in nil_chk([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(countMap_)) values])) {
    sum += [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(value)) get];
  }
  return ComGoogleCommonPrimitivesInts_saturatedCastWithLong_(sum);
}

- (IOSObjectArray *)toArray {
  return [((id<JavaUtilList>) nil_chk(ComGoogleCommonCollectConcurrentHashMultiset_snapshot(self))) toArray];
}

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)array {
  return [((id<JavaUtilList>) nil_chk(ComGoogleCommonCollectConcurrentHashMultiset_snapshot(self))) toArrayWithNSObjectArray:array];
}

- (id<JavaUtilList>)snapshot {
  return ComGoogleCommonCollectConcurrentHashMultiset_snapshot(self);
}

- (jint)addWithId:(id)element
          withInt:(jint)occurrences {
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(element);
  if (occurrences == 0) {
    return [self countWithId:element];
  }
  ComGoogleCommonCollectCollectPreconditions_checkPositiveWithInt_withNSString_(occurrences, @"occurences");
  while (true) {
    JavaUtilConcurrentAtomicAtomicInteger *existingCounter = ComGoogleCommonCollectMaps_safeGetWithJavaUtilMap_withId_(countMap_, element);
    if (existingCounter == nil) {
      existingCounter = [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(countMap_)) putIfAbsentWithId:element withId:new_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(occurrences)];
      if (existingCounter == nil) {
        return 0;
      }
    }
    while (true) {
      jint oldValue = [existingCounter get];
      if (oldValue != 0) {
        @try {
          jint newValue = ComGoogleCommonMathIntMath_checkedAddWithInt_withInt_(oldValue, occurrences);
          if ([existingCounter compareAndSetWithInt:oldValue withInt:newValue]) {
            return oldValue;
          }
        }
        @catch (JavaLangArithmeticException *overflow) {
          @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I", @"Overflow adding ", occurrences, @" occurrences to a count of ", oldValue));
        }
      }
      else {
        JavaUtilConcurrentAtomicAtomicInteger *newCounter = new_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(occurrences);
        if (([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(countMap_)) putIfAbsentWithId:element withId:newCounter] == nil) || [countMap_ replaceWithId:element withId:existingCounter withId:newCounter]) {
          return 0;
        }
        break;
      }
    }
  }
}

- (jint)removeWithId:(id)element
             withInt:(jint)occurrences {
  if (occurrences == 0) {
    return [self countWithId:element];
  }
  ComGoogleCommonCollectCollectPreconditions_checkPositiveWithInt_withNSString_(occurrences, @"occurences");
  JavaUtilConcurrentAtomicAtomicInteger *existingCounter = ComGoogleCommonCollectMaps_safeGetWithJavaUtilMap_withId_(countMap_, element);
  if (existingCounter == nil) {
    return 0;
  }
  while (true) {
    jint oldValue = [existingCounter get];
    if (oldValue != 0) {
      jint newValue = JavaLangMath_maxWithInt_withInt_(0, oldValue - occurrences);
      if ([existingCounter compareAndSetWithInt:oldValue withInt:newValue]) {
        if (newValue == 0) {
          [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(countMap_)) removeWithId:element withId:existingCounter];
        }
        return oldValue;
      }
    }
    else {
      return 0;
    }
  }
}

- (jboolean)removeExactlyWithId:(id)element
                        withInt:(jint)occurrences {
  if (occurrences == 0) {
    return true;
  }
  ComGoogleCommonCollectCollectPreconditions_checkPositiveWithInt_withNSString_(occurrences, @"occurences");
  JavaUtilConcurrentAtomicAtomicInteger *existingCounter = ComGoogleCommonCollectMaps_safeGetWithJavaUtilMap_withId_(countMap_, element);
  if (existingCounter == nil) {
    return false;
  }
  while (true) {
    jint oldValue = [existingCounter get];
    if (oldValue < occurrences) {
      return false;
    }
    jint newValue = oldValue - occurrences;
    if ([existingCounter compareAndSetWithInt:oldValue withInt:newValue]) {
      if (newValue == 0) {
        [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(countMap_)) removeWithId:element withId:existingCounter];
      }
      return true;
    }
  }
}

- (jint)setCountWithId:(id)element
               withInt:(jint)count {
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(element);
  ComGoogleCommonCollectCollectPreconditions_checkNonnegativeWithInt_withNSString_(count, @"count");
  while (true) {
    JavaUtilConcurrentAtomicAtomicInteger *existingCounter = ComGoogleCommonCollectMaps_safeGetWithJavaUtilMap_withId_(countMap_, element);
    if (existingCounter == nil) {
      if (count == 0) {
        return 0;
      }
      else {
        existingCounter = [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(countMap_)) putIfAbsentWithId:element withId:new_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(count)];
        if (existingCounter == nil) {
          return 0;
        }
      }
    }
    while (true) {
      jint oldValue = [existingCounter get];
      if (oldValue == 0) {
        if (count == 0) {
          return 0;
        }
        else {
          JavaUtilConcurrentAtomicAtomicInteger *newCounter = new_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(count);
          if (([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(countMap_)) putIfAbsentWithId:element withId:newCounter] == nil) || [countMap_ replaceWithId:element withId:existingCounter withId:newCounter]) {
            return 0;
          }
        }
        break;
      }
      else {
        if ([existingCounter compareAndSetWithInt:oldValue withInt:count]) {
          if (count == 0) {
            [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(countMap_)) removeWithId:element withId:existingCounter];
          }
          return oldValue;
        }
      }
    }
  }
}

- (jboolean)setCountWithId:(id)element
                   withInt:(jint)expectedOldCount
                   withInt:(jint)newCount {
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(element);
  ComGoogleCommonCollectCollectPreconditions_checkNonnegativeWithInt_withNSString_(expectedOldCount, @"oldCount");
  ComGoogleCommonCollectCollectPreconditions_checkNonnegativeWithInt_withNSString_(newCount, @"newCount");
  JavaUtilConcurrentAtomicAtomicInteger *existingCounter = ComGoogleCommonCollectMaps_safeGetWithJavaUtilMap_withId_(countMap_, element);
  if (existingCounter == nil) {
    if (expectedOldCount != 0) {
      return false;
    }
    else if (newCount == 0) {
      return true;
    }
    else {
      return [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(countMap_)) putIfAbsentWithId:element withId:new_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(newCount)] == nil;
    }
  }
  jint oldValue = [existingCounter get];
  if (oldValue == expectedOldCount) {
    if (oldValue == 0) {
      if (newCount == 0) {
        [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(countMap_)) removeWithId:element withId:existingCounter];
        return true;
      }
      else {
        JavaUtilConcurrentAtomicAtomicInteger *newCounter = new_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(newCount);
        return ([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(countMap_)) putIfAbsentWithId:element withId:newCounter] == nil) || [countMap_ replaceWithId:element withId:existingCounter withId:newCounter];
      }
    }
    else {
      if ([existingCounter compareAndSetWithInt:oldValue withInt:newCount]) {
        if (newCount == 0) {
          [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(countMap_)) removeWithId:element withId:existingCounter];
        }
        return true;
      }
    }
  }
  return false;
}

- (id<JavaUtilSet>)createElementSet {
  id<JavaUtilSet> delegate = [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(countMap_)) keySet];
  return new_ComGoogleCommonCollectConcurrentHashMultiset_1_initWithJavaUtilSet_(delegate);
}

- (id<JavaUtilSet>)createEntrySet {
  return new_ComGoogleCommonCollectConcurrentHashMultiset_EntrySet_initWithComGoogleCommonCollectConcurrentHashMultiset_(self);
}

- (jint)distinctElements {
  return [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(countMap_)) size];
}

- (jboolean)isEmpty {
  return [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(countMap_)) isEmpty];
}

- (id<JavaUtilIterator>)entryIterator {
  id<JavaUtilIterator> readOnlyIterator = new_ComGoogleCommonCollectConcurrentHashMultiset_2_initWithComGoogleCommonCollectConcurrentHashMultiset_(self);
  return new_ComGoogleCommonCollectConcurrentHashMultiset_3_initWithComGoogleCommonCollectConcurrentHashMultiset_withJavaUtilIterator_(self, readOnlyIterator);
}

- (void)clear {
  [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(countMap_)) clear];
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)stream {
  [((JavaIoObjectOutputStream *) nil_chk(stream)) defaultWriteObject];
  [stream writeObjectWithId:countMap_];
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)stream {
  [((JavaIoObjectInputStream *) nil_chk(stream)) defaultReadObject];
  id<JavaUtilConcurrentConcurrentMap> deserializedCountMap = (id<JavaUtilConcurrentConcurrentMap>) cast_check([stream readObject], JavaUtilConcurrentConcurrentMap_class_());
  [((ComGoogleCommonCollectSerialization_FieldSetter *) nil_chk(JreLoadStatic(ComGoogleCommonCollectConcurrentHashMultiset_FieldSettersHolder, COUNT_MAP_FIELD_SETTER))) setWithId:self withId:deserializedCountMap];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LComGoogleCommonCollectConcurrentHashMultiset;", 0x9, -1, -1, -1, 0, -1, -1 },
    { NULL, "LComGoogleCommonCollectConcurrentHashMultiset;", 0x9, 1, 2, -1, 3, -1, -1 },
    { NULL, "LComGoogleCommonCollectConcurrentHashMultiset;", 0x9, 1, 4, -1, 5, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, 6, -1, -1 },
    { NULL, "I", 0x1, 7, 8, -1, -1, -1, 9 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x1, 10, 11, -1, 12, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, -1, -1, -1, 13, -1, -1 },
    { NULL, "I", 0x1, 14, 15, -1, 16, -1, -1 },
    { NULL, "I", 0x1, 17, 15, -1, -1, -1, 18 },
    { NULL, "Z", 0x1, 19, 15, -1, -1, -1, 20 },
    { NULL, "I", 0x1, 21, 15, -1, 16, -1, -1 },
    { NULL, "Z", 0x1, 21, 22, -1, 23, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x0, -1, -1, -1, 24, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 25, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x0, -1, -1, -1, 26, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 27, 28, 29, -1, -1, -1 },
    { NULL, "V", 0x2, 30, 31, 32, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(create);
  methods[1].selector = @selector(createWithJavaLangIterable:);
  methods[2].selector = @selector(createWithJavaUtilConcurrentConcurrentMap:);
  methods[3].selector = @selector(initWithJavaUtilConcurrentConcurrentMap:);
  methods[4].selector = @selector(countWithId:);
  methods[5].selector = @selector(size);
  methods[6].selector = @selector(toArray);
  methods[7].selector = @selector(toArrayWithNSObjectArray:);
  methods[8].selector = @selector(snapshot);
  methods[9].selector = @selector(addWithId:withInt:);
  methods[10].selector = @selector(removeWithId:withInt:);
  methods[11].selector = @selector(removeExactlyWithId:withInt:);
  methods[12].selector = @selector(setCountWithId:withInt:);
  methods[13].selector = @selector(setCountWithId:withInt:withInt:);
  methods[14].selector = @selector(createElementSet);
  methods[15].selector = @selector(createEntrySet);
  methods[16].selector = @selector(distinctElements);
  methods[17].selector = @selector(isEmpty);
  methods[18].selector = @selector(entryIterator);
  methods[19].selector = @selector(clear);
  methods[20].selector = @selector(writeObjectWithJavaIoObjectOutputStream:);
  methods[21].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "countMap_", "LJavaUtilConcurrentConcurrentMap;", .constantValue.asLong = 0, 0x92, -1, -1, 33, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = ComGoogleCommonCollectConcurrentHashMultiset_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "<E:Ljava/lang/Object;>()Lcom/google/common/collect/ConcurrentHashMultiset<TE;>;", "create", "LJavaLangIterable;", "<E:Ljava/lang/Object;>(Ljava/lang/Iterable<+TE;>;)Lcom/google/common/collect/ConcurrentHashMultiset<TE;>;", "LJavaUtilConcurrentConcurrentMap;", "<E:Ljava/lang/Object;>(Ljava/util/concurrent/ConcurrentMap<TE;Ljava/util/concurrent/atomic/AtomicInteger;>;)Lcom/google/common/collect/ConcurrentHashMultiset<TE;>;", "(Ljava/util/concurrent/ConcurrentMap<TE;Ljava/util/concurrent/atomic/AtomicInteger;>;)V", "count", "LNSObject;", (void *)&ComGoogleCommonCollectConcurrentHashMultiset__Annotations$0, "toArray", "[LNSObject;", "<T:Ljava/lang/Object;>([TT;)[TT;", "()Ljava/util/List<TE;>;", "add", "LNSObject;I", "(TE;I)I", "remove", (void *)&ComGoogleCommonCollectConcurrentHashMultiset__Annotations$1, "removeExactly", (void *)&ComGoogleCommonCollectConcurrentHashMultiset__Annotations$2, "setCount", "LNSObject;II", "(TE;II)Z", "()Ljava/util/Set<TE;>;", "()Ljava/util/Set<Lcom/google/common/collect/Multiset$Entry<TE;>;>;", "()Ljava/util/Iterator<Lcom/google/common/collect/Multiset$Entry<TE;>;>;", "writeObject", "LJavaIoObjectOutputStream;", "LJavaIoIOException;", "readObject", "LJavaIoObjectInputStream;", "LJavaIoIOException;LJavaLangClassNotFoundException;", "Ljava/util/concurrent/ConcurrentMap<TE;Ljava/util/concurrent/atomic/AtomicInteger;>;", "LComGoogleCommonCollectConcurrentHashMultiset_FieldSettersHolder;LComGoogleCommonCollectConcurrentHashMultiset_EntrySet;", "<E:Ljava/lang/Object;>Lcom/google/common/collect/AbstractMultiset<TE;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _ComGoogleCommonCollectConcurrentHashMultiset = { "ConcurrentHashMultiset", "com.google.common.collect", ptrTable, methods, fields, 7, 0x11, 22, 2, -1, 34, -1, 35, -1 };
  return &_ComGoogleCommonCollectConcurrentHashMultiset;
}

@end

ComGoogleCommonCollectConcurrentHashMultiset *ComGoogleCommonCollectConcurrentHashMultiset_create() {
  ComGoogleCommonCollectConcurrentHashMultiset_initialize();
  return new_ComGoogleCommonCollectConcurrentHashMultiset_initWithJavaUtilConcurrentConcurrentMap_(new_JavaUtilConcurrentConcurrentHashMap_init());
}

ComGoogleCommonCollectConcurrentHashMultiset *ComGoogleCommonCollectConcurrentHashMultiset_createWithJavaLangIterable_(id<JavaLangIterable> elements) {
  ComGoogleCommonCollectConcurrentHashMultiset_initialize();
  ComGoogleCommonCollectConcurrentHashMultiset *multiset = ComGoogleCommonCollectConcurrentHashMultiset_create();
  ComGoogleCommonCollectIterables_addAllWithJavaUtilCollection_withJavaLangIterable_(multiset, elements);
  return multiset;
}

ComGoogleCommonCollectConcurrentHashMultiset *ComGoogleCommonCollectConcurrentHashMultiset_createWithJavaUtilConcurrentConcurrentMap_(id<JavaUtilConcurrentConcurrentMap> countMap) {
  ComGoogleCommonCollectConcurrentHashMultiset_initialize();
  return new_ComGoogleCommonCollectConcurrentHashMultiset_initWithJavaUtilConcurrentConcurrentMap_(countMap);
}

void ComGoogleCommonCollectConcurrentHashMultiset_initWithJavaUtilConcurrentConcurrentMap_(ComGoogleCommonCollectConcurrentHashMultiset *self, id<JavaUtilConcurrentConcurrentMap> countMap) {
  ComGoogleCommonCollectAbstractMultiset_init(self);
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(countMap)) isEmpty], @"the backing map (%s) must be empty", countMap);
  self->countMap_ = countMap;
}

ComGoogleCommonCollectConcurrentHashMultiset *new_ComGoogleCommonCollectConcurrentHashMultiset_initWithJavaUtilConcurrentConcurrentMap_(id<JavaUtilConcurrentConcurrentMap> countMap) {
  J2OBJC_NEW_IMPL(ComGoogleCommonCollectConcurrentHashMultiset, initWithJavaUtilConcurrentConcurrentMap_, countMap)
}

ComGoogleCommonCollectConcurrentHashMultiset *create_ComGoogleCommonCollectConcurrentHashMultiset_initWithJavaUtilConcurrentConcurrentMap_(id<JavaUtilConcurrentConcurrentMap> countMap) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonCollectConcurrentHashMultiset, initWithJavaUtilConcurrentConcurrentMap_, countMap)
}

id<JavaUtilList> ComGoogleCommonCollectConcurrentHashMultiset_snapshot(ComGoogleCommonCollectConcurrentHashMultiset *self) {
  id<JavaUtilList> list = ComGoogleCommonCollectLists_newArrayListWithExpectedSizeWithInt_([self size]);
  for (id<ComGoogleCommonCollectMultiset_Entry> __strong entry_ in nil_chk([self entrySet])) {
    id element = [((id<ComGoogleCommonCollectMultiset_Entry>) nil_chk(entry_)) getElement];
    for (jint i = [entry_ getCount]; i > 0; i--) {
      [((id<JavaUtilList>) nil_chk(list)) addWithId:element];
    }
  }
  return list;
}

IOSObjectArray *ComGoogleCommonCollectConcurrentHashMultiset__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonCollectConcurrentHashMultiset__Annotations$1() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()] } count:2 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonCollectConcurrentHashMultiset__Annotations$2() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()] } count:2 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonCollectConcurrentHashMultiset)

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonCollectConcurrentHashMultiset_FieldSettersHolder)

@implementation ComGoogleCommonCollectConcurrentHashMultiset_FieldSettersHolder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonCollectConcurrentHashMultiset_FieldSettersHolder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "COUNT_MAP_FIELD_SETTER", "LComGoogleCommonCollectSerialization_FieldSetter;", .constantValue.asLong = 0, 0x18, -1, 0, 1, -1 },
  };
  static const void *ptrTable[] = { &ComGoogleCommonCollectConcurrentHashMultiset_FieldSettersHolder_COUNT_MAP_FIELD_SETTER, "Lcom/google/common/collect/Serialization$FieldSetter<Lcom/google/common/collect/ConcurrentHashMultiset;>;", "LComGoogleCommonCollectConcurrentHashMultiset;" };
  static const J2ObjcClassInfo _ComGoogleCommonCollectConcurrentHashMultiset_FieldSettersHolder = { "FieldSettersHolder", "com.google.common.collect", ptrTable, methods, fields, 7, 0xa, 1, 1, 2, -1, -1, -1, -1 };
  return &_ComGoogleCommonCollectConcurrentHashMultiset_FieldSettersHolder;
}

+ (void)initialize {
  if (self == [ComGoogleCommonCollectConcurrentHashMultiset_FieldSettersHolder class]) {
    ComGoogleCommonCollectConcurrentHashMultiset_FieldSettersHolder_COUNT_MAP_FIELD_SETTER = ComGoogleCommonCollectSerialization_getFieldSetterWithIOSClass_withNSString_(ComGoogleCommonCollectConcurrentHashMultiset_class_(), @"countMap");
    J2OBJC_SET_INITIALIZED(ComGoogleCommonCollectConcurrentHashMultiset_FieldSettersHolder)
  }
}

@end

void ComGoogleCommonCollectConcurrentHashMultiset_FieldSettersHolder_init(ComGoogleCommonCollectConcurrentHashMultiset_FieldSettersHolder *self) {
  NSObject_init(self);
}

ComGoogleCommonCollectConcurrentHashMultiset_FieldSettersHolder *new_ComGoogleCommonCollectConcurrentHashMultiset_FieldSettersHolder_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonCollectConcurrentHashMultiset_FieldSettersHolder, init)
}

ComGoogleCommonCollectConcurrentHashMultiset_FieldSettersHolder *create_ComGoogleCommonCollectConcurrentHashMultiset_FieldSettersHolder_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonCollectConcurrentHashMultiset_FieldSettersHolder, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonCollectConcurrentHashMultiset_FieldSettersHolder)

@implementation ComGoogleCommonCollectConcurrentHashMultiset_1

- (instancetype)initWithJavaUtilSet:(id<JavaUtilSet>)capture$0 {
  ComGoogleCommonCollectConcurrentHashMultiset_1_initWithJavaUtilSet_(self, capture$0);
  return self;
}

- (id<JavaUtilSet>)delegate {
  return val$delegate_;
}

- (jboolean)containsWithId:(id)object {
  return object != nil && ComGoogleCommonCollectCollections2_safeContainsWithJavaUtilCollection_withId_(val$delegate_, object);
}

- (jboolean)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  return [self standardContainsAllWithJavaUtilCollection:collection];
}

- (jboolean)removeWithId:(id)object {
  return object != nil && ComGoogleCommonCollectCollections2_safeRemoveWithJavaUtilCollection_withId_(val$delegate_, object);
}

- (jboolean)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  return [self standardRemoveAllWithJavaUtilCollection:c];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x4, -1, -1, -1, 0, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, 3 },
    { NULL, "Z", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "Z", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 5, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilSet:);
  methods[1].selector = @selector(delegate);
  methods[2].selector = @selector(containsWithId:);
  methods[3].selector = @selector(containsAllWithJavaUtilCollection:);
  methods[4].selector = @selector(removeWithId:);
  methods[5].selector = @selector(removeAllWithJavaUtilCollection:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$delegate_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x1012, -1, -1, 9, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Set<TE;>;", "contains", "LNSObject;", (void *)&ComGoogleCommonCollectConcurrentHashMultiset_1__Annotations$0, "containsAll", "LJavaUtilCollection;", "(Ljava/util/Collection<*>;)Z", "remove", "removeAll", "Ljava/util/Set<TE;>;", "LComGoogleCommonCollectConcurrentHashMultiset;", "createElementSet", "Lcom/google/common/collect/ForwardingSet<TE;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonCollectConcurrentHashMultiset_1 = { "", "com.google.common.collect", ptrTable, methods, fields, 7, 0x8018, 6, 1, 10, -1, 11, 12, -1 };
  return &_ComGoogleCommonCollectConcurrentHashMultiset_1;
}

@end

void ComGoogleCommonCollectConcurrentHashMultiset_1_initWithJavaUtilSet_(ComGoogleCommonCollectConcurrentHashMultiset_1 *self, id<JavaUtilSet> capture$0) {
  self->val$delegate_ = capture$0;
  ComGoogleCommonCollectForwardingSet_init(self);
}

ComGoogleCommonCollectConcurrentHashMultiset_1 *new_ComGoogleCommonCollectConcurrentHashMultiset_1_initWithJavaUtilSet_(id<JavaUtilSet> capture$0) {
  J2OBJC_NEW_IMPL(ComGoogleCommonCollectConcurrentHashMultiset_1, initWithJavaUtilSet_, capture$0)
}

ComGoogleCommonCollectConcurrentHashMultiset_1 *create_ComGoogleCommonCollectConcurrentHashMultiset_1_initWithJavaUtilSet_(id<JavaUtilSet> capture$0) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonCollectConcurrentHashMultiset_1, initWithJavaUtilSet_, capture$0)
}

IOSObjectArray *ComGoogleCommonCollectConcurrentHashMultiset_1__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

@implementation ComGoogleCommonCollectConcurrentHashMultiset_2

- (instancetype)initWithComGoogleCommonCollectConcurrentHashMultiset:(ComGoogleCommonCollectConcurrentHashMultiset *)outer$ {
  ComGoogleCommonCollectConcurrentHashMultiset_2_initWithComGoogleCommonCollectConcurrentHashMultiset_(self, outer$);
  return self;
}

- (id<ComGoogleCommonCollectMultiset_Entry>)computeNext {
  while (true) {
    if (![((id<JavaUtilIterator>) nil_chk(mapEntries_)) hasNext]) {
      return [self endOfData];
    }
    id<JavaUtilMap_Entry> mapEntry = [mapEntries_ next];
    jint count = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(mapEntry)) getValue])) get];
    if (count != 0) {
      return ComGoogleCommonCollectMultisets_immutableEntryWithId_withInt_([mapEntry getKey], count);
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonCollectMultiset_Entry;", 0x4, -1, -1, -1, 0, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonCollectConcurrentHashMultiset:);
  methods[1].selector = @selector(computeNext);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapEntries_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x12, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Lcom/google/common/collect/Multiset$Entry<TE;>;", "Ljava/util/Iterator<Ljava/util/Map$Entry<TE;Ljava/util/concurrent/atomic/AtomicInteger;>;>;", "LComGoogleCommonCollectConcurrentHashMultiset;", "entryIterator", "Lcom/google/common/collect/AbstractIterator<Lcom/google/common/collect/Multiset$Entry<TE;>;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonCollectConcurrentHashMultiset_2 = { "", "com.google.common.collect", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, 3, 4, -1 };
  return &_ComGoogleCommonCollectConcurrentHashMultiset_2;
}

@end

void ComGoogleCommonCollectConcurrentHashMultiset_2_initWithComGoogleCommonCollectConcurrentHashMultiset_(ComGoogleCommonCollectConcurrentHashMultiset_2 *self, ComGoogleCommonCollectConcurrentHashMultiset *outer$) {
  ComGoogleCommonCollectAbstractIterator_init(self);
  self->mapEntries_ = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(outer$->countMap_)) entrySet])) iterator];
}

ComGoogleCommonCollectConcurrentHashMultiset_2 *new_ComGoogleCommonCollectConcurrentHashMultiset_2_initWithComGoogleCommonCollectConcurrentHashMultiset_(ComGoogleCommonCollectConcurrentHashMultiset *outer$) {
  J2OBJC_NEW_IMPL(ComGoogleCommonCollectConcurrentHashMultiset_2, initWithComGoogleCommonCollectConcurrentHashMultiset_, outer$)
}

ComGoogleCommonCollectConcurrentHashMultiset_2 *create_ComGoogleCommonCollectConcurrentHashMultiset_2_initWithComGoogleCommonCollectConcurrentHashMultiset_(ComGoogleCommonCollectConcurrentHashMultiset *outer$) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonCollectConcurrentHashMultiset_2, initWithComGoogleCommonCollectConcurrentHashMultiset_, outer$)
}

@implementation ComGoogleCommonCollectConcurrentHashMultiset_3

- (instancetype)initWithComGoogleCommonCollectConcurrentHashMultiset:(ComGoogleCommonCollectConcurrentHashMultiset *)outer$
                                                withJavaUtilIterator:(id<JavaUtilIterator>)capture$0 {
  ComGoogleCommonCollectConcurrentHashMultiset_3_initWithComGoogleCommonCollectConcurrentHashMultiset_withJavaUtilIterator_(self, outer$, capture$0);
  return self;
}

- (id<JavaUtilIterator>)delegate {
  return val$readOnlyIterator_;
}

- (id<ComGoogleCommonCollectMultiset_Entry>)next {
  last_ = [super next];
  return last_;
}

- (void)remove {
  ComGoogleCommonCollectCollectPreconditions_checkRemoveWithBoolean_(last_ != nil);
  [this$0_ setCountWithId:[((id<ComGoogleCommonCollectMultiset_Entry>) nil_chk(last_)) getElement] withInt:0];
  last_ = nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x4, -1, -1, -1, 0, -1, -1 },
    { NULL, "LComGoogleCommonCollectMultiset_Entry;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonCollectConcurrentHashMultiset:withJavaUtilIterator:);
  methods[1].selector = @selector(delegate);
  methods[2].selector = @selector(next);
  methods[3].selector = @selector(remove);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonCollectConcurrentHashMultiset;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
    { "val$readOnlyIterator_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
    { "last_", "LComGoogleCommonCollectMultiset_Entry;", .constantValue.asLong = 0, 0x2, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Iterator<Lcom/google/common/collect/Multiset$Entry<TE;>;>;", "()Lcom/google/common/collect/Multiset$Entry<TE;>;", "Lcom/google/common/collect/ConcurrentHashMultiset<TE;>;", "Ljava/util/Iterator<Lcom/google/common/collect/Multiset$Entry<TE;>;>;", "Lcom/google/common/collect/Multiset$Entry<TE;>;", "LComGoogleCommonCollectConcurrentHashMultiset;", "entryIterator", "Lcom/google/common/collect/ForwardingIterator<Lcom/google/common/collect/Multiset$Entry<TE;>;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonCollectConcurrentHashMultiset_3 = { "", "com.google.common.collect", ptrTable, methods, fields, 7, 0x8018, 4, 3, 5, -1, 6, 7, -1 };
  return &_ComGoogleCommonCollectConcurrentHashMultiset_3;
}

@end

void ComGoogleCommonCollectConcurrentHashMultiset_3_initWithComGoogleCommonCollectConcurrentHashMultiset_withJavaUtilIterator_(ComGoogleCommonCollectConcurrentHashMultiset_3 *self, ComGoogleCommonCollectConcurrentHashMultiset *outer$, id<JavaUtilIterator> capture$0) {
  self->this$0_ = outer$;
  self->val$readOnlyIterator_ = capture$0;
  ComGoogleCommonCollectForwardingIterator_init(self);
}

ComGoogleCommonCollectConcurrentHashMultiset_3 *new_ComGoogleCommonCollectConcurrentHashMultiset_3_initWithComGoogleCommonCollectConcurrentHashMultiset_withJavaUtilIterator_(ComGoogleCommonCollectConcurrentHashMultiset *outer$, id<JavaUtilIterator> capture$0) {
  J2OBJC_NEW_IMPL(ComGoogleCommonCollectConcurrentHashMultiset_3, initWithComGoogleCommonCollectConcurrentHashMultiset_withJavaUtilIterator_, outer$, capture$0)
}

ComGoogleCommonCollectConcurrentHashMultiset_3 *create_ComGoogleCommonCollectConcurrentHashMultiset_3_initWithComGoogleCommonCollectConcurrentHashMultiset_withJavaUtilIterator_(ComGoogleCommonCollectConcurrentHashMultiset *outer$, id<JavaUtilIterator> capture$0) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonCollectConcurrentHashMultiset_3, initWithComGoogleCommonCollectConcurrentHashMultiset_withJavaUtilIterator_, outer$, capture$0)
}

@implementation ComGoogleCommonCollectConcurrentHashMultiset_EntrySet

- (instancetype)initWithComGoogleCommonCollectConcurrentHashMultiset:(ComGoogleCommonCollectConcurrentHashMultiset *)outer$ {
  ComGoogleCommonCollectConcurrentHashMultiset_EntrySet_initWithComGoogleCommonCollectConcurrentHashMultiset_(self, outer$);
  return self;
}

- (ComGoogleCommonCollectConcurrentHashMultiset *)multiset {
  return this$1_;
}

- (IOSObjectArray *)toArray {
  return [((id<JavaUtilList>) nil_chk(ComGoogleCommonCollectConcurrentHashMultiset_EntrySet_snapshot(self))) toArray];
}

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)array {
  return [((id<JavaUtilList>) nil_chk(ComGoogleCommonCollectConcurrentHashMultiset_EntrySet_snapshot(self))) toArrayWithNSObjectArray:array];
}

- (id<JavaUtilList>)snapshot {
  return ComGoogleCommonCollectConcurrentHashMultiset_EntrySet_snapshot(self);
}

- (void)__javaClone:(ComGoogleCommonCollectConcurrentHashMultiset_EntrySet *)original {
  [super __javaClone:original];
  JreRelease(this$1_);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonCollectConcurrentHashMultiset;", 0x0, -1, -1, -1, 0, -1, -1 },
    { NULL, "[LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, -1, -1, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonCollectConcurrentHashMultiset:);
  methods[1].selector = @selector(multiset);
  methods[2].selector = @selector(toArray);
  methods[3].selector = @selector(toArrayWithNSObjectArray:);
  methods[4].selector = @selector(snapshot);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$1_", "LComGoogleCommonCollectConcurrentHashMultiset;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "()Lcom/google/common/collect/ConcurrentHashMultiset<TE;>;", "toArray", "[LNSObject;", "<T:Ljava/lang/Object;>([TT;)[TT;", "()Ljava/util/List<Lcom/google/common/collect/Multiset$Entry<TE;>;>;", "Lcom/google/common/collect/ConcurrentHashMultiset<TE;>;", "LComGoogleCommonCollectConcurrentHashMultiset;" };
  static const J2ObjcClassInfo _ComGoogleCommonCollectConcurrentHashMultiset_EntrySet = { "EntrySet", "com.google.common.collect", ptrTable, methods, fields, 7, 0x2, 5, 1, 6, -1, -1, -1, -1 };
  return &_ComGoogleCommonCollectConcurrentHashMultiset_EntrySet;
}

@end

void ComGoogleCommonCollectConcurrentHashMultiset_EntrySet_initWithComGoogleCommonCollectConcurrentHashMultiset_(ComGoogleCommonCollectConcurrentHashMultiset_EntrySet *self, ComGoogleCommonCollectConcurrentHashMultiset *outer$) {
  self->this$1_ = outer$;
  ComGoogleCommonCollectAbstractMultiset_EntrySet_initWithComGoogleCommonCollectAbstractMultiset_(self, outer$);
}

ComGoogleCommonCollectConcurrentHashMultiset_EntrySet *new_ComGoogleCommonCollectConcurrentHashMultiset_EntrySet_initWithComGoogleCommonCollectConcurrentHashMultiset_(ComGoogleCommonCollectConcurrentHashMultiset *outer$) {
  J2OBJC_NEW_IMPL(ComGoogleCommonCollectConcurrentHashMultiset_EntrySet, initWithComGoogleCommonCollectConcurrentHashMultiset_, outer$)
}

ComGoogleCommonCollectConcurrentHashMultiset_EntrySet *create_ComGoogleCommonCollectConcurrentHashMultiset_EntrySet_initWithComGoogleCommonCollectConcurrentHashMultiset_(ComGoogleCommonCollectConcurrentHashMultiset *outer$) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonCollectConcurrentHashMultiset_EntrySet, initWithComGoogleCommonCollectConcurrentHashMultiset_, outer$)
}

id<JavaUtilList> ComGoogleCommonCollectConcurrentHashMultiset_EntrySet_snapshot(ComGoogleCommonCollectConcurrentHashMultiset_EntrySet *self) {
  id<JavaUtilList> list = ComGoogleCommonCollectLists_newArrayListWithExpectedSizeWithInt_([self size]);
  ComGoogleCommonCollectIterators_addAllWithJavaUtilCollection_withJavaUtilIterator_(list, [self iterator]);
  return list;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonCollectConcurrentHashMultiset_EntrySet)
