//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/collect/RegularImmutableSet.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/collect/Hashing.h"
#include "com/google/common/collect/ImmutableList.h"
#include "com/google/common/collect/ImmutableSet.h"
#include "com/google/common/collect/Iterators.h"
#include "com/google/common/collect/RegularImmutableAsList.h"
#include "com/google/common/collect/RegularImmutableSet.h"
#include "com/google/common/collect/UnmodifiableIterator.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Spliterator.h"
#include "java/util/Spliterators.h"
#include "javax/annotation/Nullable.h"

@interface ComGoogleCommonCollectRegularImmutableSet () {
 @public
  IOSObjectArray *elements_;
  jint mask_;
  jint hashCode_;
}

@end

J2OBJC_FIELD_SETTER(ComGoogleCommonCollectRegularImmutableSet, elements_, IOSObjectArray *)

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonCollectRegularImmutableSet__Annotations$0();

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonCollectRegularImmutableSet)

ComGoogleCommonCollectRegularImmutableSet *ComGoogleCommonCollectRegularImmutableSet_EMPTY;

@implementation ComGoogleCommonCollectRegularImmutableSet

- (instancetype)initWithNSObjectArray:(IOSObjectArray *)elements
                              withInt:(jint)hashCode
                    withNSObjectArray:(IOSObjectArray *)table
                              withInt:(jint)mask {
  ComGoogleCommonCollectRegularImmutableSet_initWithNSObjectArray_withInt_withNSObjectArray_withInt_(self, elements, hashCode, table, mask);
  return self;
}

- (jboolean)containsWithId:(id)target {
  IOSObjectArray *table = self->table_;
  if (target == nil || table == nil) {
    return false;
  }
  for (jint i = ComGoogleCommonCollectHashing_smearedHashWithId_(target); ; i++) {
    i &= mask_;
    id candidate = IOSObjectArray_Get(table, i);
    if (candidate == nil) {
      return false;
    }
    else if ([candidate isEqual:target]) {
      return true;
    }
  }
}

- (jint)size {
  return ((IOSObjectArray *) nil_chk(elements_))->size_;
}

- (ComGoogleCommonCollectUnmodifiableIterator *)iterator {
  return ComGoogleCommonCollectIterators_forArrayWithNSObjectArray_(elements_);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaUtilSpliterators_spliteratorWithNSObjectArray_withInt_(elements_, ComGoogleCommonCollectImmutableSet_SPLITERATOR_CHARACTERISTICS);
}

- (jint)copyIntoArrayWithNSObjectArray:(IOSObjectArray *)dst
                               withInt:(jint)offset {
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(elements_, 0, dst, offset, ((IOSObjectArray *) nil_chk(elements_))->size_);
  return offset + elements_->size_;
}

- (ComGoogleCommonCollectImmutableList *)createAsList {
  return (table_ == nil) ? ComGoogleCommonCollectImmutableList_of() : new_ComGoogleCommonCollectRegularImmutableAsList_initWithComGoogleCommonCollectImmutableCollection_withNSObjectArray_(self, elements_);
}

- (jboolean)isPartialView {
  return false;
}

- (NSUInteger)hash {
  return hashCode_;
}

- (jboolean)isHashCodeFast {
  return true;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, 3 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonCollectUnmodifiableIterator;", 0x1, -1, -1, -1, 4, -1, -1 },
    { NULL, "LJavaUtilSpliterator;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "I", 0x0, 6, 7, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonCollectImmutableList;", 0x0, -1, -1, -1, 8, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSObjectArray:withInt:withNSObjectArray:withInt:);
  methods[1].selector = @selector(containsWithId:);
  methods[2].selector = @selector(size);
  methods[3].selector = @selector(iterator);
  methods[4].selector = @selector(spliterator);
  methods[5].selector = @selector(copyIntoArrayWithNSObjectArray:withInt:);
  methods[6].selector = @selector(createAsList);
  methods[7].selector = @selector(isPartialView);
  methods[8].selector = @selector(hash);
  methods[9].selector = @selector(isHashCodeFast);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY", "LComGoogleCommonCollectRegularImmutableSet;", .constantValue.asLong = 0, 0x18, -1, 10, 11, -1 },
    { "elements_", "[LNSObject;", .constantValue.asLong = 0, 0x92, -1, -1, -1, -1 },
    { "table_", "[LNSObject;", .constantValue.asLong = 0, 0x90, -1, -1, -1, -1 },
    { "mask_", "I", .constantValue.asLong = 0, 0x92, -1, -1, -1, -1 },
    { "hashCode_", "I", .constantValue.asLong = 0, 0x92, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LNSObject;I[LNSObject;I", "contains", "LNSObject;", (void *)&ComGoogleCommonCollectRegularImmutableSet__Annotations$0, "()Lcom/google/common/collect/UnmodifiableIterator<TE;>;", "()Ljava/util/Spliterator<TE;>;", "copyIntoArray", "[LNSObject;I", "()Lcom/google/common/collect/ImmutableList<TE;>;", "hashCode", &ComGoogleCommonCollectRegularImmutableSet_EMPTY, "Lcom/google/common/collect/RegularImmutableSet<Ljava/lang/Object;>;", "<E:Ljava/lang/Object;>Lcom/google/common/collect/ImmutableSet<TE;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonCollectRegularImmutableSet = { "RegularImmutableSet", "com.google.common.collect", ptrTable, methods, fields, 7, 0x10, 10, 5, -1, -1, -1, 12, -1 };
  return &_ComGoogleCommonCollectRegularImmutableSet;
}

+ (void)initialize {
  if (self == [ComGoogleCommonCollectRegularImmutableSet class]) {
    ComGoogleCommonCollectRegularImmutableSet_EMPTY = new_ComGoogleCommonCollectRegularImmutableSet_initWithNSObjectArray_withInt_withNSObjectArray_withInt_([IOSObjectArray newArrayWithLength:0 type:NSObject_class_()], 0, nil, 0);
    J2OBJC_SET_INITIALIZED(ComGoogleCommonCollectRegularImmutableSet)
  }
}

@end

void ComGoogleCommonCollectRegularImmutableSet_initWithNSObjectArray_withInt_withNSObjectArray_withInt_(ComGoogleCommonCollectRegularImmutableSet *self, IOSObjectArray *elements, jint hashCode, IOSObjectArray *table, jint mask) {
  ComGoogleCommonCollectImmutableSet_init(self);
  self->elements_ = elements;
  self->table_ = table;
  self->mask_ = mask;
  self->hashCode_ = hashCode;
}

ComGoogleCommonCollectRegularImmutableSet *new_ComGoogleCommonCollectRegularImmutableSet_initWithNSObjectArray_withInt_withNSObjectArray_withInt_(IOSObjectArray *elements, jint hashCode, IOSObjectArray *table, jint mask) {
  J2OBJC_NEW_IMPL(ComGoogleCommonCollectRegularImmutableSet, initWithNSObjectArray_withInt_withNSObjectArray_withInt_, elements, hashCode, table, mask)
}

ComGoogleCommonCollectRegularImmutableSet *create_ComGoogleCommonCollectRegularImmutableSet_initWithNSObjectArray_withInt_withNSObjectArray_withInt_(IOSObjectArray *elements, jint hashCode, IOSObjectArray *table, jint mask) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonCollectRegularImmutableSet, initWithNSObjectArray_withInt_withNSObjectArray_withInt_, elements, hashCode, table, mask)
}

IOSObjectArray *ComGoogleCommonCollectRegularImmutableSet__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonCollectRegularImmutableSet)
