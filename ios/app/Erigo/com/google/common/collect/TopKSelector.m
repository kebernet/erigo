//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/collect/TopKSelector.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/collect/Ordering.h"
#include "com/google/common/collect/TopKSelector.h"
#include "com/google/common/math/IntMath.h"
#include "java/lang/Iterable.h"
#include "java/lang/Math.h"
#include "java/lang/annotation/Annotation.h"
#include "java/math/RoundingMode.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "javax/annotation/Nullable.h"

@interface ComGoogleCommonCollectTopKSelector () {
 @public
  jint k_;
  id<JavaUtilComparator> comparator_;
  IOSObjectArray *buffer_;
  jint bufferSize_;
  id threshold_;
}

- (instancetype)initWithJavaUtilComparator:(id<JavaUtilComparator>)comparator
                                   withInt:(jint)k;

- (void)trim;

- (jint)partitionWithInt:(jint)left
                 withInt:(jint)right
                 withInt:(jint)pivotIndex;

- (void)swapWithInt:(jint)i
            withInt:(jint)j;

@end

J2OBJC_FIELD_SETTER(ComGoogleCommonCollectTopKSelector, comparator_, id<JavaUtilComparator>)
J2OBJC_FIELD_SETTER(ComGoogleCommonCollectTopKSelector, buffer_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComGoogleCommonCollectTopKSelector, threshold_, id)

__attribute__((unused)) static void ComGoogleCommonCollectTopKSelector_initWithJavaUtilComparator_withInt_(ComGoogleCommonCollectTopKSelector *self, id<JavaUtilComparator> comparator, jint k);

__attribute__((unused)) static ComGoogleCommonCollectTopKSelector *new_ComGoogleCommonCollectTopKSelector_initWithJavaUtilComparator_withInt_(id<JavaUtilComparator> comparator, jint k) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonCollectTopKSelector *create_ComGoogleCommonCollectTopKSelector_initWithJavaUtilComparator_withInt_(id<JavaUtilComparator> comparator, jint k);

__attribute__((unused)) static void ComGoogleCommonCollectTopKSelector_trim(ComGoogleCommonCollectTopKSelector *self);

__attribute__((unused)) static jint ComGoogleCommonCollectTopKSelector_partitionWithInt_withInt_withInt_(ComGoogleCommonCollectTopKSelector *self, jint left, jint right, jint pivotIndex);

__attribute__((unused)) static void ComGoogleCommonCollectTopKSelector_swapWithInt_withInt_(ComGoogleCommonCollectTopKSelector *self, jint i, jint j);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonCollectTopKSelector__Annotations$0();

@implementation ComGoogleCommonCollectTopKSelector

+ (ComGoogleCommonCollectTopKSelector *)leastWithInt:(jint)k {
  return ComGoogleCommonCollectTopKSelector_leastWithInt_(k);
}

+ (ComGoogleCommonCollectTopKSelector *)greatestWithInt:(jint)k {
  return ComGoogleCommonCollectTopKSelector_greatestWithInt_(k);
}

+ (ComGoogleCommonCollectTopKSelector *)leastWithInt:(jint)k
                              withJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  return ComGoogleCommonCollectTopKSelector_leastWithInt_withJavaUtilComparator_(k, comparator);
}

+ (ComGoogleCommonCollectTopKSelector *)greatestWithInt:(jint)k
                                 withJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  return ComGoogleCommonCollectTopKSelector_greatestWithInt_withJavaUtilComparator_(k, comparator);
}

- (instancetype)initWithJavaUtilComparator:(id<JavaUtilComparator>)comparator
                                   withInt:(jint)k {
  ComGoogleCommonCollectTopKSelector_initWithJavaUtilComparator_withInt_(self, comparator, k);
  return self;
}

- (void)offerWithId:(id)elem {
  if (k_ == 0) {
    return;
  }
  else if (bufferSize_ == 0) {
    (void) IOSObjectArray_Set(nil_chk(buffer_), 0, elem);
    threshold_ = elem;
    bufferSize_ = 1;
  }
  else if (bufferSize_ < k_) {
    (void) IOSObjectArray_Set(nil_chk(buffer_), bufferSize_++, elem);
    if ([((id<JavaUtilComparator>) nil_chk(comparator_)) compareWithId:elem withId:threshold_] > 0) {
      threshold_ = elem;
    }
  }
  else if ([((id<JavaUtilComparator>) nil_chk(comparator_)) compareWithId:elem withId:threshold_] < 0) {
    (void) IOSObjectArray_Set(nil_chk(buffer_), bufferSize_++, elem);
    if (bufferSize_ == 2 * k_) {
      ComGoogleCommonCollectTopKSelector_trim(self);
    }
  }
}

- (void)trim {
  ComGoogleCommonCollectTopKSelector_trim(self);
}

- (jint)partitionWithInt:(jint)left
                 withInt:(jint)right
                 withInt:(jint)pivotIndex {
  return ComGoogleCommonCollectTopKSelector_partitionWithInt_withInt_withInt_(self, left, right, pivotIndex);
}

- (void)swapWithInt:(jint)i
            withInt:(jint)j {
  ComGoogleCommonCollectTopKSelector_swapWithInt_withInt_(self, i, j);
}

- (ComGoogleCommonCollectTopKSelector *)combineWithComGoogleCommonCollectTopKSelector:(ComGoogleCommonCollectTopKSelector *)other {
  for (jint i = 0; i < ((ComGoogleCommonCollectTopKSelector *) nil_chk(other))->bufferSize_; i++) {
    [self offerWithId:IOSObjectArray_Get(nil_chk(other->buffer_), i)];
  }
  return self;
}

- (void)offerAllWithJavaLangIterable:(id<JavaLangIterable>)elements {
  [self offerAllWithJavaUtilIterator:[((id<JavaLangIterable>) nil_chk(elements)) iterator]];
}

- (void)offerAllWithJavaUtilIterator:(id<JavaUtilIterator>)elements {
  while ([((id<JavaUtilIterator>) nil_chk(elements)) hasNext]) {
    [self offerWithId:[elements next]];
  }
}

- (id<JavaUtilList>)topK {
  JavaUtilArrays_sortWithNSObjectArray_withInt_withInt_withJavaUtilComparator_(buffer_, 0, bufferSize_, comparator_);
  if (bufferSize_ > k_) {
    JavaUtilArrays_fillWithNSObjectArray_withInt_withInt_withId_(buffer_, k_, ((IOSObjectArray *) nil_chk(buffer_))->size_, nil);
    bufferSize_ = k_;
    threshold_ = IOSObjectArray_Get(buffer_, k_ - 1);
  }
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(JavaUtilArrays_asListWithNSObjectArray_(JavaUtilArrays_copyOfWithNSObjectArray_withInt_(buffer_, bufferSize_)));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LComGoogleCommonCollectTopKSelector;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "LComGoogleCommonCollectTopKSelector;", 0x9, 3, 1, -1, 2, -1, -1 },
    { NULL, "LComGoogleCommonCollectTopKSelector;", 0x9, 0, 4, -1, 5, -1, -1 },
    { NULL, "LComGoogleCommonCollectTopKSelector;", 0x9, 3, 4, -1, 5, -1, -1 },
    { NULL, NULL, 0x2, -1, 6, -1, 7, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, 10, -1, 11 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 15, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonCollectTopKSelector;", 0x0, 16, 17, -1, 18, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, 21, -1, -1 },
    { NULL, "V", 0x1, 19, 22, -1, 23, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 24, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(leastWithInt:);
  methods[1].selector = @selector(greatestWithInt:);
  methods[2].selector = @selector(leastWithInt:withJavaUtilComparator:);
  methods[3].selector = @selector(greatestWithInt:withJavaUtilComparator:);
  methods[4].selector = @selector(initWithJavaUtilComparator:withInt:);
  methods[5].selector = @selector(offerWithId:);
  methods[6].selector = @selector(trim);
  methods[7].selector = @selector(partitionWithInt:withInt:withInt:);
  methods[8].selector = @selector(swapWithInt:withInt:);
  methods[9].selector = @selector(combineWithComGoogleCommonCollectTopKSelector:);
  methods[10].selector = @selector(offerAllWithJavaLangIterable:);
  methods[11].selector = @selector(offerAllWithJavaUtilIterator:);
  methods[12].selector = @selector(topK);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "k_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "comparator_", "LJavaUtilComparator;", .constantValue.asLong = 0, 0x12, -1, -1, 25, -1 },
    { "buffer_", "[LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, 26, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "threshold_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, 27, -1 },
  };
  static const void *ptrTable[] = { "least", "I", "<T::Ljava/lang/Comparable<-TT;>;>(I)Lcom/google/common/collect/TopKSelector<TT;>;", "greatest", "ILJavaUtilComparator;", "<T:Ljava/lang/Object;>(ILjava/util/Comparator<-TT;>;)Lcom/google/common/collect/TopKSelector<TT;>;", "LJavaUtilComparator;I", "(Ljava/util/Comparator<-TT;>;I)V", "offer", "LNSObject;", "(TT;)V", (void *)&ComGoogleCommonCollectTopKSelector__Annotations$0, "partition", "III", "swap", "II", "combine", "LComGoogleCommonCollectTopKSelector;", "(Lcom/google/common/collect/TopKSelector<TT;>;)Lcom/google/common/collect/TopKSelector<TT;>;", "offerAll", "LJavaLangIterable;", "(Ljava/lang/Iterable<+TT;>;)V", "LJavaUtilIterator;", "(Ljava/util/Iterator<+TT;>;)V", "()Ljava/util/List<TT;>;", "Ljava/util/Comparator<-TT;>;", "[TT;", "TT;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _ComGoogleCommonCollectTopKSelector = { "TopKSelector", "com.google.common.collect", ptrTable, methods, fields, 7, 0x10, 13, 5, -1, -1, -1, 28, -1 };
  return &_ComGoogleCommonCollectTopKSelector;
}

@end

ComGoogleCommonCollectTopKSelector *ComGoogleCommonCollectTopKSelector_leastWithInt_(jint k) {
  ComGoogleCommonCollectTopKSelector_initialize();
  return ComGoogleCommonCollectTopKSelector_leastWithInt_withJavaUtilComparator_(k, ComGoogleCommonCollectOrdering_natural());
}

ComGoogleCommonCollectTopKSelector *ComGoogleCommonCollectTopKSelector_greatestWithInt_(jint k) {
  ComGoogleCommonCollectTopKSelector_initialize();
  return ComGoogleCommonCollectTopKSelector_greatestWithInt_withJavaUtilComparator_(k, ComGoogleCommonCollectOrdering_natural());
}

ComGoogleCommonCollectTopKSelector *ComGoogleCommonCollectTopKSelector_leastWithInt_withJavaUtilComparator_(jint k, id<JavaUtilComparator> comparator) {
  ComGoogleCommonCollectTopKSelector_initialize();
  return new_ComGoogleCommonCollectTopKSelector_initWithJavaUtilComparator_withInt_(comparator, k);
}

ComGoogleCommonCollectTopKSelector *ComGoogleCommonCollectTopKSelector_greatestWithInt_withJavaUtilComparator_(jint k, id<JavaUtilComparator> comparator) {
  ComGoogleCommonCollectTopKSelector_initialize();
  return new_ComGoogleCommonCollectTopKSelector_initWithJavaUtilComparator_withInt_([((ComGoogleCommonCollectOrdering *) nil_chk(ComGoogleCommonCollectOrdering_fromWithJavaUtilComparator_(comparator))) reverse], k);
}

void ComGoogleCommonCollectTopKSelector_initWithJavaUtilComparator_withInt_(ComGoogleCommonCollectTopKSelector *self, id<JavaUtilComparator> comparator, jint k) {
  NSObject_init(self);
  self->comparator_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_withId_(comparator, @"comparator");
  self->k_ = k;
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withInt_(k >= 0, @"k must be nonnegative, was %s", k);
  self->buffer_ = [IOSObjectArray newArrayWithLength:k * 2 type:NSObject_class_()];
  self->bufferSize_ = 0;
  self->threshold_ = nil;
}

ComGoogleCommonCollectTopKSelector *new_ComGoogleCommonCollectTopKSelector_initWithJavaUtilComparator_withInt_(id<JavaUtilComparator> comparator, jint k) {
  J2OBJC_NEW_IMPL(ComGoogleCommonCollectTopKSelector, initWithJavaUtilComparator_withInt_, comparator, k)
}

ComGoogleCommonCollectTopKSelector *create_ComGoogleCommonCollectTopKSelector_initWithJavaUtilComparator_withInt_(id<JavaUtilComparator> comparator, jint k) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonCollectTopKSelector, initWithJavaUtilComparator_withInt_, comparator, k)
}

void ComGoogleCommonCollectTopKSelector_trim(ComGoogleCommonCollectTopKSelector *self) {
  jint left = 0;
  jint right = 2 * self->k_ - 1;
  jint minThresholdPosition = 0;
  jint iterations = 0;
  jint maxIterations = ComGoogleCommonMathIntMath_log2WithInt_withJavaMathRoundingMode_(right - left, JreLoadEnum(JavaMathRoundingMode, CEILING)) * 3;
  while (left < right) {
    jint pivotIndex = JreURShift32((left + right + 1), 1);
    jint pivotNewIndex = ComGoogleCommonCollectTopKSelector_partitionWithInt_withInt_withInt_(self, left, right, pivotIndex);
    if (pivotNewIndex > self->k_) {
      right = pivotNewIndex - 1;
    }
    else if (pivotNewIndex < self->k_) {
      left = JavaLangMath_maxWithInt_withInt_(pivotNewIndex, left + 1);
      minThresholdPosition = pivotNewIndex;
    }
    else {
      break;
    }
    iterations++;
    if (iterations >= maxIterations) {
      JavaUtilArrays_sortWithNSObjectArray_withInt_withInt_withJavaUtilComparator_(self->buffer_, left, right, self->comparator_);
      break;
    }
  }
  self->bufferSize_ = self->k_;
  self->threshold_ = IOSObjectArray_Get(nil_chk(self->buffer_), minThresholdPosition);
  for (jint i = minThresholdPosition + 1; i < self->k_; i++) {
    if ([((id<JavaUtilComparator>) nil_chk(self->comparator_)) compareWithId:IOSObjectArray_Get(self->buffer_, i) withId:self->threshold_] > 0) {
      self->threshold_ = IOSObjectArray_Get(self->buffer_, i);
    }
  }
}

jint ComGoogleCommonCollectTopKSelector_partitionWithInt_withInt_withInt_(ComGoogleCommonCollectTopKSelector *self, jint left, jint right, jint pivotIndex) {
  id pivotValue = IOSObjectArray_Get(nil_chk(self->buffer_), pivotIndex);
  (void) IOSObjectArray_Set(self->buffer_, pivotIndex, IOSObjectArray_Get(self->buffer_, right));
  jint pivotNewIndex = left;
  for (jint i = left; i < right; i++) {
    if ([((id<JavaUtilComparator>) nil_chk(self->comparator_)) compareWithId:IOSObjectArray_Get(self->buffer_, i) withId:pivotValue] < 0) {
      ComGoogleCommonCollectTopKSelector_swapWithInt_withInt_(self, pivotNewIndex, i);
      pivotNewIndex++;
    }
  }
  (void) IOSObjectArray_Set(self->buffer_, right, IOSObjectArray_Get(self->buffer_, pivotNewIndex));
  (void) IOSObjectArray_Set(self->buffer_, pivotNewIndex, pivotValue);
  return pivotNewIndex;
}

void ComGoogleCommonCollectTopKSelector_swapWithInt_withInt_(ComGoogleCommonCollectTopKSelector *self, jint i, jint j) {
  id tmp = IOSObjectArray_Get(nil_chk(self->buffer_), i);
  (void) IOSObjectArray_Set(self->buffer_, i, IOSObjectArray_Get(self->buffer_, j));
  (void) IOSObjectArray_Set(self->buffer_, j, tmp);
}

IOSObjectArray *ComGoogleCommonCollectTopKSelector__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonCollectTopKSelector)
