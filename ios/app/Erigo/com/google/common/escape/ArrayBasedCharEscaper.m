//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/escape/ArrayBasedCharEscaper.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/escape/ArrayBasedCharEscaper.h"
#include "com/google/common/escape/ArrayBasedEscaperMap.h"
#include "com/google/common/escape/CharEscaper.h"
#include "java/lang/Character.h"
#include "java/util/Map.h"

@interface ComGoogleCommonEscapeArrayBasedCharEscaper () {
 @public
  IOSObjectArray *replacements_;
  jint replacementsLength_;
  jchar safeMin_;
  jchar safeMax_;
}

@end

J2OBJC_FIELD_SETTER(ComGoogleCommonEscapeArrayBasedCharEscaper, replacements_, IOSObjectArray *)

@implementation ComGoogleCommonEscapeArrayBasedCharEscaper

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)replacementMap
                           withChar:(jchar)safeMin
                           withChar:(jchar)safeMax {
  ComGoogleCommonEscapeArrayBasedCharEscaper_initWithJavaUtilMap_withChar_withChar_(self, replacementMap, safeMin, safeMax);
  return self;
}

- (instancetype)initWithComGoogleCommonEscapeArrayBasedEscaperMap:(ComGoogleCommonEscapeArrayBasedEscaperMap *)escaperMap
                                                         withChar:(jchar)safeMin
                                                         withChar:(jchar)safeMax {
  ComGoogleCommonEscapeArrayBasedCharEscaper_initWithComGoogleCommonEscapeArrayBasedEscaperMap_withChar_withChar_(self, escaperMap, safeMin, safeMax);
  return self;
}

- (NSString *)escapeWithNSString:(NSString *)s {
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(s);
  for (jint i = 0; i < [((NSString *) nil_chk(s)) java_length]; i++) {
    jchar c = [s charAtWithInt:i];
    if ((c < replacementsLength_ && IOSObjectArray_Get(nil_chk(replacements_), c) != nil) || c > safeMax_ || c < safeMin_) {
      return [self escapeSlowWithNSString:s withInt:i];
    }
  }
  return s;
}

- (IOSCharArray *)escapeWithChar:(jchar)c {
  if (c < replacementsLength_) {
    IOSCharArray *chars = IOSObjectArray_Get(nil_chk(replacements_), c);
    if (chars != nil) {
      return chars;
    }
  }
  if (c >= safeMin_ && c <= safeMax_) {
    return nil;
  }
  return [self escapeUnsafeWithChar:c];
}

- (IOSCharArray *)escapeUnsafeWithChar:(jchar)c {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x4, -1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, 3, 4, -1, -1, -1, -1 },
    { NULL, "[C", 0x14, 3, 5, -1, -1, -1, -1 },
    { NULL, "[C", 0x404, 6, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilMap:withChar:withChar:);
  methods[1].selector = @selector(initWithComGoogleCommonEscapeArrayBasedEscaperMap:withChar:withChar:);
  methods[2].selector = @selector(escapeWithNSString:);
  methods[3].selector = @selector(escapeWithChar:);
  methods[4].selector = @selector(escapeUnsafeWithChar:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "replacements_", "[[C", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "replacementsLength_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "safeMin_", "C", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "safeMax_", "C", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilMap;CC", "(Ljava/util/Map<Ljava/lang/Character;Ljava/lang/String;>;CC)V", "LComGoogleCommonEscapeArrayBasedEscaperMap;CC", "escape", "LNSString;", "C", "escapeUnsafe" };
  static const J2ObjcClassInfo _ComGoogleCommonEscapeArrayBasedCharEscaper = { "ArrayBasedCharEscaper", "com.google.common.escape", ptrTable, methods, fields, 7, 0x401, 5, 4, -1, -1, -1, -1, -1 };
  return &_ComGoogleCommonEscapeArrayBasedCharEscaper;
}

@end

void ComGoogleCommonEscapeArrayBasedCharEscaper_initWithJavaUtilMap_withChar_withChar_(ComGoogleCommonEscapeArrayBasedCharEscaper *self, id<JavaUtilMap> replacementMap, jchar safeMin, jchar safeMax) {
  ComGoogleCommonEscapeArrayBasedCharEscaper_initWithComGoogleCommonEscapeArrayBasedEscaperMap_withChar_withChar_(self, ComGoogleCommonEscapeArrayBasedEscaperMap_createWithJavaUtilMap_(replacementMap), safeMin, safeMax);
}

void ComGoogleCommonEscapeArrayBasedCharEscaper_initWithComGoogleCommonEscapeArrayBasedEscaperMap_withChar_withChar_(ComGoogleCommonEscapeArrayBasedCharEscaper *self, ComGoogleCommonEscapeArrayBasedEscaperMap *escaperMap, jchar safeMin, jchar safeMax) {
  ComGoogleCommonEscapeCharEscaper_init(self);
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(escaperMap);
  self->replacements_ = [((ComGoogleCommonEscapeArrayBasedEscaperMap *) nil_chk(escaperMap)) getReplacementArray];
  self->replacementsLength_ = ((IOSObjectArray *) nil_chk(self->replacements_))->size_;
  if (safeMax < safeMin) {
    safeMax = JavaLangCharacter_MIN_VALUE;
    safeMin = JavaLangCharacter_MAX_VALUE;
  }
  self->safeMin_ = safeMin;
  self->safeMax_ = safeMax;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonEscapeArrayBasedCharEscaper)
