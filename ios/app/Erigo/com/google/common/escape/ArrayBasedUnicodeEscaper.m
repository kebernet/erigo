//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/escape/ArrayBasedUnicodeEscaper.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/escape/ArrayBasedEscaperMap.h"
#include "com/google/common/escape/ArrayBasedUnicodeEscaper.h"
#include "com/google/common/escape/UnicodeEscaper.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Map.h"
#include "javax/annotation/Nullable.h"

@interface ComGoogleCommonEscapeArrayBasedUnicodeEscaper () {
 @public
  IOSObjectArray *replacements_;
  jint replacementsLength_;
  jint safeMin_;
  jint safeMax_;
  jchar safeMinChar_;
  jchar safeMaxChar_;
}

@end

J2OBJC_FIELD_SETTER(ComGoogleCommonEscapeArrayBasedUnicodeEscaper, replacements_, IOSObjectArray *)

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonEscapeArrayBasedUnicodeEscaper__Annotations$0();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonEscapeArrayBasedUnicodeEscaper__Annotations$1();

@implementation ComGoogleCommonEscapeArrayBasedUnicodeEscaper

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)replacementMap
                            withInt:(jint)safeMin
                            withInt:(jint)safeMax
                       withNSString:(NSString *)unsafeReplacement {
  ComGoogleCommonEscapeArrayBasedUnicodeEscaper_initWithJavaUtilMap_withInt_withInt_withNSString_(self, replacementMap, safeMin, safeMax, unsafeReplacement);
  return self;
}

- (instancetype)initWithComGoogleCommonEscapeArrayBasedEscaperMap:(ComGoogleCommonEscapeArrayBasedEscaperMap *)escaperMap
                                                          withInt:(jint)safeMin
                                                          withInt:(jint)safeMax
                                                     withNSString:(NSString *)unsafeReplacement {
  ComGoogleCommonEscapeArrayBasedUnicodeEscaper_initWithComGoogleCommonEscapeArrayBasedEscaperMap_withInt_withInt_withNSString_(self, escaperMap, safeMin, safeMax, unsafeReplacement);
  return self;
}

- (NSString *)escapeWithNSString:(NSString *)s {
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(s);
  for (jint i = 0; i < [((NSString *) nil_chk(s)) java_length]; i++) {
    jchar c = [s charAtWithInt:i];
    if ((c < replacementsLength_ && IOSObjectArray_Get(nil_chk(replacements_), c) != nil) || c > safeMaxChar_ || c < safeMinChar_) {
      return [self escapeSlowWithNSString:s withInt:i];
    }
  }
  return s;
}

- (jint)nextEscapeIndexWithJavaLangCharSequence:(id<JavaLangCharSequence>)csq
                                        withInt:(jint)index
                                        withInt:(jint)end {
  while (index < end) {
    jchar c = [((id<JavaLangCharSequence>) nil_chk(csq)) charAtWithInt:index];
    if ((c < replacementsLength_ && IOSObjectArray_Get(nil_chk(replacements_), c) != nil) || c > safeMaxChar_ || c < safeMinChar_) {
      break;
    }
    index++;
  }
  return index;
}

- (IOSCharArray *)escapeWithInt:(jint)cp {
  if (cp < replacementsLength_) {
    IOSCharArray *chars = IOSObjectArray_Get(nil_chk(replacements_), cp);
    if (chars != nil) {
      return chars;
    }
  }
  if (cp >= safeMin_ && cp <= safeMax_) {
    return nil;
  }
  return [self escapeUnsafeWithInt:cp];
}

- (IOSCharArray *)escapeUnsafeWithInt:(jint)cp {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, 1, -1, 2 },
    { NULL, NULL, 0x4, -1, 3, -1, -1, -1, 4 },
    { NULL, "LNSString;", 0x11, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x14, 7, 8, -1, -1, -1, -1 },
    { NULL, "[C", 0x14, 5, 9, -1, -1, -1, -1 },
    { NULL, "[C", 0x404, 10, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilMap:withInt:withInt:withNSString:);
  methods[1].selector = @selector(initWithComGoogleCommonEscapeArrayBasedEscaperMap:withInt:withInt:withNSString:);
  methods[2].selector = @selector(escapeWithNSString:);
  methods[3].selector = @selector(nextEscapeIndexWithJavaLangCharSequence:withInt:withInt:);
  methods[4].selector = @selector(escapeWithInt:);
  methods[5].selector = @selector(escapeUnsafeWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "replacements_", "[[C", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "replacementsLength_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "safeMin_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "safeMax_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "safeMinChar_", "C", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "safeMaxChar_", "C", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilMap;IILNSString;", "(Ljava/util/Map<Ljava/lang/Character;Ljava/lang/String;>;IILjava/lang/String;)V", (void *)&ComGoogleCommonEscapeArrayBasedUnicodeEscaper__Annotations$0, "LComGoogleCommonEscapeArrayBasedEscaperMap;IILNSString;", (void *)&ComGoogleCommonEscapeArrayBasedUnicodeEscaper__Annotations$1, "escape", "LNSString;", "nextEscapeIndex", "LJavaLangCharSequence;II", "I", "escapeUnsafe" };
  static const J2ObjcClassInfo _ComGoogleCommonEscapeArrayBasedUnicodeEscaper = { "ArrayBasedUnicodeEscaper", "com.google.common.escape", ptrTable, methods, fields, 7, 0x401, 6, 6, -1, -1, -1, -1, -1 };
  return &_ComGoogleCommonEscapeArrayBasedUnicodeEscaper;
}

@end

void ComGoogleCommonEscapeArrayBasedUnicodeEscaper_initWithJavaUtilMap_withInt_withInt_withNSString_(ComGoogleCommonEscapeArrayBasedUnicodeEscaper *self, id<JavaUtilMap> replacementMap, jint safeMin, jint safeMax, NSString *unsafeReplacement) {
  ComGoogleCommonEscapeArrayBasedUnicodeEscaper_initWithComGoogleCommonEscapeArrayBasedEscaperMap_withInt_withInt_withNSString_(self, ComGoogleCommonEscapeArrayBasedEscaperMap_createWithJavaUtilMap_(replacementMap), safeMin, safeMax, unsafeReplacement);
}

void ComGoogleCommonEscapeArrayBasedUnicodeEscaper_initWithComGoogleCommonEscapeArrayBasedEscaperMap_withInt_withInt_withNSString_(ComGoogleCommonEscapeArrayBasedUnicodeEscaper *self, ComGoogleCommonEscapeArrayBasedEscaperMap *escaperMap, jint safeMin, jint safeMax, NSString *unsafeReplacement) {
  ComGoogleCommonEscapeUnicodeEscaper_init(self);
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(escaperMap);
  self->replacements_ = [((ComGoogleCommonEscapeArrayBasedEscaperMap *) nil_chk(escaperMap)) getReplacementArray];
  self->replacementsLength_ = ((IOSObjectArray *) nil_chk(self->replacements_))->size_;
  if (safeMax < safeMin) {
    safeMax = -1;
    safeMin = JavaLangInteger_MAX_VALUE;
  }
  self->safeMin_ = safeMin;
  self->safeMax_ = safeMax;
  if (safeMin >= JavaLangCharacter_MIN_HIGH_SURROGATE) {
    self->safeMinChar_ = JavaLangCharacter_MAX_VALUE;
    self->safeMaxChar_ = 0;
  }
  else {
    self->safeMinChar_ = (jchar) safeMin;
    self->safeMaxChar_ = (jchar) JavaLangMath_minWithInt_withInt_(safeMax, JavaLangCharacter_MIN_HIGH_SURROGATE - 1);
  }
}

IOSObjectArray *ComGoogleCommonEscapeArrayBasedUnicodeEscaper__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:4 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonEscapeArrayBasedUnicodeEscaper__Annotations$1() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:4 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonEscapeArrayBasedUnicodeEscaper)
