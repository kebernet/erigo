//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/escape/CharEscaper.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/escape/CharEscaper.h"
#include "com/google/common/escape/Escaper.h"
#include "com/google/common/escape/Platform.h"
#include "java/lang/AssertionError.h"
#include "java/lang/System.h"

@interface ComGoogleCommonEscapeCharEscaper ()

+ (IOSCharArray *)growBufferWithCharArray:(IOSCharArray *)dest
                                  withInt:(jint)index
                                  withInt:(jint)size;

@end

inline jint ComGoogleCommonEscapeCharEscaper_get_DEST_PAD_MULTIPLIER();
#define ComGoogleCommonEscapeCharEscaper_DEST_PAD_MULTIPLIER 2
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonEscapeCharEscaper, DEST_PAD_MULTIPLIER, jint)

__attribute__((unused)) static NSString *ComGoogleCommonEscapeCharEscaper_escapeSlowWithNSString_withInt_(ComGoogleCommonEscapeCharEscaper *self, NSString *s, jint index);

__attribute__((unused)) static IOSCharArray *ComGoogleCommonEscapeCharEscaper_growBufferWithCharArray_withInt_withInt_(IOSCharArray *dest, jint index, jint size);

@implementation ComGoogleCommonEscapeCharEscaper

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonEscapeCharEscaper_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)escapeWithNSString:(NSString *)string {
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(string);
  jint length = [((NSString *) nil_chk(string)) java_length];
  for (jint index = 0; index < length; index++) {
    if ([self escapeWithChar:[string charAtWithInt:index]] != nil) {
      return ComGoogleCommonEscapeCharEscaper_escapeSlowWithNSString_withInt_(self, string, index);
    }
  }
  return string;
}

- (NSString *)escapeSlowWithNSString:(NSString *)s
                             withInt:(jint)index {
  return ComGoogleCommonEscapeCharEscaper_escapeSlowWithNSString_withInt_(self, s, index);
}

- (IOSCharArray *)escapeWithChar:(jchar)c {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (IOSCharArray *)growBufferWithCharArray:(IOSCharArray *)dest
                                  withInt:(jint)index
                                  withInt:(jint)size {
  return ComGoogleCommonEscapeCharEscaper_growBufferWithCharArray_withInt_withInt_(dest, index, size);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x14, 2, 3, -1, -1, -1, -1 },
    { NULL, "[C", 0x404, 0, 4, -1, -1, -1, -1 },
    { NULL, "[C", 0xa, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(escapeWithNSString:);
  methods[2].selector = @selector(escapeSlowWithNSString:withInt:);
  methods[3].selector = @selector(escapeWithChar:);
  methods[4].selector = @selector(growBufferWithCharArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEST_PAD_MULTIPLIER", "I", .constantValue.asInt = ComGoogleCommonEscapeCharEscaper_DEST_PAD_MULTIPLIER, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "escape", "LNSString;", "escapeSlow", "LNSString;I", "C", "growBuffer", "[CII" };
  static const J2ObjcClassInfo _ComGoogleCommonEscapeCharEscaper = { "CharEscaper", "com.google.common.escape", ptrTable, methods, fields, 7, 0x401, 5, 1, -1, -1, -1, -1, -1 };
  return &_ComGoogleCommonEscapeCharEscaper;
}

@end

void ComGoogleCommonEscapeCharEscaper_init(ComGoogleCommonEscapeCharEscaper *self) {
  ComGoogleCommonEscapeEscaper_init(self);
}

NSString *ComGoogleCommonEscapeCharEscaper_escapeSlowWithNSString_withInt_(ComGoogleCommonEscapeCharEscaper *self, NSString *s, jint index) {
  jint slen = [((NSString *) nil_chk(s)) java_length];
  IOSCharArray *dest = ComGoogleCommonEscapePlatform_charBufferFromThreadLocal();
  jint destSize = ((IOSCharArray *) nil_chk(dest))->size_;
  jint destIndex = 0;
  jint lastEscape = 0;
  for (; index < slen; index++) {
    IOSCharArray *r = [self escapeWithChar:[s charAtWithInt:index]];
    if (r == nil) {
      continue;
    }
    jint rlen = r->size_;
    jint charsSkipped = index - lastEscape;
    jint sizeNeeded = destIndex + charsSkipped + rlen;
    if (destSize < sizeNeeded) {
      destSize = sizeNeeded + ComGoogleCommonEscapeCharEscaper_DEST_PAD_MULTIPLIER * (slen - index);
      dest = ComGoogleCommonEscapeCharEscaper_growBufferWithCharArray_withInt_withInt_(dest, destIndex, destSize);
    }
    if (charsSkipped > 0) {
      [s java_getChars:lastEscape sourceEnd:index destination:dest destinationBegin:destIndex];
      destIndex += charsSkipped;
    }
    if (rlen > 0) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(r, 0, dest, destIndex, rlen);
      destIndex += rlen;
    }
    lastEscape = index + 1;
  }
  jint charsLeft = slen - lastEscape;
  if (charsLeft > 0) {
    jint sizeNeeded = destIndex + charsLeft;
    if (destSize < sizeNeeded) {
      dest = ComGoogleCommonEscapeCharEscaper_growBufferWithCharArray_withInt_withInt_(dest, destIndex, sizeNeeded);
    }
    [s java_getChars:lastEscape sourceEnd:slen destination:dest destinationBegin:destIndex];
    destIndex = sizeNeeded;
  }
  return [NSString java_stringWithCharacters:dest offset:0 length:destIndex];
}

IOSCharArray *ComGoogleCommonEscapeCharEscaper_growBufferWithCharArray_withInt_withInt_(IOSCharArray *dest, jint index, jint size) {
  ComGoogleCommonEscapeCharEscaper_initialize();
  if (size < 0) {
    @throw new_JavaLangAssertionError_initWithId_(@"Cannot increase internal buffer any further");
  }
  IOSCharArray *copy_ = [IOSCharArray newArrayWithLength:size];
  if (index > 0) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(dest, 0, copy_, 0, index);
  }
  return copy_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonEscapeCharEscaper)
