//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/escape/UnicodeEscaper.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/escape/Escaper.h"
#include "com/google/common/escape/Platform.h"
#include "com/google/common/escape/UnicodeEscaper.h"
#include "java/lang/AssertionError.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/System.h"

@interface ComGoogleCommonEscapeUnicodeEscaper ()

+ (IOSCharArray *)growBufferWithCharArray:(IOSCharArray *)dest
                                  withInt:(jint)index
                                  withInt:(jint)size;

@end

inline jint ComGoogleCommonEscapeUnicodeEscaper_get_DEST_PAD();
#define ComGoogleCommonEscapeUnicodeEscaper_DEST_PAD 32
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonEscapeUnicodeEscaper, DEST_PAD, jint)

__attribute__((unused)) static NSString *ComGoogleCommonEscapeUnicodeEscaper_escapeSlowWithNSString_withInt_(ComGoogleCommonEscapeUnicodeEscaper *self, NSString *s, jint index);

__attribute__((unused)) static IOSCharArray *ComGoogleCommonEscapeUnicodeEscaper_growBufferWithCharArray_withInt_withInt_(IOSCharArray *dest, jint index, jint size);

@implementation ComGoogleCommonEscapeUnicodeEscaper

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonEscapeUnicodeEscaper_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (IOSCharArray *)escapeWithInt:(jint)cp {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)nextEscapeIndexWithJavaLangCharSequence:(id<JavaLangCharSequence>)csq
                                        withInt:(jint)start
                                        withInt:(jint)end {
  jint index = start;
  while (index < end) {
    jint cp = ComGoogleCommonEscapeUnicodeEscaper_codePointAtWithJavaLangCharSequence_withInt_withInt_(csq, index, end);
    if (cp < 0 || [self escapeWithInt:cp] != nil) {
      break;
    }
    index += JavaLangCharacter_isSupplementaryCodePointWithInt_(cp) ? 2 : 1;
  }
  return index;
}

- (NSString *)escapeWithNSString:(NSString *)string {
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(string);
  jint end = [((NSString *) nil_chk(string)) java_length];
  jint index = [self nextEscapeIndexWithJavaLangCharSequence:string withInt:0 withInt:end];
  return index == end ? string : ComGoogleCommonEscapeUnicodeEscaper_escapeSlowWithNSString_withInt_(self, string, index);
}

- (NSString *)escapeSlowWithNSString:(NSString *)s
                             withInt:(jint)index {
  return ComGoogleCommonEscapeUnicodeEscaper_escapeSlowWithNSString_withInt_(self, s, index);
}

+ (jint)codePointAtWithJavaLangCharSequence:(id<JavaLangCharSequence>)seq
                                    withInt:(jint)index
                                    withInt:(jint)end {
  return ComGoogleCommonEscapeUnicodeEscaper_codePointAtWithJavaLangCharSequence_withInt_withInt_(seq, index, end);
}

+ (IOSCharArray *)growBufferWithCharArray:(IOSCharArray *)dest
                                  withInt:(jint)index
                                  withInt:(jint)size {
  return ComGoogleCommonEscapeUnicodeEscaper_growBufferWithCharArray_withInt_withInt_(dest, index, size);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "[C", 0x404, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x14, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0xc, 7, 3, -1, -1, -1, -1 },
    { NULL, "[C", 0xa, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(escapeWithInt:);
  methods[2].selector = @selector(nextEscapeIndexWithJavaLangCharSequence:withInt:withInt:);
  methods[3].selector = @selector(escapeWithNSString:);
  methods[4].selector = @selector(escapeSlowWithNSString:withInt:);
  methods[5].selector = @selector(codePointAtWithJavaLangCharSequence:withInt:withInt:);
  methods[6].selector = @selector(growBufferWithCharArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEST_PAD", "I", .constantValue.asInt = ComGoogleCommonEscapeUnicodeEscaper_DEST_PAD, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "escape", "I", "nextEscapeIndex", "LJavaLangCharSequence;II", "LNSString;", "escapeSlow", "LNSString;I", "codePointAt", "growBuffer", "[CII" };
  static const J2ObjcClassInfo _ComGoogleCommonEscapeUnicodeEscaper = { "UnicodeEscaper", "com.google.common.escape", ptrTable, methods, fields, 7, 0x401, 7, 1, -1, -1, -1, -1, -1 };
  return &_ComGoogleCommonEscapeUnicodeEscaper;
}

@end

void ComGoogleCommonEscapeUnicodeEscaper_init(ComGoogleCommonEscapeUnicodeEscaper *self) {
  ComGoogleCommonEscapeEscaper_init(self);
}

NSString *ComGoogleCommonEscapeUnicodeEscaper_escapeSlowWithNSString_withInt_(ComGoogleCommonEscapeUnicodeEscaper *self, NSString *s, jint index) {
  jint end = [((NSString *) nil_chk(s)) java_length];
  IOSCharArray *dest = ComGoogleCommonEscapePlatform_charBufferFromThreadLocal();
  jint destIndex = 0;
  jint unescapedChunkStart = 0;
  while (index < end) {
    jint cp = ComGoogleCommonEscapeUnicodeEscaper_codePointAtWithJavaLangCharSequence_withInt_withInt_(s, index, end);
    if (cp < 0) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Trailing high surrogate at end of input");
    }
    IOSCharArray *escaped = [self escapeWithInt:cp];
    jint nextIndex = index + (JavaLangCharacter_isSupplementaryCodePointWithInt_(cp) ? 2 : 1);
    if (escaped != nil) {
      jint charsSkipped = index - unescapedChunkStart;
      jint sizeNeeded = destIndex + charsSkipped + escaped->size_;
      if (((IOSCharArray *) nil_chk(dest))->size_ < sizeNeeded) {
        jint destLength = sizeNeeded + (end - index) + ComGoogleCommonEscapeUnicodeEscaper_DEST_PAD;
        dest = ComGoogleCommonEscapeUnicodeEscaper_growBufferWithCharArray_withInt_withInt_(dest, destIndex, destLength);
      }
      if (charsSkipped > 0) {
        [s java_getChars:unescapedChunkStart sourceEnd:index destination:dest destinationBegin:destIndex];
        destIndex += charsSkipped;
      }
      if (escaped->size_ > 0) {
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(escaped, 0, dest, destIndex, escaped->size_);
        destIndex += escaped->size_;
      }
      unescapedChunkStart = nextIndex;
    }
    index = [self nextEscapeIndexWithJavaLangCharSequence:s withInt:nextIndex withInt:end];
  }
  jint charsSkipped = end - unescapedChunkStart;
  if (charsSkipped > 0) {
    jint endIndex = destIndex + charsSkipped;
    if (((IOSCharArray *) nil_chk(dest))->size_ < endIndex) {
      dest = ComGoogleCommonEscapeUnicodeEscaper_growBufferWithCharArray_withInt_withInt_(dest, destIndex, endIndex);
    }
    [s java_getChars:unescapedChunkStart sourceEnd:end destination:dest destinationBegin:destIndex];
    destIndex = endIndex;
  }
  return [NSString java_stringWithCharacters:dest offset:0 length:destIndex];
}

jint ComGoogleCommonEscapeUnicodeEscaper_codePointAtWithJavaLangCharSequence_withInt_withInt_(id<JavaLangCharSequence> seq, jint index, jint end) {
  ComGoogleCommonEscapeUnicodeEscaper_initialize();
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(seq);
  if (index < end) {
    jchar c1 = [((id<JavaLangCharSequence>) nil_chk(seq)) charAtWithInt:index++];
    if (c1 < JavaLangCharacter_MIN_HIGH_SURROGATE || c1 > JavaLangCharacter_MAX_LOW_SURROGATE) {
      return c1;
    }
    else if (c1 <= JavaLangCharacter_MAX_HIGH_SURROGATE) {
      if (index == end) {
        return -c1;
      }
      jchar c2 = [seq charAtWithInt:index];
      if (JavaLangCharacter_isLowSurrogateWithChar_(c2)) {
        return JavaLangCharacter_toCodePointWithChar_withChar_(c1, c2);
      }
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$C$I$I$@C", @"Expected low surrogate but got char '", c2, @"' with value ", (jint) c2, @" at index ", index, @" in '", seq, '\''));
    }
    else {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$C$I$I$@C", @"Unexpected low surrogate character '", c1, @"' with value ", (jint) c1, @" at index ", (index - 1), @" in '", seq, '\''));
    }
  }
  @throw new_JavaLangIndexOutOfBoundsException_initWithNSString_(@"Index exceeds specified range");
}

IOSCharArray *ComGoogleCommonEscapeUnicodeEscaper_growBufferWithCharArray_withInt_withInt_(IOSCharArray *dest, jint index, jint size) {
  ComGoogleCommonEscapeUnicodeEscaper_initialize();
  if (size < 0) {
    @throw new_JavaLangAssertionError_initWithId_(@"Cannot increase internal buffer any further");
  }
  IOSCharArray *copy_ = [IOSCharArray newArrayWithLength:size];
  if (index > 0) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(dest, 0, copy_, 0, index);
  }
  return copy_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonEscapeUnicodeEscaper)
