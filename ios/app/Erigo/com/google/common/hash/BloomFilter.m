//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/hash/BloomFilter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Objects.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/base/Predicate.h"
#include "com/google/common/hash/BloomFilter.h"
#include "com/google/common/hash/BloomFilterStrategies.h"
#include "com/google/common/hash/Funnel.h"
#include "com/google/common/math/DoubleMath.h"
#include "com/google/common/primitives/SignedBytes.h"
#include "com/google/common/primitives/UnsignedBytes.h"
#include "java/io/DataInputStream.h"
#include "java/io/DataOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/Serializable.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/math/RoundingMode.h"
#include "java/util/function/Predicate.h"
#include "javax/annotation/Nullable.h"

@interface ComGoogleCommonHashBloomFilter () {
 @public
  ComGoogleCommonHashBloomFilterStrategies_BitArray *bits_;
  jint numHashFunctions_;
  id<ComGoogleCommonHashFunnel> funnel_;
  id<ComGoogleCommonHashBloomFilter_Strategy> strategy_;
}

- (instancetype)initWithComGoogleCommonHashBloomFilterStrategies_BitArray:(ComGoogleCommonHashBloomFilterStrategies_BitArray *)bits
                                                                  withInt:(jint)numHashFunctions
                                            withComGoogleCommonHashFunnel:(id<ComGoogleCommonHashFunnel>)funnel
                              withComGoogleCommonHashBloomFilter_Strategy:(id<ComGoogleCommonHashBloomFilter_Strategy>)strategy;

- (id)writeReplace;

@end

J2OBJC_FIELD_SETTER(ComGoogleCommonHashBloomFilter, bits_, ComGoogleCommonHashBloomFilterStrategies_BitArray *)
J2OBJC_FIELD_SETTER(ComGoogleCommonHashBloomFilter, funnel_, id<ComGoogleCommonHashFunnel>)
J2OBJC_FIELD_SETTER(ComGoogleCommonHashBloomFilter, strategy_, id<ComGoogleCommonHashBloomFilter_Strategy>)

__attribute__((unused)) static void ComGoogleCommonHashBloomFilter_initWithComGoogleCommonHashBloomFilterStrategies_BitArray_withInt_withComGoogleCommonHashFunnel_withComGoogleCommonHashBloomFilter_Strategy_(ComGoogleCommonHashBloomFilter *self, ComGoogleCommonHashBloomFilterStrategies_BitArray *bits, jint numHashFunctions, id<ComGoogleCommonHashFunnel> funnel, id<ComGoogleCommonHashBloomFilter_Strategy> strategy);

__attribute__((unused)) static ComGoogleCommonHashBloomFilter *new_ComGoogleCommonHashBloomFilter_initWithComGoogleCommonHashBloomFilterStrategies_BitArray_withInt_withComGoogleCommonHashFunnel_withComGoogleCommonHashBloomFilter_Strategy_(ComGoogleCommonHashBloomFilterStrategies_BitArray *bits, jint numHashFunctions, id<ComGoogleCommonHashFunnel> funnel, id<ComGoogleCommonHashBloomFilter_Strategy> strategy) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonHashBloomFilter *create_ComGoogleCommonHashBloomFilter_initWithComGoogleCommonHashBloomFilterStrategies_BitArray_withInt_withComGoogleCommonHashFunnel_withComGoogleCommonHashBloomFilter_Strategy_(ComGoogleCommonHashBloomFilterStrategies_BitArray *bits, jint numHashFunctions, id<ComGoogleCommonHashFunnel> funnel, id<ComGoogleCommonHashBloomFilter_Strategy> strategy);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonHashBloomFilter__Annotations$0();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonHashBloomFilter__Annotations$1();

@interface ComGoogleCommonHashBloomFilter_Strategy : NSObject

@end

@interface ComGoogleCommonHashBloomFilter_SerialForm : NSObject < JavaIoSerializable > {
 @public
  IOSLongArray *data_;
  jint numHashFunctions_;
  id<ComGoogleCommonHashFunnel> funnel_;
  id<ComGoogleCommonHashBloomFilter_Strategy> strategy_;
}

- (instancetype)initWithComGoogleCommonHashBloomFilter:(ComGoogleCommonHashBloomFilter *)bf;

- (id)readResolve;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonHashBloomFilter_SerialForm)

J2OBJC_FIELD_SETTER(ComGoogleCommonHashBloomFilter_SerialForm, data_, IOSLongArray *)
J2OBJC_FIELD_SETTER(ComGoogleCommonHashBloomFilter_SerialForm, funnel_, id<ComGoogleCommonHashFunnel>)
J2OBJC_FIELD_SETTER(ComGoogleCommonHashBloomFilter_SerialForm, strategy_, id<ComGoogleCommonHashBloomFilter_Strategy>)

inline jlong ComGoogleCommonHashBloomFilter_SerialForm_get_serialVersionUID();
#define ComGoogleCommonHashBloomFilter_SerialForm_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonHashBloomFilter_SerialForm, serialVersionUID, jlong)

__attribute__((unused)) static void ComGoogleCommonHashBloomFilter_SerialForm_initWithComGoogleCommonHashBloomFilter_(ComGoogleCommonHashBloomFilter_SerialForm *self, ComGoogleCommonHashBloomFilter *bf);

__attribute__((unused)) static ComGoogleCommonHashBloomFilter_SerialForm *new_ComGoogleCommonHashBloomFilter_SerialForm_initWithComGoogleCommonHashBloomFilter_(ComGoogleCommonHashBloomFilter *bf) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonHashBloomFilter_SerialForm *create_ComGoogleCommonHashBloomFilter_SerialForm_initWithComGoogleCommonHashBloomFilter_(ComGoogleCommonHashBloomFilter *bf);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonHashBloomFilter_SerialForm)

@implementation ComGoogleCommonHashBloomFilter

- (instancetype)initWithComGoogleCommonHashBloomFilterStrategies_BitArray:(ComGoogleCommonHashBloomFilterStrategies_BitArray *)bits
                                                                  withInt:(jint)numHashFunctions
                                            withComGoogleCommonHashFunnel:(id<ComGoogleCommonHashFunnel>)funnel
                              withComGoogleCommonHashBloomFilter_Strategy:(id<ComGoogleCommonHashBloomFilter_Strategy>)strategy {
  ComGoogleCommonHashBloomFilter_initWithComGoogleCommonHashBloomFilterStrategies_BitArray_withInt_withComGoogleCommonHashFunnel_withComGoogleCommonHashBloomFilter_Strategy_(self, bits, numHashFunctions, funnel, strategy);
  return self;
}

- (ComGoogleCommonHashBloomFilter *)copy__ {
  return new_ComGoogleCommonHashBloomFilter_initWithComGoogleCommonHashBloomFilterStrategies_BitArray_withInt_withComGoogleCommonHashFunnel_withComGoogleCommonHashBloomFilter_Strategy_([((ComGoogleCommonHashBloomFilterStrategies_BitArray *) nil_chk(bits_)) copy__], numHashFunctions_, funnel_, strategy_);
}

- (jboolean)mightContainWithId:(id)object {
  return [((id<ComGoogleCommonHashBloomFilter_Strategy>) nil_chk(strategy_)) mightContainWithId:object withComGoogleCommonHashFunnel:funnel_ withInt:numHashFunctions_ withComGoogleCommonHashBloomFilterStrategies_BitArray:bits_];
}

- (jboolean)applyWithId:(id)input {
  return [self mightContainWithId:input];
}

- (jboolean)putWithId:(id)object {
  return [((id<ComGoogleCommonHashBloomFilter_Strategy>) nil_chk(strategy_)) putWithId:object withComGoogleCommonHashFunnel:funnel_ withInt:numHashFunctions_ withComGoogleCommonHashBloomFilterStrategies_BitArray:bits_];
}

- (jdouble)expectedFpp {
  return JavaLangMath_powWithDouble_withDouble_((jdouble) [((ComGoogleCommonHashBloomFilterStrategies_BitArray *) nil_chk(bits_)) bitCount] / [self bitSize], numHashFunctions_);
}

- (jlong)approximateElementCount {
  jlong bitSize = [((ComGoogleCommonHashBloomFilterStrategies_BitArray *) nil_chk(bits_)) bitSize];
  jlong bitCount = [bits_ bitCount];
  jdouble fractionOfBitsSet = (jdouble) bitCount / bitSize;
  return ComGoogleCommonMathDoubleMath_roundToLongWithDouble_withJavaMathRoundingMode_(-JavaLangMath_log1pWithDouble_(-fractionOfBitsSet) * bitSize / numHashFunctions_, JreLoadEnum(JavaMathRoundingMode, HALF_UP));
}

- (jlong)bitSize {
  return [((ComGoogleCommonHashBloomFilterStrategies_BitArray *) nil_chk(bits_)) bitSize];
}

- (jboolean)isCompatibleWithComGoogleCommonHashBloomFilter:(ComGoogleCommonHashBloomFilter *)that {
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(that);
  return (self != that) && (self->numHashFunctions_ == ((ComGoogleCommonHashBloomFilter *) nil_chk(that))->numHashFunctions_) && ([self bitSize] == [that bitSize]) && ([((id<ComGoogleCommonHashBloomFilter_Strategy>) nil_chk(self->strategy_)) isEqual:that->strategy_]) && ([((id<ComGoogleCommonHashFunnel>) nil_chk(self->funnel_)) isEqual:that->funnel_]);
}

- (void)putAllWithComGoogleCommonHashBloomFilter:(ComGoogleCommonHashBloomFilter *)that {
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(that);
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withId_(self != that, @"Cannot combine a BloomFilter with itself.");
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withInt_withInt_(self->numHashFunctions_ == ((ComGoogleCommonHashBloomFilter *) nil_chk(that))->numHashFunctions_, @"BloomFilters must have the same number of hash functions (%s != %s)", self->numHashFunctions_, that->numHashFunctions_);
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withLong_withLong_([self bitSize] == [that bitSize], @"BloomFilters must have the same size underlying bit arrays (%s != %s)", [self bitSize], [that bitSize]);
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_withId_([((id<ComGoogleCommonHashBloomFilter_Strategy>) nil_chk(self->strategy_)) isEqual:that->strategy_], @"BloomFilters must have equal strategies (%s != %s)", self->strategy_, that->strategy_);
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_withId_([((id<ComGoogleCommonHashFunnel>) nil_chk(self->funnel_)) isEqual:that->funnel_], @"BloomFilters must have equal funnels (%s != %s)", self->funnel_, that->funnel_);
  [((ComGoogleCommonHashBloomFilterStrategies_BitArray *) nil_chk(self->bits_)) putAllWithComGoogleCommonHashBloomFilterStrategies_BitArray:that->bits_];
}

- (jboolean)isEqual:(id)object {
  if (object == self) {
    return true;
  }
  if ([object isKindOfClass:[ComGoogleCommonHashBloomFilter class]]) {
    ComGoogleCommonHashBloomFilter *that = (ComGoogleCommonHashBloomFilter *) cast_chk(object, [ComGoogleCommonHashBloomFilter class]);
    return self->numHashFunctions_ == ((ComGoogleCommonHashBloomFilter *) nil_chk(that))->numHashFunctions_ && [((id<ComGoogleCommonHashFunnel>) nil_chk(self->funnel_)) isEqual:that->funnel_] && [((ComGoogleCommonHashBloomFilterStrategies_BitArray *) nil_chk(self->bits_)) isEqual:that->bits_] && [((id<ComGoogleCommonHashBloomFilter_Strategy>) nil_chk(self->strategy_)) isEqual:that->strategy_];
  }
  return false;
}

- (NSUInteger)hash {
  return ComGoogleCommonBaseObjects_hashCodeWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(numHashFunctions_), funnel_, strategy_, bits_ } count:4 type:NSObject_class_()]);
}

+ (ComGoogleCommonHashBloomFilter *)createWithComGoogleCommonHashFunnel:(id<ComGoogleCommonHashFunnel>)funnel
                                                                withInt:(jint)expectedInsertions
                                                             withDouble:(jdouble)fpp {
  return ComGoogleCommonHashBloomFilter_createWithComGoogleCommonHashFunnel_withInt_withDouble_(funnel, expectedInsertions, fpp);
}

+ (ComGoogleCommonHashBloomFilter *)createWithComGoogleCommonHashFunnel:(id<ComGoogleCommonHashFunnel>)funnel
                                                               withLong:(jlong)expectedInsertions
                                                             withDouble:(jdouble)fpp {
  return ComGoogleCommonHashBloomFilter_createWithComGoogleCommonHashFunnel_withLong_withDouble_(funnel, expectedInsertions, fpp);
}

+ (ComGoogleCommonHashBloomFilter *)createWithComGoogleCommonHashFunnel:(id<ComGoogleCommonHashFunnel>)funnel
                                                               withLong:(jlong)expectedInsertions
                                                             withDouble:(jdouble)fpp
                            withComGoogleCommonHashBloomFilter_Strategy:(id<ComGoogleCommonHashBloomFilter_Strategy>)strategy {
  return ComGoogleCommonHashBloomFilter_createWithComGoogleCommonHashFunnel_withLong_withDouble_withComGoogleCommonHashBloomFilter_Strategy_(funnel, expectedInsertions, fpp, strategy);
}

+ (ComGoogleCommonHashBloomFilter *)createWithComGoogleCommonHashFunnel:(id<ComGoogleCommonHashFunnel>)funnel
                                                                withInt:(jint)expectedInsertions {
  return ComGoogleCommonHashBloomFilter_createWithComGoogleCommonHashFunnel_withInt_(funnel, expectedInsertions);
}

+ (ComGoogleCommonHashBloomFilter *)createWithComGoogleCommonHashFunnel:(id<ComGoogleCommonHashFunnel>)funnel
                                                               withLong:(jlong)expectedInsertions {
  return ComGoogleCommonHashBloomFilter_createWithComGoogleCommonHashFunnel_withLong_(funnel, expectedInsertions);
}

+ (jint)optimalNumOfHashFunctionsWithLong:(jlong)n
                                 withLong:(jlong)m {
  return ComGoogleCommonHashBloomFilter_optimalNumOfHashFunctionsWithLong_withLong_(n, m);
}

+ (jlong)optimalNumOfBitsWithLong:(jlong)n
                       withDouble:(jdouble)p {
  return ComGoogleCommonHashBloomFilter_optimalNumOfBitsWithLong_withDouble_(n, p);
}

- (id)writeReplace {
  return new_ComGoogleCommonHashBloomFilter_SerialForm_initWithComGoogleCommonHashBloomFilter_(self);
}

- (void)writeToWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  JavaIoDataOutputStream *dout = new_JavaIoDataOutputStream_initWithJavaIoOutputStream_(outArg);
  [dout writeByteWithInt:ComGoogleCommonPrimitivesSignedBytes_checkedCastWithLong_([((id<ComGoogleCommonHashBloomFilter_Strategy>) nil_chk(strategy_)) ordinal])];
  [dout writeByteWithInt:ComGoogleCommonPrimitivesUnsignedBytes_checkedCastWithLong_(numHashFunctions_)];
  [dout writeIntWithInt:((IOSLongArray *) nil_chk(((ComGoogleCommonHashBloomFilterStrategies_BitArray *) nil_chk(bits_))->data_))->size_];
  {
    IOSLongArray *a__ = bits_->data_;
    jlong const *b__ = a__->buffer_;
    jlong const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jlong value = *b__++;
      [dout writeLongWithLong:value];
    }
  }
}

+ (ComGoogleCommonHashBloomFilter *)readFromWithJavaIoInputStream:(JavaIoInputStream *)inArg
                                    withComGoogleCommonHashFunnel:(id<ComGoogleCommonHashFunnel>)funnel {
  return ComGoogleCommonHashBloomFilter_readFromWithJavaIoInputStream_withComGoogleCommonHashFunnel_(inArg, funnel);
}

- (jboolean)testWithId:(id)arg0 {
  return ComGoogleCommonBasePredicate_testWithId_(self, arg0);
}

- (id<JavaUtilFunctionPredicate>)and__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_and__WithJavaUtilFunctionPredicate_(self, arg0);
}

- (id<JavaUtilFunctionPredicate>)negate {
  return JavaUtilFunctionPredicate_negate(self);
}

- (id<JavaUtilFunctionPredicate>)or__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_or__WithJavaUtilFunctionPredicate_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, 1, -1, -1 },
    { NULL, "LComGoogleCommonHashBloomFilter;", 0x1, 2, -1, -1, 3, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "Z", 0x1, 7, 5, -1, 6, 8, -1 },
    { NULL, "Z", 0x1, 9, 5, -1, 6, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 10, 11, -1, 12, -1, -1 },
    { NULL, "V", 0x1, 13, 11, -1, 14, -1, -1 },
    { NULL, "Z", 0x1, 15, 5, -1, -1, -1, 16 },
    { NULL, "I", 0x1, 17, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonHashBloomFilter;", 0x9, 18, 19, -1, 20, -1, -1 },
    { NULL, "LComGoogleCommonHashBloomFilter;", 0x9, 18, 21, -1, 22, -1, -1 },
    { NULL, "LComGoogleCommonHashBloomFilter;", 0x8, 18, 23, -1, 24, -1, -1 },
    { NULL, "LComGoogleCommonHashBloomFilter;", 0x9, 18, 25, -1, 26, -1, -1 },
    { NULL, "LComGoogleCommonHashBloomFilter;", 0x9, 18, 27, -1, 28, -1, -1 },
    { NULL, "I", 0x8, 29, 30, -1, -1, -1, -1 },
    { NULL, "J", 0x8, 31, 32, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 34, 35, -1, -1, -1 },
    { NULL, "LComGoogleCommonHashBloomFilter;", 0x9, 36, 37, 35, 38, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonHashBloomFilterStrategies_BitArray:withInt:withComGoogleCommonHashFunnel:withComGoogleCommonHashBloomFilter_Strategy:);
  methods[1].selector = @selector(copy__);
  methods[2].selector = @selector(mightContainWithId:);
  methods[3].selector = @selector(applyWithId:);
  methods[4].selector = @selector(putWithId:);
  methods[5].selector = @selector(expectedFpp);
  methods[6].selector = @selector(approximateElementCount);
  methods[7].selector = @selector(bitSize);
  methods[8].selector = @selector(isCompatibleWithComGoogleCommonHashBloomFilter:);
  methods[9].selector = @selector(putAllWithComGoogleCommonHashBloomFilter:);
  methods[10].selector = @selector(isEqual:);
  methods[11].selector = @selector(hash);
  methods[12].selector = @selector(createWithComGoogleCommonHashFunnel:withInt:withDouble:);
  methods[13].selector = @selector(createWithComGoogleCommonHashFunnel:withLong:withDouble:);
  methods[14].selector = @selector(createWithComGoogleCommonHashFunnel:withLong:withDouble:withComGoogleCommonHashBloomFilter_Strategy:);
  methods[15].selector = @selector(createWithComGoogleCommonHashFunnel:withInt:);
  methods[16].selector = @selector(createWithComGoogleCommonHashFunnel:withLong:);
  methods[17].selector = @selector(optimalNumOfHashFunctionsWithLong:withLong:);
  methods[18].selector = @selector(optimalNumOfBitsWithLong:withDouble:);
  methods[19].selector = @selector(writeReplace);
  methods[20].selector = @selector(writeToWithJavaIoOutputStream:);
  methods[21].selector = @selector(readFromWithJavaIoInputStream:withComGoogleCommonHashFunnel:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bits_", "LComGoogleCommonHashBloomFilterStrategies_BitArray;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "numHashFunctions_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "funnel_", "LComGoogleCommonHashFunnel;", .constantValue.asLong = 0, 0x12, -1, -1, 39, -1 },
    { "strategy_", "LComGoogleCommonHashBloomFilter_Strategy;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonHashBloomFilterStrategies_BitArray;ILComGoogleCommonHashFunnel;LComGoogleCommonHashBloomFilter_Strategy;", "(Lcom/google/common/hash/BloomFilterStrategies$BitArray;ILcom/google/common/hash/Funnel<-TT;>;Lcom/google/common/hash/BloomFilter$Strategy;)V", "copy", "()Lcom/google/common/hash/BloomFilter<TT;>;", "mightContain", "LNSObject;", "(TT;)Z", "apply", (void *)&ComGoogleCommonHashBloomFilter__Annotations$0, "put", "isCompatible", "LComGoogleCommonHashBloomFilter;", "(Lcom/google/common/hash/BloomFilter<TT;>;)Z", "putAll", "(Lcom/google/common/hash/BloomFilter<TT;>;)V", "equals", (void *)&ComGoogleCommonHashBloomFilter__Annotations$1, "hashCode", "create", "LComGoogleCommonHashFunnel;ID", "<T:Ljava/lang/Object;>(Lcom/google/common/hash/Funnel<-TT;>;ID)Lcom/google/common/hash/BloomFilter<TT;>;", "LComGoogleCommonHashFunnel;JD", "<T:Ljava/lang/Object;>(Lcom/google/common/hash/Funnel<-TT;>;JD)Lcom/google/common/hash/BloomFilter<TT;>;", "LComGoogleCommonHashFunnel;JDLComGoogleCommonHashBloomFilter_Strategy;", "<T:Ljava/lang/Object;>(Lcom/google/common/hash/Funnel<-TT;>;JDLcom/google/common/hash/BloomFilter$Strategy;)Lcom/google/common/hash/BloomFilter<TT;>;", "LComGoogleCommonHashFunnel;I", "<T:Ljava/lang/Object;>(Lcom/google/common/hash/Funnel<-TT;>;I)Lcom/google/common/hash/BloomFilter<TT;>;", "LComGoogleCommonHashFunnel;J", "<T:Ljava/lang/Object;>(Lcom/google/common/hash/Funnel<-TT;>;J)Lcom/google/common/hash/BloomFilter<TT;>;", "optimalNumOfHashFunctions", "JJ", "optimalNumOfBits", "JD", "writeTo", "LJavaIoOutputStream;", "LJavaIoIOException;", "readFrom", "LJavaIoInputStream;LComGoogleCommonHashFunnel;", "<T:Ljava/lang/Object;>(Ljava/io/InputStream;Lcom/google/common/hash/Funnel<-TT;>;)Lcom/google/common/hash/BloomFilter<TT;>;", "Lcom/google/common/hash/Funnel<-TT;>;", "LComGoogleCommonHashBloomFilter_Strategy;LComGoogleCommonHashBloomFilter_SerialForm;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lcom/google/common/base/Predicate<TT;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _ComGoogleCommonHashBloomFilter = { "BloomFilter", "com.google.common.hash", ptrTable, methods, fields, 7, 0x11, 22, 4, -1, 40, -1, 41, -1 };
  return &_ComGoogleCommonHashBloomFilter;
}

@end

void ComGoogleCommonHashBloomFilter_initWithComGoogleCommonHashBloomFilterStrategies_BitArray_withInt_withComGoogleCommonHashFunnel_withComGoogleCommonHashBloomFilter_Strategy_(ComGoogleCommonHashBloomFilter *self, ComGoogleCommonHashBloomFilterStrategies_BitArray *bits, jint numHashFunctions, id<ComGoogleCommonHashFunnel> funnel, id<ComGoogleCommonHashBloomFilter_Strategy> strategy) {
  NSObject_init(self);
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withInt_(numHashFunctions > 0, @"numHashFunctions (%s) must be > 0", numHashFunctions);
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withInt_(numHashFunctions <= 255, @"numHashFunctions (%s) must be <= 255", numHashFunctions);
  self->bits_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(bits);
  self->numHashFunctions_ = numHashFunctions;
  self->funnel_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(funnel);
  self->strategy_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(strategy);
}

ComGoogleCommonHashBloomFilter *new_ComGoogleCommonHashBloomFilter_initWithComGoogleCommonHashBloomFilterStrategies_BitArray_withInt_withComGoogleCommonHashFunnel_withComGoogleCommonHashBloomFilter_Strategy_(ComGoogleCommonHashBloomFilterStrategies_BitArray *bits, jint numHashFunctions, id<ComGoogleCommonHashFunnel> funnel, id<ComGoogleCommonHashBloomFilter_Strategy> strategy) {
  J2OBJC_NEW_IMPL(ComGoogleCommonHashBloomFilter, initWithComGoogleCommonHashBloomFilterStrategies_BitArray_withInt_withComGoogleCommonHashFunnel_withComGoogleCommonHashBloomFilter_Strategy_, bits, numHashFunctions, funnel, strategy)
}

ComGoogleCommonHashBloomFilter *create_ComGoogleCommonHashBloomFilter_initWithComGoogleCommonHashBloomFilterStrategies_BitArray_withInt_withComGoogleCommonHashFunnel_withComGoogleCommonHashBloomFilter_Strategy_(ComGoogleCommonHashBloomFilterStrategies_BitArray *bits, jint numHashFunctions, id<ComGoogleCommonHashFunnel> funnel, id<ComGoogleCommonHashBloomFilter_Strategy> strategy) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonHashBloomFilter, initWithComGoogleCommonHashBloomFilterStrategies_BitArray_withInt_withComGoogleCommonHashFunnel_withComGoogleCommonHashBloomFilter_Strategy_, bits, numHashFunctions, funnel, strategy)
}

ComGoogleCommonHashBloomFilter *ComGoogleCommonHashBloomFilter_createWithComGoogleCommonHashFunnel_withInt_withDouble_(id<ComGoogleCommonHashFunnel> funnel, jint expectedInsertions, jdouble fpp) {
  ComGoogleCommonHashBloomFilter_initialize();
  return ComGoogleCommonHashBloomFilter_createWithComGoogleCommonHashFunnel_withLong_withDouble_(funnel, (jlong) expectedInsertions, fpp);
}

ComGoogleCommonHashBloomFilter *ComGoogleCommonHashBloomFilter_createWithComGoogleCommonHashFunnel_withLong_withDouble_(id<ComGoogleCommonHashFunnel> funnel, jlong expectedInsertions, jdouble fpp) {
  ComGoogleCommonHashBloomFilter_initialize();
  return ComGoogleCommonHashBloomFilter_createWithComGoogleCommonHashFunnel_withLong_withDouble_withComGoogleCommonHashBloomFilter_Strategy_(funnel, expectedInsertions, fpp, JreLoadEnum(ComGoogleCommonHashBloomFilterStrategies, MURMUR128_MITZ_64));
}

ComGoogleCommonHashBloomFilter *ComGoogleCommonHashBloomFilter_createWithComGoogleCommonHashFunnel_withLong_withDouble_withComGoogleCommonHashBloomFilter_Strategy_(id<ComGoogleCommonHashFunnel> funnel, jlong expectedInsertions, jdouble fpp, id<ComGoogleCommonHashBloomFilter_Strategy> strategy) {
  ComGoogleCommonHashBloomFilter_initialize();
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(funnel);
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withLong_(expectedInsertions >= 0, @"Expected insertions (%s) must be >= 0", expectedInsertions);
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_(fpp > 0.0, @"False positive probability (%s) must be > 0.0", JavaLangDouble_valueOfWithDouble_(fpp));
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_(fpp < 1.0, @"False positive probability (%s) must be < 1.0", JavaLangDouble_valueOfWithDouble_(fpp));
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(strategy);
  if (expectedInsertions == 0) {
    expectedInsertions = 1;
  }
  jlong numBits = ComGoogleCommonHashBloomFilter_optimalNumOfBitsWithLong_withDouble_(expectedInsertions, fpp);
  jint numHashFunctions = ComGoogleCommonHashBloomFilter_optimalNumOfHashFunctionsWithLong_withLong_(expectedInsertions, numBits);
  @try {
    return new_ComGoogleCommonHashBloomFilter_initWithComGoogleCommonHashBloomFilterStrategies_BitArray_withInt_withComGoogleCommonHashFunnel_withComGoogleCommonHashBloomFilter_Strategy_(new_ComGoogleCommonHashBloomFilterStrategies_BitArray_initWithLong_(numBits), numHashFunctions, funnel, strategy);
  }
  @catch (JavaLangIllegalArgumentException *e) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_withNSException_(JreStrcat("$J$", @"Could not create BloomFilter of ", numBits, @" bits"), e);
  }
}

ComGoogleCommonHashBloomFilter *ComGoogleCommonHashBloomFilter_createWithComGoogleCommonHashFunnel_withInt_(id<ComGoogleCommonHashFunnel> funnel, jint expectedInsertions) {
  ComGoogleCommonHashBloomFilter_initialize();
  return ComGoogleCommonHashBloomFilter_createWithComGoogleCommonHashFunnel_withLong_(funnel, (jlong) expectedInsertions);
}

ComGoogleCommonHashBloomFilter *ComGoogleCommonHashBloomFilter_createWithComGoogleCommonHashFunnel_withLong_(id<ComGoogleCommonHashFunnel> funnel, jlong expectedInsertions) {
  ComGoogleCommonHashBloomFilter_initialize();
  return ComGoogleCommonHashBloomFilter_createWithComGoogleCommonHashFunnel_withLong_withDouble_(funnel, expectedInsertions, 0.03);
}

jint ComGoogleCommonHashBloomFilter_optimalNumOfHashFunctionsWithLong_withLong_(jlong n, jlong m) {
  ComGoogleCommonHashBloomFilter_initialize();
  return JavaLangMath_maxWithInt_withInt_(1, (jint) JavaLangMath_roundWithDouble_((jdouble) m / n * JavaLangMath_logWithDouble_(2)));
}

jlong ComGoogleCommonHashBloomFilter_optimalNumOfBitsWithLong_withDouble_(jlong n, jdouble p) {
  ComGoogleCommonHashBloomFilter_initialize();
  if (p == 0) {
    p = JavaLangDouble_MIN_VALUE;
  }
  return JreFpToLong((-n * JavaLangMath_logWithDouble_(p) / (JavaLangMath_logWithDouble_(2) * JavaLangMath_logWithDouble_(2))));
}

ComGoogleCommonHashBloomFilter *ComGoogleCommonHashBloomFilter_readFromWithJavaIoInputStream_withComGoogleCommonHashFunnel_(JavaIoInputStream *inArg, id<ComGoogleCommonHashFunnel> funnel) {
  ComGoogleCommonHashBloomFilter_initialize();
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_withId_(inArg, @"InputStream");
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_withId_(funnel, @"Funnel");
  jint strategyOrdinal = -1;
  jint numHashFunctions = -1;
  jint dataLength = -1;
  @try {
    JavaIoDataInputStream *din = new_JavaIoDataInputStream_initWithJavaIoInputStream_(inArg);
    strategyOrdinal = [din readByte];
    numHashFunctions = ComGoogleCommonPrimitivesUnsignedBytes_toIntWithByte_([din readByte]);
    dataLength = [din readInt];
    id<ComGoogleCommonHashBloomFilter_Strategy> strategy = IOSObjectArray_Get(nil_chk(ComGoogleCommonHashBloomFilterStrategies_values()), strategyOrdinal);
    IOSLongArray *data = [IOSLongArray newArrayWithLength:dataLength];
    for (jint i = 0; i < data->size_; i++) {
      *IOSLongArray_GetRef(data, i) = [din readLong];
    }
    return new_ComGoogleCommonHashBloomFilter_initWithComGoogleCommonHashBloomFilterStrategies_BitArray_withInt_withComGoogleCommonHashFunnel_withComGoogleCommonHashBloomFilter_Strategy_(new_ComGoogleCommonHashBloomFilterStrategies_BitArray_initWithLongArray_(data), numHashFunctions, funnel, strategy);
  }
  @catch (JavaLangRuntimeException *e) {
    NSString *message = JreStrcat("$I$I$I", @"Unable to deserialize BloomFilter from InputStream. strategyOrdinal: ", strategyOrdinal, @" numHashFunctions: ", numHashFunctions, @" dataLength: ", dataLength);
    @throw new_JavaIoIOException_initWithNSString_withNSException_(message, e);
  }
}

IOSObjectArray *ComGoogleCommonHashBloomFilter__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonHashBloomFilter__Annotations$1() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonHashBloomFilter)

@implementation ComGoogleCommonHashBloomFilter_Strategy

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x401, 0, 1, -1, 2, -1, -1 },
    { NULL, "Z", 0x401, 3, 1, -1, 2, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(putWithId:withComGoogleCommonHashFunnel:withInt:withComGoogleCommonHashBloomFilterStrategies_BitArray:);
  methods[1].selector = @selector(mightContainWithId:withComGoogleCommonHashFunnel:withInt:withComGoogleCommonHashBloomFilterStrategies_BitArray:);
  methods[2].selector = @selector(ordinal);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "put", "LNSObject;LComGoogleCommonHashFunnel;ILComGoogleCommonHashBloomFilterStrategies_BitArray;", "<T:Ljava/lang/Object;>(TT;Lcom/google/common/hash/Funnel<-TT;>;ILcom/google/common/hash/BloomFilterStrategies$BitArray;)Z", "mightContain", "LComGoogleCommonHashBloomFilter;" };
  static const J2ObjcClassInfo _ComGoogleCommonHashBloomFilter_Strategy = { "Strategy", "com.google.common.hash", ptrTable, methods, NULL, 7, 0x608, 3, 0, 4, -1, -1, -1, -1 };
  return &_ComGoogleCommonHashBloomFilter_Strategy;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ComGoogleCommonHashBloomFilter_Strategy)

@implementation ComGoogleCommonHashBloomFilter_SerialForm

- (instancetype)initWithComGoogleCommonHashBloomFilter:(ComGoogleCommonHashBloomFilter *)bf {
  ComGoogleCommonHashBloomFilter_SerialForm_initWithComGoogleCommonHashBloomFilter_(self, bf);
  return self;
}

- (id)readResolve {
  return new_ComGoogleCommonHashBloomFilter_initWithComGoogleCommonHashBloomFilterStrategies_BitArray_withInt_withComGoogleCommonHashFunnel_withComGoogleCommonHashBloomFilter_Strategy_(new_ComGoogleCommonHashBloomFilterStrategies_BitArray_initWithLongArray_(data_), numHashFunctions_, funnel_, strategy_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonHashBloomFilter:);
  methods[1].selector = @selector(readResolve);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "data_", "[J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "numHashFunctions_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "funnel_", "LComGoogleCommonHashFunnel;", .constantValue.asLong = 0, 0x10, -1, -1, 2, -1 },
    { "strategy_", "LComGoogleCommonHashBloomFilter_Strategy;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = ComGoogleCommonHashBloomFilter_SerialForm_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonHashBloomFilter;", "(Lcom/google/common/hash/BloomFilter<TT;>;)V", "Lcom/google/common/hash/Funnel<-TT;>;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _ComGoogleCommonHashBloomFilter_SerialForm = { "SerialForm", "com.google.common.hash", ptrTable, methods, fields, 7, 0xa, 2, 5, 0, -1, -1, 3, -1 };
  return &_ComGoogleCommonHashBloomFilter_SerialForm;
}

@end

void ComGoogleCommonHashBloomFilter_SerialForm_initWithComGoogleCommonHashBloomFilter_(ComGoogleCommonHashBloomFilter_SerialForm *self, ComGoogleCommonHashBloomFilter *bf) {
  NSObject_init(self);
  self->data_ = ((ComGoogleCommonHashBloomFilterStrategies_BitArray *) nil_chk(((ComGoogleCommonHashBloomFilter *) nil_chk(bf))->bits_))->data_;
  self->numHashFunctions_ = bf->numHashFunctions_;
  self->funnel_ = bf->funnel_;
  self->strategy_ = bf->strategy_;
}

ComGoogleCommonHashBloomFilter_SerialForm *new_ComGoogleCommonHashBloomFilter_SerialForm_initWithComGoogleCommonHashBloomFilter_(ComGoogleCommonHashBloomFilter *bf) {
  J2OBJC_NEW_IMPL(ComGoogleCommonHashBloomFilter_SerialForm, initWithComGoogleCommonHashBloomFilter_, bf)
}

ComGoogleCommonHashBloomFilter_SerialForm *create_ComGoogleCommonHashBloomFilter_SerialForm_initWithComGoogleCommonHashBloomFilter_(ComGoogleCommonHashBloomFilter *bf) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonHashBloomFilter_SerialForm, initWithComGoogleCommonHashBloomFilter_, bf)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonHashBloomFilter_SerialForm)
