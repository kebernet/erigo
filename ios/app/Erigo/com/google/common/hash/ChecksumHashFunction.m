//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/hash/ChecksumHashFunction.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/base/Supplier.h"
#include "com/google/common/hash/AbstractByteHasher.h"
#include "com/google/common/hash/AbstractStreamingHashFunction.h"
#include "com/google/common/hash/ChecksumHashFunction.h"
#include "com/google/common/hash/HashCode.h"
#include "com/google/common/hash/Hasher.h"
#include "java/util/zip/Checksum.h"

@interface ComGoogleCommonHashChecksumHashFunction () {
 @public
  id<ComGoogleCommonBaseSupplier> checksumSupplier_;
  jint bits_;
  NSString *toString_;
}

@end

J2OBJC_FIELD_SETTER(ComGoogleCommonHashChecksumHashFunction, checksumSupplier_, id<ComGoogleCommonBaseSupplier>)
J2OBJC_FIELD_SETTER(ComGoogleCommonHashChecksumHashFunction, toString_, NSString *)

inline jlong ComGoogleCommonHashChecksumHashFunction_get_serialVersionUID();
#define ComGoogleCommonHashChecksumHashFunction_serialVersionUID 0LL
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonHashChecksumHashFunction, serialVersionUID, jlong)

@interface ComGoogleCommonHashChecksumHashFunction_ChecksumHasher : ComGoogleCommonHashAbstractByteHasher {
 @public
  ComGoogleCommonHashChecksumHashFunction *this$0_;
  id<JavaUtilZipChecksum> checksum_;
}

- (instancetype)initWithComGoogleCommonHashChecksumHashFunction:(ComGoogleCommonHashChecksumHashFunction *)outer$
                                        withJavaUtilZipChecksum:(id<JavaUtilZipChecksum>)checksum;

- (void)updateWithByte:(jbyte)b;

- (void)updateWithByteArray:(IOSByteArray *)bytes
                    withInt:(jint)off
                    withInt:(jint)len;

- (ComGoogleCommonHashHashCode *)hash__;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonHashChecksumHashFunction_ChecksumHasher)

J2OBJC_FIELD_SETTER(ComGoogleCommonHashChecksumHashFunction_ChecksumHasher, checksum_, id<JavaUtilZipChecksum>)

__attribute__((unused)) static void ComGoogleCommonHashChecksumHashFunction_ChecksumHasher_initWithComGoogleCommonHashChecksumHashFunction_withJavaUtilZipChecksum_(ComGoogleCommonHashChecksumHashFunction_ChecksumHasher *self, ComGoogleCommonHashChecksumHashFunction *outer$, id<JavaUtilZipChecksum> checksum);

__attribute__((unused)) static ComGoogleCommonHashChecksumHashFunction_ChecksumHasher *new_ComGoogleCommonHashChecksumHashFunction_ChecksumHasher_initWithComGoogleCommonHashChecksumHashFunction_withJavaUtilZipChecksum_(ComGoogleCommonHashChecksumHashFunction *outer$, id<JavaUtilZipChecksum> checksum) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonHashChecksumHashFunction_ChecksumHasher *create_ComGoogleCommonHashChecksumHashFunction_ChecksumHasher_initWithComGoogleCommonHashChecksumHashFunction_withJavaUtilZipChecksum_(ComGoogleCommonHashChecksumHashFunction *outer$, id<JavaUtilZipChecksum> checksum);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonHashChecksumHashFunction_ChecksumHasher)

@implementation ComGoogleCommonHashChecksumHashFunction

- (instancetype)initWithComGoogleCommonBaseSupplier:(id<ComGoogleCommonBaseSupplier>)checksumSupplier
                                            withInt:(jint)bits
                                       withNSString:(NSString *)toString {
  ComGoogleCommonHashChecksumHashFunction_initWithComGoogleCommonBaseSupplier_withInt_withNSString_(self, checksumSupplier, bits, toString);
  return self;
}

- (jint)bits {
  return bits_;
}

- (id<ComGoogleCommonHashHasher>)newHasher {
  return new_ComGoogleCommonHashChecksumHashFunction_ChecksumHasher_initWithComGoogleCommonHashChecksumHashFunction_withJavaUtilZipChecksum_(self, [((id<ComGoogleCommonBaseSupplier>) nil_chk(checksumSupplier_)) get]);
}

- (NSString *)description {
  return toString_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonHashHasher;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonBaseSupplier:withInt:withNSString:);
  methods[1].selector = @selector(bits);
  methods[2].selector = @selector(newHasher);
  methods[3].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "checksumSupplier_", "LComGoogleCommonBaseSupplier;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
    { "bits_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "toString_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = ComGoogleCommonHashChecksumHashFunction_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonBaseSupplier;ILNSString;", "(Lcom/google/common/base/Supplier<+Ljava/util/zip/Checksum;>;ILjava/lang/String;)V", "toString", "Lcom/google/common/base/Supplier<+Ljava/util/zip/Checksum;>;", "LComGoogleCommonHashChecksumHashFunction_ChecksumHasher;" };
  static const J2ObjcClassInfo _ComGoogleCommonHashChecksumHashFunction = { "ChecksumHashFunction", "com.google.common.hash", ptrTable, methods, fields, 7, 0x10, 4, 4, -1, 4, -1, -1, -1 };
  return &_ComGoogleCommonHashChecksumHashFunction;
}

@end

void ComGoogleCommonHashChecksumHashFunction_initWithComGoogleCommonBaseSupplier_withInt_withNSString_(ComGoogleCommonHashChecksumHashFunction *self, id<ComGoogleCommonBaseSupplier> checksumSupplier, jint bits, NSString *toString) {
  ComGoogleCommonHashAbstractStreamingHashFunction_init(self);
  self->checksumSupplier_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(checksumSupplier);
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withInt_(bits == 32 || bits == 64, @"bits (%s) must be either 32 or 64", bits);
  self->bits_ = bits;
  self->toString_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(toString);
}

ComGoogleCommonHashChecksumHashFunction *new_ComGoogleCommonHashChecksumHashFunction_initWithComGoogleCommonBaseSupplier_withInt_withNSString_(id<ComGoogleCommonBaseSupplier> checksumSupplier, jint bits, NSString *toString) {
  J2OBJC_NEW_IMPL(ComGoogleCommonHashChecksumHashFunction, initWithComGoogleCommonBaseSupplier_withInt_withNSString_, checksumSupplier, bits, toString)
}

ComGoogleCommonHashChecksumHashFunction *create_ComGoogleCommonHashChecksumHashFunction_initWithComGoogleCommonBaseSupplier_withInt_withNSString_(id<ComGoogleCommonBaseSupplier> checksumSupplier, jint bits, NSString *toString) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonHashChecksumHashFunction, initWithComGoogleCommonBaseSupplier_withInt_withNSString_, checksumSupplier, bits, toString)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonHashChecksumHashFunction)

@implementation ComGoogleCommonHashChecksumHashFunction_ChecksumHasher

- (instancetype)initWithComGoogleCommonHashChecksumHashFunction:(ComGoogleCommonHashChecksumHashFunction *)outer$
                                        withJavaUtilZipChecksum:(id<JavaUtilZipChecksum>)checksum {
  ComGoogleCommonHashChecksumHashFunction_ChecksumHasher_initWithComGoogleCommonHashChecksumHashFunction_withJavaUtilZipChecksum_(self, outer$, checksum);
  return self;
}

- (void)updateWithByte:(jbyte)b {
  [((id<JavaUtilZipChecksum>) nil_chk(checksum_)) updateWithInt:b];
}

- (void)updateWithByteArray:(IOSByteArray *)bytes
                    withInt:(jint)off
                    withInt:(jint)len {
  [((id<JavaUtilZipChecksum>) nil_chk(checksum_)) updateWithByteArray:bytes withInt:off withInt:len];
}

- (ComGoogleCommonHashHashCode *)hash__ {
  jlong value = [((id<JavaUtilZipChecksum>) nil_chk(checksum_)) getValue];
  if (this$0_->bits_ == 32) {
    return ComGoogleCommonHashHashCode_fromIntWithInt_((jint) value);
  }
  else {
    return ComGoogleCommonHashHashCode_fromLongWithLong_(value);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 3, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonHashHashCode;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonHashChecksumHashFunction:withJavaUtilZipChecksum:);
  methods[1].selector = @selector(updateWithByte:);
  methods[2].selector = @selector(updateWithByteArray:withInt:withInt:);
  methods[3].selector = @selector(hash__);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonHashChecksumHashFunction;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "checksum_", "LJavaUtilZipChecksum;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilZipChecksum;", "update", "B", "[BII", "hash", "LComGoogleCommonHashChecksumHashFunction;" };
  static const J2ObjcClassInfo _ComGoogleCommonHashChecksumHashFunction_ChecksumHasher = { "ChecksumHasher", "com.google.common.hash", ptrTable, methods, fields, 7, 0x12, 4, 2, 5, -1, -1, -1, -1 };
  return &_ComGoogleCommonHashChecksumHashFunction_ChecksumHasher;
}

@end

void ComGoogleCommonHashChecksumHashFunction_ChecksumHasher_initWithComGoogleCommonHashChecksumHashFunction_withJavaUtilZipChecksum_(ComGoogleCommonHashChecksumHashFunction_ChecksumHasher *self, ComGoogleCommonHashChecksumHashFunction *outer$, id<JavaUtilZipChecksum> checksum) {
  self->this$0_ = outer$;
  ComGoogleCommonHashAbstractByteHasher_init(self);
  self->checksum_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(checksum);
}

ComGoogleCommonHashChecksumHashFunction_ChecksumHasher *new_ComGoogleCommonHashChecksumHashFunction_ChecksumHasher_initWithComGoogleCommonHashChecksumHashFunction_withJavaUtilZipChecksum_(ComGoogleCommonHashChecksumHashFunction *outer$, id<JavaUtilZipChecksum> checksum) {
  J2OBJC_NEW_IMPL(ComGoogleCommonHashChecksumHashFunction_ChecksumHasher, initWithComGoogleCommonHashChecksumHashFunction_withJavaUtilZipChecksum_, outer$, checksum)
}

ComGoogleCommonHashChecksumHashFunction_ChecksumHasher *create_ComGoogleCommonHashChecksumHashFunction_ChecksumHasher_initWithComGoogleCommonHashChecksumHashFunction_withJavaUtilZipChecksum_(ComGoogleCommonHashChecksumHashFunction *outer$, id<JavaUtilZipChecksum> checksum) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonHashChecksumHashFunction_ChecksumHasher, initWithComGoogleCommonHashChecksumHashFunction_withJavaUtilZipChecksum_, outer$, checksum)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonHashChecksumHashFunction_ChecksumHasher)
