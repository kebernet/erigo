//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/hash/Crc32cHashFunction.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/hash/AbstractByteHasher.h"
#include "com/google/common/hash/AbstractStreamingHashFunction.h"
#include "com/google/common/hash/Crc32cHashFunction.h"
#include "com/google/common/hash/HashCode.h"
#include "com/google/common/hash/Hasher.h"

@interface ComGoogleCommonHashCrc32cHashFunction_Crc32cHasher () {
 @public
  jint crc_;
}

@end

@implementation ComGoogleCommonHashCrc32cHashFunction

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonHashCrc32cHashFunction_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)bits {
  return 32;
}

- (id<ComGoogleCommonHashHasher>)newHasher {
  return new_ComGoogleCommonHashCrc32cHashFunction_Crc32cHasher_init();
}

- (NSString *)description {
  return @"Hashing.crc32c()";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonHashHasher;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(bits);
  methods[2].selector = @selector(newHasher);
  methods[3].selector = @selector(description);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "toString", "LComGoogleCommonHashCrc32cHashFunction_Crc32cHasher;" };
  static const J2ObjcClassInfo _ComGoogleCommonHashCrc32cHashFunction = { "Crc32cHashFunction", "com.google.common.hash", ptrTable, methods, NULL, 7, 0x10, 4, 0, -1, 1, -1, -1, -1 };
  return &_ComGoogleCommonHashCrc32cHashFunction;
}

@end

void ComGoogleCommonHashCrc32cHashFunction_init(ComGoogleCommonHashCrc32cHashFunction *self) {
  ComGoogleCommonHashAbstractStreamingHashFunction_init(self);
}

ComGoogleCommonHashCrc32cHashFunction *new_ComGoogleCommonHashCrc32cHashFunction_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonHashCrc32cHashFunction, init)
}

ComGoogleCommonHashCrc32cHashFunction *create_ComGoogleCommonHashCrc32cHashFunction_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonHashCrc32cHashFunction, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonHashCrc32cHashFunction)

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonHashCrc32cHashFunction_Crc32cHasher)

IOSIntArray *ComGoogleCommonHashCrc32cHashFunction_Crc32cHasher_CRC_TABLE;

@implementation ComGoogleCommonHashCrc32cHashFunction_Crc32cHasher

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonHashCrc32cHashFunction_Crc32cHasher_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)updateWithByte:(jbyte)b {
  crc_ ^= (jint) 0xFFFFFFFF;
  crc_ = ~((JreURShift32(crc_, 8)) ^ IOSIntArray_Get(nil_chk(ComGoogleCommonHashCrc32cHashFunction_Crc32cHasher_CRC_TABLE), (crc_ ^ b) & (jint) 0xFF));
}

- (ComGoogleCommonHashHashCode *)hash__ {
  return ComGoogleCommonHashHashCode_fromIntWithInt_(crc_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonHashHashCode;", 0x1, 2, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(updateWithByte:);
  methods[2].selector = @selector(hash__);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CRC_TABLE", "[I", .constantValue.asLong = 0, 0x18, -1, 3, -1, -1 },
    { "crc_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "update", "B", "hash", &ComGoogleCommonHashCrc32cHashFunction_Crc32cHasher_CRC_TABLE, "LComGoogleCommonHashCrc32cHashFunction;" };
  static const J2ObjcClassInfo _ComGoogleCommonHashCrc32cHashFunction_Crc32cHasher = { "Crc32cHasher", "com.google.common.hash", ptrTable, methods, fields, 7, 0x18, 3, 2, 4, -1, -1, -1, -1 };
  return &_ComGoogleCommonHashCrc32cHashFunction_Crc32cHasher;
}

+ (void)initialize {
  if (self == [ComGoogleCommonHashCrc32cHashFunction_Crc32cHasher class]) {
    ComGoogleCommonHashCrc32cHashFunction_Crc32cHasher_CRC_TABLE = [IOSIntArray newArrayWithInts:(jint[]){ (jint) 0x00000000, (jint) 0xf26b8303, (jint) 0xe13b70f7, (jint) 0x1350f3f4, (jint) 0xc79a971f, (jint) 0x35f1141c, (jint) 0x26a1e7e8, (jint) 0xd4ca64eb, (jint) 0x8ad958cf, (jint) 0x78b2dbcc, (jint) 0x6be22838, (jint) 0x9989ab3b, (jint) 0x4d43cfd0, (jint) 0xbf284cd3, (jint) 0xac78bf27, (jint) 0x5e133c24, (jint) 0x105ec76f, (jint) 0xe235446c, (jint) 0xf165b798, (jint) 0x030e349b, (jint) 0xd7c45070, (jint) 0x25afd373, (jint) 0x36ff2087, (jint) 0xc494a384, (jint) 0x9a879fa0, (jint) 0x68ec1ca3, (jint) 0x7bbcef57, (jint) 0x89d76c54, (jint) 0x5d1d08bf, (jint) 0xaf768bbc, (jint) 0xbc267848, (jint) 0x4e4dfb4b, (jint) 0x20bd8ede, (jint) 0xd2d60ddd, (jint) 0xc186fe29, (jint) 0x33ed7d2a, (jint) 0xe72719c1, (jint) 0x154c9ac2, (jint) 0x061c6936, (jint) 0xf477ea35, (jint) 0xaa64d611, (jint) 0x580f5512, (jint) 0x4b5fa6e6, (jint) 0xb93425e5, (jint) 0x6dfe410e, (jint) 0x9f95c20d, (jint) 0x8cc531f9, (jint) 0x7eaeb2fa, (jint) 0x30e349b1, (jint) 0xc288cab2, (jint) 0xd1d83946, (jint) 0x23b3ba45, (jint) 0xf779deae, (jint) 0x05125dad, (jint) 0x1642ae59, (jint) 0xe4292d5a, (jint) 0xba3a117e, (jint) 0x4851927d, (jint) 0x5b016189, (jint) 0xa96ae28a, (jint) 0x7da08661, (jint) 0x8fcb0562, (jint) 0x9c9bf696, (jint) 0x6ef07595, (jint) 0x417b1dbc, (jint) 0xb3109ebf, (jint) 0xa0406d4b, (jint) 0x522bee48, (jint) 0x86e18aa3, (jint) 0x748a09a0, (jint) 0x67dafa54, (jint) 0x95b17957, (jint) 0xcba24573, (jint) 0x39c9c670, (jint) 0x2a993584, (jint) 0xd8f2b687, (jint) 0x0c38d26c, (jint) 0xfe53516f, (jint) 0xed03a29b, (jint) 0x1f682198, (jint) 0x5125dad3, (jint) 0xa34e59d0, (jint) 0xb01eaa24, (jint) 0x42752927, (jint) 0x96bf4dcc, (jint) 0x64d4cecf, (jint) 0x77843d3b, (jint) 0x85efbe38, (jint) 0xdbfc821c, (jint) 0x2997011f, (jint) 0x3ac7f2eb, (jint) 0xc8ac71e8, (jint) 0x1c661503, (jint) 0xee0d9600, (jint) 0xfd5d65f4, (jint) 0x0f36e6f7, (jint) 0x61c69362, (jint) 0x93ad1061, (jint) 0x80fde395, (jint) 0x72966096, (jint) 0xa65c047d, (jint) 0x5437877e, (jint) 0x4767748a, (jint) 0xb50cf789, (jint) 0xeb1fcbad, (jint) 0x197448ae, (jint) 0x0a24bb5a, (jint) 0xf84f3859, (jint) 0x2c855cb2, (jint) 0xdeeedfb1, (jint) 0xcdbe2c45, (jint) 0x3fd5af46, (jint) 0x7198540d, (jint) 0x83f3d70e, (jint) 0x90a324fa, (jint) 0x62c8a7f9, (jint) 0xb602c312, (jint) 0x44694011, (jint) 0x5739b3e5, (jint) 0xa55230e6, (jint) 0xfb410cc2, (jint) 0x092a8fc1, (jint) 0x1a7a7c35, (jint) 0xe811ff36, (jint) 0x3cdb9bdd, (jint) 0xceb018de, (jint) 0xdde0eb2a, (jint) 0x2f8b6829, (jint) 0x82f63b78, (jint) 0x709db87b, (jint) 0x63cd4b8f, (jint) 0x91a6c88c, (jint) 0x456cac67, (jint) 0xb7072f64, (jint) 0xa457dc90, (jint) 0x563c5f93, (jint) 0x082f63b7, (jint) 0xfa44e0b4, (jint) 0xe9141340, (jint) 0x1b7f9043, (jint) 0xcfb5f4a8, (jint) 0x3dde77ab, (jint) 0x2e8e845f, (jint) 0xdce5075c, (jint) 0x92a8fc17, (jint) 0x60c37f14, (jint) 0x73938ce0, (jint) 0x81f80fe3, (jint) 0x55326b08, (jint) 0xa759e80b, (jint) 0xb4091bff, (jint) 0x466298fc, (jint) 0x1871a4d8, (jint) 0xea1a27db, (jint) 0xf94ad42f, (jint) 0x0b21572c, (jint) 0xdfeb33c7, (jint) 0x2d80b0c4, (jint) 0x3ed04330, (jint) 0xccbbc033, (jint) 0xa24bb5a6, (jint) 0x502036a5, (jint) 0x4370c551, (jint) 0xb11b4652, (jint) 0x65d122b9, (jint) 0x97baa1ba, (jint) 0x84ea524e, (jint) 0x7681d14d, (jint) 0x2892ed69, (jint) 0xdaf96e6a, (jint) 0xc9a99d9e, (jint) 0x3bc21e9d, (jint) 0xef087a76, (jint) 0x1d63f975, (jint) 0x0e330a81, (jint) 0xfc588982, (jint) 0xb21572c9, (jint) 0x407ef1ca, (jint) 0x532e023e, (jint) 0xa145813d, (jint) 0x758fe5d6, (jint) 0x87e466d5, (jint) 0x94b49521, (jint) 0x66df1622, (jint) 0x38cc2a06, (jint) 0xcaa7a905, (jint) 0xd9f75af1, (jint) 0x2b9cd9f2, (jint) 0xff56bd19, (jint) 0x0d3d3e1a, (jint) 0x1e6dcdee, (jint) 0xec064eed, (jint) 0xc38d26c4, (jint) 0x31e6a5c7, (jint) 0x22b65633, (jint) 0xd0ddd530, (jint) 0x0417b1db, (jint) 0xf67c32d8, (jint) 0xe52cc12c, (jint) 0x1747422f, (jint) 0x49547e0b, (jint) 0xbb3ffd08, (jint) 0xa86f0efc, (jint) 0x5a048dff, (jint) 0x8ecee914, (jint) 0x7ca56a17, (jint) 0x6ff599e3, (jint) 0x9d9e1ae0, (jint) 0xd3d3e1ab, (jint) 0x21b862a8, (jint) 0x32e8915c, (jint) 0xc083125f, (jint) 0x144976b4, (jint) 0xe622f5b7, (jint) 0xf5720643, (jint) 0x07198540, (jint) 0x590ab964, (jint) 0xab613a67, (jint) 0xb831c993, (jint) 0x4a5a4a90, (jint) 0x9e902e7b, (jint) 0x6cfbad78, (jint) 0x7fab5e8c, (jint) 0x8dc0dd8f, (jint) 0xe330a81a, (jint) 0x115b2b19, (jint) 0x020bd8ed, (jint) 0xf0605bee, (jint) 0x24aa3f05, (jint) 0xd6c1bc06, (jint) 0xc5914ff2, (jint) 0x37faccf1, (jint) 0x69e9f0d5, (jint) 0x9b8273d6, (jint) 0x88d28022, (jint) 0x7ab90321, (jint) 0xae7367ca, (jint) 0x5c18e4c9, (jint) 0x4f48173d, (jint) 0xbd23943e, (jint) 0xf36e6f75, (jint) 0x0105ec76, (jint) 0x12551f82, (jint) 0xe03e9c81, (jint) 0x34f4f86a, (jint) 0xc69f7b69, (jint) 0xd5cf889d, (jint) 0x27a40b9e, (jint) 0x79b737ba, (jint) 0x8bdcb4b9, (jint) 0x988c474d, (jint) 0x6ae7c44e, (jint) 0xbe2da0a5, (jint) 0x4c4623a6, (jint) 0x5f16d052, (jint) 0xad7d5351 } count:256];
    J2OBJC_SET_INITIALIZED(ComGoogleCommonHashCrc32cHashFunction_Crc32cHasher)
  }
}

@end

void ComGoogleCommonHashCrc32cHashFunction_Crc32cHasher_init(ComGoogleCommonHashCrc32cHashFunction_Crc32cHasher *self) {
  ComGoogleCommonHashAbstractByteHasher_init(self);
  self->crc_ = 0;
}

ComGoogleCommonHashCrc32cHashFunction_Crc32cHasher *new_ComGoogleCommonHashCrc32cHashFunction_Crc32cHasher_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonHashCrc32cHashFunction_Crc32cHasher, init)
}

ComGoogleCommonHashCrc32cHashFunction_Crc32cHasher *create_ComGoogleCommonHashCrc32cHashFunction_Crc32cHasher_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonHashCrc32cHashFunction_Crc32cHasher, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonHashCrc32cHashFunction_Crc32cHasher)
