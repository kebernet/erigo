//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/hash/HashCode.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/hash/HashCode.h"
#include "com/google/common/primitives/Ints.h"
#include "com/google/common/primitives/UnsignedInts.h"
#include "java/io/Serializable.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "javax/annotation/Nullable.h"

@interface ComGoogleCommonHashHashCode ()

+ (jint)decodeWithChar:(jchar)ch;

@end

inline IOSCharArray *ComGoogleCommonHashHashCode_get_hexDigits();
static IOSCharArray *ComGoogleCommonHashHashCode_hexDigits;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonHashHashCode, hexDigits, IOSCharArray *)

__attribute__((unused)) static jint ComGoogleCommonHashHashCode_decodeWithChar_(jchar ch);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonHashHashCode__Annotations$0();

@interface ComGoogleCommonHashHashCode_IntHashCode : ComGoogleCommonHashHashCode < JavaIoSerializable > {
 @public
  jint hash__;
}

- (instancetype)initWithInt:(jint)hash_;

- (jint)bits;

- (IOSByteArray *)asBytes;

- (jint)asInt;

- (jlong)asLong;

- (jlong)padToLong;

- (void)writeBytesToImplWithByteArray:(IOSByteArray *)dest
                              withInt:(jint)offset
                              withInt:(jint)maxLength;

- (jboolean)equalsSameBitsWithComGoogleCommonHashHashCode:(ComGoogleCommonHashHashCode *)that;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonHashHashCode_IntHashCode)

inline jlong ComGoogleCommonHashHashCode_IntHashCode_get_serialVersionUID();
#define ComGoogleCommonHashHashCode_IntHashCode_serialVersionUID 0LL
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonHashHashCode_IntHashCode, serialVersionUID, jlong)

__attribute__((unused)) static void ComGoogleCommonHashHashCode_IntHashCode_initWithInt_(ComGoogleCommonHashHashCode_IntHashCode *self, jint hash_);

__attribute__((unused)) static ComGoogleCommonHashHashCode_IntHashCode *new_ComGoogleCommonHashHashCode_IntHashCode_initWithInt_(jint hash_) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonHashHashCode_IntHashCode *create_ComGoogleCommonHashHashCode_IntHashCode_initWithInt_(jint hash_);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonHashHashCode_IntHashCode)

@interface ComGoogleCommonHashHashCode_LongHashCode : ComGoogleCommonHashHashCode < JavaIoSerializable > {
 @public
  jlong hash__;
}

- (instancetype)initWithLong:(jlong)hash_;

- (jint)bits;

- (IOSByteArray *)asBytes;

- (jint)asInt;

- (jlong)asLong;

- (jlong)padToLong;

- (void)writeBytesToImplWithByteArray:(IOSByteArray *)dest
                              withInt:(jint)offset
                              withInt:(jint)maxLength;

- (jboolean)equalsSameBitsWithComGoogleCommonHashHashCode:(ComGoogleCommonHashHashCode *)that;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonHashHashCode_LongHashCode)

inline jlong ComGoogleCommonHashHashCode_LongHashCode_get_serialVersionUID();
#define ComGoogleCommonHashHashCode_LongHashCode_serialVersionUID 0LL
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonHashHashCode_LongHashCode, serialVersionUID, jlong)

__attribute__((unused)) static void ComGoogleCommonHashHashCode_LongHashCode_initWithLong_(ComGoogleCommonHashHashCode_LongHashCode *self, jlong hash_);

__attribute__((unused)) static ComGoogleCommonHashHashCode_LongHashCode *new_ComGoogleCommonHashHashCode_LongHashCode_initWithLong_(jlong hash_) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonHashHashCode_LongHashCode *create_ComGoogleCommonHashHashCode_LongHashCode_initWithLong_(jlong hash_);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonHashHashCode_LongHashCode)

@interface ComGoogleCommonHashHashCode_BytesHashCode : ComGoogleCommonHashHashCode < JavaIoSerializable > {
 @public
  IOSByteArray *bytes_;
}

- (instancetype)initWithByteArray:(IOSByteArray *)bytes;

- (jint)bits;

- (IOSByteArray *)asBytes;

- (jint)asInt;

- (jlong)asLong;

- (jlong)padToLong;

- (void)writeBytesToImplWithByteArray:(IOSByteArray *)dest
                              withInt:(jint)offset
                              withInt:(jint)maxLength;

- (IOSByteArray *)getBytesInternal;

- (jboolean)equalsSameBitsWithComGoogleCommonHashHashCode:(ComGoogleCommonHashHashCode *)that;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonHashHashCode_BytesHashCode)

J2OBJC_FIELD_SETTER(ComGoogleCommonHashHashCode_BytesHashCode, bytes_, IOSByteArray *)

inline jlong ComGoogleCommonHashHashCode_BytesHashCode_get_serialVersionUID();
#define ComGoogleCommonHashHashCode_BytesHashCode_serialVersionUID 0LL
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonHashHashCode_BytesHashCode, serialVersionUID, jlong)

__attribute__((unused)) static void ComGoogleCommonHashHashCode_BytesHashCode_initWithByteArray_(ComGoogleCommonHashHashCode_BytesHashCode *self, IOSByteArray *bytes);

__attribute__((unused)) static ComGoogleCommonHashHashCode_BytesHashCode *new_ComGoogleCommonHashHashCode_BytesHashCode_initWithByteArray_(IOSByteArray *bytes) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonHashHashCode_BytesHashCode *create_ComGoogleCommonHashHashCode_BytesHashCode_initWithByteArray_(IOSByteArray *bytes);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonHashHashCode_BytesHashCode)

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonHashHashCode)

@implementation ComGoogleCommonHashHashCode

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonHashHashCode_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)bits {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)asInt {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)asLong {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)padToLong {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSByteArray *)asBytes {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)writeBytesToWithByteArray:(IOSByteArray *)dest
                          withInt:(jint)offset
                          withInt:(jint)maxLength {
  maxLength = ComGoogleCommonPrimitivesInts_minWithIntArray_([IOSIntArray newArrayWithInts:(jint[]){ maxLength, [self bits] / 8 } count:2]);
  ComGoogleCommonBasePreconditions_checkPositionIndexesWithInt_withInt_withInt_(offset, offset + maxLength, ((IOSByteArray *) nil_chk(dest))->size_);
  [self writeBytesToImplWithByteArray:dest withInt:offset withInt:maxLength];
  return maxLength;
}

- (void)writeBytesToImplWithByteArray:(IOSByteArray *)dest
                              withInt:(jint)offset
                              withInt:(jint)maxLength {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (IOSByteArray *)getBytesInternal {
  return [self asBytes];
}

- (jboolean)equalsSameBitsWithComGoogleCommonHashHashCode:(ComGoogleCommonHashHashCode *)that {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (ComGoogleCommonHashHashCode *)fromIntWithInt:(jint)hash_ {
  return ComGoogleCommonHashHashCode_fromIntWithInt_(hash_);
}

+ (ComGoogleCommonHashHashCode *)fromLongWithLong:(jlong)hash_ {
  return ComGoogleCommonHashHashCode_fromLongWithLong_(hash_);
}

+ (ComGoogleCommonHashHashCode *)fromBytesWithByteArray:(IOSByteArray *)bytes {
  return ComGoogleCommonHashHashCode_fromBytesWithByteArray_(bytes);
}

+ (ComGoogleCommonHashHashCode *)fromBytesNoCopyWithByteArray:(IOSByteArray *)bytes {
  return ComGoogleCommonHashHashCode_fromBytesNoCopyWithByteArray_(bytes);
}

+ (ComGoogleCommonHashHashCode *)fromStringWithNSString:(NSString *)string {
  return ComGoogleCommonHashHashCode_fromStringWithNSString_(string);
}

+ (jint)decodeWithChar:(jchar)ch {
  return ComGoogleCommonHashHashCode_decodeWithChar_(ch);
}

- (jboolean)isEqual:(id)object {
  if ([object isKindOfClass:[ComGoogleCommonHashHashCode class]]) {
    ComGoogleCommonHashHashCode *that = (ComGoogleCommonHashHashCode *) cast_chk(object, [ComGoogleCommonHashHashCode class]);
    return [self bits] == [((ComGoogleCommonHashHashCode *) nil_chk(that)) bits] && [self equalsSameBitsWithComGoogleCommonHashHashCode:that];
  }
  return false;
}

- (NSUInteger)hash {
  if ([self bits] >= 32) {
    return [self asInt];
  }
  IOSByteArray *bytes = [self getBytesInternal];
  jint val = (IOSByteArray_Get(nil_chk(bytes), 0) & (jint) 0xFF);
  for (jint i = 1; i < bytes->size_; i++) {
    val |= (JreLShift32((IOSByteArray_Get(bytes, i) & (jint) 0xFF), (i * 8)));
  }
  return val;
}

- (NSString *)description {
  IOSByteArray *bytes = [self getBytesInternal];
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithInt_(2 * ((IOSByteArray *) nil_chk(bytes))->size_);
  {
    IOSByteArray *a__ = bytes;
    jbyte const *b__ = a__->buffer_;
    jbyte const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jbyte b = *b__++;
      (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithChar:IOSCharArray_Get(nil_chk(ComGoogleCommonHashHashCode_hexDigits), (JreRShift32(b, 4)) & (jint) 0xf)])) appendWithChar:IOSCharArray_Get(ComGoogleCommonHashHashCode_hexDigits, b & (jint) 0xf)];
    }
  }
  return [sb description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x400, 2, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x400, 3, 4, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonHashHashCode;", 0x9, 5, 6, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonHashHashCode;", 0x9, 7, 8, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonHashHashCode;", 0x9, 9, 10, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonHashHashCode;", 0x8, 11, 10, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonHashHashCode;", 0x9, 12, 13, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 14, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 16, 17, -1, -1, -1, 18 },
    { NULL, "I", 0x11, 19, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, 20, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(bits);
  methods[2].selector = @selector(asInt);
  methods[3].selector = @selector(asLong);
  methods[4].selector = @selector(padToLong);
  methods[5].selector = @selector(asBytes);
  methods[6].selector = @selector(writeBytesToWithByteArray:withInt:withInt:);
  methods[7].selector = @selector(writeBytesToImplWithByteArray:withInt:withInt:);
  methods[8].selector = @selector(getBytesInternal);
  methods[9].selector = @selector(equalsSameBitsWithComGoogleCommonHashHashCode:);
  methods[10].selector = @selector(fromIntWithInt:);
  methods[11].selector = @selector(fromLongWithLong:);
  methods[12].selector = @selector(fromBytesWithByteArray:);
  methods[13].selector = @selector(fromBytesNoCopyWithByteArray:);
  methods[14].selector = @selector(fromStringWithNSString:);
  methods[15].selector = @selector(decodeWithChar:);
  methods[16].selector = @selector(isEqual:);
  methods[17].selector = @selector(hash);
  methods[18].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "hexDigits", "[C", .constantValue.asLong = 0, 0x1a, -1, 21, -1, -1 },
  };
  static const void *ptrTable[] = { "writeBytesTo", "[BII", "writeBytesToImpl", "equalsSameBits", "LComGoogleCommonHashHashCode;", "fromInt", "I", "fromLong", "J", "fromBytes", "[B", "fromBytesNoCopy", "fromString", "LNSString;", "decode", "C", "equals", "LNSObject;", (void *)&ComGoogleCommonHashHashCode__Annotations$0, "hashCode", "toString", &ComGoogleCommonHashHashCode_hexDigits, "LComGoogleCommonHashHashCode_IntHashCode;LComGoogleCommonHashHashCode_LongHashCode;LComGoogleCommonHashHashCode_BytesHashCode;" };
  static const J2ObjcClassInfo _ComGoogleCommonHashHashCode = { "HashCode", "com.google.common.hash", ptrTable, methods, fields, 7, 0x401, 19, 1, -1, 22, -1, -1, -1 };
  return &_ComGoogleCommonHashHashCode;
}

+ (void)initialize {
  if (self == [ComGoogleCommonHashHashCode class]) {
    ComGoogleCommonHashHashCode_hexDigits = [@"0123456789abcdef" java_toCharArray];
    J2OBJC_SET_INITIALIZED(ComGoogleCommonHashHashCode)
  }
}

@end

void ComGoogleCommonHashHashCode_init(ComGoogleCommonHashHashCode *self) {
  NSObject_init(self);
}

ComGoogleCommonHashHashCode *ComGoogleCommonHashHashCode_fromIntWithInt_(jint hash_) {
  ComGoogleCommonHashHashCode_initialize();
  return new_ComGoogleCommonHashHashCode_IntHashCode_initWithInt_(hash_);
}

ComGoogleCommonHashHashCode *ComGoogleCommonHashHashCode_fromLongWithLong_(jlong hash_) {
  ComGoogleCommonHashHashCode_initialize();
  return new_ComGoogleCommonHashHashCode_LongHashCode_initWithLong_(hash_);
}

ComGoogleCommonHashHashCode *ComGoogleCommonHashHashCode_fromBytesWithByteArray_(IOSByteArray *bytes) {
  ComGoogleCommonHashHashCode_initialize();
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withId_(((IOSByteArray *) nil_chk(bytes))->size_ >= 1, @"A HashCode must contain at least 1 byte.");
  return ComGoogleCommonHashHashCode_fromBytesNoCopyWithByteArray_([bytes java_clone]);
}

ComGoogleCommonHashHashCode *ComGoogleCommonHashHashCode_fromBytesNoCopyWithByteArray_(IOSByteArray *bytes) {
  ComGoogleCommonHashHashCode_initialize();
  return new_ComGoogleCommonHashHashCode_BytesHashCode_initWithByteArray_(bytes);
}

ComGoogleCommonHashHashCode *ComGoogleCommonHashHashCode_fromStringWithNSString_(NSString *string) {
  ComGoogleCommonHashHashCode_initialize();
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_([((NSString *) nil_chk(string)) java_length] >= 2, @"input string (%s) must have at least 2 characters", string);
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_([string java_length] % 2 == 0, @"input string (%s) must have an even number of characters", string);
  IOSByteArray *bytes = [IOSByteArray newArrayWithLength:[string java_length] / 2];
  for (jint i = 0; i < [string java_length]; i += 2) {
    jint ch1 = JreLShift32(ComGoogleCommonHashHashCode_decodeWithChar_([string charAtWithInt:i]), 4);
    jint ch2 = ComGoogleCommonHashHashCode_decodeWithChar_([string charAtWithInt:i + 1]);
    *IOSByteArray_GetRef(bytes, i / 2) = (jbyte) (ch1 + ch2);
  }
  return ComGoogleCommonHashHashCode_fromBytesNoCopyWithByteArray_(bytes);
}

jint ComGoogleCommonHashHashCode_decodeWithChar_(jchar ch) {
  ComGoogleCommonHashHashCode_initialize();
  if (ch >= '0' && ch <= '9') {
    return ch - '0';
  }
  if (ch >= 'a' && ch <= 'f') {
    return ch - 'a' + 10;
  }
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$C", @"Illegal hexadecimal character: ", ch));
}

IOSObjectArray *ComGoogleCommonHashHashCode__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonHashHashCode)

@implementation ComGoogleCommonHashHashCode_IntHashCode

- (instancetype)initWithInt:(jint)hash_ {
  ComGoogleCommonHashHashCode_IntHashCode_initWithInt_(self, hash_);
  return self;
}

- (jint)bits {
  return 32;
}

- (IOSByteArray *)asBytes {
  return [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) hash__, (jbyte) (JreRShift32(hash__, 8)), (jbyte) (JreRShift32(hash__, 16)), (jbyte) (JreRShift32(hash__, 24)) } count:4];
}

- (jint)asInt {
  return hash__;
}

- (jlong)asLong {
  @throw new_JavaLangIllegalStateException_initWithNSString_(@"this HashCode only has 32 bits; cannot create a long");
}

- (jlong)padToLong {
  return ComGoogleCommonPrimitivesUnsignedInts_toLongWithInt_(hash__);
}

- (void)writeBytesToImplWithByteArray:(IOSByteArray *)dest
                              withInt:(jint)offset
                              withInt:(jint)maxLength {
  for (jint i = 0; i < maxLength; i++) {
    *IOSByteArray_GetRef(nil_chk(dest), offset + i) = (jbyte) (JreRShift32(hash__, (i * 8)));
  }
}

- (jboolean)equalsSameBitsWithComGoogleCommonHashHashCode:(ComGoogleCommonHashHashCode *)that {
  return hash__ == [((ComGoogleCommonHashHashCode *) nil_chk(that)) asInt];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(bits);
  methods[2].selector = @selector(asBytes);
  methods[3].selector = @selector(asInt);
  methods[4].selector = @selector(asLong);
  methods[5].selector = @selector(padToLong);
  methods[6].selector = @selector(writeBytesToImplWithByteArray:withInt:withInt:);
  methods[7].selector = @selector(equalsSameBitsWithComGoogleCommonHashHashCode:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "hash__", "I", .constantValue.asLong = 0, 0x10, 5, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = ComGoogleCommonHashHashCode_IntHashCode_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "writeBytesToImpl", "[BII", "equalsSameBits", "LComGoogleCommonHashHashCode;", "hash" };
  static const J2ObjcClassInfo _ComGoogleCommonHashHashCode_IntHashCode = { "IntHashCode", "com.google.common.hash", ptrTable, methods, fields, 7, 0x1a, 8, 2, 4, -1, -1, -1, -1 };
  return &_ComGoogleCommonHashHashCode_IntHashCode;
}

@end

void ComGoogleCommonHashHashCode_IntHashCode_initWithInt_(ComGoogleCommonHashHashCode_IntHashCode *self, jint hash_) {
  ComGoogleCommonHashHashCode_init(self);
  self->hash__ = hash_;
}

ComGoogleCommonHashHashCode_IntHashCode *new_ComGoogleCommonHashHashCode_IntHashCode_initWithInt_(jint hash_) {
  J2OBJC_NEW_IMPL(ComGoogleCommonHashHashCode_IntHashCode, initWithInt_, hash_)
}

ComGoogleCommonHashHashCode_IntHashCode *create_ComGoogleCommonHashHashCode_IntHashCode_initWithInt_(jint hash_) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonHashHashCode_IntHashCode, initWithInt_, hash_)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonHashHashCode_IntHashCode)

@implementation ComGoogleCommonHashHashCode_LongHashCode

- (instancetype)initWithLong:(jlong)hash_ {
  ComGoogleCommonHashHashCode_LongHashCode_initWithLong_(self, hash_);
  return self;
}

- (jint)bits {
  return 64;
}

- (IOSByteArray *)asBytes {
  return [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) hash__, (jbyte) (JreRShift64(hash__, 8)), (jbyte) (JreRShift64(hash__, 16)), (jbyte) (JreRShift64(hash__, 24)), (jbyte) (JreRShift64(hash__, 32)), (jbyte) (JreRShift64(hash__, 40)), (jbyte) (JreRShift64(hash__, 48)), (jbyte) (JreRShift64(hash__, 56)) } count:8];
}

- (jint)asInt {
  return (jint) hash__;
}

- (jlong)asLong {
  return hash__;
}

- (jlong)padToLong {
  return hash__;
}

- (void)writeBytesToImplWithByteArray:(IOSByteArray *)dest
                              withInt:(jint)offset
                              withInt:(jint)maxLength {
  for (jint i = 0; i < maxLength; i++) {
    *IOSByteArray_GetRef(nil_chk(dest), offset + i) = (jbyte) (JreRShift64(hash__, (i * 8)));
  }
}

- (jboolean)equalsSameBitsWithComGoogleCommonHashHashCode:(ComGoogleCommonHashHashCode *)that {
  return hash__ == [((ComGoogleCommonHashHashCode *) nil_chk(that)) asLong];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithLong:);
  methods[1].selector = @selector(bits);
  methods[2].selector = @selector(asBytes);
  methods[3].selector = @selector(asInt);
  methods[4].selector = @selector(asLong);
  methods[5].selector = @selector(padToLong);
  methods[6].selector = @selector(writeBytesToImplWithByteArray:withInt:withInt:);
  methods[7].selector = @selector(equalsSameBitsWithComGoogleCommonHashHashCode:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "hash__", "J", .constantValue.asLong = 0, 0x10, 5, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = ComGoogleCommonHashHashCode_LongHashCode_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "J", "writeBytesToImpl", "[BII", "equalsSameBits", "LComGoogleCommonHashHashCode;", "hash" };
  static const J2ObjcClassInfo _ComGoogleCommonHashHashCode_LongHashCode = { "LongHashCode", "com.google.common.hash", ptrTable, methods, fields, 7, 0x1a, 8, 2, 4, -1, -1, -1, -1 };
  return &_ComGoogleCommonHashHashCode_LongHashCode;
}

@end

void ComGoogleCommonHashHashCode_LongHashCode_initWithLong_(ComGoogleCommonHashHashCode_LongHashCode *self, jlong hash_) {
  ComGoogleCommonHashHashCode_init(self);
  self->hash__ = hash_;
}

ComGoogleCommonHashHashCode_LongHashCode *new_ComGoogleCommonHashHashCode_LongHashCode_initWithLong_(jlong hash_) {
  J2OBJC_NEW_IMPL(ComGoogleCommonHashHashCode_LongHashCode, initWithLong_, hash_)
}

ComGoogleCommonHashHashCode_LongHashCode *create_ComGoogleCommonHashHashCode_LongHashCode_initWithLong_(jlong hash_) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonHashHashCode_LongHashCode, initWithLong_, hash_)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonHashHashCode_LongHashCode)

@implementation ComGoogleCommonHashHashCode_BytesHashCode

- (instancetype)initWithByteArray:(IOSByteArray *)bytes {
  ComGoogleCommonHashHashCode_BytesHashCode_initWithByteArray_(self, bytes);
  return self;
}

- (jint)bits {
  return ((IOSByteArray *) nil_chk(bytes_))->size_ * 8;
}

- (IOSByteArray *)asBytes {
  return [((IOSByteArray *) nil_chk(bytes_)) java_clone];
}

- (jint)asInt {
  ComGoogleCommonBasePreconditions_checkStateWithBoolean_withNSString_withInt_(((IOSByteArray *) nil_chk(bytes_))->size_ >= 4, @"HashCode#asInt() requires >= 4 bytes (it only has %s bytes).", bytes_->size_);
  return (IOSByteArray_Get(bytes_, 0) & (jint) 0xFF) | (JreLShift32((IOSByteArray_Get(bytes_, 1) & (jint) 0xFF), 8)) | (JreLShift32((IOSByteArray_Get(bytes_, 2) & (jint) 0xFF), 16)) | (JreLShift32((IOSByteArray_Get(bytes_, 3) & (jint) 0xFF), 24));
}

- (jlong)asLong {
  ComGoogleCommonBasePreconditions_checkStateWithBoolean_withNSString_withInt_(((IOSByteArray *) nil_chk(bytes_))->size_ >= 8, @"HashCode#asLong() requires >= 8 bytes (it only has %s bytes).", bytes_->size_);
  return [self padToLong];
}

- (jlong)padToLong {
  jlong retVal = (IOSByteArray_Get(nil_chk(bytes_), 0) & (jint) 0xFF);
  for (jint i = 1; i < JavaLangMath_minWithInt_withInt_(bytes_->size_, 8); i++) {
    retVal |= JreLShift64((IOSByteArray_Get(bytes_, i) & (jlong) 0xFFLL), (i * 8));
  }
  return retVal;
}

- (void)writeBytesToImplWithByteArray:(IOSByteArray *)dest
                              withInt:(jint)offset
                              withInt:(jint)maxLength {
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bytes_, 0, dest, offset, maxLength);
}

- (IOSByteArray *)getBytesInternal {
  return bytes_;
}

- (jboolean)equalsSameBitsWithComGoogleCommonHashHashCode:(ComGoogleCommonHashHashCode *)that {
  if (((IOSByteArray *) nil_chk(self->bytes_))->size_ != ((IOSByteArray *) nil_chk([((ComGoogleCommonHashHashCode *) nil_chk(that)) getBytesInternal]))->size_) {
    return false;
  }
  jboolean areEqual = true;
  for (jint i = 0; i < self->bytes_->size_; i++) {
    areEqual &= (IOSByteArray_Get(self->bytes_, i) == IOSByteArray_Get(nil_chk([that getBytesInternal]), i));
  }
  return areEqual;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "[B", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithByteArray:);
  methods[1].selector = @selector(bits);
  methods[2].selector = @selector(asBytes);
  methods[3].selector = @selector(asInt);
  methods[4].selector = @selector(asLong);
  methods[5].selector = @selector(padToLong);
  methods[6].selector = @selector(writeBytesToImplWithByteArray:withInt:withInt:);
  methods[7].selector = @selector(getBytesInternal);
  methods[8].selector = @selector(equalsSameBitsWithComGoogleCommonHashHashCode:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bytes_", "[B", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = ComGoogleCommonHashHashCode_BytesHashCode_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[B", "writeBytesToImpl", "[BII", "equalsSameBits", "LComGoogleCommonHashHashCode;" };
  static const J2ObjcClassInfo _ComGoogleCommonHashHashCode_BytesHashCode = { "BytesHashCode", "com.google.common.hash", ptrTable, methods, fields, 7, 0x1a, 9, 2, 4, -1, -1, -1, -1 };
  return &_ComGoogleCommonHashHashCode_BytesHashCode;
}

@end

void ComGoogleCommonHashHashCode_BytesHashCode_initWithByteArray_(ComGoogleCommonHashHashCode_BytesHashCode *self, IOSByteArray *bytes) {
  ComGoogleCommonHashHashCode_init(self);
  self->bytes_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(bytes);
}

ComGoogleCommonHashHashCode_BytesHashCode *new_ComGoogleCommonHashHashCode_BytesHashCode_initWithByteArray_(IOSByteArray *bytes) {
  J2OBJC_NEW_IMPL(ComGoogleCommonHashHashCode_BytesHashCode, initWithByteArray_, bytes)
}

ComGoogleCommonHashHashCode_BytesHashCode *create_ComGoogleCommonHashHashCode_BytesHashCode_initWithByteArray_(IOSByteArray *bytes) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonHashHashCode_BytesHashCode, initWithByteArray_, bytes)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonHashHashCode_BytesHashCode)
