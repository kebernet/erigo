//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/hash/Hashing.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonHashHashing")
#ifdef RESTRICT_ComGoogleCommonHashHashing
#define INCLUDE_ALL_ComGoogleCommonHashHashing 0
#else
#define INCLUDE_ALL_ComGoogleCommonHashHashing 1
#endif
#undef RESTRICT_ComGoogleCommonHashHashing

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonHashHashing_) && (INCLUDE_ALL_ComGoogleCommonHashHashing || defined(INCLUDE_ComGoogleCommonHashHashing))
#define ComGoogleCommonHashHashing_

@class ComGoogleCommonHashHashCode;
@class IOSByteArray;
@class IOSObjectArray;
@protocol ComGoogleCommonHashHashFunction;
@protocol JavaLangIterable;
@protocol JavaSecurityKey;

@interface ComGoogleCommonHashHashing : NSObject

#pragma mark Public

+ (id<ComGoogleCommonHashHashFunction>)adler32;

+ (ComGoogleCommonHashHashCode *)combineOrderedWithJavaLangIterable:(id<JavaLangIterable>)hashCodes;

+ (ComGoogleCommonHashHashCode *)combineUnorderedWithJavaLangIterable:(id<JavaLangIterable>)hashCodes;

+ (id<ComGoogleCommonHashHashFunction>)concatenatingWithComGoogleCommonHashHashFunction:(id<ComGoogleCommonHashHashFunction>)first
                                                    withComGoogleCommonHashHashFunction:(id<ComGoogleCommonHashHashFunction>)second
                                               withComGoogleCommonHashHashFunctionArray:(IOSObjectArray *)rest;

+ (id<ComGoogleCommonHashHashFunction>)concatenatingWithJavaLangIterable:(id<JavaLangIterable>)hashFunctions;

+ (jint)consistentHashWithComGoogleCommonHashHashCode:(ComGoogleCommonHashHashCode *)hashCode
                                              withInt:(jint)buckets;

+ (jint)consistentHashWithLong:(jlong)input
                       withInt:(jint)buckets;

+ (id<ComGoogleCommonHashHashFunction>)crc32;

+ (id<ComGoogleCommonHashHashFunction>)crc32c;

+ (id<ComGoogleCommonHashHashFunction>)farmHashFingerprint64;

+ (id<ComGoogleCommonHashHashFunction>)goodFastHashWithInt:(jint)minimumBits;

+ (id<ComGoogleCommonHashHashFunction>)hmacMd5WithByteArray:(IOSByteArray *)key;

+ (id<ComGoogleCommonHashHashFunction>)hmacMd5WithJavaSecurityKey:(id<JavaSecurityKey>)key;

+ (id<ComGoogleCommonHashHashFunction>)hmacSha1WithByteArray:(IOSByteArray *)key;

+ (id<ComGoogleCommonHashHashFunction>)hmacSha1WithJavaSecurityKey:(id<JavaSecurityKey>)key;

+ (id<ComGoogleCommonHashHashFunction>)hmacSha256WithByteArray:(IOSByteArray *)key;

+ (id<ComGoogleCommonHashHashFunction>)hmacSha256WithJavaSecurityKey:(id<JavaSecurityKey>)key;

+ (id<ComGoogleCommonHashHashFunction>)hmacSha512WithByteArray:(IOSByteArray *)key;

+ (id<ComGoogleCommonHashHashFunction>)hmacSha512WithJavaSecurityKey:(id<JavaSecurityKey>)key;

+ (id<ComGoogleCommonHashHashFunction>)md5;

+ (id<ComGoogleCommonHashHashFunction>)murmur3_128;

+ (id<ComGoogleCommonHashHashFunction>)murmur3_128WithInt:(jint)seed;

+ (id<ComGoogleCommonHashHashFunction>)murmur3_32;

+ (id<ComGoogleCommonHashHashFunction>)murmur3_32WithInt:(jint)seed;

+ (id<ComGoogleCommonHashHashFunction>)sha1;

+ (id<ComGoogleCommonHashHashFunction>)sha256;

+ (id<ComGoogleCommonHashHashFunction>)sha384;

+ (id<ComGoogleCommonHashHashFunction>)sha512;

+ (id<ComGoogleCommonHashHashFunction>)sipHash24;

+ (id<ComGoogleCommonHashHashFunction>)sipHash24WithLong:(jlong)k0
                                                withLong:(jlong)k1;

#pragma mark Package-Private

+ (jint)checkPositiveAndMakeMultipleOf32WithInt:(jint)bits;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonHashHashing)

FOUNDATION_EXPORT id<ComGoogleCommonHashHashFunction> ComGoogleCommonHashHashing_goodFastHashWithInt_(jint minimumBits);

FOUNDATION_EXPORT id<ComGoogleCommonHashHashFunction> ComGoogleCommonHashHashing_murmur3_32WithInt_(jint seed);

FOUNDATION_EXPORT id<ComGoogleCommonHashHashFunction> ComGoogleCommonHashHashing_murmur3_32();

FOUNDATION_EXPORT id<ComGoogleCommonHashHashFunction> ComGoogleCommonHashHashing_murmur3_128WithInt_(jint seed);

FOUNDATION_EXPORT id<ComGoogleCommonHashHashFunction> ComGoogleCommonHashHashing_murmur3_128();

FOUNDATION_EXPORT id<ComGoogleCommonHashHashFunction> ComGoogleCommonHashHashing_sipHash24();

FOUNDATION_EXPORT id<ComGoogleCommonHashHashFunction> ComGoogleCommonHashHashing_sipHash24WithLong_withLong_(jlong k0, jlong k1);

FOUNDATION_EXPORT id<ComGoogleCommonHashHashFunction> ComGoogleCommonHashHashing_md5();

FOUNDATION_EXPORT id<ComGoogleCommonHashHashFunction> ComGoogleCommonHashHashing_sha1();

FOUNDATION_EXPORT id<ComGoogleCommonHashHashFunction> ComGoogleCommonHashHashing_sha256();

FOUNDATION_EXPORT id<ComGoogleCommonHashHashFunction> ComGoogleCommonHashHashing_sha384();

FOUNDATION_EXPORT id<ComGoogleCommonHashHashFunction> ComGoogleCommonHashHashing_sha512();

FOUNDATION_EXPORT id<ComGoogleCommonHashHashFunction> ComGoogleCommonHashHashing_hmacMd5WithJavaSecurityKey_(id<JavaSecurityKey> key);

FOUNDATION_EXPORT id<ComGoogleCommonHashHashFunction> ComGoogleCommonHashHashing_hmacMd5WithByteArray_(IOSByteArray *key);

FOUNDATION_EXPORT id<ComGoogleCommonHashHashFunction> ComGoogleCommonHashHashing_hmacSha1WithJavaSecurityKey_(id<JavaSecurityKey> key);

FOUNDATION_EXPORT id<ComGoogleCommonHashHashFunction> ComGoogleCommonHashHashing_hmacSha1WithByteArray_(IOSByteArray *key);

FOUNDATION_EXPORT id<ComGoogleCommonHashHashFunction> ComGoogleCommonHashHashing_hmacSha256WithJavaSecurityKey_(id<JavaSecurityKey> key);

FOUNDATION_EXPORT id<ComGoogleCommonHashHashFunction> ComGoogleCommonHashHashing_hmacSha256WithByteArray_(IOSByteArray *key);

FOUNDATION_EXPORT id<ComGoogleCommonHashHashFunction> ComGoogleCommonHashHashing_hmacSha512WithJavaSecurityKey_(id<JavaSecurityKey> key);

FOUNDATION_EXPORT id<ComGoogleCommonHashHashFunction> ComGoogleCommonHashHashing_hmacSha512WithByteArray_(IOSByteArray *key);

FOUNDATION_EXPORT id<ComGoogleCommonHashHashFunction> ComGoogleCommonHashHashing_crc32c();

FOUNDATION_EXPORT id<ComGoogleCommonHashHashFunction> ComGoogleCommonHashHashing_crc32();

FOUNDATION_EXPORT id<ComGoogleCommonHashHashFunction> ComGoogleCommonHashHashing_adler32();

FOUNDATION_EXPORT id<ComGoogleCommonHashHashFunction> ComGoogleCommonHashHashing_farmHashFingerprint64();

FOUNDATION_EXPORT jint ComGoogleCommonHashHashing_consistentHashWithComGoogleCommonHashHashCode_withInt_(ComGoogleCommonHashHashCode *hashCode, jint buckets);

FOUNDATION_EXPORT jint ComGoogleCommonHashHashing_consistentHashWithLong_withInt_(jlong input, jint buckets);

FOUNDATION_EXPORT ComGoogleCommonHashHashCode *ComGoogleCommonHashHashing_combineOrderedWithJavaLangIterable_(id<JavaLangIterable> hashCodes);

FOUNDATION_EXPORT ComGoogleCommonHashHashCode *ComGoogleCommonHashHashing_combineUnorderedWithJavaLangIterable_(id<JavaLangIterable> hashCodes);

FOUNDATION_EXPORT jint ComGoogleCommonHashHashing_checkPositiveAndMakeMultipleOf32WithInt_(jint bits);

FOUNDATION_EXPORT id<ComGoogleCommonHashHashFunction> ComGoogleCommonHashHashing_concatenatingWithComGoogleCommonHashHashFunction_withComGoogleCommonHashHashFunction_withComGoogleCommonHashHashFunctionArray_(id<ComGoogleCommonHashHashFunction> first, id<ComGoogleCommonHashHashFunction> second, IOSObjectArray *rest);

FOUNDATION_EXPORT id<ComGoogleCommonHashHashFunction> ComGoogleCommonHashHashing_concatenatingWithJavaLangIterable_(id<JavaLangIterable> hashFunctions);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonHashHashing)

#endif

#if !defined (ComGoogleCommonHashHashing_ChecksumType_) && (INCLUDE_ALL_ComGoogleCommonHashHashing || defined(INCLUDE_ComGoogleCommonHashHashing_ChecksumType))
#define ComGoogleCommonHashHashing_ChecksumType_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

#define RESTRICT_ComGoogleCommonBaseSupplier 1
#define INCLUDE_ComGoogleCommonBaseSupplier 1
#include "com/google/common/base/Supplier.h"

@class IOSObjectArray;
@protocol JavaUtilZipChecksum;

typedef NS_ENUM(NSUInteger, ComGoogleCommonHashHashing_ChecksumType_Enum) {
  ComGoogleCommonHashHashing_ChecksumType_Enum_CRC_32 = 0,
  ComGoogleCommonHashHashing_ChecksumType_Enum_ADLER_32 = 1,
};

@interface ComGoogleCommonHashHashing_ChecksumType : JavaLangEnum < NSCopying, ComGoogleCommonBaseSupplier >

#pragma mark Public

- (id<JavaUtilZipChecksum>)get;

+ (ComGoogleCommonHashHashing_ChecksumType *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonHashHashing_ChecksumType)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ComGoogleCommonHashHashing_ChecksumType *ComGoogleCommonHashHashing_ChecksumType_values_[];

inline ComGoogleCommonHashHashing_ChecksumType *ComGoogleCommonHashHashing_ChecksumType_get_CRC_32();
J2OBJC_ENUM_CONSTANT(ComGoogleCommonHashHashing_ChecksumType, CRC_32)

inline ComGoogleCommonHashHashing_ChecksumType *ComGoogleCommonHashHashing_ChecksumType_get_ADLER_32();
J2OBJC_ENUM_CONSTANT(ComGoogleCommonHashHashing_ChecksumType, ADLER_32)

FOUNDATION_EXPORT IOSObjectArray *ComGoogleCommonHashHashing_ChecksumType_values();

FOUNDATION_EXPORT ComGoogleCommonHashHashing_ChecksumType *ComGoogleCommonHashHashing_ChecksumType_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ComGoogleCommonHashHashing_ChecksumType *ComGoogleCommonHashHashing_ChecksumType_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonHashHashing_ChecksumType)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonHashHashing")
