//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/hash/HashingInputStream.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/hash/HashCode.h"
#include "com/google/common/hash/HashFunction.h"
#include "com/google/common/hash/Hasher.h"
#include "com/google/common/hash/HashingInputStream.h"
#include "java/io/FilterInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"

@interface ComGoogleCommonHashHashingInputStream () {
 @public
  id<ComGoogleCommonHashHasher> hasher_;
}

@end

J2OBJC_FIELD_SETTER(ComGoogleCommonHashHashingInputStream, hasher_, id<ComGoogleCommonHashHasher>)

@implementation ComGoogleCommonHashHashingInputStream

- (instancetype)initWithComGoogleCommonHashHashFunction:(id<ComGoogleCommonHashHashFunction>)hashFunction
                                  withJavaIoInputStream:(JavaIoInputStream *)inArg {
  ComGoogleCommonHashHashingInputStream_initWithComGoogleCommonHashHashFunction_withJavaIoInputStream_(self, hashFunction, inArg);
  return self;
}

- (jint)read {
  jint b = [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&in_))) read];
  if (b != -1) {
    (void) [((id<ComGoogleCommonHashHasher>) nil_chk(hasher_)) putByteWithByte:(jbyte) b];
  }
  return b;
}

- (jint)readWithByteArray:(IOSByteArray *)bytes
                  withInt:(jint)off
                  withInt:(jint)len {
  jint numOfBytesRead = [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&in_))) readWithByteArray:bytes withInt:off withInt:len];
  if (numOfBytesRead != -1) {
    (void) [((id<ComGoogleCommonHashHasher>) nil_chk(hasher_)) putBytesWithByteArray:bytes withInt:off withInt:numOfBytesRead];
  }
  return numOfBytesRead;
}

- (jboolean)markSupported {
  return false;
}

- (void)markWithInt:(jint)readlimit {
}

- (void)reset {
  @throw new_JavaIoIOException_initWithNSString_(@"reset not supported");
}

- (ComGoogleCommonHashHashCode *)hash__ {
  return [((id<ComGoogleCommonHashHasher>) nil_chk(hasher_)) hash__];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LComGoogleCommonHashHashCode;", 0x1, 6, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonHashHashFunction:withJavaIoInputStream:);
  methods[1].selector = @selector(read);
  methods[2].selector = @selector(readWithByteArray:withInt:withInt:);
  methods[3].selector = @selector(markSupported);
  methods[4].selector = @selector(markWithInt:);
  methods[5].selector = @selector(reset);
  methods[6].selector = @selector(hash__);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "hasher_", "LComGoogleCommonHashHasher;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonHashHashFunction;LJavaIoInputStream;", "LJavaIoIOException;", "read", "[BII", "mark", "I", "hash" };
  static const J2ObjcClassInfo _ComGoogleCommonHashHashingInputStream = { "HashingInputStream", "com.google.common.hash", ptrTable, methods, fields, 7, 0x11, 7, 1, -1, -1, -1, -1, -1 };
  return &_ComGoogleCommonHashHashingInputStream;
}

@end

void ComGoogleCommonHashHashingInputStream_initWithComGoogleCommonHashHashFunction_withJavaIoInputStream_(ComGoogleCommonHashHashingInputStream *self, id<ComGoogleCommonHashHashFunction> hashFunction, JavaIoInputStream *inArg) {
  JavaIoFilterInputStream_initWithJavaIoInputStream_(self, ComGoogleCommonBasePreconditions_checkNotNullWithId_(inArg));
  self->hasher_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_([((id<ComGoogleCommonHashHashFunction>) nil_chk(hashFunction)) newHasher]);
}

ComGoogleCommonHashHashingInputStream *new_ComGoogleCommonHashHashingInputStream_initWithComGoogleCommonHashHashFunction_withJavaIoInputStream_(id<ComGoogleCommonHashHashFunction> hashFunction, JavaIoInputStream *inArg) {
  J2OBJC_NEW_IMPL(ComGoogleCommonHashHashingInputStream, initWithComGoogleCommonHashHashFunction_withJavaIoInputStream_, hashFunction, inArg)
}

ComGoogleCommonHashHashingInputStream *create_ComGoogleCommonHashHashingInputStream_initWithComGoogleCommonHashHashFunction_withJavaIoInputStream_(id<ComGoogleCommonHashHashFunction> hashFunction, JavaIoInputStream *inArg) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonHashHashingInputStream, initWithComGoogleCommonHashHashFunction_withJavaIoInputStream_, hashFunction, inArg)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonHashHashingInputStream)
