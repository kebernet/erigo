//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/hash/Murmur3_128HashFunction.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/hash/AbstractStreamingHashFunction.h"
#include "com/google/common/hash/HashCode.h"
#include "com/google/common/hash/Hasher.h"
#include "com/google/common/hash/Murmur3_128HashFunction.h"
#include "com/google/common/primitives/UnsignedBytes.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Long.h"
#include "java/lang/annotation/Annotation.h"
#include "java/nio/ByteBuffer.h"
#include "java/nio/ByteOrder.h"
#include "javax/annotation/Nullable.h"

@interface ComGoogleCommonHashMurmur3_128HashFunction () {
 @public
  jint seed_;
}

@end

inline jlong ComGoogleCommonHashMurmur3_128HashFunction_get_serialVersionUID();
#define ComGoogleCommonHashMurmur3_128HashFunction_serialVersionUID 0LL
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonHashMurmur3_128HashFunction, serialVersionUID, jlong)

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonHashMurmur3_128HashFunction__Annotations$0();

@interface ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher : ComGoogleCommonHashAbstractStreamingHashFunction_AbstractStreamingHasher {
 @public
  jlong h1_;
  jlong h2_;
  jint length_;
}

- (instancetype)initWithInt:(jint)seed;

- (void)processWithJavaNioByteBuffer:(JavaNioByteBuffer *)bb;

- (void)bmix64WithLong:(jlong)k1
              withLong:(jlong)k2;

- (void)processRemainingWithJavaNioByteBuffer:(JavaNioByteBuffer *)bb;

- (ComGoogleCommonHashHashCode *)makeHash;

+ (jlong)fmix64WithLong:(jlong)k;

+ (jlong)mixK1WithLong:(jlong)k1;

+ (jlong)mixK2WithLong:(jlong)k2;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher)

inline jint ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_get_CHUNK_SIZE();
#define ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_CHUNK_SIZE 16
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher, CHUNK_SIZE, jint)

inline jlong ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_get_C1();
#define ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_C1 -8663945395140668459LL
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher, C1, jlong)

inline jlong ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_get_C2();
#define ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_C2 5545529020109919103LL
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher, C2, jlong)

__attribute__((unused)) static void ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_initWithInt_(ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher *self, jint seed);

__attribute__((unused)) static ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher *new_ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_initWithInt_(jint seed) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher *create_ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_initWithInt_(jint seed);

__attribute__((unused)) static void ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_bmix64WithLong_withLong_(ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher *self, jlong k1, jlong k2);

__attribute__((unused)) static jlong ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_fmix64WithLong_(jlong k);

__attribute__((unused)) static jlong ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_mixK1WithLong_(jlong k1);

__attribute__((unused)) static jlong ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_mixK2WithLong_(jlong k2);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher)

@implementation ComGoogleCommonHashMurmur3_128HashFunction

- (instancetype)initWithInt:(jint)seed {
  ComGoogleCommonHashMurmur3_128HashFunction_initWithInt_(self, seed);
  return self;
}

- (jint)bits {
  return 128;
}

- (id<ComGoogleCommonHashHasher>)newHasher {
  return new_ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_initWithInt_(seed_);
}

- (NSString *)description {
  return JreStrcat("$IC", @"Hashing.murmur3_128(", seed_, ')');
}

- (jboolean)isEqual:(id)object {
  if ([object isKindOfClass:[ComGoogleCommonHashMurmur3_128HashFunction class]]) {
    ComGoogleCommonHashMurmur3_128HashFunction *other = (ComGoogleCommonHashMurmur3_128HashFunction *) cast_chk(object, [ComGoogleCommonHashMurmur3_128HashFunction class]);
    return seed_ == ((ComGoogleCommonHashMurmur3_128HashFunction *) nil_chk(other))->seed_;
  }
  return false;
}

- (NSUInteger)hash {
  return ((jint) [[self java_getClass] hash]) ^ seed_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonHashHasher;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, 4 },
    { NULL, "I", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(bits);
  methods[2].selector = @selector(newHasher);
  methods[3].selector = @selector(description);
  methods[4].selector = @selector(isEqual:);
  methods[5].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "seed_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = ComGoogleCommonHashMurmur3_128HashFunction_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "toString", "equals", "LNSObject;", (void *)&ComGoogleCommonHashMurmur3_128HashFunction__Annotations$0, "hashCode", "LComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher;" };
  static const J2ObjcClassInfo _ComGoogleCommonHashMurmur3_128HashFunction = { "Murmur3_128HashFunction", "com.google.common.hash", ptrTable, methods, fields, 7, 0x10, 6, 2, -1, 6, -1, -1, -1 };
  return &_ComGoogleCommonHashMurmur3_128HashFunction;
}

@end

void ComGoogleCommonHashMurmur3_128HashFunction_initWithInt_(ComGoogleCommonHashMurmur3_128HashFunction *self, jint seed) {
  ComGoogleCommonHashAbstractStreamingHashFunction_init(self);
  self->seed_ = seed;
}

ComGoogleCommonHashMurmur3_128HashFunction *new_ComGoogleCommonHashMurmur3_128HashFunction_initWithInt_(jint seed) {
  J2OBJC_NEW_IMPL(ComGoogleCommonHashMurmur3_128HashFunction, initWithInt_, seed)
}

ComGoogleCommonHashMurmur3_128HashFunction *create_ComGoogleCommonHashMurmur3_128HashFunction_initWithInt_(jint seed) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonHashMurmur3_128HashFunction, initWithInt_, seed)
}

IOSObjectArray *ComGoogleCommonHashMurmur3_128HashFunction__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonHashMurmur3_128HashFunction)

@implementation ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher

- (instancetype)initWithInt:(jint)seed {
  ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_initWithInt_(self, seed);
  return self;
}

- (void)processWithJavaNioByteBuffer:(JavaNioByteBuffer *)bb {
  jlong k1 = [((JavaNioByteBuffer *) nil_chk(bb)) getLong];
  jlong k2 = [bb getLong];
  ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_bmix64WithLong_withLong_(self, k1, k2);
  length_ += ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_CHUNK_SIZE;
}

- (void)bmix64WithLong:(jlong)k1
              withLong:(jlong)k2 {
  ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_bmix64WithLong_withLong_(self, k1, k2);
}

- (void)processRemainingWithJavaNioByteBuffer:(JavaNioByteBuffer *)bb {
  jlong k1 = 0;
  jlong k2 = 0;
  length_ += [((JavaNioByteBuffer *) nil_chk(bb)) remaining];
  switch ([bb remaining]) {
    case 15:
    k2 ^= JreLShift64((jlong) ComGoogleCommonPrimitivesUnsignedBytes_toIntWithByte_([bb getWithInt:14]), 48);
    case 14:
    k2 ^= JreLShift64((jlong) ComGoogleCommonPrimitivesUnsignedBytes_toIntWithByte_([bb getWithInt:13]), 40);
    case 13:
    k2 ^= JreLShift64((jlong) ComGoogleCommonPrimitivesUnsignedBytes_toIntWithByte_([bb getWithInt:12]), 32);
    case 12:
    k2 ^= JreLShift64((jlong) ComGoogleCommonPrimitivesUnsignedBytes_toIntWithByte_([bb getWithInt:11]), 24);
    case 11:
    k2 ^= JreLShift64((jlong) ComGoogleCommonPrimitivesUnsignedBytes_toIntWithByte_([bb getWithInt:10]), 16);
    case 10:
    k2 ^= JreLShift64((jlong) ComGoogleCommonPrimitivesUnsignedBytes_toIntWithByte_([bb getWithInt:9]), 8);
    case 9:
    k2 ^= (jlong) ComGoogleCommonPrimitivesUnsignedBytes_toIntWithByte_([bb getWithInt:8]);
    case 8:
    k1 ^= [bb getLong];
    break;
    case 7:
    k1 ^= JreLShift64((jlong) ComGoogleCommonPrimitivesUnsignedBytes_toIntWithByte_([bb getWithInt:6]), 48);
    case 6:
    k1 ^= JreLShift64((jlong) ComGoogleCommonPrimitivesUnsignedBytes_toIntWithByte_([bb getWithInt:5]), 40);
    case 5:
    k1 ^= JreLShift64((jlong) ComGoogleCommonPrimitivesUnsignedBytes_toIntWithByte_([bb getWithInt:4]), 32);
    case 4:
    k1 ^= JreLShift64((jlong) ComGoogleCommonPrimitivesUnsignedBytes_toIntWithByte_([bb getWithInt:3]), 24);
    case 3:
    k1 ^= JreLShift64((jlong) ComGoogleCommonPrimitivesUnsignedBytes_toIntWithByte_([bb getWithInt:2]), 16);
    case 2:
    k1 ^= JreLShift64((jlong) ComGoogleCommonPrimitivesUnsignedBytes_toIntWithByte_([bb getWithInt:1]), 8);
    case 1:
    k1 ^= (jlong) ComGoogleCommonPrimitivesUnsignedBytes_toIntWithByte_([bb getWithInt:0]);
    break;
    default:
    @throw new_JavaLangAssertionError_initWithId_(@"Should never get here.");
  }
  h1_ ^= ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_mixK1WithLong_(k1);
  h2_ ^= ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_mixK2WithLong_(k2);
}

- (ComGoogleCommonHashHashCode *)makeHash {
  h1_ ^= length_;
  h2_ ^= length_;
  h1_ += h2_;
  h2_ += h1_;
  h1_ = ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_fmix64WithLong_(h1_);
  h2_ = ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_fmix64WithLong_(h2_);
  h1_ += h2_;
  h2_ += h1_;
  return ComGoogleCommonHashHashCode_fromBytesNoCopyWithByteArray_([((JavaNioByteBuffer *) nil_chk([((JavaNioByteBuffer *) nil_chk([((JavaNioByteBuffer *) nil_chk([((JavaNioByteBuffer *) nil_chk(JavaNioByteBuffer_wrapWithByteArray_([IOSByteArray newArrayWithLength:ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_CHUNK_SIZE]))) orderWithJavaNioByteOrder:JreLoadStatic(JavaNioByteOrder, LITTLE_ENDIAN)])) putLongWithLong:h1_])) putLongWithLong:h2_])) array]);
}

+ (jlong)fmix64WithLong:(jlong)k {
  return ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_fmix64WithLong_(k);
}

+ (jlong)mixK1WithLong:(jlong)k1 {
  return ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_mixK1WithLong_(k1);
}

+ (jlong)mixK2WithLong:(jlong)k2 {
  return ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_mixK2WithLong_(k2);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 5, 2, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonHashHashCode;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0xa, 6, 7, -1, -1, -1, -1 },
    { NULL, "J", 0xa, 8, 7, -1, -1, -1, -1 },
    { NULL, "J", 0xa, 9, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(processWithJavaNioByteBuffer:);
  methods[2].selector = @selector(bmix64WithLong:withLong:);
  methods[3].selector = @selector(processRemainingWithJavaNioByteBuffer:);
  methods[4].selector = @selector(makeHash);
  methods[5].selector = @selector(fmix64WithLong:);
  methods[6].selector = @selector(mixK1WithLong:);
  methods[7].selector = @selector(mixK2WithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CHUNK_SIZE", "I", .constantValue.asInt = ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_CHUNK_SIZE, 0x1a, -1, -1, -1, -1 },
    { "C1", "J", .constantValue.asLong = ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_C1, 0x1a, -1, -1, -1, -1 },
    { "C2", "J", .constantValue.asLong = ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_C2, 0x1a, -1, -1, -1, -1 },
    { "h1_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "h2_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "length_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "process", "LJavaNioByteBuffer;", "bmix64", "JJ", "processRemaining", "fmix64", "J", "mixK1", "mixK2", "LComGoogleCommonHashMurmur3_128HashFunction;" };
  static const J2ObjcClassInfo _ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher = { "Murmur3_128Hasher", "com.google.common.hash", ptrTable, methods, fields, 7, 0x1a, 8, 6, 10, -1, -1, -1, -1 };
  return &_ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher;
}

@end

void ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_initWithInt_(ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher *self, jint seed) {
  ComGoogleCommonHashAbstractStreamingHashFunction_AbstractStreamingHasher_initWithInt_(self, ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_CHUNK_SIZE);
  self->h1_ = seed;
  self->h2_ = seed;
  self->length_ = 0;
}

ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher *new_ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_initWithInt_(jint seed) {
  J2OBJC_NEW_IMPL(ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher, initWithInt_, seed)
}

ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher *create_ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_initWithInt_(jint seed) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher, initWithInt_, seed)
}

void ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_bmix64WithLong_withLong_(ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher *self, jlong k1, jlong k2) {
  self->h1_ ^= ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_mixK1WithLong_(k1);
  self->h1_ = JavaLangLong_rotateLeftWithLong_withInt_(self->h1_, 27);
  self->h1_ += self->h2_;
  self->h1_ = self->h1_ * 5 + (jint) 0x52dce729;
  self->h2_ ^= ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_mixK2WithLong_(k2);
  self->h2_ = JavaLangLong_rotateLeftWithLong_withInt_(self->h2_, 31);
  self->h2_ += self->h1_;
  self->h2_ = self->h2_ * 5 + (jint) 0x38495ab5;
}

jlong ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_fmix64WithLong_(jlong k) {
  ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_initialize();
  k ^= JreURShift64(k, 33);
  k *= (jlong) 0xff51afd7ed558ccdLL;
  k ^= JreURShift64(k, 33);
  k *= (jlong) 0xc4ceb9fe1a85ec53LL;
  k ^= JreURShift64(k, 33);
  return k;
}

jlong ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_mixK1WithLong_(jlong k1) {
  ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_initialize();
  k1 *= ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_C1;
  k1 = JavaLangLong_rotateLeftWithLong_withInt_(k1, 31);
  k1 *= ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_C2;
  return k1;
}

jlong ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_mixK2WithLong_(jlong k2) {
  ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_initialize();
  k2 *= ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_C2;
  k2 = JavaLangLong_rotateLeftWithLong_withInt_(k2, 33);
  k2 *= ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher_C1;
  return k2;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonHashMurmur3_128HashFunction_Murmur3_128Hasher)
