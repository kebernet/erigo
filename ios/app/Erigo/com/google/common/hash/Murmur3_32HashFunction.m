//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/hash/Murmur3_32HashFunction.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/hash/AbstractStreamingHashFunction.h"
#include "com/google/common/hash/HashCode.h"
#include "com/google/common/hash/Hasher.h"
#include "com/google/common/hash/Murmur3_32HashFunction.h"
#include "com/google/common/primitives/Chars.h"
#include "com/google/common/primitives/Ints.h"
#include "com/google/common/primitives/Longs.h"
#include "com/google/common/primitives/UnsignedBytes.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Integer.h"
#include "java/lang/annotation/Annotation.h"
#include "java/nio/ByteBuffer.h"
#include "javax/annotation/Nullable.h"

@interface ComGoogleCommonHashMurmur3_32HashFunction () {
 @public
  jint seed_;
}

+ (jint)mixK1WithInt:(jint)k1;

+ (jint)mixH1WithInt:(jint)h1
             withInt:(jint)k1;

+ (ComGoogleCommonHashHashCode *)fmixWithInt:(jint)h1
                                     withInt:(jint)length;

@end

inline jint ComGoogleCommonHashMurmur3_32HashFunction_get_C1();
#define ComGoogleCommonHashMurmur3_32HashFunction_C1 -862048943
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonHashMurmur3_32HashFunction, C1, jint)

inline jint ComGoogleCommonHashMurmur3_32HashFunction_get_C2();
#define ComGoogleCommonHashMurmur3_32HashFunction_C2 461845907
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonHashMurmur3_32HashFunction, C2, jint)

inline jlong ComGoogleCommonHashMurmur3_32HashFunction_get_serialVersionUID();
#define ComGoogleCommonHashMurmur3_32HashFunction_serialVersionUID 0LL
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonHashMurmur3_32HashFunction, serialVersionUID, jlong)

__attribute__((unused)) static jint ComGoogleCommonHashMurmur3_32HashFunction_mixK1WithInt_(jint k1);

__attribute__((unused)) static jint ComGoogleCommonHashMurmur3_32HashFunction_mixH1WithInt_withInt_(jint h1, jint k1);

__attribute__((unused)) static ComGoogleCommonHashHashCode *ComGoogleCommonHashMurmur3_32HashFunction_fmixWithInt_withInt_(jint h1, jint length);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonHashMurmur3_32HashFunction__Annotations$0();

@interface ComGoogleCommonHashMurmur3_32HashFunction_Murmur3_32Hasher : ComGoogleCommonHashAbstractStreamingHashFunction_AbstractStreamingHasher {
 @public
  jint h1_;
  jint length_;
}

- (instancetype)initWithInt:(jint)seed;

- (void)processWithJavaNioByteBuffer:(JavaNioByteBuffer *)bb;

- (void)processRemainingWithJavaNioByteBuffer:(JavaNioByteBuffer *)bb;

- (ComGoogleCommonHashHashCode *)makeHash;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonHashMurmur3_32HashFunction_Murmur3_32Hasher)

inline jint ComGoogleCommonHashMurmur3_32HashFunction_Murmur3_32Hasher_get_CHUNK_SIZE();
#define ComGoogleCommonHashMurmur3_32HashFunction_Murmur3_32Hasher_CHUNK_SIZE 4
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonHashMurmur3_32HashFunction_Murmur3_32Hasher, CHUNK_SIZE, jint)

__attribute__((unused)) static void ComGoogleCommonHashMurmur3_32HashFunction_Murmur3_32Hasher_initWithInt_(ComGoogleCommonHashMurmur3_32HashFunction_Murmur3_32Hasher *self, jint seed);

__attribute__((unused)) static ComGoogleCommonHashMurmur3_32HashFunction_Murmur3_32Hasher *new_ComGoogleCommonHashMurmur3_32HashFunction_Murmur3_32Hasher_initWithInt_(jint seed) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonHashMurmur3_32HashFunction_Murmur3_32Hasher *create_ComGoogleCommonHashMurmur3_32HashFunction_Murmur3_32Hasher_initWithInt_(jint seed);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonHashMurmur3_32HashFunction_Murmur3_32Hasher)

@implementation ComGoogleCommonHashMurmur3_32HashFunction

- (instancetype)initWithInt:(jint)seed {
  ComGoogleCommonHashMurmur3_32HashFunction_initWithInt_(self, seed);
  return self;
}

- (jint)bits {
  return 32;
}

- (id<ComGoogleCommonHashHasher>)newHasher {
  return new_ComGoogleCommonHashMurmur3_32HashFunction_Murmur3_32Hasher_initWithInt_(seed_);
}

- (NSString *)description {
  return JreStrcat("$IC", @"Hashing.murmur3_32(", seed_, ')');
}

- (jboolean)isEqual:(id)object {
  if ([object isKindOfClass:[ComGoogleCommonHashMurmur3_32HashFunction class]]) {
    ComGoogleCommonHashMurmur3_32HashFunction *other = (ComGoogleCommonHashMurmur3_32HashFunction *) cast_chk(object, [ComGoogleCommonHashMurmur3_32HashFunction class]);
    return seed_ == ((ComGoogleCommonHashMurmur3_32HashFunction *) nil_chk(other))->seed_;
  }
  return false;
}

- (NSUInteger)hash {
  return ((jint) [[self java_getClass] hash]) ^ seed_;
}

- (ComGoogleCommonHashHashCode *)hashIntWithInt:(jint)input {
  jint k1 = ComGoogleCommonHashMurmur3_32HashFunction_mixK1WithInt_(input);
  jint h1 = ComGoogleCommonHashMurmur3_32HashFunction_mixH1WithInt_withInt_(seed_, k1);
  return ComGoogleCommonHashMurmur3_32HashFunction_fmixWithInt_withInt_(h1, ComGoogleCommonPrimitivesInts_BYTES);
}

- (ComGoogleCommonHashHashCode *)hashLongWithLong:(jlong)input {
  jint low = (jint) input;
  jint high = (jint) (JreURShift64(input, 32));
  jint k1 = ComGoogleCommonHashMurmur3_32HashFunction_mixK1WithInt_(low);
  jint h1 = ComGoogleCommonHashMurmur3_32HashFunction_mixH1WithInt_withInt_(seed_, k1);
  k1 = ComGoogleCommonHashMurmur3_32HashFunction_mixK1WithInt_(high);
  h1 = ComGoogleCommonHashMurmur3_32HashFunction_mixH1WithInt_withInt_(h1, k1);
  return ComGoogleCommonHashMurmur3_32HashFunction_fmixWithInt_withInt_(h1, ComGoogleCommonPrimitivesLongs_BYTES);
}

- (ComGoogleCommonHashHashCode *)hashUnencodedCharsWithJavaLangCharSequence:(id<JavaLangCharSequence>)input {
  jint h1 = seed_;
  for (jint i = 1; i < [((id<JavaLangCharSequence>) nil_chk(input)) java_length]; i += 2) {
    jint k1 = [input charAtWithInt:i - 1] | (JreLShift32([input charAtWithInt:i], 16));
    k1 = ComGoogleCommonHashMurmur3_32HashFunction_mixK1WithInt_(k1);
    h1 = ComGoogleCommonHashMurmur3_32HashFunction_mixH1WithInt_withInt_(h1, k1);
  }
  if (([input java_length] & 1) == 1) {
    jint k1 = [input charAtWithInt:[input java_length] - 1];
    k1 = ComGoogleCommonHashMurmur3_32HashFunction_mixK1WithInt_(k1);
    h1 ^= k1;
  }
  return ComGoogleCommonHashMurmur3_32HashFunction_fmixWithInt_withInt_(h1, ComGoogleCommonPrimitivesChars_BYTES * [input java_length]);
}

+ (jint)mixK1WithInt:(jint)k1 {
  return ComGoogleCommonHashMurmur3_32HashFunction_mixK1WithInt_(k1);
}

+ (jint)mixH1WithInt:(jint)h1
             withInt:(jint)k1 {
  return ComGoogleCommonHashMurmur3_32HashFunction_mixH1WithInt_withInt_(h1, k1);
}

+ (ComGoogleCommonHashHashCode *)fmixWithInt:(jint)h1
                                     withInt:(jint)length {
  return ComGoogleCommonHashMurmur3_32HashFunction_fmixWithInt_withInt_(h1, length);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonHashHasher;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, 4 },
    { NULL, "I", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonHashHashCode;", 0x1, 6, 0, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonHashHashCode;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonHashHashCode;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 11, 0, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 12, 13, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonHashHashCode;", 0xa, 14, 13, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(bits);
  methods[2].selector = @selector(newHasher);
  methods[3].selector = @selector(description);
  methods[4].selector = @selector(isEqual:);
  methods[5].selector = @selector(hash);
  methods[6].selector = @selector(hashIntWithInt:);
  methods[7].selector = @selector(hashLongWithLong:);
  methods[8].selector = @selector(hashUnencodedCharsWithJavaLangCharSequence:);
  methods[9].selector = @selector(mixK1WithInt:);
  methods[10].selector = @selector(mixH1WithInt:withInt:);
  methods[11].selector = @selector(fmixWithInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "C1", "I", .constantValue.asInt = ComGoogleCommonHashMurmur3_32HashFunction_C1, 0x1a, -1, -1, -1, -1 },
    { "C2", "I", .constantValue.asInt = ComGoogleCommonHashMurmur3_32HashFunction_C2, 0x1a, -1, -1, -1, -1 },
    { "seed_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = ComGoogleCommonHashMurmur3_32HashFunction_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "toString", "equals", "LNSObject;", (void *)&ComGoogleCommonHashMurmur3_32HashFunction__Annotations$0, "hashCode", "hashInt", "hashLong", "J", "hashUnencodedChars", "LJavaLangCharSequence;", "mixK1", "mixH1", "II", "fmix", "LComGoogleCommonHashMurmur3_32HashFunction_Murmur3_32Hasher;" };
  static const J2ObjcClassInfo _ComGoogleCommonHashMurmur3_32HashFunction = { "Murmur3_32HashFunction", "com.google.common.hash", ptrTable, methods, fields, 7, 0x10, 12, 4, -1, 15, -1, -1, -1 };
  return &_ComGoogleCommonHashMurmur3_32HashFunction;
}

@end

void ComGoogleCommonHashMurmur3_32HashFunction_initWithInt_(ComGoogleCommonHashMurmur3_32HashFunction *self, jint seed) {
  ComGoogleCommonHashAbstractStreamingHashFunction_init(self);
  self->seed_ = seed;
}

ComGoogleCommonHashMurmur3_32HashFunction *new_ComGoogleCommonHashMurmur3_32HashFunction_initWithInt_(jint seed) {
  J2OBJC_NEW_IMPL(ComGoogleCommonHashMurmur3_32HashFunction, initWithInt_, seed)
}

ComGoogleCommonHashMurmur3_32HashFunction *create_ComGoogleCommonHashMurmur3_32HashFunction_initWithInt_(jint seed) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonHashMurmur3_32HashFunction, initWithInt_, seed)
}

jint ComGoogleCommonHashMurmur3_32HashFunction_mixK1WithInt_(jint k1) {
  ComGoogleCommonHashMurmur3_32HashFunction_initialize();
  k1 *= ComGoogleCommonHashMurmur3_32HashFunction_C1;
  k1 = JavaLangInteger_rotateLeftWithInt_withInt_(k1, 15);
  k1 *= ComGoogleCommonHashMurmur3_32HashFunction_C2;
  return k1;
}

jint ComGoogleCommonHashMurmur3_32HashFunction_mixH1WithInt_withInt_(jint h1, jint k1) {
  ComGoogleCommonHashMurmur3_32HashFunction_initialize();
  h1 ^= k1;
  h1 = JavaLangInteger_rotateLeftWithInt_withInt_(h1, 13);
  h1 = h1 * 5 + (jint) 0xe6546b64;
  return h1;
}

ComGoogleCommonHashHashCode *ComGoogleCommonHashMurmur3_32HashFunction_fmixWithInt_withInt_(jint h1, jint length) {
  ComGoogleCommonHashMurmur3_32HashFunction_initialize();
  h1 ^= length;
  h1 ^= JreURShift32(h1, 16);
  h1 *= (jint) 0x85ebca6b;
  h1 ^= JreURShift32(h1, 13);
  h1 *= (jint) 0xc2b2ae35;
  h1 ^= JreURShift32(h1, 16);
  return ComGoogleCommonHashHashCode_fromIntWithInt_(h1);
}

IOSObjectArray *ComGoogleCommonHashMurmur3_32HashFunction__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonHashMurmur3_32HashFunction)

@implementation ComGoogleCommonHashMurmur3_32HashFunction_Murmur3_32Hasher

- (instancetype)initWithInt:(jint)seed {
  ComGoogleCommonHashMurmur3_32HashFunction_Murmur3_32Hasher_initWithInt_(self, seed);
  return self;
}

- (void)processWithJavaNioByteBuffer:(JavaNioByteBuffer *)bb {
  jint k1 = ComGoogleCommonHashMurmur3_32HashFunction_mixK1WithInt_([((JavaNioByteBuffer *) nil_chk(bb)) getInt]);
  h1_ = ComGoogleCommonHashMurmur3_32HashFunction_mixH1WithInt_withInt_(h1_, k1);
  length_ += ComGoogleCommonHashMurmur3_32HashFunction_Murmur3_32Hasher_CHUNK_SIZE;
}

- (void)processRemainingWithJavaNioByteBuffer:(JavaNioByteBuffer *)bb {
  length_ += [((JavaNioByteBuffer *) nil_chk(bb)) remaining];
  jint k1 = 0;
  for (jint i = 0; [bb hasRemaining]; i += 8) {
    k1 ^= JreLShift32(ComGoogleCommonPrimitivesUnsignedBytes_toIntWithByte_([bb get]), i);
  }
  h1_ ^= ComGoogleCommonHashMurmur3_32HashFunction_mixK1WithInt_(k1);
}

- (ComGoogleCommonHashHashCode *)makeHash {
  return ComGoogleCommonHashMurmur3_32HashFunction_fmixWithInt_withInt_(h1_, length_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 2, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonHashHashCode;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(processWithJavaNioByteBuffer:);
  methods[2].selector = @selector(processRemainingWithJavaNioByteBuffer:);
  methods[3].selector = @selector(makeHash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CHUNK_SIZE", "I", .constantValue.asInt = ComGoogleCommonHashMurmur3_32HashFunction_Murmur3_32Hasher_CHUNK_SIZE, 0x1a, -1, -1, -1, -1 },
    { "h1_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "length_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "process", "LJavaNioByteBuffer;", "processRemaining", "LComGoogleCommonHashMurmur3_32HashFunction;" };
  static const J2ObjcClassInfo _ComGoogleCommonHashMurmur3_32HashFunction_Murmur3_32Hasher = { "Murmur3_32Hasher", "com.google.common.hash", ptrTable, methods, fields, 7, 0x1a, 4, 3, 4, -1, -1, -1, -1 };
  return &_ComGoogleCommonHashMurmur3_32HashFunction_Murmur3_32Hasher;
}

@end

void ComGoogleCommonHashMurmur3_32HashFunction_Murmur3_32Hasher_initWithInt_(ComGoogleCommonHashMurmur3_32HashFunction_Murmur3_32Hasher *self, jint seed) {
  ComGoogleCommonHashAbstractStreamingHashFunction_AbstractStreamingHasher_initWithInt_(self, ComGoogleCommonHashMurmur3_32HashFunction_Murmur3_32Hasher_CHUNK_SIZE);
  self->h1_ = seed;
  self->length_ = 0;
}

ComGoogleCommonHashMurmur3_32HashFunction_Murmur3_32Hasher *new_ComGoogleCommonHashMurmur3_32HashFunction_Murmur3_32Hasher_initWithInt_(jint seed) {
  J2OBJC_NEW_IMPL(ComGoogleCommonHashMurmur3_32HashFunction_Murmur3_32Hasher, initWithInt_, seed)
}

ComGoogleCommonHashMurmur3_32HashFunction_Murmur3_32Hasher *create_ComGoogleCommonHashMurmur3_32HashFunction_Murmur3_32Hasher_initWithInt_(jint seed) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonHashMurmur3_32HashFunction_Murmur3_32Hasher, initWithInt_, seed)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonHashMurmur3_32HashFunction_Murmur3_32Hasher)
