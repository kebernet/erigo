//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/io/ByteSink.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/io/ByteSink.h"
#include "com/google/common/io/ByteStreams.h"
#include "com/google/common/io/CharSink.h"
#include "com/google/common/io/Closer.h"
#include "java/io/BufferedOutputStream.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/OutputStreamWriter.h"
#include "java/io/Writer.h"
#include "java/lang/RuntimeException.h"
#include "java/nio/charset/Charset.h"

@interface ComGoogleCommonIoByteSink_AsCharSink : ComGoogleCommonIoCharSink {
 @public
  ComGoogleCommonIoByteSink *this$0_;
  JavaNioCharsetCharset *charset_;
}

- (instancetype)initWithComGoogleCommonIoByteSink:(ComGoogleCommonIoByteSink *)outer$
                        withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset;

- (JavaIoWriter *)openStream;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonIoByteSink_AsCharSink)

J2OBJC_FIELD_SETTER(ComGoogleCommonIoByteSink_AsCharSink, charset_, JavaNioCharsetCharset *)

__attribute__((unused)) static void ComGoogleCommonIoByteSink_AsCharSink_initWithComGoogleCommonIoByteSink_withJavaNioCharsetCharset_(ComGoogleCommonIoByteSink_AsCharSink *self, ComGoogleCommonIoByteSink *outer$, JavaNioCharsetCharset *charset);

__attribute__((unused)) static ComGoogleCommonIoByteSink_AsCharSink *new_ComGoogleCommonIoByteSink_AsCharSink_initWithComGoogleCommonIoByteSink_withJavaNioCharsetCharset_(ComGoogleCommonIoByteSink *outer$, JavaNioCharsetCharset *charset) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonIoByteSink_AsCharSink *create_ComGoogleCommonIoByteSink_AsCharSink_initWithComGoogleCommonIoByteSink_withJavaNioCharsetCharset_(ComGoogleCommonIoByteSink *outer$, JavaNioCharsetCharset *charset);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonIoByteSink_AsCharSink)

@implementation ComGoogleCommonIoByteSink

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonIoByteSink_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (ComGoogleCommonIoCharSink *)asCharSinkWithJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset {
  return new_ComGoogleCommonIoByteSink_AsCharSink_initWithComGoogleCommonIoByteSink_withJavaNioCharsetCharset_(self, charset);
}

- (JavaIoOutputStream *)openStream {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaIoOutputStream *)openBufferedStream {
  JavaIoOutputStream *out = [self openStream];
  return ([out isKindOfClass:[JavaIoBufferedOutputStream class]]) ? (JavaIoBufferedOutputStream *) cast_chk(out, [JavaIoBufferedOutputStream class]) : new_JavaIoBufferedOutputStream_initWithJavaIoOutputStream_(out);
}

- (void)writeWithByteArray:(IOSByteArray *)bytes {
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(bytes);
  ComGoogleCommonIoCloser *closer = ComGoogleCommonIoCloser_create();
  @try {
    JavaIoOutputStream *out = ((JavaIoOutputStream *) [((ComGoogleCommonIoCloser *) nil_chk(closer)) register__WithJavaIoCloseable:[self openStream]]);
    [((JavaIoOutputStream *) nil_chk(out)) writeWithByteArray:bytes];
    [out flush];
  }
  @catch (NSException *e) {
    @throw nil_chk([closer rethrowWithNSException:e]);
  }
  @finally {
    [closer close];
  }
}

- (jlong)writeFromWithJavaIoInputStream:(JavaIoInputStream *)input {
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(input);
  ComGoogleCommonIoCloser *closer = ComGoogleCommonIoCloser_create();
  @try {
    JavaIoOutputStream *out = ((JavaIoOutputStream *) [((ComGoogleCommonIoCloser *) nil_chk(closer)) register__WithJavaIoCloseable:[self openStream]]);
    jlong written = ComGoogleCommonIoByteStreams_copy__WithJavaIoInputStream_withJavaIoOutputStream_(input, out);
    [((JavaIoOutputStream *) nil_chk(out)) flush];
    return written;
  }
  @catch (NSException *e) {
    @throw nil_chk([closer rethrowWithNSException:e]);
  }
  @finally {
    [closer close];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonIoCharSink;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaIoOutputStream;", 0x401, -1, -1, 2, -1, -1, -1 },
    { NULL, "LJavaIoOutputStream;", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 2, -1, -1, -1 },
    { NULL, "J", 0x1, 5, 6, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(asCharSinkWithJavaNioCharsetCharset:);
  methods[2].selector = @selector(openStream);
  methods[3].selector = @selector(openBufferedStream);
  methods[4].selector = @selector(writeWithByteArray:);
  methods[5].selector = @selector(writeFromWithJavaIoInputStream:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "asCharSink", "LJavaNioCharsetCharset;", "LJavaIoIOException;", "write", "[B", "writeFrom", "LJavaIoInputStream;", "LComGoogleCommonIoByteSink_AsCharSink;" };
  static const J2ObjcClassInfo _ComGoogleCommonIoByteSink = { "ByteSink", "com.google.common.io", ptrTable, methods, NULL, 7, 0x401, 6, 0, -1, 7, -1, -1, -1 };
  return &_ComGoogleCommonIoByteSink;
}

@end

void ComGoogleCommonIoByteSink_init(ComGoogleCommonIoByteSink *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonIoByteSink)

@implementation ComGoogleCommonIoByteSink_AsCharSink

- (instancetype)initWithComGoogleCommonIoByteSink:(ComGoogleCommonIoByteSink *)outer$
                        withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset {
  ComGoogleCommonIoByteSink_AsCharSink_initWithComGoogleCommonIoByteSink_withJavaNioCharsetCharset_(self, outer$, charset);
  return self;
}

- (JavaIoWriter *)openStream {
  return new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withJavaNioCharsetCharset_([this$0_ openStream], charset_);
}

- (NSString *)description {
  return JreStrcat("$$@C", [this$0_ description], @".asCharSink(", charset_, ')');
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaIoWriter;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonIoByteSink:withJavaNioCharsetCharset:);
  methods[1].selector = @selector(openStream);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonIoByteSink;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "charset_", "LJavaNioCharsetCharset;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaNioCharsetCharset;", "LJavaIoIOException;", "toString", "LComGoogleCommonIoByteSink;" };
  static const J2ObjcClassInfo _ComGoogleCommonIoByteSink_AsCharSink = { "AsCharSink", "com.google.common.io", ptrTable, methods, fields, 7, 0x12, 3, 2, 3, -1, -1, -1, -1 };
  return &_ComGoogleCommonIoByteSink_AsCharSink;
}

@end

void ComGoogleCommonIoByteSink_AsCharSink_initWithComGoogleCommonIoByteSink_withJavaNioCharsetCharset_(ComGoogleCommonIoByteSink_AsCharSink *self, ComGoogleCommonIoByteSink *outer$, JavaNioCharsetCharset *charset) {
  self->this$0_ = outer$;
  ComGoogleCommonIoCharSink_init(self);
  self->charset_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(charset);
}

ComGoogleCommonIoByteSink_AsCharSink *new_ComGoogleCommonIoByteSink_AsCharSink_initWithComGoogleCommonIoByteSink_withJavaNioCharsetCharset_(ComGoogleCommonIoByteSink *outer$, JavaNioCharsetCharset *charset) {
  J2OBJC_NEW_IMPL(ComGoogleCommonIoByteSink_AsCharSink, initWithComGoogleCommonIoByteSink_withJavaNioCharsetCharset_, outer$, charset)
}

ComGoogleCommonIoByteSink_AsCharSink *create_ComGoogleCommonIoByteSink_AsCharSink_initWithComGoogleCommonIoByteSink_withJavaNioCharsetCharset_(ComGoogleCommonIoByteSink *outer$, JavaNioCharsetCharset *charset) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonIoByteSink_AsCharSink, initWithComGoogleCommonIoByteSink_withJavaNioCharsetCharset_, outer$, charset)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonIoByteSink_AsCharSink)
