//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/io/CharSink.java
//

#include "J2ObjC_source.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/io/CharSink.h"
#include "com/google/common/io/CharStreams.h"
#include "com/google/common/io/Closer.h"
#include "java/io/BufferedWriter.h"
#include "java/io/Writer.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Iterable.h"
#include "java/lang/Readable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/util/Iterator.h"
#include "java/util/stream/Stream.h"

@interface ComGoogleCommonIoCharSink ()

- (void)writeLinesWithJavaUtilIterator:(id<JavaUtilIterator>)lines
                          withNSString:(NSString *)lineSeparator;

@end

__attribute__((unused)) static void ComGoogleCommonIoCharSink_writeLinesWithJavaUtilIterator_withNSString_(ComGoogleCommonIoCharSink *self, id<JavaUtilIterator> lines, NSString *lineSeparator);

@implementation ComGoogleCommonIoCharSink

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonIoCharSink_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaIoWriter *)openStream {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaIoWriter *)openBufferedStream {
  JavaIoWriter *writer = [self openStream];
  return ([writer isKindOfClass:[JavaIoBufferedWriter class]]) ? (JavaIoBufferedWriter *) cast_chk(writer, [JavaIoBufferedWriter class]) : new_JavaIoBufferedWriter_initWithJavaIoWriter_(writer);
}

- (void)writeWithJavaLangCharSequence:(id<JavaLangCharSequence>)charSequence {
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(charSequence);
  ComGoogleCommonIoCloser *closer = ComGoogleCommonIoCloser_create();
  @try {
    JavaIoWriter *out = ((JavaIoWriter *) [((ComGoogleCommonIoCloser *) nil_chk(closer)) register__WithJavaIoCloseable:[self openStream]]);
    (void) [((JavaIoWriter *) nil_chk(out)) appendWithJavaLangCharSequence:charSequence];
    [out flush];
  }
  @catch (NSException *e) {
    @throw nil_chk([closer rethrowWithNSException:e]);
  }
  @finally {
    [closer close];
  }
}

- (void)writeLinesWithJavaLangIterable:(id<JavaLangIterable>)lines {
  [self writeLinesWithJavaLangIterable:lines withNSString:JavaLangSystem_getPropertyWithNSString_(@"line.separator")];
}

- (void)writeLinesWithJavaLangIterable:(id<JavaLangIterable>)lines
                          withNSString:(NSString *)lineSeparator {
  ComGoogleCommonIoCharSink_writeLinesWithJavaUtilIterator_withNSString_(self, [((id<JavaLangIterable>) nil_chk(lines)) iterator], lineSeparator);
}

- (void)writeLinesWithJavaUtilStreamStream:(id<JavaUtilStreamStream>)lines {
  [self writeLinesWithJavaUtilStreamStream:lines withNSString:JavaLangSystem_getPropertyWithNSString_(@"line.separator")];
}

- (void)writeLinesWithJavaUtilStreamStream:(id<JavaUtilStreamStream>)lines
                              withNSString:(NSString *)lineSeparator {
  ComGoogleCommonIoCharSink_writeLinesWithJavaUtilIterator_withNSString_(self, [((id<JavaUtilStreamStream>) nil_chk(lines)) iterator], lineSeparator);
}

- (void)writeLinesWithJavaUtilIterator:(id<JavaUtilIterator>)lines
                          withNSString:(NSString *)lineSeparator {
  ComGoogleCommonIoCharSink_writeLinesWithJavaUtilIterator_withNSString_(self, lines, lineSeparator);
}

- (jlong)writeFromWithJavaLangReadable:(id<JavaLangReadable>)readable {
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(readable);
  ComGoogleCommonIoCloser *closer = ComGoogleCommonIoCloser_create();
  @try {
    JavaIoWriter *out = ((JavaIoWriter *) [((ComGoogleCommonIoCloser *) nil_chk(closer)) register__WithJavaIoCloseable:[self openStream]]);
    jlong written = ComGoogleCommonIoCharStreams_copy__WithJavaLangReadable_withJavaLangAppendable_(readable, out);
    [((JavaIoWriter *) nil_chk(out)) flush];
    return written;
  }
  @catch (NSException *e) {
    @throw nil_chk([closer rethrowWithNSException:e]);
  }
  @finally {
    [closer close];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoWriter;", 0x401, -1, -1, 0, -1, -1, -1 },
    { NULL, "LJavaIoWriter;", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 0, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 0, 5, -1, -1 },
    { NULL, "V", 0x1, 3, 6, 0, 7, -1, -1 },
    { NULL, "V", 0x1, 3, 8, 0, 9, -1, -1 },
    { NULL, "V", 0x1, 3, 10, 0, 11, -1, -1 },
    { NULL, "V", 0x2, 3, 12, 0, 13, -1, -1 },
    { NULL, "J", 0x1, 14, 15, 0, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(openStream);
  methods[2].selector = @selector(openBufferedStream);
  methods[3].selector = @selector(writeWithJavaLangCharSequence:);
  methods[4].selector = @selector(writeLinesWithJavaLangIterable:);
  methods[5].selector = @selector(writeLinesWithJavaLangIterable:withNSString:);
  methods[6].selector = @selector(writeLinesWithJavaUtilStreamStream:);
  methods[7].selector = @selector(writeLinesWithJavaUtilStreamStream:withNSString:);
  methods[8].selector = @selector(writeLinesWithJavaUtilIterator:withNSString:);
  methods[9].selector = @selector(writeFromWithJavaLangReadable:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaIoIOException;", "write", "LJavaLangCharSequence;", "writeLines", "LJavaLangIterable;", "(Ljava/lang/Iterable<+Ljava/lang/CharSequence;>;)V", "LJavaLangIterable;LNSString;", "(Ljava/lang/Iterable<+Ljava/lang/CharSequence;>;Ljava/lang/String;)V", "LJavaUtilStreamStream;", "(Ljava/util/stream/Stream<+Ljava/lang/CharSequence;>;)V", "LJavaUtilStreamStream;LNSString;", "(Ljava/util/stream/Stream<+Ljava/lang/CharSequence;>;Ljava/lang/String;)V", "LJavaUtilIterator;LNSString;", "(Ljava/util/Iterator<+Ljava/lang/CharSequence;>;Ljava/lang/String;)V", "writeFrom", "LJavaLangReadable;" };
  static const J2ObjcClassInfo _ComGoogleCommonIoCharSink = { "CharSink", "com.google.common.io", ptrTable, methods, NULL, 7, 0x401, 10, 0, -1, -1, -1, -1, -1 };
  return &_ComGoogleCommonIoCharSink;
}

@end

void ComGoogleCommonIoCharSink_init(ComGoogleCommonIoCharSink *self) {
  NSObject_init(self);
}

void ComGoogleCommonIoCharSink_writeLinesWithJavaUtilIterator_withNSString_(ComGoogleCommonIoCharSink *self, id<JavaUtilIterator> lines, NSString *lineSeparator) {
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(lineSeparator);
  {
    JavaIoWriter *out = [self openBufferedStream];
    NSException *__primaryException1 = nil;
    @try {
      while ([((id<JavaUtilIterator>) nil_chk(lines)) hasNext]) {
        (void) [((JavaIoWriter *) nil_chk([((JavaIoWriter *) nil_chk(out)) appendWithJavaLangCharSequence:[lines next]])) appendWithJavaLangCharSequence:lineSeparator];
      }
    }
    @catch (NSException *e) {
      __primaryException1 = e;
      @throw e;
    }
    @finally {
      if (out != nil) {
        if (__primaryException1 != nil) {
          @try {
            [out close];
          }
          @catch (NSException *e) {
            [__primaryException1 addSuppressedWithNSException:e];
          }
        }
        else {
          [out close];
        }
      }
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonIoCharSink)
