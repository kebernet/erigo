//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/io/CountingInputStream.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/io/CountingInputStream.h"
#include "java/io/FilterInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"

@interface ComGoogleCommonIoCountingInputStream () {
 @public
  jlong count_;
  jlong mark_;
}

@end

@implementation ComGoogleCommonIoCountingInputStream

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  ComGoogleCommonIoCountingInputStream_initWithJavaIoInputStream_(self, inArg);
  return self;
}

- (jlong)getCount {
  return count_;
}

- (jint)read {
  jint result = [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&in_))) read];
  if (result != -1) {
    count_++;
  }
  return result;
}

- (jint)readWithByteArray:(IOSByteArray *)b
                  withInt:(jint)off
                  withInt:(jint)len {
  jint result = [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&in_))) readWithByteArray:b withInt:off withInt:len];
  if (result != -1) {
    count_ += result;
  }
  return result;
}

- (jlong)skipWithLong:(jlong)n {
  jlong result = [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&in_))) skipWithLong:n];
  count_ += result;
  return result;
}

- (void)markWithInt:(jint)readlimit {
  @synchronized(self) {
    [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&in_))) markWithInt:readlimit];
    mark_ = count_;
  }
}

- (void)reset {
  @synchronized(self) {
    if (![((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&in_))) markSupported]) {
      @throw new_JavaIoIOException_initWithNSString_(@"Mark not supported");
    }
    if (mark_ == -1) {
      @throw new_JavaIoIOException_initWithNSString_(@"Mark not set");
    }
    [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&in_))) reset];
    count_ = mark_;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, 1, -1, -1, -1 },
    { NULL, "J", 0x1, 4, 5, 1, -1, -1, -1 },
    { NULL, "V", 0x21, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaIoInputStream:);
  methods[1].selector = @selector(getCount);
  methods[2].selector = @selector(read);
  methods[3].selector = @selector(readWithByteArray:withInt:withInt:);
  methods[4].selector = @selector(skipWithLong:);
  methods[5].selector = @selector(markWithInt:);
  methods[6].selector = @selector(reset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "count_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mark_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoInputStream;", "LJavaIoIOException;", "read", "[BII", "skip", "J", "mark", "I" };
  static const J2ObjcClassInfo _ComGoogleCommonIoCountingInputStream = { "CountingInputStream", "com.google.common.io", ptrTable, methods, fields, 7, 0x11, 7, 2, -1, -1, -1, -1, -1 };
  return &_ComGoogleCommonIoCountingInputStream;
}

@end

void ComGoogleCommonIoCountingInputStream_initWithJavaIoInputStream_(ComGoogleCommonIoCountingInputStream *self, JavaIoInputStream *inArg) {
  JavaIoFilterInputStream_initWithJavaIoInputStream_(self, ComGoogleCommonBasePreconditions_checkNotNullWithId_(inArg));
  self->mark_ = -1;
}

ComGoogleCommonIoCountingInputStream *new_ComGoogleCommonIoCountingInputStream_initWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  J2OBJC_NEW_IMPL(ComGoogleCommonIoCountingInputStream, initWithJavaIoInputStream_, inArg)
}

ComGoogleCommonIoCountingInputStream *create_ComGoogleCommonIoCountingInputStream_initWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonIoCountingInputStream, initWithJavaIoInputStream_, inArg)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonIoCountingInputStream)
