//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/io/ReaderInputStream.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/io/ReaderInputStream.h"
#include "com/google/common/primitives/UnsignedBytes.h"
#include "java/io/InputStream.h"
#include "java/io/Reader.h"
#include "java/lang/Math.h"
#include "java/nio/Buffer.h"
#include "java/nio/ByteBuffer.h"
#include "java/nio/CharBuffer.h"
#include "java/nio/charset/Charset.h"
#include "java/nio/charset/CharsetEncoder.h"
#include "java/nio/charset/CoderResult.h"
#include "java/nio/charset/CodingErrorAction.h"
#include "java/util/Arrays.h"

@interface ComGoogleCommonIoReaderInputStream () {
 @public
  JavaIoReader *reader_;
  JavaNioCharsetCharsetEncoder *encoder_;
  IOSByteArray *singleByte_;
  JavaNioCharBuffer *charBuffer_;
  JavaNioByteBuffer *byteBuffer_;
  jboolean endOfInput_;
  jboolean draining_;
  jboolean doneFlushing_;
}

+ (JavaNioCharBuffer *)growWithJavaNioCharBuffer:(JavaNioCharBuffer *)buf;

- (void)readMoreChars;

+ (jint)availableCapacityWithJavaNioBuffer:(JavaNioBuffer *)buffer;

- (void)startDrainingWithBoolean:(jboolean)overflow;

- (jint)drainWithByteArray:(IOSByteArray *)b
                   withInt:(jint)off
                   withInt:(jint)len;

@end

J2OBJC_FIELD_SETTER(ComGoogleCommonIoReaderInputStream, reader_, JavaIoReader *)
J2OBJC_FIELD_SETTER(ComGoogleCommonIoReaderInputStream, encoder_, JavaNioCharsetCharsetEncoder *)
J2OBJC_FIELD_SETTER(ComGoogleCommonIoReaderInputStream, singleByte_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComGoogleCommonIoReaderInputStream, charBuffer_, JavaNioCharBuffer *)
J2OBJC_FIELD_SETTER(ComGoogleCommonIoReaderInputStream, byteBuffer_, JavaNioByteBuffer *)

__attribute__((unused)) static JavaNioCharBuffer *ComGoogleCommonIoReaderInputStream_growWithJavaNioCharBuffer_(JavaNioCharBuffer *buf);

__attribute__((unused)) static void ComGoogleCommonIoReaderInputStream_readMoreChars(ComGoogleCommonIoReaderInputStream *self);

__attribute__((unused)) static jint ComGoogleCommonIoReaderInputStream_availableCapacityWithJavaNioBuffer_(JavaNioBuffer *buffer);

__attribute__((unused)) static void ComGoogleCommonIoReaderInputStream_startDrainingWithBoolean_(ComGoogleCommonIoReaderInputStream *self, jboolean overflow);

__attribute__((unused)) static jint ComGoogleCommonIoReaderInputStream_drainWithByteArray_withInt_withInt_(ComGoogleCommonIoReaderInputStream *self, IOSByteArray *b, jint off, jint len);

@implementation ComGoogleCommonIoReaderInputStream

- (instancetype)initWithJavaIoReader:(JavaIoReader *)reader
           withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset
                             withInt:(jint)bufferSize {
  ComGoogleCommonIoReaderInputStream_initWithJavaIoReader_withJavaNioCharsetCharset_withInt_(self, reader, charset, bufferSize);
  return self;
}

- (instancetype)initWithJavaIoReader:(JavaIoReader *)reader
    withJavaNioCharsetCharsetEncoder:(JavaNioCharsetCharsetEncoder *)encoder
                             withInt:(jint)bufferSize {
  ComGoogleCommonIoReaderInputStream_initWithJavaIoReader_withJavaNioCharsetCharsetEncoder_withInt_(self, reader, encoder, bufferSize);
  return self;
}

- (void)close {
  [((JavaIoReader *) nil_chk(reader_)) close];
}

- (jint)read {
  return ([self readWithByteArray:singleByte_] == 1) ? ComGoogleCommonPrimitivesUnsignedBytes_toIntWithByte_(IOSByteArray_Get(nil_chk(singleByte_), 0)) : -1;
}

- (jint)readWithByteArray:(IOSByteArray *)b
                  withInt:(jint)off
                  withInt:(jint)len {
  ComGoogleCommonBasePreconditions_checkPositionIndexesWithInt_withInt_withInt_(off, off + len, ((IOSByteArray *) nil_chk(b))->size_);
  if (len == 0) {
    return 0;
  }
  jint totalBytesRead = 0;
  jboolean doneEncoding = endOfInput_;
  while (true) {
    {
      if (draining_) {
        totalBytesRead += ComGoogleCommonIoReaderInputStream_drainWithByteArray_withInt_withInt_(self, b, off + totalBytesRead, len - totalBytesRead);
        if (totalBytesRead == len || doneFlushing_) {
          return (totalBytesRead > 0) ? totalBytesRead : -1;
        }
        draining_ = false;
        (void) [((JavaNioByteBuffer *) nil_chk(byteBuffer_)) clear];
      }
      while (true) {
        JavaNioCharsetCoderResult *result;
        if (doneFlushing_) {
          result = JreLoadStatic(JavaNioCharsetCoderResult, UNDERFLOW);
        }
        else if (doneEncoding) {
          result = [((JavaNioCharsetCharsetEncoder *) nil_chk(encoder_)) flushWithJavaNioByteBuffer:byteBuffer_];
        }
        else {
          result = [((JavaNioCharsetCharsetEncoder *) nil_chk(encoder_)) encodeWithJavaNioCharBuffer:charBuffer_ withJavaNioByteBuffer:byteBuffer_ withBoolean:endOfInput_];
        }
        if ([((JavaNioCharsetCoderResult *) nil_chk(result)) isOverflow]) {
          ComGoogleCommonIoReaderInputStream_startDrainingWithBoolean_(self, true);
          goto continue_DRAINING;
        }
        else if ([result isUnderflow]) {
          if (doneEncoding) {
            doneFlushing_ = true;
            ComGoogleCommonIoReaderInputStream_startDrainingWithBoolean_(self, false);
            goto continue_DRAINING;
          }
          else if (endOfInput_) {
            doneEncoding = true;
          }
          else {
            ComGoogleCommonIoReaderInputStream_readMoreChars(self);
          }
        }
        else if ([result isError]) {
          [result throwException];
          return 0;
        }
      }
    }
    continue_DRAINING: ;
  }
}

+ (JavaNioCharBuffer *)growWithJavaNioCharBuffer:(JavaNioCharBuffer *)buf {
  return ComGoogleCommonIoReaderInputStream_growWithJavaNioCharBuffer_(buf);
}

- (void)readMoreChars {
  ComGoogleCommonIoReaderInputStream_readMoreChars(self);
}

+ (jint)availableCapacityWithJavaNioBuffer:(JavaNioBuffer *)buffer {
  return ComGoogleCommonIoReaderInputStream_availableCapacityWithJavaNioBuffer_(buffer);
}

- (void)startDrainingWithBoolean:(jboolean)overflow {
  ComGoogleCommonIoReaderInputStream_startDrainingWithBoolean_(self, overflow);
}

- (jint)drainWithByteArray:(IOSByteArray *)b
                   withInt:(jint)off
                   withInt:(jint)len {
  return ComGoogleCommonIoReaderInputStream_drainWithByteArray_withInt_withInt_(self, b, off, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 4, 2, -1, -1, -1 },
    { NULL, "LJavaNioCharBuffer;", 0xa, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 2, -1, -1, -1 },
    { NULL, "I", 0xa, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 11, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaIoReader:withJavaNioCharsetCharset:withInt:);
  methods[1].selector = @selector(initWithJavaIoReader:withJavaNioCharsetCharsetEncoder:withInt:);
  methods[2].selector = @selector(close);
  methods[3].selector = @selector(read);
  methods[4].selector = @selector(readWithByteArray:withInt:withInt:);
  methods[5].selector = @selector(growWithJavaNioCharBuffer:);
  methods[6].selector = @selector(readMoreChars);
  methods[7].selector = @selector(availableCapacityWithJavaNioBuffer:);
  methods[8].selector = @selector(startDrainingWithBoolean:);
  methods[9].selector = @selector(drainWithByteArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "reader_", "LJavaIoReader;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "encoder_", "LJavaNioCharsetCharsetEncoder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "singleByte_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "charBuffer_", "LJavaNioCharBuffer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "byteBuffer_", "LJavaNioByteBuffer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "endOfInput_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "draining_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "doneFlushing_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoReader;LJavaNioCharsetCharset;I", "LJavaIoReader;LJavaNioCharsetCharsetEncoder;I", "LJavaIoIOException;", "read", "[BII", "grow", "LJavaNioCharBuffer;", "availableCapacity", "LJavaNioBuffer;", "startDraining", "Z", "drain" };
  static const J2ObjcClassInfo _ComGoogleCommonIoReaderInputStream = { "ReaderInputStream", "com.google.common.io", ptrTable, methods, fields, 7, 0x10, 10, 8, -1, -1, -1, -1, -1 };
  return &_ComGoogleCommonIoReaderInputStream;
}

@end

void ComGoogleCommonIoReaderInputStream_initWithJavaIoReader_withJavaNioCharsetCharset_withInt_(ComGoogleCommonIoReaderInputStream *self, JavaIoReader *reader, JavaNioCharsetCharset *charset, jint bufferSize) {
  ComGoogleCommonIoReaderInputStream_initWithJavaIoReader_withJavaNioCharsetCharsetEncoder_withInt_(self, reader, [((JavaNioCharsetCharsetEncoder *) nil_chk([((JavaNioCharsetCharsetEncoder *) nil_chk([((JavaNioCharsetCharset *) nil_chk(charset)) newEncoder])) onMalformedInputWithJavaNioCharsetCodingErrorAction:JreLoadStatic(JavaNioCharsetCodingErrorAction, REPLACE)])) onUnmappableCharacterWithJavaNioCharsetCodingErrorAction:JreLoadStatic(JavaNioCharsetCodingErrorAction, REPLACE)], bufferSize);
}

ComGoogleCommonIoReaderInputStream *new_ComGoogleCommonIoReaderInputStream_initWithJavaIoReader_withJavaNioCharsetCharset_withInt_(JavaIoReader *reader, JavaNioCharsetCharset *charset, jint bufferSize) {
  J2OBJC_NEW_IMPL(ComGoogleCommonIoReaderInputStream, initWithJavaIoReader_withJavaNioCharsetCharset_withInt_, reader, charset, bufferSize)
}

ComGoogleCommonIoReaderInputStream *create_ComGoogleCommonIoReaderInputStream_initWithJavaIoReader_withJavaNioCharsetCharset_withInt_(JavaIoReader *reader, JavaNioCharsetCharset *charset, jint bufferSize) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonIoReaderInputStream, initWithJavaIoReader_withJavaNioCharsetCharset_withInt_, reader, charset, bufferSize)
}

void ComGoogleCommonIoReaderInputStream_initWithJavaIoReader_withJavaNioCharsetCharsetEncoder_withInt_(ComGoogleCommonIoReaderInputStream *self, JavaIoReader *reader, JavaNioCharsetCharsetEncoder *encoder, jint bufferSize) {
  JavaIoInputStream_init(self);
  self->singleByte_ = [IOSByteArray newArrayWithLength:1];
  self->reader_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(reader);
  self->encoder_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(encoder);
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withInt_(bufferSize > 0, @"bufferSize must be positive: %s", bufferSize);
  (void) [((JavaNioCharsetCharsetEncoder *) nil_chk(encoder)) reset];
  self->charBuffer_ = JavaNioCharBuffer_allocateWithInt_(bufferSize);
  (void) [((JavaNioCharBuffer *) nil_chk(self->charBuffer_)) flip];
  self->byteBuffer_ = JavaNioByteBuffer_allocateWithInt_(bufferSize);
}

ComGoogleCommonIoReaderInputStream *new_ComGoogleCommonIoReaderInputStream_initWithJavaIoReader_withJavaNioCharsetCharsetEncoder_withInt_(JavaIoReader *reader, JavaNioCharsetCharsetEncoder *encoder, jint bufferSize) {
  J2OBJC_NEW_IMPL(ComGoogleCommonIoReaderInputStream, initWithJavaIoReader_withJavaNioCharsetCharsetEncoder_withInt_, reader, encoder, bufferSize)
}

ComGoogleCommonIoReaderInputStream *create_ComGoogleCommonIoReaderInputStream_initWithJavaIoReader_withJavaNioCharsetCharsetEncoder_withInt_(JavaIoReader *reader, JavaNioCharsetCharsetEncoder *encoder, jint bufferSize) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonIoReaderInputStream, initWithJavaIoReader_withJavaNioCharsetCharsetEncoder_withInt_, reader, encoder, bufferSize)
}

JavaNioCharBuffer *ComGoogleCommonIoReaderInputStream_growWithJavaNioCharBuffer_(JavaNioCharBuffer *buf) {
  ComGoogleCommonIoReaderInputStream_initialize();
  IOSCharArray *copy_ = JavaUtilArrays_copyOfWithCharArray_withInt_([((JavaNioCharBuffer *) nil_chk(buf)) array], [buf capacity] * 2);
  JavaNioCharBuffer *bigger = JavaNioCharBuffer_wrapWithCharArray_(copy_);
  (void) [((JavaNioCharBuffer *) nil_chk(bigger)) positionWithInt:[buf position]];
  (void) [bigger limitWithInt:[buf limit]];
  return bigger;
}

void ComGoogleCommonIoReaderInputStream_readMoreChars(ComGoogleCommonIoReaderInputStream *self) {
  if (ComGoogleCommonIoReaderInputStream_availableCapacityWithJavaNioBuffer_(self->charBuffer_) == 0) {
    if ([((JavaNioCharBuffer *) nil_chk(self->charBuffer_)) position] > 0) {
      (void) [((JavaNioCharBuffer *) nil_chk([((JavaNioCharBuffer *) nil_chk(self->charBuffer_)) compact])) flip];
    }
    else {
      self->charBuffer_ = ComGoogleCommonIoReaderInputStream_growWithJavaNioCharBuffer_(self->charBuffer_);
    }
  }
  jint limit = [((JavaNioCharBuffer *) nil_chk(self->charBuffer_)) limit];
  jint numChars = [((JavaIoReader *) nil_chk(self->reader_)) readWithCharArray:[((JavaNioCharBuffer *) nil_chk(self->charBuffer_)) array] withInt:limit withInt:ComGoogleCommonIoReaderInputStream_availableCapacityWithJavaNioBuffer_(self->charBuffer_)];
  if (numChars == -1) {
    self->endOfInput_ = true;
  }
  else {
    (void) [((JavaNioCharBuffer *) nil_chk(self->charBuffer_)) limitWithInt:limit + numChars];
  }
}

jint ComGoogleCommonIoReaderInputStream_availableCapacityWithJavaNioBuffer_(JavaNioBuffer *buffer) {
  ComGoogleCommonIoReaderInputStream_initialize();
  return [((JavaNioBuffer *) nil_chk(buffer)) capacity] - [buffer limit];
}

void ComGoogleCommonIoReaderInputStream_startDrainingWithBoolean_(ComGoogleCommonIoReaderInputStream *self, jboolean overflow) {
  (void) [((JavaNioByteBuffer *) nil_chk(self->byteBuffer_)) flip];
  if (overflow && [((JavaNioByteBuffer *) nil_chk(self->byteBuffer_)) remaining] == 0) {
    self->byteBuffer_ = JavaNioByteBuffer_allocateWithInt_([((JavaNioByteBuffer *) nil_chk(self->byteBuffer_)) capacity] * 2);
  }
  else {
    self->draining_ = true;
  }
}

jint ComGoogleCommonIoReaderInputStream_drainWithByteArray_withInt_withInt_(ComGoogleCommonIoReaderInputStream *self, IOSByteArray *b, jint off, jint len) {
  jint remaining = JavaLangMath_minWithInt_withInt_(len, [((JavaNioByteBuffer *) nil_chk(self->byteBuffer_)) remaining]);
  (void) [((JavaNioByteBuffer *) nil_chk(self->byteBuffer_)) getWithByteArray:b withInt:off withInt:remaining];
  return remaining;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonIoReaderInputStream)
