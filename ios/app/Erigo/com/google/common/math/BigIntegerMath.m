//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/math/BigIntegerMath.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/math/BigIntegerMath.h"
#include "com/google/common/math/DoubleMath.h"
#include "com/google/common/math/DoubleUtils.h"
#include "com/google/common/math/IntMath.h"
#include "com/google/common/math/LongMath.h"
#include "com/google/common/math/MathPreconditions.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Double.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/math/BigDecimal.h"
#include "java/math/BigInteger.h"
#include "java/math/RoundingMode.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface ComGoogleCommonMathBigIntegerMath ()

+ (JavaMathBigInteger *)sqrtFloorWithJavaMathBigInteger:(JavaMathBigInteger *)x;

+ (JavaMathBigInteger *)sqrtApproxWithDoublesWithJavaMathBigInteger:(JavaMathBigInteger *)x;

- (instancetype)init;

@end

inline jdouble ComGoogleCommonMathBigIntegerMath_get_LN_10();
static jdouble ComGoogleCommonMathBigIntegerMath_LN_10;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(ComGoogleCommonMathBigIntegerMath, LN_10, jdouble)

inline jdouble ComGoogleCommonMathBigIntegerMath_get_LN_2();
static jdouble ComGoogleCommonMathBigIntegerMath_LN_2;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(ComGoogleCommonMathBigIntegerMath, LN_2, jdouble)

__attribute__((unused)) static JavaMathBigInteger *ComGoogleCommonMathBigIntegerMath_sqrtFloorWithJavaMathBigInteger_(JavaMathBigInteger *x);

__attribute__((unused)) static JavaMathBigInteger *ComGoogleCommonMathBigIntegerMath_sqrtApproxWithDoublesWithJavaMathBigInteger_(JavaMathBigInteger *x);

__attribute__((unused)) static void ComGoogleCommonMathBigIntegerMath_init(ComGoogleCommonMathBigIntegerMath *self);

__attribute__((unused)) static ComGoogleCommonMathBigIntegerMath *new_ComGoogleCommonMathBigIntegerMath_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonMathBigIntegerMath *create_ComGoogleCommonMathBigIntegerMath_init();

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonMathBigIntegerMath)

JavaMathBigInteger *ComGoogleCommonMathBigIntegerMath_SQRT2_PRECOMPUTED_BITS;

@implementation ComGoogleCommonMathBigIntegerMath

+ (JavaMathBigInteger *)ceilingPowerOfTwoWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  return ComGoogleCommonMathBigIntegerMath_ceilingPowerOfTwoWithJavaMathBigInteger_(x);
}

+ (JavaMathBigInteger *)floorPowerOfTwoWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  return ComGoogleCommonMathBigIntegerMath_floorPowerOfTwoWithJavaMathBigInteger_(x);
}

+ (jboolean)isPowerOfTwoWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  return ComGoogleCommonMathBigIntegerMath_isPowerOfTwoWithJavaMathBigInteger_(x);
}

+ (jint)log2WithJavaMathBigInteger:(JavaMathBigInteger *)x
          withJavaMathRoundingMode:(JavaMathRoundingMode *)mode {
  return ComGoogleCommonMathBigIntegerMath_log2WithJavaMathBigInteger_withJavaMathRoundingMode_(x, mode);
}

+ (jint)log10WithJavaMathBigInteger:(JavaMathBigInteger *)x
           withJavaMathRoundingMode:(JavaMathRoundingMode *)mode {
  return ComGoogleCommonMathBigIntegerMath_log10WithJavaMathBigInteger_withJavaMathRoundingMode_(x, mode);
}

+ (JavaMathBigInteger *)sqrtWithJavaMathBigInteger:(JavaMathBigInteger *)x
                          withJavaMathRoundingMode:(JavaMathRoundingMode *)mode {
  return ComGoogleCommonMathBigIntegerMath_sqrtWithJavaMathBigInteger_withJavaMathRoundingMode_(x, mode);
}

+ (JavaMathBigInteger *)sqrtFloorWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  return ComGoogleCommonMathBigIntegerMath_sqrtFloorWithJavaMathBigInteger_(x);
}

+ (JavaMathBigInteger *)sqrtApproxWithDoublesWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  return ComGoogleCommonMathBigIntegerMath_sqrtApproxWithDoublesWithJavaMathBigInteger_(x);
}

+ (JavaMathBigInteger *)divideWithJavaMathBigInteger:(JavaMathBigInteger *)p
                              withJavaMathBigInteger:(JavaMathBigInteger *)q
                            withJavaMathRoundingMode:(JavaMathRoundingMode *)mode {
  return ComGoogleCommonMathBigIntegerMath_divideWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathRoundingMode_(p, q, mode);
}

+ (JavaMathBigInteger *)factorialWithInt:(jint)n {
  return ComGoogleCommonMathBigIntegerMath_factorialWithInt_(n);
}

+ (JavaMathBigInteger *)listProductWithJavaUtilList:(id<JavaUtilList>)nums {
  return ComGoogleCommonMathBigIntegerMath_listProductWithJavaUtilList_(nums);
}

+ (JavaMathBigInteger *)listProductWithJavaUtilList:(id<JavaUtilList>)nums
                                            withInt:(jint)start
                                            withInt:(jint)end {
  return ComGoogleCommonMathBigIntegerMath_listProductWithJavaUtilList_withInt_withInt_(nums, start, end);
}

+ (JavaMathBigInteger *)binomialWithInt:(jint)n
                                withInt:(jint)k {
  return ComGoogleCommonMathBigIntegerMath_binomialWithInt_withInt_(n, k);
}

+ (jboolean)fitsInLongWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  return ComGoogleCommonMathBigIntegerMath_fitsInLongWithJavaMathBigInteger_(x);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonMathBigIntegerMath_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaMathBigInteger;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 3, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 6, 5, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 7, 5, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0xa, 8, 1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0xa, 9, 1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 10, 11, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 12, 13, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x8, 14, 15, -1, 16, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x8, 14, 17, -1, 18, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 19, 20, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 21, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(ceilingPowerOfTwoWithJavaMathBigInteger:);
  methods[1].selector = @selector(floorPowerOfTwoWithJavaMathBigInteger:);
  methods[2].selector = @selector(isPowerOfTwoWithJavaMathBigInteger:);
  methods[3].selector = @selector(log2WithJavaMathBigInteger:withJavaMathRoundingMode:);
  methods[4].selector = @selector(log10WithJavaMathBigInteger:withJavaMathRoundingMode:);
  methods[5].selector = @selector(sqrtWithJavaMathBigInteger:withJavaMathRoundingMode:);
  methods[6].selector = @selector(sqrtFloorWithJavaMathBigInteger:);
  methods[7].selector = @selector(sqrtApproxWithDoublesWithJavaMathBigInteger:);
  methods[8].selector = @selector(divideWithJavaMathBigInteger:withJavaMathBigInteger:withJavaMathRoundingMode:);
  methods[9].selector = @selector(factorialWithInt:);
  methods[10].selector = @selector(listProductWithJavaUtilList:);
  methods[11].selector = @selector(listProductWithJavaUtilList:withInt:withInt:);
  methods[12].selector = @selector(binomialWithInt:withInt:);
  methods[13].selector = @selector(fitsInLongWithJavaMathBigInteger:);
  methods[14].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SQRT2_PRECOMPUTE_THRESHOLD", "I", .constantValue.asInt = ComGoogleCommonMathBigIntegerMath_SQRT2_PRECOMPUTE_THRESHOLD, 0x18, -1, -1, -1, -1 },
    { "SQRT2_PRECOMPUTED_BITS", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x18, -1, 22, -1, -1 },
    { "LN_10", "D", .constantValue.asLong = 0, 0x1a, -1, 23, -1, -1 },
    { "LN_2", "D", .constantValue.asLong = 0, 0x1a, -1, 24, -1, -1 },
  };
  static const void *ptrTable[] = { "ceilingPowerOfTwo", "LJavaMathBigInteger;", "floorPowerOfTwo", "isPowerOfTwo", "log2", "LJavaMathBigInteger;LJavaMathRoundingMode;", "log10", "sqrt", "sqrtFloor", "sqrtApproxWithDoubles", "divide", "LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathRoundingMode;", "factorial", "I", "listProduct", "LJavaUtilList;", "(Ljava/util/List<Ljava/math/BigInteger;>;)Ljava/math/BigInteger;", "LJavaUtilList;II", "(Ljava/util/List<Ljava/math/BigInteger;>;II)Ljava/math/BigInteger;", "binomial", "II", "fitsInLong", &ComGoogleCommonMathBigIntegerMath_SQRT2_PRECOMPUTED_BITS, &ComGoogleCommonMathBigIntegerMath_LN_10, &ComGoogleCommonMathBigIntegerMath_LN_2 };
  static const J2ObjcClassInfo _ComGoogleCommonMathBigIntegerMath = { "BigIntegerMath", "com.google.common.math", ptrTable, methods, fields, 7, 0x11, 15, 4, -1, -1, -1, -1, -1 };
  return &_ComGoogleCommonMathBigIntegerMath;
}

+ (void)initialize {
  if (self == [ComGoogleCommonMathBigIntegerMath class]) {
    ComGoogleCommonMathBigIntegerMath_SQRT2_PRECOMPUTED_BITS = new_JavaMathBigInteger_initWithNSString_withInt_(@"16a09e667f3bcc908b2fb1366ea957d3e3adec17512775099da2f590b0667322a", 16);
    ComGoogleCommonMathBigIntegerMath_LN_10 = JavaLangMath_logWithDouble_(10);
    ComGoogleCommonMathBigIntegerMath_LN_2 = JavaLangMath_logWithDouble_(2);
    J2OBJC_SET_INITIALIZED(ComGoogleCommonMathBigIntegerMath)
  }
}

@end

JavaMathBigInteger *ComGoogleCommonMathBigIntegerMath_ceilingPowerOfTwoWithJavaMathBigInteger_(JavaMathBigInteger *x) {
  ComGoogleCommonMathBigIntegerMath_initialize();
  return [((JavaMathBigInteger *) nil_chk(JreLoadStatic(JavaMathBigInteger, ZERO))) setBitWithInt:ComGoogleCommonMathBigIntegerMath_log2WithJavaMathBigInteger_withJavaMathRoundingMode_(x, JreLoadEnum(JavaMathRoundingMode, CEILING))];
}

JavaMathBigInteger *ComGoogleCommonMathBigIntegerMath_floorPowerOfTwoWithJavaMathBigInteger_(JavaMathBigInteger *x) {
  ComGoogleCommonMathBigIntegerMath_initialize();
  return [((JavaMathBigInteger *) nil_chk(JreLoadStatic(JavaMathBigInteger, ZERO))) setBitWithInt:ComGoogleCommonMathBigIntegerMath_log2WithJavaMathBigInteger_withJavaMathRoundingMode_(x, JreLoadEnum(JavaMathRoundingMode, FLOOR))];
}

jboolean ComGoogleCommonMathBigIntegerMath_isPowerOfTwoWithJavaMathBigInteger_(JavaMathBigInteger *x) {
  ComGoogleCommonMathBigIntegerMath_initialize();
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(x);
  return [((JavaMathBigInteger *) nil_chk(x)) signum] > 0 && [x getLowestSetBit] == [x bitLength] - 1;
}

jint ComGoogleCommonMathBigIntegerMath_log2WithJavaMathBigInteger_withJavaMathRoundingMode_(JavaMathBigInteger *x, JavaMathRoundingMode *mode) {
  ComGoogleCommonMathBigIntegerMath_initialize();
  (void) ComGoogleCommonMathMathPreconditions_checkPositiveWithNSString_withJavaMathBigInteger_(@"x", ComGoogleCommonBasePreconditions_checkNotNullWithId_(x));
  jint logFloor = [((JavaMathBigInteger *) nil_chk(x)) bitLength] - 1;
  {
    JavaMathBigInteger *x2;
    jint logX2Floor;
    switch ([mode ordinal]) {
      case JavaMathRoundingMode_Enum_UNNECESSARY:
      ComGoogleCommonMathMathPreconditions_checkRoundingUnnecessaryWithBoolean_(ComGoogleCommonMathBigIntegerMath_isPowerOfTwoWithJavaMathBigInteger_(x));
      case JavaMathRoundingMode_Enum_DOWN:
      case JavaMathRoundingMode_Enum_FLOOR:
      return logFloor;
      case JavaMathRoundingMode_Enum_UP:
      case JavaMathRoundingMode_Enum_CEILING:
      return ComGoogleCommonMathBigIntegerMath_isPowerOfTwoWithJavaMathBigInteger_(x) ? logFloor : logFloor + 1;
      case JavaMathRoundingMode_Enum_HALF_DOWN:
      case JavaMathRoundingMode_Enum_HALF_UP:
      case JavaMathRoundingMode_Enum_HALF_EVEN:
      if (logFloor < ComGoogleCommonMathBigIntegerMath_SQRT2_PRECOMPUTE_THRESHOLD) {
        JavaMathBigInteger *halfPower = [((JavaMathBigInteger *) nil_chk(ComGoogleCommonMathBigIntegerMath_SQRT2_PRECOMPUTED_BITS)) shiftRightWithInt:ComGoogleCommonMathBigIntegerMath_SQRT2_PRECOMPUTE_THRESHOLD - logFloor];
        if ([x compareToWithId:halfPower] <= 0) {
          return logFloor;
        }
        else {
          return logFloor + 1;
        }
      }
      x2 = [x powWithInt:2];
      logX2Floor = [((JavaMathBigInteger *) nil_chk(x2)) bitLength] - 1;
      return (logX2Floor < 2 * logFloor + 1) ? logFloor : logFloor + 1;
      default:
      @throw new_JavaLangAssertionError_init();
    }
  }
}

jint ComGoogleCommonMathBigIntegerMath_log10WithJavaMathBigInteger_withJavaMathRoundingMode_(JavaMathBigInteger *x, JavaMathRoundingMode *mode) {
  ComGoogleCommonMathBigIntegerMath_initialize();
  (void) ComGoogleCommonMathMathPreconditions_checkPositiveWithNSString_withJavaMathBigInteger_(@"x", x);
  if (ComGoogleCommonMathBigIntegerMath_fitsInLongWithJavaMathBigInteger_(x)) {
    return ComGoogleCommonMathLongMath_log10WithLong_withJavaMathRoundingMode_([((JavaMathBigInteger *) nil_chk(x)) longLongValue], mode);
  }
  jint approxLog10 = JreFpToInt((ComGoogleCommonMathBigIntegerMath_log2WithJavaMathBigInteger_withJavaMathRoundingMode_(x, JreLoadEnum(JavaMathRoundingMode, FLOOR)) * ComGoogleCommonMathBigIntegerMath_LN_2 / ComGoogleCommonMathBigIntegerMath_LN_10));
  JavaMathBigInteger *approxPow = [((JavaMathBigInteger *) nil_chk(JreLoadStatic(JavaMathBigInteger, TEN))) powWithInt:approxLog10];
  jint approxCmp = [((JavaMathBigInteger *) nil_chk(approxPow)) compareToWithId:x];
  if (approxCmp > 0) {
    do {
      approxLog10--;
      approxPow = [approxPow divideWithJavaMathBigInteger:JreLoadStatic(JavaMathBigInteger, TEN)];
      approxCmp = [((JavaMathBigInteger *) nil_chk(approxPow)) compareToWithId:x];
    }
    while (approxCmp > 0);
  }
  else {
    JavaMathBigInteger *nextPow = [JreLoadStatic(JavaMathBigInteger, TEN) multiplyWithJavaMathBigInteger:approxPow];
    jint nextCmp = [((JavaMathBigInteger *) nil_chk(nextPow)) compareToWithId:x];
    while (nextCmp <= 0) {
      approxLog10++;
      approxPow = nextPow;
      approxCmp = nextCmp;
      nextPow = [JreLoadStatic(JavaMathBigInteger, TEN) multiplyWithJavaMathBigInteger:approxPow];
      nextCmp = [((JavaMathBigInteger *) nil_chk(nextPow)) compareToWithId:x];
    }
  }
  jint floorLog = approxLog10;
  JavaMathBigInteger *floorPow = approxPow;
  jint floorCmp = approxCmp;
  {
    JavaMathBigInteger *x2;
    JavaMathBigInteger *halfPowerSquared;
    switch ([mode ordinal]) {
      case JavaMathRoundingMode_Enum_UNNECESSARY:
      ComGoogleCommonMathMathPreconditions_checkRoundingUnnecessaryWithBoolean_(floorCmp == 0);
      case JavaMathRoundingMode_Enum_FLOOR:
      case JavaMathRoundingMode_Enum_DOWN:
      return floorLog;
      case JavaMathRoundingMode_Enum_CEILING:
      case JavaMathRoundingMode_Enum_UP:
      return [floorPow isEqual:x] ? floorLog : floorLog + 1;
      case JavaMathRoundingMode_Enum_HALF_DOWN:
      case JavaMathRoundingMode_Enum_HALF_UP:
      case JavaMathRoundingMode_Enum_HALF_EVEN:
      x2 = [((JavaMathBigInteger *) nil_chk(x)) powWithInt:2];
      halfPowerSquared = [((JavaMathBigInteger *) nil_chk([floorPow powWithInt:2])) multiplyWithJavaMathBigInteger:JreLoadStatic(JavaMathBigInteger, TEN)];
      return ([((JavaMathBigInteger *) nil_chk(x2)) compareToWithId:halfPowerSquared] <= 0) ? floorLog : floorLog + 1;
      default:
      @throw new_JavaLangAssertionError_init();
    }
  }
}

JavaMathBigInteger *ComGoogleCommonMathBigIntegerMath_sqrtWithJavaMathBigInteger_withJavaMathRoundingMode_(JavaMathBigInteger *x, JavaMathRoundingMode *mode) {
  ComGoogleCommonMathBigIntegerMath_initialize();
  (void) ComGoogleCommonMathMathPreconditions_checkNonNegativeWithNSString_withJavaMathBigInteger_(@"x", x);
  if (ComGoogleCommonMathBigIntegerMath_fitsInLongWithJavaMathBigInteger_(x)) {
    return JavaMathBigInteger_valueOfWithLong_(ComGoogleCommonMathLongMath_sqrtWithLong_withJavaMathRoundingMode_([((JavaMathBigInteger *) nil_chk(x)) longLongValue], mode));
  }
  JavaMathBigInteger *sqrtFloor = ComGoogleCommonMathBigIntegerMath_sqrtFloorWithJavaMathBigInteger_(x);
  {
    jint sqrtFloorInt;
    jboolean sqrtFloorIsExact;
    JavaMathBigInteger *halfSquare;
    switch ([mode ordinal]) {
      case JavaMathRoundingMode_Enum_UNNECESSARY:
      ComGoogleCommonMathMathPreconditions_checkRoundingUnnecessaryWithBoolean_([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(sqrtFloor)) powWithInt:2])) isEqual:x]);
      case JavaMathRoundingMode_Enum_FLOOR:
      case JavaMathRoundingMode_Enum_DOWN:
      return sqrtFloor;
      case JavaMathRoundingMode_Enum_CEILING:
      case JavaMathRoundingMode_Enum_UP:
      sqrtFloorInt = [((JavaMathBigInteger *) nil_chk(sqrtFloor)) intValue];
      sqrtFloorIsExact = ((sqrtFloorInt * sqrtFloorInt == [((JavaMathBigInteger *) nil_chk(x)) intValue]) && [((JavaMathBigInteger *) nil_chk([sqrtFloor powWithInt:2])) isEqual:x]);
      return sqrtFloorIsExact ? sqrtFloor : [sqrtFloor addWithJavaMathBigInteger:JreLoadStatic(JavaMathBigInteger, ONE)];
      case JavaMathRoundingMode_Enum_HALF_DOWN:
      case JavaMathRoundingMode_Enum_HALF_UP:
      case JavaMathRoundingMode_Enum_HALF_EVEN:
      halfSquare = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(sqrtFloor)) powWithInt:2])) addWithJavaMathBigInteger:sqrtFloor];
      return ([((JavaMathBigInteger *) nil_chk(halfSquare)) compareToWithId:x] >= 0) ? sqrtFloor : [sqrtFloor addWithJavaMathBigInteger:JreLoadStatic(JavaMathBigInteger, ONE)];
      default:
      @throw new_JavaLangAssertionError_init();
    }
  }
}

JavaMathBigInteger *ComGoogleCommonMathBigIntegerMath_sqrtFloorWithJavaMathBigInteger_(JavaMathBigInteger *x) {
  ComGoogleCommonMathBigIntegerMath_initialize();
  JavaMathBigInteger *sqrt0;
  jint log2 = ComGoogleCommonMathBigIntegerMath_log2WithJavaMathBigInteger_withJavaMathRoundingMode_(x, JreLoadEnum(JavaMathRoundingMode, FLOOR));
  if (log2 < JavaLangDouble_MAX_EXPONENT) {
    sqrt0 = ComGoogleCommonMathBigIntegerMath_sqrtApproxWithDoublesWithJavaMathBigInteger_(x);
  }
  else {
    jint shift = (log2 - ComGoogleCommonMathDoubleUtils_SIGNIFICAND_BITS) & ~1;
    sqrt0 = [((JavaMathBigInteger *) nil_chk(ComGoogleCommonMathBigIntegerMath_sqrtApproxWithDoublesWithJavaMathBigInteger_([((JavaMathBigInteger *) nil_chk(x)) shiftRightWithInt:shift]))) shiftLeftWithInt:JreRShift32(shift, 1)];
  }
  JavaMathBigInteger *sqrt1 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(sqrt0)) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(x)) divideWithJavaMathBigInteger:sqrt0]])) shiftRightWithInt:1];
  if ([sqrt0 isEqual:sqrt1]) {
    return sqrt0;
  }
  do {
    sqrt0 = sqrt1;
    sqrt1 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(sqrt0)) addWithJavaMathBigInteger:[x divideWithJavaMathBigInteger:sqrt0]])) shiftRightWithInt:1];
  }
  while ([((JavaMathBigInteger *) nil_chk(sqrt1)) compareToWithId:sqrt0] < 0);
  return sqrt0;
}

JavaMathBigInteger *ComGoogleCommonMathBigIntegerMath_sqrtApproxWithDoublesWithJavaMathBigInteger_(JavaMathBigInteger *x) {
  ComGoogleCommonMathBigIntegerMath_initialize();
  return ComGoogleCommonMathDoubleMath_roundToBigIntegerWithDouble_withJavaMathRoundingMode_(JavaLangMath_sqrtWithDouble_(ComGoogleCommonMathDoubleUtils_bigToDoubleWithJavaMathBigInteger_(x)), JreLoadEnum(JavaMathRoundingMode, HALF_EVEN));
}

JavaMathBigInteger *ComGoogleCommonMathBigIntegerMath_divideWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathRoundingMode_(JavaMathBigInteger *p, JavaMathBigInteger *q, JavaMathRoundingMode *mode) {
  ComGoogleCommonMathBigIntegerMath_initialize();
  JavaMathBigDecimal *pDec = new_JavaMathBigDecimal_initWithJavaMathBigInteger_(p);
  JavaMathBigDecimal *qDec = new_JavaMathBigDecimal_initWithJavaMathBigInteger_(q);
  return [((JavaMathBigDecimal *) nil_chk([pDec divideWithJavaMathBigDecimal:qDec withInt:0 withJavaMathRoundingMode:mode])) toBigIntegerExact];
}

JavaMathBigInteger *ComGoogleCommonMathBigIntegerMath_factorialWithInt_(jint n) {
  ComGoogleCommonMathBigIntegerMath_initialize();
  ComGoogleCommonMathMathPreconditions_checkNonNegativeWithNSString_withInt_(@"n", n);
  if (n < ((IOSLongArray *) nil_chk(JreLoadStatic(ComGoogleCommonMathLongMath, factorials)))->size_) {
    return JavaMathBigInteger_valueOfWithLong_(IOSLongArray_Get(JreLoadStatic(ComGoogleCommonMathLongMath, factorials), n));
  }
  jint approxSize = ComGoogleCommonMathIntMath_divideWithInt_withInt_withJavaMathRoundingMode_(n * ComGoogleCommonMathIntMath_log2WithInt_withJavaMathRoundingMode_(n, JreLoadEnum(JavaMathRoundingMode, CEILING)), JavaLangLong_SIZE, JreLoadEnum(JavaMathRoundingMode, CEILING));
  JavaUtilArrayList *bignums = new_JavaUtilArrayList_initWithInt_(approxSize);
  jint startingNumber = JreLoadStatic(ComGoogleCommonMathLongMath, factorials)->size_;
  jlong product = IOSLongArray_Get(JreLoadStatic(ComGoogleCommonMathLongMath, factorials), startingNumber - 1);
  jint shift = JavaLangLong_numberOfTrailingZerosWithLong_(product);
  JreRShiftAssignLong(&product, shift);
  jint productBits = ComGoogleCommonMathLongMath_log2WithLong_withJavaMathRoundingMode_(product, JreLoadEnum(JavaMathRoundingMode, FLOOR)) + 1;
  jint bits = ComGoogleCommonMathLongMath_log2WithLong_withJavaMathRoundingMode_(startingNumber, JreLoadEnum(JavaMathRoundingMode, FLOOR)) + 1;
  jint nextPowerOfTwo = JreLShift32(1, (bits - 1));
  for (jlong num = startingNumber; num <= n; num++) {
    if ((num & nextPowerOfTwo) != 0) {
      JreLShiftAssignInt(&nextPowerOfTwo, 1);
      bits++;
    }
    jint tz = JavaLangLong_numberOfTrailingZerosWithLong_(num);
    jlong normalizedNum = JreRShift64(num, tz);
    shift += tz;
    jint normalizedBits = bits - tz;
    if (normalizedBits + productBits >= JavaLangLong_SIZE) {
      [bignums addWithId:JavaMathBigInteger_valueOfWithLong_(product)];
      product = 1;
      productBits = 0;
    }
    product *= normalizedNum;
    productBits = ComGoogleCommonMathLongMath_log2WithLong_withJavaMathRoundingMode_(product, JreLoadEnum(JavaMathRoundingMode, FLOOR)) + 1;
  }
  if (product > 1) {
    [bignums addWithId:JavaMathBigInteger_valueOfWithLong_(product)];
  }
  return [((JavaMathBigInteger *) nil_chk(ComGoogleCommonMathBigIntegerMath_listProductWithJavaUtilList_(bignums))) shiftLeftWithInt:shift];
}

JavaMathBigInteger *ComGoogleCommonMathBigIntegerMath_listProductWithJavaUtilList_(id<JavaUtilList> nums) {
  ComGoogleCommonMathBigIntegerMath_initialize();
  return ComGoogleCommonMathBigIntegerMath_listProductWithJavaUtilList_withInt_withInt_(nums, 0, [((id<JavaUtilList>) nil_chk(nums)) size]);
}

JavaMathBigInteger *ComGoogleCommonMathBigIntegerMath_listProductWithJavaUtilList_withInt_withInt_(id<JavaUtilList> nums, jint start, jint end) {
  ComGoogleCommonMathBigIntegerMath_initialize();
  {
    jint m;
    switch (end - start) {
      case 0:
      return JreLoadStatic(JavaMathBigInteger, ONE);
      case 1:
      return [((id<JavaUtilList>) nil_chk(nums)) getWithInt:start];
      case 2:
      return [((JavaMathBigInteger *) nil_chk([((id<JavaUtilList>) nil_chk(nums)) getWithInt:start])) multiplyWithJavaMathBigInteger:[nums getWithInt:start + 1]];
      case 3:
      return [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((id<JavaUtilList>) nil_chk(nums)) getWithInt:start])) multiplyWithJavaMathBigInteger:[nums getWithInt:start + 1]])) multiplyWithJavaMathBigInteger:[nums getWithInt:start + 2]];
      default:
      m = JreURShift32((end + start), 1);
      return [((JavaMathBigInteger *) nil_chk(ComGoogleCommonMathBigIntegerMath_listProductWithJavaUtilList_withInt_withInt_(nums, start, m))) multiplyWithJavaMathBigInteger:ComGoogleCommonMathBigIntegerMath_listProductWithJavaUtilList_withInt_withInt_(nums, m, end)];
    }
  }
}

JavaMathBigInteger *ComGoogleCommonMathBigIntegerMath_binomialWithInt_withInt_(jint n, jint k) {
  ComGoogleCommonMathBigIntegerMath_initialize();
  ComGoogleCommonMathMathPreconditions_checkNonNegativeWithNSString_withInt_(@"n", n);
  ComGoogleCommonMathMathPreconditions_checkNonNegativeWithNSString_withInt_(@"k", k);
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withInt_withInt_(k <= n, @"k (%s) > n (%s)", k, n);
  if (k > (JreRShift32(n, 1))) {
    k = n - k;
  }
  if (k < ((IOSIntArray *) nil_chk(JreLoadStatic(ComGoogleCommonMathLongMath, biggestBinomials)))->size_ && n <= IOSIntArray_Get(JreLoadStatic(ComGoogleCommonMathLongMath, biggestBinomials), k)) {
    return JavaMathBigInteger_valueOfWithLong_(ComGoogleCommonMathLongMath_binomialWithInt_withInt_(n, k));
  }
  JavaMathBigInteger *accum = JreLoadStatic(JavaMathBigInteger, ONE);
  jlong numeratorAccum = n;
  jlong denominatorAccum = 1;
  jint bits = ComGoogleCommonMathLongMath_log2WithLong_withJavaMathRoundingMode_(n, JreLoadEnum(JavaMathRoundingMode, CEILING));
  jint numeratorBits = bits;
  for (jint i = 1; i < k; i++) {
    jint p = n - i;
    jint q = i + 1;
    if (numeratorBits + bits >= JavaLangLong_SIZE - 1) {
      accum = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(accum)) multiplyWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(numeratorAccum)])) divideWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(denominatorAccum)];
      numeratorAccum = p;
      denominatorAccum = q;
      numeratorBits = bits;
    }
    else {
      numeratorAccum *= p;
      denominatorAccum *= q;
      numeratorBits += bits;
    }
  }
  return [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(accum)) multiplyWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(numeratorAccum)])) divideWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(denominatorAccum)];
}

jboolean ComGoogleCommonMathBigIntegerMath_fitsInLongWithJavaMathBigInteger_(JavaMathBigInteger *x) {
  ComGoogleCommonMathBigIntegerMath_initialize();
  return [((JavaMathBigInteger *) nil_chk(x)) bitLength] <= JavaLangLong_SIZE - 1;
}

void ComGoogleCommonMathBigIntegerMath_init(ComGoogleCommonMathBigIntegerMath *self) {
  NSObject_init(self);
}

ComGoogleCommonMathBigIntegerMath *new_ComGoogleCommonMathBigIntegerMath_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonMathBigIntegerMath, init)
}

ComGoogleCommonMathBigIntegerMath *create_ComGoogleCommonMathBigIntegerMath_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonMathBigIntegerMath, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonMathBigIntegerMath)
