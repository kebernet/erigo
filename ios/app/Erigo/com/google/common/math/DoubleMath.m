//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/math/DoubleMath.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/math/DoubleMath.h"
#include "com/google/common/math/DoubleUtils.h"
#include "com/google/common/math/LongMath.h"
#include "com/google/common/math/MathPreconditions.h"
#include "com/google/common/primitives/Booleans.h"
#include "java/lang/ArithmeticException.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Double.h"
#include "java/lang/Iterable.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/annotation/Annotation.h"
#include "java/math/BigInteger.h"
#include "java/math/RoundingMode.h"
#include "java/util/Iterator.h"

@interface ComGoogleCommonMathDoubleMath ()

+ (jdouble)checkFiniteWithDouble:(jdouble)argument;

- (instancetype)init;

@end

inline jdouble ComGoogleCommonMathDoubleMath_get_MIN_INT_AS_DOUBLE();
#define ComGoogleCommonMathDoubleMath_MIN_INT_AS_DOUBLE -2.147483648E9
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonMathDoubleMath, MIN_INT_AS_DOUBLE, jdouble)

inline jdouble ComGoogleCommonMathDoubleMath_get_MAX_INT_AS_DOUBLE();
#define ComGoogleCommonMathDoubleMath_MAX_INT_AS_DOUBLE 2.147483647E9
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonMathDoubleMath, MAX_INT_AS_DOUBLE, jdouble)

inline jdouble ComGoogleCommonMathDoubleMath_get_MIN_LONG_AS_DOUBLE();
#define ComGoogleCommonMathDoubleMath_MIN_LONG_AS_DOUBLE -9.223372036854776E18
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonMathDoubleMath, MIN_LONG_AS_DOUBLE, jdouble)

inline jdouble ComGoogleCommonMathDoubleMath_get_MAX_LONG_AS_DOUBLE_PLUS_ONE();
#define ComGoogleCommonMathDoubleMath_MAX_LONG_AS_DOUBLE_PLUS_ONE 9.223372036854776E18
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonMathDoubleMath, MAX_LONG_AS_DOUBLE_PLUS_ONE, jdouble)

inline jdouble ComGoogleCommonMathDoubleMath_get_LN_2();
static jdouble ComGoogleCommonMathDoubleMath_LN_2;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(ComGoogleCommonMathDoubleMath, LN_2, jdouble)

__attribute__((unused)) static jdouble ComGoogleCommonMathDoubleMath_checkFiniteWithDouble_(jdouble argument);

__attribute__((unused)) static void ComGoogleCommonMathDoubleMath_init(ComGoogleCommonMathDoubleMath *self);

__attribute__((unused)) static ComGoogleCommonMathDoubleMath *new_ComGoogleCommonMathDoubleMath_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonMathDoubleMath *create_ComGoogleCommonMathDoubleMath_init();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonMathDoubleMath__Annotations$0();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonMathDoubleMath__Annotations$1();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonMathDoubleMath__Annotations$2();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonMathDoubleMath__Annotations$3();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonMathDoubleMath__Annotations$4();

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonMathDoubleMath)

IOSDoubleArray *ComGoogleCommonMathDoubleMath_everySixteenthFactorial;

@implementation ComGoogleCommonMathDoubleMath

+ (jdouble)roundIntermediateWithDouble:(jdouble)x
              withJavaMathRoundingMode:(JavaMathRoundingMode *)mode {
  return ComGoogleCommonMathDoubleMath_roundIntermediateWithDouble_withJavaMathRoundingMode_(x, mode);
}

+ (jint)roundToIntWithDouble:(jdouble)x
    withJavaMathRoundingMode:(JavaMathRoundingMode *)mode {
  return ComGoogleCommonMathDoubleMath_roundToIntWithDouble_withJavaMathRoundingMode_(x, mode);
}

+ (jlong)roundToLongWithDouble:(jdouble)x
      withJavaMathRoundingMode:(JavaMathRoundingMode *)mode {
  return ComGoogleCommonMathDoubleMath_roundToLongWithDouble_withJavaMathRoundingMode_(x, mode);
}

+ (JavaMathBigInteger *)roundToBigIntegerWithDouble:(jdouble)x
                           withJavaMathRoundingMode:(JavaMathRoundingMode *)mode {
  return ComGoogleCommonMathDoubleMath_roundToBigIntegerWithDouble_withJavaMathRoundingMode_(x, mode);
}

+ (jboolean)isPowerOfTwoWithDouble:(jdouble)x {
  return ComGoogleCommonMathDoubleMath_isPowerOfTwoWithDouble_(x);
}

+ (jdouble)log2WithDouble:(jdouble)x {
  return ComGoogleCommonMathDoubleMath_log2WithDouble_(x);
}

+ (jint)log2WithDouble:(jdouble)x
withJavaMathRoundingMode:(JavaMathRoundingMode *)mode {
  return ComGoogleCommonMathDoubleMath_log2WithDouble_withJavaMathRoundingMode_(x, mode);
}

+ (jboolean)isMathematicalIntegerWithDouble:(jdouble)x {
  return ComGoogleCommonMathDoubleMath_isMathematicalIntegerWithDouble_(x);
}

+ (jdouble)factorialWithInt:(jint)n {
  return ComGoogleCommonMathDoubleMath_factorialWithInt_(n);
}

+ (jboolean)fuzzyEqualsWithDouble:(jdouble)a
                       withDouble:(jdouble)b
                       withDouble:(jdouble)tolerance {
  return ComGoogleCommonMathDoubleMath_fuzzyEqualsWithDouble_withDouble_withDouble_(a, b, tolerance);
}

+ (jint)fuzzyCompareWithDouble:(jdouble)a
                    withDouble:(jdouble)b
                    withDouble:(jdouble)tolerance {
  return ComGoogleCommonMathDoubleMath_fuzzyCompareWithDouble_withDouble_withDouble_(a, b, tolerance);
}

+ (jdouble)meanWithDoubleArray:(IOSDoubleArray *)values {
  return ComGoogleCommonMathDoubleMath_meanWithDoubleArray_(values);
}

+ (jdouble)meanWithIntArray:(IOSIntArray *)values {
  return ComGoogleCommonMathDoubleMath_meanWithIntArray_(values);
}

+ (jdouble)meanWithLongArray:(IOSLongArray *)values {
  return ComGoogleCommonMathDoubleMath_meanWithLongArray_(values);
}

+ (jdouble)meanWithJavaLangIterable:(id<JavaLangIterable>)values {
  return ComGoogleCommonMathDoubleMath_meanWithJavaLangIterable_(values);
}

+ (jdouble)meanWithJavaUtilIterator:(id<JavaUtilIterator>)values {
  return ComGoogleCommonMathDoubleMath_meanWithJavaUtilIterator_(values);
}

+ (jdouble)checkFiniteWithDouble:(jdouble)argument {
  return ComGoogleCommonMathDoubleMath_checkFiniteWithDouble_(argument);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonMathDoubleMath_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "D", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 3, 1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 4, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 5, 6, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 7, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 7, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 8, 6, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 9, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 11, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 13, 12, -1, -1, -1, -1 },
    { NULL, "D", 0x89, 14, 15, -1, -1, 16, -1 },
    { NULL, "D", 0x89, 14, 17, -1, -1, 18, -1 },
    { NULL, "D", 0x89, 14, 19, -1, -1, 20, -1 },
    { NULL, "D", 0x9, 14, 21, -1, 22, 23, -1 },
    { NULL, "D", 0x9, 14, 24, -1, 25, 26, -1 },
    { NULL, "D", 0xa, 27, 6, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(roundIntermediateWithDouble:withJavaMathRoundingMode:);
  methods[1].selector = @selector(roundToIntWithDouble:withJavaMathRoundingMode:);
  methods[2].selector = @selector(roundToLongWithDouble:withJavaMathRoundingMode:);
  methods[3].selector = @selector(roundToBigIntegerWithDouble:withJavaMathRoundingMode:);
  methods[4].selector = @selector(isPowerOfTwoWithDouble:);
  methods[5].selector = @selector(log2WithDouble:);
  methods[6].selector = @selector(log2WithDouble:withJavaMathRoundingMode:);
  methods[7].selector = @selector(isMathematicalIntegerWithDouble:);
  methods[8].selector = @selector(factorialWithInt:);
  methods[9].selector = @selector(fuzzyEqualsWithDouble:withDouble:withDouble:);
  methods[10].selector = @selector(fuzzyCompareWithDouble:withDouble:withDouble:);
  methods[11].selector = @selector(meanWithDoubleArray:);
  methods[12].selector = @selector(meanWithIntArray:);
  methods[13].selector = @selector(meanWithLongArray:);
  methods[14].selector = @selector(meanWithJavaLangIterable:);
  methods[15].selector = @selector(meanWithJavaUtilIterator:);
  methods[16].selector = @selector(checkFiniteWithDouble:);
  methods[17].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MIN_INT_AS_DOUBLE", "D", .constantValue.asDouble = ComGoogleCommonMathDoubleMath_MIN_INT_AS_DOUBLE, 0x1a, -1, -1, -1, -1 },
    { "MAX_INT_AS_DOUBLE", "D", .constantValue.asDouble = ComGoogleCommonMathDoubleMath_MAX_INT_AS_DOUBLE, 0x1a, -1, -1, -1, -1 },
    { "MIN_LONG_AS_DOUBLE", "D", .constantValue.asDouble = ComGoogleCommonMathDoubleMath_MIN_LONG_AS_DOUBLE, 0x1a, -1, -1, -1, -1 },
    { "MAX_LONG_AS_DOUBLE_PLUS_ONE", "D", .constantValue.asDouble = ComGoogleCommonMathDoubleMath_MAX_LONG_AS_DOUBLE_PLUS_ONE, 0x1a, -1, -1, -1, -1 },
    { "LN_2", "D", .constantValue.asLong = 0, 0x1a, -1, 28, -1, -1 },
    { "MAX_FACTORIAL", "I", .constantValue.asInt = ComGoogleCommonMathDoubleMath_MAX_FACTORIAL, 0x18, -1, -1, -1, -1 },
    { "everySixteenthFactorial", "[D", .constantValue.asLong = 0, 0x18, -1, 29, -1, -1 },
  };
  static const void *ptrTable[] = { "roundIntermediate", "DLJavaMathRoundingMode;", "roundToInt", "roundToLong", "roundToBigInteger", "isPowerOfTwo", "D", "log2", "isMathematicalInteger", "factorial", "I", "fuzzyEquals", "DDD", "fuzzyCompare", "mean", "[D", (void *)&ComGoogleCommonMathDoubleMath__Annotations$0, "[I", (void *)&ComGoogleCommonMathDoubleMath__Annotations$1, "[J", (void *)&ComGoogleCommonMathDoubleMath__Annotations$2, "LJavaLangIterable;", "(Ljava/lang/Iterable<+Ljava/lang/Number;>;)D", (void *)&ComGoogleCommonMathDoubleMath__Annotations$3, "LJavaUtilIterator;", "(Ljava/util/Iterator<+Ljava/lang/Number;>;)D", (void *)&ComGoogleCommonMathDoubleMath__Annotations$4, "checkFinite", &ComGoogleCommonMathDoubleMath_LN_2, &ComGoogleCommonMathDoubleMath_everySixteenthFactorial };
  static const J2ObjcClassInfo _ComGoogleCommonMathDoubleMath = { "DoubleMath", "com.google.common.math", ptrTable, methods, fields, 7, 0x11, 18, 7, -1, -1, -1, -1, -1 };
  return &_ComGoogleCommonMathDoubleMath;
}

+ (void)initialize {
  if (self == [ComGoogleCommonMathDoubleMath class]) {
    ComGoogleCommonMathDoubleMath_LN_2 = JavaLangMath_logWithDouble_(2);
    ComGoogleCommonMathDoubleMath_everySixteenthFactorial = [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 1.0, 2.0922789888E13, 2.631308369336935E35, 1.2413915592536073E61, 1.2688693218588417E89, 7.156945704626381E118, 9.916779348709496E149, 1.974506857221074E182, 3.856204823625804E215, 5.5502938327393044E249, 4.7147236359920616E284 } count:11];
    J2OBJC_SET_INITIALIZED(ComGoogleCommonMathDoubleMath)
  }
}

@end

jdouble ComGoogleCommonMathDoubleMath_roundIntermediateWithDouble_withJavaMathRoundingMode_(jdouble x, JavaMathRoundingMode *mode) {
  ComGoogleCommonMathDoubleMath_initialize();
  if (!ComGoogleCommonMathDoubleUtils_isFiniteWithDouble_(x)) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"input is infinite or NaN");
  }
  switch ([mode ordinal]) {
    case JavaMathRoundingMode_Enum_UNNECESSARY:
    ComGoogleCommonMathMathPreconditions_checkRoundingUnnecessaryWithBoolean_(ComGoogleCommonMathDoubleMath_isMathematicalIntegerWithDouble_(x));
    return x;
    case JavaMathRoundingMode_Enum_FLOOR:
    if (x >= 0.0 || ComGoogleCommonMathDoubleMath_isMathematicalIntegerWithDouble_(x)) {
      return x;
    }
    else {
      return JreFpToLong(x) - 1;
    }
    case JavaMathRoundingMode_Enum_CEILING:
    if (x <= 0.0 || ComGoogleCommonMathDoubleMath_isMathematicalIntegerWithDouble_(x)) {
      return x;
    }
    else {
      return JreFpToLong(x) + 1;
    }
    case JavaMathRoundingMode_Enum_DOWN:
    return x;
    case JavaMathRoundingMode_Enum_UP:
    if (ComGoogleCommonMathDoubleMath_isMathematicalIntegerWithDouble_(x)) {
      return x;
    }
    else {
      return JreFpToLong(x) + (x > 0 ? 1 : -1);
    }
    case JavaMathRoundingMode_Enum_HALF_EVEN:
    return JavaLangMath_rintWithDouble_(x);
    case JavaMathRoundingMode_Enum_HALF_UP:
    {
      jdouble z = JavaLangMath_rintWithDouble_(x);
      if (JavaLangMath_absWithDouble_(x - z) == 0.5) {
        return x + JavaLangMath_copySignWithDouble_withDouble_(0.5, x);
      }
      else {
        return z;
      }
    }
    case JavaMathRoundingMode_Enum_HALF_DOWN:
    {
      jdouble z = JavaLangMath_rintWithDouble_(x);
      if (JavaLangMath_absWithDouble_(x - z) == 0.5) {
        return x;
      }
      else {
        return z;
      }
    }
    default:
    @throw new_JavaLangAssertionError_init();
  }
}

jint ComGoogleCommonMathDoubleMath_roundToIntWithDouble_withJavaMathRoundingMode_(jdouble x, JavaMathRoundingMode *mode) {
  ComGoogleCommonMathDoubleMath_initialize();
  jdouble z = ComGoogleCommonMathDoubleMath_roundIntermediateWithDouble_withJavaMathRoundingMode_(x, mode);
  ComGoogleCommonMathMathPreconditions_checkInRangeWithBoolean_((z > ComGoogleCommonMathDoubleMath_MIN_INT_AS_DOUBLE - 1.0) & (z < ComGoogleCommonMathDoubleMath_MAX_INT_AS_DOUBLE + 1.0));
  return JreFpToInt(z);
}

jlong ComGoogleCommonMathDoubleMath_roundToLongWithDouble_withJavaMathRoundingMode_(jdouble x, JavaMathRoundingMode *mode) {
  ComGoogleCommonMathDoubleMath_initialize();
  jdouble z = ComGoogleCommonMathDoubleMath_roundIntermediateWithDouble_withJavaMathRoundingMode_(x, mode);
  ComGoogleCommonMathMathPreconditions_checkInRangeWithBoolean_((ComGoogleCommonMathDoubleMath_MIN_LONG_AS_DOUBLE - z < 1.0) & (z < ComGoogleCommonMathDoubleMath_MAX_LONG_AS_DOUBLE_PLUS_ONE));
  return JreFpToLong(z);
}

JavaMathBigInteger *ComGoogleCommonMathDoubleMath_roundToBigIntegerWithDouble_withJavaMathRoundingMode_(jdouble x, JavaMathRoundingMode *mode) {
  ComGoogleCommonMathDoubleMath_initialize();
  x = ComGoogleCommonMathDoubleMath_roundIntermediateWithDouble_withJavaMathRoundingMode_(x, mode);
  if ((ComGoogleCommonMathDoubleMath_MIN_LONG_AS_DOUBLE - x < 1.0) & (x < ComGoogleCommonMathDoubleMath_MAX_LONG_AS_DOUBLE_PLUS_ONE)) {
    return JavaMathBigInteger_valueOfWithLong_(JreFpToLong(x));
  }
  jint exponent = JavaLangMath_getExponentWithDouble_(x);
  jlong significand = ComGoogleCommonMathDoubleUtils_getSignificandWithDouble_(x);
  JavaMathBigInteger *result = [((JavaMathBigInteger *) nil_chk(JavaMathBigInteger_valueOfWithLong_(significand))) shiftLeftWithInt:exponent - ComGoogleCommonMathDoubleUtils_SIGNIFICAND_BITS];
  return (x < 0) ? [((JavaMathBigInteger *) nil_chk(result)) negate] : result;
}

jboolean ComGoogleCommonMathDoubleMath_isPowerOfTwoWithDouble_(jdouble x) {
  ComGoogleCommonMathDoubleMath_initialize();
  return x > 0.0 && ComGoogleCommonMathDoubleUtils_isFiniteWithDouble_(x) && ComGoogleCommonMathLongMath_isPowerOfTwoWithLong_(ComGoogleCommonMathDoubleUtils_getSignificandWithDouble_(x));
}

jdouble ComGoogleCommonMathDoubleMath_log2WithDouble_(jdouble x) {
  ComGoogleCommonMathDoubleMath_initialize();
  return JavaLangMath_logWithDouble_(x) / ComGoogleCommonMathDoubleMath_LN_2;
}

jint ComGoogleCommonMathDoubleMath_log2WithDouble_withJavaMathRoundingMode_(jdouble x, JavaMathRoundingMode *mode) {
  ComGoogleCommonMathDoubleMath_initialize();
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withId_(x > 0.0 && ComGoogleCommonMathDoubleUtils_isFiniteWithDouble_(x), @"x must be positive and finite");
  jint exponent = JavaLangMath_getExponentWithDouble_(x);
  if (!ComGoogleCommonMathDoubleUtils_isNormalWithDouble_(x)) {
    return ComGoogleCommonMathDoubleMath_log2WithDouble_withJavaMathRoundingMode_(x * ComGoogleCommonMathDoubleUtils_IMPLICIT_BIT, mode) - ComGoogleCommonMathDoubleUtils_SIGNIFICAND_BITS;
  }
  jboolean increment;
  {
    jdouble xScaled;
    switch ([mode ordinal]) {
      case JavaMathRoundingMode_Enum_UNNECESSARY:
      ComGoogleCommonMathMathPreconditions_checkRoundingUnnecessaryWithBoolean_(ComGoogleCommonMathDoubleMath_isPowerOfTwoWithDouble_(x));
      case JavaMathRoundingMode_Enum_FLOOR:
      increment = false;
      break;
      case JavaMathRoundingMode_Enum_CEILING:
      increment = !ComGoogleCommonMathDoubleMath_isPowerOfTwoWithDouble_(x);
      break;
      case JavaMathRoundingMode_Enum_DOWN:
      increment = ((exponent < 0) & !ComGoogleCommonMathDoubleMath_isPowerOfTwoWithDouble_(x));
      break;
      case JavaMathRoundingMode_Enum_UP:
      increment = ((exponent >= 0) & !ComGoogleCommonMathDoubleMath_isPowerOfTwoWithDouble_(x));
      break;
      case JavaMathRoundingMode_Enum_HALF_DOWN:
      case JavaMathRoundingMode_Enum_HALF_EVEN:
      case JavaMathRoundingMode_Enum_HALF_UP:
      xScaled = ComGoogleCommonMathDoubleUtils_scaleNormalizeWithDouble_(x);
      increment = ((xScaled * xScaled) > 2.0);
      break;
      default:
      @throw new_JavaLangAssertionError_init();
    }
  }
  return increment ? exponent + 1 : exponent;
}

jboolean ComGoogleCommonMathDoubleMath_isMathematicalIntegerWithDouble_(jdouble x) {
  ComGoogleCommonMathDoubleMath_initialize();
  return ComGoogleCommonMathDoubleUtils_isFiniteWithDouble_(x) && (x == 0.0 || ComGoogleCommonMathDoubleUtils_SIGNIFICAND_BITS - JavaLangLong_numberOfTrailingZerosWithLong_(ComGoogleCommonMathDoubleUtils_getSignificandWithDouble_(x)) <= JavaLangMath_getExponentWithDouble_(x));
}

jdouble ComGoogleCommonMathDoubleMath_factorialWithInt_(jint n) {
  ComGoogleCommonMathDoubleMath_initialize();
  ComGoogleCommonMathMathPreconditions_checkNonNegativeWithNSString_withInt_(@"n", n);
  if (n > ComGoogleCommonMathDoubleMath_MAX_FACTORIAL) {
    return JavaLangDouble_POSITIVE_INFINITY;
  }
  else {
    jdouble accum = 1.0;
    for (jint i = 1 + (n & ~(jint) 0xf); i <= n; i++) {
      JreTimesAssignDoubleD(&accum, i);
    }
    return accum * IOSDoubleArray_Get(nil_chk(ComGoogleCommonMathDoubleMath_everySixteenthFactorial), JreRShift32(n, 4));
  }
}

jboolean ComGoogleCommonMathDoubleMath_fuzzyEqualsWithDouble_withDouble_withDouble_(jdouble a, jdouble b, jdouble tolerance) {
  ComGoogleCommonMathDoubleMath_initialize();
  ComGoogleCommonMathMathPreconditions_checkNonNegativeWithNSString_withDouble_(@"tolerance", tolerance);
  return JavaLangMath_copySignWithDouble_withDouble_(a - b, 1.0) <= tolerance || (a == b) || (JavaLangDouble_isNaNWithDouble_(a) && JavaLangDouble_isNaNWithDouble_(b));
}

jint ComGoogleCommonMathDoubleMath_fuzzyCompareWithDouble_withDouble_withDouble_(jdouble a, jdouble b, jdouble tolerance) {
  ComGoogleCommonMathDoubleMath_initialize();
  if (ComGoogleCommonMathDoubleMath_fuzzyEqualsWithDouble_withDouble_withDouble_(a, b, tolerance)) {
    return 0;
  }
  else if (a < b) {
    return -1;
  }
  else if (a > b) {
    return 1;
  }
  else {
    return ComGoogleCommonPrimitivesBooleans_compareWithBoolean_withBoolean_(JavaLangDouble_isNaNWithDouble_(a), JavaLangDouble_isNaNWithDouble_(b));
  }
}

jdouble ComGoogleCommonMathDoubleMath_meanWithDoubleArray_(IOSDoubleArray *values) {
  ComGoogleCommonMathDoubleMath_initialize();
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withId_(((IOSDoubleArray *) nil_chk(values))->size_ > 0, @"Cannot take mean of 0 values");
  jlong count = 1;
  jdouble mean = ComGoogleCommonMathDoubleMath_checkFiniteWithDouble_(IOSDoubleArray_Get(values, 0));
  for (jint index = 1; index < values->size_; ++index) {
    ComGoogleCommonMathDoubleMath_checkFiniteWithDouble_(IOSDoubleArray_Get(values, index));
    count++;
    JrePlusAssignDoubleD(&mean, (IOSDoubleArray_Get(values, index) - mean) / count);
  }
  return mean;
}

jdouble ComGoogleCommonMathDoubleMath_meanWithIntArray_(IOSIntArray *values) {
  ComGoogleCommonMathDoubleMath_initialize();
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withId_(((IOSIntArray *) nil_chk(values))->size_ > 0, @"Cannot take mean of 0 values");
  jlong sum = 0;
  for (jint index = 0; index < values->size_; ++index) {
    sum += IOSIntArray_Get(values, index);
  }
  return (jdouble) sum / values->size_;
}

jdouble ComGoogleCommonMathDoubleMath_meanWithLongArray_(IOSLongArray *values) {
  ComGoogleCommonMathDoubleMath_initialize();
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withId_(((IOSLongArray *) nil_chk(values))->size_ > 0, @"Cannot take mean of 0 values");
  jlong count = 1;
  jdouble mean = IOSLongArray_Get(values, 0);
  for (jint index = 1; index < values->size_; ++index) {
    count++;
    JrePlusAssignDoubleD(&mean, (IOSLongArray_Get(values, index) - mean) / count);
  }
  return mean;
}

jdouble ComGoogleCommonMathDoubleMath_meanWithJavaLangIterable_(id<JavaLangIterable> values) {
  ComGoogleCommonMathDoubleMath_initialize();
  return ComGoogleCommonMathDoubleMath_meanWithJavaUtilIterator_([((id<JavaLangIterable>) nil_chk(values)) iterator]);
}

jdouble ComGoogleCommonMathDoubleMath_meanWithJavaUtilIterator_(id<JavaUtilIterator> values) {
  ComGoogleCommonMathDoubleMath_initialize();
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withId_([((id<JavaUtilIterator>) nil_chk(values)) hasNext], @"Cannot take mean of 0 values");
  jlong count = 1;
  jdouble mean = ComGoogleCommonMathDoubleMath_checkFiniteWithDouble_([((NSNumber *) nil_chk([values next])) doubleValue]);
  while ([values hasNext]) {
    jdouble value = ComGoogleCommonMathDoubleMath_checkFiniteWithDouble_([((NSNumber *) nil_chk([values next])) doubleValue]);
    count++;
    JrePlusAssignDoubleD(&mean, (value - mean) / count);
  }
  return mean;
}

jdouble ComGoogleCommonMathDoubleMath_checkFiniteWithDouble_(jdouble argument) {
  ComGoogleCommonMathDoubleMath_initialize();
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_(ComGoogleCommonMathDoubleUtils_isFiniteWithDouble_(argument));
  return argument;
}

void ComGoogleCommonMathDoubleMath_init(ComGoogleCommonMathDoubleMath *self) {
  NSObject_init(self);
}

ComGoogleCommonMathDoubleMath *new_ComGoogleCommonMathDoubleMath_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonMathDoubleMath, init)
}

ComGoogleCommonMathDoubleMath *create_ComGoogleCommonMathDoubleMath_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonMathDoubleMath, init)
}

IOSObjectArray *ComGoogleCommonMathDoubleMath__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonMathDoubleMath__Annotations$1() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonMathDoubleMath__Annotations$2() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonMathDoubleMath__Annotations$3() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonMathDoubleMath__Annotations$4() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonMathDoubleMath)
