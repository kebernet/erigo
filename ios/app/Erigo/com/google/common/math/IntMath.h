//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/math/IntMath.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonMathIntMath")
#ifdef RESTRICT_ComGoogleCommonMathIntMath
#define INCLUDE_ALL_ComGoogleCommonMathIntMath 0
#else
#define INCLUDE_ALL_ComGoogleCommonMathIntMath 1
#endif
#undef RESTRICT_ComGoogleCommonMathIntMath

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonMathIntMath_) && (INCLUDE_ALL_ComGoogleCommonMathIntMath || defined(INCLUDE_ComGoogleCommonMathIntMath))
#define ComGoogleCommonMathIntMath_

@class IOSByteArray;
@class IOSIntArray;
@class JavaMathRoundingMode;

@interface ComGoogleCommonMathIntMath : NSObject

#pragma mark Public

+ (jint)binomialWithInt:(jint)n
                withInt:(jint)k;

+ (jint)ceilingPowerOfTwoWithInt:(jint)x;

+ (jint)checkedAddWithInt:(jint)a
                  withInt:(jint)b;

+ (jint)checkedMultiplyWithInt:(jint)a
                       withInt:(jint)b;

+ (jint)checkedPowWithInt:(jint)b
                  withInt:(jint)k;

+ (jint)checkedSubtractWithInt:(jint)a
                       withInt:(jint)b;

+ (jint)divideWithInt:(jint)p
              withInt:(jint)q
withJavaMathRoundingMode:(JavaMathRoundingMode *)mode;

+ (jint)factorialWithInt:(jint)n;

+ (jint)floorPowerOfTwoWithInt:(jint)x;

+ (jint)gcdWithInt:(jint)a
           withInt:(jint)b;

+ (jboolean)isPowerOfTwoWithInt:(jint)x;

+ (jboolean)isPrimeWithInt:(jint)n;

+ (jint)log10WithInt:(jint)x
withJavaMathRoundingMode:(JavaMathRoundingMode *)mode;

+ (jint)log2WithInt:(jint)x
withJavaMathRoundingMode:(JavaMathRoundingMode *)mode;

+ (jint)meanWithInt:(jint)x
            withInt:(jint)y;

+ (jint)modWithInt:(jint)x
           withInt:(jint)m;

+ (jint)powWithInt:(jint)b
           withInt:(jint)k;

+ (jint)saturatedAddWithInt:(jint)a
                    withInt:(jint)b;

+ (jint)saturatedMultiplyWithInt:(jint)a
                         withInt:(jint)b;

+ (jint)saturatedPowWithInt:(jint)b
                    withInt:(jint)k;

+ (jint)saturatedSubtractWithInt:(jint)a
                         withInt:(jint)b;

+ (jint)sqrtWithInt:(jint)x
withJavaMathRoundingMode:(JavaMathRoundingMode *)mode;

#pragma mark Package-Private

+ (jint)lessThanBranchFreeWithInt:(jint)x
                          withInt:(jint)y;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonMathIntMath)

inline jint ComGoogleCommonMathIntMath_get_MAX_SIGNED_POWER_OF_TWO();
#define ComGoogleCommonMathIntMath_MAX_SIGNED_POWER_OF_TWO 1073741824
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonMathIntMath, MAX_SIGNED_POWER_OF_TWO, jint)

inline jint ComGoogleCommonMathIntMath_get_MAX_POWER_OF_SQRT2_UNSIGNED();
#define ComGoogleCommonMathIntMath_MAX_POWER_OF_SQRT2_UNSIGNED -1257966797
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonMathIntMath, MAX_POWER_OF_SQRT2_UNSIGNED, jint)

inline IOSByteArray *ComGoogleCommonMathIntMath_get_maxLog10ForLeadingZeros();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSByteArray *ComGoogleCommonMathIntMath_maxLog10ForLeadingZeros;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonMathIntMath, maxLog10ForLeadingZeros, IOSByteArray *)

inline IOSIntArray *ComGoogleCommonMathIntMath_get_powersOf10();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSIntArray *ComGoogleCommonMathIntMath_powersOf10;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonMathIntMath, powersOf10, IOSIntArray *)

inline IOSIntArray *ComGoogleCommonMathIntMath_get_halfPowersOf10();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSIntArray *ComGoogleCommonMathIntMath_halfPowersOf10;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonMathIntMath, halfPowersOf10, IOSIntArray *)

inline jint ComGoogleCommonMathIntMath_get_FLOOR_SQRT_MAX_INT();
#define ComGoogleCommonMathIntMath_FLOOR_SQRT_MAX_INT 46340
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonMathIntMath, FLOOR_SQRT_MAX_INT, jint)

inline IOSIntArray *ComGoogleCommonMathIntMath_get_biggestBinomials();
inline IOSIntArray *ComGoogleCommonMathIntMath_set_biggestBinomials(IOSIntArray *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSIntArray *ComGoogleCommonMathIntMath_biggestBinomials;
J2OBJC_STATIC_FIELD_OBJ(ComGoogleCommonMathIntMath, biggestBinomials, IOSIntArray *)

FOUNDATION_EXPORT jint ComGoogleCommonMathIntMath_ceilingPowerOfTwoWithInt_(jint x);

FOUNDATION_EXPORT jint ComGoogleCommonMathIntMath_floorPowerOfTwoWithInt_(jint x);

FOUNDATION_EXPORT jboolean ComGoogleCommonMathIntMath_isPowerOfTwoWithInt_(jint x);

FOUNDATION_EXPORT jint ComGoogleCommonMathIntMath_lessThanBranchFreeWithInt_withInt_(jint x, jint y);

FOUNDATION_EXPORT jint ComGoogleCommonMathIntMath_log2WithInt_withJavaMathRoundingMode_(jint x, JavaMathRoundingMode *mode);

FOUNDATION_EXPORT jint ComGoogleCommonMathIntMath_log10WithInt_withJavaMathRoundingMode_(jint x, JavaMathRoundingMode *mode);

FOUNDATION_EXPORT jint ComGoogleCommonMathIntMath_powWithInt_withInt_(jint b, jint k);

FOUNDATION_EXPORT jint ComGoogleCommonMathIntMath_sqrtWithInt_withJavaMathRoundingMode_(jint x, JavaMathRoundingMode *mode);

FOUNDATION_EXPORT jint ComGoogleCommonMathIntMath_divideWithInt_withInt_withJavaMathRoundingMode_(jint p, jint q, JavaMathRoundingMode *mode);

FOUNDATION_EXPORT jint ComGoogleCommonMathIntMath_modWithInt_withInt_(jint x, jint m);

FOUNDATION_EXPORT jint ComGoogleCommonMathIntMath_gcdWithInt_withInt_(jint a, jint b);

FOUNDATION_EXPORT jint ComGoogleCommonMathIntMath_checkedAddWithInt_withInt_(jint a, jint b);

FOUNDATION_EXPORT jint ComGoogleCommonMathIntMath_checkedSubtractWithInt_withInt_(jint a, jint b);

FOUNDATION_EXPORT jint ComGoogleCommonMathIntMath_checkedMultiplyWithInt_withInt_(jint a, jint b);

FOUNDATION_EXPORT jint ComGoogleCommonMathIntMath_checkedPowWithInt_withInt_(jint b, jint k);

FOUNDATION_EXPORT jint ComGoogleCommonMathIntMath_saturatedAddWithInt_withInt_(jint a, jint b);

FOUNDATION_EXPORT jint ComGoogleCommonMathIntMath_saturatedSubtractWithInt_withInt_(jint a, jint b);

FOUNDATION_EXPORT jint ComGoogleCommonMathIntMath_saturatedMultiplyWithInt_withInt_(jint a, jint b);

FOUNDATION_EXPORT jint ComGoogleCommonMathIntMath_saturatedPowWithInt_withInt_(jint b, jint k);

FOUNDATION_EXPORT jint ComGoogleCommonMathIntMath_factorialWithInt_(jint n);

FOUNDATION_EXPORT jint ComGoogleCommonMathIntMath_binomialWithInt_withInt_(jint n, jint k);

FOUNDATION_EXPORT jint ComGoogleCommonMathIntMath_meanWithInt_withInt_(jint x, jint y);

FOUNDATION_EXPORT jboolean ComGoogleCommonMathIntMath_isPrimeWithInt_(jint n);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonMathIntMath)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonMathIntMath")
