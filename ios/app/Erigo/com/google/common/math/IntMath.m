//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/math/IntMath.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/math/IntMath.h"
#include "com/google/common/math/LongMath.h"
#include "com/google/common/math/MathPreconditions.h"
#include "com/google/common/primitives/Ints.h"
#include "java/lang/ArithmeticException.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/math/RoundingMode.h"

@interface ComGoogleCommonMathIntMath ()

+ (jint)log10FloorWithInt:(jint)x;

+ (jint)sqrtFloorWithInt:(jint)x;

- (instancetype)init;

@end

inline IOSIntArray *ComGoogleCommonMathIntMath_get_factorials();
static IOSIntArray *ComGoogleCommonMathIntMath_factorials;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonMathIntMath, factorials, IOSIntArray *)

__attribute__((unused)) static jint ComGoogleCommonMathIntMath_log10FloorWithInt_(jint x);

__attribute__((unused)) static jint ComGoogleCommonMathIntMath_sqrtFloorWithInt_(jint x);

__attribute__((unused)) static void ComGoogleCommonMathIntMath_init(ComGoogleCommonMathIntMath *self);

__attribute__((unused)) static ComGoogleCommonMathIntMath *new_ComGoogleCommonMathIntMath_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonMathIntMath *create_ComGoogleCommonMathIntMath_init();

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonMathIntMath)

IOSByteArray *ComGoogleCommonMathIntMath_maxLog10ForLeadingZeros;
IOSIntArray *ComGoogleCommonMathIntMath_powersOf10;
IOSIntArray *ComGoogleCommonMathIntMath_halfPowersOf10;
IOSIntArray *ComGoogleCommonMathIntMath_biggestBinomials;

@implementation ComGoogleCommonMathIntMath

+ (jint)ceilingPowerOfTwoWithInt:(jint)x {
  return ComGoogleCommonMathIntMath_ceilingPowerOfTwoWithInt_(x);
}

+ (jint)floorPowerOfTwoWithInt:(jint)x {
  return ComGoogleCommonMathIntMath_floorPowerOfTwoWithInt_(x);
}

+ (jboolean)isPowerOfTwoWithInt:(jint)x {
  return ComGoogleCommonMathIntMath_isPowerOfTwoWithInt_(x);
}

+ (jint)lessThanBranchFreeWithInt:(jint)x
                          withInt:(jint)y {
  return ComGoogleCommonMathIntMath_lessThanBranchFreeWithInt_withInt_(x, y);
}

+ (jint)log2WithInt:(jint)x
withJavaMathRoundingMode:(JavaMathRoundingMode *)mode {
  return ComGoogleCommonMathIntMath_log2WithInt_withJavaMathRoundingMode_(x, mode);
}

+ (jint)log10WithInt:(jint)x
withJavaMathRoundingMode:(JavaMathRoundingMode *)mode {
  return ComGoogleCommonMathIntMath_log10WithInt_withJavaMathRoundingMode_(x, mode);
}

+ (jint)log10FloorWithInt:(jint)x {
  return ComGoogleCommonMathIntMath_log10FloorWithInt_(x);
}

+ (jint)powWithInt:(jint)b
           withInt:(jint)k {
  return ComGoogleCommonMathIntMath_powWithInt_withInt_(b, k);
}

+ (jint)sqrtWithInt:(jint)x
withJavaMathRoundingMode:(JavaMathRoundingMode *)mode {
  return ComGoogleCommonMathIntMath_sqrtWithInt_withJavaMathRoundingMode_(x, mode);
}

+ (jint)sqrtFloorWithInt:(jint)x {
  return ComGoogleCommonMathIntMath_sqrtFloorWithInt_(x);
}

+ (jint)divideWithInt:(jint)p
              withInt:(jint)q
withJavaMathRoundingMode:(JavaMathRoundingMode *)mode {
  return ComGoogleCommonMathIntMath_divideWithInt_withInt_withJavaMathRoundingMode_(p, q, mode);
}

+ (jint)modWithInt:(jint)x
           withInt:(jint)m {
  return ComGoogleCommonMathIntMath_modWithInt_withInt_(x, m);
}

+ (jint)gcdWithInt:(jint)a
           withInt:(jint)b {
  return ComGoogleCommonMathIntMath_gcdWithInt_withInt_(a, b);
}

+ (jint)checkedAddWithInt:(jint)a
                  withInt:(jint)b {
  return ComGoogleCommonMathIntMath_checkedAddWithInt_withInt_(a, b);
}

+ (jint)checkedSubtractWithInt:(jint)a
                       withInt:(jint)b {
  return ComGoogleCommonMathIntMath_checkedSubtractWithInt_withInt_(a, b);
}

+ (jint)checkedMultiplyWithInt:(jint)a
                       withInt:(jint)b {
  return ComGoogleCommonMathIntMath_checkedMultiplyWithInt_withInt_(a, b);
}

+ (jint)checkedPowWithInt:(jint)b
                  withInt:(jint)k {
  return ComGoogleCommonMathIntMath_checkedPowWithInt_withInt_(b, k);
}

+ (jint)saturatedAddWithInt:(jint)a
                    withInt:(jint)b {
  return ComGoogleCommonMathIntMath_saturatedAddWithInt_withInt_(a, b);
}

+ (jint)saturatedSubtractWithInt:(jint)a
                         withInt:(jint)b {
  return ComGoogleCommonMathIntMath_saturatedSubtractWithInt_withInt_(a, b);
}

+ (jint)saturatedMultiplyWithInt:(jint)a
                         withInt:(jint)b {
  return ComGoogleCommonMathIntMath_saturatedMultiplyWithInt_withInt_(a, b);
}

+ (jint)saturatedPowWithInt:(jint)b
                    withInt:(jint)k {
  return ComGoogleCommonMathIntMath_saturatedPowWithInt_withInt_(b, k);
}

+ (jint)factorialWithInt:(jint)n {
  return ComGoogleCommonMathIntMath_factorialWithInt_(n);
}

+ (jint)binomialWithInt:(jint)n
                withInt:(jint)k {
  return ComGoogleCommonMathIntMath_binomialWithInt_withInt_(n, k);
}

+ (jint)meanWithInt:(jint)x
            withInt:(jint)y {
  return ComGoogleCommonMathIntMath_meanWithInt_withInt_(x, y);
}

+ (jboolean)isPrimeWithInt:(jint)n {
  return ComGoogleCommonMathIntMath_isPrimeWithInt_(n);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonMathIntMath_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 3, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 8, 7, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 9, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 10, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 11, 7, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 12, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 13, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 15, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 16, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 17, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 18, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 19, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 20, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 21, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 22, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 23, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 24, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 25, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 26, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 27, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 28, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(ceilingPowerOfTwoWithInt:);
  methods[1].selector = @selector(floorPowerOfTwoWithInt:);
  methods[2].selector = @selector(isPowerOfTwoWithInt:);
  methods[3].selector = @selector(lessThanBranchFreeWithInt:withInt:);
  methods[4].selector = @selector(log2WithInt:withJavaMathRoundingMode:);
  methods[5].selector = @selector(log10WithInt:withJavaMathRoundingMode:);
  methods[6].selector = @selector(log10FloorWithInt:);
  methods[7].selector = @selector(powWithInt:withInt:);
  methods[8].selector = @selector(sqrtWithInt:withJavaMathRoundingMode:);
  methods[9].selector = @selector(sqrtFloorWithInt:);
  methods[10].selector = @selector(divideWithInt:withInt:withJavaMathRoundingMode:);
  methods[11].selector = @selector(modWithInt:withInt:);
  methods[12].selector = @selector(gcdWithInt:withInt:);
  methods[13].selector = @selector(checkedAddWithInt:withInt:);
  methods[14].selector = @selector(checkedSubtractWithInt:withInt:);
  methods[15].selector = @selector(checkedMultiplyWithInt:withInt:);
  methods[16].selector = @selector(checkedPowWithInt:withInt:);
  methods[17].selector = @selector(saturatedAddWithInt:withInt:);
  methods[18].selector = @selector(saturatedSubtractWithInt:withInt:);
  methods[19].selector = @selector(saturatedMultiplyWithInt:withInt:);
  methods[20].selector = @selector(saturatedPowWithInt:withInt:);
  methods[21].selector = @selector(factorialWithInt:);
  methods[22].selector = @selector(binomialWithInt:withInt:);
  methods[23].selector = @selector(meanWithInt:withInt:);
  methods[24].selector = @selector(isPrimeWithInt:);
  methods[25].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_SIGNED_POWER_OF_TWO", "I", .constantValue.asInt = ComGoogleCommonMathIntMath_MAX_SIGNED_POWER_OF_TWO, 0x18, -1, -1, -1, -1 },
    { "MAX_POWER_OF_SQRT2_UNSIGNED", "I", .constantValue.asInt = ComGoogleCommonMathIntMath_MAX_POWER_OF_SQRT2_UNSIGNED, 0x18, -1, -1, -1, -1 },
    { "maxLog10ForLeadingZeros", "[B", .constantValue.asLong = 0, 0x18, -1, 29, -1, -1 },
    { "powersOf10", "[I", .constantValue.asLong = 0, 0x18, -1, 30, -1, -1 },
    { "halfPowersOf10", "[I", .constantValue.asLong = 0, 0x18, -1, 31, -1, -1 },
    { "FLOOR_SQRT_MAX_INT", "I", .constantValue.asInt = ComGoogleCommonMathIntMath_FLOOR_SQRT_MAX_INT, 0x18, -1, -1, -1, -1 },
    { "factorials", "[I", .constantValue.asLong = 0, 0x1a, -1, 32, -1, -1 },
    { "biggestBinomials", "[I", .constantValue.asLong = 0, 0x8, -1, 33, -1, -1 },
  };
  static const void *ptrTable[] = { "ceilingPowerOfTwo", "I", "floorPowerOfTwo", "isPowerOfTwo", "lessThanBranchFree", "II", "log2", "ILJavaMathRoundingMode;", "log10", "log10Floor", "pow", "sqrt", "sqrtFloor", "divide", "IILJavaMathRoundingMode;", "mod", "gcd", "checkedAdd", "checkedSubtract", "checkedMultiply", "checkedPow", "saturatedAdd", "saturatedSubtract", "saturatedMultiply", "saturatedPow", "factorial", "binomial", "mean", "isPrime", &ComGoogleCommonMathIntMath_maxLog10ForLeadingZeros, &ComGoogleCommonMathIntMath_powersOf10, &ComGoogleCommonMathIntMath_halfPowersOf10, &ComGoogleCommonMathIntMath_factorials, &ComGoogleCommonMathIntMath_biggestBinomials };
  static const J2ObjcClassInfo _ComGoogleCommonMathIntMath = { "IntMath", "com.google.common.math", ptrTable, methods, fields, 7, 0x11, 26, 8, -1, -1, -1, -1, -1 };
  return &_ComGoogleCommonMathIntMath;
}

+ (void)initialize {
  if (self == [ComGoogleCommonMathIntMath class]) {
    ComGoogleCommonMathIntMath_maxLog10ForLeadingZeros = [IOSByteArray newArrayWithBytes:(jbyte[]){ 9, 9, 9, 8, 8, 8, 7, 7, 7, 6, 6, 6, 6, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0 } count:33];
    ComGoogleCommonMathIntMath_powersOf10 = [IOSIntArray newArrayWithInts:(jint[]){ 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 } count:10];
    ComGoogleCommonMathIntMath_halfPowersOf10 = [IOSIntArray newArrayWithInts:(jint[]){ 3, 31, 316, 3162, 31622, 316227, 3162277, 31622776, 316227766, JavaLangInteger_MAX_VALUE } count:10];
    ComGoogleCommonMathIntMath_factorials = [IOSIntArray newArrayWithInts:(jint[]){ 1, 1, 1 * 2, 1 * 2 * 3, 1 * 2 * 3 * 4, 1 * 2 * 3 * 4 * 5, 1 * 2 * 3 * 4 * 5 * 6, 1 * 2 * 3 * 4 * 5 * 6 * 7, 1 * 2 * 3 * 4 * 5 * 6 * 7 * 8, 1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9, 1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10, 1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11, 1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 * 12 } count:13];
    ComGoogleCommonMathIntMath_biggestBinomials = [IOSIntArray newArrayWithInts:(jint[]){ JavaLangInteger_MAX_VALUE, JavaLangInteger_MAX_VALUE, 65536, 2345, 477, 193, 110, 75, 58, 49, 43, 39, 37, 35, 34, 34, 33 } count:17];
    J2OBJC_SET_INITIALIZED(ComGoogleCommonMathIntMath)
  }
}

@end

jint ComGoogleCommonMathIntMath_ceilingPowerOfTwoWithInt_(jint x) {
  ComGoogleCommonMathIntMath_initialize();
  ComGoogleCommonMathMathPreconditions_checkPositiveWithNSString_withInt_(@"x", x);
  if (x > ComGoogleCommonMathIntMath_MAX_SIGNED_POWER_OF_TWO) {
    @throw new_JavaLangArithmeticException_initWithNSString_(JreStrcat("$I$", @"ceilingPowerOfTwo(", x, @") not representable as an int"));
  }
  return JreLShift32(1, -JavaLangInteger_numberOfLeadingZerosWithInt_(x - 1));
}

jint ComGoogleCommonMathIntMath_floorPowerOfTwoWithInt_(jint x) {
  ComGoogleCommonMathIntMath_initialize();
  ComGoogleCommonMathMathPreconditions_checkPositiveWithNSString_withInt_(@"x", x);
  return JavaLangInteger_highestOneBitWithInt_(x);
}

jboolean ComGoogleCommonMathIntMath_isPowerOfTwoWithInt_(jint x) {
  ComGoogleCommonMathIntMath_initialize();
  return (x > 0) & ((x & (x - 1)) == 0);
}

jint ComGoogleCommonMathIntMath_lessThanBranchFreeWithInt_withInt_(jint x, jint y) {
  ComGoogleCommonMathIntMath_initialize();
  return JreURShift32(~(~(x - y)), (JavaLangInteger_SIZE - 1));
}

jint ComGoogleCommonMathIntMath_log2WithInt_withJavaMathRoundingMode_(jint x, JavaMathRoundingMode *mode) {
  ComGoogleCommonMathIntMath_initialize();
  ComGoogleCommonMathMathPreconditions_checkPositiveWithNSString_withInt_(@"x", x);
  {
    jint leadingZeros;
    jint cmp;
    jint logFloor;
    switch ([mode ordinal]) {
      case JavaMathRoundingMode_Enum_UNNECESSARY:
      ComGoogleCommonMathMathPreconditions_checkRoundingUnnecessaryWithBoolean_(ComGoogleCommonMathIntMath_isPowerOfTwoWithInt_(x));
      case JavaMathRoundingMode_Enum_DOWN:
      case JavaMathRoundingMode_Enum_FLOOR:
      return (JavaLangInteger_SIZE - 1) - JavaLangInteger_numberOfLeadingZerosWithInt_(x);
      case JavaMathRoundingMode_Enum_UP:
      case JavaMathRoundingMode_Enum_CEILING:
      return JavaLangInteger_SIZE - JavaLangInteger_numberOfLeadingZerosWithInt_(x - 1);
      case JavaMathRoundingMode_Enum_HALF_DOWN:
      case JavaMathRoundingMode_Enum_HALF_UP:
      case JavaMathRoundingMode_Enum_HALF_EVEN:
      leadingZeros = JavaLangInteger_numberOfLeadingZerosWithInt_(x);
      cmp = JreURShift32(ComGoogleCommonMathIntMath_MAX_POWER_OF_SQRT2_UNSIGNED, leadingZeros);
      logFloor = (JavaLangInteger_SIZE - 1) - leadingZeros;
      return logFloor + ComGoogleCommonMathIntMath_lessThanBranchFreeWithInt_withInt_(cmp, x);
      default:
      @throw new_JavaLangAssertionError_init();
    }
  }
}

jint ComGoogleCommonMathIntMath_log10WithInt_withJavaMathRoundingMode_(jint x, JavaMathRoundingMode *mode) {
  ComGoogleCommonMathIntMath_initialize();
  ComGoogleCommonMathMathPreconditions_checkPositiveWithNSString_withInt_(@"x", x);
  jint logFloor = ComGoogleCommonMathIntMath_log10FloorWithInt_(x);
  jint floorPow = IOSIntArray_Get(nil_chk(ComGoogleCommonMathIntMath_powersOf10), logFloor);
  switch ([mode ordinal]) {
    case JavaMathRoundingMode_Enum_UNNECESSARY:
    ComGoogleCommonMathMathPreconditions_checkRoundingUnnecessaryWithBoolean_(x == floorPow);
    case JavaMathRoundingMode_Enum_FLOOR:
    case JavaMathRoundingMode_Enum_DOWN:
    return logFloor;
    case JavaMathRoundingMode_Enum_CEILING:
    case JavaMathRoundingMode_Enum_UP:
    return logFloor + ComGoogleCommonMathIntMath_lessThanBranchFreeWithInt_withInt_(floorPow, x);
    case JavaMathRoundingMode_Enum_HALF_DOWN:
    case JavaMathRoundingMode_Enum_HALF_UP:
    case JavaMathRoundingMode_Enum_HALF_EVEN:
    return logFloor + ComGoogleCommonMathIntMath_lessThanBranchFreeWithInt_withInt_(IOSIntArray_Get(nil_chk(ComGoogleCommonMathIntMath_halfPowersOf10), logFloor), x);
    default:
    @throw new_JavaLangAssertionError_init();
  }
}

jint ComGoogleCommonMathIntMath_log10FloorWithInt_(jint x) {
  ComGoogleCommonMathIntMath_initialize();
  jint y = IOSByteArray_Get(nil_chk(ComGoogleCommonMathIntMath_maxLog10ForLeadingZeros), JavaLangInteger_numberOfLeadingZerosWithInt_(x));
  return y - ComGoogleCommonMathIntMath_lessThanBranchFreeWithInt_withInt_(x, IOSIntArray_Get(nil_chk(ComGoogleCommonMathIntMath_powersOf10), y));
}

jint ComGoogleCommonMathIntMath_powWithInt_withInt_(jint b, jint k) {
  ComGoogleCommonMathIntMath_initialize();
  ComGoogleCommonMathMathPreconditions_checkNonNegativeWithNSString_withInt_(@"exponent", k);
  switch (b) {
    case 0:
    return (k == 0) ? 1 : 0;
    case 1:
    return 1;
    case (-1):
    return ((k & 1) == 0) ? 1 : -1;
    case 2:
    return (k < JavaLangInteger_SIZE) ? (JreLShift32(1, k)) : 0;
    case (-2):
    if (k < JavaLangInteger_SIZE) {
      return ((k & 1) == 0) ? (JreLShift32(1, k)) : -(JreLShift32(1, k));
    }
    else {
      return 0;
    }
    default:
    ;
  }
  for (jint accum = 1; ; JreRShiftAssignInt(&k, 1)) {
    switch (k) {
      case 0:
      return accum;
      case 1:
      return b * accum;
      default:
      accum *= ((k & 1) == 0) ? 1 : b;
      b *= b;
    }
  }
}

jint ComGoogleCommonMathIntMath_sqrtWithInt_withJavaMathRoundingMode_(jint x, JavaMathRoundingMode *mode) {
  ComGoogleCommonMathIntMath_initialize();
  ComGoogleCommonMathMathPreconditions_checkNonNegativeWithNSString_withInt_(@"x", x);
  jint sqrtFloor = ComGoogleCommonMathIntMath_sqrtFloorWithInt_(x);
  {
    jint halfSquare;
    switch ([mode ordinal]) {
      case JavaMathRoundingMode_Enum_UNNECESSARY:
      ComGoogleCommonMathMathPreconditions_checkRoundingUnnecessaryWithBoolean_(sqrtFloor * sqrtFloor == x);
      case JavaMathRoundingMode_Enum_FLOOR:
      case JavaMathRoundingMode_Enum_DOWN:
      return sqrtFloor;
      case JavaMathRoundingMode_Enum_CEILING:
      case JavaMathRoundingMode_Enum_UP:
      return sqrtFloor + ComGoogleCommonMathIntMath_lessThanBranchFreeWithInt_withInt_(sqrtFloor * sqrtFloor, x);
      case JavaMathRoundingMode_Enum_HALF_DOWN:
      case JavaMathRoundingMode_Enum_HALF_UP:
      case JavaMathRoundingMode_Enum_HALF_EVEN:
      halfSquare = sqrtFloor * sqrtFloor + sqrtFloor;
      return sqrtFloor + ComGoogleCommonMathIntMath_lessThanBranchFreeWithInt_withInt_(halfSquare, x);
      default:
      @throw new_JavaLangAssertionError_init();
    }
  }
}

jint ComGoogleCommonMathIntMath_sqrtFloorWithInt_(jint x) {
  ComGoogleCommonMathIntMath_initialize();
  return JreFpToInt(JavaLangMath_sqrtWithDouble_(x));
}

jint ComGoogleCommonMathIntMath_divideWithInt_withInt_withJavaMathRoundingMode_(jint p, jint q, JavaMathRoundingMode *mode) {
  ComGoogleCommonMathIntMath_initialize();
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(mode);
  if (q == 0) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"/ by zero");
  }
  jint div = p / q;
  jint rem = p - q * div;
  if (rem == 0) {
    return div;
  }
  jint signum = 1 | (JreRShift32((p ^ q), (JavaLangInteger_SIZE - 1)));
  jboolean increment;
  {
    jint absRem;
    jint cmpRemToHalfDivisor;
    switch ([mode ordinal]) {
      case JavaMathRoundingMode_Enum_UNNECESSARY:
      ComGoogleCommonMathMathPreconditions_checkRoundingUnnecessaryWithBoolean_(rem == 0);
      case JavaMathRoundingMode_Enum_DOWN:
      increment = false;
      break;
      case JavaMathRoundingMode_Enum_UP:
      increment = true;
      break;
      case JavaMathRoundingMode_Enum_CEILING:
      increment = (signum > 0);
      break;
      case JavaMathRoundingMode_Enum_FLOOR:
      increment = (signum < 0);
      break;
      case JavaMathRoundingMode_Enum_HALF_EVEN:
      case JavaMathRoundingMode_Enum_HALF_DOWN:
      case JavaMathRoundingMode_Enum_HALF_UP:
      absRem = JavaLangMath_absWithInt_(rem);
      cmpRemToHalfDivisor = absRem - (JavaLangMath_absWithInt_(q) - absRem);
      if (cmpRemToHalfDivisor == 0) {
        increment = (mode == JreLoadEnum(JavaMathRoundingMode, HALF_UP) || ((mode == JreLoadEnum(JavaMathRoundingMode, HALF_EVEN)) & ((div & 1) != 0)));
      }
      else {
        increment = (cmpRemToHalfDivisor > 0);
      }
      break;
      default:
      @throw new_JavaLangAssertionError_init();
    }
  }
  return increment ? div + signum : div;
}

jint ComGoogleCommonMathIntMath_modWithInt_withInt_(jint x, jint m) {
  ComGoogleCommonMathIntMath_initialize();
  if (m <= 0) {
    @throw new_JavaLangArithmeticException_initWithNSString_(JreStrcat("$I$", @"Modulus ", m, @" must be > 0"));
  }
  jint result = x % m;
  return (result >= 0) ? result : result + m;
}

jint ComGoogleCommonMathIntMath_gcdWithInt_withInt_(jint a, jint b) {
  ComGoogleCommonMathIntMath_initialize();
  ComGoogleCommonMathMathPreconditions_checkNonNegativeWithNSString_withInt_(@"a", a);
  ComGoogleCommonMathMathPreconditions_checkNonNegativeWithNSString_withInt_(@"b", b);
  if (a == 0) {
    return b;
  }
  else if (b == 0) {
    return a;
  }
  jint aTwos = JavaLangInteger_numberOfTrailingZerosWithInt_(a);
  JreRShiftAssignInt(&a, aTwos);
  jint bTwos = JavaLangInteger_numberOfTrailingZerosWithInt_(b);
  JreRShiftAssignInt(&b, bTwos);
  while (a != b) {
    jint delta = a - b;
    jint minDeltaOrZero = delta & (JreRShift32(delta, (JavaLangInteger_SIZE - 1)));
    a = delta - minDeltaOrZero - minDeltaOrZero;
    b += minDeltaOrZero;
    JreRShiftAssignInt(&a, JavaLangInteger_numberOfTrailingZerosWithInt_(a));
  }
  return JreLShift32(a, JavaLangMath_minWithInt_withInt_(aTwos, bTwos));
}

jint ComGoogleCommonMathIntMath_checkedAddWithInt_withInt_(jint a, jint b) {
  ComGoogleCommonMathIntMath_initialize();
  jlong result = (jlong) a + b;
  ComGoogleCommonMathMathPreconditions_checkNoOverflowWithBoolean_(result == (jint) result);
  return (jint) result;
}

jint ComGoogleCommonMathIntMath_checkedSubtractWithInt_withInt_(jint a, jint b) {
  ComGoogleCommonMathIntMath_initialize();
  jlong result = (jlong) a - b;
  ComGoogleCommonMathMathPreconditions_checkNoOverflowWithBoolean_(result == (jint) result);
  return (jint) result;
}

jint ComGoogleCommonMathIntMath_checkedMultiplyWithInt_withInt_(jint a, jint b) {
  ComGoogleCommonMathIntMath_initialize();
  jlong result = (jlong) a * b;
  ComGoogleCommonMathMathPreconditions_checkNoOverflowWithBoolean_(result == (jint) result);
  return (jint) result;
}

jint ComGoogleCommonMathIntMath_checkedPowWithInt_withInt_(jint b, jint k) {
  ComGoogleCommonMathIntMath_initialize();
  ComGoogleCommonMathMathPreconditions_checkNonNegativeWithNSString_withInt_(@"exponent", k);
  switch (b) {
    case 0:
    return (k == 0) ? 1 : 0;
    case 1:
    return 1;
    case (-1):
    return ((k & 1) == 0) ? 1 : -1;
    case 2:
    ComGoogleCommonMathMathPreconditions_checkNoOverflowWithBoolean_(k < JavaLangInteger_SIZE - 1);
    return JreLShift32(1, k);
    case (-2):
    ComGoogleCommonMathMathPreconditions_checkNoOverflowWithBoolean_(k < JavaLangInteger_SIZE);
    return ((k & 1) == 0) ? JreLShift32(1, k) : JreLShift32(-1, k);
    default:
    ;
  }
  jint accum = 1;
  while (true) {
    switch (k) {
      case 0:
      return accum;
      case 1:
      return ComGoogleCommonMathIntMath_checkedMultiplyWithInt_withInt_(accum, b);
      default:
      if ((k & 1) != 0) {
        accum = ComGoogleCommonMathIntMath_checkedMultiplyWithInt_withInt_(accum, b);
      }
      JreRShiftAssignInt(&k, 1);
      if (k > 0) {
        ComGoogleCommonMathMathPreconditions_checkNoOverflowWithBoolean_((-ComGoogleCommonMathIntMath_FLOOR_SQRT_MAX_INT <= b) & (b <= ComGoogleCommonMathIntMath_FLOOR_SQRT_MAX_INT));
        b *= b;
      }
    }
  }
}

jint ComGoogleCommonMathIntMath_saturatedAddWithInt_withInt_(jint a, jint b) {
  ComGoogleCommonMathIntMath_initialize();
  return ComGoogleCommonPrimitivesInts_saturatedCastWithLong_((jlong) a + b);
}

jint ComGoogleCommonMathIntMath_saturatedSubtractWithInt_withInt_(jint a, jint b) {
  ComGoogleCommonMathIntMath_initialize();
  return ComGoogleCommonPrimitivesInts_saturatedCastWithLong_((jlong) a - b);
}

jint ComGoogleCommonMathIntMath_saturatedMultiplyWithInt_withInt_(jint a, jint b) {
  ComGoogleCommonMathIntMath_initialize();
  return ComGoogleCommonPrimitivesInts_saturatedCastWithLong_((jlong) a * b);
}

jint ComGoogleCommonMathIntMath_saturatedPowWithInt_withInt_(jint b, jint k) {
  ComGoogleCommonMathIntMath_initialize();
  ComGoogleCommonMathMathPreconditions_checkNonNegativeWithNSString_withInt_(@"exponent", k);
  switch (b) {
    case 0:
    return (k == 0) ? 1 : 0;
    case 1:
    return 1;
    case (-1):
    return ((k & 1) == 0) ? 1 : -1;
    case 2:
    if (k >= JavaLangInteger_SIZE - 1) {
      return JavaLangInteger_MAX_VALUE;
    }
    return JreLShift32(1, k);
    case (-2):
    if (k >= JavaLangInteger_SIZE) {
      return JavaLangInteger_MAX_VALUE + (k & 1);
    }
    return ((k & 1) == 0) ? JreLShift32(1, k) : JreLShift32(-1, k);
    default:
    ;
  }
  jint accum = 1;
  jint limit = JavaLangInteger_MAX_VALUE + ((JreURShift32(b, JavaLangInteger_SIZE - 1)) & (k & 1));
  while (true) {
    switch (k) {
      case 0:
      return accum;
      case 1:
      return ComGoogleCommonMathIntMath_saturatedMultiplyWithInt_withInt_(accum, b);
      default:
      if ((k & 1) != 0) {
        accum = ComGoogleCommonMathIntMath_saturatedMultiplyWithInt_withInt_(accum, b);
      }
      JreRShiftAssignInt(&k, 1);
      if (k > 0) {
        if ((-ComGoogleCommonMathIntMath_FLOOR_SQRT_MAX_INT > b) | (b > ComGoogleCommonMathIntMath_FLOOR_SQRT_MAX_INT)) {
          return limit;
        }
        b *= b;
      }
    }
  }
}

jint ComGoogleCommonMathIntMath_factorialWithInt_(jint n) {
  ComGoogleCommonMathIntMath_initialize();
  ComGoogleCommonMathMathPreconditions_checkNonNegativeWithNSString_withInt_(@"n", n);
  return (n < ((IOSIntArray *) nil_chk(ComGoogleCommonMathIntMath_factorials))->size_) ? IOSIntArray_Get(ComGoogleCommonMathIntMath_factorials, n) : JavaLangInteger_MAX_VALUE;
}

jint ComGoogleCommonMathIntMath_binomialWithInt_withInt_(jint n, jint k) {
  ComGoogleCommonMathIntMath_initialize();
  ComGoogleCommonMathMathPreconditions_checkNonNegativeWithNSString_withInt_(@"n", n);
  ComGoogleCommonMathMathPreconditions_checkNonNegativeWithNSString_withInt_(@"k", k);
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withInt_withInt_(k <= n, @"k (%s) > n (%s)", k, n);
  if (k > (JreRShift32(n, 1))) {
    k = n - k;
  }
  if (k >= ((IOSIntArray *) nil_chk(ComGoogleCommonMathIntMath_biggestBinomials))->size_ || n > IOSIntArray_Get(ComGoogleCommonMathIntMath_biggestBinomials, k)) {
    return JavaLangInteger_MAX_VALUE;
  }
  {
    jlong result;
    switch (k) {
      case 0:
      return 1;
      case 1:
      return n;
      default:
      result = 1;
      for (jint i = 0; i < k; i++) {
        result *= n - i;
        result /= i + 1;
      }
      return (jint) result;
    }
  }
}

jint ComGoogleCommonMathIntMath_meanWithInt_withInt_(jint x, jint y) {
  ComGoogleCommonMathIntMath_initialize();
  return (x & y) + (JreRShift32((x ^ y), 1));
}

jboolean ComGoogleCommonMathIntMath_isPrimeWithInt_(jint n) {
  ComGoogleCommonMathIntMath_initialize();
  return ComGoogleCommonMathLongMath_isPrimeWithLong_(n);
}

void ComGoogleCommonMathIntMath_init(ComGoogleCommonMathIntMath *self) {
  NSObject_init(self);
}

ComGoogleCommonMathIntMath *new_ComGoogleCommonMathIntMath_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonMathIntMath, init)
}

ComGoogleCommonMathIntMath *create_ComGoogleCommonMathIntMath_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonMathIntMath, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonMathIntMath)
