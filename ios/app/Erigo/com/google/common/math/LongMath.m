//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/math/LongMath.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/math/IntMath.h"
#include "com/google/common/math/LongMath.h"
#include "com/google/common/math/MathPreconditions.h"
#include "com/google/common/primitives/UnsignedLongs.h"
#include "java/lang/ArithmeticException.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/math/RoundingMode.h"

@interface ComGoogleCommonMathLongMath ()

- (instancetype)init;

@end

inline jint ComGoogleCommonMathLongMath_get_SIEVE_30();
#define ComGoogleCommonMathLongMath_SIEVE_30 -545925251
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonMathLongMath, SIEVE_30, jint)

inline IOSObjectArray *ComGoogleCommonMathLongMath_get_millerRabinBaseSets();
static IOSObjectArray *ComGoogleCommonMathLongMath_millerRabinBaseSets;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonMathLongMath, millerRabinBaseSets, IOSObjectArray *)

__attribute__((unused)) static void ComGoogleCommonMathLongMath_init(ComGoogleCommonMathLongMath *self);

__attribute__((unused)) static ComGoogleCommonMathLongMath *new_ComGoogleCommonMathLongMath_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonMathLongMath *create_ComGoogleCommonMathLongMath_init();

typedef NS_ENUM(NSUInteger, ComGoogleCommonMathLongMath_MillerRabinTester_Enum) {
  ComGoogleCommonMathLongMath_MillerRabinTester_Enum_SMALL = 0,
  ComGoogleCommonMathLongMath_MillerRabinTester_Enum_LARGE = 1,
};

@interface ComGoogleCommonMathLongMath_MillerRabinTester : JavaLangEnum < NSCopying >

+ (jboolean)testWithLong:(jlong)base
                withLong:(jlong)n;

- (jlong)mulModWithLong:(jlong)a
               withLong:(jlong)b
               withLong:(jlong)m;

- (jlong)squareModWithLong:(jlong)a
                  withLong:(jlong)m;

- (jlong)powModWithLong:(jlong)a
               withLong:(jlong)p
               withLong:(jlong)m;

- (jboolean)testWitnessWithLong:(jlong)base
                       withLong:(jlong)n;

+ (IOSObjectArray *)values;

+ (ComGoogleCommonMathLongMath_MillerRabinTester *)valueOfWithNSString:(NSString *)name;

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonMathLongMath_MillerRabinTester)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ComGoogleCommonMathLongMath_MillerRabinTester *ComGoogleCommonMathLongMath_MillerRabinTester_values_[];

inline ComGoogleCommonMathLongMath_MillerRabinTester *ComGoogleCommonMathLongMath_MillerRabinTester_get_SMALL();
J2OBJC_ENUM_CONSTANT(ComGoogleCommonMathLongMath_MillerRabinTester, SMALL)

inline ComGoogleCommonMathLongMath_MillerRabinTester *ComGoogleCommonMathLongMath_MillerRabinTester_get_LARGE();
J2OBJC_ENUM_CONSTANT(ComGoogleCommonMathLongMath_MillerRabinTester, LARGE)

__attribute__((unused)) static void ComGoogleCommonMathLongMath_MillerRabinTester_initWithNSString_withInt_(ComGoogleCommonMathLongMath_MillerRabinTester *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static ComGoogleCommonMathLongMath_MillerRabinTester *new_ComGoogleCommonMathLongMath_MillerRabinTester_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

__attribute__((unused)) static jboolean ComGoogleCommonMathLongMath_MillerRabinTester_testWithLong_withLong_(jlong base, jlong n);

__attribute__((unused)) static jlong ComGoogleCommonMathLongMath_MillerRabinTester_powModWithLong_withLong_withLong_(ComGoogleCommonMathLongMath_MillerRabinTester *self, jlong a, jlong p, jlong m);

__attribute__((unused)) static jboolean ComGoogleCommonMathLongMath_MillerRabinTester_testWitnessWithLong_withLong_(ComGoogleCommonMathLongMath_MillerRabinTester *self, jlong base, jlong n);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonMathLongMath_MillerRabinTester_values();

__attribute__((unused)) static ComGoogleCommonMathLongMath_MillerRabinTester *ComGoogleCommonMathLongMath_MillerRabinTester_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ComGoogleCommonMathLongMath_MillerRabinTester *ComGoogleCommonMathLongMath_MillerRabinTester_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonMathLongMath_MillerRabinTester)

@interface ComGoogleCommonMathLongMath_MillerRabinTester_1 : ComGoogleCommonMathLongMath_MillerRabinTester < NSCopying >

- (jlong)mulModWithLong:(jlong)a
               withLong:(jlong)b
               withLong:(jlong)m;

- (jlong)squareModWithLong:(jlong)a
                  withLong:(jlong)m;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonMathLongMath_MillerRabinTester_1)

__attribute__((unused)) static void ComGoogleCommonMathLongMath_MillerRabinTester_1_initWithNSString_withInt_(ComGoogleCommonMathLongMath_MillerRabinTester_1 *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static ComGoogleCommonMathLongMath_MillerRabinTester_1 *new_ComGoogleCommonMathLongMath_MillerRabinTester_1_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface ComGoogleCommonMathLongMath_MillerRabinTester_2 : ComGoogleCommonMathLongMath_MillerRabinTester < NSCopying >

- (jlong)plusModWithLong:(jlong)a
                withLong:(jlong)b
                withLong:(jlong)m;

- (jlong)times2ToThe32ModWithLong:(jlong)a
                         withLong:(jlong)m;

- (jlong)mulModWithLong:(jlong)a
               withLong:(jlong)b
               withLong:(jlong)m;

- (jlong)squareModWithLong:(jlong)a
                  withLong:(jlong)m;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonMathLongMath_MillerRabinTester_2)

__attribute__((unused)) static void ComGoogleCommonMathLongMath_MillerRabinTester_2_initWithNSString_withInt_(ComGoogleCommonMathLongMath_MillerRabinTester_2 *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static ComGoogleCommonMathLongMath_MillerRabinTester_2 *new_ComGoogleCommonMathLongMath_MillerRabinTester_2_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

__attribute__((unused)) static jlong ComGoogleCommonMathLongMath_MillerRabinTester_2_plusModWithLong_withLong_withLong_(ComGoogleCommonMathLongMath_MillerRabinTester_2 *self, jlong a, jlong b, jlong m);

__attribute__((unused)) static jlong ComGoogleCommonMathLongMath_MillerRabinTester_2_times2ToThe32ModWithLong_withLong_(ComGoogleCommonMathLongMath_MillerRabinTester_2 *self, jlong a, jlong m);

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonMathLongMath)

IOSByteArray *ComGoogleCommonMathLongMath_maxLog10ForLeadingZeros;
IOSLongArray *ComGoogleCommonMathLongMath_powersOf10;
IOSLongArray *ComGoogleCommonMathLongMath_halfPowersOf10;
IOSLongArray *ComGoogleCommonMathLongMath_factorials;
IOSIntArray *ComGoogleCommonMathLongMath_biggestBinomials;
IOSIntArray *ComGoogleCommonMathLongMath_biggestSimpleBinomials;

@implementation ComGoogleCommonMathLongMath

+ (jlong)ceilingPowerOfTwoWithLong:(jlong)x {
  return ComGoogleCommonMathLongMath_ceilingPowerOfTwoWithLong_(x);
}

+ (jlong)floorPowerOfTwoWithLong:(jlong)x {
  return ComGoogleCommonMathLongMath_floorPowerOfTwoWithLong_(x);
}

+ (jboolean)isPowerOfTwoWithLong:(jlong)x {
  return ComGoogleCommonMathLongMath_isPowerOfTwoWithLong_(x);
}

+ (jint)lessThanBranchFreeWithLong:(jlong)x
                          withLong:(jlong)y {
  return ComGoogleCommonMathLongMath_lessThanBranchFreeWithLong_withLong_(x, y);
}

+ (jint)log2WithLong:(jlong)x
withJavaMathRoundingMode:(JavaMathRoundingMode *)mode {
  return ComGoogleCommonMathLongMath_log2WithLong_withJavaMathRoundingMode_(x, mode);
}

+ (jint)log10WithLong:(jlong)x
withJavaMathRoundingMode:(JavaMathRoundingMode *)mode {
  return ComGoogleCommonMathLongMath_log10WithLong_withJavaMathRoundingMode_(x, mode);
}

+ (jint)log10FloorWithLong:(jlong)x {
  return ComGoogleCommonMathLongMath_log10FloorWithLong_(x);
}

+ (jlong)powWithLong:(jlong)b
             withInt:(jint)k {
  return ComGoogleCommonMathLongMath_powWithLong_withInt_(b, k);
}

+ (jlong)sqrtWithLong:(jlong)x
withJavaMathRoundingMode:(JavaMathRoundingMode *)mode {
  return ComGoogleCommonMathLongMath_sqrtWithLong_withJavaMathRoundingMode_(x, mode);
}

+ (jlong)divideWithLong:(jlong)p
               withLong:(jlong)q
withJavaMathRoundingMode:(JavaMathRoundingMode *)mode {
  return ComGoogleCommonMathLongMath_divideWithLong_withLong_withJavaMathRoundingMode_(p, q, mode);
}

+ (jint)modWithLong:(jlong)x
            withInt:(jint)m {
  return ComGoogleCommonMathLongMath_modWithLong_withInt_(x, m);
}

+ (jlong)modWithLong:(jlong)x
            withLong:(jlong)m {
  return ComGoogleCommonMathLongMath_modWithLong_withLong_(x, m);
}

+ (jlong)gcdWithLong:(jlong)a
            withLong:(jlong)b {
  return ComGoogleCommonMathLongMath_gcdWithLong_withLong_(a, b);
}

+ (jlong)checkedAddWithLong:(jlong)a
                   withLong:(jlong)b {
  return ComGoogleCommonMathLongMath_checkedAddWithLong_withLong_(a, b);
}

+ (jlong)checkedSubtractWithLong:(jlong)a
                        withLong:(jlong)b {
  return ComGoogleCommonMathLongMath_checkedSubtractWithLong_withLong_(a, b);
}

+ (jlong)checkedMultiplyWithLong:(jlong)a
                        withLong:(jlong)b {
  return ComGoogleCommonMathLongMath_checkedMultiplyWithLong_withLong_(a, b);
}

+ (jlong)checkedPowWithLong:(jlong)b
                    withInt:(jint)k {
  return ComGoogleCommonMathLongMath_checkedPowWithLong_withInt_(b, k);
}

+ (jlong)saturatedAddWithLong:(jlong)a
                     withLong:(jlong)b {
  return ComGoogleCommonMathLongMath_saturatedAddWithLong_withLong_(a, b);
}

+ (jlong)saturatedSubtractWithLong:(jlong)a
                          withLong:(jlong)b {
  return ComGoogleCommonMathLongMath_saturatedSubtractWithLong_withLong_(a, b);
}

+ (jlong)saturatedMultiplyWithLong:(jlong)a
                          withLong:(jlong)b {
  return ComGoogleCommonMathLongMath_saturatedMultiplyWithLong_withLong_(a, b);
}

+ (jlong)saturatedPowWithLong:(jlong)b
                      withInt:(jint)k {
  return ComGoogleCommonMathLongMath_saturatedPowWithLong_withInt_(b, k);
}

+ (jlong)factorialWithInt:(jint)n {
  return ComGoogleCommonMathLongMath_factorialWithInt_(n);
}

+ (jlong)binomialWithInt:(jint)n
                 withInt:(jint)k {
  return ComGoogleCommonMathLongMath_binomialWithInt_withInt_(n, k);
}

+ (jlong)multiplyFractionWithLong:(jlong)x
                         withLong:(jlong)numerator
                         withLong:(jlong)denominator {
  return ComGoogleCommonMathLongMath_multiplyFractionWithLong_withLong_withLong_(x, numerator, denominator);
}

+ (jboolean)fitsInIntWithLong:(jlong)x {
  return ComGoogleCommonMathLongMath_fitsInIntWithLong_(x);
}

+ (jlong)meanWithLong:(jlong)x
             withLong:(jlong)y {
  return ComGoogleCommonMathLongMath_meanWithLong_withLong_(x, y);
}

+ (jboolean)isPrimeWithLong:(jlong)n {
  return ComGoogleCommonMathLongMath_isPrimeWithLong_(n);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonMathLongMath_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "J", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 3, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 8, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 9, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 10, 11, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 12, 7, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 13, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 15, 11, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 15, 5, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 16, 5, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 17, 5, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 18, 5, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 19, 5, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 20, 11, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 21, 5, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 22, 5, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 23, 5, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 24, 11, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 25, 26, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 27, 28, -1, -1, -1, -1 },
    { NULL, "J", 0x8, 29, 30, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 31, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 32, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 33, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(ceilingPowerOfTwoWithLong:);
  methods[1].selector = @selector(floorPowerOfTwoWithLong:);
  methods[2].selector = @selector(isPowerOfTwoWithLong:);
  methods[3].selector = @selector(lessThanBranchFreeWithLong:withLong:);
  methods[4].selector = @selector(log2WithLong:withJavaMathRoundingMode:);
  methods[5].selector = @selector(log10WithLong:withJavaMathRoundingMode:);
  methods[6].selector = @selector(log10FloorWithLong:);
  methods[7].selector = @selector(powWithLong:withInt:);
  methods[8].selector = @selector(sqrtWithLong:withJavaMathRoundingMode:);
  methods[9].selector = @selector(divideWithLong:withLong:withJavaMathRoundingMode:);
  methods[10].selector = @selector(modWithLong:withInt:);
  methods[11].selector = @selector(modWithLong:withLong:);
  methods[12].selector = @selector(gcdWithLong:withLong:);
  methods[13].selector = @selector(checkedAddWithLong:withLong:);
  methods[14].selector = @selector(checkedSubtractWithLong:withLong:);
  methods[15].selector = @selector(checkedMultiplyWithLong:withLong:);
  methods[16].selector = @selector(checkedPowWithLong:withInt:);
  methods[17].selector = @selector(saturatedAddWithLong:withLong:);
  methods[18].selector = @selector(saturatedSubtractWithLong:withLong:);
  methods[19].selector = @selector(saturatedMultiplyWithLong:withLong:);
  methods[20].selector = @selector(saturatedPowWithLong:withInt:);
  methods[21].selector = @selector(factorialWithInt:);
  methods[22].selector = @selector(binomialWithInt:withInt:);
  methods[23].selector = @selector(multiplyFractionWithLong:withLong:withLong:);
  methods[24].selector = @selector(fitsInIntWithLong:);
  methods[25].selector = @selector(meanWithLong:withLong:);
  methods[26].selector = @selector(isPrimeWithLong:);
  methods[27].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_SIGNED_POWER_OF_TWO", "J", .constantValue.asLong = ComGoogleCommonMathLongMath_MAX_SIGNED_POWER_OF_TWO, 0x18, -1, -1, -1, -1 },
    { "MAX_POWER_OF_SQRT2_UNSIGNED", "J", .constantValue.asLong = ComGoogleCommonMathLongMath_MAX_POWER_OF_SQRT2_UNSIGNED, 0x18, -1, -1, -1, -1 },
    { "maxLog10ForLeadingZeros", "[B", .constantValue.asLong = 0, 0x18, -1, 34, -1, -1 },
    { "powersOf10", "[J", .constantValue.asLong = 0, 0x18, -1, 35, -1, -1 },
    { "halfPowersOf10", "[J", .constantValue.asLong = 0, 0x18, -1, 36, -1, -1 },
    { "FLOOR_SQRT_MAX_LONG", "J", .constantValue.asLong = ComGoogleCommonMathLongMath_FLOOR_SQRT_MAX_LONG, 0x18, -1, -1, -1, -1 },
    { "factorials", "[J", .constantValue.asLong = 0, 0x18, -1, 37, -1, -1 },
    { "biggestBinomials", "[I", .constantValue.asLong = 0, 0x18, -1, 38, -1, -1 },
    { "biggestSimpleBinomials", "[I", .constantValue.asLong = 0, 0x18, -1, 39, -1, -1 },
    { "SIEVE_30", "I", .constantValue.asInt = ComGoogleCommonMathLongMath_SIEVE_30, 0x1a, -1, -1, -1, -1 },
    { "millerRabinBaseSets", "[[J", .constantValue.asLong = 0, 0x1a, -1, 40, -1, -1 },
  };
  static const void *ptrTable[] = { "ceilingPowerOfTwo", "J", "floorPowerOfTwo", "isPowerOfTwo", "lessThanBranchFree", "JJ", "log2", "JLJavaMathRoundingMode;", "log10", "log10Floor", "pow", "JI", "sqrt", "divide", "JJLJavaMathRoundingMode;", "mod", "gcd", "checkedAdd", "checkedSubtract", "checkedMultiply", "checkedPow", "saturatedAdd", "saturatedSubtract", "saturatedMultiply", "saturatedPow", "factorial", "I", "binomial", "II", "multiplyFraction", "JJJ", "fitsInInt", "mean", "isPrime", &ComGoogleCommonMathLongMath_maxLog10ForLeadingZeros, &ComGoogleCommonMathLongMath_powersOf10, &ComGoogleCommonMathLongMath_halfPowersOf10, &ComGoogleCommonMathLongMath_factorials, &ComGoogleCommonMathLongMath_biggestBinomials, &ComGoogleCommonMathLongMath_biggestSimpleBinomials, &ComGoogleCommonMathLongMath_millerRabinBaseSets, "LComGoogleCommonMathLongMath_MillerRabinTester;" };
  static const J2ObjcClassInfo _ComGoogleCommonMathLongMath = { "LongMath", "com.google.common.math", ptrTable, methods, fields, 7, 0x11, 28, 11, -1, 41, -1, -1, -1 };
  return &_ComGoogleCommonMathLongMath;
}

+ (void)initialize {
  if (self == [ComGoogleCommonMathLongMath class]) {
    ComGoogleCommonMathLongMath_maxLog10ForLeadingZeros = [IOSByteArray newArrayWithBytes:(jbyte[]){ 19, 18, 18, 18, 18, 17, 17, 17, 16, 16, 16, 15, 15, 15, 15, 14, 14, 14, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 10, 10, 10, 9, 9, 9, 9, 8, 8, 8, 7, 7, 7, 6, 6, 6, 6, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1, 0, 0, 0 } count:64];
    ComGoogleCommonMathLongMath_powersOf10 = [IOSLongArray newArrayWithLongs:(jlong[]){ 1LL, 10LL, 100LL, 1000LL, 10000LL, 100000LL, 1000000LL, 10000000LL, 100000000LL, 1000000000LL, 10000000000LL, 100000000000LL, 1000000000000LL, 10000000000000LL, 100000000000000LL, 1000000000000000LL, 10000000000000000LL, 100000000000000000LL, 1000000000000000000LL } count:19];
    ComGoogleCommonMathLongMath_halfPowersOf10 = [IOSLongArray newArrayWithLongs:(jlong[]){ 3LL, 31LL, 316LL, 3162LL, 31622LL, 316227LL, 3162277LL, 31622776LL, 316227766LL, 3162277660LL, 31622776601LL, 316227766016LL, 3162277660168LL, 31622776601683LL, 316227766016837LL, 3162277660168379LL, 31622776601683793LL, 316227766016837933LL, 3162277660168379331LL } count:19];
    ComGoogleCommonMathLongMath_factorials = [IOSLongArray newArrayWithLongs:(jlong[]){ 1LL, 1LL, 1LL * 2, 1LL * 2 * 3, 1LL * 2 * 3 * 4, 1LL * 2 * 3 * 4 * 5, 1LL * 2 * 3 * 4 * 5 * 6, 1LL * 2 * 3 * 4 * 5 * 6 * 7, 1LL * 2 * 3 * 4 * 5 * 6 * 7 * 8, 1LL * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9, 1LL * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10, 1LL * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11, 1LL * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 * 12, 1LL * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 * 12 * 13, 1LL * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 * 12 * 13 * 14, 1LL * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 * 12 * 13 * 14 * 15, 1LL * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 * 12 * 13 * 14 * 15 * 16, 1LL * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 * 12 * 13 * 14 * 15 * 16 * 17, 1LL * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 * 12 * 13 * 14 * 15 * 16 * 17 * 18, 1LL * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 * 12 * 13 * 14 * 15 * 16 * 17 * 18 * 19, 1LL * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 * 12 * 13 * 14 * 15 * 16 * 17 * 18 * 19 * 20 } count:21];
    ComGoogleCommonMathLongMath_biggestBinomials = [IOSIntArray newArrayWithInts:(jint[]){ JavaLangInteger_MAX_VALUE, JavaLangInteger_MAX_VALUE, JavaLangInteger_MAX_VALUE, 3810779, 121977, 16175, 4337, 1733, 887, 534, 361, 265, 206, 169, 143, 125, 111, 101, 94, 88, 83, 79, 76, 74, 72, 70, 69, 68, 67, 67, 66, 66, 66, 66 } count:34];
    ComGoogleCommonMathLongMath_biggestSimpleBinomials = [IOSIntArray newArrayWithInts:(jint[]){ JavaLangInteger_MAX_VALUE, JavaLangInteger_MAX_VALUE, JavaLangInteger_MAX_VALUE, 2642246, 86251, 11724, 3218, 1313, 684, 419, 287, 214, 169, 139, 119, 105, 95, 87, 81, 76, 73, 70, 68, 66, 64, 63, 62, 62, 61, 61, 61 } count:31];
    ComGoogleCommonMathLongMath_millerRabinBaseSets = [IOSObjectArray newArrayWithObjects:(id[]){ [IOSLongArray newArrayWithLongs:(jlong[]){ 291830, 126401071349994536LL } count:2], [IOSLongArray newArrayWithLongs:(jlong[]){ 885594168, 725270293939359937LL, 3569819667048198375LL } count:3], [IOSLongArray newArrayWithLongs:(jlong[]){ 273919523040LL, 15, 7363882082LL, 992620450144556LL } count:4], [IOSLongArray newArrayWithLongs:(jlong[]){ 47636622961200LL, 2, 2570940, 211991001, 3749873356LL } count:5], [IOSLongArray newArrayWithLongs:(jlong[]){ 7999252175582850LL, 2, 4130806001517LL, 149795463772692060LL, 186635894390467037LL, 3967304179347715805LL } count:6], [IOSLongArray newArrayWithLongs:(jlong[]){ 585226005592931976LL, 2, 123635709730000LL, 9233062284813009LL, 43835965440333360LL, 761179012939631437LL, 1263739024124850375LL } count:7], [IOSLongArray newArrayWithLongs:(jlong[]){ JavaLangLong_MAX_VALUE, 2, 325, 9375, 28178, 450775, 9780504, 1795265022 } count:8] } count:7 type:IOSClass_longArray(1)];
    J2OBJC_SET_INITIALIZED(ComGoogleCommonMathLongMath)
  }
}

@end

jlong ComGoogleCommonMathLongMath_ceilingPowerOfTwoWithLong_(jlong x) {
  ComGoogleCommonMathLongMath_initialize();
  ComGoogleCommonMathMathPreconditions_checkPositiveWithNSString_withLong_(@"x", x);
  if (x > ComGoogleCommonMathLongMath_MAX_SIGNED_POWER_OF_TWO) {
    @throw new_JavaLangArithmeticException_initWithNSString_(JreStrcat("$J$", @"ceilingPowerOfTwo(", x, @") is not representable as a long"));
  }
  return JreLShift64(1LL, -JavaLangLong_numberOfLeadingZerosWithLong_(x - 1));
}

jlong ComGoogleCommonMathLongMath_floorPowerOfTwoWithLong_(jlong x) {
  ComGoogleCommonMathLongMath_initialize();
  ComGoogleCommonMathMathPreconditions_checkPositiveWithNSString_withLong_(@"x", x);
  return JreLShift64(1LL, ((JavaLangLong_SIZE - 1) - JavaLangLong_numberOfLeadingZerosWithLong_(x)));
}

jboolean ComGoogleCommonMathLongMath_isPowerOfTwoWithLong_(jlong x) {
  ComGoogleCommonMathLongMath_initialize();
  return (x > 0) & ((x & (x - 1)) == 0);
}

jint ComGoogleCommonMathLongMath_lessThanBranchFreeWithLong_withLong_(jlong x, jlong y) {
  ComGoogleCommonMathLongMath_initialize();
  return (jint) (JreURShift64(~(~(x - y)), (JavaLangLong_SIZE - 1)));
}

jint ComGoogleCommonMathLongMath_log2WithLong_withJavaMathRoundingMode_(jlong x, JavaMathRoundingMode *mode) {
  ComGoogleCommonMathLongMath_initialize();
  ComGoogleCommonMathMathPreconditions_checkPositiveWithNSString_withLong_(@"x", x);
  {
    jint leadingZeros;
    jlong cmp;
    jint logFloor;
    switch ([mode ordinal]) {
      case JavaMathRoundingMode_Enum_UNNECESSARY:
      ComGoogleCommonMathMathPreconditions_checkRoundingUnnecessaryWithBoolean_(ComGoogleCommonMathLongMath_isPowerOfTwoWithLong_(x));
      case JavaMathRoundingMode_Enum_DOWN:
      case JavaMathRoundingMode_Enum_FLOOR:
      return (JavaLangLong_SIZE - 1) - JavaLangLong_numberOfLeadingZerosWithLong_(x);
      case JavaMathRoundingMode_Enum_UP:
      case JavaMathRoundingMode_Enum_CEILING:
      return JavaLangLong_SIZE - JavaLangLong_numberOfLeadingZerosWithLong_(x - 1);
      case JavaMathRoundingMode_Enum_HALF_DOWN:
      case JavaMathRoundingMode_Enum_HALF_UP:
      case JavaMathRoundingMode_Enum_HALF_EVEN:
      leadingZeros = JavaLangLong_numberOfLeadingZerosWithLong_(x);
      cmp = JreURShift64(ComGoogleCommonMathLongMath_MAX_POWER_OF_SQRT2_UNSIGNED, leadingZeros);
      logFloor = (JavaLangLong_SIZE - 1) - leadingZeros;
      return logFloor + ComGoogleCommonMathLongMath_lessThanBranchFreeWithLong_withLong_(cmp, x);
      default:
      @throw new_JavaLangAssertionError_initWithId_(@"impossible");
    }
  }
}

jint ComGoogleCommonMathLongMath_log10WithLong_withJavaMathRoundingMode_(jlong x, JavaMathRoundingMode *mode) {
  ComGoogleCommonMathLongMath_initialize();
  ComGoogleCommonMathMathPreconditions_checkPositiveWithNSString_withLong_(@"x", x);
  jint logFloor = ComGoogleCommonMathLongMath_log10FloorWithLong_(x);
  jlong floorPow = IOSLongArray_Get(nil_chk(ComGoogleCommonMathLongMath_powersOf10), logFloor);
  switch ([mode ordinal]) {
    case JavaMathRoundingMode_Enum_UNNECESSARY:
    ComGoogleCommonMathMathPreconditions_checkRoundingUnnecessaryWithBoolean_(x == floorPow);
    case JavaMathRoundingMode_Enum_FLOOR:
    case JavaMathRoundingMode_Enum_DOWN:
    return logFloor;
    case JavaMathRoundingMode_Enum_CEILING:
    case JavaMathRoundingMode_Enum_UP:
    return logFloor + ComGoogleCommonMathLongMath_lessThanBranchFreeWithLong_withLong_(floorPow, x);
    case JavaMathRoundingMode_Enum_HALF_DOWN:
    case JavaMathRoundingMode_Enum_HALF_UP:
    case JavaMathRoundingMode_Enum_HALF_EVEN:
    return logFloor + ComGoogleCommonMathLongMath_lessThanBranchFreeWithLong_withLong_(IOSLongArray_Get(nil_chk(ComGoogleCommonMathLongMath_halfPowersOf10), logFloor), x);
    default:
    @throw new_JavaLangAssertionError_init();
  }
}

jint ComGoogleCommonMathLongMath_log10FloorWithLong_(jlong x) {
  ComGoogleCommonMathLongMath_initialize();
  jint y = IOSByteArray_Get(nil_chk(ComGoogleCommonMathLongMath_maxLog10ForLeadingZeros), JavaLangLong_numberOfLeadingZerosWithLong_(x));
  return y - ComGoogleCommonMathLongMath_lessThanBranchFreeWithLong_withLong_(x, IOSLongArray_Get(nil_chk(ComGoogleCommonMathLongMath_powersOf10), y));
}

jlong ComGoogleCommonMathLongMath_powWithLong_withInt_(jlong b, jint k) {
  ComGoogleCommonMathLongMath_initialize();
  ComGoogleCommonMathMathPreconditions_checkNonNegativeWithNSString_withInt_(@"exponent", k);
  if (-2 <= b && b <= 2) {
    switch ((jint) b) {
      case 0:
      return (k == 0) ? 1 : 0;
      case 1:
      return 1;
      case (-1):
      return ((k & 1) == 0) ? 1 : -1;
      case 2:
      return (k < JavaLangLong_SIZE) ? JreLShift64(1LL, k) : 0;
      case (-2):
      if (k < JavaLangLong_SIZE) {
        return ((k & 1) == 0) ? JreLShift64(1LL, k) : -(JreLShift64(1LL, k));
      }
      else {
        return 0;
      }
      default:
      @throw new_JavaLangAssertionError_init();
    }
  }
  for (jlong accum = 1; ; JreRShiftAssignInt(&k, 1)) {
    switch (k) {
      case 0:
      return accum;
      case 1:
      return accum * b;
      default:
      accum *= ((k & 1) == 0) ? 1 : b;
      b *= b;
    }
  }
}

jlong ComGoogleCommonMathLongMath_sqrtWithLong_withJavaMathRoundingMode_(jlong x, JavaMathRoundingMode *mode) {
  ComGoogleCommonMathLongMath_initialize();
  ComGoogleCommonMathMathPreconditions_checkNonNegativeWithNSString_withLong_(@"x", x);
  if (ComGoogleCommonMathLongMath_fitsInIntWithLong_(x)) {
    return ComGoogleCommonMathIntMath_sqrtWithInt_withJavaMathRoundingMode_((jint) x, mode);
  }
  jlong guess = JreFpToLong(JavaLangMath_sqrtWithDouble_(x));
  jlong guessSquared = guess * guess;
  {
    jlong sqrtFloor;
    jlong halfSquare;
    switch ([mode ordinal]) {
      case JavaMathRoundingMode_Enum_UNNECESSARY:
      ComGoogleCommonMathMathPreconditions_checkRoundingUnnecessaryWithBoolean_(guessSquared == x);
      return guess;
      case JavaMathRoundingMode_Enum_FLOOR:
      case JavaMathRoundingMode_Enum_DOWN:
      if (x < guessSquared) {
        return guess - 1;
      }
      return guess;
      case JavaMathRoundingMode_Enum_CEILING:
      case JavaMathRoundingMode_Enum_UP:
      if (x > guessSquared) {
        return guess + 1;
      }
      return guess;
      case JavaMathRoundingMode_Enum_HALF_DOWN:
      case JavaMathRoundingMode_Enum_HALF_UP:
      case JavaMathRoundingMode_Enum_HALF_EVEN:
      sqrtFloor = guess - ((x < guessSquared) ? 1 : 0);
      halfSquare = sqrtFloor * sqrtFloor + sqrtFloor;
      return sqrtFloor + ComGoogleCommonMathLongMath_lessThanBranchFreeWithLong_withLong_(halfSquare, x);
      default:
      @throw new_JavaLangAssertionError_init();
    }
  }
}

jlong ComGoogleCommonMathLongMath_divideWithLong_withLong_withJavaMathRoundingMode_(jlong p, jlong q, JavaMathRoundingMode *mode) {
  ComGoogleCommonMathLongMath_initialize();
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(mode);
  jlong div = p / q;
  jlong rem = p - q * div;
  if (rem == 0) {
    return div;
  }
  jint signum = 1 | (jint) (JreRShift64((p ^ q), (JavaLangLong_SIZE - 1)));
  jboolean increment;
  {
    jlong absRem;
    jlong cmpRemToHalfDivisor;
    switch ([mode ordinal]) {
      case JavaMathRoundingMode_Enum_UNNECESSARY:
      ComGoogleCommonMathMathPreconditions_checkRoundingUnnecessaryWithBoolean_(rem == 0);
      case JavaMathRoundingMode_Enum_DOWN:
      increment = false;
      break;
      case JavaMathRoundingMode_Enum_UP:
      increment = true;
      break;
      case JavaMathRoundingMode_Enum_CEILING:
      increment = (signum > 0);
      break;
      case JavaMathRoundingMode_Enum_FLOOR:
      increment = (signum < 0);
      break;
      case JavaMathRoundingMode_Enum_HALF_EVEN:
      case JavaMathRoundingMode_Enum_HALF_DOWN:
      case JavaMathRoundingMode_Enum_HALF_UP:
      absRem = JavaLangMath_absWithLong_(rem);
      cmpRemToHalfDivisor = absRem - (JavaLangMath_absWithLong_(q) - absRem);
      if (cmpRemToHalfDivisor == 0) {
        increment = ((mode == JreLoadEnum(JavaMathRoundingMode, HALF_UP)) | ((mode == JreLoadEnum(JavaMathRoundingMode, HALF_EVEN)) & ((div & 1) != 0)));
      }
      else {
        increment = (cmpRemToHalfDivisor > 0);
      }
      break;
      default:
      @throw new_JavaLangAssertionError_init();
    }
  }
  return increment ? div + signum : div;
}

jint ComGoogleCommonMathLongMath_modWithLong_withInt_(jlong x, jint m) {
  ComGoogleCommonMathLongMath_initialize();
  return (jint) ComGoogleCommonMathLongMath_modWithLong_withLong_(x, (jlong) m);
}

jlong ComGoogleCommonMathLongMath_modWithLong_withLong_(jlong x, jlong m) {
  ComGoogleCommonMathLongMath_initialize();
  if (m <= 0) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"Modulus must be positive");
  }
  jlong result = x % m;
  return (result >= 0) ? result : result + m;
}

jlong ComGoogleCommonMathLongMath_gcdWithLong_withLong_(jlong a, jlong b) {
  ComGoogleCommonMathLongMath_initialize();
  ComGoogleCommonMathMathPreconditions_checkNonNegativeWithNSString_withLong_(@"a", a);
  ComGoogleCommonMathMathPreconditions_checkNonNegativeWithNSString_withLong_(@"b", b);
  if (a == 0) {
    return b;
  }
  else if (b == 0) {
    return a;
  }
  jint aTwos = JavaLangLong_numberOfTrailingZerosWithLong_(a);
  JreRShiftAssignLong(&a, aTwos);
  jint bTwos = JavaLangLong_numberOfTrailingZerosWithLong_(b);
  JreRShiftAssignLong(&b, bTwos);
  while (a != b) {
    jlong delta = a - b;
    jlong minDeltaOrZero = delta & (JreRShift64(delta, (JavaLangLong_SIZE - 1)));
    a = delta - minDeltaOrZero - minDeltaOrZero;
    b += minDeltaOrZero;
    JreRShiftAssignLong(&a, JavaLangLong_numberOfTrailingZerosWithLong_(a));
  }
  return JreLShift64(a, JavaLangMath_minWithInt_withInt_(aTwos, bTwos));
}

jlong ComGoogleCommonMathLongMath_checkedAddWithLong_withLong_(jlong a, jlong b) {
  ComGoogleCommonMathLongMath_initialize();
  jlong result = a + b;
  ComGoogleCommonMathMathPreconditions_checkNoOverflowWithBoolean_(((a ^ b) < 0) | ((a ^ result) >= 0));
  return result;
}

jlong ComGoogleCommonMathLongMath_checkedSubtractWithLong_withLong_(jlong a, jlong b) {
  ComGoogleCommonMathLongMath_initialize();
  jlong result = a - b;
  ComGoogleCommonMathMathPreconditions_checkNoOverflowWithBoolean_(((a ^ b) >= 0) | ((a ^ result) >= 0));
  return result;
}

jlong ComGoogleCommonMathLongMath_checkedMultiplyWithLong_withLong_(jlong a, jlong b) {
  ComGoogleCommonMathLongMath_initialize();
  jint leadingZeros = JavaLangLong_numberOfLeadingZerosWithLong_(a) + JavaLangLong_numberOfLeadingZerosWithLong_(~a) + JavaLangLong_numberOfLeadingZerosWithLong_(b) + JavaLangLong_numberOfLeadingZerosWithLong_(~b);
  if (leadingZeros > JavaLangLong_SIZE + 1) {
    return a * b;
  }
  ComGoogleCommonMathMathPreconditions_checkNoOverflowWithBoolean_(leadingZeros >= JavaLangLong_SIZE);
  ComGoogleCommonMathMathPreconditions_checkNoOverflowWithBoolean_((a >= 0) | (b != JavaLangLong_MIN_VALUE));
  jlong result = a * b;
  ComGoogleCommonMathMathPreconditions_checkNoOverflowWithBoolean_(a == 0 || result / a == b);
  return result;
}

jlong ComGoogleCommonMathLongMath_checkedPowWithLong_withInt_(jlong b, jint k) {
  ComGoogleCommonMathLongMath_initialize();
  ComGoogleCommonMathMathPreconditions_checkNonNegativeWithNSString_withInt_(@"exponent", k);
  if ((b >= -2) & (b <= 2)) {
    switch ((jint) b) {
      case 0:
      return (k == 0) ? 1 : 0;
      case 1:
      return 1;
      case (-1):
      return ((k & 1) == 0) ? 1 : -1;
      case 2:
      ComGoogleCommonMathMathPreconditions_checkNoOverflowWithBoolean_(k < JavaLangLong_SIZE - 1);
      return JreLShift64(1LL, k);
      case (-2):
      ComGoogleCommonMathMathPreconditions_checkNoOverflowWithBoolean_(k < JavaLangLong_SIZE);
      return ((k & 1) == 0) ? (JreLShift64(1LL, k)) : (JreLShift64(-1LL, k));
      default:
      @throw new_JavaLangAssertionError_init();
    }
  }
  jlong accum = 1;
  while (true) {
    switch (k) {
      case 0:
      return accum;
      case 1:
      return ComGoogleCommonMathLongMath_checkedMultiplyWithLong_withLong_(accum, b);
      default:
      if ((k & 1) != 0) {
        accum = ComGoogleCommonMathLongMath_checkedMultiplyWithLong_withLong_(accum, b);
      }
      JreRShiftAssignInt(&k, 1);
      if (k > 0) {
        ComGoogleCommonMathMathPreconditions_checkNoOverflowWithBoolean_(-ComGoogleCommonMathLongMath_FLOOR_SQRT_MAX_LONG <= b && b <= ComGoogleCommonMathLongMath_FLOOR_SQRT_MAX_LONG);
        b *= b;
      }
    }
  }
}

jlong ComGoogleCommonMathLongMath_saturatedAddWithLong_withLong_(jlong a, jlong b) {
  ComGoogleCommonMathLongMath_initialize();
  jlong naiveSum = a + b;
  if (((a ^ b) < 0) | ((a ^ naiveSum) >= 0)) {
    return naiveSum;
  }
  return JavaLangLong_MAX_VALUE + ((JreURShift64(naiveSum, (JavaLangLong_SIZE - 1))) ^ 1);
}

jlong ComGoogleCommonMathLongMath_saturatedSubtractWithLong_withLong_(jlong a, jlong b) {
  ComGoogleCommonMathLongMath_initialize();
  jlong naiveDifference = a - b;
  if (((a ^ b) >= 0) | ((a ^ naiveDifference) >= 0)) {
    return naiveDifference;
  }
  return JavaLangLong_MAX_VALUE + ((JreURShift64(naiveDifference, (JavaLangLong_SIZE - 1))) ^ 1);
}

jlong ComGoogleCommonMathLongMath_saturatedMultiplyWithLong_withLong_(jlong a, jlong b) {
  ComGoogleCommonMathLongMath_initialize();
  jint leadingZeros = JavaLangLong_numberOfLeadingZerosWithLong_(a) + JavaLangLong_numberOfLeadingZerosWithLong_(~a) + JavaLangLong_numberOfLeadingZerosWithLong_(b) + JavaLangLong_numberOfLeadingZerosWithLong_(~b);
  if (leadingZeros > JavaLangLong_SIZE + 1) {
    return a * b;
  }
  jlong limit = JavaLangLong_MAX_VALUE + (JreURShift64((a ^ b), (JavaLangLong_SIZE - 1)));
  if ((leadingZeros < JavaLangLong_SIZE) | ((a < 0) & (b == JavaLangLong_MIN_VALUE))) {
    return limit;
  }
  jlong result = a * b;
  if (a == 0 || result / a == b) {
    return result;
  }
  return limit;
}

jlong ComGoogleCommonMathLongMath_saturatedPowWithLong_withInt_(jlong b, jint k) {
  ComGoogleCommonMathLongMath_initialize();
  ComGoogleCommonMathMathPreconditions_checkNonNegativeWithNSString_withInt_(@"exponent", k);
  if ((b >= -2) & (b <= 2)) {
    switch ((jint) b) {
      case 0:
      return (k == 0) ? 1 : 0;
      case 1:
      return 1;
      case (-1):
      return ((k & 1) == 0) ? 1 : -1;
      case 2:
      if (k >= JavaLangLong_SIZE - 1) {
        return JavaLangLong_MAX_VALUE;
      }
      return JreLShift64(1LL, k);
      case (-2):
      if (k >= JavaLangLong_SIZE) {
        return JavaLangLong_MAX_VALUE + (k & 1);
      }
      return ((k & 1) == 0) ? (JreLShift64(1LL, k)) : (JreLShift64(-1LL, k));
      default:
      @throw new_JavaLangAssertionError_init();
    }
  }
  jlong accum = 1;
  jlong limit = JavaLangLong_MAX_VALUE + ((JreURShift64(b, JavaLangLong_SIZE - 1)) & (k & 1));
  while (true) {
    switch (k) {
      case 0:
      return accum;
      case 1:
      return ComGoogleCommonMathLongMath_saturatedMultiplyWithLong_withLong_(accum, b);
      default:
      if ((k & 1) != 0) {
        accum = ComGoogleCommonMathLongMath_saturatedMultiplyWithLong_withLong_(accum, b);
      }
      JreRShiftAssignInt(&k, 1);
      if (k > 0) {
        if ((-ComGoogleCommonMathLongMath_FLOOR_SQRT_MAX_LONG > b) | (b > ComGoogleCommonMathLongMath_FLOOR_SQRT_MAX_LONG)) {
          return limit;
        }
        b *= b;
      }
    }
  }
}

jlong ComGoogleCommonMathLongMath_factorialWithInt_(jint n) {
  ComGoogleCommonMathLongMath_initialize();
  ComGoogleCommonMathMathPreconditions_checkNonNegativeWithNSString_withInt_(@"n", n);
  return (n < ((IOSLongArray *) nil_chk(ComGoogleCommonMathLongMath_factorials))->size_) ? IOSLongArray_Get(ComGoogleCommonMathLongMath_factorials, n) : JavaLangLong_MAX_VALUE;
}

jlong ComGoogleCommonMathLongMath_binomialWithInt_withInt_(jint n, jint k) {
  ComGoogleCommonMathLongMath_initialize();
  ComGoogleCommonMathMathPreconditions_checkNonNegativeWithNSString_withInt_(@"n", n);
  ComGoogleCommonMathMathPreconditions_checkNonNegativeWithNSString_withInt_(@"k", k);
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withInt_withInt_(k <= n, @"k (%s) > n (%s)", k, n);
  if (k > (JreRShift32(n, 1))) {
    k = n - k;
  }
  switch (k) {
    case 0:
    return 1;
    case 1:
    return n;
    default:
    if (n < ((IOSLongArray *) nil_chk(ComGoogleCommonMathLongMath_factorials))->size_) {
      return IOSLongArray_Get(ComGoogleCommonMathLongMath_factorials, n) / (IOSLongArray_Get(ComGoogleCommonMathLongMath_factorials, k) * IOSLongArray_Get(ComGoogleCommonMathLongMath_factorials, n - k));
    }
    else if (k >= ((IOSIntArray *) nil_chk(ComGoogleCommonMathLongMath_biggestBinomials))->size_ || n > IOSIntArray_Get(ComGoogleCommonMathLongMath_biggestBinomials, k)) {
      return JavaLangLong_MAX_VALUE;
    }
    else if (k < ((IOSIntArray *) nil_chk(ComGoogleCommonMathLongMath_biggestSimpleBinomials))->size_ && n <= IOSIntArray_Get(ComGoogleCommonMathLongMath_biggestSimpleBinomials, k)) {
      jlong result = n--;
      for (jint i = 2; i <= k; n--, i++) {
        result *= n;
        result /= i;
      }
      return result;
    }
    else {
      jint nBits = ComGoogleCommonMathLongMath_log2WithLong_withJavaMathRoundingMode_(n, JreLoadEnum(JavaMathRoundingMode, CEILING));
      jlong result = 1;
      jlong numerator = n--;
      jlong denominator = 1;
      jint numeratorBits = nBits;
      for (jint i = 2; i <= k; i++, n--) {
        if (numeratorBits + nBits < JavaLangLong_SIZE - 1) {
          numerator *= n;
          denominator *= i;
          numeratorBits += nBits;
        }
        else {
          result = ComGoogleCommonMathLongMath_multiplyFractionWithLong_withLong_withLong_(result, numerator, denominator);
          numerator = n;
          denominator = i;
          numeratorBits = nBits;
        }
      }
      return ComGoogleCommonMathLongMath_multiplyFractionWithLong_withLong_withLong_(result, numerator, denominator);
    }
  }
}

jlong ComGoogleCommonMathLongMath_multiplyFractionWithLong_withLong_withLong_(jlong x, jlong numerator, jlong denominator) {
  ComGoogleCommonMathLongMath_initialize();
  if (x == 1) {
    return numerator / denominator;
  }
  jlong commonDivisor = ComGoogleCommonMathLongMath_gcdWithLong_withLong_(x, denominator);
  x /= commonDivisor;
  denominator /= commonDivisor;
  return x * (numerator / denominator);
}

jboolean ComGoogleCommonMathLongMath_fitsInIntWithLong_(jlong x) {
  ComGoogleCommonMathLongMath_initialize();
  return (jint) x == x;
}

jlong ComGoogleCommonMathLongMath_meanWithLong_withLong_(jlong x, jlong y) {
  ComGoogleCommonMathLongMath_initialize();
  return (x & y) + (JreRShift64((x ^ y), 1));
}

jboolean ComGoogleCommonMathLongMath_isPrimeWithLong_(jlong n) {
  ComGoogleCommonMathLongMath_initialize();
  if (n < 2) {
    ComGoogleCommonMathMathPreconditions_checkNonNegativeWithNSString_withLong_(@"n", n);
    return false;
  }
  if (n == 2 || n == 3 || n == 5 || n == 7 || n == 11 || n == 13) {
    return true;
  }
  if ((ComGoogleCommonMathLongMath_SIEVE_30 & (JreLShift32(1, (n % 30)))) != 0) {
    return false;
  }
  if (n % 7 == 0 || n % 11 == 0 || n % 13 == 0) {
    return false;
  }
  if (n < 17 * 17) {
    return true;
  }
  {
    IOSObjectArray *a__ = ComGoogleCommonMathLongMath_millerRabinBaseSets;
    IOSLongArray * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSLongArray * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSLongArray *baseSet = *b__++;
      if (n <= IOSLongArray_Get(nil_chk(baseSet), 0)) {
        for (jint i = 1; i < baseSet->size_; i++) {
          if (!ComGoogleCommonMathLongMath_MillerRabinTester_testWithLong_withLong_(IOSLongArray_Get(baseSet, i), n)) {
            return false;
          }
        }
        return true;
      }
    }
  }
  @throw new_JavaLangAssertionError_init();
}

void ComGoogleCommonMathLongMath_init(ComGoogleCommonMathLongMath *self) {
  NSObject_init(self);
}

ComGoogleCommonMathLongMath *new_ComGoogleCommonMathLongMath_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonMathLongMath, init)
}

ComGoogleCommonMathLongMath *create_ComGoogleCommonMathLongMath_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonMathLongMath, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonMathLongMath)

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonMathLongMath_MillerRabinTester)

ComGoogleCommonMathLongMath_MillerRabinTester *ComGoogleCommonMathLongMath_MillerRabinTester_values_[2];

@implementation ComGoogleCommonMathLongMath_MillerRabinTester

+ (jboolean)testWithLong:(jlong)base
                withLong:(jlong)n {
  return ComGoogleCommonMathLongMath_MillerRabinTester_testWithLong_withLong_(base, n);
}

- (jlong)mulModWithLong:(jlong)a
               withLong:(jlong)b
               withLong:(jlong)m {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)squareModWithLong:(jlong)a
                  withLong:(jlong)m {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)powModWithLong:(jlong)a
               withLong:(jlong)p
               withLong:(jlong)m {
  return ComGoogleCommonMathLongMath_MillerRabinTester_powModWithLong_withLong_withLong_(self, a, p, m);
}

- (jboolean)testWitnessWithLong:(jlong)base
                       withLong:(jlong)n {
  return ComGoogleCommonMathLongMath_MillerRabinTester_testWitnessWithLong_withLong_(self, base, n);
}

+ (IOSObjectArray *)values {
  return ComGoogleCommonMathLongMath_MillerRabinTester_values();
}

+ (ComGoogleCommonMathLongMath_MillerRabinTester *)valueOfWithNSString:(NSString *)name {
  return ComGoogleCommonMathLongMath_MillerRabinTester_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x400, 2, 3, -1, -1, -1, -1 },
    { NULL, "J", 0x400, 4, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x2, 5, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 6, 1, -1, -1, -1, -1 },
    { NULL, "[LComGoogleCommonMathLongMath_MillerRabinTester;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonMathLongMath_MillerRabinTester;", 0x9, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testWithLong:withLong:);
  methods[1].selector = @selector(mulModWithLong:withLong:withLong:);
  methods[2].selector = @selector(squareModWithLong:withLong:);
  methods[3].selector = @selector(powModWithLong:withLong:withLong:);
  methods[4].selector = @selector(testWitnessWithLong:withLong:);
  methods[5].selector = @selector(values);
  methods[6].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SMALL", "LComGoogleCommonMathLongMath_MillerRabinTester;", .constantValue.asLong = 0, 0x4019, -1, 9, -1, -1 },
    { "LARGE", "LComGoogleCommonMathLongMath_MillerRabinTester;", .constantValue.asLong = 0, 0x4019, -1, 10, -1, -1 },
  };
  static const void *ptrTable[] = { "test", "JJ", "mulMod", "JJJ", "squareMod", "powMod", "testWitness", "valueOf", "LNSString;", &JreEnum(ComGoogleCommonMathLongMath_MillerRabinTester, SMALL), &JreEnum(ComGoogleCommonMathLongMath_MillerRabinTester, LARGE), "LComGoogleCommonMathLongMath;", "Ljava/lang/Enum<Lcom/google/common/math/LongMath$MillerRabinTester;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonMathLongMath_MillerRabinTester = { "MillerRabinTester", "com.google.common.math", ptrTable, methods, fields, 7, 0x440a, 7, 2, 11, -1, -1, 12, -1 };
  return &_ComGoogleCommonMathLongMath_MillerRabinTester;
}

+ (void)initialize {
  if (self == [ComGoogleCommonMathLongMath_MillerRabinTester class]) {
    JreEnum(ComGoogleCommonMathLongMath_MillerRabinTester, SMALL) = new_ComGoogleCommonMathLongMath_MillerRabinTester_1_initWithNSString_withInt_(@"SMALL", 0);
    JreEnum(ComGoogleCommonMathLongMath_MillerRabinTester, LARGE) = new_ComGoogleCommonMathLongMath_MillerRabinTester_2_initWithNSString_withInt_(@"LARGE", 1);
    J2OBJC_SET_INITIALIZED(ComGoogleCommonMathLongMath_MillerRabinTester)
  }
}

@end

void ComGoogleCommonMathLongMath_MillerRabinTester_initWithNSString_withInt_(ComGoogleCommonMathLongMath_MillerRabinTester *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

ComGoogleCommonMathLongMath_MillerRabinTester *new_ComGoogleCommonMathLongMath_MillerRabinTester_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(ComGoogleCommonMathLongMath_MillerRabinTester, initWithNSString_withInt_, __name, __ordinal)
}

jboolean ComGoogleCommonMathLongMath_MillerRabinTester_testWithLong_withLong_(jlong base, jlong n) {
  ComGoogleCommonMathLongMath_MillerRabinTester_initialize();
  return ComGoogleCommonMathLongMath_MillerRabinTester_testWitnessWithLong_withLong_(((n <= ComGoogleCommonMathLongMath_FLOOR_SQRT_MAX_LONG) ? JreEnum(ComGoogleCommonMathLongMath_MillerRabinTester, SMALL) : JreEnum(ComGoogleCommonMathLongMath_MillerRabinTester, LARGE)), base, n);
}

jlong ComGoogleCommonMathLongMath_MillerRabinTester_powModWithLong_withLong_withLong_(ComGoogleCommonMathLongMath_MillerRabinTester *self, jlong a, jlong p, jlong m) {
  jlong res = 1;
  for (; p != 0; JreRShiftAssignLong(&p, 1)) {
    if ((p & 1) != 0) {
      res = [self mulModWithLong:res withLong:a withLong:m];
    }
    a = [self squareModWithLong:a withLong:m];
  }
  return res;
}

jboolean ComGoogleCommonMathLongMath_MillerRabinTester_testWitnessWithLong_withLong_(ComGoogleCommonMathLongMath_MillerRabinTester *self, jlong base, jlong n) {
  jint r = JavaLangLong_numberOfTrailingZerosWithLong_(n - 1);
  jlong d = JreRShift64((n - 1), r);
  base %= n;
  if (base == 0) {
    return true;
  }
  jlong a = ComGoogleCommonMathLongMath_MillerRabinTester_powModWithLong_withLong_withLong_(self, base, d, n);
  if (a == 1) {
    return true;
  }
  jint j = 0;
  while (a != n - 1) {
    if (++j == r) {
      return false;
    }
    a = [self squareModWithLong:a withLong:n];
  }
  return true;
}

IOSObjectArray *ComGoogleCommonMathLongMath_MillerRabinTester_values() {
  ComGoogleCommonMathLongMath_MillerRabinTester_initialize();
  return [IOSObjectArray arrayWithObjects:ComGoogleCommonMathLongMath_MillerRabinTester_values_ count:2 type:ComGoogleCommonMathLongMath_MillerRabinTester_class_()];
}

ComGoogleCommonMathLongMath_MillerRabinTester *ComGoogleCommonMathLongMath_MillerRabinTester_valueOfWithNSString_(NSString *name) {
  ComGoogleCommonMathLongMath_MillerRabinTester_initialize();
  for (int i = 0; i < 2; i++) {
    ComGoogleCommonMathLongMath_MillerRabinTester *e = ComGoogleCommonMathLongMath_MillerRabinTester_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ComGoogleCommonMathLongMath_MillerRabinTester *ComGoogleCommonMathLongMath_MillerRabinTester_fromOrdinal(NSUInteger ordinal) {
  ComGoogleCommonMathLongMath_MillerRabinTester_initialize();
  if (ordinal >= 2) {
    return nil;
  }
  return ComGoogleCommonMathLongMath_MillerRabinTester_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonMathLongMath_MillerRabinTester)

@implementation ComGoogleCommonMathLongMath_MillerRabinTester_1

- (jlong)mulModWithLong:(jlong)a
               withLong:(jlong)b
               withLong:(jlong)m {
  return (a * b) % m;
}

- (jlong)squareModWithLong:(jlong)a
                  withLong:(jlong)m {
  return (a * a) % m;
}

- (void)dealloc {
  JreCheckFinalize(self, [ComGoogleCommonMathLongMath_MillerRabinTester_1 class]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "J", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x0, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(mulModWithLong:withLong:withLong:);
  methods[1].selector = @selector(squareModWithLong:withLong:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "mulMod", "JJJ", "squareMod", "JJ", "LComGoogleCommonMathLongMath_MillerRabinTester;" };
  static const J2ObjcClassInfo _ComGoogleCommonMathLongMath_MillerRabinTester_1 = { "", "com.google.common.math", ptrTable, methods, NULL, 7, 0xc018, 2, 0, 4, -1, -1, -1, -1 };
  return &_ComGoogleCommonMathLongMath_MillerRabinTester_1;
}

@end

void ComGoogleCommonMathLongMath_MillerRabinTester_1_initWithNSString_withInt_(ComGoogleCommonMathLongMath_MillerRabinTester_1 *self, NSString *__name, jint __ordinal) {
  ComGoogleCommonMathLongMath_MillerRabinTester_initWithNSString_withInt_(self, __name, __ordinal);
}

ComGoogleCommonMathLongMath_MillerRabinTester_1 *new_ComGoogleCommonMathLongMath_MillerRabinTester_1_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(ComGoogleCommonMathLongMath_MillerRabinTester_1, initWithNSString_withInt_, __name, __ordinal)
}

@implementation ComGoogleCommonMathLongMath_MillerRabinTester_2

- (jlong)plusModWithLong:(jlong)a
                withLong:(jlong)b
                withLong:(jlong)m {
  return ComGoogleCommonMathLongMath_MillerRabinTester_2_plusModWithLong_withLong_withLong_(self, a, b, m);
}

- (jlong)times2ToThe32ModWithLong:(jlong)a
                         withLong:(jlong)m {
  return ComGoogleCommonMathLongMath_MillerRabinTester_2_times2ToThe32ModWithLong_withLong_(self, a, m);
}

- (jlong)mulModWithLong:(jlong)a
               withLong:(jlong)b
               withLong:(jlong)m {
  jlong aHi = JreURShift64(a, 32);
  jlong bHi = JreURShift64(b, 32);
  jlong aLo = a & (jlong) 0xFFFFFFFFLL;
  jlong bLo = b & (jlong) 0xFFFFFFFFLL;
  jlong result = ComGoogleCommonMathLongMath_MillerRabinTester_2_times2ToThe32ModWithLong_withLong_(self, aHi * bHi, m);
  result += aHi * bLo;
  if (result < 0) {
    result = ComGoogleCommonPrimitivesUnsignedLongs_remainderWithLong_withLong_(result, m);
  }
  result += aLo * bHi;
  result = ComGoogleCommonMathLongMath_MillerRabinTester_2_times2ToThe32ModWithLong_withLong_(self, result, m);
  return ComGoogleCommonMathLongMath_MillerRabinTester_2_plusModWithLong_withLong_withLong_(self, result, ComGoogleCommonPrimitivesUnsignedLongs_remainderWithLong_withLong_(aLo * bLo, m), m);
}

- (jlong)squareModWithLong:(jlong)a
                  withLong:(jlong)m {
  jlong aHi = JreURShift64(a, 32);
  jlong aLo = a & (jlong) 0xFFFFFFFFLL;
  jlong result = ComGoogleCommonMathLongMath_MillerRabinTester_2_times2ToThe32ModWithLong_withLong_(self, aHi * aHi, m);
  jlong hiLo = aHi * aLo * 2;
  if (hiLo < 0) {
    hiLo = ComGoogleCommonPrimitivesUnsignedLongs_remainderWithLong_withLong_(hiLo, m);
  }
  result += hiLo;
  result = ComGoogleCommonMathLongMath_MillerRabinTester_2_times2ToThe32ModWithLong_withLong_(self, result, m);
  return ComGoogleCommonMathLongMath_MillerRabinTester_2_plusModWithLong_withLong_withLong_(self, result, ComGoogleCommonPrimitivesUnsignedLongs_remainderWithLong_withLong_(aLo * aLo, m), m);
}

- (void)dealloc {
  JreCheckFinalize(self, [ComGoogleCommonMathLongMath_MillerRabinTester_2 class]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "J", 0x2, 0, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "J", 0x0, 4, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x0, 5, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(plusModWithLong:withLong:withLong:);
  methods[1].selector = @selector(times2ToThe32ModWithLong:withLong:);
  methods[2].selector = @selector(mulModWithLong:withLong:withLong:);
  methods[3].selector = @selector(squareModWithLong:withLong:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "plusMod", "JJJ", "times2ToThe32Mod", "JJ", "mulMod", "squareMod", "LComGoogleCommonMathLongMath_MillerRabinTester;" };
  static const J2ObjcClassInfo _ComGoogleCommonMathLongMath_MillerRabinTester_2 = { "", "com.google.common.math", ptrTable, methods, NULL, 7, 0xc018, 4, 0, 6, -1, -1, -1, -1 };
  return &_ComGoogleCommonMathLongMath_MillerRabinTester_2;
}

@end

void ComGoogleCommonMathLongMath_MillerRabinTester_2_initWithNSString_withInt_(ComGoogleCommonMathLongMath_MillerRabinTester_2 *self, NSString *__name, jint __ordinal) {
  ComGoogleCommonMathLongMath_MillerRabinTester_initWithNSString_withInt_(self, __name, __ordinal);
}

ComGoogleCommonMathLongMath_MillerRabinTester_2 *new_ComGoogleCommonMathLongMath_MillerRabinTester_2_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(ComGoogleCommonMathLongMath_MillerRabinTester_2, initWithNSString_withInt_, __name, __ordinal)
}

jlong ComGoogleCommonMathLongMath_MillerRabinTester_2_plusModWithLong_withLong_withLong_(ComGoogleCommonMathLongMath_MillerRabinTester_2 *self, jlong a, jlong b, jlong m) {
  return (a >= m - b) ? (a + b - m) : (a + b);
}

jlong ComGoogleCommonMathLongMath_MillerRabinTester_2_times2ToThe32ModWithLong_withLong_(ComGoogleCommonMathLongMath_MillerRabinTester_2 *self, jlong a, jlong m) {
  jint remainingPowersOf2 = 32;
  do {
    jint shift = JavaLangMath_minWithInt_withInt_(remainingPowersOf2, JavaLangLong_numberOfLeadingZerosWithLong_(a));
    a = ComGoogleCommonPrimitivesUnsignedLongs_remainderWithLong_withLong_(JreLShift64(a, shift), m);
    remainingPowersOf2 -= shift;
  }
  while (remainingPowersOf2 > 0);
  return a;
}
