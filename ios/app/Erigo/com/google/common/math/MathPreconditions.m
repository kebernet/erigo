//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/math/MathPreconditions.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/math/MathPreconditions.h"
#include "java/lang/ArithmeticException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/math/BigInteger.h"
#include "javax/annotation/Nullable.h"

@interface ComGoogleCommonMathMathPreconditions ()

- (instancetype)init;

@end

__attribute__((unused)) static void ComGoogleCommonMathMathPreconditions_init(ComGoogleCommonMathMathPreconditions *self);

__attribute__((unused)) static ComGoogleCommonMathMathPreconditions *new_ComGoogleCommonMathMathPreconditions_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonMathMathPreconditions *create_ComGoogleCommonMathMathPreconditions_init();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonMathMathPreconditions__Annotations$0();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonMathMathPreconditions__Annotations$1();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonMathMathPreconditions__Annotations$2();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonMathMathPreconditions__Annotations$3();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonMathMathPreconditions__Annotations$4();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonMathMathPreconditions__Annotations$5();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonMathMathPreconditions__Annotations$6();

@implementation ComGoogleCommonMathMathPreconditions

+ (jint)checkPositiveWithNSString:(NSString *)role
                          withInt:(jint)x {
  return ComGoogleCommonMathMathPreconditions_checkPositiveWithNSString_withInt_(role, x);
}

+ (jlong)checkPositiveWithNSString:(NSString *)role
                          withLong:(jlong)x {
  return ComGoogleCommonMathMathPreconditions_checkPositiveWithNSString_withLong_(role, x);
}

+ (JavaMathBigInteger *)checkPositiveWithNSString:(NSString *)role
                           withJavaMathBigInteger:(JavaMathBigInteger *)x {
  return ComGoogleCommonMathMathPreconditions_checkPositiveWithNSString_withJavaMathBigInteger_(role, x);
}

+ (jint)checkNonNegativeWithNSString:(NSString *)role
                             withInt:(jint)x {
  return ComGoogleCommonMathMathPreconditions_checkNonNegativeWithNSString_withInt_(role, x);
}

+ (jlong)checkNonNegativeWithNSString:(NSString *)role
                             withLong:(jlong)x {
  return ComGoogleCommonMathMathPreconditions_checkNonNegativeWithNSString_withLong_(role, x);
}

+ (JavaMathBigInteger *)checkNonNegativeWithNSString:(NSString *)role
                              withJavaMathBigInteger:(JavaMathBigInteger *)x {
  return ComGoogleCommonMathMathPreconditions_checkNonNegativeWithNSString_withJavaMathBigInteger_(role, x);
}

+ (jdouble)checkNonNegativeWithNSString:(NSString *)role
                             withDouble:(jdouble)x {
  return ComGoogleCommonMathMathPreconditions_checkNonNegativeWithNSString_withDouble_(role, x);
}

+ (void)checkRoundingUnnecessaryWithBoolean:(jboolean)condition {
  ComGoogleCommonMathMathPreconditions_checkRoundingUnnecessaryWithBoolean_(condition);
}

+ (void)checkInRangeWithBoolean:(jboolean)condition {
  ComGoogleCommonMathMathPreconditions_checkInRangeWithBoolean_(condition);
}

+ (void)checkNoOverflowWithBoolean:(jboolean)condition {
  ComGoogleCommonMathMathPreconditions_checkNoOverflowWithBoolean_(condition);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonMathMathPreconditions_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x8, 0, 1, -1, -1, -1, 2 },
    { NULL, "J", 0x8, 0, 3, -1, -1, -1, 4 },
    { NULL, "LJavaMathBigInteger;", 0x8, 0, 5, -1, -1, -1, 6 },
    { NULL, "I", 0x8, 7, 1, -1, -1, -1, 8 },
    { NULL, "J", 0x8, 7, 3, -1, -1, -1, 9 },
    { NULL, "LJavaMathBigInteger;", 0x8, 7, 5, -1, -1, -1, 10 },
    { NULL, "D", 0x8, 7, 11, -1, -1, -1, 12 },
    { NULL, "V", 0x8, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 15, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 16, 14, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(checkPositiveWithNSString:withInt:);
  methods[1].selector = @selector(checkPositiveWithNSString:withLong:);
  methods[2].selector = @selector(checkPositiveWithNSString:withJavaMathBigInteger:);
  methods[3].selector = @selector(checkNonNegativeWithNSString:withInt:);
  methods[4].selector = @selector(checkNonNegativeWithNSString:withLong:);
  methods[5].selector = @selector(checkNonNegativeWithNSString:withJavaMathBigInteger:);
  methods[6].selector = @selector(checkNonNegativeWithNSString:withDouble:);
  methods[7].selector = @selector(checkRoundingUnnecessaryWithBoolean:);
  methods[8].selector = @selector(checkInRangeWithBoolean:);
  methods[9].selector = @selector(checkNoOverflowWithBoolean:);
  methods[10].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "checkPositive", "LNSString;I", (void *)&ComGoogleCommonMathMathPreconditions__Annotations$0, "LNSString;J", (void *)&ComGoogleCommonMathMathPreconditions__Annotations$1, "LNSString;LJavaMathBigInteger;", (void *)&ComGoogleCommonMathMathPreconditions__Annotations$2, "checkNonNegative", (void *)&ComGoogleCommonMathMathPreconditions__Annotations$3, (void *)&ComGoogleCommonMathMathPreconditions__Annotations$4, (void *)&ComGoogleCommonMathMathPreconditions__Annotations$5, "LNSString;D", (void *)&ComGoogleCommonMathMathPreconditions__Annotations$6, "checkRoundingUnnecessary", "Z", "checkInRange", "checkNoOverflow" };
  static const J2ObjcClassInfo _ComGoogleCommonMathMathPreconditions = { "MathPreconditions", "com.google.common.math", ptrTable, methods, NULL, 7, 0x10, 11, 0, -1, -1, -1, -1, -1 };
  return &_ComGoogleCommonMathMathPreconditions;
}

@end

jint ComGoogleCommonMathMathPreconditions_checkPositiveWithNSString_withInt_(NSString *role, jint x) {
  ComGoogleCommonMathMathPreconditions_initialize();
  if (x <= 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$I$", role, @" (", x, @") must be > 0"));
  }
  return x;
}

jlong ComGoogleCommonMathMathPreconditions_checkPositiveWithNSString_withLong_(NSString *role, jlong x) {
  ComGoogleCommonMathMathPreconditions_initialize();
  if (x <= 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$J$", role, @" (", x, @") must be > 0"));
  }
  return x;
}

JavaMathBigInteger *ComGoogleCommonMathMathPreconditions_checkPositiveWithNSString_withJavaMathBigInteger_(NSString *role, JavaMathBigInteger *x) {
  ComGoogleCommonMathMathPreconditions_initialize();
  if ([((JavaMathBigInteger *) nil_chk(x)) signum] <= 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$@$", role, @" (", x, @") must be > 0"));
  }
  return x;
}

jint ComGoogleCommonMathMathPreconditions_checkNonNegativeWithNSString_withInt_(NSString *role, jint x) {
  ComGoogleCommonMathMathPreconditions_initialize();
  if (x < 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$I$", role, @" (", x, @") must be >= 0"));
  }
  return x;
}

jlong ComGoogleCommonMathMathPreconditions_checkNonNegativeWithNSString_withLong_(NSString *role, jlong x) {
  ComGoogleCommonMathMathPreconditions_initialize();
  if (x < 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$J$", role, @" (", x, @") must be >= 0"));
  }
  return x;
}

JavaMathBigInteger *ComGoogleCommonMathMathPreconditions_checkNonNegativeWithNSString_withJavaMathBigInteger_(NSString *role, JavaMathBigInteger *x) {
  ComGoogleCommonMathMathPreconditions_initialize();
  if ([((JavaMathBigInteger *) nil_chk(x)) signum] < 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$@$", role, @" (", x, @") must be >= 0"));
  }
  return x;
}

jdouble ComGoogleCommonMathMathPreconditions_checkNonNegativeWithNSString_withDouble_(NSString *role, jdouble x) {
  ComGoogleCommonMathMathPreconditions_initialize();
  if (!(x >= 0)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$D$", role, @" (", x, @") must be >= 0"));
  }
  return x;
}

void ComGoogleCommonMathMathPreconditions_checkRoundingUnnecessaryWithBoolean_(jboolean condition) {
  ComGoogleCommonMathMathPreconditions_initialize();
  if (!condition) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"mode was UNNECESSARY, but rounding was necessary");
  }
}

void ComGoogleCommonMathMathPreconditions_checkInRangeWithBoolean_(jboolean condition) {
  ComGoogleCommonMathMathPreconditions_initialize();
  if (!condition) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"not in range");
  }
}

void ComGoogleCommonMathMathPreconditions_checkNoOverflowWithBoolean_(jboolean condition) {
  ComGoogleCommonMathMathPreconditions_initialize();
  if (!condition) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"overflow");
  }
}

void ComGoogleCommonMathMathPreconditions_init(ComGoogleCommonMathMathPreconditions *self) {
  NSObject_init(self);
}

ComGoogleCommonMathMathPreconditions *new_ComGoogleCommonMathMathPreconditions_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonMathMathPreconditions, init)
}

ComGoogleCommonMathMathPreconditions *create_ComGoogleCommonMathMathPreconditions_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonMathMathPreconditions, init)
}

IOSObjectArray *ComGoogleCommonMathMathPreconditions__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()] } count:2 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonMathMathPreconditions__Annotations$1() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()] } count:2 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonMathMathPreconditions__Annotations$2() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()] } count:2 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonMathMathPreconditions__Annotations$3() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()] } count:2 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonMathMathPreconditions__Annotations$4() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()] } count:2 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonMathMathPreconditions__Annotations$5() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()] } count:2 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonMathMathPreconditions__Annotations$6() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()] } count:2 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonMathMathPreconditions)
