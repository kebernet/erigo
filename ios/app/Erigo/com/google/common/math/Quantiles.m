//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/math/Quantiles.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/math/LongMath.h"
#include "com/google/common/math/Quantiles.h"
#include "com/google/common/primitives/Doubles.h"
#include "com/google/common/primitives/Ints.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/math/RoundingMode.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

@interface ComGoogleCommonMathQuantiles ()

+ (jboolean)containsNaNWithDoubleArray:(IOSDoubleArray *)dataset;

+ (jdouble)interpolateWithDouble:(jdouble)lower
                      withDouble:(jdouble)upper
                      withDouble:(jdouble)remainder
                      withDouble:(jdouble)scale_;

+ (void)checkIndexWithInt:(jint)index
                  withInt:(jint)scale_;

+ (IOSDoubleArray *)longsToDoublesWithLongArray:(IOSLongArray *)longs;

+ (IOSDoubleArray *)intsToDoublesWithIntArray:(IOSIntArray *)ints;

+ (void)selectInPlaceWithInt:(jint)required
             withDoubleArray:(IOSDoubleArray *)array
                     withInt:(jint)from
                     withInt:(jint)to;

+ (jint)partitionWithDoubleArray:(IOSDoubleArray *)array
                         withInt:(jint)from
                         withInt:(jint)to;

+ (void)movePivotToStartOfSliceWithDoubleArray:(IOSDoubleArray *)array
                                       withInt:(jint)from
                                       withInt:(jint)to;

+ (void)selectAllInPlaceWithIntArray:(IOSIntArray *)allRequired
                             withInt:(jint)requiredFrom
                             withInt:(jint)requiredTo
                     withDoubleArray:(IOSDoubleArray *)array
                             withInt:(jint)from
                             withInt:(jint)to;

+ (jint)chooseNextSelectionWithIntArray:(IOSIntArray *)allRequired
                                withInt:(jint)requiredFrom
                                withInt:(jint)requiredTo
                                withInt:(jint)from
                                withInt:(jint)to;

+ (void)swapWithDoubleArray:(IOSDoubleArray *)array
                    withInt:(jint)i
                    withInt:(jint)j;

@end

__attribute__((unused)) static jboolean ComGoogleCommonMathQuantiles_containsNaNWithDoubleArray_(IOSDoubleArray *dataset);

__attribute__((unused)) static jdouble ComGoogleCommonMathQuantiles_interpolateWithDouble_withDouble_withDouble_withDouble_(jdouble lower, jdouble upper, jdouble remainder, jdouble scale_);

__attribute__((unused)) static void ComGoogleCommonMathQuantiles_checkIndexWithInt_withInt_(jint index, jint scale_);

__attribute__((unused)) static IOSDoubleArray *ComGoogleCommonMathQuantiles_longsToDoublesWithLongArray_(IOSLongArray *longs);

__attribute__((unused)) static IOSDoubleArray *ComGoogleCommonMathQuantiles_intsToDoublesWithIntArray_(IOSIntArray *ints);

__attribute__((unused)) static void ComGoogleCommonMathQuantiles_selectInPlaceWithInt_withDoubleArray_withInt_withInt_(jint required, IOSDoubleArray *array, jint from, jint to);

__attribute__((unused)) static jint ComGoogleCommonMathQuantiles_partitionWithDoubleArray_withInt_withInt_(IOSDoubleArray *array, jint from, jint to);

__attribute__((unused)) static void ComGoogleCommonMathQuantiles_movePivotToStartOfSliceWithDoubleArray_withInt_withInt_(IOSDoubleArray *array, jint from, jint to);

__attribute__((unused)) static void ComGoogleCommonMathQuantiles_selectAllInPlaceWithIntArray_withInt_withInt_withDoubleArray_withInt_withInt_(IOSIntArray *allRequired, jint requiredFrom, jint requiredTo, IOSDoubleArray *array, jint from, jint to);

__attribute__((unused)) static jint ComGoogleCommonMathQuantiles_chooseNextSelectionWithIntArray_withInt_withInt_withInt_withInt_(IOSIntArray *allRequired, jint requiredFrom, jint requiredTo, jint from, jint to);

__attribute__((unused)) static void ComGoogleCommonMathQuantiles_swapWithDoubleArray_withInt_withInt_(IOSDoubleArray *array, jint i, jint j);

@interface ComGoogleCommonMathQuantiles_Scale () {
 @public
  jint scale__;
}

- (instancetype)initWithInt:(jint)scale_;

@end

__attribute__((unused)) static void ComGoogleCommonMathQuantiles_Scale_initWithInt_(ComGoogleCommonMathQuantiles_Scale *self, jint scale_);

__attribute__((unused)) static ComGoogleCommonMathQuantiles_Scale *new_ComGoogleCommonMathQuantiles_Scale_initWithInt_(jint scale_) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonMathQuantiles_Scale *create_ComGoogleCommonMathQuantiles_Scale_initWithInt_(jint scale_);

@interface ComGoogleCommonMathQuantiles_ScaleAndIndex () {
 @public
  jint scale__;
  jint index_;
}

- (instancetype)initWithInt:(jint)scale_
                    withInt:(jint)index;

@end

__attribute__((unused)) static void ComGoogleCommonMathQuantiles_ScaleAndIndex_initWithInt_withInt_(ComGoogleCommonMathQuantiles_ScaleAndIndex *self, jint scale_, jint index);

__attribute__((unused)) static ComGoogleCommonMathQuantiles_ScaleAndIndex *new_ComGoogleCommonMathQuantiles_ScaleAndIndex_initWithInt_withInt_(jint scale_, jint index) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonMathQuantiles_ScaleAndIndex *create_ComGoogleCommonMathQuantiles_ScaleAndIndex_initWithInt_withInt_(jint scale_, jint index);

@interface ComGoogleCommonMathQuantiles_ScaleAndIndexes () {
 @public
  jint scale__;
  IOSIntArray *indexes_;
}

- (instancetype)initWithInt:(jint)scale_
               withIntArray:(IOSIntArray *)indexes;

@end

J2OBJC_FIELD_SETTER(ComGoogleCommonMathQuantiles_ScaleAndIndexes, indexes_, IOSIntArray *)

__attribute__((unused)) static void ComGoogleCommonMathQuantiles_ScaleAndIndexes_initWithInt_withIntArray_(ComGoogleCommonMathQuantiles_ScaleAndIndexes *self, jint scale_, IOSIntArray *indexes);

__attribute__((unused)) static ComGoogleCommonMathQuantiles_ScaleAndIndexes *new_ComGoogleCommonMathQuantiles_ScaleAndIndexes_initWithInt_withIntArray_(jint scale_, IOSIntArray *indexes) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonMathQuantiles_ScaleAndIndexes *create_ComGoogleCommonMathQuantiles_ScaleAndIndexes_initWithInt_withIntArray_(jint scale_, IOSIntArray *indexes);

@implementation ComGoogleCommonMathQuantiles

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonMathQuantiles_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (ComGoogleCommonMathQuantiles_ScaleAndIndex *)median {
  return ComGoogleCommonMathQuantiles_median();
}

+ (ComGoogleCommonMathQuantiles_Scale *)quartiles {
  return ComGoogleCommonMathQuantiles_quartiles();
}

+ (ComGoogleCommonMathQuantiles_Scale *)percentiles {
  return ComGoogleCommonMathQuantiles_percentiles();
}

+ (ComGoogleCommonMathQuantiles_Scale *)scale__WithInt:(jint)scale_ {
  return ComGoogleCommonMathQuantiles_scale__WithInt_(scale_);
}

+ (jboolean)containsNaNWithDoubleArray:(IOSDoubleArray *)dataset {
  return ComGoogleCommonMathQuantiles_containsNaNWithDoubleArray_(dataset);
}

+ (jdouble)interpolateWithDouble:(jdouble)lower
                      withDouble:(jdouble)upper
                      withDouble:(jdouble)remainder
                      withDouble:(jdouble)scale_ {
  return ComGoogleCommonMathQuantiles_interpolateWithDouble_withDouble_withDouble_withDouble_(lower, upper, remainder, scale_);
}

+ (void)checkIndexWithInt:(jint)index
                  withInt:(jint)scale_ {
  ComGoogleCommonMathQuantiles_checkIndexWithInt_withInt_(index, scale_);
}

+ (IOSDoubleArray *)longsToDoublesWithLongArray:(IOSLongArray *)longs {
  return ComGoogleCommonMathQuantiles_longsToDoublesWithLongArray_(longs);
}

+ (IOSDoubleArray *)intsToDoublesWithIntArray:(IOSIntArray *)ints {
  return ComGoogleCommonMathQuantiles_intsToDoublesWithIntArray_(ints);
}

+ (void)selectInPlaceWithInt:(jint)required
             withDoubleArray:(IOSDoubleArray *)array
                     withInt:(jint)from
                     withInt:(jint)to {
  ComGoogleCommonMathQuantiles_selectInPlaceWithInt_withDoubleArray_withInt_withInt_(required, array, from, to);
}

+ (jint)partitionWithDoubleArray:(IOSDoubleArray *)array
                         withInt:(jint)from
                         withInt:(jint)to {
  return ComGoogleCommonMathQuantiles_partitionWithDoubleArray_withInt_withInt_(array, from, to);
}

+ (void)movePivotToStartOfSliceWithDoubleArray:(IOSDoubleArray *)array
                                       withInt:(jint)from
                                       withInt:(jint)to {
  ComGoogleCommonMathQuantiles_movePivotToStartOfSliceWithDoubleArray_withInt_withInt_(array, from, to);
}

+ (void)selectAllInPlaceWithIntArray:(IOSIntArray *)allRequired
                             withInt:(jint)requiredFrom
                             withInt:(jint)requiredTo
                     withDoubleArray:(IOSDoubleArray *)array
                             withInt:(jint)from
                             withInt:(jint)to {
  ComGoogleCommonMathQuantiles_selectAllInPlaceWithIntArray_withInt_withInt_withDoubleArray_withInt_withInt_(allRequired, requiredFrom, requiredTo, array, from, to);
}

+ (jint)chooseNextSelectionWithIntArray:(IOSIntArray *)allRequired
                                withInt:(jint)requiredFrom
                                withInt:(jint)requiredTo
                                withInt:(jint)from
                                withInt:(jint)to {
  return ComGoogleCommonMathQuantiles_chooseNextSelectionWithIntArray_withInt_withInt_withInt_withInt_(allRequired, requiredFrom, requiredTo, from, to);
}

+ (void)swapWithDoubleArray:(IOSDoubleArray *)array
                    withInt:(jint)i
                    withInt:(jint)j {
  ComGoogleCommonMathQuantiles_swapWithDoubleArray_withInt_withInt_(array, i, j);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonMathQuantiles_ScaleAndIndex;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonMathQuantiles_Scale;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonMathQuantiles_Scale;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonMathQuantiles_Scale;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x8a, 2, 3, -1, -1, -1, -1 },
    { NULL, "D", 0xa, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 6, 7, -1, -1, -1, -1 },
    { NULL, "[D", 0xa, 8, 9, -1, -1, -1, -1 },
    { NULL, "[D", 0xa, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 12, 13, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 16, 15, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 17, 18, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 21, 15, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(median);
  methods[2].selector = @selector(quartiles);
  methods[3].selector = @selector(percentiles);
  methods[4].selector = @selector(scale__WithInt:);
  methods[5].selector = @selector(containsNaNWithDoubleArray:);
  methods[6].selector = @selector(interpolateWithDouble:withDouble:withDouble:withDouble:);
  methods[7].selector = @selector(checkIndexWithInt:withInt:);
  methods[8].selector = @selector(longsToDoublesWithLongArray:);
  methods[9].selector = @selector(intsToDoublesWithIntArray:);
  methods[10].selector = @selector(selectInPlaceWithInt:withDoubleArray:withInt:withInt:);
  methods[11].selector = @selector(partitionWithDoubleArray:withInt:withInt:);
  methods[12].selector = @selector(movePivotToStartOfSliceWithDoubleArray:withInt:withInt:);
  methods[13].selector = @selector(selectAllInPlaceWithIntArray:withInt:withInt:withDoubleArray:withInt:withInt:);
  methods[14].selector = @selector(chooseNextSelectionWithIntArray:withInt:withInt:withInt:withInt:);
  methods[15].selector = @selector(swapWithDoubleArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "scale", "I", "containsNaN", "[D", "interpolate", "DDDD", "checkIndex", "II", "longsToDoubles", "[J", "intsToDoubles", "[I", "selectInPlace", "I[DII", "partition", "[DII", "movePivotToStartOfSlice", "selectAllInPlace", "[III[DII", "chooseNextSelection", "[IIIII", "swap", "LComGoogleCommonMathQuantiles_Scale;LComGoogleCommonMathQuantiles_ScaleAndIndex;LComGoogleCommonMathQuantiles_ScaleAndIndexes;" };
  static const J2ObjcClassInfo _ComGoogleCommonMathQuantiles = { "Quantiles", "com.google.common.math", ptrTable, methods, NULL, 7, 0x11, 16, 0, -1, 22, -1, -1, -1 };
  return &_ComGoogleCommonMathQuantiles;
}

@end

void ComGoogleCommonMathQuantiles_init(ComGoogleCommonMathQuantiles *self) {
  NSObject_init(self);
}

ComGoogleCommonMathQuantiles *new_ComGoogleCommonMathQuantiles_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonMathQuantiles, init)
}

ComGoogleCommonMathQuantiles *create_ComGoogleCommonMathQuantiles_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonMathQuantiles, init)
}

ComGoogleCommonMathQuantiles_ScaleAndIndex *ComGoogleCommonMathQuantiles_median() {
  ComGoogleCommonMathQuantiles_initialize();
  return [((ComGoogleCommonMathQuantiles_Scale *) nil_chk(ComGoogleCommonMathQuantiles_scale__WithInt_(2))) indexWithInt:1];
}

ComGoogleCommonMathQuantiles_Scale *ComGoogleCommonMathQuantiles_quartiles() {
  ComGoogleCommonMathQuantiles_initialize();
  return ComGoogleCommonMathQuantiles_scale__WithInt_(4);
}

ComGoogleCommonMathQuantiles_Scale *ComGoogleCommonMathQuantiles_percentiles() {
  ComGoogleCommonMathQuantiles_initialize();
  return ComGoogleCommonMathQuantiles_scale__WithInt_(100);
}

ComGoogleCommonMathQuantiles_Scale *ComGoogleCommonMathQuantiles_scale__WithInt_(jint scale_) {
  ComGoogleCommonMathQuantiles_initialize();
  return new_ComGoogleCommonMathQuantiles_Scale_initWithInt_(scale_);
}

jboolean ComGoogleCommonMathQuantiles_containsNaNWithDoubleArray_(IOSDoubleArray *dataset) {
  ComGoogleCommonMathQuantiles_initialize();
  {
    IOSDoubleArray *a__ = dataset;
    jdouble const *b__ = ((IOSDoubleArray *) nil_chk(a__))->buffer_;
    jdouble const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jdouble value = *b__++;
      if (JavaLangDouble_isNaNWithDouble_(value)) {
        return true;
      }
    }
  }
  return false;
}

jdouble ComGoogleCommonMathQuantiles_interpolateWithDouble_withDouble_withDouble_withDouble_(jdouble lower, jdouble upper, jdouble remainder, jdouble scale_) {
  ComGoogleCommonMathQuantiles_initialize();
  if (lower == JavaLangDouble_NEGATIVE_INFINITY) {
    if (upper == JavaLangDouble_POSITIVE_INFINITY) {
      return JavaLangDouble_NaN;
    }
    return JavaLangDouble_NEGATIVE_INFINITY;
  }
  if (upper == JavaLangDouble_POSITIVE_INFINITY) {
    return JavaLangDouble_POSITIVE_INFINITY;
  }
  return lower + (upper - lower) * remainder / scale_;
}

void ComGoogleCommonMathQuantiles_checkIndexWithInt_withInt_(jint index, jint scale_) {
  ComGoogleCommonMathQuantiles_initialize();
  if (index < 0 || index > scale_) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Quantile indexes must be between 0 and the scale, which is ", scale_));
  }
}

IOSDoubleArray *ComGoogleCommonMathQuantiles_longsToDoublesWithLongArray_(IOSLongArray *longs) {
  ComGoogleCommonMathQuantiles_initialize();
  jint len = ((IOSLongArray *) nil_chk(longs))->size_;
  IOSDoubleArray *doubles = [IOSDoubleArray newArrayWithLength:len];
  for (jint i = 0; i < len; i++) {
    *IOSDoubleArray_GetRef(doubles, i) = IOSLongArray_Get(longs, i);
  }
  return doubles;
}

IOSDoubleArray *ComGoogleCommonMathQuantiles_intsToDoublesWithIntArray_(IOSIntArray *ints) {
  ComGoogleCommonMathQuantiles_initialize();
  jint len = ((IOSIntArray *) nil_chk(ints))->size_;
  IOSDoubleArray *doubles = [IOSDoubleArray newArrayWithLength:len];
  for (jint i = 0; i < len; i++) {
    *IOSDoubleArray_GetRef(doubles, i) = IOSIntArray_Get(ints, i);
  }
  return doubles;
}

void ComGoogleCommonMathQuantiles_selectInPlaceWithInt_withDoubleArray_withInt_withInt_(jint required, IOSDoubleArray *array, jint from, jint to) {
  ComGoogleCommonMathQuantiles_initialize();
  if (required == from) {
    jint min = from;
    for (jint index = from + 1; index <= to; index++) {
      if (IOSDoubleArray_Get(nil_chk(array), min) > IOSDoubleArray_Get(array, index)) {
        min = index;
      }
    }
    if (min != from) {
      ComGoogleCommonMathQuantiles_swapWithDoubleArray_withInt_withInt_(array, min, from);
    }
    return;
  }
  while (to > from) {
    jint partitionPoint = ComGoogleCommonMathQuantiles_partitionWithDoubleArray_withInt_withInt_(array, from, to);
    if (partitionPoint >= required) {
      to = partitionPoint - 1;
    }
    if (partitionPoint <= required) {
      from = partitionPoint + 1;
    }
  }
}

jint ComGoogleCommonMathQuantiles_partitionWithDoubleArray_withInt_withInt_(IOSDoubleArray *array, jint from, jint to) {
  ComGoogleCommonMathQuantiles_initialize();
  ComGoogleCommonMathQuantiles_movePivotToStartOfSliceWithDoubleArray_withInt_withInt_(array, from, to);
  jdouble pivot = IOSDoubleArray_Get(nil_chk(array), from);
  jint partitionPoint = to;
  for (jint i = to; i > from; i--) {
    if (IOSDoubleArray_Get(array, i) > pivot) {
      ComGoogleCommonMathQuantiles_swapWithDoubleArray_withInt_withInt_(array, partitionPoint, i);
      partitionPoint--;
    }
  }
  ComGoogleCommonMathQuantiles_swapWithDoubleArray_withInt_withInt_(array, from, partitionPoint);
  return partitionPoint;
}

void ComGoogleCommonMathQuantiles_movePivotToStartOfSliceWithDoubleArray_withInt_withInt_(IOSDoubleArray *array, jint from, jint to) {
  ComGoogleCommonMathQuantiles_initialize();
  jint mid = JreURShift32((from + to), 1);
  jboolean toLessThanMid = (IOSDoubleArray_Get(nil_chk(array), to) < IOSDoubleArray_Get(array, mid));
  jboolean midLessThanFrom = (IOSDoubleArray_Get(array, mid) < IOSDoubleArray_Get(array, from));
  jboolean toLessThanFrom = (IOSDoubleArray_Get(array, to) < IOSDoubleArray_Get(array, from));
  if (toLessThanMid == midLessThanFrom) {
    ComGoogleCommonMathQuantiles_swapWithDoubleArray_withInt_withInt_(array, mid, from);
  }
  else if (toLessThanMid != toLessThanFrom) {
    ComGoogleCommonMathQuantiles_swapWithDoubleArray_withInt_withInt_(array, from, to);
  }
}

void ComGoogleCommonMathQuantiles_selectAllInPlaceWithIntArray_withInt_withInt_withDoubleArray_withInt_withInt_(IOSIntArray *allRequired, jint requiredFrom, jint requiredTo, IOSDoubleArray *array, jint from, jint to) {
  ComGoogleCommonMathQuantiles_initialize();
  jint requiredChosen = ComGoogleCommonMathQuantiles_chooseNextSelectionWithIntArray_withInt_withInt_withInt_withInt_(allRequired, requiredFrom, requiredTo, from, to);
  jint required = IOSIntArray_Get(nil_chk(allRequired), requiredChosen);
  ComGoogleCommonMathQuantiles_selectInPlaceWithInt_withDoubleArray_withInt_withInt_(required, array, from, to);
  jint requiredBelow = requiredChosen - 1;
  while (requiredBelow >= requiredFrom && IOSIntArray_Get(allRequired, requiredBelow) == required) {
    requiredBelow--;
  }
  if (requiredBelow >= requiredFrom) {
    ComGoogleCommonMathQuantiles_selectAllInPlaceWithIntArray_withInt_withInt_withDoubleArray_withInt_withInt_(allRequired, requiredFrom, requiredBelow, array, from, required - 1);
  }
  jint requiredAbove = requiredChosen + 1;
  while (requiredAbove <= requiredTo && IOSIntArray_Get(allRequired, requiredAbove) == required) {
    requiredAbove++;
  }
  if (requiredAbove <= requiredTo) {
    ComGoogleCommonMathQuantiles_selectAllInPlaceWithIntArray_withInt_withInt_withDoubleArray_withInt_withInt_(allRequired, requiredAbove, requiredTo, array, required + 1, to);
  }
}

jint ComGoogleCommonMathQuantiles_chooseNextSelectionWithIntArray_withInt_withInt_withInt_withInt_(IOSIntArray *allRequired, jint requiredFrom, jint requiredTo, jint from, jint to) {
  ComGoogleCommonMathQuantiles_initialize();
  if (requiredFrom == requiredTo) {
    return requiredFrom;
  }
  jint centerFloor = JreURShift32((from + to), 1);
  jint low = requiredFrom;
  jint high = requiredTo;
  while (high > low + 1) {
    jint mid = JreURShift32((low + high), 1);
    if (IOSIntArray_Get(nil_chk(allRequired), mid) > centerFloor) {
      high = mid;
    }
    else if (IOSIntArray_Get(allRequired, mid) < centerFloor) {
      low = mid;
    }
    else {
      return mid;
    }
  }
  if (from + to - IOSIntArray_Get(nil_chk(allRequired), low) - IOSIntArray_Get(allRequired, high) > 0) {
    return high;
  }
  else {
    return low;
  }
}

void ComGoogleCommonMathQuantiles_swapWithDoubleArray_withInt_withInt_(IOSDoubleArray *array, jint i, jint j) {
  ComGoogleCommonMathQuantiles_initialize();
  jdouble temp = IOSDoubleArray_Get(nil_chk(array), i);
  *IOSDoubleArray_GetRef(array, i) = IOSDoubleArray_Get(array, j);
  *IOSDoubleArray_GetRef(array, j) = temp;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonMathQuantiles)

@implementation ComGoogleCommonMathQuantiles_Scale

- (instancetype)initWithInt:(jint)scale_ {
  ComGoogleCommonMathQuantiles_Scale_initWithInt_(self, scale_);
  return self;
}

- (ComGoogleCommonMathQuantiles_ScaleAndIndex *)indexWithInt:(jint)index {
  return new_ComGoogleCommonMathQuantiles_ScaleAndIndex_initWithInt_withInt_(scale__, index);
}

- (ComGoogleCommonMathQuantiles_ScaleAndIndexes *)indexesWithIntArray:(IOSIntArray *)indexes {
  return new_ComGoogleCommonMathQuantiles_ScaleAndIndexes_initWithInt_withIntArray_(scale__, [((IOSIntArray *) nil_chk(indexes)) java_clone]);
}

- (ComGoogleCommonMathQuantiles_ScaleAndIndexes *)indexesWithJavaUtilCollection:(id<JavaUtilCollection>)indexes {
  return new_ComGoogleCommonMathQuantiles_ScaleAndIndexes_initWithInt_withIntArray_(scale__, ComGoogleCommonPrimitivesInts_toArrayWithJavaUtilCollection_(indexes));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonMathQuantiles_ScaleAndIndex;", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonMathQuantiles_ScaleAndIndexes;", 0x81, 2, 3, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonMathQuantiles_ScaleAndIndexes;", 0x1, 2, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(indexWithInt:);
  methods[2].selector = @selector(indexesWithIntArray:);
  methods[3].selector = @selector(indexesWithJavaUtilCollection:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "scale__", "I", .constantValue.asLong = 0, 0x12, 6, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "index", "indexes", "[I", "LJavaUtilCollection;", "(Ljava/util/Collection<Ljava/lang/Integer;>;)Lcom/google/common/math/Quantiles$ScaleAndIndexes;", "scale", "LComGoogleCommonMathQuantiles;" };
  static const J2ObjcClassInfo _ComGoogleCommonMathQuantiles_Scale = { "Scale", "com.google.common.math", ptrTable, methods, fields, 7, 0x19, 4, 1, 7, -1, -1, -1, -1 };
  return &_ComGoogleCommonMathQuantiles_Scale;
}

@end

void ComGoogleCommonMathQuantiles_Scale_initWithInt_(ComGoogleCommonMathQuantiles_Scale *self, jint scale_) {
  NSObject_init(self);
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withId_(scale_ > 0, @"Quantile scale must be positive");
  self->scale__ = scale_;
}

ComGoogleCommonMathQuantiles_Scale *new_ComGoogleCommonMathQuantiles_Scale_initWithInt_(jint scale_) {
  J2OBJC_NEW_IMPL(ComGoogleCommonMathQuantiles_Scale, initWithInt_, scale_)
}

ComGoogleCommonMathQuantiles_Scale *create_ComGoogleCommonMathQuantiles_Scale_initWithInt_(jint scale_) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonMathQuantiles_Scale, initWithInt_, scale_)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonMathQuantiles_Scale)

@implementation ComGoogleCommonMathQuantiles_ScaleAndIndex

- (instancetype)initWithInt:(jint)scale_
                    withInt:(jint)index {
  ComGoogleCommonMathQuantiles_ScaleAndIndex_initWithInt_withInt_(self, scale_, index);
  return self;
}

- (jdouble)computeWithJavaUtilCollection:(id<JavaUtilCollection>)dataset {
  return [self computeInPlaceWithDoubleArray:ComGoogleCommonPrimitivesDoubles_toArrayWithJavaUtilCollection_(dataset)];
}

- (jdouble)computeWithDoubleArray:(IOSDoubleArray *)dataset {
  return [self computeInPlaceWithDoubleArray:[((IOSDoubleArray *) nil_chk(dataset)) java_clone]];
}

- (jdouble)computeWithLongArray:(IOSLongArray *)dataset {
  return [self computeInPlaceWithDoubleArray:ComGoogleCommonMathQuantiles_longsToDoublesWithLongArray_(dataset)];
}

- (jdouble)computeWithIntArray:(IOSIntArray *)dataset {
  return [self computeInPlaceWithDoubleArray:ComGoogleCommonMathQuantiles_intsToDoublesWithIntArray_(dataset)];
}

- (jdouble)computeInPlaceWithDoubleArray:(IOSDoubleArray *)dataset {
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withId_(((IOSDoubleArray *) nil_chk(dataset))->size_ > 0, @"Cannot calculate quantiles of an empty dataset");
  if (ComGoogleCommonMathQuantiles_containsNaNWithDoubleArray_(dataset)) {
    return JavaLangDouble_NaN;
  }
  jlong numerator = (jlong) index_ * (dataset->size_ - 1);
  jint quotient = (jint) ComGoogleCommonMathLongMath_divideWithLong_withLong_withJavaMathRoundingMode_(numerator, scale__, JreLoadEnum(JavaMathRoundingMode, DOWN));
  jint remainder = (jint) (numerator - (jlong) quotient * scale__);
  ComGoogleCommonMathQuantiles_selectInPlaceWithInt_withDoubleArray_withInt_withInt_(quotient, dataset, 0, dataset->size_ - 1);
  if (remainder == 0) {
    return IOSDoubleArray_Get(dataset, quotient);
  }
  else {
    ComGoogleCommonMathQuantiles_selectInPlaceWithInt_withDoubleArray_withInt_withInt_(quotient + 1, dataset, quotient + 1, dataset->size_ - 1);
    return ComGoogleCommonMathQuantiles_interpolateWithDouble_withDouble_withDouble_withDouble_(IOSDoubleArray_Get(dataset, quotient), IOSDoubleArray_Get(dataset, quotient + 1), remainder, scale__);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "D", 0x81, 1, 4, -1, -1, -1, -1 },
    { NULL, "D", 0x81, 1, 5, -1, -1, -1, -1 },
    { NULL, "D", 0x81, 1, 6, -1, -1, -1, -1 },
    { NULL, "D", 0x81, 7, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(computeWithJavaUtilCollection:);
  methods[2].selector = @selector(computeWithDoubleArray:);
  methods[3].selector = @selector(computeWithLongArray:);
  methods[4].selector = @selector(computeWithIntArray:);
  methods[5].selector = @selector(computeInPlaceWithDoubleArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "scale__", "I", .constantValue.asLong = 0, 0x12, 8, -1, -1, -1 },
    { "index_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "compute", "LJavaUtilCollection;", "(Ljava/util/Collection<+Ljava/lang/Number;>;)D", "[D", "[J", "[I", "computeInPlace", "scale", "LComGoogleCommonMathQuantiles;" };
  static const J2ObjcClassInfo _ComGoogleCommonMathQuantiles_ScaleAndIndex = { "ScaleAndIndex", "com.google.common.math", ptrTable, methods, fields, 7, 0x19, 6, 2, 9, -1, -1, -1, -1 };
  return &_ComGoogleCommonMathQuantiles_ScaleAndIndex;
}

@end

void ComGoogleCommonMathQuantiles_ScaleAndIndex_initWithInt_withInt_(ComGoogleCommonMathQuantiles_ScaleAndIndex *self, jint scale_, jint index) {
  NSObject_init(self);
  ComGoogleCommonMathQuantiles_checkIndexWithInt_withInt_(index, scale_);
  self->scale__ = scale_;
  self->index_ = index;
}

ComGoogleCommonMathQuantiles_ScaleAndIndex *new_ComGoogleCommonMathQuantiles_ScaleAndIndex_initWithInt_withInt_(jint scale_, jint index) {
  J2OBJC_NEW_IMPL(ComGoogleCommonMathQuantiles_ScaleAndIndex, initWithInt_withInt_, scale_, index)
}

ComGoogleCommonMathQuantiles_ScaleAndIndex *create_ComGoogleCommonMathQuantiles_ScaleAndIndex_initWithInt_withInt_(jint scale_, jint index) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonMathQuantiles_ScaleAndIndex, initWithInt_withInt_, scale_, index)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonMathQuantiles_ScaleAndIndex)

@implementation ComGoogleCommonMathQuantiles_ScaleAndIndexes

- (instancetype)initWithInt:(jint)scale_
               withIntArray:(IOSIntArray *)indexes {
  ComGoogleCommonMathQuantiles_ScaleAndIndexes_initWithInt_withIntArray_(self, scale_, indexes);
  return self;
}

- (id<JavaUtilMap>)computeWithJavaUtilCollection:(id<JavaUtilCollection>)dataset {
  return [self computeInPlaceWithDoubleArray:ComGoogleCommonPrimitivesDoubles_toArrayWithJavaUtilCollection_(dataset)];
}

- (id<JavaUtilMap>)computeWithDoubleArray:(IOSDoubleArray *)dataset {
  return [self computeInPlaceWithDoubleArray:[((IOSDoubleArray *) nil_chk(dataset)) java_clone]];
}

- (id<JavaUtilMap>)computeWithLongArray:(IOSLongArray *)dataset {
  return [self computeInPlaceWithDoubleArray:ComGoogleCommonMathQuantiles_longsToDoublesWithLongArray_(dataset)];
}

- (id<JavaUtilMap>)computeWithIntArray:(IOSIntArray *)dataset {
  return [self computeInPlaceWithDoubleArray:ComGoogleCommonMathQuantiles_intsToDoublesWithIntArray_(dataset)];
}

- (id<JavaUtilMap>)computeInPlaceWithDoubleArray:(IOSDoubleArray *)dataset {
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withId_(((IOSDoubleArray *) nil_chk(dataset))->size_ > 0, @"Cannot calculate quantiles of an empty dataset");
  if (ComGoogleCommonMathQuantiles_containsNaNWithDoubleArray_(dataset)) {
    id<JavaUtilMap> nanMap = new_JavaUtilHashMap_init();
    {
      IOSIntArray *a__ = indexes_;
      jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
      jint const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        jint index = *b__++;
        (void) [nanMap putWithId:JavaLangInteger_valueOfWithInt_(index) withId:JavaLangDouble_valueOfWithDouble_(JavaLangDouble_NaN)];
      }
    }
    return JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(nanMap);
  }
  IOSIntArray *quotients = [IOSIntArray newArrayWithLength:((IOSIntArray *) nil_chk(indexes_))->size_];
  IOSIntArray *remainders = [IOSIntArray newArrayWithLength:indexes_->size_];
  IOSIntArray *requiredSelections = [IOSIntArray newArrayWithLength:indexes_->size_ * 2];
  jint requiredSelectionsCount = 0;
  for (jint i = 0; i < indexes_->size_; i++) {
    jlong numerator = (jlong) IOSIntArray_Get(indexes_, i) * (dataset->size_ - 1);
    jint quotient = (jint) ComGoogleCommonMathLongMath_divideWithLong_withLong_withJavaMathRoundingMode_(numerator, scale__, JreLoadEnum(JavaMathRoundingMode, DOWN));
    jint remainder = (jint) (numerator - (jlong) quotient * scale__);
    *IOSIntArray_GetRef(quotients, i) = quotient;
    *IOSIntArray_GetRef(remainders, i) = remainder;
    *IOSIntArray_GetRef(requiredSelections, requiredSelectionsCount) = quotient;
    requiredSelectionsCount++;
    if (remainder != 0) {
      *IOSIntArray_GetRef(requiredSelections, requiredSelectionsCount) = quotient + 1;
      requiredSelectionsCount++;
    }
  }
  JavaUtilArrays_sortWithIntArray_withInt_withInt_(requiredSelections, 0, requiredSelectionsCount);
  ComGoogleCommonMathQuantiles_selectAllInPlaceWithIntArray_withInt_withInt_withDoubleArray_withInt_withInt_(requiredSelections, 0, requiredSelectionsCount - 1, dataset, 0, dataset->size_ - 1);
  id<JavaUtilMap> ret = new_JavaUtilHashMap_init();
  for (jint i = 0; i < indexes_->size_; i++) {
    jint quotient = IOSIntArray_Get(quotients, i);
    jint remainder = IOSIntArray_Get(remainders, i);
    if (remainder == 0) {
      (void) [ret putWithId:JavaLangInteger_valueOfWithInt_(IOSIntArray_Get(indexes_, i)) withId:JavaLangDouble_valueOfWithDouble_(IOSDoubleArray_Get(dataset, quotient))];
    }
    else {
      (void) [ret putWithId:JavaLangInteger_valueOfWithInt_(IOSIntArray_Get(indexes_, i)) withId:JavaLangDouble_valueOfWithDouble_(ComGoogleCommonMathQuantiles_interpolateWithDouble_withDouble_withDouble_withDouble_(IOSDoubleArray_Get(dataset, quotient), IOSDoubleArray_Get(dataset, quotient + 1), remainder, scale__))];
    }
  }
  return JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(ret);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x81, 1, 4, -1, 5, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x81, 1, 6, -1, 7, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x81, 1, 8, -1, 9, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x81, 10, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withIntArray:);
  methods[1].selector = @selector(computeWithJavaUtilCollection:);
  methods[2].selector = @selector(computeWithDoubleArray:);
  methods[3].selector = @selector(computeWithLongArray:);
  methods[4].selector = @selector(computeWithIntArray:);
  methods[5].selector = @selector(computeInPlaceWithDoubleArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "scale__", "I", .constantValue.asLong = 0, 0x12, 11, -1, -1, -1 },
    { "indexes_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I[I", "compute", "LJavaUtilCollection;", "(Ljava/util/Collection<+Ljava/lang/Number;>;)Ljava/util/Map<Ljava/lang/Integer;Ljava/lang/Double;>;", "[D", "([D)Ljava/util/Map<Ljava/lang/Integer;Ljava/lang/Double;>;", "[J", "([J)Ljava/util/Map<Ljava/lang/Integer;Ljava/lang/Double;>;", "[I", "([I)Ljava/util/Map<Ljava/lang/Integer;Ljava/lang/Double;>;", "computeInPlace", "scale", "LComGoogleCommonMathQuantiles;" };
  static const J2ObjcClassInfo _ComGoogleCommonMathQuantiles_ScaleAndIndexes = { "ScaleAndIndexes", "com.google.common.math", ptrTable, methods, fields, 7, 0x19, 6, 2, 12, -1, -1, -1, -1 };
  return &_ComGoogleCommonMathQuantiles_ScaleAndIndexes;
}

@end

void ComGoogleCommonMathQuantiles_ScaleAndIndexes_initWithInt_withIntArray_(ComGoogleCommonMathQuantiles_ScaleAndIndexes *self, jint scale_, IOSIntArray *indexes) {
  NSObject_init(self);
  {
    IOSIntArray *a__ = indexes;
    jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint index = *b__++;
      ComGoogleCommonMathQuantiles_checkIndexWithInt_withInt_(index, scale_);
    }
  }
  self->scale__ = scale_;
  self->indexes_ = indexes;
}

ComGoogleCommonMathQuantiles_ScaleAndIndexes *new_ComGoogleCommonMathQuantiles_ScaleAndIndexes_initWithInt_withIntArray_(jint scale_, IOSIntArray *indexes) {
  J2OBJC_NEW_IMPL(ComGoogleCommonMathQuantiles_ScaleAndIndexes, initWithInt_withIntArray_, scale_, indexes)
}

ComGoogleCommonMathQuantiles_ScaleAndIndexes *create_ComGoogleCommonMathQuantiles_ScaleAndIndexes_initWithInt_withIntArray_(jint scale_, IOSIntArray *indexes) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonMathQuantiles_ScaleAndIndexes, initWithInt_withIntArray_, scale_, indexes)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonMathQuantiles_ScaleAndIndexes)
