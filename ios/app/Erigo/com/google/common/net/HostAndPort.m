//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/net/HostAndPort.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Objects.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/base/Strings.h"
#include "com/google/common/net/HostAndPort.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/annotation/Annotation.h"
#include "javax/annotation/Nullable.h"

@interface ComGoogleCommonNetHostAndPort () {
 @public
  NSString *host_;
  jint port_;
  jboolean hasBracketlessColons_;
}

- (instancetype)initWithNSString:(NSString *)host
                         withInt:(jint)port
                     withBoolean:(jboolean)hasBracketlessColons;

+ (IOSObjectArray *)getHostAndPortFromBracketedHostWithNSString:(NSString *)hostPortString;

+ (jboolean)isValidPortWithInt:(jint)port;

@end

J2OBJC_FIELD_SETTER(ComGoogleCommonNetHostAndPort, host_, NSString *)

inline jint ComGoogleCommonNetHostAndPort_get_NO_PORT();
#define ComGoogleCommonNetHostAndPort_NO_PORT -1
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonNetHostAndPort, NO_PORT, jint)

inline jlong ComGoogleCommonNetHostAndPort_get_serialVersionUID();
#define ComGoogleCommonNetHostAndPort_serialVersionUID 0LL
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonNetHostAndPort, serialVersionUID, jlong)

__attribute__((unused)) static void ComGoogleCommonNetHostAndPort_initWithNSString_withInt_withBoolean_(ComGoogleCommonNetHostAndPort *self, NSString *host, jint port, jboolean hasBracketlessColons);

__attribute__((unused)) static ComGoogleCommonNetHostAndPort *new_ComGoogleCommonNetHostAndPort_initWithNSString_withInt_withBoolean_(NSString *host, jint port, jboolean hasBracketlessColons) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonNetHostAndPort *create_ComGoogleCommonNetHostAndPort_initWithNSString_withInt_withBoolean_(NSString *host, jint port, jboolean hasBracketlessColons);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonNetHostAndPort_getHostAndPortFromBracketedHostWithNSString_(NSString *hostPortString);

__attribute__((unused)) static jboolean ComGoogleCommonNetHostAndPort_isValidPortWithInt_(jint port);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonNetHostAndPort__Annotations$0();

@implementation ComGoogleCommonNetHostAndPort

- (instancetype)initWithNSString:(NSString *)host
                         withInt:(jint)port
                     withBoolean:(jboolean)hasBracketlessColons {
  ComGoogleCommonNetHostAndPort_initWithNSString_withInt_withBoolean_(self, host, port, hasBracketlessColons);
  return self;
}

- (NSString *)getHost {
  return host_;
}

- (jboolean)hasPort {
  return port_ >= 0;
}

- (jint)getPort {
  ComGoogleCommonBasePreconditions_checkStateWithBoolean_([self hasPort]);
  return port_;
}

- (jint)getPortOrDefaultWithInt:(jint)defaultPort {
  return [self hasPort] ? port_ : defaultPort;
}

+ (ComGoogleCommonNetHostAndPort *)fromPartsWithNSString:(NSString *)host
                                                 withInt:(jint)port {
  return ComGoogleCommonNetHostAndPort_fromPartsWithNSString_withInt_(host, port);
}

+ (ComGoogleCommonNetHostAndPort *)fromHostWithNSString:(NSString *)host {
  return ComGoogleCommonNetHostAndPort_fromHostWithNSString_(host);
}

+ (ComGoogleCommonNetHostAndPort *)fromStringWithNSString:(NSString *)hostPortString {
  return ComGoogleCommonNetHostAndPort_fromStringWithNSString_(hostPortString);
}

+ (IOSObjectArray *)getHostAndPortFromBracketedHostWithNSString:(NSString *)hostPortString {
  return ComGoogleCommonNetHostAndPort_getHostAndPortFromBracketedHostWithNSString_(hostPortString);
}

- (ComGoogleCommonNetHostAndPort *)withDefaultPortWithInt:(jint)defaultPort {
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_(ComGoogleCommonNetHostAndPort_isValidPortWithInt_(defaultPort));
  if ([self hasPort] || port_ == defaultPort) {
    return self;
  }
  return new_ComGoogleCommonNetHostAndPort_initWithNSString_withInt_withBoolean_(host_, defaultPort, hasBracketlessColons_);
}

- (ComGoogleCommonNetHostAndPort *)requireBracketsForIPv6 {
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_(!hasBracketlessColons_, @"Possible bracketless IPv6 literal: %s", host_);
  return self;
}

- (jboolean)isEqual:(id)other {
  if (self == other) {
    return true;
  }
  if ([other isKindOfClass:[ComGoogleCommonNetHostAndPort class]]) {
    ComGoogleCommonNetHostAndPort *that = (ComGoogleCommonNetHostAndPort *) cast_chk(other, [ComGoogleCommonNetHostAndPort class]);
    return ComGoogleCommonBaseObjects_equalWithId_withId_(self->host_, ((ComGoogleCommonNetHostAndPort *) nil_chk(that))->host_) && self->port_ == that->port_ && self->hasBracketlessColons_ == that->hasBracketlessColons_;
  }
  return false;
}

- (NSUInteger)hash {
  return ComGoogleCommonBaseObjects_hashCodeWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ host_, JavaLangInteger_valueOfWithInt_(port_), JavaLangBoolean_valueOfWithBoolean_(hasBracketlessColons_) } count:3 type:NSObject_class_()]);
}

- (NSString *)description {
  JavaLangStringBuilder *builder = new_JavaLangStringBuilder_initWithInt_([((NSString *) nil_chk(host_)) java_length] + 8);
  if ([host_ java_indexOf:':'] >= 0) {
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([builder appendWithChar:'['])) appendWithNSString:host_])) appendWithChar:']'];
  }
  else {
    (void) [builder appendWithNSString:host_];
  }
  if ([self hasPort]) {
    (void) [((JavaLangStringBuilder *) nil_chk([builder appendWithChar:':'])) appendWithInt:port_];
  }
  return [builder description];
}

+ (jboolean)isValidPortWithInt:(jint)port {
  return ComGoogleCommonNetHostAndPort_isValidPortWithInt_(port);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonNetHostAndPort;", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonNetHostAndPort;", 0x9, 5, 6, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonNetHostAndPort;", 0x9, 7, 6, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0xa, 8, 6, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonNetHostAndPort;", 0x1, 9, 2, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonNetHostAndPort;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 10, 11, -1, -1, -1, 12 },
    { NULL, "I", 0x1, 13, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 14, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 15, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withInt:withBoolean:);
  methods[1].selector = @selector(getHost);
  methods[2].selector = @selector(hasPort);
  methods[3].selector = @selector(getPort);
  methods[4].selector = @selector(getPortOrDefaultWithInt:);
  methods[5].selector = @selector(fromPartsWithNSString:withInt:);
  methods[6].selector = @selector(fromHostWithNSString:);
  methods[7].selector = @selector(fromStringWithNSString:);
  methods[8].selector = @selector(getHostAndPortFromBracketedHostWithNSString:);
  methods[9].selector = @selector(withDefaultPortWithInt:);
  methods[10].selector = @selector(requireBracketsForIPv6);
  methods[11].selector = @selector(isEqual:);
  methods[12].selector = @selector(hash);
  methods[13].selector = @selector(description);
  methods[14].selector = @selector(isValidPortWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NO_PORT", "I", .constantValue.asInt = ComGoogleCommonNetHostAndPort_NO_PORT, 0x1a, -1, -1, -1, -1 },
    { "host_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "port_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "hasBracketlessColons_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = ComGoogleCommonNetHostAndPort_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;IZ", "getPortOrDefault", "I", "fromParts", "LNSString;I", "fromHost", "LNSString;", "fromString", "getHostAndPortFromBracketedHost", "withDefaultPort", "equals", "LNSObject;", (void *)&ComGoogleCommonNetHostAndPort__Annotations$0, "hashCode", "toString", "isValidPort" };
  static const J2ObjcClassInfo _ComGoogleCommonNetHostAndPort = { "HostAndPort", "com.google.common.net", ptrTable, methods, fields, 7, 0x11, 15, 5, -1, -1, -1, -1, -1 };
  return &_ComGoogleCommonNetHostAndPort;
}

@end

void ComGoogleCommonNetHostAndPort_initWithNSString_withInt_withBoolean_(ComGoogleCommonNetHostAndPort *self, NSString *host, jint port, jboolean hasBracketlessColons) {
  NSObject_init(self);
  self->host_ = host;
  self->port_ = port;
  self->hasBracketlessColons_ = hasBracketlessColons;
}

ComGoogleCommonNetHostAndPort *new_ComGoogleCommonNetHostAndPort_initWithNSString_withInt_withBoolean_(NSString *host, jint port, jboolean hasBracketlessColons) {
  J2OBJC_NEW_IMPL(ComGoogleCommonNetHostAndPort, initWithNSString_withInt_withBoolean_, host, port, hasBracketlessColons)
}

ComGoogleCommonNetHostAndPort *create_ComGoogleCommonNetHostAndPort_initWithNSString_withInt_withBoolean_(NSString *host, jint port, jboolean hasBracketlessColons) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonNetHostAndPort, initWithNSString_withInt_withBoolean_, host, port, hasBracketlessColons)
}

ComGoogleCommonNetHostAndPort *ComGoogleCommonNetHostAndPort_fromPartsWithNSString_withInt_(NSString *host, jint port) {
  ComGoogleCommonNetHostAndPort_initialize();
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withInt_(ComGoogleCommonNetHostAndPort_isValidPortWithInt_(port), @"Port out of range: %s", port);
  ComGoogleCommonNetHostAndPort *parsedHost = ComGoogleCommonNetHostAndPort_fromStringWithNSString_(host);
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_(![((ComGoogleCommonNetHostAndPort *) nil_chk(parsedHost)) hasPort], @"Host has a port: %s", host);
  return new_ComGoogleCommonNetHostAndPort_initWithNSString_withInt_withBoolean_(parsedHost->host_, port, parsedHost->hasBracketlessColons_);
}

ComGoogleCommonNetHostAndPort *ComGoogleCommonNetHostAndPort_fromHostWithNSString_(NSString *host) {
  ComGoogleCommonNetHostAndPort_initialize();
  ComGoogleCommonNetHostAndPort *parsedHost = ComGoogleCommonNetHostAndPort_fromStringWithNSString_(host);
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_(![((ComGoogleCommonNetHostAndPort *) nil_chk(parsedHost)) hasPort], @"Host has a port: %s", host);
  return parsedHost;
}

ComGoogleCommonNetHostAndPort *ComGoogleCommonNetHostAndPort_fromStringWithNSString_(NSString *hostPortString) {
  ComGoogleCommonNetHostAndPort_initialize();
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(hostPortString);
  NSString *host;
  NSString *portString = nil;
  jboolean hasBracketlessColons = false;
  if ([((NSString *) nil_chk(hostPortString)) java_hasPrefix:@"["]) {
    IOSObjectArray *hostAndPort = ComGoogleCommonNetHostAndPort_getHostAndPortFromBracketedHostWithNSString_(hostPortString);
    host = IOSObjectArray_Get(nil_chk(hostAndPort), 0);
    portString = IOSObjectArray_Get(hostAndPort, 1);
  }
  else {
    jint colonPos = [hostPortString java_indexOf:':'];
    if (colonPos >= 0 && [hostPortString java_indexOf:':' fromIndex:colonPos + 1] == -1) {
      host = [hostPortString java_substring:0 endIndex:colonPos];
      portString = [hostPortString java_substring:colonPos + 1];
    }
    else {
      host = hostPortString;
      hasBracketlessColons = (colonPos >= 0);
    }
  }
  jint port = ComGoogleCommonNetHostAndPort_NO_PORT;
  if (!ComGoogleCommonBaseStrings_isNullOrEmptyWithNSString_(portString)) {
    ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_(![((NSString *) nil_chk(portString)) java_hasPrefix:@"+"], @"Unparseable port number: %s", hostPortString);
    @try {
      port = JavaLangInteger_parseIntWithNSString_(portString);
    }
    @catch (JavaLangNumberFormatException *e) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Unparseable port number: ", hostPortString));
    }
    ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_(ComGoogleCommonNetHostAndPort_isValidPortWithInt_(port), @"Port number out of range: %s", hostPortString);
  }
  return new_ComGoogleCommonNetHostAndPort_initWithNSString_withInt_withBoolean_(host, port, hasBracketlessColons);
}

IOSObjectArray *ComGoogleCommonNetHostAndPort_getHostAndPortFromBracketedHostWithNSString_(NSString *hostPortString) {
  ComGoogleCommonNetHostAndPort_initialize();
  jint colonIndex = 0;
  jint closeBracketIndex = 0;
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_([((NSString *) nil_chk(hostPortString)) charAtWithInt:0] == '[', @"Bracketed host-port string must start with a bracket: %s", hostPortString);
  colonIndex = [hostPortString java_indexOf:':'];
  closeBracketIndex = [hostPortString java_lastIndexOf:']'];
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_(colonIndex > -1 && closeBracketIndex > colonIndex, @"Invalid bracketed host/port: %s", hostPortString);
  NSString *host = [hostPortString java_substring:1 endIndex:closeBracketIndex];
  if (closeBracketIndex + 1 == [hostPortString java_length]) {
    return [IOSObjectArray newArrayWithObjects:(id[]){ host, @"" } count:2 type:NSString_class_()];
  }
  else {
    ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_([hostPortString charAtWithInt:closeBracketIndex + 1] == ':', @"Only a colon may follow a close bracket: %s", hostPortString);
    for (jint i = closeBracketIndex + 2; i < [hostPortString java_length]; ++i) {
      ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_(JavaLangCharacter_isDigitWithChar_([hostPortString charAtWithInt:i]), @"Port must be numeric: %s", hostPortString);
    }
    return [IOSObjectArray newArrayWithObjects:(id[]){ host, [hostPortString java_substring:closeBracketIndex + 2] } count:2 type:NSString_class_()];
  }
}

jboolean ComGoogleCommonNetHostAndPort_isValidPortWithInt_(jint port) {
  ComGoogleCommonNetHostAndPort_initialize();
  return port >= 0 && port <= 65535;
}

IOSObjectArray *ComGoogleCommonNetHostAndPort__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonNetHostAndPort)
