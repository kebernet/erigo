//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/net/InetAddresses.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/MoreObjects.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/base/Splitter.h"
#include "com/google/common/hash/HashCode.h"
#include "com/google/common/hash/HashFunction.h"
#include "com/google/common/hash/Hashing.h"
#include "com/google/common/io/ByteArrayDataInput.h"
#include "com/google/common/io/ByteStreams.h"
#include "com/google/common/net/InetAddresses.h"
#include "com/google/common/primitives/Ints.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Character.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Iterable.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/annotation/Annotation.h"
#include "java/net/Inet4Address.h"
#include "java/net/Inet6Address.h"
#include "java/net/InetAddress.h"
#include "java/net/UnknownHostException.h"
#include "java/nio/ByteBuffer.h"
#include "java/util/Arrays.h"
#include "java/util/Locale.h"
#include "javax/annotation/Nullable.h"

@interface ComGoogleCommonNetInetAddresses ()

- (instancetype)init;

+ (JavaNetInet4Address *)getInet4AddressWithByteArray:(IOSByteArray *)bytes;

+ (IOSByteArray *)ipStringToBytesWithNSString:(NSString *)ipString;

+ (IOSByteArray *)textToNumericFormatV4WithNSString:(NSString *)ipString;

+ (IOSByteArray *)textToNumericFormatV6WithNSString:(NSString *)ipString;

+ (NSString *)convertDottedQuadToHexWithNSString:(NSString *)ipString;

+ (jbyte)parseOctetWithNSString:(NSString *)ipPart;

+ (jshort)parseHextetWithNSString:(NSString *)ipPart;

+ (JavaNetInetAddress *)bytesToInetAddressWithByteArray:(IOSByteArray *)addr;

+ (void)compressLongestRunOfZeroesWithIntArray:(IOSIntArray *)hextets;

+ (NSString *)hextetsToIPv6StringWithIntArray:(IOSIntArray *)hextets;

+ (JavaNetInetAddress *)forUriStringNoThrowWithNSString:(NSString *)hostAddr;

+ (JavaLangIllegalArgumentException *)formatIllegalArgumentExceptionWithNSString:(NSString *)format
                                                               withNSObjectArray:(IOSObjectArray *)args;

@end

inline jint ComGoogleCommonNetInetAddresses_get_IPV4_PART_COUNT();
#define ComGoogleCommonNetInetAddresses_IPV4_PART_COUNT 4
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonNetInetAddresses, IPV4_PART_COUNT, jint)

inline jint ComGoogleCommonNetInetAddresses_get_IPV6_PART_COUNT();
#define ComGoogleCommonNetInetAddresses_IPV6_PART_COUNT 8
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonNetInetAddresses, IPV6_PART_COUNT, jint)

inline ComGoogleCommonBaseSplitter *ComGoogleCommonNetInetAddresses_get_IPV4_SPLITTER();
static ComGoogleCommonBaseSplitter *ComGoogleCommonNetInetAddresses_IPV4_SPLITTER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonNetInetAddresses, IPV4_SPLITTER, ComGoogleCommonBaseSplitter *)

inline JavaNetInet4Address *ComGoogleCommonNetInetAddresses_get_LOOPBACK4();
static JavaNetInet4Address *ComGoogleCommonNetInetAddresses_LOOPBACK4;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonNetInetAddresses, LOOPBACK4, JavaNetInet4Address *)

inline JavaNetInet4Address *ComGoogleCommonNetInetAddresses_get_ANY4();
static JavaNetInet4Address *ComGoogleCommonNetInetAddresses_ANY4;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonNetInetAddresses, ANY4, JavaNetInet4Address *)

__attribute__((unused)) static void ComGoogleCommonNetInetAddresses_init(ComGoogleCommonNetInetAddresses *self);

__attribute__((unused)) static ComGoogleCommonNetInetAddresses *new_ComGoogleCommonNetInetAddresses_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonNetInetAddresses *create_ComGoogleCommonNetInetAddresses_init();

__attribute__((unused)) static JavaNetInet4Address *ComGoogleCommonNetInetAddresses_getInet4AddressWithByteArray_(IOSByteArray *bytes);

__attribute__((unused)) static IOSByteArray *ComGoogleCommonNetInetAddresses_ipStringToBytesWithNSString_(NSString *ipString);

__attribute__((unused)) static IOSByteArray *ComGoogleCommonNetInetAddresses_textToNumericFormatV4WithNSString_(NSString *ipString);

__attribute__((unused)) static IOSByteArray *ComGoogleCommonNetInetAddresses_textToNumericFormatV6WithNSString_(NSString *ipString);

__attribute__((unused)) static NSString *ComGoogleCommonNetInetAddresses_convertDottedQuadToHexWithNSString_(NSString *ipString);

__attribute__((unused)) static jbyte ComGoogleCommonNetInetAddresses_parseOctetWithNSString_(NSString *ipPart);

__attribute__((unused)) static jshort ComGoogleCommonNetInetAddresses_parseHextetWithNSString_(NSString *ipPart);

__attribute__((unused)) static JavaNetInetAddress *ComGoogleCommonNetInetAddresses_bytesToInetAddressWithByteArray_(IOSByteArray *addr);

__attribute__((unused)) static void ComGoogleCommonNetInetAddresses_compressLongestRunOfZeroesWithIntArray_(IOSIntArray *hextets);

__attribute__((unused)) static NSString *ComGoogleCommonNetInetAddresses_hextetsToIPv6StringWithIntArray_(IOSIntArray *hextets);

__attribute__((unused)) static JavaNetInetAddress *ComGoogleCommonNetInetAddresses_forUriStringNoThrowWithNSString_(NSString *hostAddr);

__attribute__((unused)) static JavaLangIllegalArgumentException *ComGoogleCommonNetInetAddresses_formatIllegalArgumentExceptionWithNSString_withNSObjectArray_(NSString *format, IOSObjectArray *args);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonNetInetAddresses__Annotations$0();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonNetInetAddresses__Annotations$1();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonNetInetAddresses__Annotations$2();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonNetInetAddresses__Annotations$3();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonNetInetAddresses__Annotations$4();

@interface ComGoogleCommonNetInetAddresses_TeredoInfo () {
 @public
  JavaNetInet4Address *server_;
  JavaNetInet4Address *client_;
  jint port_;
  jint flags_;
}

@end

J2OBJC_FIELD_SETTER(ComGoogleCommonNetInetAddresses_TeredoInfo, server_, JavaNetInet4Address *)
J2OBJC_FIELD_SETTER(ComGoogleCommonNetInetAddresses_TeredoInfo, client_, JavaNetInet4Address *)

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonNetInetAddresses_TeredoInfo__Annotations$0();

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonNetInetAddresses)

@implementation ComGoogleCommonNetInetAddresses

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonNetInetAddresses_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (JavaNetInet4Address *)getInet4AddressWithByteArray:(IOSByteArray *)bytes {
  return ComGoogleCommonNetInetAddresses_getInet4AddressWithByteArray_(bytes);
}

+ (JavaNetInetAddress *)forStringWithNSString:(NSString *)ipString {
  return ComGoogleCommonNetInetAddresses_forStringWithNSString_(ipString);
}

+ (jboolean)isInetAddressWithNSString:(NSString *)ipString {
  return ComGoogleCommonNetInetAddresses_isInetAddressWithNSString_(ipString);
}

+ (IOSByteArray *)ipStringToBytesWithNSString:(NSString *)ipString {
  return ComGoogleCommonNetInetAddresses_ipStringToBytesWithNSString_(ipString);
}

+ (IOSByteArray *)textToNumericFormatV4WithNSString:(NSString *)ipString {
  return ComGoogleCommonNetInetAddresses_textToNumericFormatV4WithNSString_(ipString);
}

+ (IOSByteArray *)textToNumericFormatV6WithNSString:(NSString *)ipString {
  return ComGoogleCommonNetInetAddresses_textToNumericFormatV6WithNSString_(ipString);
}

+ (NSString *)convertDottedQuadToHexWithNSString:(NSString *)ipString {
  return ComGoogleCommonNetInetAddresses_convertDottedQuadToHexWithNSString_(ipString);
}

+ (jbyte)parseOctetWithNSString:(NSString *)ipPart {
  return ComGoogleCommonNetInetAddresses_parseOctetWithNSString_(ipPart);
}

+ (jshort)parseHextetWithNSString:(NSString *)ipPart {
  return ComGoogleCommonNetInetAddresses_parseHextetWithNSString_(ipPart);
}

+ (JavaNetInetAddress *)bytesToInetAddressWithByteArray:(IOSByteArray *)addr {
  return ComGoogleCommonNetInetAddresses_bytesToInetAddressWithByteArray_(addr);
}

+ (NSString *)toAddrStringWithJavaNetInetAddress:(JavaNetInetAddress *)ip {
  return ComGoogleCommonNetInetAddresses_toAddrStringWithJavaNetInetAddress_(ip);
}

+ (void)compressLongestRunOfZeroesWithIntArray:(IOSIntArray *)hextets {
  ComGoogleCommonNetInetAddresses_compressLongestRunOfZeroesWithIntArray_(hextets);
}

+ (NSString *)hextetsToIPv6StringWithIntArray:(IOSIntArray *)hextets {
  return ComGoogleCommonNetInetAddresses_hextetsToIPv6StringWithIntArray_(hextets);
}

+ (NSString *)toUriStringWithJavaNetInetAddress:(JavaNetInetAddress *)ip {
  return ComGoogleCommonNetInetAddresses_toUriStringWithJavaNetInetAddress_(ip);
}

+ (JavaNetInetAddress *)forUriStringWithNSString:(NSString *)hostAddr {
  return ComGoogleCommonNetInetAddresses_forUriStringWithNSString_(hostAddr);
}

+ (JavaNetInetAddress *)forUriStringNoThrowWithNSString:(NSString *)hostAddr {
  return ComGoogleCommonNetInetAddresses_forUriStringNoThrowWithNSString_(hostAddr);
}

+ (jboolean)isUriInetAddressWithNSString:(NSString *)ipString {
  return ComGoogleCommonNetInetAddresses_isUriInetAddressWithNSString_(ipString);
}

+ (jboolean)isCompatIPv4AddressWithJavaNetInet6Address:(JavaNetInet6Address *)ip {
  return ComGoogleCommonNetInetAddresses_isCompatIPv4AddressWithJavaNetInet6Address_(ip);
}

+ (JavaNetInet4Address *)getCompatIPv4AddressWithJavaNetInet6Address:(JavaNetInet6Address *)ip {
  return ComGoogleCommonNetInetAddresses_getCompatIPv4AddressWithJavaNetInet6Address_(ip);
}

+ (jboolean)is6to4AddressWithJavaNetInet6Address:(JavaNetInet6Address *)ip {
  return ComGoogleCommonNetInetAddresses_is6to4AddressWithJavaNetInet6Address_(ip);
}

+ (JavaNetInet4Address *)get6to4IPv4AddressWithJavaNetInet6Address:(JavaNetInet6Address *)ip {
  return ComGoogleCommonNetInetAddresses_get6to4IPv4AddressWithJavaNetInet6Address_(ip);
}

+ (jboolean)isTeredoAddressWithJavaNetInet6Address:(JavaNetInet6Address *)ip {
  return ComGoogleCommonNetInetAddresses_isTeredoAddressWithJavaNetInet6Address_(ip);
}

+ (ComGoogleCommonNetInetAddresses_TeredoInfo *)getTeredoInfoWithJavaNetInet6Address:(JavaNetInet6Address *)ip {
  return ComGoogleCommonNetInetAddresses_getTeredoInfoWithJavaNetInet6Address_(ip);
}

+ (jboolean)isIsatapAddressWithJavaNetInet6Address:(JavaNetInet6Address *)ip {
  return ComGoogleCommonNetInetAddresses_isIsatapAddressWithJavaNetInet6Address_(ip);
}

+ (JavaNetInet4Address *)getIsatapIPv4AddressWithJavaNetInet6Address:(JavaNetInet6Address *)ip {
  return ComGoogleCommonNetInetAddresses_getIsatapIPv4AddressWithJavaNetInet6Address_(ip);
}

+ (jboolean)hasEmbeddedIPv4ClientAddressWithJavaNetInet6Address:(JavaNetInet6Address *)ip {
  return ComGoogleCommonNetInetAddresses_hasEmbeddedIPv4ClientAddressWithJavaNetInet6Address_(ip);
}

+ (JavaNetInet4Address *)getEmbeddedIPv4ClientAddressWithJavaNetInet6Address:(JavaNetInet6Address *)ip {
  return ComGoogleCommonNetInetAddresses_getEmbeddedIPv4ClientAddressWithJavaNetInet6Address_(ip);
}

+ (jboolean)isMappedIPv4AddressWithNSString:(NSString *)ipString {
  return ComGoogleCommonNetInetAddresses_isMappedIPv4AddressWithNSString_(ipString);
}

+ (JavaNetInet4Address *)getCoercedIPv4AddressWithJavaNetInetAddress:(JavaNetInetAddress *)ip {
  return ComGoogleCommonNetInetAddresses_getCoercedIPv4AddressWithJavaNetInetAddress_(ip);
}

+ (jint)coerceToIntegerWithJavaNetInetAddress:(JavaNetInetAddress *)ip {
  return ComGoogleCommonNetInetAddresses_coerceToIntegerWithJavaNetInetAddress_(ip);
}

+ (JavaNetInet4Address *)fromIntegerWithInt:(jint)address {
  return ComGoogleCommonNetInetAddresses_fromIntegerWithInt_(address);
}

+ (JavaNetInetAddress *)fromLittleEndianByteArrayWithByteArray:(IOSByteArray *)addr {
  return ComGoogleCommonNetInetAddresses_fromLittleEndianByteArrayWithByteArray_(addr);
}

+ (JavaNetInetAddress *)decrementWithJavaNetInetAddress:(JavaNetInetAddress *)address {
  return ComGoogleCommonNetInetAddresses_decrementWithJavaNetInetAddress_(address);
}

+ (JavaNetInetAddress *)incrementWithJavaNetInetAddress:(JavaNetInetAddress *)address {
  return ComGoogleCommonNetInetAddresses_incrementWithJavaNetInetAddress_(address);
}

+ (jboolean)isMaximumWithJavaNetInetAddress:(JavaNetInetAddress *)address {
  return ComGoogleCommonNetInetAddresses_isMaximumWithJavaNetInetAddress_(address);
}

+ (JavaLangIllegalArgumentException *)formatIllegalArgumentExceptionWithNSString:(NSString *)format
                                                               withNSObjectArray:(IOSObjectArray *)args {
  return ComGoogleCommonNetInetAddresses_formatIllegalArgumentExceptionWithNSString_withNSObjectArray_(format, args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetInet4Address;", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 4, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 5, 3, -1, -1, 6, -1 },
    { NULL, "[B", 0xa, 7, 3, -1, -1, 8, -1 },
    { NULL, "[B", 0xa, 9, 3, -1, -1, 10, -1 },
    { NULL, "LNSString;", 0xa, 11, 3, -1, -1, 12, -1 },
    { NULL, "B", 0xa, 13, 3, -1, -1, -1, -1 },
    { NULL, "S", 0xa, 14, 3, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0xa, 15, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 18, 19, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 20, 19, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 21, 17, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x9, 22, 3, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0xa, 23, 3, -1, -1, 24, -1 },
    { NULL, "Z", 0x9, 25, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 26, 27, -1, -1, -1, -1 },
    { NULL, "LJavaNetInet4Address;", 0x9, 28, 27, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 29, 27, -1, -1, -1, -1 },
    { NULL, "LJavaNetInet4Address;", 0x9, 30, 27, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 31, 27, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonNetInetAddresses_TeredoInfo;", 0x9, 32, 27, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 33, 27, -1, -1, -1, -1 },
    { NULL, "LJavaNetInet4Address;", 0x9, 34, 27, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 35, 27, -1, -1, -1, -1 },
    { NULL, "LJavaNetInet4Address;", 0x9, 36, 27, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 37, 3, -1, -1, -1, -1 },
    { NULL, "LJavaNetInet4Address;", 0x9, 38, 17, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 39, 17, -1, -1, -1, -1 },
    { NULL, "LJavaNetInet4Address;", 0x9, 40, 41, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x9, 42, 1, 43, -1, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x9, 44, 17, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x9, 45, 17, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 46, 17, -1, -1, -1, -1 },
    { NULL, "LJavaLangIllegalArgumentException;", 0x8a, 47, 48, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getInet4AddressWithByteArray:);
  methods[2].selector = @selector(forStringWithNSString:);
  methods[3].selector = @selector(isInetAddressWithNSString:);
  methods[4].selector = @selector(ipStringToBytesWithNSString:);
  methods[5].selector = @selector(textToNumericFormatV4WithNSString:);
  methods[6].selector = @selector(textToNumericFormatV6WithNSString:);
  methods[7].selector = @selector(convertDottedQuadToHexWithNSString:);
  methods[8].selector = @selector(parseOctetWithNSString:);
  methods[9].selector = @selector(parseHextetWithNSString:);
  methods[10].selector = @selector(bytesToInetAddressWithByteArray:);
  methods[11].selector = @selector(toAddrStringWithJavaNetInetAddress:);
  methods[12].selector = @selector(compressLongestRunOfZeroesWithIntArray:);
  methods[13].selector = @selector(hextetsToIPv6StringWithIntArray:);
  methods[14].selector = @selector(toUriStringWithJavaNetInetAddress:);
  methods[15].selector = @selector(forUriStringWithNSString:);
  methods[16].selector = @selector(forUriStringNoThrowWithNSString:);
  methods[17].selector = @selector(isUriInetAddressWithNSString:);
  methods[18].selector = @selector(isCompatIPv4AddressWithJavaNetInet6Address:);
  methods[19].selector = @selector(getCompatIPv4AddressWithJavaNetInet6Address:);
  methods[20].selector = @selector(is6to4AddressWithJavaNetInet6Address:);
  methods[21].selector = @selector(get6to4IPv4AddressWithJavaNetInet6Address:);
  methods[22].selector = @selector(isTeredoAddressWithJavaNetInet6Address:);
  methods[23].selector = @selector(getTeredoInfoWithJavaNetInet6Address:);
  methods[24].selector = @selector(isIsatapAddressWithJavaNetInet6Address:);
  methods[25].selector = @selector(getIsatapIPv4AddressWithJavaNetInet6Address:);
  methods[26].selector = @selector(hasEmbeddedIPv4ClientAddressWithJavaNetInet6Address:);
  methods[27].selector = @selector(getEmbeddedIPv4ClientAddressWithJavaNetInet6Address:);
  methods[28].selector = @selector(isMappedIPv4AddressWithNSString:);
  methods[29].selector = @selector(getCoercedIPv4AddressWithJavaNetInetAddress:);
  methods[30].selector = @selector(coerceToIntegerWithJavaNetInetAddress:);
  methods[31].selector = @selector(fromIntegerWithInt:);
  methods[32].selector = @selector(fromLittleEndianByteArrayWithByteArray:);
  methods[33].selector = @selector(decrementWithJavaNetInetAddress:);
  methods[34].selector = @selector(incrementWithJavaNetInetAddress:);
  methods[35].selector = @selector(isMaximumWithJavaNetInetAddress:);
  methods[36].selector = @selector(formatIllegalArgumentExceptionWithNSString:withNSObjectArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "IPV4_PART_COUNT", "I", .constantValue.asInt = ComGoogleCommonNetInetAddresses_IPV4_PART_COUNT, 0x1a, -1, -1, -1, -1 },
    { "IPV6_PART_COUNT", "I", .constantValue.asInt = ComGoogleCommonNetInetAddresses_IPV6_PART_COUNT, 0x1a, -1, -1, -1, -1 },
    { "IPV4_SPLITTER", "LComGoogleCommonBaseSplitter;", .constantValue.asLong = 0, 0x1a, -1, 49, -1, -1 },
    { "LOOPBACK4", "LJavaNetInet4Address;", .constantValue.asLong = 0, 0x1a, -1, 50, -1, -1 },
    { "ANY4", "LJavaNetInet4Address;", .constantValue.asLong = 0, 0x1a, -1, 51, -1, -1 },
  };
  static const void *ptrTable[] = { "getInet4Address", "[B", "forString", "LNSString;", "isInetAddress", "ipStringToBytes", (void *)&ComGoogleCommonNetInetAddresses__Annotations$0, "textToNumericFormatV4", (void *)&ComGoogleCommonNetInetAddresses__Annotations$1, "textToNumericFormatV6", (void *)&ComGoogleCommonNetInetAddresses__Annotations$2, "convertDottedQuadToHex", (void *)&ComGoogleCommonNetInetAddresses__Annotations$3, "parseOctet", "parseHextet", "bytesToInetAddress", "toAddrString", "LJavaNetInetAddress;", "compressLongestRunOfZeroes", "[I", "hextetsToIPv6String", "toUriString", "forUriString", "forUriStringNoThrow", (void *)&ComGoogleCommonNetInetAddresses__Annotations$4, "isUriInetAddress", "isCompatIPv4Address", "LJavaNetInet6Address;", "getCompatIPv4Address", "is6to4Address", "get6to4IPv4Address", "isTeredoAddress", "getTeredoInfo", "isIsatapAddress", "getIsatapIPv4Address", "hasEmbeddedIPv4ClientAddress", "getEmbeddedIPv4ClientAddress", "isMappedIPv4Address", "getCoercedIPv4Address", "coerceToInteger", "fromInteger", "I", "fromLittleEndianByteArray", "LJavaNetUnknownHostException;", "decrement", "increment", "isMaximum", "formatIllegalArgumentException", "LNSString;[LNSObject;", &ComGoogleCommonNetInetAddresses_IPV4_SPLITTER, &ComGoogleCommonNetInetAddresses_LOOPBACK4, &ComGoogleCommonNetInetAddresses_ANY4, "LComGoogleCommonNetInetAddresses_TeredoInfo;" };
  static const J2ObjcClassInfo _ComGoogleCommonNetInetAddresses = { "InetAddresses", "com.google.common.net", ptrTable, methods, fields, 7, 0x11, 37, 5, -1, 52, -1, -1, -1 };
  return &_ComGoogleCommonNetInetAddresses;
}

+ (void)initialize {
  if (self == [ComGoogleCommonNetInetAddresses class]) {
    ComGoogleCommonNetInetAddresses_IPV4_SPLITTER = [((ComGoogleCommonBaseSplitter *) nil_chk(ComGoogleCommonBaseSplitter_onWithChar_('.'))) limitWithInt:ComGoogleCommonNetInetAddresses_IPV4_PART_COUNT];
    ComGoogleCommonNetInetAddresses_LOOPBACK4 = (JavaNetInet4Address *) cast_chk(ComGoogleCommonNetInetAddresses_forStringWithNSString_(@"127.0.0.1"), [JavaNetInet4Address class]);
    ComGoogleCommonNetInetAddresses_ANY4 = (JavaNetInet4Address *) cast_chk(ComGoogleCommonNetInetAddresses_forStringWithNSString_(@"0.0.0.0"), [JavaNetInet4Address class]);
    J2OBJC_SET_INITIALIZED(ComGoogleCommonNetInetAddresses)
  }
}

@end

void ComGoogleCommonNetInetAddresses_init(ComGoogleCommonNetInetAddresses *self) {
  NSObject_init(self);
}

ComGoogleCommonNetInetAddresses *new_ComGoogleCommonNetInetAddresses_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonNetInetAddresses, init)
}

ComGoogleCommonNetInetAddresses *create_ComGoogleCommonNetInetAddresses_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonNetInetAddresses, init)
}

JavaNetInet4Address *ComGoogleCommonNetInetAddresses_getInet4AddressWithByteArray_(IOSByteArray *bytes) {
  ComGoogleCommonNetInetAddresses_initialize();
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withInt_(((IOSByteArray *) nil_chk(bytes))->size_ == 4, @"Byte array has invalid length for an IPv4 address: %s != 4.", bytes->size_);
  return (JavaNetInet4Address *) cast_chk(ComGoogleCommonNetInetAddresses_bytesToInetAddressWithByteArray_(bytes), [JavaNetInet4Address class]);
}

JavaNetInetAddress *ComGoogleCommonNetInetAddresses_forStringWithNSString_(NSString *ipString) {
  ComGoogleCommonNetInetAddresses_initialize();
  IOSByteArray *addr = ComGoogleCommonNetInetAddresses_ipStringToBytesWithNSString_(ipString);
  if (addr == nil) {
    @throw nil_chk(ComGoogleCommonNetInetAddresses_formatIllegalArgumentExceptionWithNSString_withNSObjectArray_(@"'%s' is not an IP string literal.", [IOSObjectArray newArrayWithObjects:(id[]){ ipString } count:1 type:NSObject_class_()]));
  }
  return ComGoogleCommonNetInetAddresses_bytesToInetAddressWithByteArray_(addr);
}

jboolean ComGoogleCommonNetInetAddresses_isInetAddressWithNSString_(NSString *ipString) {
  ComGoogleCommonNetInetAddresses_initialize();
  return ComGoogleCommonNetInetAddresses_ipStringToBytesWithNSString_(ipString) != nil;
}

IOSByteArray *ComGoogleCommonNetInetAddresses_ipStringToBytesWithNSString_(NSString *ipString) {
  ComGoogleCommonNetInetAddresses_initialize();
  jboolean hasColon = false;
  jboolean hasDot = false;
  for (jint i = 0; i < [((NSString *) nil_chk(ipString)) java_length]; i++) {
    jchar c = [ipString charAtWithInt:i];
    if (c == '.') {
      hasDot = true;
    }
    else if (c == ':') {
      if (hasDot) {
        return nil;
      }
      hasColon = true;
    }
    else if (JavaLangCharacter_digitWithChar_withInt_(c, 16) == -1) {
      return nil;
    }
  }
  if (hasColon) {
    if (hasDot) {
      ipString = ComGoogleCommonNetInetAddresses_convertDottedQuadToHexWithNSString_(ipString);
      if (ipString == nil) {
        return nil;
      }
    }
    return ComGoogleCommonNetInetAddresses_textToNumericFormatV6WithNSString_(ipString);
  }
  else if (hasDot) {
    return ComGoogleCommonNetInetAddresses_textToNumericFormatV4WithNSString_(ipString);
  }
  return nil;
}

IOSByteArray *ComGoogleCommonNetInetAddresses_textToNumericFormatV4WithNSString_(NSString *ipString) {
  ComGoogleCommonNetInetAddresses_initialize();
  IOSByteArray *bytes = [IOSByteArray newArrayWithLength:ComGoogleCommonNetInetAddresses_IPV4_PART_COUNT];
  jint i = 0;
  @try {
    for (NSString * __strong octet in nil_chk([((ComGoogleCommonBaseSplitter *) nil_chk(ComGoogleCommonNetInetAddresses_IPV4_SPLITTER)) splitWithJavaLangCharSequence:ipString])) {
      *IOSByteArray_GetRef(bytes, i++) = ComGoogleCommonNetInetAddresses_parseOctetWithNSString_(octet);
    }
  }
  @catch (JavaLangNumberFormatException *ex) {
    return nil;
  }
  return i == ComGoogleCommonNetInetAddresses_IPV4_PART_COUNT ? bytes : nil;
}

IOSByteArray *ComGoogleCommonNetInetAddresses_textToNumericFormatV6WithNSString_(NSString *ipString) {
  ComGoogleCommonNetInetAddresses_initialize();
  IOSObjectArray *parts = [((NSString *) nil_chk(ipString)) java_split:@":" limit:ComGoogleCommonNetInetAddresses_IPV6_PART_COUNT + 2];
  if (((IOSObjectArray *) nil_chk(parts))->size_ < 3 || parts->size_ > ComGoogleCommonNetInetAddresses_IPV6_PART_COUNT + 1) {
    return nil;
  }
  jint skipIndex = -1;
  for (jint i = 1; i < parts->size_ - 1; i++) {
    if ([((NSString *) nil_chk(IOSObjectArray_Get(parts, i))) java_length] == 0) {
      if (skipIndex >= 0) {
        return nil;
      }
      skipIndex = i;
    }
  }
  jint partsHi;
  jint partsLo;
  if (skipIndex >= 0) {
    partsHi = skipIndex;
    partsLo = parts->size_ - skipIndex - 1;
    if ([((NSString *) nil_chk(IOSObjectArray_Get(parts, 0))) java_length] == 0 && --partsHi != 0) {
      return nil;
    }
    if ([((NSString *) nil_chk(IOSObjectArray_Get(parts, parts->size_ - 1))) java_length] == 0 && --partsLo != 0) {
      return nil;
    }
  }
  else {
    partsHi = parts->size_;
    partsLo = 0;
  }
  jint partsSkipped = ComGoogleCommonNetInetAddresses_IPV6_PART_COUNT - (partsHi + partsLo);
  if (!(skipIndex >= 0 ? partsSkipped >= 1 : partsSkipped == 0)) {
    return nil;
  }
  JavaNioByteBuffer *rawBytes = JavaNioByteBuffer_allocateWithInt_(2 * ComGoogleCommonNetInetAddresses_IPV6_PART_COUNT);
  @try {
    for (jint i = 0; i < partsHi; i++) {
      (void) [((JavaNioByteBuffer *) nil_chk(rawBytes)) putShortWithShort:ComGoogleCommonNetInetAddresses_parseHextetWithNSString_(IOSObjectArray_Get(parts, i))];
    }
    for (jint i = 0; i < partsSkipped; i++) {
      (void) [((JavaNioByteBuffer *) nil_chk(rawBytes)) putShortWithShort:(jshort) 0];
    }
    for (jint i = partsLo; i > 0; i--) {
      (void) [((JavaNioByteBuffer *) nil_chk(rawBytes)) putShortWithShort:ComGoogleCommonNetInetAddresses_parseHextetWithNSString_(IOSObjectArray_Get(parts, parts->size_ - i))];
    }
  }
  @catch (JavaLangNumberFormatException *ex) {
    return nil;
  }
  return [((JavaNioByteBuffer *) nil_chk(rawBytes)) array];
}

NSString *ComGoogleCommonNetInetAddresses_convertDottedQuadToHexWithNSString_(NSString *ipString) {
  ComGoogleCommonNetInetAddresses_initialize();
  jint lastColon = [((NSString *) nil_chk(ipString)) java_lastIndexOf:':'];
  NSString *initialPart = [ipString java_substring:0 endIndex:lastColon + 1];
  NSString *dottedQuad = [ipString java_substring:lastColon + 1];
  IOSByteArray *quad = ComGoogleCommonNetInetAddresses_textToNumericFormatV4WithNSString_(dottedQuad);
  if (quad == nil) {
    return nil;
  }
  NSString *penultimate = JavaLangInteger_toHexStringWithInt_((JreLShift32((IOSByteArray_Get(quad, 0) & (jint) 0xff), 8)) | (IOSByteArray_Get(quad, 1) & (jint) 0xff));
  NSString *ultimate = JavaLangInteger_toHexStringWithInt_((JreLShift32((IOSByteArray_Get(quad, 2) & (jint) 0xff), 8)) | (IOSByteArray_Get(quad, 3) & (jint) 0xff));
  return JreStrcat("$$C$", initialPart, penultimate, ':', ultimate);
}

jbyte ComGoogleCommonNetInetAddresses_parseOctetWithNSString_(NSString *ipPart) {
  ComGoogleCommonNetInetAddresses_initialize();
  jint octet = JavaLangInteger_parseIntWithNSString_(ipPart);
  if (octet > 255 || ([((NSString *) nil_chk(ipPart)) java_hasPrefix:@"0"] && [ipPart java_length] > 1)) {
    @throw new_JavaLangNumberFormatException_init();
  }
  return (jbyte) octet;
}

jshort ComGoogleCommonNetInetAddresses_parseHextetWithNSString_(NSString *ipPart) {
  ComGoogleCommonNetInetAddresses_initialize();
  jint hextet = JavaLangInteger_parseIntWithNSString_withInt_(ipPart, 16);
  if (hextet > (jint) 0xffff) {
    @throw new_JavaLangNumberFormatException_init();
  }
  return (jshort) hextet;
}

JavaNetInetAddress *ComGoogleCommonNetInetAddresses_bytesToInetAddressWithByteArray_(IOSByteArray *addr) {
  ComGoogleCommonNetInetAddresses_initialize();
  @try {
    return JavaNetInetAddress_getByAddressWithByteArray_(addr);
  }
  @catch (JavaNetUnknownHostException *e) {
    @throw new_JavaLangAssertionError_initWithId_(e);
  }
}

NSString *ComGoogleCommonNetInetAddresses_toAddrStringWithJavaNetInetAddress_(JavaNetInetAddress *ip) {
  ComGoogleCommonNetInetAddresses_initialize();
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(ip);
  if ([ip isKindOfClass:[JavaNetInet4Address class]]) {
    return [((JavaNetInetAddress *) nil_chk(ip)) getHostAddress];
  }
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_([ip isKindOfClass:[JavaNetInet6Address class]]);
  IOSByteArray *bytes = [((JavaNetInetAddress *) nil_chk(ip)) getAddress];
  IOSIntArray *hextets = [IOSIntArray newArrayWithLength:ComGoogleCommonNetInetAddresses_IPV6_PART_COUNT];
  for (jint i = 0; i < hextets->size_; i++) {
    *IOSIntArray_GetRef(hextets, i) = ComGoogleCommonPrimitivesInts_fromBytesWithByte_withByte_withByte_withByte_((jbyte) 0, (jbyte) 0, IOSByteArray_Get(nil_chk(bytes), 2 * i), IOSByteArray_Get(bytes, 2 * i + 1));
  }
  ComGoogleCommonNetInetAddresses_compressLongestRunOfZeroesWithIntArray_(hextets);
  return ComGoogleCommonNetInetAddresses_hextetsToIPv6StringWithIntArray_(hextets);
}

void ComGoogleCommonNetInetAddresses_compressLongestRunOfZeroesWithIntArray_(IOSIntArray *hextets) {
  ComGoogleCommonNetInetAddresses_initialize();
  jint bestRunStart = -1;
  jint bestRunLength = -1;
  jint runStart = -1;
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(hextets))->size_ + 1; i++) {
    if (i < hextets->size_ && IOSIntArray_Get(hextets, i) == 0) {
      if (runStart < 0) {
        runStart = i;
      }
    }
    else if (runStart >= 0) {
      jint runLength = i - runStart;
      if (runLength > bestRunLength) {
        bestRunStart = runStart;
        bestRunLength = runLength;
      }
      runStart = -1;
    }
  }
  if (bestRunLength >= 2) {
    JavaUtilArrays_fillWithIntArray_withInt_withInt_withInt_(hextets, bestRunStart, bestRunStart + bestRunLength, -1);
  }
}

NSString *ComGoogleCommonNetInetAddresses_hextetsToIPv6StringWithIntArray_(IOSIntArray *hextets) {
  ComGoogleCommonNetInetAddresses_initialize();
  JavaLangStringBuilder *buf = new_JavaLangStringBuilder_initWithInt_(39);
  jboolean lastWasNumber = false;
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(hextets))->size_; i++) {
    jboolean thisIsNumber = IOSIntArray_Get(hextets, i) >= 0;
    if (thisIsNumber) {
      if (lastWasNumber) {
        (void) [buf appendWithChar:':'];
      }
      (void) [buf appendWithNSString:JavaLangInteger_toHexStringWithInt_(IOSIntArray_Get(hextets, i))];
    }
    else {
      if (i == 0 || lastWasNumber) {
        (void) [buf appendWithNSString:@"::"];
      }
    }
    lastWasNumber = thisIsNumber;
  }
  return [buf description];
}

NSString *ComGoogleCommonNetInetAddresses_toUriStringWithJavaNetInetAddress_(JavaNetInetAddress *ip) {
  ComGoogleCommonNetInetAddresses_initialize();
  if ([ip isKindOfClass:[JavaNetInet6Address class]]) {
    return JreStrcat("C$C", '[', ComGoogleCommonNetInetAddresses_toAddrStringWithJavaNetInetAddress_(ip), ']');
  }
  return ComGoogleCommonNetInetAddresses_toAddrStringWithJavaNetInetAddress_(ip);
}

JavaNetInetAddress *ComGoogleCommonNetInetAddresses_forUriStringWithNSString_(NSString *hostAddr) {
  ComGoogleCommonNetInetAddresses_initialize();
  JavaNetInetAddress *addr = ComGoogleCommonNetInetAddresses_forUriStringNoThrowWithNSString_(hostAddr);
  if (addr == nil) {
    @throw nil_chk(ComGoogleCommonNetInetAddresses_formatIllegalArgumentExceptionWithNSString_withNSObjectArray_(@"Not a valid URI IP literal: '%s'", [IOSObjectArray newArrayWithObjects:(id[]){ hostAddr } count:1 type:NSObject_class_()]));
  }
  return addr;
}

JavaNetInetAddress *ComGoogleCommonNetInetAddresses_forUriStringNoThrowWithNSString_(NSString *hostAddr) {
  ComGoogleCommonNetInetAddresses_initialize();
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(hostAddr);
  NSString *ipString;
  jint expectBytes;
  if ([((NSString *) nil_chk(hostAddr)) java_hasPrefix:@"["] && [hostAddr java_hasSuffix:@"]"]) {
    ipString = [hostAddr java_substring:1 endIndex:[hostAddr java_length] - 1];
    expectBytes = 16;
  }
  else {
    ipString = hostAddr;
    expectBytes = 4;
  }
  IOSByteArray *addr = ComGoogleCommonNetInetAddresses_ipStringToBytesWithNSString_(ipString);
  if (addr == nil || addr->size_ != expectBytes) {
    return nil;
  }
  return ComGoogleCommonNetInetAddresses_bytesToInetAddressWithByteArray_(addr);
}

jboolean ComGoogleCommonNetInetAddresses_isUriInetAddressWithNSString_(NSString *ipString) {
  ComGoogleCommonNetInetAddresses_initialize();
  return ComGoogleCommonNetInetAddresses_forUriStringNoThrowWithNSString_(ipString) != nil;
}

jboolean ComGoogleCommonNetInetAddresses_isCompatIPv4AddressWithJavaNetInet6Address_(JavaNetInet6Address *ip) {
  ComGoogleCommonNetInetAddresses_initialize();
  if (![((JavaNetInet6Address *) nil_chk(ip)) isIPv4CompatibleAddress]) {
    return false;
  }
  IOSByteArray *bytes = [ip getAddress];
  if ((IOSByteArray_Get(nil_chk(bytes), 12) == 0) && (IOSByteArray_Get(bytes, 13) == 0) && (IOSByteArray_Get(bytes, 14) == 0) && ((IOSByteArray_Get(bytes, 15) == 0) || (IOSByteArray_Get(bytes, 15) == 1))) {
    return false;
  }
  return true;
}

JavaNetInet4Address *ComGoogleCommonNetInetAddresses_getCompatIPv4AddressWithJavaNetInet6Address_(JavaNetInet6Address *ip) {
  ComGoogleCommonNetInetAddresses_initialize();
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_(ComGoogleCommonNetInetAddresses_isCompatIPv4AddressWithJavaNetInet6Address_(ip), @"Address '%s' is not IPv4-compatible.", ComGoogleCommonNetInetAddresses_toAddrStringWithJavaNetInetAddress_(ip));
  return ComGoogleCommonNetInetAddresses_getInet4AddressWithByteArray_(JavaUtilArrays_copyOfRangeWithByteArray_withInt_withInt_([((JavaNetInet6Address *) nil_chk(ip)) getAddress], 12, 16));
}

jboolean ComGoogleCommonNetInetAddresses_is6to4AddressWithJavaNetInet6Address_(JavaNetInet6Address *ip) {
  ComGoogleCommonNetInetAddresses_initialize();
  IOSByteArray *bytes = [((JavaNetInet6Address *) nil_chk(ip)) getAddress];
  return (IOSByteArray_Get(nil_chk(bytes), 0) == (jbyte) (jint) 0x20) && (IOSByteArray_Get(bytes, 1) == (jbyte) (jint) 0x02);
}

JavaNetInet4Address *ComGoogleCommonNetInetAddresses_get6to4IPv4AddressWithJavaNetInet6Address_(JavaNetInet6Address *ip) {
  ComGoogleCommonNetInetAddresses_initialize();
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_(ComGoogleCommonNetInetAddresses_is6to4AddressWithJavaNetInet6Address_(ip), @"Address '%s' is not a 6to4 address.", ComGoogleCommonNetInetAddresses_toAddrStringWithJavaNetInetAddress_(ip));
  return ComGoogleCommonNetInetAddresses_getInet4AddressWithByteArray_(JavaUtilArrays_copyOfRangeWithByteArray_withInt_withInt_([((JavaNetInet6Address *) nil_chk(ip)) getAddress], 2, 6));
}

jboolean ComGoogleCommonNetInetAddresses_isTeredoAddressWithJavaNetInet6Address_(JavaNetInet6Address *ip) {
  ComGoogleCommonNetInetAddresses_initialize();
  IOSByteArray *bytes = [((JavaNetInet6Address *) nil_chk(ip)) getAddress];
  return (IOSByteArray_Get(nil_chk(bytes), 0) == (jbyte) (jint) 0x20) && (IOSByteArray_Get(bytes, 1) == (jbyte) (jint) 0x01) && (IOSByteArray_Get(bytes, 2) == 0) && (IOSByteArray_Get(bytes, 3) == 0);
}

ComGoogleCommonNetInetAddresses_TeredoInfo *ComGoogleCommonNetInetAddresses_getTeredoInfoWithJavaNetInet6Address_(JavaNetInet6Address *ip) {
  ComGoogleCommonNetInetAddresses_initialize();
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_(ComGoogleCommonNetInetAddresses_isTeredoAddressWithJavaNetInet6Address_(ip), @"Address '%s' is not a Teredo address.", ComGoogleCommonNetInetAddresses_toAddrStringWithJavaNetInetAddress_(ip));
  IOSByteArray *bytes = [((JavaNetInet6Address *) nil_chk(ip)) getAddress];
  JavaNetInet4Address *server = ComGoogleCommonNetInetAddresses_getInet4AddressWithByteArray_(JavaUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(bytes, 4, 8));
  jint flags = [((id<ComGoogleCommonIoByteArrayDataInput>) nil_chk(ComGoogleCommonIoByteStreams_newDataInputWithByteArray_withInt_(bytes, 8))) readShort] & (jint) 0xffff;
  jint port = ~[((id<ComGoogleCommonIoByteArrayDataInput>) nil_chk(ComGoogleCommonIoByteStreams_newDataInputWithByteArray_withInt_(bytes, 10))) readShort] & (jint) 0xffff;
  IOSByteArray *clientBytes = JavaUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(bytes, 12, 16);
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(clientBytes))->size_; i++) {
    *IOSByteArray_GetRef(clientBytes, i) = (jbyte) ~IOSByteArray_Get(clientBytes, i);
  }
  JavaNetInet4Address *client = ComGoogleCommonNetInetAddresses_getInet4AddressWithByteArray_(clientBytes);
  return new_ComGoogleCommonNetInetAddresses_TeredoInfo_initWithJavaNetInet4Address_withJavaNetInet4Address_withInt_withInt_(server, client, port, flags);
}

jboolean ComGoogleCommonNetInetAddresses_isIsatapAddressWithJavaNetInet6Address_(JavaNetInet6Address *ip) {
  ComGoogleCommonNetInetAddresses_initialize();
  if (ComGoogleCommonNetInetAddresses_isTeredoAddressWithJavaNetInet6Address_(ip)) {
    return false;
  }
  IOSByteArray *bytes = [((JavaNetInet6Address *) nil_chk(ip)) getAddress];
  if ((IOSByteArray_Get(nil_chk(bytes), 8) | (jbyte) (jint) 0x03) != (jbyte) (jint) 0x03) {
    return false;
  }
  return (IOSByteArray_Get(bytes, 9) == (jbyte) (jint) 0x00) && (IOSByteArray_Get(bytes, 10) == (jbyte) (jint) 0x5e) && (IOSByteArray_Get(bytes, 11) == (jbyte) (jint) 0xfe);
}

JavaNetInet4Address *ComGoogleCommonNetInetAddresses_getIsatapIPv4AddressWithJavaNetInet6Address_(JavaNetInet6Address *ip) {
  ComGoogleCommonNetInetAddresses_initialize();
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_(ComGoogleCommonNetInetAddresses_isIsatapAddressWithJavaNetInet6Address_(ip), @"Address '%s' is not an ISATAP address.", ComGoogleCommonNetInetAddresses_toAddrStringWithJavaNetInetAddress_(ip));
  return ComGoogleCommonNetInetAddresses_getInet4AddressWithByteArray_(JavaUtilArrays_copyOfRangeWithByteArray_withInt_withInt_([((JavaNetInet6Address *) nil_chk(ip)) getAddress], 12, 16));
}

jboolean ComGoogleCommonNetInetAddresses_hasEmbeddedIPv4ClientAddressWithJavaNetInet6Address_(JavaNetInet6Address *ip) {
  ComGoogleCommonNetInetAddresses_initialize();
  return ComGoogleCommonNetInetAddresses_isCompatIPv4AddressWithJavaNetInet6Address_(ip) || ComGoogleCommonNetInetAddresses_is6to4AddressWithJavaNetInet6Address_(ip) || ComGoogleCommonNetInetAddresses_isTeredoAddressWithJavaNetInet6Address_(ip);
}

JavaNetInet4Address *ComGoogleCommonNetInetAddresses_getEmbeddedIPv4ClientAddressWithJavaNetInet6Address_(JavaNetInet6Address *ip) {
  ComGoogleCommonNetInetAddresses_initialize();
  if (ComGoogleCommonNetInetAddresses_isCompatIPv4AddressWithJavaNetInet6Address_(ip)) {
    return ComGoogleCommonNetInetAddresses_getCompatIPv4AddressWithJavaNetInet6Address_(ip);
  }
  if (ComGoogleCommonNetInetAddresses_is6to4AddressWithJavaNetInet6Address_(ip)) {
    return ComGoogleCommonNetInetAddresses_get6to4IPv4AddressWithJavaNetInet6Address_(ip);
  }
  if (ComGoogleCommonNetInetAddresses_isTeredoAddressWithJavaNetInet6Address_(ip)) {
    return [((ComGoogleCommonNetInetAddresses_TeredoInfo *) nil_chk(ComGoogleCommonNetInetAddresses_getTeredoInfoWithJavaNetInet6Address_(ip))) getClient];
  }
  @throw nil_chk(ComGoogleCommonNetInetAddresses_formatIllegalArgumentExceptionWithNSString_withNSObjectArray_(@"'%s' has no embedded IPv4 address.", [IOSObjectArray newArrayWithObjects:(id[]){ ComGoogleCommonNetInetAddresses_toAddrStringWithJavaNetInetAddress_(ip) } count:1 type:NSObject_class_()]));
}

jboolean ComGoogleCommonNetInetAddresses_isMappedIPv4AddressWithNSString_(NSString *ipString) {
  ComGoogleCommonNetInetAddresses_initialize();
  IOSByteArray *bytes = ComGoogleCommonNetInetAddresses_ipStringToBytesWithNSString_(ipString);
  if (bytes != nil && bytes->size_ == 16) {
    for (jint i = 0; i < 10; i++) {
      if (IOSByteArray_Get(bytes, i) != 0) {
        return false;
      }
    }
    for (jint i = 10; i < 12; i++) {
      if (IOSByteArray_Get(bytes, i) != (jbyte) (jint) 0xff) {
        return false;
      }
    }
    return true;
  }
  return false;
}

JavaNetInet4Address *ComGoogleCommonNetInetAddresses_getCoercedIPv4AddressWithJavaNetInetAddress_(JavaNetInetAddress *ip) {
  ComGoogleCommonNetInetAddresses_initialize();
  if ([ip isKindOfClass:[JavaNetInet4Address class]]) {
    return (JavaNetInet4Address *) cast_chk(ip, [JavaNetInet4Address class]);
  }
  IOSByteArray *bytes = [((JavaNetInetAddress *) nil_chk(ip)) getAddress];
  jboolean leadingBytesOfZero = true;
  for (jint i = 0; i < 15; ++i) {
    if (IOSByteArray_Get(nil_chk(bytes), i) != 0) {
      leadingBytesOfZero = false;
      break;
    }
  }
  if (leadingBytesOfZero && (IOSByteArray_Get(nil_chk(bytes), 15) == 1)) {
    return ComGoogleCommonNetInetAddresses_LOOPBACK4;
  }
  else if (leadingBytesOfZero && (IOSByteArray_Get(nil_chk(bytes), 15) == 0)) {
    return ComGoogleCommonNetInetAddresses_ANY4;
  }
  JavaNetInet6Address *ip6 = (JavaNetInet6Address *) cast_chk(ip, [JavaNetInet6Address class]);
  jlong addressAsLong = 0;
  if (ComGoogleCommonNetInetAddresses_hasEmbeddedIPv4ClientAddressWithJavaNetInet6Address_(ip6)) {
    addressAsLong = ((jint) [((JavaNetInet4Address *) nil_chk(ComGoogleCommonNetInetAddresses_getEmbeddedIPv4ClientAddressWithJavaNetInet6Address_(ip6))) hash]);
  }
  else {
    addressAsLong = [((JavaNioByteBuffer *) nil_chk(JavaNioByteBuffer_wrapWithByteArray_withInt_withInt_([ip6 getAddress], 0, 8))) getLong];
  }
  jint coercedHash = [((ComGoogleCommonHashHashCode *) nil_chk([((id<ComGoogleCommonHashHashFunction>) nil_chk(ComGoogleCommonHashHashing_murmur3_32())) hashLongWithLong:addressAsLong])) asInt];
  coercedHash |= (jint) 0xe0000000;
  if (coercedHash == (jint) 0xffffffff) {
    coercedHash = (jint) 0xfffffffe;
  }
  return ComGoogleCommonNetInetAddresses_getInet4AddressWithByteArray_(ComGoogleCommonPrimitivesInts_toByteArrayWithInt_(coercedHash));
}

jint ComGoogleCommonNetInetAddresses_coerceToIntegerWithJavaNetInetAddress_(JavaNetInetAddress *ip) {
  ComGoogleCommonNetInetAddresses_initialize();
  return [((id<ComGoogleCommonIoByteArrayDataInput>) nil_chk(ComGoogleCommonIoByteStreams_newDataInputWithByteArray_([((JavaNetInet4Address *) nil_chk(ComGoogleCommonNetInetAddresses_getCoercedIPv4AddressWithJavaNetInetAddress_(ip))) getAddress]))) readInt];
}

JavaNetInet4Address *ComGoogleCommonNetInetAddresses_fromIntegerWithInt_(jint address) {
  ComGoogleCommonNetInetAddresses_initialize();
  return ComGoogleCommonNetInetAddresses_getInet4AddressWithByteArray_(ComGoogleCommonPrimitivesInts_toByteArrayWithInt_(address));
}

JavaNetInetAddress *ComGoogleCommonNetInetAddresses_fromLittleEndianByteArrayWithByteArray_(IOSByteArray *addr) {
  ComGoogleCommonNetInetAddresses_initialize();
  IOSByteArray *reversed = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(addr))->size_];
  for (jint i = 0; i < addr->size_; i++) {
    *IOSByteArray_GetRef(reversed, i) = IOSByteArray_Get(addr, addr->size_ - i - 1);
  }
  return JavaNetInetAddress_getByAddressWithByteArray_(reversed);
}

JavaNetInetAddress *ComGoogleCommonNetInetAddresses_decrementWithJavaNetInetAddress_(JavaNetInetAddress *address) {
  ComGoogleCommonNetInetAddresses_initialize();
  IOSByteArray *addr = [((JavaNetInetAddress *) nil_chk(address)) getAddress];
  jint i = ((IOSByteArray *) nil_chk(addr))->size_ - 1;
  while (i >= 0 && IOSByteArray_Get(addr, i) == (jbyte) (jint) 0x00) {
    *IOSByteArray_GetRef(addr, i) = (jbyte) (jint) 0xff;
    i--;
  }
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_(i >= 0, @"Decrementing %s would wrap.", address);
  (*IOSByteArray_GetRef(addr, i))--;
  return ComGoogleCommonNetInetAddresses_bytesToInetAddressWithByteArray_(addr);
}

JavaNetInetAddress *ComGoogleCommonNetInetAddresses_incrementWithJavaNetInetAddress_(JavaNetInetAddress *address) {
  ComGoogleCommonNetInetAddresses_initialize();
  IOSByteArray *addr = [((JavaNetInetAddress *) nil_chk(address)) getAddress];
  jint i = ((IOSByteArray *) nil_chk(addr))->size_ - 1;
  while (i >= 0 && IOSByteArray_Get(addr, i) == (jbyte) (jint) 0xff) {
    *IOSByteArray_GetRef(addr, i) = 0;
    i--;
  }
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_(i >= 0, @"Incrementing %s would wrap.", address);
  (*IOSByteArray_GetRef(addr, i))++;
  return ComGoogleCommonNetInetAddresses_bytesToInetAddressWithByteArray_(addr);
}

jboolean ComGoogleCommonNetInetAddresses_isMaximumWithJavaNetInetAddress_(JavaNetInetAddress *address) {
  ComGoogleCommonNetInetAddresses_initialize();
  IOSByteArray *addr = [((JavaNetInetAddress *) nil_chk(address)) getAddress];
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(addr))->size_; i++) {
    if (IOSByteArray_Get(addr, i) != (jbyte) (jint) 0xff) {
      return false;
    }
  }
  return true;
}

JavaLangIllegalArgumentException *ComGoogleCommonNetInetAddresses_formatIllegalArgumentExceptionWithNSString_withNSObjectArray_(NSString *format, IOSObjectArray *args) {
  ComGoogleCommonNetInetAddresses_initialize();
  return new_JavaLangIllegalArgumentException_initWithNSString_(NSString_java_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT), format, args));
}

IOSObjectArray *ComGoogleCommonNetInetAddresses__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonNetInetAddresses__Annotations$1() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonNetInetAddresses__Annotations$2() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonNetInetAddresses__Annotations$3() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonNetInetAddresses__Annotations$4() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonNetInetAddresses)

@implementation ComGoogleCommonNetInetAddresses_TeredoInfo

- (instancetype)initWithJavaNetInet4Address:(JavaNetInet4Address *)server
                    withJavaNetInet4Address:(JavaNetInet4Address *)client
                                    withInt:(jint)port
                                    withInt:(jint)flags {
  ComGoogleCommonNetInetAddresses_TeredoInfo_initWithJavaNetInet4Address_withJavaNetInet4Address_withInt_withInt_(self, server, client, port, flags);
  return self;
}

- (JavaNetInet4Address *)getServer {
  return server_;
}

- (JavaNetInet4Address *)getClient {
  return client_;
}

- (jint)getPort {
  return port_;
}

- (jint)getFlags {
  return flags_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, 1 },
    { NULL, "LJavaNetInet4Address;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetInet4Address;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaNetInet4Address:withJavaNetInet4Address:withInt:withInt:);
  methods[1].selector = @selector(getServer);
  methods[2].selector = @selector(getClient);
  methods[3].selector = @selector(getPort);
  methods[4].selector = @selector(getFlags);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "server_", "LJavaNetInet4Address;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "client_", "LJavaNetInet4Address;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "port_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "flags_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaNetInet4Address;LJavaNetInet4Address;II", (void *)&ComGoogleCommonNetInetAddresses_TeredoInfo__Annotations$0, "LComGoogleCommonNetInetAddresses;" };
  static const J2ObjcClassInfo _ComGoogleCommonNetInetAddresses_TeredoInfo = { "TeredoInfo", "com.google.common.net", ptrTable, methods, fields, 7, 0x19, 5, 4, 2, -1, -1, -1, -1 };
  return &_ComGoogleCommonNetInetAddresses_TeredoInfo;
}

@end

void ComGoogleCommonNetInetAddresses_TeredoInfo_initWithJavaNetInet4Address_withJavaNetInet4Address_withInt_withInt_(ComGoogleCommonNetInetAddresses_TeredoInfo *self, JavaNetInet4Address *server, JavaNetInet4Address *client, jint port, jint flags) {
  NSObject_init(self);
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withInt_((port >= 0) && (port <= (jint) 0xffff), @"port '%s' is out of range (0 <= port <= 0xffff)", port);
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withInt_((flags >= 0) && (flags <= (jint) 0xffff), @"flags '%s' is out of range (0 <= flags <= 0xffff)", flags);
  self->server_ = ComGoogleCommonBaseMoreObjects_firstNonNullWithId_withId_(server, JreLoadStatic(ComGoogleCommonNetInetAddresses, ANY4));
  self->client_ = ComGoogleCommonBaseMoreObjects_firstNonNullWithId_withId_(client, JreLoadStatic(ComGoogleCommonNetInetAddresses, ANY4));
  self->port_ = port;
  self->flags_ = flags;
}

ComGoogleCommonNetInetAddresses_TeredoInfo *new_ComGoogleCommonNetInetAddresses_TeredoInfo_initWithJavaNetInet4Address_withJavaNetInet4Address_withInt_withInt_(JavaNetInet4Address *server, JavaNetInet4Address *client, jint port, jint flags) {
  J2OBJC_NEW_IMPL(ComGoogleCommonNetInetAddresses_TeredoInfo, initWithJavaNetInet4Address_withJavaNetInet4Address_withInt_withInt_, server, client, port, flags)
}

ComGoogleCommonNetInetAddresses_TeredoInfo *create_ComGoogleCommonNetInetAddresses_TeredoInfo_initWithJavaNetInet4Address_withJavaNetInet4Address_withInt_withInt_(JavaNetInet4Address *server, JavaNetInet4Address *client, jint port, jint flags) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonNetInetAddresses_TeredoInfo, initWithJavaNetInet4Address_withJavaNetInet4Address_withInt_withInt_, server, client, port, flags)
}

IOSObjectArray *ComGoogleCommonNetInetAddresses_TeredoInfo__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()] } count:4 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonNetInetAddresses_TeredoInfo)
