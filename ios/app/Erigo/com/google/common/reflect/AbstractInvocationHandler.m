//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/reflect/AbstractInvocationHandler.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/reflect/AbstractInvocationHandler.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/InvocationHandler.h"
#include "java/lang/reflect/Method.h"
#include "java/lang/reflect/Proxy.h"
#include "java/util/Arrays.h"
#include "javax/annotation/Nullable.h"

@interface ComGoogleCommonReflectAbstractInvocationHandler ()

+ (jboolean)isProxyOfSameInterfacesWithId:(id)arg
                             withIOSClass:(IOSClass *)proxyClass;

@end

inline IOSObjectArray *ComGoogleCommonReflectAbstractInvocationHandler_get_NO_ARGS();
static IOSObjectArray *ComGoogleCommonReflectAbstractInvocationHandler_NO_ARGS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonReflectAbstractInvocationHandler, NO_ARGS, IOSObjectArray *)

__attribute__((unused)) static jboolean ComGoogleCommonReflectAbstractInvocationHandler_isProxyOfSameInterfacesWithId_withIOSClass_(id arg, IOSClass *proxyClass);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonReflectAbstractInvocationHandler__Annotations$0();

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonReflectAbstractInvocationHandler)

@implementation ComGoogleCommonReflectAbstractInvocationHandler

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonReflectAbstractInvocationHandler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)invokeWithId:(id)proxy
withJavaLangReflectMethod:(JavaLangReflectMethod *)method
 withNSObjectArray:(IOSObjectArray *)args {
  if (args == nil) {
    args = ComGoogleCommonReflectAbstractInvocationHandler_NO_ARGS;
  }
  if (((IOSObjectArray *) nil_chk(args))->size_ == 0 && [((NSString *) nil_chk([((JavaLangReflectMethod *) nil_chk(method)) getName])) isEqual:@"hashCode"]) {
    return JavaLangInteger_valueOfWithInt_(((jint) [self hash]));
  }
  if (args->size_ == 1 && [((NSString *) nil_chk([((JavaLangReflectMethod *) nil_chk(method)) getName])) isEqual:@"equals"] && IOSObjectArray_Get(nil_chk([method getParameterTypes]), 0) == NSObject_class_()) {
    id arg = IOSObjectArray_Get(args, 0);
    if (arg == nil) {
      return JavaLangBoolean_valueOfWithBoolean_(false);
    }
    if (proxy == arg) {
      return JavaLangBoolean_valueOfWithBoolean_(true);
    }
    return JavaLangBoolean_valueOfWithBoolean_(ComGoogleCommonReflectAbstractInvocationHandler_isProxyOfSameInterfacesWithId_withIOSClass_(arg, [nil_chk(proxy) java_getClass]) && [self isEqual:JavaLangReflectProxy_getInvocationHandlerWithId_(arg)]);
  }
  if (args->size_ == 0 && [((NSString *) nil_chk([((JavaLangReflectMethod *) nil_chk(method)) getName])) isEqual:@"toString"]) {
    return [self description];
  }
  return [self handleInvocationWithId:proxy withJavaLangReflectMethod:method withNSObjectArray:args];
}

- (id)handleInvocationWithId:(id)proxy
   withJavaLangReflectMethod:(JavaLangReflectMethod *)method
           withNSObjectArray:(IOSObjectArray *)args {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isEqual:(id)obj {
  return [super isEqual:obj];
}

- (NSUInteger)hash {
  return ((jint) [super hash]);
}

- (NSString *)description {
  return [super description];
}

+ (jboolean)isProxyOfSameInterfacesWithId:(id)arg
                             withIOSClass:(IOSClass *)proxyClass {
  return ComGoogleCommonReflectAbstractInvocationHandler_isProxyOfSameInterfacesWithId_withIOSClass_(arg, proxyClass);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x11, 0, 1, 2, -1, -1, 3 },
    { NULL, "LNSObject;", 0x404, 4, 1, 2, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 9, 10, -1, 11, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(invokeWithId:withJavaLangReflectMethod:withNSObjectArray:);
  methods[2].selector = @selector(handleInvocationWithId:withJavaLangReflectMethod:withNSObjectArray:);
  methods[3].selector = @selector(isEqual:);
  methods[4].selector = @selector(hash);
  methods[5].selector = @selector(description);
  methods[6].selector = @selector(isProxyOfSameInterfacesWithId:withIOSClass:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NO_ARGS", "[LNSObject;", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
  };
  static const void *ptrTable[] = { "invoke", "LNSObject;LJavaLangReflectMethod;[LNSObject;", "LNSException;", (void *)&ComGoogleCommonReflectAbstractInvocationHandler__Annotations$0, "handleInvocation", "equals", "LNSObject;", "hashCode", "toString", "isProxyOfSameInterfaces", "LNSObject;LIOSClass;", "(Ljava/lang/Object;Ljava/lang/Class<*>;)Z", &ComGoogleCommonReflectAbstractInvocationHandler_NO_ARGS };
  static const J2ObjcClassInfo _ComGoogleCommonReflectAbstractInvocationHandler = { "AbstractInvocationHandler", "com.google.common.reflect", ptrTable, methods, fields, 7, 0x401, 7, 1, -1, -1, -1, -1, -1 };
  return &_ComGoogleCommonReflectAbstractInvocationHandler;
}

+ (void)initialize {
  if (self == [ComGoogleCommonReflectAbstractInvocationHandler class]) {
    ComGoogleCommonReflectAbstractInvocationHandler_NO_ARGS = [IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSObject_class_()];
    J2OBJC_SET_INITIALIZED(ComGoogleCommonReflectAbstractInvocationHandler)
  }
}

@end

void ComGoogleCommonReflectAbstractInvocationHandler_init(ComGoogleCommonReflectAbstractInvocationHandler *self) {
  NSObject_init(self);
}

jboolean ComGoogleCommonReflectAbstractInvocationHandler_isProxyOfSameInterfacesWithId_withIOSClass_(id arg, IOSClass *proxyClass) {
  ComGoogleCommonReflectAbstractInvocationHandler_initialize();
  return [((IOSClass *) nil_chk(proxyClass)) isInstance:arg] || (JavaLangReflectProxy_isProxyClassWithIOSClass_([nil_chk(arg) java_getClass]) && JavaUtilArrays_equalsWithNSObjectArray_withNSObjectArray_([[arg java_getClass] getInterfaces], [proxyClass getInterfaces]));
}

IOSObjectArray *ComGoogleCommonReflectAbstractInvocationHandler__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:3 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonReflectAbstractInvocationHandler)
