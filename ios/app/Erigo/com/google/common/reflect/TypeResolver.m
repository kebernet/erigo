//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/reflect/TypeResolver.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Joiner.h"
#include "com/google/common/base/Objects.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/collect/ImmutableMap.h"
#include "com/google/common/collect/Maps.h"
#include "com/google/common/reflect/TypeResolver.h"
#include "com/google/common/reflect/TypeVisitor.h"
#include "com/google/common/reflect/Types.h"
#include "java/lang/AssertionError.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/GenericArrayType.h"
#include "java/lang/reflect/GenericDeclaration.h"
#include "java/lang/reflect/ParameterizedType.h"
#include "java/lang/reflect/Type.h"
#include "java/lang/reflect/TypeVariable.h"
#include "java/lang/reflect/WildcardType.h"
#include "java/util/Arrays.h"
#include "java/util/HashMap.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "javax/annotation/Nullable.h"

@class ComGoogleCommonReflectTypeResolver_TypeTable;
@class ComGoogleCommonReflectTypeResolver_WildcardCapturer;

@interface ComGoogleCommonReflectTypeResolver () {
 @public
  ComGoogleCommonReflectTypeResolver_TypeTable *typeTable_;
}

- (instancetype)initWithComGoogleCommonReflectTypeResolver_TypeTable:(ComGoogleCommonReflectTypeResolver_TypeTable *)typeTable;

+ (void)populateTypeMappingsWithJavaUtilMap:(id<JavaUtilMap>)mappings
                    withJavaLangReflectType:(id<JavaLangReflectType>)from
                    withJavaLangReflectType:(id<JavaLangReflectType>)to;

- (IOSObjectArray *)resolveTypesWithJavaLangReflectTypeArray:(IOSObjectArray *)types;

- (id<JavaLangReflectWildcardType>)resolveWildcardTypeWithJavaLangReflectWildcardType:(id<JavaLangReflectWildcardType>)type;

- (id<JavaLangReflectType>)resolveGenericArrayTypeWithJavaLangReflectGenericArrayType:(id<JavaLangReflectGenericArrayType>)type;

- (id<JavaLangReflectParameterizedType>)resolveParameterizedTypeWithJavaLangReflectParameterizedType:(id<JavaLangReflectParameterizedType>)type;

+ (id)expectArgumentWithIOSClass:(IOSClass *)type
                          withId:(id)arg;

@end

J2OBJC_FIELD_SETTER(ComGoogleCommonReflectTypeResolver, typeTable_, ComGoogleCommonReflectTypeResolver_TypeTable *)

__attribute__((unused)) static void ComGoogleCommonReflectTypeResolver_initWithComGoogleCommonReflectTypeResolver_TypeTable_(ComGoogleCommonReflectTypeResolver *self, ComGoogleCommonReflectTypeResolver_TypeTable *typeTable);

__attribute__((unused)) static ComGoogleCommonReflectTypeResolver *new_ComGoogleCommonReflectTypeResolver_initWithComGoogleCommonReflectTypeResolver_TypeTable_(ComGoogleCommonReflectTypeResolver_TypeTable *typeTable) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonReflectTypeResolver *create_ComGoogleCommonReflectTypeResolver_initWithComGoogleCommonReflectTypeResolver_TypeTable_(ComGoogleCommonReflectTypeResolver_TypeTable *typeTable);

__attribute__((unused)) static void ComGoogleCommonReflectTypeResolver_populateTypeMappingsWithJavaUtilMap_withJavaLangReflectType_withJavaLangReflectType_(id<JavaUtilMap> mappings, id<JavaLangReflectType> from, id<JavaLangReflectType> to);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonReflectTypeResolver_resolveTypesWithJavaLangReflectTypeArray_(ComGoogleCommonReflectTypeResolver *self, IOSObjectArray *types);

__attribute__((unused)) static id<JavaLangReflectWildcardType> ComGoogleCommonReflectTypeResolver_resolveWildcardTypeWithJavaLangReflectWildcardType_(ComGoogleCommonReflectTypeResolver *self, id<JavaLangReflectWildcardType> type);

__attribute__((unused)) static id<JavaLangReflectType> ComGoogleCommonReflectTypeResolver_resolveGenericArrayTypeWithJavaLangReflectGenericArrayType_(ComGoogleCommonReflectTypeResolver *self, id<JavaLangReflectGenericArrayType> type);

__attribute__((unused)) static id<JavaLangReflectParameterizedType> ComGoogleCommonReflectTypeResolver_resolveParameterizedTypeWithJavaLangReflectParameterizedType_(ComGoogleCommonReflectTypeResolver *self, id<JavaLangReflectParameterizedType> type);

__attribute__((unused)) static id ComGoogleCommonReflectTypeResolver_expectArgumentWithIOSClass_withId_(IOSClass *type, id arg);

@interface ComGoogleCommonReflectTypeResolver_1 : ComGoogleCommonReflectTypeVisitor {
 @public
  id<JavaUtilMap> val$mappings_;
  id<JavaLangReflectType> val$to_;
}

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)capture$0
            withJavaLangReflectType:(id<JavaLangReflectType>)capture$1;

- (void)visitTypeVariableWithJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>)typeVariable;

- (void)visitWildcardTypeWithJavaLangReflectWildcardType:(id<JavaLangReflectWildcardType>)fromWildcardType;

- (void)visitParameterizedTypeWithJavaLangReflectParameterizedType:(id<JavaLangReflectParameterizedType>)fromParameterizedType;

- (void)visitGenericArrayTypeWithJavaLangReflectGenericArrayType:(id<JavaLangReflectGenericArrayType>)fromArrayType;

- (void)visitClassWithIOSClass:(IOSClass *)fromClass;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonReflectTypeResolver_1)

__attribute__((unused)) static void ComGoogleCommonReflectTypeResolver_1_initWithJavaUtilMap_withJavaLangReflectType_(ComGoogleCommonReflectTypeResolver_1 *self, id<JavaUtilMap> capture$0, id<JavaLangReflectType> capture$1);

__attribute__((unused)) static ComGoogleCommonReflectTypeResolver_1 *new_ComGoogleCommonReflectTypeResolver_1_initWithJavaUtilMap_withJavaLangReflectType_(id<JavaUtilMap> capture$0, id<JavaLangReflectType> capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonReflectTypeResolver_1 *create_ComGoogleCommonReflectTypeResolver_1_initWithJavaUtilMap_withJavaLangReflectType_(id<JavaUtilMap> capture$0, id<JavaLangReflectType> capture$1);

@interface ComGoogleCommonReflectTypeResolver_TypeTable : NSObject {
 @public
  ComGoogleCommonCollectImmutableMap *map_;
}

- (instancetype)init;

- (instancetype)initWithComGoogleCommonCollectImmutableMap:(ComGoogleCommonCollectImmutableMap *)map;

- (ComGoogleCommonReflectTypeResolver_TypeTable *)whereWithJavaUtilMap:(id<JavaUtilMap>)mappings;

- (id<JavaLangReflectType>)resolveWithJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>)var;

- (id<JavaLangReflectType>)resolveInternalWithJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>)var
                         withComGoogleCommonReflectTypeResolver_TypeTable:(ComGoogleCommonReflectTypeResolver_TypeTable *)forDependants;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonReflectTypeResolver_TypeTable)

J2OBJC_FIELD_SETTER(ComGoogleCommonReflectTypeResolver_TypeTable, map_, ComGoogleCommonCollectImmutableMap *)

__attribute__((unused)) static void ComGoogleCommonReflectTypeResolver_TypeTable_init(ComGoogleCommonReflectTypeResolver_TypeTable *self);

__attribute__((unused)) static ComGoogleCommonReflectTypeResolver_TypeTable *new_ComGoogleCommonReflectTypeResolver_TypeTable_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonReflectTypeResolver_TypeTable *create_ComGoogleCommonReflectTypeResolver_TypeTable_init();

__attribute__((unused)) static void ComGoogleCommonReflectTypeResolver_TypeTable_initWithComGoogleCommonCollectImmutableMap_(ComGoogleCommonReflectTypeResolver_TypeTable *self, ComGoogleCommonCollectImmutableMap *map);

__attribute__((unused)) static ComGoogleCommonReflectTypeResolver_TypeTable *new_ComGoogleCommonReflectTypeResolver_TypeTable_initWithComGoogleCommonCollectImmutableMap_(ComGoogleCommonCollectImmutableMap *map) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonReflectTypeResolver_TypeTable *create_ComGoogleCommonReflectTypeResolver_TypeTable_initWithComGoogleCommonCollectImmutableMap_(ComGoogleCommonCollectImmutableMap *map);

__attribute__((unused)) static ComGoogleCommonReflectTypeResolver_TypeTable *ComGoogleCommonReflectTypeResolver_TypeTable_whereWithJavaUtilMap_(ComGoogleCommonReflectTypeResolver_TypeTable *self, id<JavaUtilMap> mappings);

__attribute__((unused)) static id<JavaLangReflectType> ComGoogleCommonReflectTypeResolver_TypeTable_resolveWithJavaLangReflectTypeVariable_(ComGoogleCommonReflectTypeResolver_TypeTable *self, id<JavaLangReflectTypeVariable> var);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonReflectTypeResolver_TypeTable)

@interface ComGoogleCommonReflectTypeResolver_TypeTable_1 : ComGoogleCommonReflectTypeResolver_TypeTable {
 @public
  id<JavaLangReflectTypeVariable> val$var_;
  ComGoogleCommonReflectTypeResolver_TypeTable *val$unguarded_;
}

- (instancetype)initWithJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>)capture$0
   withComGoogleCommonReflectTypeResolver_TypeTable:(ComGoogleCommonReflectTypeResolver_TypeTable *)capture$1;

- (id<JavaLangReflectType>)resolveInternalWithJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>)intermediateVar
                         withComGoogleCommonReflectTypeResolver_TypeTable:(ComGoogleCommonReflectTypeResolver_TypeTable *)forDependent;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonReflectTypeResolver_TypeTable_1)

__attribute__((unused)) static void ComGoogleCommonReflectTypeResolver_TypeTable_1_initWithJavaLangReflectTypeVariable_withComGoogleCommonReflectTypeResolver_TypeTable_(ComGoogleCommonReflectTypeResolver_TypeTable_1 *self, id<JavaLangReflectTypeVariable> capture$0, ComGoogleCommonReflectTypeResolver_TypeTable *capture$1);

__attribute__((unused)) static ComGoogleCommonReflectTypeResolver_TypeTable_1 *new_ComGoogleCommonReflectTypeResolver_TypeTable_1_initWithJavaLangReflectTypeVariable_withComGoogleCommonReflectTypeResolver_TypeTable_(id<JavaLangReflectTypeVariable> capture$0, ComGoogleCommonReflectTypeResolver_TypeTable *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonReflectTypeResolver_TypeTable_1 *create_ComGoogleCommonReflectTypeResolver_TypeTable_1_initWithJavaLangReflectTypeVariable_withComGoogleCommonReflectTypeResolver_TypeTable_(id<JavaLangReflectTypeVariable> capture$0, ComGoogleCommonReflectTypeResolver_TypeTable *capture$1);

@interface ComGoogleCommonReflectTypeResolver_TypeMappingIntrospector : ComGoogleCommonReflectTypeVisitor {
 @public
  id<JavaUtilMap> mappings_;
}

- (instancetype)init;

+ (ComGoogleCommonCollectImmutableMap *)getTypeMappingsWithJavaLangReflectType:(id<JavaLangReflectType>)contextType;

- (void)visitClassWithIOSClass:(IOSClass *)clazz;

- (void)visitParameterizedTypeWithJavaLangReflectParameterizedType:(id<JavaLangReflectParameterizedType>)parameterizedType;

- (void)visitTypeVariableWithJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>)t;

- (void)visitWildcardTypeWithJavaLangReflectWildcardType:(id<JavaLangReflectWildcardType>)t;

- (void)mapWithComGoogleCommonReflectTypeResolver_TypeVariableKey:(ComGoogleCommonReflectTypeResolver_TypeVariableKey *)var
                                          withJavaLangReflectType:(id<JavaLangReflectType>)arg;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonReflectTypeResolver_TypeMappingIntrospector)

J2OBJC_FIELD_SETTER(ComGoogleCommonReflectTypeResolver_TypeMappingIntrospector, mappings_, id<JavaUtilMap>)

inline ComGoogleCommonReflectTypeResolver_WildcardCapturer *ComGoogleCommonReflectTypeResolver_TypeMappingIntrospector_get_wildcardCapturer();
static ComGoogleCommonReflectTypeResolver_WildcardCapturer *ComGoogleCommonReflectTypeResolver_TypeMappingIntrospector_wildcardCapturer;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonReflectTypeResolver_TypeMappingIntrospector, wildcardCapturer, ComGoogleCommonReflectTypeResolver_WildcardCapturer *)

__attribute__((unused)) static void ComGoogleCommonReflectTypeResolver_TypeMappingIntrospector_init(ComGoogleCommonReflectTypeResolver_TypeMappingIntrospector *self);

__attribute__((unused)) static ComGoogleCommonReflectTypeResolver_TypeMappingIntrospector *new_ComGoogleCommonReflectTypeResolver_TypeMappingIntrospector_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonReflectTypeResolver_TypeMappingIntrospector *create_ComGoogleCommonReflectTypeResolver_TypeMappingIntrospector_init();

__attribute__((unused)) static ComGoogleCommonCollectImmutableMap *ComGoogleCommonReflectTypeResolver_TypeMappingIntrospector_getTypeMappingsWithJavaLangReflectType_(id<JavaLangReflectType> contextType);

__attribute__((unused)) static void ComGoogleCommonReflectTypeResolver_TypeMappingIntrospector_mapWithComGoogleCommonReflectTypeResolver_TypeVariableKey_withJavaLangReflectType_(ComGoogleCommonReflectTypeResolver_TypeMappingIntrospector *self, ComGoogleCommonReflectTypeResolver_TypeVariableKey *var, id<JavaLangReflectType> arg);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonReflectTypeResolver_TypeMappingIntrospector)

@interface ComGoogleCommonReflectTypeResolver_WildcardCapturer : NSObject {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *id__;
}

- (instancetype)init;

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)id_;

- (id<JavaLangReflectType>)captureWithJavaLangReflectType:(id<JavaLangReflectType>)type;

- (id<JavaLangReflectTypeVariable>)captureAsTypeVariableWithJavaLangReflectTypeArray:(IOSObjectArray *)upperBounds;

- (ComGoogleCommonReflectTypeResolver_WildcardCapturer *)forTypeVariableWithJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>)typeParam;

- (ComGoogleCommonReflectTypeResolver_WildcardCapturer *)notForTypeVariable;

- (id<JavaLangReflectType>)captureNullableWithJavaLangReflectType:(id<JavaLangReflectType>)type;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonReflectTypeResolver_WildcardCapturer)

J2OBJC_FIELD_SETTER(ComGoogleCommonReflectTypeResolver_WildcardCapturer, id__, JavaUtilConcurrentAtomicAtomicInteger *)

__attribute__((unused)) static void ComGoogleCommonReflectTypeResolver_WildcardCapturer_init(ComGoogleCommonReflectTypeResolver_WildcardCapturer *self);

__attribute__((unused)) static ComGoogleCommonReflectTypeResolver_WildcardCapturer *new_ComGoogleCommonReflectTypeResolver_WildcardCapturer_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonReflectTypeResolver_WildcardCapturer *create_ComGoogleCommonReflectTypeResolver_WildcardCapturer_init();

__attribute__((unused)) static void ComGoogleCommonReflectTypeResolver_WildcardCapturer_initWithJavaUtilConcurrentAtomicAtomicInteger_(ComGoogleCommonReflectTypeResolver_WildcardCapturer *self, JavaUtilConcurrentAtomicAtomicInteger *id_);

__attribute__((unused)) static ComGoogleCommonReflectTypeResolver_WildcardCapturer *new_ComGoogleCommonReflectTypeResolver_WildcardCapturer_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *id_) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonReflectTypeResolver_WildcardCapturer *create_ComGoogleCommonReflectTypeResolver_WildcardCapturer_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *id_);

__attribute__((unused)) static id<JavaLangReflectType> ComGoogleCommonReflectTypeResolver_WildcardCapturer_captureWithJavaLangReflectType_(ComGoogleCommonReflectTypeResolver_WildcardCapturer *self, id<JavaLangReflectType> type);

__attribute__((unused)) static ComGoogleCommonReflectTypeResolver_WildcardCapturer *ComGoogleCommonReflectTypeResolver_WildcardCapturer_forTypeVariableWithJavaLangReflectTypeVariable_(ComGoogleCommonReflectTypeResolver_WildcardCapturer *self, id<JavaLangReflectTypeVariable> typeParam);

__attribute__((unused)) static ComGoogleCommonReflectTypeResolver_WildcardCapturer *ComGoogleCommonReflectTypeResolver_WildcardCapturer_notForTypeVariable(ComGoogleCommonReflectTypeResolver_WildcardCapturer *self);

__attribute__((unused)) static id<JavaLangReflectType> ComGoogleCommonReflectTypeResolver_WildcardCapturer_captureNullableWithJavaLangReflectType_(ComGoogleCommonReflectTypeResolver_WildcardCapturer *self, id<JavaLangReflectType> type);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonReflectTypeResolver_WildcardCapturer__Annotations$0();

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonReflectTypeResolver_WildcardCapturer)

@interface ComGoogleCommonReflectTypeResolver_WildcardCapturer_1 : ComGoogleCommonReflectTypeResolver_WildcardCapturer {
 @public
  id<JavaLangReflectTypeVariable> val$typeParam_;
}

- (instancetype)initWithJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>)capture$0
          withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)id_;

- (id<JavaLangReflectTypeVariable>)captureAsTypeVariableWithJavaLangReflectTypeArray:(IOSObjectArray *)upperBounds;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonReflectTypeResolver_WildcardCapturer_1)

__attribute__((unused)) static void ComGoogleCommonReflectTypeResolver_WildcardCapturer_1_initWithJavaLangReflectTypeVariable_withJavaUtilConcurrentAtomicAtomicInteger_(ComGoogleCommonReflectTypeResolver_WildcardCapturer_1 *self, id<JavaLangReflectTypeVariable> capture$0, JavaUtilConcurrentAtomicAtomicInteger *id_);

__attribute__((unused)) static ComGoogleCommonReflectTypeResolver_WildcardCapturer_1 *new_ComGoogleCommonReflectTypeResolver_WildcardCapturer_1_initWithJavaLangReflectTypeVariable_withJavaUtilConcurrentAtomicAtomicInteger_(id<JavaLangReflectTypeVariable> capture$0, JavaUtilConcurrentAtomicAtomicInteger *id_) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonReflectTypeResolver_WildcardCapturer_1 *create_ComGoogleCommonReflectTypeResolver_WildcardCapturer_1_initWithJavaLangReflectTypeVariable_withJavaUtilConcurrentAtomicAtomicInteger_(id<JavaLangReflectTypeVariable> capture$0, JavaUtilConcurrentAtomicAtomicInteger *id_);

@interface ComGoogleCommonReflectTypeResolver_TypeVariableKey () {
 @public
  id<JavaLangReflectTypeVariable> var_;
}

- (jboolean)equalsTypeVariableWithJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>)that;

@end

J2OBJC_FIELD_SETTER(ComGoogleCommonReflectTypeResolver_TypeVariableKey, var_, id<JavaLangReflectTypeVariable>)

__attribute__((unused)) static jboolean ComGoogleCommonReflectTypeResolver_TypeVariableKey_equalsTypeVariableWithJavaLangReflectTypeVariable_(ComGoogleCommonReflectTypeResolver_TypeVariableKey *self, id<JavaLangReflectTypeVariable> that);

@implementation ComGoogleCommonReflectTypeResolver

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonReflectTypeResolver_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithComGoogleCommonReflectTypeResolver_TypeTable:(ComGoogleCommonReflectTypeResolver_TypeTable *)typeTable {
  ComGoogleCommonReflectTypeResolver_initWithComGoogleCommonReflectTypeResolver_TypeTable_(self, typeTable);
  return self;
}

+ (ComGoogleCommonReflectTypeResolver *)accordingToWithJavaLangReflectType:(id<JavaLangReflectType>)type {
  return ComGoogleCommonReflectTypeResolver_accordingToWithJavaLangReflectType_(type);
}

- (ComGoogleCommonReflectTypeResolver *)whereWithJavaLangReflectType:(id<JavaLangReflectType>)formal
                                             withJavaLangReflectType:(id<JavaLangReflectType>)actual {
  id<JavaUtilMap> mappings = ComGoogleCommonCollectMaps_newHashMap();
  ComGoogleCommonReflectTypeResolver_populateTypeMappingsWithJavaUtilMap_withJavaLangReflectType_withJavaLangReflectType_(mappings, ComGoogleCommonBasePreconditions_checkNotNullWithId_(formal), ComGoogleCommonBasePreconditions_checkNotNullWithId_(actual));
  return [self whereWithJavaUtilMap:mappings];
}

- (ComGoogleCommonReflectTypeResolver *)whereWithJavaUtilMap:(id<JavaUtilMap>)mappings {
  return new_ComGoogleCommonReflectTypeResolver_initWithComGoogleCommonReflectTypeResolver_TypeTable_(ComGoogleCommonReflectTypeResolver_TypeTable_whereWithJavaUtilMap_(nil_chk(typeTable_), mappings));
}

+ (void)populateTypeMappingsWithJavaUtilMap:(id<JavaUtilMap>)mappings
                    withJavaLangReflectType:(id<JavaLangReflectType>)from
                    withJavaLangReflectType:(id<JavaLangReflectType>)to {
  ComGoogleCommonReflectTypeResolver_populateTypeMappingsWithJavaUtilMap_withJavaLangReflectType_withJavaLangReflectType_(mappings, from, to);
}

- (id<JavaLangReflectType>)resolveTypeWithJavaLangReflectType:(id<JavaLangReflectType>)type {
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(type);
  if ([JavaLangReflectTypeVariable_class_() isInstance:type]) {
    return ComGoogleCommonReflectTypeResolver_TypeTable_resolveWithJavaLangReflectTypeVariable_(nil_chk(typeTable_), (id<JavaLangReflectTypeVariable>) cast_check(type, JavaLangReflectTypeVariable_class_()));
  }
  else if ([JavaLangReflectParameterizedType_class_() isInstance:type]) {
    return ComGoogleCommonReflectTypeResolver_resolveParameterizedTypeWithJavaLangReflectParameterizedType_(self, (id<JavaLangReflectParameterizedType>) cast_check(type, JavaLangReflectParameterizedType_class_()));
  }
  else if ([JavaLangReflectGenericArrayType_class_() isInstance:type]) {
    return ComGoogleCommonReflectTypeResolver_resolveGenericArrayTypeWithJavaLangReflectGenericArrayType_(self, (id<JavaLangReflectGenericArrayType>) cast_check(type, JavaLangReflectGenericArrayType_class_()));
  }
  else if ([JavaLangReflectWildcardType_class_() isInstance:type]) {
    return ComGoogleCommonReflectTypeResolver_resolveWildcardTypeWithJavaLangReflectWildcardType_(self, (id<JavaLangReflectWildcardType>) cast_check(type, JavaLangReflectWildcardType_class_()));
  }
  else {
    return type;
  }
}

- (IOSObjectArray *)resolveTypesWithJavaLangReflectTypeArray:(IOSObjectArray *)types {
  return ComGoogleCommonReflectTypeResolver_resolveTypesWithJavaLangReflectTypeArray_(self, types);
}

- (id<JavaLangReflectWildcardType>)resolveWildcardTypeWithJavaLangReflectWildcardType:(id<JavaLangReflectWildcardType>)type {
  return ComGoogleCommonReflectTypeResolver_resolveWildcardTypeWithJavaLangReflectWildcardType_(self, type);
}

- (id<JavaLangReflectType>)resolveGenericArrayTypeWithJavaLangReflectGenericArrayType:(id<JavaLangReflectGenericArrayType>)type {
  return ComGoogleCommonReflectTypeResolver_resolveGenericArrayTypeWithJavaLangReflectGenericArrayType_(self, type);
}

- (id<JavaLangReflectParameterizedType>)resolveParameterizedTypeWithJavaLangReflectParameterizedType:(id<JavaLangReflectParameterizedType>)type {
  return ComGoogleCommonReflectTypeResolver_resolveParameterizedTypeWithJavaLangReflectParameterizedType_(self, type);
}

+ (id)expectArgumentWithIOSClass:(IOSClass *)type
                          withId:(id)arg {
  return ComGoogleCommonReflectTypeResolver_expectArgumentWithIOSClass_withId_(type, arg);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonReflectTypeResolver;", 0x8, 1, 2, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonReflectTypeResolver;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonReflectTypeResolver;", 0x0, 3, 5, -1, 6, -1, -1 },
    { NULL, "V", 0xa, 7, 8, -1, 9, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x1, 10, 2, -1, -1, -1, -1 },
    { NULL, "[LJavaLangReflectType;", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectWildcardType;", 0x2, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x2, 15, 16, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectParameterizedType;", 0x2, 17, 18, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 19, 20, -1, 21, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithComGoogleCommonReflectTypeResolver_TypeTable:);
  methods[2].selector = @selector(accordingToWithJavaLangReflectType:);
  methods[3].selector = @selector(whereWithJavaLangReflectType:withJavaLangReflectType:);
  methods[4].selector = @selector(whereWithJavaUtilMap:);
  methods[5].selector = @selector(populateTypeMappingsWithJavaUtilMap:withJavaLangReflectType:withJavaLangReflectType:);
  methods[6].selector = @selector(resolveTypeWithJavaLangReflectType:);
  methods[7].selector = @selector(resolveTypesWithJavaLangReflectTypeArray:);
  methods[8].selector = @selector(resolveWildcardTypeWithJavaLangReflectWildcardType:);
  methods[9].selector = @selector(resolveGenericArrayTypeWithJavaLangReflectGenericArrayType:);
  methods[10].selector = @selector(resolveParameterizedTypeWithJavaLangReflectParameterizedType:);
  methods[11].selector = @selector(expectArgumentWithIOSClass:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "typeTable_", "LComGoogleCommonReflectTypeResolver_TypeTable;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonReflectTypeResolver_TypeTable;", "accordingTo", "LJavaLangReflectType;", "where", "LJavaLangReflectType;LJavaLangReflectType;", "LJavaUtilMap;", "(Ljava/util/Map<Lcom/google/common/reflect/TypeResolver$TypeVariableKey;+Ljava/lang/reflect/Type;>;)Lcom/google/common/reflect/TypeResolver;", "populateTypeMappings", "LJavaUtilMap;LJavaLangReflectType;LJavaLangReflectType;", "(Ljava/util/Map<Lcom/google/common/reflect/TypeResolver$TypeVariableKey;Ljava/lang/reflect/Type;>;Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)V", "resolveType", "resolveTypes", "[LJavaLangReflectType;", "resolveWildcardType", "LJavaLangReflectWildcardType;", "resolveGenericArrayType", "LJavaLangReflectGenericArrayType;", "resolveParameterizedType", "LJavaLangReflectParameterizedType;", "expectArgument", "LIOSClass;LNSObject;", "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;Ljava/lang/Object;)TT;", "LComGoogleCommonReflectTypeResolver_TypeTable;LComGoogleCommonReflectTypeResolver_TypeMappingIntrospector;LComGoogleCommonReflectTypeResolver_WildcardCapturer;LComGoogleCommonReflectTypeResolver_TypeVariableKey;" };
  static const J2ObjcClassInfo _ComGoogleCommonReflectTypeResolver = { "TypeResolver", "com.google.common.reflect", ptrTable, methods, fields, 7, 0x11, 12, 1, -1, 22, -1, -1, -1 };
  return &_ComGoogleCommonReflectTypeResolver;
}

@end

void ComGoogleCommonReflectTypeResolver_init(ComGoogleCommonReflectTypeResolver *self) {
  NSObject_init(self);
  self->typeTable_ = new_ComGoogleCommonReflectTypeResolver_TypeTable_init();
}

ComGoogleCommonReflectTypeResolver *new_ComGoogleCommonReflectTypeResolver_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonReflectTypeResolver, init)
}

ComGoogleCommonReflectTypeResolver *create_ComGoogleCommonReflectTypeResolver_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonReflectTypeResolver, init)
}

void ComGoogleCommonReflectTypeResolver_initWithComGoogleCommonReflectTypeResolver_TypeTable_(ComGoogleCommonReflectTypeResolver *self, ComGoogleCommonReflectTypeResolver_TypeTable *typeTable) {
  NSObject_init(self);
  self->typeTable_ = typeTable;
}

ComGoogleCommonReflectTypeResolver *new_ComGoogleCommonReflectTypeResolver_initWithComGoogleCommonReflectTypeResolver_TypeTable_(ComGoogleCommonReflectTypeResolver_TypeTable *typeTable) {
  J2OBJC_NEW_IMPL(ComGoogleCommonReflectTypeResolver, initWithComGoogleCommonReflectTypeResolver_TypeTable_, typeTable)
}

ComGoogleCommonReflectTypeResolver *create_ComGoogleCommonReflectTypeResolver_initWithComGoogleCommonReflectTypeResolver_TypeTable_(ComGoogleCommonReflectTypeResolver_TypeTable *typeTable) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonReflectTypeResolver, initWithComGoogleCommonReflectTypeResolver_TypeTable_, typeTable)
}

ComGoogleCommonReflectTypeResolver *ComGoogleCommonReflectTypeResolver_accordingToWithJavaLangReflectType_(id<JavaLangReflectType> type) {
  ComGoogleCommonReflectTypeResolver_initialize();
  return [new_ComGoogleCommonReflectTypeResolver_init() whereWithJavaUtilMap:ComGoogleCommonReflectTypeResolver_TypeMappingIntrospector_getTypeMappingsWithJavaLangReflectType_(type)];
}

void ComGoogleCommonReflectTypeResolver_populateTypeMappingsWithJavaUtilMap_withJavaLangReflectType_withJavaLangReflectType_(id<JavaUtilMap> mappings, id<JavaLangReflectType> from, id<JavaLangReflectType> to) {
  ComGoogleCommonReflectTypeResolver_initialize();
  if ([((id<JavaLangReflectType>) nil_chk(from)) isEqual:to]) {
    return;
  }
  [new_ComGoogleCommonReflectTypeResolver_1_initWithJavaUtilMap_withJavaLangReflectType_(mappings, to) visitWithJavaLangReflectTypeArray:[IOSObjectArray newArrayWithObjects:(id[]){ from } count:1 type:JavaLangReflectType_class_()]];
}

IOSObjectArray *ComGoogleCommonReflectTypeResolver_resolveTypesWithJavaLangReflectTypeArray_(ComGoogleCommonReflectTypeResolver *self, IOSObjectArray *types) {
  IOSObjectArray *result = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(types))->size_ type:JavaLangReflectType_class_()];
  for (jint i = 0; i < types->size_; i++) {
    (void) IOSObjectArray_Set(result, i, [self resolveTypeWithJavaLangReflectType:IOSObjectArray_Get(types, i)]);
  }
  return result;
}

id<JavaLangReflectWildcardType> ComGoogleCommonReflectTypeResolver_resolveWildcardTypeWithJavaLangReflectWildcardType_(ComGoogleCommonReflectTypeResolver *self, id<JavaLangReflectWildcardType> type) {
  IOSObjectArray *lowerBounds = [((id<JavaLangReflectWildcardType>) nil_chk(type)) getLowerBounds];
  IOSObjectArray *upperBounds = [type getUpperBounds];
  return new_ComGoogleCommonReflectTypes_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(ComGoogleCommonReflectTypeResolver_resolveTypesWithJavaLangReflectTypeArray_(self, lowerBounds), ComGoogleCommonReflectTypeResolver_resolveTypesWithJavaLangReflectTypeArray_(self, upperBounds));
}

id<JavaLangReflectType> ComGoogleCommonReflectTypeResolver_resolveGenericArrayTypeWithJavaLangReflectGenericArrayType_(ComGoogleCommonReflectTypeResolver *self, id<JavaLangReflectGenericArrayType> type) {
  id<JavaLangReflectType> componentType = [((id<JavaLangReflectGenericArrayType>) nil_chk(type)) getGenericComponentType];
  id<JavaLangReflectType> resolvedComponentType = [self resolveTypeWithJavaLangReflectType:componentType];
  return ComGoogleCommonReflectTypes_newArrayTypeWithJavaLangReflectType_(resolvedComponentType);
}

id<JavaLangReflectParameterizedType> ComGoogleCommonReflectTypeResolver_resolveParameterizedTypeWithJavaLangReflectParameterizedType_(ComGoogleCommonReflectTypeResolver *self, id<JavaLangReflectParameterizedType> type) {
  id<JavaLangReflectType> owner = [((id<JavaLangReflectParameterizedType>) nil_chk(type)) getOwnerType];
  id<JavaLangReflectType> resolvedOwner = (owner == nil) ? nil : [self resolveTypeWithJavaLangReflectType:owner];
  id<JavaLangReflectType> resolvedRawType = [self resolveTypeWithJavaLangReflectType:[type getRawType]];
  IOSObjectArray *args = [type getActualTypeArguments];
  IOSObjectArray *resolvedArgs = ComGoogleCommonReflectTypeResolver_resolveTypesWithJavaLangReflectTypeArray_(self, args);
  return ComGoogleCommonReflectTypes_newParameterizedTypeWithOwnerWithJavaLangReflectType_withIOSClass_withJavaLangReflectTypeArray_(resolvedOwner, (IOSClass *) cast_chk(resolvedRawType, [IOSClass class]), resolvedArgs);
}

id ComGoogleCommonReflectTypeResolver_expectArgumentWithIOSClass_withId_(IOSClass *type, id arg) {
  ComGoogleCommonReflectTypeResolver_initialize();
  @try {
    return [((IOSClass *) nil_chk(type)) cast:arg];
  }
  @catch (JavaLangClassCastException *e) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("@$$", arg, @" is not a ", [type getSimpleName]));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonReflectTypeResolver)

@implementation ComGoogleCommonReflectTypeResolver_1

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)capture$0
            withJavaLangReflectType:(id<JavaLangReflectType>)capture$1 {
  ComGoogleCommonReflectTypeResolver_1_initWithJavaUtilMap_withJavaLangReflectType_(self, capture$0, capture$1);
  return self;
}

- (void)visitTypeVariableWithJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>)typeVariable {
  (void) [((id<JavaUtilMap>) nil_chk(val$mappings_)) putWithId:new_ComGoogleCommonReflectTypeResolver_TypeVariableKey_initWithJavaLangReflectTypeVariable_(typeVariable) withId:val$to_];
}

- (void)visitWildcardTypeWithJavaLangReflectWildcardType:(id<JavaLangReflectWildcardType>)fromWildcardType {
  if (!([JavaLangReflectWildcardType_class_() isInstance:val$to_])) {
    return;
  }
  id<JavaLangReflectWildcardType> toWildcardType = (id<JavaLangReflectWildcardType>) cast_check(val$to_, JavaLangReflectWildcardType_class_());
  IOSObjectArray *fromUpperBounds = [((id<JavaLangReflectWildcardType>) nil_chk(fromWildcardType)) getUpperBounds];
  IOSObjectArray *toUpperBounds = [((id<JavaLangReflectWildcardType>) nil_chk(toWildcardType)) getUpperBounds];
  IOSObjectArray *fromLowerBounds = [fromWildcardType getLowerBounds];
  IOSObjectArray *toLowerBounds = [toWildcardType getLowerBounds];
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_withId_(((IOSObjectArray *) nil_chk(fromUpperBounds))->size_ == ((IOSObjectArray *) nil_chk(toUpperBounds))->size_ && ((IOSObjectArray *) nil_chk(fromLowerBounds))->size_ == ((IOSObjectArray *) nil_chk(toLowerBounds))->size_, @"Incompatible type: %s vs. %s", fromWildcardType, val$to_);
  for (jint i = 0; i < fromUpperBounds->size_; i++) {
    ComGoogleCommonReflectTypeResolver_populateTypeMappingsWithJavaUtilMap_withJavaLangReflectType_withJavaLangReflectType_(val$mappings_, IOSObjectArray_Get(fromUpperBounds, i), IOSObjectArray_Get(toUpperBounds, i));
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(fromLowerBounds))->size_; i++) {
    ComGoogleCommonReflectTypeResolver_populateTypeMappingsWithJavaUtilMap_withJavaLangReflectType_withJavaLangReflectType_(val$mappings_, IOSObjectArray_Get(fromLowerBounds, i), IOSObjectArray_Get(nil_chk(toLowerBounds), i));
  }
}

- (void)visitParameterizedTypeWithJavaLangReflectParameterizedType:(id<JavaLangReflectParameterizedType>)fromParameterizedType {
  if ([JavaLangReflectWildcardType_class_() isInstance:val$to_]) {
    return;
  }
  id<JavaLangReflectParameterizedType> toParameterizedType = ComGoogleCommonReflectTypeResolver_expectArgumentWithIOSClass_withId_(JavaLangReflectParameterizedType_class_(), val$to_);
  if ([((id<JavaLangReflectParameterizedType>) nil_chk(fromParameterizedType)) getOwnerType] != nil && [((id<JavaLangReflectParameterizedType>) nil_chk(toParameterizedType)) getOwnerType] != nil) {
    ComGoogleCommonReflectTypeResolver_populateTypeMappingsWithJavaUtilMap_withJavaLangReflectType_withJavaLangReflectType_(val$mappings_, [fromParameterizedType getOwnerType], [((id<JavaLangReflectParameterizedType>) nil_chk(toParameterizedType)) getOwnerType]);
  }
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_withId_([((id<JavaLangReflectType>) nil_chk([fromParameterizedType getRawType])) isEqual:[((id<JavaLangReflectParameterizedType>) nil_chk(toParameterizedType)) getRawType]], @"Inconsistent raw type: %s vs. %s", fromParameterizedType, val$to_);
  IOSObjectArray *fromArgs = [fromParameterizedType getActualTypeArguments];
  IOSObjectArray *toArgs = [toParameterizedType getActualTypeArguments];
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_withId_(((IOSObjectArray *) nil_chk(fromArgs))->size_ == ((IOSObjectArray *) nil_chk(toArgs))->size_, @"%s not compatible with %s", fromParameterizedType, toParameterizedType);
  for (jint i = 0; i < fromArgs->size_; i++) {
    ComGoogleCommonReflectTypeResolver_populateTypeMappingsWithJavaUtilMap_withJavaLangReflectType_withJavaLangReflectType_(val$mappings_, IOSObjectArray_Get(fromArgs, i), IOSObjectArray_Get(toArgs, i));
  }
}

- (void)visitGenericArrayTypeWithJavaLangReflectGenericArrayType:(id<JavaLangReflectGenericArrayType>)fromArrayType {
  if ([JavaLangReflectWildcardType_class_() isInstance:val$to_]) {
    return;
  }
  id<JavaLangReflectType> componentType = ComGoogleCommonReflectTypes_getComponentTypeWithJavaLangReflectType_(val$to_);
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_(componentType != nil, @"%s is not an array type.", val$to_);
  ComGoogleCommonReflectTypeResolver_populateTypeMappingsWithJavaUtilMap_withJavaLangReflectType_withJavaLangReflectType_(val$mappings_, [((id<JavaLangReflectGenericArrayType>) nil_chk(fromArrayType)) getGenericComponentType], componentType);
}

- (void)visitClassWithIOSClass:(IOSClass *)fromClass {
  if ([JavaLangReflectWildcardType_class_() isInstance:val$to_]) {
    return;
  }
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$@", @"No type mapping from ", fromClass, @" to ", val$to_));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 10, -1, 11, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilMap:withJavaLangReflectType:);
  methods[1].selector = @selector(visitTypeVariableWithJavaLangReflectTypeVariable:);
  methods[2].selector = @selector(visitWildcardTypeWithJavaLangReflectWildcardType:);
  methods[3].selector = @selector(visitParameterizedTypeWithJavaLangReflectParameterizedType:);
  methods[4].selector = @selector(visitGenericArrayTypeWithJavaLangReflectGenericArrayType:);
  methods[5].selector = @selector(visitClassWithIOSClass:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$mappings_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1012, -1, -1, 12, -1 },
    { "val$to_", "LJavaLangReflectType;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "visitTypeVariable", "LJavaLangReflectTypeVariable;", "(Ljava/lang/reflect/TypeVariable<*>;)V", "visitWildcardType", "LJavaLangReflectWildcardType;", "visitParameterizedType", "LJavaLangReflectParameterizedType;", "visitGenericArrayType", "LJavaLangReflectGenericArrayType;", "visitClass", "LIOSClass;", "(Ljava/lang/Class<*>;)V", "Ljava/util/Map<Lcom/google/common/reflect/TypeResolver$TypeVariableKey;Ljava/lang/reflect/Type;>;", "LComGoogleCommonReflectTypeResolver;", "populateTypeMappingsWithJavaUtilMap:withJavaLangReflectType:withJavaLangReflectType:" };
  static const J2ObjcClassInfo _ComGoogleCommonReflectTypeResolver_1 = { "", "com.google.common.reflect", ptrTable, methods, fields, 7, 0x8018, 6, 2, 13, -1, 14, -1, -1 };
  return &_ComGoogleCommonReflectTypeResolver_1;
}

@end

void ComGoogleCommonReflectTypeResolver_1_initWithJavaUtilMap_withJavaLangReflectType_(ComGoogleCommonReflectTypeResolver_1 *self, id<JavaUtilMap> capture$0, id<JavaLangReflectType> capture$1) {
  self->val$mappings_ = capture$0;
  self->val$to_ = capture$1;
  ComGoogleCommonReflectTypeVisitor_init(self);
}

ComGoogleCommonReflectTypeResolver_1 *new_ComGoogleCommonReflectTypeResolver_1_initWithJavaUtilMap_withJavaLangReflectType_(id<JavaUtilMap> capture$0, id<JavaLangReflectType> capture$1) {
  J2OBJC_NEW_IMPL(ComGoogleCommonReflectTypeResolver_1, initWithJavaUtilMap_withJavaLangReflectType_, capture$0, capture$1)
}

ComGoogleCommonReflectTypeResolver_1 *create_ComGoogleCommonReflectTypeResolver_1_initWithJavaUtilMap_withJavaLangReflectType_(id<JavaUtilMap> capture$0, id<JavaLangReflectType> capture$1) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonReflectTypeResolver_1, initWithJavaUtilMap_withJavaLangReflectType_, capture$0, capture$1)
}

@implementation ComGoogleCommonReflectTypeResolver_TypeTable

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonReflectTypeResolver_TypeTable_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithComGoogleCommonCollectImmutableMap:(ComGoogleCommonCollectImmutableMap *)map {
  ComGoogleCommonReflectTypeResolver_TypeTable_initWithComGoogleCommonCollectImmutableMap_(self, map);
  return self;
}

- (ComGoogleCommonReflectTypeResolver_TypeTable *)whereWithJavaUtilMap:(id<JavaUtilMap>)mappings {
  return ComGoogleCommonReflectTypeResolver_TypeTable_whereWithJavaUtilMap_(self, mappings);
}

- (id<JavaLangReflectType>)resolveWithJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>)var {
  return ComGoogleCommonReflectTypeResolver_TypeTable_resolveWithJavaLangReflectTypeVariable_(self, var);
}

- (id<JavaLangReflectType>)resolveInternalWithJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>)var
                         withComGoogleCommonReflectTypeResolver_TypeTable:(ComGoogleCommonReflectTypeResolver_TypeTable *)forDependants {
  id<JavaLangReflectType> type = [((ComGoogleCommonCollectImmutableMap *) nil_chk(map_)) getWithId:new_ComGoogleCommonReflectTypeResolver_TypeVariableKey_initWithJavaLangReflectTypeVariable_(var)];
  if (type == nil) {
    IOSObjectArray *bounds = [((id<JavaLangReflectTypeVariable>) nil_chk(var)) getBounds];
    if (((IOSObjectArray *) nil_chk(bounds))->size_ == 0) {
      return var;
    }
    IOSObjectArray *resolvedBounds = ComGoogleCommonReflectTypeResolver_resolveTypesWithJavaLangReflectTypeArray_(new_ComGoogleCommonReflectTypeResolver_initWithComGoogleCommonReflectTypeResolver_TypeTable_(forDependants), bounds);
    if (JreLoadStatic(ComGoogleCommonReflectTypes_NativeTypeVariableEquals, NATIVE_TYPE_VARIABLE_ONLY) && JavaUtilArrays_equalsWithNSObjectArray_withNSObjectArray_(bounds, resolvedBounds)) {
      return var;
    }
    return ComGoogleCommonReflectTypes_newArtificialTypeVariableWithJavaLangReflectGenericDeclaration_withNSString_withJavaLangReflectTypeArray_([var getGenericDeclaration], [var getName], resolvedBounds);
  }
  return [new_ComGoogleCommonReflectTypeResolver_initWithComGoogleCommonReflectTypeResolver_TypeTable_(forDependants) resolveTypeWithJavaLangReflectType:type];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 0, -1, 1, -1, -1 },
    { NULL, "LComGoogleCommonReflectTypeResolver_TypeTable;", 0x10, 2, 3, -1, 4, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x10, 5, 6, -1, 7, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x0, 8, 9, -1, 10, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithComGoogleCommonCollectImmutableMap:);
  methods[2].selector = @selector(whereWithJavaUtilMap:);
  methods[3].selector = @selector(resolveWithJavaLangReflectTypeVariable:);
  methods[4].selector = @selector(resolveInternalWithJavaLangReflectTypeVariable:withComGoogleCommonReflectTypeResolver_TypeTable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "map_", "LComGoogleCommonCollectImmutableMap;", .constantValue.asLong = 0, 0x12, -1, -1, 11, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonCollectImmutableMap;", "(Lcom/google/common/collect/ImmutableMap<Lcom/google/common/reflect/TypeResolver$TypeVariableKey;Ljava/lang/reflect/Type;>;)V", "where", "LJavaUtilMap;", "(Ljava/util/Map<Lcom/google/common/reflect/TypeResolver$TypeVariableKey;+Ljava/lang/reflect/Type;>;)Lcom/google/common/reflect/TypeResolver$TypeTable;", "resolve", "LJavaLangReflectTypeVariable;", "(Ljava/lang/reflect/TypeVariable<*>;)Ljava/lang/reflect/Type;", "resolveInternal", "LJavaLangReflectTypeVariable;LComGoogleCommonReflectTypeResolver_TypeTable;", "(Ljava/lang/reflect/TypeVariable<*>;Lcom/google/common/reflect/TypeResolver$TypeTable;)Ljava/lang/reflect/Type;", "Lcom/google/common/collect/ImmutableMap<Lcom/google/common/reflect/TypeResolver$TypeVariableKey;Ljava/lang/reflect/Type;>;", "LComGoogleCommonReflectTypeResolver;" };
  static const J2ObjcClassInfo _ComGoogleCommonReflectTypeResolver_TypeTable = { "TypeTable", "com.google.common.reflect", ptrTable, methods, fields, 7, 0xa, 5, 1, 12, -1, -1, -1, -1 };
  return &_ComGoogleCommonReflectTypeResolver_TypeTable;
}

@end

void ComGoogleCommonReflectTypeResolver_TypeTable_init(ComGoogleCommonReflectTypeResolver_TypeTable *self) {
  NSObject_init(self);
  self->map_ = ComGoogleCommonCollectImmutableMap_of();
}

ComGoogleCommonReflectTypeResolver_TypeTable *new_ComGoogleCommonReflectTypeResolver_TypeTable_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonReflectTypeResolver_TypeTable, init)
}

ComGoogleCommonReflectTypeResolver_TypeTable *create_ComGoogleCommonReflectTypeResolver_TypeTable_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonReflectTypeResolver_TypeTable, init)
}

void ComGoogleCommonReflectTypeResolver_TypeTable_initWithComGoogleCommonCollectImmutableMap_(ComGoogleCommonReflectTypeResolver_TypeTable *self, ComGoogleCommonCollectImmutableMap *map) {
  NSObject_init(self);
  self->map_ = map;
}

ComGoogleCommonReflectTypeResolver_TypeTable *new_ComGoogleCommonReflectTypeResolver_TypeTable_initWithComGoogleCommonCollectImmutableMap_(ComGoogleCommonCollectImmutableMap *map) {
  J2OBJC_NEW_IMPL(ComGoogleCommonReflectTypeResolver_TypeTable, initWithComGoogleCommonCollectImmutableMap_, map)
}

ComGoogleCommonReflectTypeResolver_TypeTable *create_ComGoogleCommonReflectTypeResolver_TypeTable_initWithComGoogleCommonCollectImmutableMap_(ComGoogleCommonCollectImmutableMap *map) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonReflectTypeResolver_TypeTable, initWithComGoogleCommonCollectImmutableMap_, map)
}

ComGoogleCommonReflectTypeResolver_TypeTable *ComGoogleCommonReflectTypeResolver_TypeTable_whereWithJavaUtilMap_(ComGoogleCommonReflectTypeResolver_TypeTable *self, id<JavaUtilMap> mappings) {
  ComGoogleCommonCollectImmutableMap_Builder *builder = ComGoogleCommonCollectImmutableMap_builder();
  (void) [((ComGoogleCommonCollectImmutableMap_Builder *) nil_chk(builder)) putAllWithJavaUtilMap:self->map_];
  for (id<JavaUtilMap_Entry> __strong mapping in nil_chk([((id<JavaUtilMap>) nil_chk(mappings)) entrySet])) {
    ComGoogleCommonReflectTypeResolver_TypeVariableKey *variable = [((id<JavaUtilMap_Entry>) nil_chk(mapping)) getKey];
    id<JavaLangReflectType> type = [mapping getValue];
    ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_(![((ComGoogleCommonReflectTypeResolver_TypeVariableKey *) nil_chk(variable)) equalsTypeWithJavaLangReflectType:type], @"Type variable %s bound to itself", variable);
    (void) [builder putWithId:variable withId:type];
  }
  return new_ComGoogleCommonReflectTypeResolver_TypeTable_initWithComGoogleCommonCollectImmutableMap_([builder build]);
}

id<JavaLangReflectType> ComGoogleCommonReflectTypeResolver_TypeTable_resolveWithJavaLangReflectTypeVariable_(ComGoogleCommonReflectTypeResolver_TypeTable *self, id<JavaLangReflectTypeVariable> var) {
  ComGoogleCommonReflectTypeResolver_TypeTable *unguarded = self;
  ComGoogleCommonReflectTypeResolver_TypeTable *guarded = new_ComGoogleCommonReflectTypeResolver_TypeTable_1_initWithJavaLangReflectTypeVariable_withComGoogleCommonReflectTypeResolver_TypeTable_(var, unguarded);
  return [self resolveInternalWithJavaLangReflectTypeVariable:var withComGoogleCommonReflectTypeResolver_TypeTable:guarded];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonReflectTypeResolver_TypeTable)

@implementation ComGoogleCommonReflectTypeResolver_TypeTable_1

- (instancetype)initWithJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>)capture$0
   withComGoogleCommonReflectTypeResolver_TypeTable:(ComGoogleCommonReflectTypeResolver_TypeTable *)capture$1 {
  ComGoogleCommonReflectTypeResolver_TypeTable_1_initWithJavaLangReflectTypeVariable_withComGoogleCommonReflectTypeResolver_TypeTable_(self, capture$0, capture$1);
  return self;
}

- (id<JavaLangReflectType>)resolveInternalWithJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>)intermediateVar
                         withComGoogleCommonReflectTypeResolver_TypeTable:(ComGoogleCommonReflectTypeResolver_TypeTable *)forDependent {
  if ([((id<JavaLangReflectGenericDeclaration>) nil_chk([((id<JavaLangReflectTypeVariable>) nil_chk(intermediateVar)) getGenericDeclaration])) isEqual:[((id<JavaLangReflectTypeVariable>) nil_chk(val$var_)) getGenericDeclaration]]) {
    return intermediateVar;
  }
  return [((ComGoogleCommonReflectTypeResolver_TypeTable *) nil_chk(val$unguarded_)) resolveInternalWithJavaLangReflectTypeVariable:intermediateVar withComGoogleCommonReflectTypeResolver_TypeTable:forDependent];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangReflectTypeVariable:withComGoogleCommonReflectTypeResolver_TypeTable:);
  methods[1].selector = @selector(resolveInternalWithJavaLangReflectTypeVariable:withComGoogleCommonReflectTypeResolver_TypeTable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$var_", "LJavaLangReflectTypeVariable;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
    { "val$unguarded_", "LComGoogleCommonReflectTypeResolver_TypeTable;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "resolveInternal", "LJavaLangReflectTypeVariable;LComGoogleCommonReflectTypeResolver_TypeTable;", "(Ljava/lang/reflect/TypeVariable<*>;Lcom/google/common/reflect/TypeResolver$TypeTable;)Ljava/lang/reflect/Type;", "Ljava/lang/reflect/TypeVariable<*>;", "LComGoogleCommonReflectTypeResolver_TypeTable;", "resolveWithJavaLangReflectTypeVariable:" };
  static const J2ObjcClassInfo _ComGoogleCommonReflectTypeResolver_TypeTable_1 = { "", "com.google.common.reflect", ptrTable, methods, fields, 7, 0x8018, 2, 2, 4, -1, 5, -1, -1 };
  return &_ComGoogleCommonReflectTypeResolver_TypeTable_1;
}

@end

void ComGoogleCommonReflectTypeResolver_TypeTable_1_initWithJavaLangReflectTypeVariable_withComGoogleCommonReflectTypeResolver_TypeTable_(ComGoogleCommonReflectTypeResolver_TypeTable_1 *self, id<JavaLangReflectTypeVariable> capture$0, ComGoogleCommonReflectTypeResolver_TypeTable *capture$1) {
  self->val$var_ = capture$0;
  self->val$unguarded_ = capture$1;
  ComGoogleCommonReflectTypeResolver_TypeTable_init(self);
}

ComGoogleCommonReflectTypeResolver_TypeTable_1 *new_ComGoogleCommonReflectTypeResolver_TypeTable_1_initWithJavaLangReflectTypeVariable_withComGoogleCommonReflectTypeResolver_TypeTable_(id<JavaLangReflectTypeVariable> capture$0, ComGoogleCommonReflectTypeResolver_TypeTable *capture$1) {
  J2OBJC_NEW_IMPL(ComGoogleCommonReflectTypeResolver_TypeTable_1, initWithJavaLangReflectTypeVariable_withComGoogleCommonReflectTypeResolver_TypeTable_, capture$0, capture$1)
}

ComGoogleCommonReflectTypeResolver_TypeTable_1 *create_ComGoogleCommonReflectTypeResolver_TypeTable_1_initWithJavaLangReflectTypeVariable_withComGoogleCommonReflectTypeResolver_TypeTable_(id<JavaLangReflectTypeVariable> capture$0, ComGoogleCommonReflectTypeResolver_TypeTable *capture$1) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonReflectTypeResolver_TypeTable_1, initWithJavaLangReflectTypeVariable_withComGoogleCommonReflectTypeResolver_TypeTable_, capture$0, capture$1)
}

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonReflectTypeResolver_TypeMappingIntrospector)

@implementation ComGoogleCommonReflectTypeResolver_TypeMappingIntrospector

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonReflectTypeResolver_TypeMappingIntrospector_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (ComGoogleCommonCollectImmutableMap *)getTypeMappingsWithJavaLangReflectType:(id<JavaLangReflectType>)contextType {
  return ComGoogleCommonReflectTypeResolver_TypeMappingIntrospector_getTypeMappingsWithJavaLangReflectType_(contextType);
}

- (void)visitClassWithIOSClass:(IOSClass *)clazz {
  [self visitWithJavaLangReflectTypeArray:[IOSObjectArray newArrayWithObjects:(id[]){ [((IOSClass *) nil_chk(clazz)) getGenericSuperclass] } count:1 type:JavaLangReflectType_class_()]];
  [self visitWithJavaLangReflectTypeArray:[clazz getGenericInterfaces]];
}

- (void)visitParameterizedTypeWithJavaLangReflectParameterizedType:(id<JavaLangReflectParameterizedType>)parameterizedType {
  IOSClass *rawClass = (IOSClass *) cast_chk([((id<JavaLangReflectParameterizedType>) nil_chk(parameterizedType)) getRawType], [IOSClass class]);
  IOSObjectArray *vars = [((IOSClass *) nil_chk(rawClass)) getTypeParameters];
  IOSObjectArray *typeArgs = [parameterizedType getActualTypeArguments];
  ComGoogleCommonBasePreconditions_checkStateWithBoolean_(((IOSObjectArray *) nil_chk(vars))->size_ == ((IOSObjectArray *) nil_chk(typeArgs))->size_);
  for (jint i = 0; i < vars->size_; i++) {
    ComGoogleCommonReflectTypeResolver_TypeMappingIntrospector_mapWithComGoogleCommonReflectTypeResolver_TypeVariableKey_withJavaLangReflectType_(self, new_ComGoogleCommonReflectTypeResolver_TypeVariableKey_initWithJavaLangReflectTypeVariable_(IOSObjectArray_Get(vars, i)), IOSObjectArray_Get(typeArgs, i));
  }
  [self visitWithJavaLangReflectTypeArray:[IOSObjectArray newArrayWithObjects:(id[]){ rawClass } count:1 type:JavaLangReflectType_class_()]];
  [self visitWithJavaLangReflectTypeArray:[IOSObjectArray newArrayWithObjects:(id[]){ [parameterizedType getOwnerType] } count:1 type:JavaLangReflectType_class_()]];
}

- (void)visitTypeVariableWithJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>)t {
  [self visitWithJavaLangReflectTypeArray:[((id<JavaLangReflectTypeVariable>) nil_chk(t)) getBounds]];
}

- (void)visitWildcardTypeWithJavaLangReflectWildcardType:(id<JavaLangReflectWildcardType>)t {
  [self visitWithJavaLangReflectTypeArray:[((id<JavaLangReflectWildcardType>) nil_chk(t)) getUpperBounds]];
}

- (void)mapWithComGoogleCommonReflectTypeResolver_TypeVariableKey:(ComGoogleCommonReflectTypeResolver_TypeVariableKey *)var
                                          withJavaLangReflectType:(id<JavaLangReflectType>)arg {
  ComGoogleCommonReflectTypeResolver_TypeMappingIntrospector_mapWithComGoogleCommonReflectTypeResolver_TypeVariableKey_withJavaLangReflectType_(self, var, arg);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonCollectImmutableMap;", 0x8, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x0, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x0, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 8, 9, -1, 10, -1, -1 },
    { NULL, "V", 0x0, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getTypeMappingsWithJavaLangReflectType:);
  methods[2].selector = @selector(visitClassWithIOSClass:);
  methods[3].selector = @selector(visitParameterizedTypeWithJavaLangReflectParameterizedType:);
  methods[4].selector = @selector(visitTypeVariableWithJavaLangReflectTypeVariable:);
  methods[5].selector = @selector(visitWildcardTypeWithJavaLangReflectWildcardType:);
  methods[6].selector = @selector(mapWithComGoogleCommonReflectTypeResolver_TypeVariableKey:withJavaLangReflectType:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "wildcardCapturer", "LComGoogleCommonReflectTypeResolver_WildcardCapturer;", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "mappings_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 16, -1 },
  };
  static const void *ptrTable[] = { "getTypeMappings", "LJavaLangReflectType;", "(Ljava/lang/reflect/Type;)Lcom/google/common/collect/ImmutableMap<Lcom/google/common/reflect/TypeResolver$TypeVariableKey;Ljava/lang/reflect/Type;>;", "visitClass", "LIOSClass;", "(Ljava/lang/Class<*>;)V", "visitParameterizedType", "LJavaLangReflectParameterizedType;", "visitTypeVariable", "LJavaLangReflectTypeVariable;", "(Ljava/lang/reflect/TypeVariable<*>;)V", "visitWildcardType", "LJavaLangReflectWildcardType;", "map", "LComGoogleCommonReflectTypeResolver_TypeVariableKey;LJavaLangReflectType;", &ComGoogleCommonReflectTypeResolver_TypeMappingIntrospector_wildcardCapturer, "Ljava/util/Map<Lcom/google/common/reflect/TypeResolver$TypeVariableKey;Ljava/lang/reflect/Type;>;", "LComGoogleCommonReflectTypeResolver;" };
  static const J2ObjcClassInfo _ComGoogleCommonReflectTypeResolver_TypeMappingIntrospector = { "TypeMappingIntrospector", "com.google.common.reflect", ptrTable, methods, fields, 7, 0x1a, 7, 2, 17, -1, -1, -1, -1 };
  return &_ComGoogleCommonReflectTypeResolver_TypeMappingIntrospector;
}

+ (void)initialize {
  if (self == [ComGoogleCommonReflectTypeResolver_TypeMappingIntrospector class]) {
    ComGoogleCommonReflectTypeResolver_TypeMappingIntrospector_wildcardCapturer = new_ComGoogleCommonReflectTypeResolver_WildcardCapturer_init();
    J2OBJC_SET_INITIALIZED(ComGoogleCommonReflectTypeResolver_TypeMappingIntrospector)
  }
}

@end

void ComGoogleCommonReflectTypeResolver_TypeMappingIntrospector_init(ComGoogleCommonReflectTypeResolver_TypeMappingIntrospector *self) {
  ComGoogleCommonReflectTypeVisitor_init(self);
  self->mappings_ = ComGoogleCommonCollectMaps_newHashMap();
}

ComGoogleCommonReflectTypeResolver_TypeMappingIntrospector *new_ComGoogleCommonReflectTypeResolver_TypeMappingIntrospector_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonReflectTypeResolver_TypeMappingIntrospector, init)
}

ComGoogleCommonReflectTypeResolver_TypeMappingIntrospector *create_ComGoogleCommonReflectTypeResolver_TypeMappingIntrospector_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonReflectTypeResolver_TypeMappingIntrospector, init)
}

ComGoogleCommonCollectImmutableMap *ComGoogleCommonReflectTypeResolver_TypeMappingIntrospector_getTypeMappingsWithJavaLangReflectType_(id<JavaLangReflectType> contextType) {
  ComGoogleCommonReflectTypeResolver_TypeMappingIntrospector_initialize();
  ComGoogleCommonReflectTypeResolver_TypeMappingIntrospector *introspector = new_ComGoogleCommonReflectTypeResolver_TypeMappingIntrospector_init();
  [introspector visitWithJavaLangReflectTypeArray:[IOSObjectArray newArrayWithObjects:(id[]){ ComGoogleCommonReflectTypeResolver_WildcardCapturer_captureWithJavaLangReflectType_(nil_chk(ComGoogleCommonReflectTypeResolver_TypeMappingIntrospector_wildcardCapturer), contextType) } count:1 type:JavaLangReflectType_class_()]];
  return ComGoogleCommonCollectImmutableMap_copyOfWithJavaUtilMap_(introspector->mappings_);
}

void ComGoogleCommonReflectTypeResolver_TypeMappingIntrospector_mapWithComGoogleCommonReflectTypeResolver_TypeVariableKey_withJavaLangReflectType_(ComGoogleCommonReflectTypeResolver_TypeMappingIntrospector *self, ComGoogleCommonReflectTypeResolver_TypeVariableKey *var, id<JavaLangReflectType> arg) {
  if ([((id<JavaUtilMap>) nil_chk(self->mappings_)) containsKeyWithId:var]) {
    return;
  }
  for (id<JavaLangReflectType> t = arg; t != nil; t = [self->mappings_ getWithId:ComGoogleCommonReflectTypeResolver_TypeVariableKey_forLookupWithJavaLangReflectType_(t)]) {
    if ([((ComGoogleCommonReflectTypeResolver_TypeVariableKey *) nil_chk(var)) equalsTypeWithJavaLangReflectType:t]) {
      for (id<JavaLangReflectType> x = arg; x != nil; x = [self->mappings_ removeWithId:ComGoogleCommonReflectTypeResolver_TypeVariableKey_forLookupWithJavaLangReflectType_(x)]) {
      }
      return;
    }
  }
  (void) [self->mappings_ putWithId:var withId:arg];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonReflectTypeResolver_TypeMappingIntrospector)

@implementation ComGoogleCommonReflectTypeResolver_WildcardCapturer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonReflectTypeResolver_WildcardCapturer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)id_ {
  ComGoogleCommonReflectTypeResolver_WildcardCapturer_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, id_);
  return self;
}

- (id<JavaLangReflectType>)captureWithJavaLangReflectType:(id<JavaLangReflectType>)type {
  return ComGoogleCommonReflectTypeResolver_WildcardCapturer_captureWithJavaLangReflectType_(self, type);
}

- (id<JavaLangReflectTypeVariable>)captureAsTypeVariableWithJavaLangReflectTypeArray:(IOSObjectArray *)upperBounds {
  NSString *name = JreStrcat("$I$$", @"capture#", [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(id__)) incrementAndGet], @"-of ? extends ", [((ComGoogleCommonBaseJoiner *) nil_chk(ComGoogleCommonBaseJoiner_onWithChar_('&'))) joinWithNSObjectArray:upperBounds]);
  return ComGoogleCommonReflectTypes_newArtificialTypeVariableWithJavaLangReflectGenericDeclaration_withNSString_withJavaLangReflectTypeArray_(ComGoogleCommonReflectTypeResolver_WildcardCapturer_class_(), name, upperBounds);
}

- (ComGoogleCommonReflectTypeResolver_WildcardCapturer *)forTypeVariableWithJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>)typeParam {
  return ComGoogleCommonReflectTypeResolver_WildcardCapturer_forTypeVariableWithJavaLangReflectTypeVariable_(self, typeParam);
}

- (ComGoogleCommonReflectTypeResolver_WildcardCapturer *)notForTypeVariable {
  return ComGoogleCommonReflectTypeResolver_WildcardCapturer_notForTypeVariable(self);
}

- (id<JavaLangReflectType>)captureNullableWithJavaLangReflectType:(id<JavaLangReflectType>)type {
  return ComGoogleCommonReflectTypeResolver_WildcardCapturer_captureNullableWithJavaLangReflectType_(self, type);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x10, 1, 2, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectTypeVariable;", 0x0, 3, 4, -1, 5, -1, -1 },
    { NULL, "LComGoogleCommonReflectTypeResolver_WildcardCapturer;", 0x2, 6, 7, -1, 8, -1, -1 },
    { NULL, "LComGoogleCommonReflectTypeResolver_WildcardCapturer;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x2, 9, 2, -1, -1, -1, 10 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicInteger:);
  methods[2].selector = @selector(captureWithJavaLangReflectType:);
  methods[3].selector = @selector(captureAsTypeVariableWithJavaLangReflectTypeArray:);
  methods[4].selector = @selector(forTypeVariableWithJavaLangReflectTypeVariable:);
  methods[5].selector = @selector(notForTypeVariable);
  methods[6].selector = @selector(captureNullableWithJavaLangReflectType:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "id__", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x12, 11, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "capture", "LJavaLangReflectType;", "captureAsTypeVariable", "[LJavaLangReflectType;", "([Ljava/lang/reflect/Type;)Ljava/lang/reflect/TypeVariable<*>;", "forTypeVariable", "LJavaLangReflectTypeVariable;", "(Ljava/lang/reflect/TypeVariable<*>;)Lcom/google/common/reflect/TypeResolver$WildcardCapturer;", "captureNullable", (void *)&ComGoogleCommonReflectTypeResolver_WildcardCapturer__Annotations$0, "id", "LComGoogleCommonReflectTypeResolver;" };
  static const J2ObjcClassInfo _ComGoogleCommonReflectTypeResolver_WildcardCapturer = { "WildcardCapturer", "com.google.common.reflect", ptrTable, methods, fields, 7, 0xa, 7, 1, 12, -1, -1, -1, -1 };
  return &_ComGoogleCommonReflectTypeResolver_WildcardCapturer;
}

@end

void ComGoogleCommonReflectTypeResolver_WildcardCapturer_init(ComGoogleCommonReflectTypeResolver_WildcardCapturer *self) {
  ComGoogleCommonReflectTypeResolver_WildcardCapturer_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, new_JavaUtilConcurrentAtomicAtomicInteger_init());
}

ComGoogleCommonReflectTypeResolver_WildcardCapturer *new_ComGoogleCommonReflectTypeResolver_WildcardCapturer_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonReflectTypeResolver_WildcardCapturer, init)
}

ComGoogleCommonReflectTypeResolver_WildcardCapturer *create_ComGoogleCommonReflectTypeResolver_WildcardCapturer_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonReflectTypeResolver_WildcardCapturer, init)
}

void ComGoogleCommonReflectTypeResolver_WildcardCapturer_initWithJavaUtilConcurrentAtomicAtomicInteger_(ComGoogleCommonReflectTypeResolver_WildcardCapturer *self, JavaUtilConcurrentAtomicAtomicInteger *id_) {
  NSObject_init(self);
  self->id__ = id_;
}

ComGoogleCommonReflectTypeResolver_WildcardCapturer *new_ComGoogleCommonReflectTypeResolver_WildcardCapturer_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *id_) {
  J2OBJC_NEW_IMPL(ComGoogleCommonReflectTypeResolver_WildcardCapturer, initWithJavaUtilConcurrentAtomicAtomicInteger_, id_)
}

ComGoogleCommonReflectTypeResolver_WildcardCapturer *create_ComGoogleCommonReflectTypeResolver_WildcardCapturer_initWithJavaUtilConcurrentAtomicAtomicInteger_(JavaUtilConcurrentAtomicAtomicInteger *id_) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonReflectTypeResolver_WildcardCapturer, initWithJavaUtilConcurrentAtomicAtomicInteger_, id_)
}

id<JavaLangReflectType> ComGoogleCommonReflectTypeResolver_WildcardCapturer_captureWithJavaLangReflectType_(ComGoogleCommonReflectTypeResolver_WildcardCapturer *self, id<JavaLangReflectType> type) {
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(type);
  if ([type isKindOfClass:[IOSClass class]]) {
    return type;
  }
  if ([JavaLangReflectTypeVariable_class_() isInstance:type]) {
    return type;
  }
  if ([JavaLangReflectGenericArrayType_class_() isInstance:type]) {
    id<JavaLangReflectGenericArrayType> arrayType = (id<JavaLangReflectGenericArrayType>) cast_check(type, JavaLangReflectGenericArrayType_class_());
    return ComGoogleCommonReflectTypes_newArrayTypeWithJavaLangReflectType_(ComGoogleCommonReflectTypeResolver_WildcardCapturer_captureWithJavaLangReflectType_(nil_chk(ComGoogleCommonReflectTypeResolver_WildcardCapturer_notForTypeVariable(self)), [((id<JavaLangReflectGenericArrayType>) nil_chk(arrayType)) getGenericComponentType]));
  }
  if ([JavaLangReflectParameterizedType_class_() isInstance:type]) {
    id<JavaLangReflectParameterizedType> parameterizedType = (id<JavaLangReflectParameterizedType>) cast_check(type, JavaLangReflectParameterizedType_class_());
    IOSClass *rawType = (IOSClass *) cast_chk([((id<JavaLangReflectParameterizedType>) nil_chk(parameterizedType)) getRawType], [IOSClass class]);
    IOSObjectArray *typeVars = [((IOSClass *) nil_chk(rawType)) getTypeParameters];
    IOSObjectArray *typeArgs = [parameterizedType getActualTypeArguments];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(typeArgs))->size_; i++) {
      (void) IOSObjectArray_Set(typeArgs, i, ComGoogleCommonReflectTypeResolver_WildcardCapturer_captureWithJavaLangReflectType_(nil_chk(ComGoogleCommonReflectTypeResolver_WildcardCapturer_forTypeVariableWithJavaLangReflectTypeVariable_(self, IOSObjectArray_Get(nil_chk(typeVars), i))), IOSObjectArray_Get(typeArgs, i)));
    }
    return ComGoogleCommonReflectTypes_newParameterizedTypeWithOwnerWithJavaLangReflectType_withIOSClass_withJavaLangReflectTypeArray_(ComGoogleCommonReflectTypeResolver_WildcardCapturer_captureNullableWithJavaLangReflectType_(nil_chk(ComGoogleCommonReflectTypeResolver_WildcardCapturer_notForTypeVariable(self)), [parameterizedType getOwnerType]), rawType, typeArgs);
  }
  if ([JavaLangReflectWildcardType_class_() isInstance:type]) {
    id<JavaLangReflectWildcardType> wildcardType = (id<JavaLangReflectWildcardType>) cast_check(type, JavaLangReflectWildcardType_class_());
    IOSObjectArray *lowerBounds = [((id<JavaLangReflectWildcardType>) nil_chk(wildcardType)) getLowerBounds];
    if (((IOSObjectArray *) nil_chk(lowerBounds))->size_ == 0) {
      return [self captureAsTypeVariableWithJavaLangReflectTypeArray:[wildcardType getUpperBounds]];
    }
    else {
      return type;
    }
  }
  @throw new_JavaLangAssertionError_initWithId_(@"must have been one of the known types");
}

ComGoogleCommonReflectTypeResolver_WildcardCapturer *ComGoogleCommonReflectTypeResolver_WildcardCapturer_forTypeVariableWithJavaLangReflectTypeVariable_(ComGoogleCommonReflectTypeResolver_WildcardCapturer *self, id<JavaLangReflectTypeVariable> typeParam) {
  return new_ComGoogleCommonReflectTypeResolver_WildcardCapturer_1_initWithJavaLangReflectTypeVariable_withJavaUtilConcurrentAtomicAtomicInteger_(typeParam, self->id__);
}

ComGoogleCommonReflectTypeResolver_WildcardCapturer *ComGoogleCommonReflectTypeResolver_WildcardCapturer_notForTypeVariable(ComGoogleCommonReflectTypeResolver_WildcardCapturer *self) {
  return new_ComGoogleCommonReflectTypeResolver_WildcardCapturer_initWithJavaUtilConcurrentAtomicAtomicInteger_(self->id__);
}

id<JavaLangReflectType> ComGoogleCommonReflectTypeResolver_WildcardCapturer_captureNullableWithJavaLangReflectType_(ComGoogleCommonReflectTypeResolver_WildcardCapturer *self, id<JavaLangReflectType> type) {
  if (type == nil) {
    return nil;
  }
  return ComGoogleCommonReflectTypeResolver_WildcardCapturer_captureWithJavaLangReflectType_(self, type);
}

IOSObjectArray *ComGoogleCommonReflectTypeResolver_WildcardCapturer__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonReflectTypeResolver_WildcardCapturer)

@implementation ComGoogleCommonReflectTypeResolver_WildcardCapturer_1

- (instancetype)initWithJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>)capture$0
          withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)id_ {
  ComGoogleCommonReflectTypeResolver_WildcardCapturer_1_initWithJavaLangReflectTypeVariable_withJavaUtilConcurrentAtomicAtomicInteger_(self, capture$0, id_);
  return self;
}

- (id<JavaLangReflectTypeVariable>)captureAsTypeVariableWithJavaLangReflectTypeArray:(IOSObjectArray *)upperBounds {
  id<JavaUtilSet> combined = new_JavaUtilLinkedHashSet_initWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_(upperBounds));
  [combined addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_([((id<JavaLangReflectTypeVariable>) nil_chk(val$typeParam_)) getBounds])];
  if ([combined size] > 1) {
    [combined removeWithId:NSObject_class_()];
  }
  return [super captureAsTypeVariableWithJavaLangReflectTypeArray:[combined toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:JavaLangReflectType_class_()]]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectTypeVariable;", 0x0, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangReflectTypeVariable:withJavaUtilConcurrentAtomicAtomicInteger:);
  methods[1].selector = @selector(captureAsTypeVariableWithJavaLangReflectTypeArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$typeParam_", "LJavaLangReflectTypeVariable;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicInteger;", "captureAsTypeVariable", "[LJavaLangReflectType;", "([Ljava/lang/reflect/Type;)Ljava/lang/reflect/TypeVariable<*>;", "Ljava/lang/reflect/TypeVariable<*>;", "LComGoogleCommonReflectTypeResolver_WildcardCapturer;", "forTypeVariableWithJavaLangReflectTypeVariable:" };
  static const J2ObjcClassInfo _ComGoogleCommonReflectTypeResolver_WildcardCapturer_1 = { "", "com.google.common.reflect", ptrTable, methods, fields, 7, 0x8018, 2, 1, 5, -1, 6, -1, -1 };
  return &_ComGoogleCommonReflectTypeResolver_WildcardCapturer_1;
}

@end

void ComGoogleCommonReflectTypeResolver_WildcardCapturer_1_initWithJavaLangReflectTypeVariable_withJavaUtilConcurrentAtomicAtomicInteger_(ComGoogleCommonReflectTypeResolver_WildcardCapturer_1 *self, id<JavaLangReflectTypeVariable> capture$0, JavaUtilConcurrentAtomicAtomicInteger *id_) {
  self->val$typeParam_ = capture$0;
  ComGoogleCommonReflectTypeResolver_WildcardCapturer_initWithJavaUtilConcurrentAtomicAtomicInteger_(self, id_);
}

ComGoogleCommonReflectTypeResolver_WildcardCapturer_1 *new_ComGoogleCommonReflectTypeResolver_WildcardCapturer_1_initWithJavaLangReflectTypeVariable_withJavaUtilConcurrentAtomicAtomicInteger_(id<JavaLangReflectTypeVariable> capture$0, JavaUtilConcurrentAtomicAtomicInteger *id_) {
  J2OBJC_NEW_IMPL(ComGoogleCommonReflectTypeResolver_WildcardCapturer_1, initWithJavaLangReflectTypeVariable_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, id_)
}

ComGoogleCommonReflectTypeResolver_WildcardCapturer_1 *create_ComGoogleCommonReflectTypeResolver_WildcardCapturer_1_initWithJavaLangReflectTypeVariable_withJavaUtilConcurrentAtomicAtomicInteger_(id<JavaLangReflectTypeVariable> capture$0, JavaUtilConcurrentAtomicAtomicInteger *id_) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonReflectTypeResolver_WildcardCapturer_1, initWithJavaLangReflectTypeVariable_withJavaUtilConcurrentAtomicAtomicInteger_, capture$0, id_)
}

@implementation ComGoogleCommonReflectTypeResolver_TypeVariableKey

- (instancetype)initWithJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>)var {
  ComGoogleCommonReflectTypeResolver_TypeVariableKey_initWithJavaLangReflectTypeVariable_(self, var);
  return self;
}

- (NSUInteger)hash {
  return ComGoogleCommonBaseObjects_hashCodeWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ [((id<JavaLangReflectTypeVariable>) nil_chk(var_)) getGenericDeclaration], [var_ getName] } count:2 type:NSObject_class_()]);
}

- (jboolean)isEqual:(id)obj {
  if ([obj isKindOfClass:[ComGoogleCommonReflectTypeResolver_TypeVariableKey class]]) {
    ComGoogleCommonReflectTypeResolver_TypeVariableKey *that = (ComGoogleCommonReflectTypeResolver_TypeVariableKey *) cast_chk(obj, [ComGoogleCommonReflectTypeResolver_TypeVariableKey class]);
    return ComGoogleCommonReflectTypeResolver_TypeVariableKey_equalsTypeVariableWithJavaLangReflectTypeVariable_(self, ((ComGoogleCommonReflectTypeResolver_TypeVariableKey *) nil_chk(that))->var_);
  }
  else {
    return false;
  }
}

- (NSString *)description {
  return [((id<JavaLangReflectTypeVariable>) nil_chk(var_)) description];
}

+ (ComGoogleCommonReflectTypeResolver_TypeVariableKey *)forLookupWithJavaLangReflectType:(id<JavaLangReflectType>)t {
  return ComGoogleCommonReflectTypeResolver_TypeVariableKey_forLookupWithJavaLangReflectType_(t);
}

- (jboolean)equalsTypeWithJavaLangReflectType:(id<JavaLangReflectType>)type {
  if ([JavaLangReflectTypeVariable_class_() isInstance:type]) {
    return ComGoogleCommonReflectTypeResolver_TypeVariableKey_equalsTypeVariableWithJavaLangReflectTypeVariable_(self, (id<JavaLangReflectTypeVariable>) cast_check(type, JavaLangReflectTypeVariable_class_()));
  }
  else {
    return false;
  }
}

- (jboolean)equalsTypeVariableWithJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>)that {
  return ComGoogleCommonReflectTypeResolver_TypeVariableKey_equalsTypeVariableWithJavaLangReflectTypeVariable_(self, that);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "I", 0x1, 2, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonReflectTypeResolver_TypeVariableKey;", 0x8, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 8, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 9, 0, -1, 10, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangReflectTypeVariable:);
  methods[1].selector = @selector(hash);
  methods[2].selector = @selector(isEqual:);
  methods[3].selector = @selector(description);
  methods[4].selector = @selector(forLookupWithJavaLangReflectType:);
  methods[5].selector = @selector(equalsTypeWithJavaLangReflectType:);
  methods[6].selector = @selector(equalsTypeVariableWithJavaLangReflectTypeVariable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "var_", "LJavaLangReflectTypeVariable;", .constantValue.asLong = 0, 0x12, -1, -1, 11, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangReflectTypeVariable;", "(Ljava/lang/reflect/TypeVariable<*>;)V", "hashCode", "equals", "LNSObject;", "toString", "forLookup", "LJavaLangReflectType;", "equalsType", "equalsTypeVariable", "(Ljava/lang/reflect/TypeVariable<*>;)Z", "Ljava/lang/reflect/TypeVariable<*>;", "LComGoogleCommonReflectTypeResolver;" };
  static const J2ObjcClassInfo _ComGoogleCommonReflectTypeResolver_TypeVariableKey = { "TypeVariableKey", "com.google.common.reflect", ptrTable, methods, fields, 7, 0x18, 7, 1, 12, -1, -1, -1, -1 };
  return &_ComGoogleCommonReflectTypeResolver_TypeVariableKey;
}

@end

void ComGoogleCommonReflectTypeResolver_TypeVariableKey_initWithJavaLangReflectTypeVariable_(ComGoogleCommonReflectTypeResolver_TypeVariableKey *self, id<JavaLangReflectTypeVariable> var) {
  NSObject_init(self);
  self->var_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(var);
}

ComGoogleCommonReflectTypeResolver_TypeVariableKey *new_ComGoogleCommonReflectTypeResolver_TypeVariableKey_initWithJavaLangReflectTypeVariable_(id<JavaLangReflectTypeVariable> var) {
  J2OBJC_NEW_IMPL(ComGoogleCommonReflectTypeResolver_TypeVariableKey, initWithJavaLangReflectTypeVariable_, var)
}

ComGoogleCommonReflectTypeResolver_TypeVariableKey *create_ComGoogleCommonReflectTypeResolver_TypeVariableKey_initWithJavaLangReflectTypeVariable_(id<JavaLangReflectTypeVariable> var) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonReflectTypeResolver_TypeVariableKey, initWithJavaLangReflectTypeVariable_, var)
}

ComGoogleCommonReflectTypeResolver_TypeVariableKey *ComGoogleCommonReflectTypeResolver_TypeVariableKey_forLookupWithJavaLangReflectType_(id<JavaLangReflectType> t) {
  ComGoogleCommonReflectTypeResolver_TypeVariableKey_initialize();
  if ([JavaLangReflectTypeVariable_class_() isInstance:t]) {
    return new_ComGoogleCommonReflectTypeResolver_TypeVariableKey_initWithJavaLangReflectTypeVariable_((id<JavaLangReflectTypeVariable>) cast_check(t, JavaLangReflectTypeVariable_class_()));
  }
  else {
    return nil;
  }
}

jboolean ComGoogleCommonReflectTypeResolver_TypeVariableKey_equalsTypeVariableWithJavaLangReflectTypeVariable_(ComGoogleCommonReflectTypeResolver_TypeVariableKey *self, id<JavaLangReflectTypeVariable> that) {
  return [((id<JavaLangReflectGenericDeclaration>) nil_chk([((id<JavaLangReflectTypeVariable>) nil_chk(self->var_)) getGenericDeclaration])) isEqual:[((id<JavaLangReflectTypeVariable>) nil_chk(that)) getGenericDeclaration]] && [((NSString *) nil_chk([self->var_ getName])) isEqual:[that getName]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonReflectTypeResolver_TypeVariableKey)
