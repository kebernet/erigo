//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/reflect/TypeVisitor.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/collect/Sets.h"
#include "com/google/common/reflect/TypeVisitor.h"
#include "java/lang/AssertionError.h"
#include "java/lang/reflect/GenericArrayType.h"
#include "java/lang/reflect/ParameterizedType.h"
#include "java/lang/reflect/Type.h"
#include "java/lang/reflect/TypeVariable.h"
#include "java/lang/reflect/WildcardType.h"
#include "java/util/HashSet.h"
#include "java/util/Set.h"

@interface ComGoogleCommonReflectTypeVisitor () {
 @public
  id<JavaUtilSet> visited_;
}

@end

J2OBJC_FIELD_SETTER(ComGoogleCommonReflectTypeVisitor, visited_, id<JavaUtilSet>)

@implementation ComGoogleCommonReflectTypeVisitor

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonReflectTypeVisitor_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)visitWithJavaLangReflectTypeArray:(IOSObjectArray *)types {
  {
    IOSObjectArray *a__ = types;
    id<JavaLangReflectType> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<JavaLangReflectType> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<JavaLangReflectType> type = *b__++;
      if (type == nil || ![((id<JavaUtilSet>) nil_chk(visited_)) addWithId:type]) {
        continue;
      }
      jboolean succeeded = false;
      @try {
        if ([JavaLangReflectTypeVariable_class_() isInstance:type]) {
          [self visitTypeVariableWithJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>) cast_check(type, JavaLangReflectTypeVariable_class_())];
        }
        else if ([JavaLangReflectWildcardType_class_() isInstance:type]) {
          [self visitWildcardTypeWithJavaLangReflectWildcardType:(id<JavaLangReflectWildcardType>) cast_check(type, JavaLangReflectWildcardType_class_())];
        }
        else if ([JavaLangReflectParameterizedType_class_() isInstance:type]) {
          [self visitParameterizedTypeWithJavaLangReflectParameterizedType:(id<JavaLangReflectParameterizedType>) cast_check(type, JavaLangReflectParameterizedType_class_())];
        }
        else if ([type isKindOfClass:[IOSClass class]]) {
          [self visitClassWithIOSClass:(IOSClass *) cast_chk(type, [IOSClass class])];
        }
        else if ([JavaLangReflectGenericArrayType_class_() isInstance:type]) {
          [self visitGenericArrayTypeWithJavaLangReflectGenericArrayType:(id<JavaLangReflectGenericArrayType>) cast_check(type, JavaLangReflectGenericArrayType_class_())];
        }
        else {
          @throw new_JavaLangAssertionError_initWithId_(JreStrcat("$@", @"Unknown type: ", type));
        }
        succeeded = true;
      }
      @finally {
        if (!succeeded) {
          [((id<JavaUtilSet>) nil_chk(visited_)) removeWithId:type];
        }
      }
    }
  }
}

- (void)visitClassWithIOSClass:(IOSClass *)t {
}

- (void)visitGenericArrayTypeWithJavaLangReflectGenericArrayType:(id<JavaLangReflectGenericArrayType>)t {
}

- (void)visitParameterizedTypeWithJavaLangReflectParameterizedType:(id<JavaLangReflectParameterizedType>)t {
}

- (void)visitTypeVariableWithJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>)t {
}

- (void)visitWildcardTypeWithJavaLangReflectWildcardType:(id<JavaLangReflectWildcardType>)t {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x91, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x0, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 10, -1, 11, -1, -1 },
    { NULL, "V", 0x0, 12, 13, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(visitWithJavaLangReflectTypeArray:);
  methods[2].selector = @selector(visitClassWithIOSClass:);
  methods[3].selector = @selector(visitGenericArrayTypeWithJavaLangReflectGenericArrayType:);
  methods[4].selector = @selector(visitParameterizedTypeWithJavaLangReflectParameterizedType:);
  methods[5].selector = @selector(visitTypeVariableWithJavaLangReflectTypeVariable:);
  methods[6].selector = @selector(visitWildcardTypeWithJavaLangReflectWildcardType:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "visited_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 14, -1 },
  };
  static const void *ptrTable[] = { "visit", "[LJavaLangReflectType;", "visitClass", "LIOSClass;", "(Ljava/lang/Class<*>;)V", "visitGenericArrayType", "LJavaLangReflectGenericArrayType;", "visitParameterizedType", "LJavaLangReflectParameterizedType;", "visitTypeVariable", "LJavaLangReflectTypeVariable;", "(Ljava/lang/reflect/TypeVariable<*>;)V", "visitWildcardType", "LJavaLangReflectWildcardType;", "Ljava/util/Set<Ljava/lang/reflect/Type;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonReflectTypeVisitor = { "TypeVisitor", "com.google.common.reflect", ptrTable, methods, fields, 7, 0x400, 7, 1, -1, -1, -1, -1, -1 };
  return &_ComGoogleCommonReflectTypeVisitor;
}

@end

void ComGoogleCommonReflectTypeVisitor_init(ComGoogleCommonReflectTypeVisitor *self) {
  NSObject_init(self);
  self->visited_ = ComGoogleCommonCollectSets_newHashSet();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonReflectTypeVisitor)
