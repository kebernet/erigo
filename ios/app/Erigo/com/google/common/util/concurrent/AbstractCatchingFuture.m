//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/util/concurrent/AbstractCatchingFuture.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Function.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/util/concurrent/AbstractCatchingFuture.h"
#include "com/google/common/util/concurrent/AbstractFuture.h"
#include "com/google/common/util/concurrent/AsyncFunction.h"
#include "com/google/common/util/concurrent/Futures.h"
#include "com/google/common/util/concurrent/ListenableFuture.h"
#include "com/google/common/util/concurrent/MoreExecutors.h"
#include "com/google/common/util/concurrent/Platform.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/ExecutionException.h"
#include "java/util/concurrent/Executor.h"
#include "javax/annotation/Nullable.h"

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonUtilConcurrentAbstractCatchingFuture__Annotations$0();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonUtilConcurrentAbstractCatchingFuture__Annotations$1();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonUtilConcurrentAbstractCatchingFuture__Annotations$2();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonUtilConcurrentAbstractCatchingFuture__Annotations$3();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonUtilConcurrentAbstractCatchingFuture__Annotations$4();

@interface ComGoogleCommonUtilConcurrentAbstractCatchingFuture_AsyncCatchingFuture : ComGoogleCommonUtilConcurrentAbstractCatchingFuture

- (instancetype)initWithComGoogleCommonUtilConcurrentListenableFuture:(id<ComGoogleCommonUtilConcurrentListenableFuture>)input
                                                         withIOSClass:(IOSClass *)exceptionType
                       withComGoogleCommonUtilConcurrentAsyncFunction:(id<ComGoogleCommonUtilConcurrentAsyncFunction>)fallback;

- (id<ComGoogleCommonUtilConcurrentListenableFuture>)doFallbackWithId:(id<ComGoogleCommonUtilConcurrentAsyncFunction>)fallback
                                                      withNSException:(NSException *)cause;
#define withJavaLangThrowable withNSException

- (void)setResultWithId:(id<ComGoogleCommonUtilConcurrentListenableFuture>)result;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractCatchingFuture_AsyncCatchingFuture)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractCatchingFuture_AsyncCatchingFuture_initWithComGoogleCommonUtilConcurrentListenableFuture_withIOSClass_withComGoogleCommonUtilConcurrentAsyncFunction_(ComGoogleCommonUtilConcurrentAbstractCatchingFuture_AsyncCatchingFuture *self, id<ComGoogleCommonUtilConcurrentListenableFuture> input, IOSClass *exceptionType, id<ComGoogleCommonUtilConcurrentAsyncFunction> fallback);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractCatchingFuture_AsyncCatchingFuture *new_ComGoogleCommonUtilConcurrentAbstractCatchingFuture_AsyncCatchingFuture_initWithComGoogleCommonUtilConcurrentListenableFuture_withIOSClass_withComGoogleCommonUtilConcurrentAsyncFunction_(id<ComGoogleCommonUtilConcurrentListenableFuture> input, IOSClass *exceptionType, id<ComGoogleCommonUtilConcurrentAsyncFunction> fallback) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractCatchingFuture_AsyncCatchingFuture *create_ComGoogleCommonUtilConcurrentAbstractCatchingFuture_AsyncCatchingFuture_initWithComGoogleCommonUtilConcurrentListenableFuture_withIOSClass_withComGoogleCommonUtilConcurrentAsyncFunction_(id<ComGoogleCommonUtilConcurrentListenableFuture> input, IOSClass *exceptionType, id<ComGoogleCommonUtilConcurrentAsyncFunction> fallback);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentAbstractCatchingFuture_AsyncCatchingFuture)

@interface ComGoogleCommonUtilConcurrentAbstractCatchingFuture_CatchingFuture : ComGoogleCommonUtilConcurrentAbstractCatchingFuture

- (instancetype)initWithComGoogleCommonUtilConcurrentListenableFuture:(id<ComGoogleCommonUtilConcurrentListenableFuture>)input
                                                         withIOSClass:(IOSClass *)exceptionType
                                      withComGoogleCommonBaseFunction:(id<ComGoogleCommonBaseFunction>)fallback;

- (id)doFallbackWithId:(id<ComGoogleCommonBaseFunction>)fallback
       withNSException:(NSException *)cause;
#define withJavaLangThrowable withNSException

- (void)setResultWithId:(id)result;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractCatchingFuture_CatchingFuture)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractCatchingFuture_CatchingFuture_initWithComGoogleCommonUtilConcurrentListenableFuture_withIOSClass_withComGoogleCommonBaseFunction_(ComGoogleCommonUtilConcurrentAbstractCatchingFuture_CatchingFuture *self, id<ComGoogleCommonUtilConcurrentListenableFuture> input, IOSClass *exceptionType, id<ComGoogleCommonBaseFunction> fallback);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractCatchingFuture_CatchingFuture *new_ComGoogleCommonUtilConcurrentAbstractCatchingFuture_CatchingFuture_initWithComGoogleCommonUtilConcurrentListenableFuture_withIOSClass_withComGoogleCommonBaseFunction_(id<ComGoogleCommonUtilConcurrentListenableFuture> input, IOSClass *exceptionType, id<ComGoogleCommonBaseFunction> fallback) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractCatchingFuture_CatchingFuture *create_ComGoogleCommonUtilConcurrentAbstractCatchingFuture_CatchingFuture_initWithComGoogleCommonUtilConcurrentListenableFuture_withIOSClass_withComGoogleCommonBaseFunction_(id<ComGoogleCommonUtilConcurrentListenableFuture> input, IOSClass *exceptionType, id<ComGoogleCommonBaseFunction> fallback);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonUtilConcurrentAbstractCatchingFuture_CatchingFuture__Annotations$0();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonUtilConcurrentAbstractCatchingFuture_CatchingFuture__Annotations$1();

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentAbstractCatchingFuture_CatchingFuture)

@implementation ComGoogleCommonUtilConcurrentAbstractCatchingFuture

+ (id<ComGoogleCommonUtilConcurrentListenableFuture>)createWithComGoogleCommonUtilConcurrentListenableFuture:(id<ComGoogleCommonUtilConcurrentListenableFuture>)input
                                                                                                withIOSClass:(IOSClass *)exceptionType
                                                                             withComGoogleCommonBaseFunction:(id<ComGoogleCommonBaseFunction>)fallback {
  return ComGoogleCommonUtilConcurrentAbstractCatchingFuture_createWithComGoogleCommonUtilConcurrentListenableFuture_withIOSClass_withComGoogleCommonBaseFunction_(input, exceptionType, fallback);
}

+ (id<ComGoogleCommonUtilConcurrentListenableFuture>)createWithComGoogleCommonUtilConcurrentListenableFuture:(id<ComGoogleCommonUtilConcurrentListenableFuture>)input
                                                                                                withIOSClass:(IOSClass *)exceptionType
                                                                             withComGoogleCommonBaseFunction:(id<ComGoogleCommonBaseFunction>)fallback
                                                                              withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor {
  return ComGoogleCommonUtilConcurrentAbstractCatchingFuture_createWithComGoogleCommonUtilConcurrentListenableFuture_withIOSClass_withComGoogleCommonBaseFunction_withJavaUtilConcurrentExecutor_(input, exceptionType, fallback, executor);
}

+ (id<ComGoogleCommonUtilConcurrentListenableFuture>)createWithComGoogleCommonUtilConcurrentListenableFuture:(id<ComGoogleCommonUtilConcurrentListenableFuture>)input
                                                                                                withIOSClass:(IOSClass *)exceptionType
                                                              withComGoogleCommonUtilConcurrentAsyncFunction:(id<ComGoogleCommonUtilConcurrentAsyncFunction>)fallback {
  return ComGoogleCommonUtilConcurrentAbstractCatchingFuture_createWithComGoogleCommonUtilConcurrentListenableFuture_withIOSClass_withComGoogleCommonUtilConcurrentAsyncFunction_(input, exceptionType, fallback);
}

+ (id<ComGoogleCommonUtilConcurrentListenableFuture>)createWithComGoogleCommonUtilConcurrentListenableFuture:(id<ComGoogleCommonUtilConcurrentListenableFuture>)input
                                                                                                withIOSClass:(IOSClass *)exceptionType
                                                              withComGoogleCommonUtilConcurrentAsyncFunction:(id<ComGoogleCommonUtilConcurrentAsyncFunction>)fallback
                                                                              withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor {
  return ComGoogleCommonUtilConcurrentAbstractCatchingFuture_createWithComGoogleCommonUtilConcurrentListenableFuture_withIOSClass_withComGoogleCommonUtilConcurrentAsyncFunction_withJavaUtilConcurrentExecutor_(input, exceptionType, fallback, executor);
}

- (instancetype)initWithComGoogleCommonUtilConcurrentListenableFuture:(id<ComGoogleCommonUtilConcurrentListenableFuture>)inputFuture
                                                         withIOSClass:(IOSClass *)exceptionType
                                                               withId:(id)fallback {
  ComGoogleCommonUtilConcurrentAbstractCatchingFuture_initWithComGoogleCommonUtilConcurrentListenableFuture_withIOSClass_withId_(self, inputFuture, exceptionType, fallback);
  return self;
}

- (void)run {
  id<ComGoogleCommonUtilConcurrentListenableFuture> localInputFuture = inputFuture_;
  IOSClass *localExceptionType = exceptionType_;
  id localFallback = fallback_;
  if ((localInputFuture == nil) | (localExceptionType == nil) | (localFallback == nil) | [self isCancelled]) {
    return;
  }
  inputFuture_ = nil;
  exceptionType_ = nil;
  fallback_ = nil;
  id sourceResult = nil;
  NSException *throwable = nil;
  @try {
    sourceResult = ComGoogleCommonUtilConcurrentFutures_getDoneWithJavaUtilConcurrentFuture_(localInputFuture);
  }
  @catch (JavaUtilConcurrentExecutionException *e) {
    throwable = ComGoogleCommonBasePreconditions_checkNotNullWithId_([e getCause]);
  }
  @catch (NSException *e) {
    throwable = e;
  }
  if (throwable == nil) {
    [self setWithId:sourceResult];
    return;
  }
  if (!ComGoogleCommonUtilConcurrentPlatform_isInstanceOfThrowableClassWithNSException_withIOSClass_(throwable, localExceptionType)) {
    [self setExceptionWithNSException:throwable];
    return;
  }
  NSException *castThrowable = throwable;
  id fallbackResult;
  @try {
    fallbackResult = [self doFallbackWithId:localFallback withNSException:castThrowable];
  }
  @catch (NSException *t) {
    [self setExceptionWithNSException:t];
    return;
  }
  [self setResultWithId:fallbackResult];
}

- (id)doFallbackWithId:(id)fallback
       withNSException:(NSException *)throwable {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setResultWithId:(id)result {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)afterDone {
  [self maybePropagateCancellationWithJavaUtilConcurrentFuture:inputFuture_];
  self->inputFuture_ = nil;
  self->exceptionType_ = nil;
  self->fallback_ = nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LComGoogleCommonUtilConcurrentListenableFuture;", 0x8, 0, 1, -1, 2, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentListenableFuture;", 0x8, 0, 3, -1, 4, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentListenableFuture;", 0x8, 0, 5, -1, 6, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentListenableFuture;", 0x8, 0, 7, -1, 8, -1, -1 },
    { NULL, NULL, 0x0, -1, 9, -1, 10, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x400, 11, 12, 13, 14, 15, -1 },
    { NULL, "V", 0x400, 16, 17, -1, 18, -1, 19 },
    { NULL, "V", 0x14, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(createWithComGoogleCommonUtilConcurrentListenableFuture:withIOSClass:withComGoogleCommonBaseFunction:);
  methods[1].selector = @selector(createWithComGoogleCommonUtilConcurrentListenableFuture:withIOSClass:withComGoogleCommonBaseFunction:withJavaUtilConcurrentExecutor:);
  methods[2].selector = @selector(createWithComGoogleCommonUtilConcurrentListenableFuture:withIOSClass:withComGoogleCommonUtilConcurrentAsyncFunction:);
  methods[3].selector = @selector(createWithComGoogleCommonUtilConcurrentListenableFuture:withIOSClass:withComGoogleCommonUtilConcurrentAsyncFunction:withJavaUtilConcurrentExecutor:);
  methods[4].selector = @selector(initWithComGoogleCommonUtilConcurrentListenableFuture:withIOSClass:withId:);
  methods[5].selector = @selector(run);
  methods[6].selector = @selector(doFallbackWithId:withNSException:);
  methods[7].selector = @selector(setResultWithId:);
  methods[8].selector = @selector(afterDone);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "inputFuture_", "LComGoogleCommonUtilConcurrentListenableFuture;", .constantValue.asLong = 0, 0x0, -1, -1, 20, 21 },
    { "exceptionType_", "LIOSClass;", .constantValue.asLong = 0, 0x0, -1, -1, 22, 23 },
    { "fallback_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, 24, 25 },
  };
  static const void *ptrTable[] = { "create", "LComGoogleCommonUtilConcurrentListenableFuture;LIOSClass;LComGoogleCommonBaseFunction;", "<X:Ljava/lang/Throwable;V:Ljava/lang/Object;>(Lcom/google/common/util/concurrent/ListenableFuture<+TV;>;Ljava/lang/Class<TX;>;Lcom/google/common/base/Function<-TX;+TV;>;)Lcom/google/common/util/concurrent/ListenableFuture<TV;>;", "LComGoogleCommonUtilConcurrentListenableFuture;LIOSClass;LComGoogleCommonBaseFunction;LJavaUtilConcurrentExecutor;", "<V:Ljava/lang/Object;X:Ljava/lang/Throwable;>(Lcom/google/common/util/concurrent/ListenableFuture<+TV;>;Ljava/lang/Class<TX;>;Lcom/google/common/base/Function<-TX;+TV;>;Ljava/util/concurrent/Executor;)Lcom/google/common/util/concurrent/ListenableFuture<TV;>;", "LComGoogleCommonUtilConcurrentListenableFuture;LIOSClass;LComGoogleCommonUtilConcurrentAsyncFunction;", "<X:Ljava/lang/Throwable;V:Ljava/lang/Object;>(Lcom/google/common/util/concurrent/ListenableFuture<+TV;>;Ljava/lang/Class<TX;>;Lcom/google/common/util/concurrent/AsyncFunction<-TX;+TV;>;)Lcom/google/common/util/concurrent/ListenableFuture<TV;>;", "LComGoogleCommonUtilConcurrentListenableFuture;LIOSClass;LComGoogleCommonUtilConcurrentAsyncFunction;LJavaUtilConcurrentExecutor;", "<X:Ljava/lang/Throwable;V:Ljava/lang/Object;>(Lcom/google/common/util/concurrent/ListenableFuture<+TV;>;Ljava/lang/Class<TX;>;Lcom/google/common/util/concurrent/AsyncFunction<-TX;+TV;>;Ljava/util/concurrent/Executor;)Lcom/google/common/util/concurrent/ListenableFuture<TV;>;", "LComGoogleCommonUtilConcurrentListenableFuture;LIOSClass;LNSObject;", "(Lcom/google/common/util/concurrent/ListenableFuture<+TV;>;Ljava/lang/Class<TX;>;TF;)V", "doFallback", "LNSObject;LNSException;", "LJavaLangException;", "(TF;TX;)TT;", (void *)&ComGoogleCommonUtilConcurrentAbstractCatchingFuture__Annotations$0, "setResult", "LNSObject;", "(TT;)V", (void *)&ComGoogleCommonUtilConcurrentAbstractCatchingFuture__Annotations$1, "Lcom/google/common/util/concurrent/ListenableFuture<+TV;>;", (void *)&ComGoogleCommonUtilConcurrentAbstractCatchingFuture__Annotations$2, "Ljava/lang/Class<TX;>;", (void *)&ComGoogleCommonUtilConcurrentAbstractCatchingFuture__Annotations$3, "TF;", (void *)&ComGoogleCommonUtilConcurrentAbstractCatchingFuture__Annotations$4, "LComGoogleCommonUtilConcurrentAbstractCatchingFuture_AsyncCatchingFuture;LComGoogleCommonUtilConcurrentAbstractCatchingFuture_CatchingFuture;", "<V:Ljava/lang/Object;X:Ljava/lang/Throwable;F:Ljava/lang/Object;T:Ljava/lang/Object;>Lcom/google/common/util/concurrent/AbstractFuture$TrustedFuture<TV;>;Ljava/lang/Runnable;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractCatchingFuture = { "AbstractCatchingFuture", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x400, 9, 3, -1, 26, -1, 27, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractCatchingFuture;
}

@end

id<ComGoogleCommonUtilConcurrentListenableFuture> ComGoogleCommonUtilConcurrentAbstractCatchingFuture_createWithComGoogleCommonUtilConcurrentListenableFuture_withIOSClass_withComGoogleCommonBaseFunction_(id<ComGoogleCommonUtilConcurrentListenableFuture> input, IOSClass *exceptionType, id<ComGoogleCommonBaseFunction> fallback) {
  ComGoogleCommonUtilConcurrentAbstractCatchingFuture_initialize();
  ComGoogleCommonUtilConcurrentAbstractCatchingFuture_CatchingFuture *future = new_ComGoogleCommonUtilConcurrentAbstractCatchingFuture_CatchingFuture_initWithComGoogleCommonUtilConcurrentListenableFuture_withIOSClass_withComGoogleCommonBaseFunction_(input, exceptionType, fallback);
  [((id<ComGoogleCommonUtilConcurrentListenableFuture>) nil_chk(input)) addListenerWithJavaLangRunnable:future withJavaUtilConcurrentExecutor:ComGoogleCommonUtilConcurrentMoreExecutors_directExecutor()];
  return future;
}

id<ComGoogleCommonUtilConcurrentListenableFuture> ComGoogleCommonUtilConcurrentAbstractCatchingFuture_createWithComGoogleCommonUtilConcurrentListenableFuture_withIOSClass_withComGoogleCommonBaseFunction_withJavaUtilConcurrentExecutor_(id<ComGoogleCommonUtilConcurrentListenableFuture> input, IOSClass *exceptionType, id<ComGoogleCommonBaseFunction> fallback, id<JavaUtilConcurrentExecutor> executor) {
  ComGoogleCommonUtilConcurrentAbstractCatchingFuture_initialize();
  ComGoogleCommonUtilConcurrentAbstractCatchingFuture_CatchingFuture *future = new_ComGoogleCommonUtilConcurrentAbstractCatchingFuture_CatchingFuture_initWithComGoogleCommonUtilConcurrentListenableFuture_withIOSClass_withComGoogleCommonBaseFunction_(input, exceptionType, fallback);
  [((id<ComGoogleCommonUtilConcurrentListenableFuture>) nil_chk(input)) addListenerWithJavaLangRunnable:future withJavaUtilConcurrentExecutor:ComGoogleCommonUtilConcurrentMoreExecutors_rejectionPropagatingExecutorWithJavaUtilConcurrentExecutor_withComGoogleCommonUtilConcurrentAbstractFuture_(executor, future)];
  return future;
}

id<ComGoogleCommonUtilConcurrentListenableFuture> ComGoogleCommonUtilConcurrentAbstractCatchingFuture_createWithComGoogleCommonUtilConcurrentListenableFuture_withIOSClass_withComGoogleCommonUtilConcurrentAsyncFunction_(id<ComGoogleCommonUtilConcurrentListenableFuture> input, IOSClass *exceptionType, id<ComGoogleCommonUtilConcurrentAsyncFunction> fallback) {
  ComGoogleCommonUtilConcurrentAbstractCatchingFuture_initialize();
  ComGoogleCommonUtilConcurrentAbstractCatchingFuture_AsyncCatchingFuture *future = new_ComGoogleCommonUtilConcurrentAbstractCatchingFuture_AsyncCatchingFuture_initWithComGoogleCommonUtilConcurrentListenableFuture_withIOSClass_withComGoogleCommonUtilConcurrentAsyncFunction_(input, exceptionType, fallback);
  [((id<ComGoogleCommonUtilConcurrentListenableFuture>) nil_chk(input)) addListenerWithJavaLangRunnable:future withJavaUtilConcurrentExecutor:ComGoogleCommonUtilConcurrentMoreExecutors_directExecutor()];
  return future;
}

id<ComGoogleCommonUtilConcurrentListenableFuture> ComGoogleCommonUtilConcurrentAbstractCatchingFuture_createWithComGoogleCommonUtilConcurrentListenableFuture_withIOSClass_withComGoogleCommonUtilConcurrentAsyncFunction_withJavaUtilConcurrentExecutor_(id<ComGoogleCommonUtilConcurrentListenableFuture> input, IOSClass *exceptionType, id<ComGoogleCommonUtilConcurrentAsyncFunction> fallback, id<JavaUtilConcurrentExecutor> executor) {
  ComGoogleCommonUtilConcurrentAbstractCatchingFuture_initialize();
  ComGoogleCommonUtilConcurrentAbstractCatchingFuture_AsyncCatchingFuture *future = new_ComGoogleCommonUtilConcurrentAbstractCatchingFuture_AsyncCatchingFuture_initWithComGoogleCommonUtilConcurrentListenableFuture_withIOSClass_withComGoogleCommonUtilConcurrentAsyncFunction_(input, exceptionType, fallback);
  [((id<ComGoogleCommonUtilConcurrentListenableFuture>) nil_chk(input)) addListenerWithJavaLangRunnable:future withJavaUtilConcurrentExecutor:ComGoogleCommonUtilConcurrentMoreExecutors_rejectionPropagatingExecutorWithJavaUtilConcurrentExecutor_withComGoogleCommonUtilConcurrentAbstractFuture_(executor, future)];
  return future;
}

void ComGoogleCommonUtilConcurrentAbstractCatchingFuture_initWithComGoogleCommonUtilConcurrentListenableFuture_withIOSClass_withId_(ComGoogleCommonUtilConcurrentAbstractCatchingFuture *self, id<ComGoogleCommonUtilConcurrentListenableFuture> inputFuture, IOSClass *exceptionType, id fallback) {
  ComGoogleCommonUtilConcurrentAbstractFuture_TrustedFuture_init(self);
  self->inputFuture_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(inputFuture);
  self->exceptionType_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(exceptionType);
  self->fallback_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(fallback);
}

IOSObjectArray *ComGoogleCommonUtilConcurrentAbstractCatchingFuture__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonUtilConcurrentAbstractCatchingFuture__Annotations$1() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonUtilConcurrentAbstractCatchingFuture__Annotations$2() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonUtilConcurrentAbstractCatchingFuture__Annotations$3() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonUtilConcurrentAbstractCatchingFuture__Annotations$4() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentAbstractCatchingFuture)

@implementation ComGoogleCommonUtilConcurrentAbstractCatchingFuture_AsyncCatchingFuture

- (instancetype)initWithComGoogleCommonUtilConcurrentListenableFuture:(id<ComGoogleCommonUtilConcurrentListenableFuture>)input
                                                         withIOSClass:(IOSClass *)exceptionType
                       withComGoogleCommonUtilConcurrentAsyncFunction:(id<ComGoogleCommonUtilConcurrentAsyncFunction>)fallback {
  ComGoogleCommonUtilConcurrentAbstractCatchingFuture_AsyncCatchingFuture_initWithComGoogleCommonUtilConcurrentListenableFuture_withIOSClass_withComGoogleCommonUtilConcurrentAsyncFunction_(self, input, exceptionType, fallback);
  return self;
}

- (id<ComGoogleCommonUtilConcurrentListenableFuture>)doFallbackWithId:(id<ComGoogleCommonUtilConcurrentAsyncFunction>)fallback
                                                      withNSException:(NSException *)cause {
  id<ComGoogleCommonUtilConcurrentListenableFuture> replacement = [((id<ComGoogleCommonUtilConcurrentAsyncFunction>) nil_chk(fallback)) applyWithId:cause];
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_withId_(replacement, @"AsyncFunction.apply returned null instead of a Future. Did you mean to return immediateFuture(null)?");
  return replacement;
}

- (void)setResultWithId:(id<ComGoogleCommonUtilConcurrentListenableFuture>)result {
  [self setFutureWithComGoogleCommonUtilConcurrentListenableFuture:result];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentListenableFuture;", 0x0, 2, 3, 4, 5, -1, -1 },
    { NULL, "V", 0x0, 6, 7, -1, 8, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentListenableFuture:withIOSClass:withComGoogleCommonUtilConcurrentAsyncFunction:);
  methods[1].selector = @selector(doFallbackWithId:withNSException:);
  methods[2].selector = @selector(setResultWithId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentListenableFuture;LIOSClass;LComGoogleCommonUtilConcurrentAsyncFunction;", "(Lcom/google/common/util/concurrent/ListenableFuture<+TV;>;Ljava/lang/Class<TX;>;Lcom/google/common/util/concurrent/AsyncFunction<-TX;+TV;>;)V", "doFallback", "LComGoogleCommonUtilConcurrentAsyncFunction;LNSException;", "LJavaLangException;", "(Lcom/google/common/util/concurrent/AsyncFunction<-TX;+TV;>;TX;)Lcom/google/common/util/concurrent/ListenableFuture<+TV;>;", "setResult", "LComGoogleCommonUtilConcurrentListenableFuture;", "(Lcom/google/common/util/concurrent/ListenableFuture<+TV;>;)V", "LComGoogleCommonUtilConcurrentAbstractCatchingFuture;", "<V:Ljava/lang/Object;X:Ljava/lang/Throwable;>Lcom/google/common/util/concurrent/AbstractCatchingFuture<TV;TX;Lcom/google/common/util/concurrent/AsyncFunction<-TX;+TV;>;Lcom/google/common/util/concurrent/ListenableFuture<+TV;>;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractCatchingFuture_AsyncCatchingFuture = { "AsyncCatchingFuture", "com.google.common.util.concurrent", ptrTable, methods, NULL, 7, 0x1a, 3, 0, 9, -1, -1, 10, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractCatchingFuture_AsyncCatchingFuture;
}

@end

void ComGoogleCommonUtilConcurrentAbstractCatchingFuture_AsyncCatchingFuture_initWithComGoogleCommonUtilConcurrentListenableFuture_withIOSClass_withComGoogleCommonUtilConcurrentAsyncFunction_(ComGoogleCommonUtilConcurrentAbstractCatchingFuture_AsyncCatchingFuture *self, id<ComGoogleCommonUtilConcurrentListenableFuture> input, IOSClass *exceptionType, id<ComGoogleCommonUtilConcurrentAsyncFunction> fallback) {
  ComGoogleCommonUtilConcurrentAbstractCatchingFuture_initWithComGoogleCommonUtilConcurrentListenableFuture_withIOSClass_withId_(self, input, exceptionType, fallback);
}

ComGoogleCommonUtilConcurrentAbstractCatchingFuture_AsyncCatchingFuture *new_ComGoogleCommonUtilConcurrentAbstractCatchingFuture_AsyncCatchingFuture_initWithComGoogleCommonUtilConcurrentListenableFuture_withIOSClass_withComGoogleCommonUtilConcurrentAsyncFunction_(id<ComGoogleCommonUtilConcurrentListenableFuture> input, IOSClass *exceptionType, id<ComGoogleCommonUtilConcurrentAsyncFunction> fallback) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractCatchingFuture_AsyncCatchingFuture, initWithComGoogleCommonUtilConcurrentListenableFuture_withIOSClass_withComGoogleCommonUtilConcurrentAsyncFunction_, input, exceptionType, fallback)
}

ComGoogleCommonUtilConcurrentAbstractCatchingFuture_AsyncCatchingFuture *create_ComGoogleCommonUtilConcurrentAbstractCatchingFuture_AsyncCatchingFuture_initWithComGoogleCommonUtilConcurrentListenableFuture_withIOSClass_withComGoogleCommonUtilConcurrentAsyncFunction_(id<ComGoogleCommonUtilConcurrentListenableFuture> input, IOSClass *exceptionType, id<ComGoogleCommonUtilConcurrentAsyncFunction> fallback) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractCatchingFuture_AsyncCatchingFuture, initWithComGoogleCommonUtilConcurrentListenableFuture_withIOSClass_withComGoogleCommonUtilConcurrentAsyncFunction_, input, exceptionType, fallback)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentAbstractCatchingFuture_AsyncCatchingFuture)

@implementation ComGoogleCommonUtilConcurrentAbstractCatchingFuture_CatchingFuture

- (instancetype)initWithComGoogleCommonUtilConcurrentListenableFuture:(id<ComGoogleCommonUtilConcurrentListenableFuture>)input
                                                         withIOSClass:(IOSClass *)exceptionType
                                      withComGoogleCommonBaseFunction:(id<ComGoogleCommonBaseFunction>)fallback {
  ComGoogleCommonUtilConcurrentAbstractCatchingFuture_CatchingFuture_initWithComGoogleCommonUtilConcurrentListenableFuture_withIOSClass_withComGoogleCommonBaseFunction_(self, input, exceptionType, fallback);
  return self;
}

- (id)doFallbackWithId:(id<ComGoogleCommonBaseFunction>)fallback
       withNSException:(NSException *)cause {
  return [((id<ComGoogleCommonBaseFunction>) nil_chk(fallback)) applyWithId:cause];
}

- (void)setResultWithId:(id)result {
  [self setWithId:result];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x0, 2, 3, 4, 5, 6, -1 },
    { NULL, "V", 0x0, 7, 8, -1, 9, -1, 10 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentListenableFuture:withIOSClass:withComGoogleCommonBaseFunction:);
  methods[1].selector = @selector(doFallbackWithId:withNSException:);
  methods[2].selector = @selector(setResultWithId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentListenableFuture;LIOSClass;LComGoogleCommonBaseFunction;", "(Lcom/google/common/util/concurrent/ListenableFuture<+TV;>;Ljava/lang/Class<TX;>;Lcom/google/common/base/Function<-TX;+TV;>;)V", "doFallback", "LComGoogleCommonBaseFunction;LNSException;", "LJavaLangException;", "(Lcom/google/common/base/Function<-TX;+TV;>;TX;)TV;", (void *)&ComGoogleCommonUtilConcurrentAbstractCatchingFuture_CatchingFuture__Annotations$0, "setResult", "LNSObject;", "(TV;)V", (void *)&ComGoogleCommonUtilConcurrentAbstractCatchingFuture_CatchingFuture__Annotations$1, "LComGoogleCommonUtilConcurrentAbstractCatchingFuture;", "<V:Ljava/lang/Object;X:Ljava/lang/Throwable;>Lcom/google/common/util/concurrent/AbstractCatchingFuture<TV;TX;Lcom/google/common/base/Function<-TX;+TV;>;TV;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractCatchingFuture_CatchingFuture = { "CatchingFuture", "com.google.common.util.concurrent", ptrTable, methods, NULL, 7, 0x1a, 3, 0, 11, -1, -1, 12, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractCatchingFuture_CatchingFuture;
}

@end

void ComGoogleCommonUtilConcurrentAbstractCatchingFuture_CatchingFuture_initWithComGoogleCommonUtilConcurrentListenableFuture_withIOSClass_withComGoogleCommonBaseFunction_(ComGoogleCommonUtilConcurrentAbstractCatchingFuture_CatchingFuture *self, id<ComGoogleCommonUtilConcurrentListenableFuture> input, IOSClass *exceptionType, id<ComGoogleCommonBaseFunction> fallback) {
  ComGoogleCommonUtilConcurrentAbstractCatchingFuture_initWithComGoogleCommonUtilConcurrentListenableFuture_withIOSClass_withId_(self, input, exceptionType, fallback);
}

ComGoogleCommonUtilConcurrentAbstractCatchingFuture_CatchingFuture *new_ComGoogleCommonUtilConcurrentAbstractCatchingFuture_CatchingFuture_initWithComGoogleCommonUtilConcurrentListenableFuture_withIOSClass_withComGoogleCommonBaseFunction_(id<ComGoogleCommonUtilConcurrentListenableFuture> input, IOSClass *exceptionType, id<ComGoogleCommonBaseFunction> fallback) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractCatchingFuture_CatchingFuture, initWithComGoogleCommonUtilConcurrentListenableFuture_withIOSClass_withComGoogleCommonBaseFunction_, input, exceptionType, fallback)
}

ComGoogleCommonUtilConcurrentAbstractCatchingFuture_CatchingFuture *create_ComGoogleCommonUtilConcurrentAbstractCatchingFuture_CatchingFuture_initWithComGoogleCommonUtilConcurrentListenableFuture_withIOSClass_withComGoogleCommonBaseFunction_(id<ComGoogleCommonUtilConcurrentListenableFuture> input, IOSClass *exceptionType, id<ComGoogleCommonBaseFunction> fallback) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractCatchingFuture_CatchingFuture, initWithComGoogleCommonUtilConcurrentListenableFuture_withIOSClass_withComGoogleCommonBaseFunction_, input, exceptionType, fallback)
}

IOSObjectArray *ComGoogleCommonUtilConcurrentAbstractCatchingFuture_CatchingFuture__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonUtilConcurrentAbstractCatchingFuture_CatchingFuture__Annotations$1() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentAbstractCatchingFuture_CatchingFuture)
