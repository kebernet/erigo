//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/util/concurrent/AbstractCheckedFuture.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/util/concurrent/AbstractCheckedFuture.h"
#include "com/google/common/util/concurrent/ForwardingListenableFuture.h"
#include "com/google/common/util/concurrent/ListenableFuture.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Exception.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/CancellationException.h"
#include "java/util/concurrent/ExecutionException.h"
#include "java/util/concurrent/TimeUnit.h"

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonUtilConcurrentAbstractCheckedFuture__Annotations$0();

@implementation ComGoogleCommonUtilConcurrentAbstractCheckedFuture

- (instancetype)initWithComGoogleCommonUtilConcurrentListenableFuture:(id<ComGoogleCommonUtilConcurrentListenableFuture>)delegate {
  ComGoogleCommonUtilConcurrentAbstractCheckedFuture_initWithComGoogleCommonUtilConcurrentListenableFuture_(self, delegate);
  return self;
}

- (JavaLangException *)mapExceptionWithJavaLangException:(JavaLangException *)e {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)checkedGet {
  @try {
    return [self get];
  }
  @catch (JavaLangInterruptedException *e) {
    [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) interrupt];
    @throw nil_chk([self mapExceptionWithJavaLangException:e]);
  }
  @catch (JavaUtilConcurrentCancellationException *e) {
    @throw nil_chk([self mapExceptionWithJavaLangException:e]);
  }
  @catch (JavaUtilConcurrentExecutionException *e) {
    @throw nil_chk([self mapExceptionWithJavaLangException:e]);
  }
}

- (id)checkedGetWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  @try {
    return [self getWithLong:timeout withJavaUtilConcurrentTimeUnit:unit];
  }
  @catch (JavaLangInterruptedException *e) {
    [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) interrupt];
    @throw nil_chk([self mapExceptionWithJavaLangException:e]);
  }
  @catch (JavaUtilConcurrentCancellationException *e) {
    @throw nil_chk([self mapExceptionWithJavaLangException:e]);
  }
  @catch (JavaUtilConcurrentExecutionException *e) {
    @throw nil_chk([self mapExceptionWithJavaLangException:e]);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, 1, -1, -1 },
    { NULL, "LJavaLangException;", 0x404, 2, 3, -1, 4, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 3, 5, -1, -1 },
    { NULL, "LNSObject;", 0x1, 6, 7, 8, 9, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentListenableFuture:);
  methods[1].selector = @selector(mapExceptionWithJavaLangException:);
  methods[2].selector = @selector(checkedGet);
  methods[3].selector = @selector(checkedGetWithLong:withJavaUtilConcurrentTimeUnit:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentListenableFuture;", "(Lcom/google/common/util/concurrent/ListenableFuture<TV;>;)V", "mapException", "LJavaLangException;", "(Ljava/lang/Exception;)TX;", "()TV;^TX;", "checkedGet", "JLJavaUtilConcurrentTimeUnit;", "LJavaUtilConcurrentTimeoutException;LJavaLangException;", "(JLjava/util/concurrent/TimeUnit;)TV;^Ljava/util/concurrent/TimeoutException;^TX;", "<V:Ljava/lang/Object;X:Ljava/lang/Exception;>Lcom/google/common/util/concurrent/ForwardingListenableFuture$SimpleForwardingListenableFuture<TV;>;Lcom/google/common/util/concurrent/CheckedFuture<TV;TX;>;", (void *)&ComGoogleCommonUtilConcurrentAbstractCheckedFuture__Annotations$0 };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractCheckedFuture = { "AbstractCheckedFuture", "com.google.common.util.concurrent", ptrTable, methods, NULL, 7, 0x401, 4, 0, -1, -1, -1, 10, 11 };
  return &_ComGoogleCommonUtilConcurrentAbstractCheckedFuture;
}

@end

void ComGoogleCommonUtilConcurrentAbstractCheckedFuture_initWithComGoogleCommonUtilConcurrentListenableFuture_(ComGoogleCommonUtilConcurrentAbstractCheckedFuture *self, id<ComGoogleCommonUtilConcurrentListenableFuture> delegate) {
  ComGoogleCommonUtilConcurrentForwardingListenableFuture_SimpleForwardingListenableFuture_initWithComGoogleCommonUtilConcurrentListenableFuture_(self, delegate);
}

IOSObjectArray *ComGoogleCommonUtilConcurrentAbstractCheckedFuture__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentAbstractCheckedFuture)
