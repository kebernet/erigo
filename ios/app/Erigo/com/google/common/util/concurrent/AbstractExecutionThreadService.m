//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/util/concurrent/AbstractExecutionThreadService.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Supplier.h"
#include "com/google/common/util/concurrent/AbstractExecutionThreadService.h"
#include "com/google/common/util/concurrent/AbstractService.h"
#include "com/google/common/util/concurrent/MoreExecutors.h"
#include "com/google/common/util/concurrent/Service.h"
#include "java/lang/Exception.h"
#include "java/lang/Runnable.h"
#include "java/lang/Thread.h"
#include "java/util/concurrent/Executor.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"

@interface ComGoogleCommonUtilConcurrentAbstractExecutionThreadService () {
 @public
  id<ComGoogleCommonUtilConcurrentService> delegate_;
}

@end

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService, delegate_, id<ComGoogleCommonUtilConcurrentService>)

inline JavaUtilLoggingLogger *ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_get_logger();
static JavaUtilLoggingLogger *ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_logger;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService, logger, JavaUtilLoggingLogger *)

__attribute__((unused)) static ComGoogleCommonUtilConcurrentService_State *ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_state(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService *self);

@interface ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1 : ComGoogleCommonUtilConcurrentAbstractService {
 @public
  ComGoogleCommonUtilConcurrentAbstractExecutionThreadService *this$0_;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService:(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService *)outer$;

- (void)doStart;

- (void)doStop;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1 *self, ComGoogleCommonUtilConcurrentAbstractExecutionThreadService *outer$);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1 *new_ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1 *create_ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService *outer$);

@interface ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_1 : NSObject < ComGoogleCommonBaseSupplier > {
 @public
  ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1 *this$0_;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1:(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1 *)outer$;

- (NSString *)get;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_1)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_1_initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_1 *self, ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1 *outer$);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_1 *new_ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_1_initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_1 *create_ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_1_initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1 *outer$);

@interface ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_2 : NSObject < JavaLangRunnable > {
 @public
  ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1 *this$0_;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1:(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1 *)outer$;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_2)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_2_initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_2 *self, ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1 *outer$);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_2 *new_ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_2_initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_2 *create_ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_2_initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1 *outer$);

@interface ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_2 : NSObject < JavaUtilConcurrentExecutor > {
 @public
  ComGoogleCommonUtilConcurrentAbstractExecutionThreadService *this$0_;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService:(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService *)outer$;

- (void)executeWithJavaLangRunnable:(id<JavaLangRunnable>)command;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_2)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_2_initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_2 *self, ComGoogleCommonUtilConcurrentAbstractExecutionThreadService *outer$);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_2 *new_ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_2_initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_2 *create_ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_2_initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService *outer$);

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService)

@implementation ComGoogleCommonUtilConcurrentAbstractExecutionThreadService

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)startUp {
}

- (void)run {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)shutDown {
}

- (void)triggerShutdown {
}

- (id<JavaUtilConcurrentExecutor>)executor {
  return new_ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_2_initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_(self);
}

- (NSString *)description {
  return JreStrcat("$$@C", [self serviceName], @" [", ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_state(self), ']');
}

- (jboolean)isRunning {
  return [((id<ComGoogleCommonUtilConcurrentService>) nil_chk(delegate_)) isRunning];
}

- (ComGoogleCommonUtilConcurrentService_State *)state {
  return ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_state(self);
}

- (void)addListenerWithComGoogleCommonUtilConcurrentService_Listener:(ComGoogleCommonUtilConcurrentService_Listener *)listener
                                      withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor {
  [((id<ComGoogleCommonUtilConcurrentService>) nil_chk(delegate_)) addListenerWithComGoogleCommonUtilConcurrentService_Listener:listener withJavaUtilConcurrentExecutor:executor];
}

- (NSException *)failureCause {
  return [((id<ComGoogleCommonUtilConcurrentService>) nil_chk(delegate_)) failureCause];
}

- (id<ComGoogleCommonUtilConcurrentService>)startAsync {
  (void) [((id<ComGoogleCommonUtilConcurrentService>) nil_chk(delegate_)) startAsync];
  return self;
}

- (id<ComGoogleCommonUtilConcurrentService>)stopAsync {
  (void) [((id<ComGoogleCommonUtilConcurrentService>) nil_chk(delegate_)) stopAsync];
  return self;
}

- (void)awaitRunning {
  [((id<ComGoogleCommonUtilConcurrentService>) nil_chk(delegate_)) awaitRunning];
}

- (void)awaitRunningWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  [((id<ComGoogleCommonUtilConcurrentService>) nil_chk(delegate_)) awaitRunningWithLong:timeout withJavaUtilConcurrentTimeUnit:unit];
}

- (void)awaitTerminated {
  [((id<ComGoogleCommonUtilConcurrentService>) nil_chk(delegate_)) awaitTerminated];
}

- (void)awaitTerminatedWithLong:(jlong)timeout
 withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  [((id<ComGoogleCommonUtilConcurrentService>) nil_chk(delegate_)) awaitTerminatedWithLong:timeout withJavaUtilConcurrentTimeUnit:unit];
}

- (NSString *)serviceName {
  return [[self java_getClass] getSimpleName];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x404, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentExecutor;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentService_State;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSException;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentService;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentService;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 4, 5, 6, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 7, 5, 6, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(startUp);
  methods[2].selector = @selector(run);
  methods[3].selector = @selector(shutDown);
  methods[4].selector = @selector(triggerShutdown);
  methods[5].selector = @selector(executor);
  methods[6].selector = @selector(description);
  methods[7].selector = @selector(isRunning);
  methods[8].selector = @selector(state);
  methods[9].selector = @selector(addListenerWithComGoogleCommonUtilConcurrentService_Listener:withJavaUtilConcurrentExecutor:);
  methods[10].selector = @selector(failureCause);
  methods[11].selector = @selector(startAsync);
  methods[12].selector = @selector(stopAsync);
  methods[13].selector = @selector(awaitRunning);
  methods[14].selector = @selector(awaitRunningWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[15].selector = @selector(awaitTerminated);
  methods[16].selector = @selector(awaitTerminatedWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[17].selector = @selector(serviceName);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
    { "delegate_", "LComGoogleCommonUtilConcurrentService;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", "toString", "addListener", "LComGoogleCommonUtilConcurrentService_Listener;LJavaUtilConcurrentExecutor;", "awaitRunning", "JLJavaUtilConcurrentTimeUnit;", "LJavaUtilConcurrentTimeoutException;", "awaitTerminated", &ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_logger };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractExecutionThreadService = { "AbstractExecutionThreadService", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x401, 18, 2, -1, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractExecutionThreadService;
}

+ (void)initialize {
  if (self == [ComGoogleCommonUtilConcurrentAbstractExecutionThreadService class]) {
    ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_class_() getName]);
    J2OBJC_SET_INITIALIZED(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService)
  }
}

@end

void ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_init(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService *self) {
  NSObject_init(self);
  self->delegate_ = new_ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_(self);
}

ComGoogleCommonUtilConcurrentService_State *ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_state(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService *self) {
  return [((id<ComGoogleCommonUtilConcurrentService>) nil_chk(self->delegate_)) state];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService)

@implementation ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1

- (instancetype)initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService:(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService *)outer$ {
  ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_(self, outer$);
  return self;
}

- (void)doStart {
  id<JavaUtilConcurrentExecutor> executor = ComGoogleCommonUtilConcurrentMoreExecutors_renamingDecoratorWithJavaUtilConcurrentExecutor_withComGoogleCommonBaseSupplier_([this$0_ executor], new_ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_1_initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_(self));
  [((id<JavaUtilConcurrentExecutor>) nil_chk(executor)) executeWithJavaLangRunnable:new_ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_2_initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_(self)];
}

- (void)doStop {
  [this$0_ triggerShutdown];
}

- (NSString *)description {
  return [this$0_ description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x14, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService:);
  methods[1].selector = @selector(doStart);
  methods[2].selector = @selector(doStop);
  methods[3].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonUtilConcurrentAbstractExecutionThreadService;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "toString", "LComGoogleCommonUtilConcurrentAbstractExecutionThreadService;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1 = { "", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x8018, 4, 1, 1, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1;
}

@end

void ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1 *self, ComGoogleCommonUtilConcurrentAbstractExecutionThreadService *outer$) {
  self->this$0_ = outer$;
  ComGoogleCommonUtilConcurrentAbstractService_init(self);
}

ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1 *new_ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService *outer$) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1, initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_, outer$)
}

ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1 *create_ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService *outer$) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1, initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_, outer$)
}

@implementation ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_1

- (instancetype)initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1:(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1 *)outer$ {
  ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_1_initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_(self, outer$);
  return self;
}

- (NSString *)get {
  return [this$0_->this$0_ serviceName];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1:);
  methods[1].selector = @selector(get);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1;", "doStart", "Ljava/lang/Object;Lcom/google/common/base/Supplier<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_1 = { "", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x8018, 2, 1, 0, -1, 1, 2, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_1;
}

@end

void ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_1_initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_1 *self, ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1 *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_1 *new_ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_1_initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1 *outer$) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_1, initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_, outer$)
}

ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_1 *create_ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_1_initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1 *outer$) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_1, initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_, outer$)
}

@implementation ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_2

- (instancetype)initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1:(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1 *)outer$ {
  ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_2_initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_(self, outer$);
  return self;
}

- (void)run {
  @try {
    [this$0_->this$0_ startUp];
    [this$0_ notifyStarted];
    if ([this$0_ isRunning]) {
      @try {
        [this$0_->this$0_ run];
      }
      @catch (NSException *t) {
        @try {
          [this$0_->this$0_ shutDown];
        }
        @catch (JavaLangException *ignored) {
          [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService, logger))) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:@"Error while attempting to shut down the service after failure." withNSException:ignored];
        }
        [this$0_ notifyFailedWithNSException:t];
        return;
      }
    }
    [this$0_->this$0_ shutDown];
    [this$0_ notifyStopped];
  }
  @catch (NSException *t) {
    [this$0_ notifyFailedWithNSException:t];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1;", "doStart" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_2 = { "", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x8018, 2, 1, 0, -1, 1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_2;
}

@end

void ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_2_initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_2 *self, ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1 *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_2 *new_ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_2_initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1 *outer$) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_2, initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_, outer$)
}

ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_2 *create_ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_2_initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1 *outer$) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_2, initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_1_, outer$)
}

@implementation ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_2

- (instancetype)initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService:(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService *)outer$ {
  ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_2_initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_(self, outer$);
  return self;
}

- (void)executeWithJavaLangRunnable:(id<JavaLangRunnable>)command {
  [((JavaLangThread *) nil_chk(ComGoogleCommonUtilConcurrentMoreExecutors_newThreadWithNSString_withJavaLangRunnable_([this$0_ serviceName], command))) start];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService:);
  methods[1].selector = @selector(executeWithJavaLangRunnable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonUtilConcurrentAbstractExecutionThreadService;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "execute", "LJavaLangRunnable;", "LComGoogleCommonUtilConcurrentAbstractExecutionThreadService;", "executor" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_2 = { "", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, 3, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_2;
}

@end

void ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_2_initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_2 *self, ComGoogleCommonUtilConcurrentAbstractExecutionThreadService *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_2 *new_ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_2_initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService *outer$) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_2, initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_, outer$)
}

ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_2 *create_ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_2_initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService *outer$) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractExecutionThreadService_2, initWithComGoogleCommonUtilConcurrentAbstractExecutionThreadService_, outer$)
}
