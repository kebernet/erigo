//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/util/concurrent/AbstractFuture.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComGoogleCommonUtilConcurrentAbstractFuture")
#ifdef RESTRICT_ComGoogleCommonUtilConcurrentAbstractFuture
#define INCLUDE_ALL_ComGoogleCommonUtilConcurrentAbstractFuture 0
#else
#define INCLUDE_ALL_ComGoogleCommonUtilConcurrentAbstractFuture 1
#endif
#undef RESTRICT_ComGoogleCommonUtilConcurrentAbstractFuture
#ifdef INCLUDE_ComGoogleCommonUtilConcurrentAbstractFuture_TrustedFuture
#define INCLUDE_ComGoogleCommonUtilConcurrentAbstractFuture 1
#endif

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ComGoogleCommonUtilConcurrentAbstractFuture_) && (INCLUDE_ALL_ComGoogleCommonUtilConcurrentAbstractFuture || defined(INCLUDE_ComGoogleCommonUtilConcurrentAbstractFuture))
#define ComGoogleCommonUtilConcurrentAbstractFuture_

#define RESTRICT_ComGoogleCommonUtilConcurrentListenableFuture 1
#define INCLUDE_ComGoogleCommonUtilConcurrentListenableFuture 1
#include "com/google/common/util/concurrent/ListenableFuture.h"

@class JavaUtilConcurrentTimeUnit;
@protocol JavaLangRunnable;
@protocol JavaUtilConcurrentExecutor;
@protocol JavaUtilConcurrentFuture;

@interface ComGoogleCommonUtilConcurrentAbstractFuture : NSObject < ComGoogleCommonUtilConcurrentListenableFuture >

#pragma mark Public

- (void)addListenerWithJavaLangRunnable:(id<JavaLangRunnable>)listener
         withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor;

- (jboolean)cancelWithBoolean:(jboolean)mayInterruptIfRunning;

- (id)get;

- (id)getWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (jboolean)isCancelled;

- (jboolean)isDone;

#pragma mark Protected

- (instancetype)init;

- (void)afterDone;

- (void)interruptTask;

- (jboolean)setWithId:(id)value;

- (jboolean)setExceptionWithNSException:(NSException *)throwable;
#define setExceptionWithJavaLangThrowable setExceptionWithNSException

- (jboolean)setFutureWithComGoogleCommonUtilConcurrentListenableFuture:(id<ComGoogleCommonUtilConcurrentListenableFuture>)future;

- (jboolean)wasInterrupted;

#pragma mark Package-Private

- (void)maybePropagateCancellationWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)related;

- (NSException *)trustedGetException;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractFuture)

FOUNDATION_EXPORT void ComGoogleCommonUtilConcurrentAbstractFuture_init(ComGoogleCommonUtilConcurrentAbstractFuture *self);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentAbstractFuture)

#endif

#if !defined (ComGoogleCommonUtilConcurrentAbstractFuture_TrustedFuture_) && (INCLUDE_ALL_ComGoogleCommonUtilConcurrentAbstractFuture || defined(INCLUDE_ComGoogleCommonUtilConcurrentAbstractFuture_TrustedFuture))
#define ComGoogleCommonUtilConcurrentAbstractFuture_TrustedFuture_

@class JavaUtilConcurrentTimeUnit;
@protocol JavaLangRunnable;
@protocol JavaUtilConcurrentExecutor;

@interface ComGoogleCommonUtilConcurrentAbstractFuture_TrustedFuture : ComGoogleCommonUtilConcurrentAbstractFuture

#pragma mark Public

- (void)addListenerWithJavaLangRunnable:(id<JavaLangRunnable>)listener
         withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor;

- (jboolean)cancelWithBoolean:(jboolean)mayInterruptIfRunning;

- (id)get;

- (id)getWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (jboolean)isCancelled;

- (jboolean)isDone;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractFuture_TrustedFuture)

FOUNDATION_EXPORT void ComGoogleCommonUtilConcurrentAbstractFuture_TrustedFuture_init(ComGoogleCommonUtilConcurrentAbstractFuture_TrustedFuture *self);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentAbstractFuture_TrustedFuture)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ComGoogleCommonUtilConcurrentAbstractFuture")
