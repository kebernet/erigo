//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/util/concurrent/AbstractFuture.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/base/Throwables.h"
#include "com/google/common/util/concurrent/AbstractFuture.h"
#include "com/google/common/util/concurrent/Futures.h"
#include "com/google/common/util/concurrent/ListenableFuture.h"
#include "com/google/common/util/concurrent/MoreExecutors.h"
#include "com/google/errorprone/annotations/DoNotMock.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/NoSuchFieldError.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/SecurityException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/Field.h"
#include "java/security/AccessController.h"
#include "java/security/PrivilegedActionException.h"
#include "java/security/PrivilegedExceptionAction.h"
#include "java/util/concurrent/CancellationException.h"
#include "java/util/concurrent/ExecutionException.h"
#include "java/util/concurrent/Executor.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/TimeoutException.h"
#include "java/util/concurrent/atomic/AtomicReferenceFieldUpdater.h"
#include "java/util/concurrent/locks/LockSupport.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "javax/annotation/Nullable.h"
#include "sun/misc/Unsafe.h"

@class ComGoogleCommonUtilConcurrentAbstractFuture_AtomicHelper;
@class ComGoogleCommonUtilConcurrentAbstractFuture_Listener;
@class ComGoogleCommonUtilConcurrentAbstractFuture_Waiter;

@interface ComGoogleCommonUtilConcurrentAbstractFuture () {
 @public
  volatile_id value_;
  volatile_id listeners_;
  volatile_id waiters_;
}

- (void)removeWaiterWithComGoogleCommonUtilConcurrentAbstractFuture_Waiter:(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)node;

- (id)getDoneValueWithId:(id)obj;

+ (id)getFutureValueWithComGoogleCommonUtilConcurrentListenableFuture:(id<ComGoogleCommonUtilConcurrentListenableFuture>)future;

+ (void)completeWithComGoogleCommonUtilConcurrentAbstractFuture:(ComGoogleCommonUtilConcurrentAbstractFuture *)future;

- (void)releaseWaiters;

- (ComGoogleCommonUtilConcurrentAbstractFuture_Listener *)clearListenersWithComGoogleCommonUtilConcurrentAbstractFuture_Listener:(ComGoogleCommonUtilConcurrentAbstractFuture_Listener *)onto;

+ (void)executeListenerWithJavaLangRunnable:(id<JavaLangRunnable>)runnable
             withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor;

+ (JavaUtilConcurrentCancellationException *)cancellationExceptionWithCauseWithNSString:(NSString *)message
                                                                        withNSException:(NSException *)cause;
#define withJavaLangThrowable withNSException

@end

J2OBJC_VOLATILE_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractFuture, value_, id)
J2OBJC_VOLATILE_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractFuture, listeners_, ComGoogleCommonUtilConcurrentAbstractFuture_Listener *)
J2OBJC_VOLATILE_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractFuture, waiters_, ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)

inline jboolean ComGoogleCommonUtilConcurrentAbstractFuture_get_GENERATE_CANCELLATION_CAUSES();
static jboolean ComGoogleCommonUtilConcurrentAbstractFuture_GENERATE_CANCELLATION_CAUSES;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(ComGoogleCommonUtilConcurrentAbstractFuture, GENERATE_CANCELLATION_CAUSES, jboolean)

inline JavaUtilLoggingLogger *ComGoogleCommonUtilConcurrentAbstractFuture_get_log();
static JavaUtilLoggingLogger *ComGoogleCommonUtilConcurrentAbstractFuture_log;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonUtilConcurrentAbstractFuture, log, JavaUtilLoggingLogger *)

inline jlong ComGoogleCommonUtilConcurrentAbstractFuture_get_SPIN_THRESHOLD_NANOS();
#define ComGoogleCommonUtilConcurrentAbstractFuture_SPIN_THRESHOLD_NANOS 1000LL
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonUtilConcurrentAbstractFuture, SPIN_THRESHOLD_NANOS, jlong)

inline ComGoogleCommonUtilConcurrentAbstractFuture_AtomicHelper *ComGoogleCommonUtilConcurrentAbstractFuture_get_ATOMIC_HELPER();
static ComGoogleCommonUtilConcurrentAbstractFuture_AtomicHelper *ComGoogleCommonUtilConcurrentAbstractFuture_ATOMIC_HELPER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonUtilConcurrentAbstractFuture, ATOMIC_HELPER, ComGoogleCommonUtilConcurrentAbstractFuture_AtomicHelper *)

inline id ComGoogleCommonUtilConcurrentAbstractFuture_get_NULL();
static id ComGoogleCommonUtilConcurrentAbstractFuture_NULL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonUtilConcurrentAbstractFuture, NULL, id)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractFuture_removeWaiterWithComGoogleCommonUtilConcurrentAbstractFuture_Waiter_(ComGoogleCommonUtilConcurrentAbstractFuture *self, ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *node);

__attribute__((unused)) static id ComGoogleCommonUtilConcurrentAbstractFuture_getDoneValueWithId_(ComGoogleCommonUtilConcurrentAbstractFuture *self, id obj);

__attribute__((unused)) static jboolean ComGoogleCommonUtilConcurrentAbstractFuture_wasInterrupted(ComGoogleCommonUtilConcurrentAbstractFuture *self);

__attribute__((unused)) static id ComGoogleCommonUtilConcurrentAbstractFuture_getFutureValueWithComGoogleCommonUtilConcurrentListenableFuture_(id<ComGoogleCommonUtilConcurrentListenableFuture> future);

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractFuture_completeWithComGoogleCommonUtilConcurrentAbstractFuture_(ComGoogleCommonUtilConcurrentAbstractFuture *future);

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractFuture_releaseWaiters(ComGoogleCommonUtilConcurrentAbstractFuture *self);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractFuture_Listener *ComGoogleCommonUtilConcurrentAbstractFuture_clearListenersWithComGoogleCommonUtilConcurrentAbstractFuture_Listener_(ComGoogleCommonUtilConcurrentAbstractFuture *self, ComGoogleCommonUtilConcurrentAbstractFuture_Listener *onto);

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractFuture_executeListenerWithJavaLangRunnable_withJavaUtilConcurrentExecutor_(id<JavaLangRunnable> runnable, id<JavaUtilConcurrentExecutor> executor);

__attribute__((unused)) static JavaUtilConcurrentCancellationException *ComGoogleCommonUtilConcurrentAbstractFuture_cancellationExceptionWithCauseWithNSString_withNSException_(NSString *message, NSException *cause);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonUtilConcurrentAbstractFuture__Annotations$0();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonUtilConcurrentAbstractFuture__Annotations$1();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonUtilConcurrentAbstractFuture__Annotations$2();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonUtilConcurrentAbstractFuture__Annotations$3();

@interface ComGoogleCommonUtilConcurrentAbstractFuture_Waiter : NSObject {
 @public
  volatile_id thread_;
  volatile_id next_;
}

- (instancetype)initWithBoolean:(jboolean)unused;

- (instancetype)init;

- (void)setNextWithComGoogleCommonUtilConcurrentAbstractFuture_Waiter:(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)next;

- (void)unpark;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter)

J2OBJC_VOLATILE_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter, thread_, JavaLangThread *)
J2OBJC_VOLATILE_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter, next_, ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)

inline ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *ComGoogleCommonUtilConcurrentAbstractFuture_Waiter_get_TOMBSTONE();
static ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *ComGoogleCommonUtilConcurrentAbstractFuture_Waiter_TOMBSTONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter, TOMBSTONE, ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractFuture_Waiter_initWithBoolean_(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *self, jboolean unused);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *new_ComGoogleCommonUtilConcurrentAbstractFuture_Waiter_initWithBoolean_(jboolean unused) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *create_ComGoogleCommonUtilConcurrentAbstractFuture_Waiter_initWithBoolean_(jboolean unused);

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractFuture_Waiter_init(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *self);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *new_ComGoogleCommonUtilConcurrentAbstractFuture_Waiter_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *create_ComGoogleCommonUtilConcurrentAbstractFuture_Waiter_init();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonUtilConcurrentAbstractFuture_Waiter__Annotations$0();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonUtilConcurrentAbstractFuture_Waiter__Annotations$1();

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter)

@interface ComGoogleCommonUtilConcurrentAbstractFuture_Listener : NSObject {
 @public
  id<JavaLangRunnable> task_;
  id<JavaUtilConcurrentExecutor> executor_;
  ComGoogleCommonUtilConcurrentAbstractFuture_Listener *next_;
}

- (instancetype)initWithJavaLangRunnable:(id<JavaLangRunnable>)task
          withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractFuture_Listener)

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractFuture_Listener, task_, id<JavaLangRunnable>)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractFuture_Listener, executor_, id<JavaUtilConcurrentExecutor>)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractFuture_Listener, next_, ComGoogleCommonUtilConcurrentAbstractFuture_Listener *)

inline ComGoogleCommonUtilConcurrentAbstractFuture_Listener *ComGoogleCommonUtilConcurrentAbstractFuture_Listener_get_TOMBSTONE();
static ComGoogleCommonUtilConcurrentAbstractFuture_Listener *ComGoogleCommonUtilConcurrentAbstractFuture_Listener_TOMBSTONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonUtilConcurrentAbstractFuture_Listener, TOMBSTONE, ComGoogleCommonUtilConcurrentAbstractFuture_Listener *)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractFuture_Listener_initWithJavaLangRunnable_withJavaUtilConcurrentExecutor_(ComGoogleCommonUtilConcurrentAbstractFuture_Listener *self, id<JavaLangRunnable> task, id<JavaUtilConcurrentExecutor> executor);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractFuture_Listener *new_ComGoogleCommonUtilConcurrentAbstractFuture_Listener_initWithJavaLangRunnable_withJavaUtilConcurrentExecutor_(id<JavaLangRunnable> task, id<JavaUtilConcurrentExecutor> executor) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractFuture_Listener *create_ComGoogleCommonUtilConcurrentAbstractFuture_Listener_initWithJavaLangRunnable_withJavaUtilConcurrentExecutor_(id<JavaLangRunnable> task, id<JavaUtilConcurrentExecutor> executor);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonUtilConcurrentAbstractFuture_Listener__Annotations$0();

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentAbstractFuture_Listener)

@interface ComGoogleCommonUtilConcurrentAbstractFuture_Failure : NSObject {
 @public
  NSException *exception_;
}

- (instancetype)initWithNSException:(NSException *)exception;
#define initWithJavaLangThrowable initWithNSException

@end

J2OBJC_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractFuture_Failure)

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractFuture_Failure, exception_, NSException *)

inline ComGoogleCommonUtilConcurrentAbstractFuture_Failure *ComGoogleCommonUtilConcurrentAbstractFuture_Failure_get_FALLBACK_INSTANCE();
static ComGoogleCommonUtilConcurrentAbstractFuture_Failure *ComGoogleCommonUtilConcurrentAbstractFuture_Failure_FALLBACK_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonUtilConcurrentAbstractFuture_Failure, FALLBACK_INSTANCE, ComGoogleCommonUtilConcurrentAbstractFuture_Failure *)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractFuture_Failure_initWithNSException_(ComGoogleCommonUtilConcurrentAbstractFuture_Failure *self, NSException *exception);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractFuture_Failure *new_ComGoogleCommonUtilConcurrentAbstractFuture_Failure_initWithNSException_(NSException *exception) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractFuture_Failure *create_ComGoogleCommonUtilConcurrentAbstractFuture_Failure_initWithNSException_(NSException *exception);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentAbstractFuture_Failure)

@interface ComGoogleCommonUtilConcurrentAbstractFuture_Failure_1 : NSException

- (instancetype)initWithNSString:(NSString *)x0;

- (NSException *)fillInStackTrace;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractFuture_Failure_1)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractFuture_Failure_1_initWithNSString_(ComGoogleCommonUtilConcurrentAbstractFuture_Failure_1 *self, NSString *x0);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractFuture_Failure_1 *new_ComGoogleCommonUtilConcurrentAbstractFuture_Failure_1_initWithNSString_(NSString *x0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractFuture_Failure_1 *create_ComGoogleCommonUtilConcurrentAbstractFuture_Failure_1_initWithNSString_(NSString *x0);

@interface ComGoogleCommonUtilConcurrentAbstractFuture_Cancellation : NSObject {
 @public
  jboolean wasInterrupted_;
  NSException *cause_;
}

- (instancetype)initWithBoolean:(jboolean)wasInterrupted
                withNSException:(NSException *)cause;
#define withJavaLangThrowable withNSException

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractFuture_Cancellation)

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractFuture_Cancellation, cause_, NSException *)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractFuture_Cancellation_initWithBoolean_withNSException_(ComGoogleCommonUtilConcurrentAbstractFuture_Cancellation *self, jboolean wasInterrupted, NSException *cause);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractFuture_Cancellation *new_ComGoogleCommonUtilConcurrentAbstractFuture_Cancellation_initWithBoolean_withNSException_(jboolean wasInterrupted, NSException *cause) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractFuture_Cancellation *create_ComGoogleCommonUtilConcurrentAbstractFuture_Cancellation_initWithBoolean_withNSException_(jboolean wasInterrupted, NSException *cause);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonUtilConcurrentAbstractFuture_Cancellation__Annotations$0();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonUtilConcurrentAbstractFuture_Cancellation__Annotations$1();

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentAbstractFuture_Cancellation)

@interface ComGoogleCommonUtilConcurrentAbstractFuture_SetFuture : NSObject < JavaLangRunnable > {
 @public
  ComGoogleCommonUtilConcurrentAbstractFuture *owner_;
  id<ComGoogleCommonUtilConcurrentListenableFuture> future_;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentAbstractFuture:(ComGoogleCommonUtilConcurrentAbstractFuture *)owner
                  withComGoogleCommonUtilConcurrentListenableFuture:(id<ComGoogleCommonUtilConcurrentListenableFuture>)future;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractFuture_SetFuture)

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractFuture_SetFuture, owner_, ComGoogleCommonUtilConcurrentAbstractFuture *)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractFuture_SetFuture, future_, id<ComGoogleCommonUtilConcurrentListenableFuture>)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractFuture_SetFuture_initWithComGoogleCommonUtilConcurrentAbstractFuture_withComGoogleCommonUtilConcurrentListenableFuture_(ComGoogleCommonUtilConcurrentAbstractFuture_SetFuture *self, ComGoogleCommonUtilConcurrentAbstractFuture *owner, id<ComGoogleCommonUtilConcurrentListenableFuture> future);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractFuture_SetFuture *new_ComGoogleCommonUtilConcurrentAbstractFuture_SetFuture_initWithComGoogleCommonUtilConcurrentAbstractFuture_withComGoogleCommonUtilConcurrentListenableFuture_(ComGoogleCommonUtilConcurrentAbstractFuture *owner, id<ComGoogleCommonUtilConcurrentListenableFuture> future) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractFuture_SetFuture *create_ComGoogleCommonUtilConcurrentAbstractFuture_SetFuture_initWithComGoogleCommonUtilConcurrentAbstractFuture_withComGoogleCommonUtilConcurrentListenableFuture_(ComGoogleCommonUtilConcurrentAbstractFuture *owner, id<ComGoogleCommonUtilConcurrentListenableFuture> future);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentAbstractFuture_SetFuture)

@interface ComGoogleCommonUtilConcurrentAbstractFuture_AtomicHelper : NSObject

- (instancetype)init;

- (void)putThreadWithComGoogleCommonUtilConcurrentAbstractFuture_Waiter:(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)waiter
                                                     withJavaLangThread:(JavaLangThread *)newValue;

- (void)putNextWithComGoogleCommonUtilConcurrentAbstractFuture_Waiter:(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)waiter
               withComGoogleCommonUtilConcurrentAbstractFuture_Waiter:(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)newValue;

- (jboolean)casWaitersWithComGoogleCommonUtilConcurrentAbstractFuture:(ComGoogleCommonUtilConcurrentAbstractFuture *)future
               withComGoogleCommonUtilConcurrentAbstractFuture_Waiter:(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)expect
               withComGoogleCommonUtilConcurrentAbstractFuture_Waiter:(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)update;

- (jboolean)casListenersWithComGoogleCommonUtilConcurrentAbstractFuture:(ComGoogleCommonUtilConcurrentAbstractFuture *)future
               withComGoogleCommonUtilConcurrentAbstractFuture_Listener:(ComGoogleCommonUtilConcurrentAbstractFuture_Listener *)expect
               withComGoogleCommonUtilConcurrentAbstractFuture_Listener:(ComGoogleCommonUtilConcurrentAbstractFuture_Listener *)update;

- (jboolean)casValueWithComGoogleCommonUtilConcurrentAbstractFuture:(ComGoogleCommonUtilConcurrentAbstractFuture *)future
                                                             withId:(id)expect
                                                             withId:(id)update;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractFuture_AtomicHelper)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractFuture_AtomicHelper_init(ComGoogleCommonUtilConcurrentAbstractFuture_AtomicHelper *self);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentAbstractFuture_AtomicHelper)

@interface ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper : ComGoogleCommonUtilConcurrentAbstractFuture_AtomicHelper

- (instancetype)init;

- (void)putThreadWithComGoogleCommonUtilConcurrentAbstractFuture_Waiter:(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)waiter
                                                     withJavaLangThread:(JavaLangThread *)newValue;

- (void)putNextWithComGoogleCommonUtilConcurrentAbstractFuture_Waiter:(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)waiter
               withComGoogleCommonUtilConcurrentAbstractFuture_Waiter:(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)newValue;

- (jboolean)casWaitersWithComGoogleCommonUtilConcurrentAbstractFuture:(ComGoogleCommonUtilConcurrentAbstractFuture *)future
               withComGoogleCommonUtilConcurrentAbstractFuture_Waiter:(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)expect
               withComGoogleCommonUtilConcurrentAbstractFuture_Waiter:(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)update;

- (jboolean)casListenersWithComGoogleCommonUtilConcurrentAbstractFuture:(ComGoogleCommonUtilConcurrentAbstractFuture *)future
               withComGoogleCommonUtilConcurrentAbstractFuture_Listener:(ComGoogleCommonUtilConcurrentAbstractFuture_Listener *)expect
               withComGoogleCommonUtilConcurrentAbstractFuture_Listener:(ComGoogleCommonUtilConcurrentAbstractFuture_Listener *)update;

- (jboolean)casValueWithComGoogleCommonUtilConcurrentAbstractFuture:(ComGoogleCommonUtilConcurrentAbstractFuture *)future
                                                             withId:(id)expect
                                                             withId:(id)update;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper)

inline SunMiscUnsafe *ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_get_UNSAFE();
static SunMiscUnsafe *ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_UNSAFE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper, UNSAFE, SunMiscUnsafe *)

inline jlong ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_get_LISTENERS_OFFSET();
static jlong ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_LISTENERS_OFFSET;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper, LISTENERS_OFFSET, jlong)

inline jlong ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_get_WAITERS_OFFSET();
static jlong ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_WAITERS_OFFSET;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper, WAITERS_OFFSET, jlong)

inline jlong ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_get_VALUE_OFFSET();
static jlong ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_VALUE_OFFSET;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper, VALUE_OFFSET, jlong)

inline jlong ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_get_WAITER_THREAD_OFFSET();
static jlong ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_WAITER_THREAD_OFFSET;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper, WAITER_THREAD_OFFSET, jlong)

inline jlong ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_get_WAITER_NEXT_OFFSET();
static jlong ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_WAITER_NEXT_OFFSET;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper, WAITER_NEXT_OFFSET, jlong)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_init(ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper *self);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper *new_ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper *create_ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_init();

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper)

@interface ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_1 : NSObject < JavaSecurityPrivilegedExceptionAction >

- (instancetype)init;

- (SunMiscUnsafe *)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_1)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_1_init(ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_1 *self);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_1 *new_ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_1 *create_ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_1_init();

@interface ComGoogleCommonUtilConcurrentAbstractFuture_SafeAtomicHelper : ComGoogleCommonUtilConcurrentAbstractFuture_AtomicHelper {
 @public
  JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *waiterThreadUpdater_;
  JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *waiterNextUpdater_;
  JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *waitersUpdater_;
  JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *listenersUpdater_;
  JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *valueUpdater_;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater:(JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *)waiterThreadUpdater
                    withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater:(JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *)waiterNextUpdater
                    withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater:(JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *)waitersUpdater
                    withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater:(JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *)listenersUpdater
                    withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater:(JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *)valueUpdater;

- (void)putThreadWithComGoogleCommonUtilConcurrentAbstractFuture_Waiter:(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)waiter
                                                     withJavaLangThread:(JavaLangThread *)newValue;

- (void)putNextWithComGoogleCommonUtilConcurrentAbstractFuture_Waiter:(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)waiter
               withComGoogleCommonUtilConcurrentAbstractFuture_Waiter:(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)newValue;

- (jboolean)casWaitersWithComGoogleCommonUtilConcurrentAbstractFuture:(ComGoogleCommonUtilConcurrentAbstractFuture *)future
               withComGoogleCommonUtilConcurrentAbstractFuture_Waiter:(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)expect
               withComGoogleCommonUtilConcurrentAbstractFuture_Waiter:(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)update;

- (jboolean)casListenersWithComGoogleCommonUtilConcurrentAbstractFuture:(ComGoogleCommonUtilConcurrentAbstractFuture *)future
               withComGoogleCommonUtilConcurrentAbstractFuture_Listener:(ComGoogleCommonUtilConcurrentAbstractFuture_Listener *)expect
               withComGoogleCommonUtilConcurrentAbstractFuture_Listener:(ComGoogleCommonUtilConcurrentAbstractFuture_Listener *)update;

- (jboolean)casValueWithComGoogleCommonUtilConcurrentAbstractFuture:(ComGoogleCommonUtilConcurrentAbstractFuture *)future
                                                             withId:(id)expect
                                                             withId:(id)update;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractFuture_SafeAtomicHelper)

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractFuture_SafeAtomicHelper, waiterThreadUpdater_, JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractFuture_SafeAtomicHelper, waiterNextUpdater_, JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractFuture_SafeAtomicHelper, waitersUpdater_, JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractFuture_SafeAtomicHelper, listenersUpdater_, JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractFuture_SafeAtomicHelper, valueUpdater_, JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractFuture_SafeAtomicHelper_initWithJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_(ComGoogleCommonUtilConcurrentAbstractFuture_SafeAtomicHelper *self, JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *waiterThreadUpdater, JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *waiterNextUpdater, JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *waitersUpdater, JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *listenersUpdater, JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *valueUpdater);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractFuture_SafeAtomicHelper *new_ComGoogleCommonUtilConcurrentAbstractFuture_SafeAtomicHelper_initWithJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_(JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *waiterThreadUpdater, JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *waiterNextUpdater, JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *waitersUpdater, JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *listenersUpdater, JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *valueUpdater) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractFuture_SafeAtomicHelper *create_ComGoogleCommonUtilConcurrentAbstractFuture_SafeAtomicHelper_initWithJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_(JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *waiterThreadUpdater, JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *waiterNextUpdater, JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *waitersUpdater, JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *listenersUpdater, JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *valueUpdater);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentAbstractFuture_SafeAtomicHelper)

@interface ComGoogleCommonUtilConcurrentAbstractFuture_SynchronizedHelper : ComGoogleCommonUtilConcurrentAbstractFuture_AtomicHelper

- (instancetype)init;

- (void)putThreadWithComGoogleCommonUtilConcurrentAbstractFuture_Waiter:(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)waiter
                                                     withJavaLangThread:(JavaLangThread *)newValue;

- (void)putNextWithComGoogleCommonUtilConcurrentAbstractFuture_Waiter:(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)waiter
               withComGoogleCommonUtilConcurrentAbstractFuture_Waiter:(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)newValue;

- (jboolean)casWaitersWithComGoogleCommonUtilConcurrentAbstractFuture:(ComGoogleCommonUtilConcurrentAbstractFuture *)future
               withComGoogleCommonUtilConcurrentAbstractFuture_Waiter:(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)expect
               withComGoogleCommonUtilConcurrentAbstractFuture_Waiter:(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)update;

- (jboolean)casListenersWithComGoogleCommonUtilConcurrentAbstractFuture:(ComGoogleCommonUtilConcurrentAbstractFuture *)future
               withComGoogleCommonUtilConcurrentAbstractFuture_Listener:(ComGoogleCommonUtilConcurrentAbstractFuture_Listener *)expect
               withComGoogleCommonUtilConcurrentAbstractFuture_Listener:(ComGoogleCommonUtilConcurrentAbstractFuture_Listener *)update;

- (jboolean)casValueWithComGoogleCommonUtilConcurrentAbstractFuture:(ComGoogleCommonUtilConcurrentAbstractFuture *)future
                                                             withId:(id)expect
                                                             withId:(id)update;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractFuture_SynchronizedHelper)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractFuture_SynchronizedHelper_init(ComGoogleCommonUtilConcurrentAbstractFuture_SynchronizedHelper *self);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractFuture_SynchronizedHelper *new_ComGoogleCommonUtilConcurrentAbstractFuture_SynchronizedHelper_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractFuture_SynchronizedHelper *create_ComGoogleCommonUtilConcurrentAbstractFuture_SynchronizedHelper_init();

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentAbstractFuture_SynchronizedHelper)

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonUtilConcurrentAbstractFuture)

@implementation ComGoogleCommonUtilConcurrentAbstractFuture

- (void)removeWaiterWithComGoogleCommonUtilConcurrentAbstractFuture_Waiter:(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)node {
  ComGoogleCommonUtilConcurrentAbstractFuture_removeWaiterWithComGoogleCommonUtilConcurrentAbstractFuture_Waiter_(self, node);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentAbstractFuture_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)getWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  jlong remainingNanos = [((JavaUtilConcurrentTimeUnit *) nil_chk(unit)) toNanosWithLong:timeout];
  if (JavaLangThread_interrupted()) {
    @throw new_JavaLangInterruptedException_init();
  }
  id localValue = JreLoadVolatileId(&value_);
  if ((localValue != nil) & !([localValue isKindOfClass:[ComGoogleCommonUtilConcurrentAbstractFuture_SetFuture class]])) {
    return ComGoogleCommonUtilConcurrentAbstractFuture_getDoneValueWithId_(self, localValue);
  }
  jlong endNanos = remainingNanos > 0 ? JavaLangSystem_nanoTime() + remainingNanos : 0;
  if (remainingNanos >= ComGoogleCommonUtilConcurrentAbstractFuture_SPIN_THRESHOLD_NANOS) {
    ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *oldHead = JreLoadVolatileId(&waiters_);
    if (oldHead != JreLoadStatic(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter, TOMBSTONE)) {
      ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *node = new_ComGoogleCommonUtilConcurrentAbstractFuture_Waiter_init();
      do {
        [node setNextWithComGoogleCommonUtilConcurrentAbstractFuture_Waiter:oldHead];
        if ([((ComGoogleCommonUtilConcurrentAbstractFuture_AtomicHelper *) nil_chk(ComGoogleCommonUtilConcurrentAbstractFuture_ATOMIC_HELPER)) casWaitersWithComGoogleCommonUtilConcurrentAbstractFuture:self withComGoogleCommonUtilConcurrentAbstractFuture_Waiter:oldHead withComGoogleCommonUtilConcurrentAbstractFuture_Waiter:node]) {
          while (true) {
            JavaUtilConcurrentLocksLockSupport_parkNanosWithId_withLong_(self, remainingNanos);
            if (JavaLangThread_interrupted()) {
              ComGoogleCommonUtilConcurrentAbstractFuture_removeWaiterWithComGoogleCommonUtilConcurrentAbstractFuture_Waiter_(self, node);
              @throw new_JavaLangInterruptedException_init();
            }
            localValue = JreLoadVolatileId(&value_);
            if ((localValue != nil) & !([localValue isKindOfClass:[ComGoogleCommonUtilConcurrentAbstractFuture_SetFuture class]])) {
              return ComGoogleCommonUtilConcurrentAbstractFuture_getDoneValueWithId_(self, localValue);
            }
            remainingNanos = endNanos - JavaLangSystem_nanoTime();
            if (remainingNanos < ComGoogleCommonUtilConcurrentAbstractFuture_SPIN_THRESHOLD_NANOS) {
              ComGoogleCommonUtilConcurrentAbstractFuture_removeWaiterWithComGoogleCommonUtilConcurrentAbstractFuture_Waiter_(self, node);
              goto break_long_wait_loop;
            }
          }
        }
        oldHead = JreLoadVolatileId(&waiters_);
      }
      while (oldHead != JreLoadStatic(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter, TOMBSTONE));
    }
    return ComGoogleCommonUtilConcurrentAbstractFuture_getDoneValueWithId_(self, JreLoadVolatileId(&value_));
  }
  break_long_wait_loop: ;
  while (remainingNanos > 0) {
    localValue = JreLoadVolatileId(&value_);
    if ((localValue != nil) & !([localValue isKindOfClass:[ComGoogleCommonUtilConcurrentAbstractFuture_SetFuture class]])) {
      return ComGoogleCommonUtilConcurrentAbstractFuture_getDoneValueWithId_(self, localValue);
    }
    if (JavaLangThread_interrupted()) {
      @throw new_JavaLangInterruptedException_init();
    }
    remainingNanos = endNanos - JavaLangSystem_nanoTime();
  }
  @throw new_JavaUtilConcurrentTimeoutException_init();
}

- (id)get {
  if (JavaLangThread_interrupted()) {
    @throw new_JavaLangInterruptedException_init();
  }
  id localValue = JreLoadVolatileId(&value_);
  if ((localValue != nil) & !([localValue isKindOfClass:[ComGoogleCommonUtilConcurrentAbstractFuture_SetFuture class]])) {
    return ComGoogleCommonUtilConcurrentAbstractFuture_getDoneValueWithId_(self, localValue);
  }
  ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *oldHead = JreLoadVolatileId(&waiters_);
  if (oldHead != JreLoadStatic(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter, TOMBSTONE)) {
    ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *node = new_ComGoogleCommonUtilConcurrentAbstractFuture_Waiter_init();
    do {
      [node setNextWithComGoogleCommonUtilConcurrentAbstractFuture_Waiter:oldHead];
      if ([((ComGoogleCommonUtilConcurrentAbstractFuture_AtomicHelper *) nil_chk(ComGoogleCommonUtilConcurrentAbstractFuture_ATOMIC_HELPER)) casWaitersWithComGoogleCommonUtilConcurrentAbstractFuture:self withComGoogleCommonUtilConcurrentAbstractFuture_Waiter:oldHead withComGoogleCommonUtilConcurrentAbstractFuture_Waiter:node]) {
        while (true) {
          JavaUtilConcurrentLocksLockSupport_parkWithId_(self);
          if (JavaLangThread_interrupted()) {
            ComGoogleCommonUtilConcurrentAbstractFuture_removeWaiterWithComGoogleCommonUtilConcurrentAbstractFuture_Waiter_(self, node);
            @throw new_JavaLangInterruptedException_init();
          }
          localValue = JreLoadVolatileId(&value_);
          if ((localValue != nil) & !([localValue isKindOfClass:[ComGoogleCommonUtilConcurrentAbstractFuture_SetFuture class]])) {
            return ComGoogleCommonUtilConcurrentAbstractFuture_getDoneValueWithId_(self, localValue);
          }
        }
      }
      oldHead = JreLoadVolatileId(&waiters_);
    }
    while (oldHead != JreLoadStatic(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter, TOMBSTONE));
  }
  return ComGoogleCommonUtilConcurrentAbstractFuture_getDoneValueWithId_(self, JreLoadVolatileId(&value_));
}

- (id)getDoneValueWithId:(id)obj {
  return ComGoogleCommonUtilConcurrentAbstractFuture_getDoneValueWithId_(self, obj);
}

- (jboolean)isDone {
  id localValue = JreLoadVolatileId(&value_);
  return (localValue != nil) & !([localValue isKindOfClass:[ComGoogleCommonUtilConcurrentAbstractFuture_SetFuture class]]);
}

- (jboolean)isCancelled {
  id localValue = JreLoadVolatileId(&value_);
  return [localValue isKindOfClass:[ComGoogleCommonUtilConcurrentAbstractFuture_Cancellation class]];
}

- (jboolean)cancelWithBoolean:(jboolean)mayInterruptIfRunning {
  id localValue = JreLoadVolatileId(&value_);
  jboolean rValue = false;
  if ((localValue == nil) | [localValue isKindOfClass:[ComGoogleCommonUtilConcurrentAbstractFuture_SetFuture class]]) {
    NSException *cause = ComGoogleCommonUtilConcurrentAbstractFuture_GENERATE_CANCELLATION_CAUSES ? new_JavaUtilConcurrentCancellationException_initWithNSString_(@"Future.cancel() was called.") : nil;
    id valueToSet = new_ComGoogleCommonUtilConcurrentAbstractFuture_Cancellation_initWithBoolean_withNSException_(mayInterruptIfRunning, cause);
    ComGoogleCommonUtilConcurrentAbstractFuture *abstractFuture = self;
    while (true) {
      if ([((ComGoogleCommonUtilConcurrentAbstractFuture_AtomicHelper *) nil_chk(ComGoogleCommonUtilConcurrentAbstractFuture_ATOMIC_HELPER)) casValueWithComGoogleCommonUtilConcurrentAbstractFuture:abstractFuture withId:localValue withId:valueToSet]) {
        rValue = true;
        if (mayInterruptIfRunning) {
          [abstractFuture interruptTask];
        }
        ComGoogleCommonUtilConcurrentAbstractFuture_completeWithComGoogleCommonUtilConcurrentAbstractFuture_(abstractFuture);
        if ([localValue isKindOfClass:[ComGoogleCommonUtilConcurrentAbstractFuture_SetFuture class]]) {
          id<ComGoogleCommonUtilConcurrentListenableFuture> futureToPropagateTo = ((ComGoogleCommonUtilConcurrentAbstractFuture_SetFuture *) nil_chk(((ComGoogleCommonUtilConcurrentAbstractFuture_SetFuture *) cast_chk(localValue, [ComGoogleCommonUtilConcurrentAbstractFuture_SetFuture class]))))->future_;
          if ([futureToPropagateTo isKindOfClass:[ComGoogleCommonUtilConcurrentAbstractFuture_TrustedFuture class]]) {
            ComGoogleCommonUtilConcurrentAbstractFuture *trusted = (ComGoogleCommonUtilConcurrentAbstractFuture *) cast_chk(futureToPropagateTo, [ComGoogleCommonUtilConcurrentAbstractFuture class]);
            localValue = JreLoadVolatileId(&((ComGoogleCommonUtilConcurrentAbstractFuture *) nil_chk(trusted))->value_);
            if ((localValue == nil) | [localValue isKindOfClass:[ComGoogleCommonUtilConcurrentAbstractFuture_SetFuture class]]) {
              abstractFuture = trusted;
              continue;
            }
          }
          else {
            [((id<ComGoogleCommonUtilConcurrentListenableFuture>) nil_chk(futureToPropagateTo)) cancelWithBoolean:mayInterruptIfRunning];
          }
        }
        break;
      }
      localValue = JreLoadVolatileId(&abstractFuture->value_);
      if (!([localValue isKindOfClass:[ComGoogleCommonUtilConcurrentAbstractFuture_SetFuture class]])) {
        break;
      }
    }
  }
  return rValue;
}

- (void)interruptTask {
}

- (jboolean)wasInterrupted {
  return ComGoogleCommonUtilConcurrentAbstractFuture_wasInterrupted(self);
}

- (void)addListenerWithJavaLangRunnable:(id<JavaLangRunnable>)listener
         withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor {
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_withId_(listener, @"Runnable was null.");
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_withId_(executor, @"Executor was null.");
  ComGoogleCommonUtilConcurrentAbstractFuture_Listener *oldHead = JreLoadVolatileId(&listeners_);
  if (oldHead != JreLoadStatic(ComGoogleCommonUtilConcurrentAbstractFuture_Listener, TOMBSTONE)) {
    ComGoogleCommonUtilConcurrentAbstractFuture_Listener *newNode = new_ComGoogleCommonUtilConcurrentAbstractFuture_Listener_initWithJavaLangRunnable_withJavaUtilConcurrentExecutor_(listener, executor);
    do {
      newNode->next_ = oldHead;
      if ([((ComGoogleCommonUtilConcurrentAbstractFuture_AtomicHelper *) nil_chk(ComGoogleCommonUtilConcurrentAbstractFuture_ATOMIC_HELPER)) casListenersWithComGoogleCommonUtilConcurrentAbstractFuture:self withComGoogleCommonUtilConcurrentAbstractFuture_Listener:oldHead withComGoogleCommonUtilConcurrentAbstractFuture_Listener:newNode]) {
        return;
      }
      oldHead = JreLoadVolatileId(&listeners_);
    }
    while (oldHead != JreLoadStatic(ComGoogleCommonUtilConcurrentAbstractFuture_Listener, TOMBSTONE));
  }
  ComGoogleCommonUtilConcurrentAbstractFuture_executeListenerWithJavaLangRunnable_withJavaUtilConcurrentExecutor_(listener, executor);
}

- (jboolean)setWithId:(id)value {
  id valueToSet = value == nil ? ComGoogleCommonUtilConcurrentAbstractFuture_NULL : value;
  if ([((ComGoogleCommonUtilConcurrentAbstractFuture_AtomicHelper *) nil_chk(ComGoogleCommonUtilConcurrentAbstractFuture_ATOMIC_HELPER)) casValueWithComGoogleCommonUtilConcurrentAbstractFuture:self withId:nil withId:valueToSet]) {
    ComGoogleCommonUtilConcurrentAbstractFuture_completeWithComGoogleCommonUtilConcurrentAbstractFuture_(self);
    return true;
  }
  return false;
}

- (jboolean)setExceptionWithNSException:(NSException *)throwable {
  id valueToSet = new_ComGoogleCommonUtilConcurrentAbstractFuture_Failure_initWithNSException_(ComGoogleCommonBasePreconditions_checkNotNullWithId_(throwable));
  if ([((ComGoogleCommonUtilConcurrentAbstractFuture_AtomicHelper *) nil_chk(ComGoogleCommonUtilConcurrentAbstractFuture_ATOMIC_HELPER)) casValueWithComGoogleCommonUtilConcurrentAbstractFuture:self withId:nil withId:valueToSet]) {
    ComGoogleCommonUtilConcurrentAbstractFuture_completeWithComGoogleCommonUtilConcurrentAbstractFuture_(self);
    return true;
  }
  return false;
}

- (jboolean)setFutureWithComGoogleCommonUtilConcurrentListenableFuture:(id<ComGoogleCommonUtilConcurrentListenableFuture>)future {
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(future);
  id localValue = JreLoadVolatileId(&value_);
  if (localValue == nil) {
    if ([((id<ComGoogleCommonUtilConcurrentListenableFuture>) nil_chk(future)) isDone]) {
      id value = ComGoogleCommonUtilConcurrentAbstractFuture_getFutureValueWithComGoogleCommonUtilConcurrentListenableFuture_(future);
      if ([((ComGoogleCommonUtilConcurrentAbstractFuture_AtomicHelper *) nil_chk(ComGoogleCommonUtilConcurrentAbstractFuture_ATOMIC_HELPER)) casValueWithComGoogleCommonUtilConcurrentAbstractFuture:self withId:nil withId:value]) {
        ComGoogleCommonUtilConcurrentAbstractFuture_completeWithComGoogleCommonUtilConcurrentAbstractFuture_(self);
        return true;
      }
      return false;
    }
    ComGoogleCommonUtilConcurrentAbstractFuture_SetFuture *valueToSet = new_ComGoogleCommonUtilConcurrentAbstractFuture_SetFuture_initWithComGoogleCommonUtilConcurrentAbstractFuture_withComGoogleCommonUtilConcurrentListenableFuture_(self, future);
    if ([((ComGoogleCommonUtilConcurrentAbstractFuture_AtomicHelper *) nil_chk(ComGoogleCommonUtilConcurrentAbstractFuture_ATOMIC_HELPER)) casValueWithComGoogleCommonUtilConcurrentAbstractFuture:self withId:nil withId:valueToSet]) {
      @try {
        [future addListenerWithJavaLangRunnable:valueToSet withJavaUtilConcurrentExecutor:ComGoogleCommonUtilConcurrentMoreExecutors_directExecutor()];
      }
      @catch (NSException *t) {
        ComGoogleCommonUtilConcurrentAbstractFuture_Failure *failure;
        @try {
          failure = new_ComGoogleCommonUtilConcurrentAbstractFuture_Failure_initWithNSException_(t);
        }
        @catch (NSException *oomMostLikely) {
          failure = JreLoadStatic(ComGoogleCommonUtilConcurrentAbstractFuture_Failure, FALLBACK_INSTANCE);
        }
        jboolean unused = [ComGoogleCommonUtilConcurrentAbstractFuture_ATOMIC_HELPER casValueWithComGoogleCommonUtilConcurrentAbstractFuture:self withId:valueToSet withId:failure];
      }
      return true;
    }
    localValue = JreLoadVolatileId(&value_);
  }
  if ([localValue isKindOfClass:[ComGoogleCommonUtilConcurrentAbstractFuture_Cancellation class]]) {
    [((id<ComGoogleCommonUtilConcurrentListenableFuture>) nil_chk(future)) cancelWithBoolean:((ComGoogleCommonUtilConcurrentAbstractFuture_Cancellation *) nil_chk(((ComGoogleCommonUtilConcurrentAbstractFuture_Cancellation *) cast_chk(localValue, [ComGoogleCommonUtilConcurrentAbstractFuture_Cancellation class]))))->wasInterrupted_];
  }
  return false;
}

+ (id)getFutureValueWithComGoogleCommonUtilConcurrentListenableFuture:(id<ComGoogleCommonUtilConcurrentListenableFuture>)future {
  return ComGoogleCommonUtilConcurrentAbstractFuture_getFutureValueWithComGoogleCommonUtilConcurrentListenableFuture_(future);
}

+ (void)completeWithComGoogleCommonUtilConcurrentAbstractFuture:(ComGoogleCommonUtilConcurrentAbstractFuture *)future {
  ComGoogleCommonUtilConcurrentAbstractFuture_completeWithComGoogleCommonUtilConcurrentAbstractFuture_(future);
}

- (void)afterDone {
}

- (NSException *)trustedGetException {
  return ((ComGoogleCommonUtilConcurrentAbstractFuture_Failure *) nil_chk(((ComGoogleCommonUtilConcurrentAbstractFuture_Failure *) cast_chk(JreLoadVolatileId(&value_), [ComGoogleCommonUtilConcurrentAbstractFuture_Failure class]))))->exception_;
}

- (void)maybePropagateCancellationWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)related {
  if ((related != nil) & [self isCancelled]) {
    [((id<JavaUtilConcurrentFuture>) nil_chk(related)) cancelWithBoolean:ComGoogleCommonUtilConcurrentAbstractFuture_wasInterrupted(self)];
  }
}

- (void)releaseWaiters {
  ComGoogleCommonUtilConcurrentAbstractFuture_releaseWaiters(self);
}

- (ComGoogleCommonUtilConcurrentAbstractFuture_Listener *)clearListenersWithComGoogleCommonUtilConcurrentAbstractFuture_Listener:(ComGoogleCommonUtilConcurrentAbstractFuture_Listener *)onto {
  return ComGoogleCommonUtilConcurrentAbstractFuture_clearListenersWithComGoogleCommonUtilConcurrentAbstractFuture_Listener_(self, onto);
}

+ (void)executeListenerWithJavaLangRunnable:(id<JavaLangRunnable>)runnable
             withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor {
  ComGoogleCommonUtilConcurrentAbstractFuture_executeListenerWithJavaLangRunnable_withJavaUtilConcurrentExecutor_(runnable, executor);
}

+ (JavaUtilConcurrentCancellationException *)cancellationExceptionWithCauseWithNSString:(NSString *)message
                                                                        withNSException:(NSException *)cause {
  return ComGoogleCommonUtilConcurrentAbstractFuture_cancellationExceptionWithCauseWithNSString_withNSException_(message, cause);
}

- (void)__javaClone:(ComGoogleCommonUtilConcurrentAbstractFuture *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&value_, &original->value_);
  JreCloneVolatileStrong(&listeners_, &original->listeners_);
  JreCloneVolatileStrong(&waiters_, &original->waiters_);
}

- (void)dealloc {
  JreReleaseVolatile(&value_);
  JreReleaseVolatile(&listeners_);
  JreReleaseVolatile(&waiters_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x2, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, 4, 5, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 6, 7, -1, -1 },
    { NULL, "LNSObject;", 0x2, 8, 9, 10, 11, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x14, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 16, 9, -1, 17, -1, 18 },
    { NULL, "Z", 0x4, 19, 20, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 21, 22, -1, 23, -1, -1 },
    { NULL, "LNSObject;", 0xa, 24, 22, -1, 25, -1, -1 },
    { NULL, "V", 0xa, 26, 27, -1, 28, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSException;", 0x10, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x10, 29, 30, -1, 31, -1, 32 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentAbstractFuture_Listener;", 0x2, 33, 34, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 35, 15, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentCancellationException;", 0xa, 36, 37, -1, -1, -1, 38 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(removeWaiterWithComGoogleCommonUtilConcurrentAbstractFuture_Waiter:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(getWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[3].selector = @selector(get);
  methods[4].selector = @selector(getDoneValueWithId:);
  methods[5].selector = @selector(isDone);
  methods[6].selector = @selector(isCancelled);
  methods[7].selector = @selector(cancelWithBoolean:);
  methods[8].selector = @selector(interruptTask);
  methods[9].selector = @selector(wasInterrupted);
  methods[10].selector = @selector(addListenerWithJavaLangRunnable:withJavaUtilConcurrentExecutor:);
  methods[11].selector = @selector(setWithId:);
  methods[12].selector = @selector(setExceptionWithNSException:);
  methods[13].selector = @selector(setFutureWithComGoogleCommonUtilConcurrentListenableFuture:);
  methods[14].selector = @selector(getFutureValueWithComGoogleCommonUtilConcurrentListenableFuture:);
  methods[15].selector = @selector(completeWithComGoogleCommonUtilConcurrentAbstractFuture:);
  methods[16].selector = @selector(afterDone);
  methods[17].selector = @selector(trustedGetException);
  methods[18].selector = @selector(maybePropagateCancellationWithJavaUtilConcurrentFuture:);
  methods[19].selector = @selector(releaseWaiters);
  methods[20].selector = @selector(clearListenersWithComGoogleCommonUtilConcurrentAbstractFuture_Listener:);
  methods[21].selector = @selector(executeListenerWithJavaLangRunnable:withJavaUtilConcurrentExecutor:);
  methods[22].selector = @selector(cancellationExceptionWithCauseWithNSString:withNSException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "GENERATE_CANCELLATION_CAUSES", "Z", .constantValue.asLong = 0, 0x1a, -1, 39, -1, -1 },
    { "log", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 40, -1, -1 },
    { "SPIN_THRESHOLD_NANOS", "J", .constantValue.asLong = ComGoogleCommonUtilConcurrentAbstractFuture_SPIN_THRESHOLD_NANOS, 0x1a, -1, -1, -1, -1 },
    { "ATOMIC_HELPER", "LComGoogleCommonUtilConcurrentAbstractFuture_AtomicHelper;", .constantValue.asLong = 0, 0x1a, -1, 41, -1, -1 },
    { "NULL", "LNSObject;", .constantValue.asLong = 0, 0x1a, -1, 42, -1, -1 },
    { "value_", "LNSObject;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "listeners_", "LComGoogleCommonUtilConcurrentAbstractFuture_Listener;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "waiters_", "LComGoogleCommonUtilConcurrentAbstractFuture_Waiter;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "removeWaiter", "LComGoogleCommonUtilConcurrentAbstractFuture_Waiter;", "get", "JLJavaUtilConcurrentTimeUnit;", "LJavaLangInterruptedException;LJavaUtilConcurrentTimeoutException;LJavaUtilConcurrentExecutionException;", "(JLjava/util/concurrent/TimeUnit;)TV;", "LJavaLangInterruptedException;LJavaUtilConcurrentExecutionException;", "()TV;", "getDoneValue", "LNSObject;", "LJavaUtilConcurrentExecutionException;", "(Ljava/lang/Object;)TV;", "cancel", "Z", "addListener", "LJavaLangRunnable;LJavaUtilConcurrentExecutor;", "set", "(TV;)Z", (void *)&ComGoogleCommonUtilConcurrentAbstractFuture__Annotations$0, "setException", "LNSException;", "setFuture", "LComGoogleCommonUtilConcurrentListenableFuture;", "(Lcom/google/common/util/concurrent/ListenableFuture<+TV;>;)Z", "getFutureValue", "(Lcom/google/common/util/concurrent/ListenableFuture<*>;)Ljava/lang/Object;", "complete", "LComGoogleCommonUtilConcurrentAbstractFuture;", "(Lcom/google/common/util/concurrent/AbstractFuture<*>;)V", "maybePropagateCancellation", "LJavaUtilConcurrentFuture;", "(Ljava/util/concurrent/Future<*>;)V", (void *)&ComGoogleCommonUtilConcurrentAbstractFuture__Annotations$1, "clearListeners", "LComGoogleCommonUtilConcurrentAbstractFuture_Listener;", "executeListener", "cancellationExceptionWithCause", "LNSString;LNSException;", (void *)&ComGoogleCommonUtilConcurrentAbstractFuture__Annotations$2, &ComGoogleCommonUtilConcurrentAbstractFuture_GENERATE_CANCELLATION_CAUSES, &ComGoogleCommonUtilConcurrentAbstractFuture_log, &ComGoogleCommonUtilConcurrentAbstractFuture_ATOMIC_HELPER, &ComGoogleCommonUtilConcurrentAbstractFuture_NULL, "LComGoogleCommonUtilConcurrentAbstractFuture_TrustedFuture;LComGoogleCommonUtilConcurrentAbstractFuture_Waiter;LComGoogleCommonUtilConcurrentAbstractFuture_Listener;LComGoogleCommonUtilConcurrentAbstractFuture_Failure;LComGoogleCommonUtilConcurrentAbstractFuture_Cancellation;LComGoogleCommonUtilConcurrentAbstractFuture_SetFuture;LComGoogleCommonUtilConcurrentAbstractFuture_AtomicHelper;LComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper;LComGoogleCommonUtilConcurrentAbstractFuture_SafeAtomicHelper;LComGoogleCommonUtilConcurrentAbstractFuture_SynchronizedHelper;", "<V:Ljava/lang/Object;>Ljava/lang/Object;Lcom/google/common/util/concurrent/ListenableFuture<TV;>;", (void *)&ComGoogleCommonUtilConcurrentAbstractFuture__Annotations$3 };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractFuture = { "AbstractFuture", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x401, 23, 8, -1, 43, -1, 44, 45 };
  return &_ComGoogleCommonUtilConcurrentAbstractFuture;
}

+ (void)initialize {
  if (self == [ComGoogleCommonUtilConcurrentAbstractFuture class]) {
    ComGoogleCommonUtilConcurrentAbstractFuture_GENERATE_CANCELLATION_CAUSES = JavaLangBoolean_parseBooleanWithNSString_(JavaLangSystem_getPropertyWithNSString_withNSString_(@"guava.concurrent.generate_cancellation_cause", @"false"));
    ComGoogleCommonUtilConcurrentAbstractFuture_log = JavaUtilLoggingLogger_getLoggerWithNSString_([ComGoogleCommonUtilConcurrentAbstractFuture_class_() getName]);
    {
      ComGoogleCommonUtilConcurrentAbstractFuture_AtomicHelper *helper;
      @try {
        helper = new_ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_init();
      }
      @catch (NSException *unsafeFailure) {
        @try {
          helper = new_ComGoogleCommonUtilConcurrentAbstractFuture_SafeAtomicHelper_initWithJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_(JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_newUpdaterWithIOSClass_withIOSClass_withNSString_(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter_class_(), JavaLangThread_class_(), @"thread"), JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_newUpdaterWithIOSClass_withIOSClass_withNSString_(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter_class_(), ComGoogleCommonUtilConcurrentAbstractFuture_Waiter_class_(), @"next"), JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_newUpdaterWithIOSClass_withIOSClass_withNSString_(ComGoogleCommonUtilConcurrentAbstractFuture_class_(), ComGoogleCommonUtilConcurrentAbstractFuture_Waiter_class_(), @"waiters"), JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_newUpdaterWithIOSClass_withIOSClass_withNSString_(ComGoogleCommonUtilConcurrentAbstractFuture_class_(), ComGoogleCommonUtilConcurrentAbstractFuture_Listener_class_(), @"listeners"), JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_newUpdaterWithIOSClass_withIOSClass_withNSString_(ComGoogleCommonUtilConcurrentAbstractFuture_class_(), NSObject_class_(), @"value"));
        }
        @catch (NSException *atomicReferenceFieldUpdaterFailure) {
          [((JavaUtilLoggingLogger *) nil_chk(ComGoogleCommonUtilConcurrentAbstractFuture_log)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:@"UnsafeAtomicHelper is broken!" withNSException:unsafeFailure];
          [ComGoogleCommonUtilConcurrentAbstractFuture_log logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:@"SafeAtomicHelper is broken!" withNSException:atomicReferenceFieldUpdaterFailure];
          helper = new_ComGoogleCommonUtilConcurrentAbstractFuture_SynchronizedHelper_init();
        }
      }
      ComGoogleCommonUtilConcurrentAbstractFuture_ATOMIC_HELPER = helper;
      __unused IOSClass *ensureLoaded = JavaUtilConcurrentLocksLockSupport_class_();
    }
    ComGoogleCommonUtilConcurrentAbstractFuture_NULL = new_NSObject_init();
    J2OBJC_SET_INITIALIZED(ComGoogleCommonUtilConcurrentAbstractFuture)
  }
}

@end

void ComGoogleCommonUtilConcurrentAbstractFuture_removeWaiterWithComGoogleCommonUtilConcurrentAbstractFuture_Waiter_(ComGoogleCommonUtilConcurrentAbstractFuture *self, ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *node) {
  (void) JreVolatileStrongAssign(&((ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *) nil_chk(node))->thread_, nil);
  while (true) {
    {
      ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *pred = nil;
      ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *curr = JreLoadVolatileId(&self->waiters_);
      if (curr == JreLoadStatic(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter, TOMBSTONE)) {
        return;
      }
      ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *succ;
      while (curr != nil) {
        succ = JreLoadVolatileId(&curr->next_);
        if (JreLoadVolatileId(&curr->thread_) != nil) {
          pred = curr;
        }
        else if (pred != nil) {
          (void) JreVolatileStrongAssign(&pred->next_, succ);
          if (JreLoadVolatileId(&pred->thread_) == nil) {
            goto continue_restart;
          }
        }
        else if (![((ComGoogleCommonUtilConcurrentAbstractFuture_AtomicHelper *) nil_chk(ComGoogleCommonUtilConcurrentAbstractFuture_ATOMIC_HELPER)) casWaitersWithComGoogleCommonUtilConcurrentAbstractFuture:self withComGoogleCommonUtilConcurrentAbstractFuture_Waiter:curr withComGoogleCommonUtilConcurrentAbstractFuture_Waiter:succ]) {
          goto continue_restart;
        }
        curr = succ;
      }
      break;
    }
    continue_restart: ;
  }
}

void ComGoogleCommonUtilConcurrentAbstractFuture_init(ComGoogleCommonUtilConcurrentAbstractFuture *self) {
  NSObject_init(self);
}

id ComGoogleCommonUtilConcurrentAbstractFuture_getDoneValueWithId_(ComGoogleCommonUtilConcurrentAbstractFuture *self, id obj) {
  if ([obj isKindOfClass:[ComGoogleCommonUtilConcurrentAbstractFuture_Cancellation class]]) {
    @throw nil_chk(ComGoogleCommonUtilConcurrentAbstractFuture_cancellationExceptionWithCauseWithNSString_withNSException_(@"Task was cancelled.", ((ComGoogleCommonUtilConcurrentAbstractFuture_Cancellation *) nil_chk(((ComGoogleCommonUtilConcurrentAbstractFuture_Cancellation *) cast_chk(obj, [ComGoogleCommonUtilConcurrentAbstractFuture_Cancellation class]))))->cause_));
  }
  else if ([obj isKindOfClass:[ComGoogleCommonUtilConcurrentAbstractFuture_Failure class]]) {
    @throw new_JavaUtilConcurrentExecutionException_initWithNSException_(((ComGoogleCommonUtilConcurrentAbstractFuture_Failure *) nil_chk(((ComGoogleCommonUtilConcurrentAbstractFuture_Failure *) cast_chk(obj, [ComGoogleCommonUtilConcurrentAbstractFuture_Failure class]))))->exception_);
  }
  else if (obj == ComGoogleCommonUtilConcurrentAbstractFuture_NULL) {
    return nil;
  }
  else {
    id asV = obj;
    return asV;
  }
}

jboolean ComGoogleCommonUtilConcurrentAbstractFuture_wasInterrupted(ComGoogleCommonUtilConcurrentAbstractFuture *self) {
  id localValue = JreLoadVolatileId(&self->value_);
  return ([localValue isKindOfClass:[ComGoogleCommonUtilConcurrentAbstractFuture_Cancellation class]]) && ((ComGoogleCommonUtilConcurrentAbstractFuture_Cancellation *) nil_chk(((ComGoogleCommonUtilConcurrentAbstractFuture_Cancellation *) cast_chk(localValue, [ComGoogleCommonUtilConcurrentAbstractFuture_Cancellation class]))))->wasInterrupted_;
}

id ComGoogleCommonUtilConcurrentAbstractFuture_getFutureValueWithComGoogleCommonUtilConcurrentListenableFuture_(id<ComGoogleCommonUtilConcurrentListenableFuture> future) {
  ComGoogleCommonUtilConcurrentAbstractFuture_initialize();
  id valueToSet;
  if ([future isKindOfClass:[ComGoogleCommonUtilConcurrentAbstractFuture_TrustedFuture class]]) {
    return JreLoadVolatileId(&((ComGoogleCommonUtilConcurrentAbstractFuture *) nil_chk(((ComGoogleCommonUtilConcurrentAbstractFuture *) cast_chk(future, [ComGoogleCommonUtilConcurrentAbstractFuture class]))))->value_);
  }
  else {
    @try {
      id v = ComGoogleCommonUtilConcurrentFutures_getDoneWithJavaUtilConcurrentFuture_(future);
      valueToSet = v == nil ? ComGoogleCommonUtilConcurrentAbstractFuture_NULL : v;
    }
    @catch (JavaUtilConcurrentExecutionException *exception) {
      valueToSet = new_ComGoogleCommonUtilConcurrentAbstractFuture_Failure_initWithNSException_([exception getCause]);
    }
    @catch (JavaUtilConcurrentCancellationException *cancellation) {
      valueToSet = new_ComGoogleCommonUtilConcurrentAbstractFuture_Cancellation_initWithBoolean_withNSException_(false, cancellation);
    }
    @catch (NSException *t) {
      valueToSet = new_ComGoogleCommonUtilConcurrentAbstractFuture_Failure_initWithNSException_(t);
    }
  }
  return valueToSet;
}

void ComGoogleCommonUtilConcurrentAbstractFuture_completeWithComGoogleCommonUtilConcurrentAbstractFuture_(ComGoogleCommonUtilConcurrentAbstractFuture *future) {
  ComGoogleCommonUtilConcurrentAbstractFuture_initialize();
  ComGoogleCommonUtilConcurrentAbstractFuture_Listener *next = nil;
  while (true) {
    {
      ComGoogleCommonUtilConcurrentAbstractFuture_releaseWaiters(nil_chk(future));
      [future afterDone];
      next = ComGoogleCommonUtilConcurrentAbstractFuture_clearListenersWithComGoogleCommonUtilConcurrentAbstractFuture_Listener_(future, next);
      future = nil;
      while (next != nil) {
        ComGoogleCommonUtilConcurrentAbstractFuture_Listener *curr = next;
        next = next->next_;
        id<JavaLangRunnable> task = curr->task_;
        if ([task isKindOfClass:[ComGoogleCommonUtilConcurrentAbstractFuture_SetFuture class]]) {
          ComGoogleCommonUtilConcurrentAbstractFuture_SetFuture *setFuture = (ComGoogleCommonUtilConcurrentAbstractFuture_SetFuture *) cast_chk(task, [ComGoogleCommonUtilConcurrentAbstractFuture_SetFuture class]);
          future = ((ComGoogleCommonUtilConcurrentAbstractFuture_SetFuture *) nil_chk(setFuture))->owner_;
          if (JreLoadVolatileId(&((ComGoogleCommonUtilConcurrentAbstractFuture *) nil_chk(future))->value_) == setFuture) {
            id valueToSet = ComGoogleCommonUtilConcurrentAbstractFuture_getFutureValueWithComGoogleCommonUtilConcurrentListenableFuture_(setFuture->future_);
            if ([((ComGoogleCommonUtilConcurrentAbstractFuture_AtomicHelper *) nil_chk(ComGoogleCommonUtilConcurrentAbstractFuture_ATOMIC_HELPER)) casValueWithComGoogleCommonUtilConcurrentAbstractFuture:future withId:setFuture withId:valueToSet]) {
              goto continue_outer;
            }
          }
        }
        else {
          ComGoogleCommonUtilConcurrentAbstractFuture_executeListenerWithJavaLangRunnable_withJavaUtilConcurrentExecutor_(task, curr->executor_);
        }
      }
      break;
    }
    continue_outer: ;
  }
}

void ComGoogleCommonUtilConcurrentAbstractFuture_releaseWaiters(ComGoogleCommonUtilConcurrentAbstractFuture *self) {
  ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *head;
  do {
    head = JreLoadVolatileId(&self->waiters_);
  }
  while (![((ComGoogleCommonUtilConcurrentAbstractFuture_AtomicHelper *) nil_chk(ComGoogleCommonUtilConcurrentAbstractFuture_ATOMIC_HELPER)) casWaitersWithComGoogleCommonUtilConcurrentAbstractFuture:self withComGoogleCommonUtilConcurrentAbstractFuture_Waiter:head withComGoogleCommonUtilConcurrentAbstractFuture_Waiter:JreLoadStatic(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter, TOMBSTONE)]);
  for (ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *currentWaiter = head; currentWaiter != nil; currentWaiter = JreLoadVolatileId(&currentWaiter->next_)) {
    [currentWaiter unpark];
  }
}

ComGoogleCommonUtilConcurrentAbstractFuture_Listener *ComGoogleCommonUtilConcurrentAbstractFuture_clearListenersWithComGoogleCommonUtilConcurrentAbstractFuture_Listener_(ComGoogleCommonUtilConcurrentAbstractFuture *self, ComGoogleCommonUtilConcurrentAbstractFuture_Listener *onto) {
  ComGoogleCommonUtilConcurrentAbstractFuture_Listener *head;
  do {
    head = JreLoadVolatileId(&self->listeners_);
  }
  while (![((ComGoogleCommonUtilConcurrentAbstractFuture_AtomicHelper *) nil_chk(ComGoogleCommonUtilConcurrentAbstractFuture_ATOMIC_HELPER)) casListenersWithComGoogleCommonUtilConcurrentAbstractFuture:self withComGoogleCommonUtilConcurrentAbstractFuture_Listener:head withComGoogleCommonUtilConcurrentAbstractFuture_Listener:JreLoadStatic(ComGoogleCommonUtilConcurrentAbstractFuture_Listener, TOMBSTONE)]);
  ComGoogleCommonUtilConcurrentAbstractFuture_Listener *reversedList = onto;
  while (head != nil) {
    ComGoogleCommonUtilConcurrentAbstractFuture_Listener *tmp = head;
    head = head->next_;
    tmp->next_ = reversedList;
    reversedList = tmp;
  }
  return reversedList;
}

void ComGoogleCommonUtilConcurrentAbstractFuture_executeListenerWithJavaLangRunnable_withJavaUtilConcurrentExecutor_(id<JavaLangRunnable> runnable, id<JavaUtilConcurrentExecutor> executor) {
  ComGoogleCommonUtilConcurrentAbstractFuture_initialize();
  @try {
    [((id<JavaUtilConcurrentExecutor>) nil_chk(executor)) executeWithJavaLangRunnable:runnable];
  }
  @catch (JavaLangRuntimeException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(ComGoogleCommonUtilConcurrentAbstractFuture_log)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:JreStrcat("$@$@", @"RuntimeException while executing runnable ", runnable, @" with executor ", executor) withNSException:e];
  }
}

JavaUtilConcurrentCancellationException *ComGoogleCommonUtilConcurrentAbstractFuture_cancellationExceptionWithCauseWithNSString_withNSException_(NSString *message, NSException *cause) {
  ComGoogleCommonUtilConcurrentAbstractFuture_initialize();
  JavaUtilConcurrentCancellationException *exception = new_JavaUtilConcurrentCancellationException_initWithNSString_(message);
  (void) [exception initCauseWithNSException:cause];
  return exception;
}

IOSObjectArray *ComGoogleCommonUtilConcurrentAbstractFuture__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonUtilConcurrentAbstractFuture__Annotations$1() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonUtilConcurrentAbstractFuture__Annotations$2() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:2 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonUtilConcurrentAbstractFuture__Annotations$3() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_ComGoogleErrorproneAnnotationsDoNotMock(@"Use Futures.immediate*Future or SettableFuture") } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentAbstractFuture)

@implementation ComGoogleCommonUtilConcurrentAbstractFuture_TrustedFuture

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentAbstractFuture_TrustedFuture_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)get {
  return [super get];
}

- (id)getWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return [super getWithLong:timeout withJavaUtilConcurrentTimeUnit:unit];
}

- (jboolean)isDone {
  return [super isDone];
}

- (jboolean)isCancelled {
  return [super isCancelled];
}

- (void)addListenerWithJavaLangRunnable:(id<JavaLangRunnable>)listener
         withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor {
  [super addListenerWithJavaLangRunnable:listener withJavaUtilConcurrentExecutor:executor];
}

- (jboolean)cancelWithBoolean:(jboolean)mayInterruptIfRunning {
  return [super cancelWithBoolean:mayInterruptIfRunning];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x11, -1, -1, 0, 1, -1, -1 },
    { NULL, "LNSObject;", 0x11, 2, 3, 4, 5, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(get);
  methods[2].selector = @selector(getWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[3].selector = @selector(isDone);
  methods[4].selector = @selector(isCancelled);
  methods[5].selector = @selector(addListenerWithJavaLangRunnable:withJavaUtilConcurrentExecutor:);
  methods[6].selector = @selector(cancelWithBoolean:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaLangInterruptedException;LJavaUtilConcurrentExecutionException;", "()TV;", "get", "JLJavaUtilConcurrentTimeUnit;", "LJavaLangInterruptedException;LJavaUtilConcurrentExecutionException;LJavaUtilConcurrentTimeoutException;", "(JLjava/util/concurrent/TimeUnit;)TV;", "addListener", "LJavaLangRunnable;LJavaUtilConcurrentExecutor;", "cancel", "Z", "LComGoogleCommonUtilConcurrentAbstractFuture;", "<V:Ljava/lang/Object;>Lcom/google/common/util/concurrent/AbstractFuture<TV;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractFuture_TrustedFuture = { "TrustedFuture", "com.google.common.util.concurrent", ptrTable, methods, NULL, 7, 0x408, 7, 0, 10, -1, -1, 11, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractFuture_TrustedFuture;
}

@end

void ComGoogleCommonUtilConcurrentAbstractFuture_TrustedFuture_init(ComGoogleCommonUtilConcurrentAbstractFuture_TrustedFuture *self) {
  ComGoogleCommonUtilConcurrentAbstractFuture_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentAbstractFuture_TrustedFuture)

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter)

@implementation ComGoogleCommonUtilConcurrentAbstractFuture_Waiter

- (instancetype)initWithBoolean:(jboolean)unused {
  ComGoogleCommonUtilConcurrentAbstractFuture_Waiter_initWithBoolean_(self, unused);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentAbstractFuture_Waiter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setNextWithComGoogleCommonUtilConcurrentAbstractFuture_Waiter:(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)next {
  [((ComGoogleCommonUtilConcurrentAbstractFuture_AtomicHelper *) nil_chk(JreLoadStatic(ComGoogleCommonUtilConcurrentAbstractFuture, ATOMIC_HELPER))) putNextWithComGoogleCommonUtilConcurrentAbstractFuture_Waiter:self withComGoogleCommonUtilConcurrentAbstractFuture_Waiter:next];
}

- (void)unpark {
  JavaLangThread *w = JreLoadVolatileId(&thread_);
  if (w != nil) {
    (void) JreVolatileStrongAssign(&thread_, nil);
    JavaUtilConcurrentLocksLockSupport_unparkWithJavaLangThread_(w);
  }
}

- (void)__javaClone:(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&thread_, &original->thread_);
  JreCloneVolatileStrong(&next_, &original->next_);
}

- (void)dealloc {
  JreReleaseVolatile(&thread_);
  JreReleaseVolatile(&next_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithBoolean:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(setNextWithComGoogleCommonUtilConcurrentAbstractFuture_Waiter:);
  methods[3].selector = @selector(unpark);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TOMBSTONE", "LComGoogleCommonUtilConcurrentAbstractFuture_Waiter;", .constantValue.asLong = 0, 0x18, -1, 3, -1, -1 },
    { "thread_", "LJavaLangThread;", .constantValue.asLong = 0, 0x40, -1, -1, -1, 4 },
    { "next_", "LComGoogleCommonUtilConcurrentAbstractFuture_Waiter;", .constantValue.asLong = 0, 0x40, -1, -1, -1, 5 },
  };
  static const void *ptrTable[] = { "Z", "setNext", "LComGoogleCommonUtilConcurrentAbstractFuture_Waiter;", &ComGoogleCommonUtilConcurrentAbstractFuture_Waiter_TOMBSTONE, (void *)&ComGoogleCommonUtilConcurrentAbstractFuture_Waiter__Annotations$0, (void *)&ComGoogleCommonUtilConcurrentAbstractFuture_Waiter__Annotations$1, "LComGoogleCommonUtilConcurrentAbstractFuture;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractFuture_Waiter = { "Waiter", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x1a, 4, 3, 6, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractFuture_Waiter;
}

+ (void)initialize {
  if (self == [ComGoogleCommonUtilConcurrentAbstractFuture_Waiter class]) {
    ComGoogleCommonUtilConcurrentAbstractFuture_Waiter_TOMBSTONE = new_ComGoogleCommonUtilConcurrentAbstractFuture_Waiter_initWithBoolean_(false);
    J2OBJC_SET_INITIALIZED(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter)
  }
}

@end

void ComGoogleCommonUtilConcurrentAbstractFuture_Waiter_initWithBoolean_(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *self, jboolean unused) {
  NSObject_init(self);
}

ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *new_ComGoogleCommonUtilConcurrentAbstractFuture_Waiter_initWithBoolean_(jboolean unused) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter, initWithBoolean_, unused)
}

ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *create_ComGoogleCommonUtilConcurrentAbstractFuture_Waiter_initWithBoolean_(jboolean unused) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter, initWithBoolean_, unused)
}

void ComGoogleCommonUtilConcurrentAbstractFuture_Waiter_init(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *self) {
  NSObject_init(self);
  [((ComGoogleCommonUtilConcurrentAbstractFuture_AtomicHelper *) nil_chk(JreLoadStatic(ComGoogleCommonUtilConcurrentAbstractFuture, ATOMIC_HELPER))) putThreadWithComGoogleCommonUtilConcurrentAbstractFuture_Waiter:self withJavaLangThread:JavaLangThread_currentThread()];
}

ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *new_ComGoogleCommonUtilConcurrentAbstractFuture_Waiter_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter, init)
}

ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *create_ComGoogleCommonUtilConcurrentAbstractFuture_Waiter_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter, init)
}

IOSObjectArray *ComGoogleCommonUtilConcurrentAbstractFuture_Waiter__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComGoogleCommonUtilConcurrentAbstractFuture_Waiter__Annotations$1() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter)

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonUtilConcurrentAbstractFuture_Listener)

@implementation ComGoogleCommonUtilConcurrentAbstractFuture_Listener

- (instancetype)initWithJavaLangRunnable:(id<JavaLangRunnable>)task
          withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor {
  ComGoogleCommonUtilConcurrentAbstractFuture_Listener_initWithJavaLangRunnable_withJavaUtilConcurrentExecutor_(self, task, executor);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangRunnable:withJavaUtilConcurrentExecutor:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TOMBSTONE", "LComGoogleCommonUtilConcurrentAbstractFuture_Listener;", .constantValue.asLong = 0, 0x18, -1, 1, -1, -1 },
    { "task_", "LJavaLangRunnable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "executor_", "LJavaUtilConcurrentExecutor;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "next_", "LComGoogleCommonUtilConcurrentAbstractFuture_Listener;", .constantValue.asLong = 0, 0x0, -1, -1, -1, 2 },
  };
  static const void *ptrTable[] = { "LJavaLangRunnable;LJavaUtilConcurrentExecutor;", &ComGoogleCommonUtilConcurrentAbstractFuture_Listener_TOMBSTONE, (void *)&ComGoogleCommonUtilConcurrentAbstractFuture_Listener__Annotations$0, "LComGoogleCommonUtilConcurrentAbstractFuture;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractFuture_Listener = { "Listener", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x1a, 1, 4, 3, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractFuture_Listener;
}

+ (void)initialize {
  if (self == [ComGoogleCommonUtilConcurrentAbstractFuture_Listener class]) {
    ComGoogleCommonUtilConcurrentAbstractFuture_Listener_TOMBSTONE = new_ComGoogleCommonUtilConcurrentAbstractFuture_Listener_initWithJavaLangRunnable_withJavaUtilConcurrentExecutor_(nil, nil);
    J2OBJC_SET_INITIALIZED(ComGoogleCommonUtilConcurrentAbstractFuture_Listener)
  }
}

@end

void ComGoogleCommonUtilConcurrentAbstractFuture_Listener_initWithJavaLangRunnable_withJavaUtilConcurrentExecutor_(ComGoogleCommonUtilConcurrentAbstractFuture_Listener *self, id<JavaLangRunnable> task, id<JavaUtilConcurrentExecutor> executor) {
  NSObject_init(self);
  self->task_ = task;
  self->executor_ = executor;
}

ComGoogleCommonUtilConcurrentAbstractFuture_Listener *new_ComGoogleCommonUtilConcurrentAbstractFuture_Listener_initWithJavaLangRunnable_withJavaUtilConcurrentExecutor_(id<JavaLangRunnable> task, id<JavaUtilConcurrentExecutor> executor) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractFuture_Listener, initWithJavaLangRunnable_withJavaUtilConcurrentExecutor_, task, executor)
}

ComGoogleCommonUtilConcurrentAbstractFuture_Listener *create_ComGoogleCommonUtilConcurrentAbstractFuture_Listener_initWithJavaLangRunnable_withJavaUtilConcurrentExecutor_(id<JavaLangRunnable> task, id<JavaUtilConcurrentExecutor> executor) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractFuture_Listener, initWithJavaLangRunnable_withJavaUtilConcurrentExecutor_, task, executor)
}

IOSObjectArray *ComGoogleCommonUtilConcurrentAbstractFuture_Listener__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentAbstractFuture_Listener)

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonUtilConcurrentAbstractFuture_Failure)

@implementation ComGoogleCommonUtilConcurrentAbstractFuture_Failure

- (instancetype)initWithNSException:(NSException *)exception {
  ComGoogleCommonUtilConcurrentAbstractFuture_Failure_initWithNSException_(self, exception);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FALLBACK_INSTANCE", "LComGoogleCommonUtilConcurrentAbstractFuture_Failure;", .constantValue.asLong = 0, 0x18, -1, 1, -1, -1 },
    { "exception_", "LNSException;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSException;", &ComGoogleCommonUtilConcurrentAbstractFuture_Failure_FALLBACK_INSTANCE, "LComGoogleCommonUtilConcurrentAbstractFuture;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractFuture_Failure = { "Failure", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x1a, 1, 2, 2, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractFuture_Failure;
}

+ (void)initialize {
  if (self == [ComGoogleCommonUtilConcurrentAbstractFuture_Failure class]) {
    ComGoogleCommonUtilConcurrentAbstractFuture_Failure_FALLBACK_INSTANCE = new_ComGoogleCommonUtilConcurrentAbstractFuture_Failure_initWithNSException_(new_ComGoogleCommonUtilConcurrentAbstractFuture_Failure_1_initWithNSString_(@"Failure occurred while trying to finish a future."));
    J2OBJC_SET_INITIALIZED(ComGoogleCommonUtilConcurrentAbstractFuture_Failure)
  }
}

@end

void ComGoogleCommonUtilConcurrentAbstractFuture_Failure_initWithNSException_(ComGoogleCommonUtilConcurrentAbstractFuture_Failure *self, NSException *exception) {
  NSObject_init(self);
  self->exception_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(exception);
}

ComGoogleCommonUtilConcurrentAbstractFuture_Failure *new_ComGoogleCommonUtilConcurrentAbstractFuture_Failure_initWithNSException_(NSException *exception) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractFuture_Failure, initWithNSException_, exception)
}

ComGoogleCommonUtilConcurrentAbstractFuture_Failure *create_ComGoogleCommonUtilConcurrentAbstractFuture_Failure_initWithNSException_(NSException *exception) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractFuture_Failure, initWithNSException_, exception)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentAbstractFuture_Failure)

@implementation ComGoogleCommonUtilConcurrentAbstractFuture_Failure_1

- (instancetype)initWithNSString:(NSString *)x0 {
  ComGoogleCommonUtilConcurrentAbstractFuture_Failure_1_initWithNSString_(self, x0);
  return self;
}

- (NSException *)fillInStackTrace {
  @synchronized(self) {
    return self;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSException;", 0x21, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(fillInStackTrace);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LComGoogleCommonUtilConcurrentAbstractFuture_Failure;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractFuture_Failure_1 = { "", "com.google.common.util.concurrent", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 1, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractFuture_Failure_1;
}

@end

void ComGoogleCommonUtilConcurrentAbstractFuture_Failure_1_initWithNSString_(ComGoogleCommonUtilConcurrentAbstractFuture_Failure_1 *self, NSString *x0) {
  NSException_initWithNSString_(self, x0);
}

ComGoogleCommonUtilConcurrentAbstractFuture_Failure_1 *new_ComGoogleCommonUtilConcurrentAbstractFuture_Failure_1_initWithNSString_(NSString *x0) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractFuture_Failure_1, initWithNSString_, x0)
}

ComGoogleCommonUtilConcurrentAbstractFuture_Failure_1 *create_ComGoogleCommonUtilConcurrentAbstractFuture_Failure_1_initWithNSString_(NSString *x0) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractFuture_Failure_1, initWithNSString_, x0)
}

@implementation ComGoogleCommonUtilConcurrentAbstractFuture_Cancellation

- (instancetype)initWithBoolean:(jboolean)wasInterrupted
                withNSException:(NSException *)cause {
  ComGoogleCommonUtilConcurrentAbstractFuture_Cancellation_initWithBoolean_withNSException_(self, wasInterrupted, cause);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, 1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithBoolean:withNSException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "wasInterrupted_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "cause_", "LNSException;", .constantValue.asLong = 0, 0x10, -1, -1, -1, 2 },
  };
  static const void *ptrTable[] = { "ZLNSException;", (void *)&ComGoogleCommonUtilConcurrentAbstractFuture_Cancellation__Annotations$0, (void *)&ComGoogleCommonUtilConcurrentAbstractFuture_Cancellation__Annotations$1, "LComGoogleCommonUtilConcurrentAbstractFuture;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractFuture_Cancellation = { "Cancellation", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x1a, 1, 2, 3, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractFuture_Cancellation;
}

@end

void ComGoogleCommonUtilConcurrentAbstractFuture_Cancellation_initWithBoolean_withNSException_(ComGoogleCommonUtilConcurrentAbstractFuture_Cancellation *self, jboolean wasInterrupted, NSException *cause) {
  NSObject_init(self);
  self->wasInterrupted_ = wasInterrupted;
  self->cause_ = cause;
}

ComGoogleCommonUtilConcurrentAbstractFuture_Cancellation *new_ComGoogleCommonUtilConcurrentAbstractFuture_Cancellation_initWithBoolean_withNSException_(jboolean wasInterrupted, NSException *cause) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractFuture_Cancellation, initWithBoolean_withNSException_, wasInterrupted, cause)
}

ComGoogleCommonUtilConcurrentAbstractFuture_Cancellation *create_ComGoogleCommonUtilConcurrentAbstractFuture_Cancellation_initWithBoolean_withNSException_(jboolean wasInterrupted, NSException *cause) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractFuture_Cancellation, initWithBoolean_withNSException_, wasInterrupted, cause)
}

IOSObjectArray *ComGoogleCommonUtilConcurrentAbstractFuture_Cancellation__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:2 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonUtilConcurrentAbstractFuture_Cancellation__Annotations$1() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentAbstractFuture_Cancellation)

@implementation ComGoogleCommonUtilConcurrentAbstractFuture_SetFuture

- (instancetype)initWithComGoogleCommonUtilConcurrentAbstractFuture:(ComGoogleCommonUtilConcurrentAbstractFuture *)owner
                  withComGoogleCommonUtilConcurrentListenableFuture:(id<ComGoogleCommonUtilConcurrentListenableFuture>)future {
  ComGoogleCommonUtilConcurrentAbstractFuture_SetFuture_initWithComGoogleCommonUtilConcurrentAbstractFuture_withComGoogleCommonUtilConcurrentListenableFuture_(self, owner, future);
  return self;
}

- (void)run {
  if (JreLoadVolatileId(&((ComGoogleCommonUtilConcurrentAbstractFuture *) nil_chk(owner_))->value_) != self) {
    return;
  }
  id valueToSet = ComGoogleCommonUtilConcurrentAbstractFuture_getFutureValueWithComGoogleCommonUtilConcurrentListenableFuture_(future_);
  if ([((ComGoogleCommonUtilConcurrentAbstractFuture_AtomicHelper *) nil_chk(JreLoadStatic(ComGoogleCommonUtilConcurrentAbstractFuture, ATOMIC_HELPER))) casValueWithComGoogleCommonUtilConcurrentAbstractFuture:owner_ withId:self withId:valueToSet]) {
    ComGoogleCommonUtilConcurrentAbstractFuture_completeWithComGoogleCommonUtilConcurrentAbstractFuture_(owner_);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentAbstractFuture:withComGoogleCommonUtilConcurrentListenableFuture:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "owner_", "LComGoogleCommonUtilConcurrentAbstractFuture;", .constantValue.asLong = 0, 0x10, -1, -1, 2, -1 },
    { "future_", "LComGoogleCommonUtilConcurrentListenableFuture;", .constantValue.asLong = 0, 0x10, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentAbstractFuture;LComGoogleCommonUtilConcurrentListenableFuture;", "(Lcom/google/common/util/concurrent/AbstractFuture<TV;>;Lcom/google/common/util/concurrent/ListenableFuture<+TV;>;)V", "Lcom/google/common/util/concurrent/AbstractFuture<TV;>;", "Lcom/google/common/util/concurrent/ListenableFuture<+TV;>;", "LComGoogleCommonUtilConcurrentAbstractFuture;", "<V:Ljava/lang/Object;>Ljava/lang/Object;Ljava/lang/Runnable;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractFuture_SetFuture = { "SetFuture", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x1a, 2, 2, 4, -1, -1, 5, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractFuture_SetFuture;
}

@end

void ComGoogleCommonUtilConcurrentAbstractFuture_SetFuture_initWithComGoogleCommonUtilConcurrentAbstractFuture_withComGoogleCommonUtilConcurrentListenableFuture_(ComGoogleCommonUtilConcurrentAbstractFuture_SetFuture *self, ComGoogleCommonUtilConcurrentAbstractFuture *owner, id<ComGoogleCommonUtilConcurrentListenableFuture> future) {
  NSObject_init(self);
  self->owner_ = owner;
  self->future_ = future;
}

ComGoogleCommonUtilConcurrentAbstractFuture_SetFuture *new_ComGoogleCommonUtilConcurrentAbstractFuture_SetFuture_initWithComGoogleCommonUtilConcurrentAbstractFuture_withComGoogleCommonUtilConcurrentListenableFuture_(ComGoogleCommonUtilConcurrentAbstractFuture *owner, id<ComGoogleCommonUtilConcurrentListenableFuture> future) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractFuture_SetFuture, initWithComGoogleCommonUtilConcurrentAbstractFuture_withComGoogleCommonUtilConcurrentListenableFuture_, owner, future)
}

ComGoogleCommonUtilConcurrentAbstractFuture_SetFuture *create_ComGoogleCommonUtilConcurrentAbstractFuture_SetFuture_initWithComGoogleCommonUtilConcurrentAbstractFuture_withComGoogleCommonUtilConcurrentListenableFuture_(ComGoogleCommonUtilConcurrentAbstractFuture *owner, id<ComGoogleCommonUtilConcurrentListenableFuture> future) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractFuture_SetFuture, initWithComGoogleCommonUtilConcurrentAbstractFuture_withComGoogleCommonUtilConcurrentListenableFuture_, owner, future)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentAbstractFuture_SetFuture)

@implementation ComGoogleCommonUtilConcurrentAbstractFuture_AtomicHelper

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentAbstractFuture_AtomicHelper_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)putThreadWithComGoogleCommonUtilConcurrentAbstractFuture_Waiter:(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)waiter
                                                     withJavaLangThread:(JavaLangThread *)newValue {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)putNextWithComGoogleCommonUtilConcurrentAbstractFuture_Waiter:(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)waiter
               withComGoogleCommonUtilConcurrentAbstractFuture_Waiter:(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)newValue {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)casWaitersWithComGoogleCommonUtilConcurrentAbstractFuture:(ComGoogleCommonUtilConcurrentAbstractFuture *)future
               withComGoogleCommonUtilConcurrentAbstractFuture_Waiter:(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)expect
               withComGoogleCommonUtilConcurrentAbstractFuture_Waiter:(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)update {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)casListenersWithComGoogleCommonUtilConcurrentAbstractFuture:(ComGoogleCommonUtilConcurrentAbstractFuture *)future
               withComGoogleCommonUtilConcurrentAbstractFuture_Listener:(ComGoogleCommonUtilConcurrentAbstractFuture_Listener *)expect
               withComGoogleCommonUtilConcurrentAbstractFuture_Listener:(ComGoogleCommonUtilConcurrentAbstractFuture_Listener *)update {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)casValueWithComGoogleCommonUtilConcurrentAbstractFuture:(ComGoogleCommonUtilConcurrentAbstractFuture *)future
                                                             withId:(id)expect
                                                             withId:(id)update {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x400, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x400, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x400, 4, 5, -1, 6, -1, -1 },
    { NULL, "Z", 0x400, 7, 8, -1, 9, -1, -1 },
    { NULL, "Z", 0x400, 10, 11, -1, 12, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(putThreadWithComGoogleCommonUtilConcurrentAbstractFuture_Waiter:withJavaLangThread:);
  methods[2].selector = @selector(putNextWithComGoogleCommonUtilConcurrentAbstractFuture_Waiter:withComGoogleCommonUtilConcurrentAbstractFuture_Waiter:);
  methods[3].selector = @selector(casWaitersWithComGoogleCommonUtilConcurrentAbstractFuture:withComGoogleCommonUtilConcurrentAbstractFuture_Waiter:withComGoogleCommonUtilConcurrentAbstractFuture_Waiter:);
  methods[4].selector = @selector(casListenersWithComGoogleCommonUtilConcurrentAbstractFuture:withComGoogleCommonUtilConcurrentAbstractFuture_Listener:withComGoogleCommonUtilConcurrentAbstractFuture_Listener:);
  methods[5].selector = @selector(casValueWithComGoogleCommonUtilConcurrentAbstractFuture:withId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "putThread", "LComGoogleCommonUtilConcurrentAbstractFuture_Waiter;LJavaLangThread;", "putNext", "LComGoogleCommonUtilConcurrentAbstractFuture_Waiter;LComGoogleCommonUtilConcurrentAbstractFuture_Waiter;", "casWaiters", "LComGoogleCommonUtilConcurrentAbstractFuture;LComGoogleCommonUtilConcurrentAbstractFuture_Waiter;LComGoogleCommonUtilConcurrentAbstractFuture_Waiter;", "(Lcom/google/common/util/concurrent/AbstractFuture<*>;Lcom/google/common/util/concurrent/AbstractFuture$Waiter;Lcom/google/common/util/concurrent/AbstractFuture$Waiter;)Z", "casListeners", "LComGoogleCommonUtilConcurrentAbstractFuture;LComGoogleCommonUtilConcurrentAbstractFuture_Listener;LComGoogleCommonUtilConcurrentAbstractFuture_Listener;", "(Lcom/google/common/util/concurrent/AbstractFuture<*>;Lcom/google/common/util/concurrent/AbstractFuture$Listener;Lcom/google/common/util/concurrent/AbstractFuture$Listener;)Z", "casValue", "LComGoogleCommonUtilConcurrentAbstractFuture;LNSObject;LNSObject;", "(Lcom/google/common/util/concurrent/AbstractFuture<*>;Ljava/lang/Object;Ljava/lang/Object;)Z", "LComGoogleCommonUtilConcurrentAbstractFuture;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractFuture_AtomicHelper = { "AtomicHelper", "com.google.common.util.concurrent", ptrTable, methods, NULL, 7, 0x40a, 6, 0, 13, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractFuture_AtomicHelper;
}

@end

void ComGoogleCommonUtilConcurrentAbstractFuture_AtomicHelper_init(ComGoogleCommonUtilConcurrentAbstractFuture_AtomicHelper *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentAbstractFuture_AtomicHelper)

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper)

@implementation ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)putThreadWithComGoogleCommonUtilConcurrentAbstractFuture_Waiter:(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)waiter
                                                     withJavaLangThread:(JavaLangThread *)newValue {
  [((SunMiscUnsafe *) nil_chk(ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_UNSAFE)) putObjectWithId:waiter withLong:ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_WAITER_THREAD_OFFSET withId:newValue];
}

- (void)putNextWithComGoogleCommonUtilConcurrentAbstractFuture_Waiter:(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)waiter
               withComGoogleCommonUtilConcurrentAbstractFuture_Waiter:(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)newValue {
  [((SunMiscUnsafe *) nil_chk(ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_UNSAFE)) putObjectWithId:waiter withLong:ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_WAITER_NEXT_OFFSET withId:newValue];
}

- (jboolean)casWaitersWithComGoogleCommonUtilConcurrentAbstractFuture:(ComGoogleCommonUtilConcurrentAbstractFuture *)future
               withComGoogleCommonUtilConcurrentAbstractFuture_Waiter:(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)expect
               withComGoogleCommonUtilConcurrentAbstractFuture_Waiter:(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)update {
  return [((SunMiscUnsafe *) nil_chk(ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_UNSAFE)) compareAndSwapObjectWithId:future withLong:ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_WAITERS_OFFSET withId:expect withId:update];
}

- (jboolean)casListenersWithComGoogleCommonUtilConcurrentAbstractFuture:(ComGoogleCommonUtilConcurrentAbstractFuture *)future
               withComGoogleCommonUtilConcurrentAbstractFuture_Listener:(ComGoogleCommonUtilConcurrentAbstractFuture_Listener *)expect
               withComGoogleCommonUtilConcurrentAbstractFuture_Listener:(ComGoogleCommonUtilConcurrentAbstractFuture_Listener *)update {
  return [((SunMiscUnsafe *) nil_chk(ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_UNSAFE)) compareAndSwapObjectWithId:future withLong:ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_LISTENERS_OFFSET withId:expect withId:update];
}

- (jboolean)casValueWithComGoogleCommonUtilConcurrentAbstractFuture:(ComGoogleCommonUtilConcurrentAbstractFuture *)future
                                                             withId:(id)expect
                                                             withId:(id)update {
  return [((SunMiscUnsafe *) nil_chk(ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_UNSAFE)) compareAndSwapObjectWithId:future withLong:ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_VALUE_OFFSET withId:expect withId:update];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 4, 5, -1, 6, -1, -1 },
    { NULL, "Z", 0x0, 7, 8, -1, 9, -1, -1 },
    { NULL, "Z", 0x0, 10, 11, -1, 12, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(putThreadWithComGoogleCommonUtilConcurrentAbstractFuture_Waiter:withJavaLangThread:);
  methods[2].selector = @selector(putNextWithComGoogleCommonUtilConcurrentAbstractFuture_Waiter:withComGoogleCommonUtilConcurrentAbstractFuture_Waiter:);
  methods[3].selector = @selector(casWaitersWithComGoogleCommonUtilConcurrentAbstractFuture:withComGoogleCommonUtilConcurrentAbstractFuture_Waiter:withComGoogleCommonUtilConcurrentAbstractFuture_Waiter:);
  methods[4].selector = @selector(casListenersWithComGoogleCommonUtilConcurrentAbstractFuture:withComGoogleCommonUtilConcurrentAbstractFuture_Listener:withComGoogleCommonUtilConcurrentAbstractFuture_Listener:);
  methods[5].selector = @selector(casValueWithComGoogleCommonUtilConcurrentAbstractFuture:withId:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "UNSAFE", "LSunMiscUnsafe;", .constantValue.asLong = 0, 0x18, -1, 13, -1, -1 },
    { "LISTENERS_OFFSET", "J", .constantValue.asLong = 0, 0x18, -1, 14, -1, -1 },
    { "WAITERS_OFFSET", "J", .constantValue.asLong = 0, 0x18, -1, 15, -1, -1 },
    { "VALUE_OFFSET", "J", .constantValue.asLong = 0, 0x18, -1, 16, -1, -1 },
    { "WAITER_THREAD_OFFSET", "J", .constantValue.asLong = 0, 0x18, -1, 17, -1, -1 },
    { "WAITER_NEXT_OFFSET", "J", .constantValue.asLong = 0, 0x18, -1, 18, -1, -1 },
  };
  static const void *ptrTable[] = { "putThread", "LComGoogleCommonUtilConcurrentAbstractFuture_Waiter;LJavaLangThread;", "putNext", "LComGoogleCommonUtilConcurrentAbstractFuture_Waiter;LComGoogleCommonUtilConcurrentAbstractFuture_Waiter;", "casWaiters", "LComGoogleCommonUtilConcurrentAbstractFuture;LComGoogleCommonUtilConcurrentAbstractFuture_Waiter;LComGoogleCommonUtilConcurrentAbstractFuture_Waiter;", "(Lcom/google/common/util/concurrent/AbstractFuture<*>;Lcom/google/common/util/concurrent/AbstractFuture$Waiter;Lcom/google/common/util/concurrent/AbstractFuture$Waiter;)Z", "casListeners", "LComGoogleCommonUtilConcurrentAbstractFuture;LComGoogleCommonUtilConcurrentAbstractFuture_Listener;LComGoogleCommonUtilConcurrentAbstractFuture_Listener;", "(Lcom/google/common/util/concurrent/AbstractFuture<*>;Lcom/google/common/util/concurrent/AbstractFuture$Listener;Lcom/google/common/util/concurrent/AbstractFuture$Listener;)Z", "casValue", "LComGoogleCommonUtilConcurrentAbstractFuture;LNSObject;LNSObject;", "(Lcom/google/common/util/concurrent/AbstractFuture<*>;Ljava/lang/Object;Ljava/lang/Object;)Z", &ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_UNSAFE, &ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_LISTENERS_OFFSET, &ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_WAITERS_OFFSET, &ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_VALUE_OFFSET, &ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_WAITER_THREAD_OFFSET, &ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_WAITER_NEXT_OFFSET, "LComGoogleCommonUtilConcurrentAbstractFuture;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper = { "UnsafeAtomicHelper", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x1a, 6, 6, 19, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper;
}

+ (void)initialize {
  if (self == [ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper class]) {
    {
      SunMiscUnsafe *unsafe = nil;
      @try {
        unsafe = SunMiscUnsafe_getUnsafe();
      }
      @catch (JavaLangSecurityException *tryReflectionInstead) {
        @try {
          unsafe = JavaSecurityAccessController_doPrivilegedWithJavaSecurityPrivilegedExceptionAction_(new_ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_1_init());
        }
        @catch (JavaSecurityPrivilegedActionException *e) {
          @throw new_JavaLangRuntimeException_initWithNSString_withNSException_(@"Could not initialize intrinsics", [e getCause]);
        }
      }
      @try {
        IOSClass *abstractFuture = ComGoogleCommonUtilConcurrentAbstractFuture_class_();
        ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_WAITERS_OFFSET = [((SunMiscUnsafe *) nil_chk(unsafe)) objectFieldOffsetWithJavaLangReflectField:[abstractFuture getDeclaredField:@"waiters"]];
        ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_LISTENERS_OFFSET = [unsafe objectFieldOffsetWithJavaLangReflectField:[abstractFuture getDeclaredField:@"listeners"]];
        ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_VALUE_OFFSET = [unsafe objectFieldOffsetWithJavaLangReflectField:[abstractFuture getDeclaredField:@"value"]];
        ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_WAITER_THREAD_OFFSET = [unsafe objectFieldOffsetWithJavaLangReflectField:[ComGoogleCommonUtilConcurrentAbstractFuture_Waiter_class_() getDeclaredField:@"thread"]];
        ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_WAITER_NEXT_OFFSET = [unsafe objectFieldOffsetWithJavaLangReflectField:[ComGoogleCommonUtilConcurrentAbstractFuture_Waiter_class_() getDeclaredField:@"next"]];
        ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_UNSAFE = unsafe;
      }
      @catch (JavaLangException *e) {
        ComGoogleCommonBaseThrowables_throwIfUncheckedWithNSException_(e);
        @throw new_JavaLangRuntimeException_initWithNSException_(e);
      }
    }
    J2OBJC_SET_INITIALIZED(ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper)
  }
}

@end

void ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_init(ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper *self) {
  ComGoogleCommonUtilConcurrentAbstractFuture_AtomicHelper_init(self);
}

ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper *new_ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper, init)
}

ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper *create_ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper)

@implementation ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (SunMiscUnsafe *)run {
  IOSClass *k = SunMiscUnsafe_class_();
  {
    IOSObjectArray *a__ = [k getDeclaredFields];
    JavaLangReflectField * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaLangReflectField * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaLangReflectField *f = *b__++;
      [((JavaLangReflectField *) nil_chk(f)) setAccessibleWithBoolean:true];
      id x = [f getWithId:nil];
      if ([k isInstance:x]) {
        return [k cast:x];
      }
    }
  }
  @throw new_JavaLangNoSuchFieldError_initWithNSString_(@"the Unsafe");
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LSunMiscUnsafe;", 0x1, -1, -1, 0, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaLangException;", "LComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper;", "Ljava/lang/Object;Ljava/security/PrivilegedExceptionAction<Lsun/misc/Unsafe;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_1 = { "", "com.google.common.util.concurrent", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 1, -1, -1, 2, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_1;
}

@end

void ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_1_init(ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_1 *self) {
  NSObject_init(self);
}

ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_1 *new_ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_1_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_1, init)
}

ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_1 *create_ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_1_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractFuture_UnsafeAtomicHelper_1, init)
}

@implementation ComGoogleCommonUtilConcurrentAbstractFuture_SafeAtomicHelper

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater:(JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *)waiterThreadUpdater
                    withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater:(JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *)waiterNextUpdater
                    withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater:(JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *)waitersUpdater
                    withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater:(JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *)listenersUpdater
                    withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater:(JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *)valueUpdater {
  ComGoogleCommonUtilConcurrentAbstractFuture_SafeAtomicHelper_initWithJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_(self, waiterThreadUpdater, waiterNextUpdater, waitersUpdater, listenersUpdater, valueUpdater);
  return self;
}

- (void)putThreadWithComGoogleCommonUtilConcurrentAbstractFuture_Waiter:(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)waiter
                                                     withJavaLangThread:(JavaLangThread *)newValue {
  [((JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *) nil_chk(waiterThreadUpdater_)) lazySetWithId:waiter withId:newValue];
}

- (void)putNextWithComGoogleCommonUtilConcurrentAbstractFuture_Waiter:(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)waiter
               withComGoogleCommonUtilConcurrentAbstractFuture_Waiter:(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)newValue {
  [((JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *) nil_chk(waiterNextUpdater_)) lazySetWithId:waiter withId:newValue];
}

- (jboolean)casWaitersWithComGoogleCommonUtilConcurrentAbstractFuture:(ComGoogleCommonUtilConcurrentAbstractFuture *)future
               withComGoogleCommonUtilConcurrentAbstractFuture_Waiter:(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)expect
               withComGoogleCommonUtilConcurrentAbstractFuture_Waiter:(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)update {
  return [((JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *) nil_chk(waitersUpdater_)) compareAndSetWithId:future withId:expect withId:update];
}

- (jboolean)casListenersWithComGoogleCommonUtilConcurrentAbstractFuture:(ComGoogleCommonUtilConcurrentAbstractFuture *)future
               withComGoogleCommonUtilConcurrentAbstractFuture_Listener:(ComGoogleCommonUtilConcurrentAbstractFuture_Listener *)expect
               withComGoogleCommonUtilConcurrentAbstractFuture_Listener:(ComGoogleCommonUtilConcurrentAbstractFuture_Listener *)update {
  return [((JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *) nil_chk(listenersUpdater_)) compareAndSetWithId:future withId:expect withId:update];
}

- (jboolean)casValueWithComGoogleCommonUtilConcurrentAbstractFuture:(ComGoogleCommonUtilConcurrentAbstractFuture *)future
                                                             withId:(id)expect
                                                             withId:(id)update {
  return [((JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *) nil_chk(valueUpdater_)) compareAndSetWithId:future withId:expect withId:update];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 6, 7, -1, 8, -1, -1 },
    { NULL, "Z", 0x0, 9, 10, -1, 11, -1, -1 },
    { NULL, "Z", 0x0, 12, 13, -1, 14, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater:withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater:withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater:withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater:withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater:);
  methods[1].selector = @selector(putThreadWithComGoogleCommonUtilConcurrentAbstractFuture_Waiter:withJavaLangThread:);
  methods[2].selector = @selector(putNextWithComGoogleCommonUtilConcurrentAbstractFuture_Waiter:withComGoogleCommonUtilConcurrentAbstractFuture_Waiter:);
  methods[3].selector = @selector(casWaitersWithComGoogleCommonUtilConcurrentAbstractFuture:withComGoogleCommonUtilConcurrentAbstractFuture_Waiter:withComGoogleCommonUtilConcurrentAbstractFuture_Waiter:);
  methods[4].selector = @selector(casListenersWithComGoogleCommonUtilConcurrentAbstractFuture:withComGoogleCommonUtilConcurrentAbstractFuture_Listener:withComGoogleCommonUtilConcurrentAbstractFuture_Listener:);
  methods[5].selector = @selector(casValueWithComGoogleCommonUtilConcurrentAbstractFuture:withId:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "waiterThreadUpdater_", "LJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater;", .constantValue.asLong = 0, 0x10, -1, -1, 15, -1 },
    { "waiterNextUpdater_", "LJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater;", .constantValue.asLong = 0, 0x10, -1, -1, 16, -1 },
    { "waitersUpdater_", "LJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater;", .constantValue.asLong = 0, 0x10, -1, -1, 17, -1 },
    { "listenersUpdater_", "LJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater;", .constantValue.asLong = 0, 0x10, -1, -1, 18, -1 },
    { "valueUpdater_", "LJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater;", .constantValue.asLong = 0, 0x10, -1, -1, 19, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater;LJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater;LJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater;LJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater;LJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater;", "(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater<Lcom/google/common/util/concurrent/AbstractFuture$Waiter;Ljava/lang/Thread;>;Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater<Lcom/google/common/util/concurrent/AbstractFuture$Waiter;Lcom/google/common/util/concurrent/AbstractFuture$Waiter;>;Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater<Lcom/google/common/util/concurrent/AbstractFuture;Lcom/google/common/util/concurrent/AbstractFuture$Waiter;>;Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater<Lcom/google/common/util/concurrent/AbstractFuture;Lcom/google/common/util/concurrent/AbstractFuture$Listener;>;Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater<Lcom/google/common/util/concurrent/AbstractFuture;Ljava/lang/Object;>;)V", "putThread", "LComGoogleCommonUtilConcurrentAbstractFuture_Waiter;LJavaLangThread;", "putNext", "LComGoogleCommonUtilConcurrentAbstractFuture_Waiter;LComGoogleCommonUtilConcurrentAbstractFuture_Waiter;", "casWaiters", "LComGoogleCommonUtilConcurrentAbstractFuture;LComGoogleCommonUtilConcurrentAbstractFuture_Waiter;LComGoogleCommonUtilConcurrentAbstractFuture_Waiter;", "(Lcom/google/common/util/concurrent/AbstractFuture<*>;Lcom/google/common/util/concurrent/AbstractFuture$Waiter;Lcom/google/common/util/concurrent/AbstractFuture$Waiter;)Z", "casListeners", "LComGoogleCommonUtilConcurrentAbstractFuture;LComGoogleCommonUtilConcurrentAbstractFuture_Listener;LComGoogleCommonUtilConcurrentAbstractFuture_Listener;", "(Lcom/google/common/util/concurrent/AbstractFuture<*>;Lcom/google/common/util/concurrent/AbstractFuture$Listener;Lcom/google/common/util/concurrent/AbstractFuture$Listener;)Z", "casValue", "LComGoogleCommonUtilConcurrentAbstractFuture;LNSObject;LNSObject;", "(Lcom/google/common/util/concurrent/AbstractFuture<*>;Ljava/lang/Object;Ljava/lang/Object;)Z", "Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater<Lcom/google/common/util/concurrent/AbstractFuture$Waiter;Ljava/lang/Thread;>;", "Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater<Lcom/google/common/util/concurrent/AbstractFuture$Waiter;Lcom/google/common/util/concurrent/AbstractFuture$Waiter;>;", "Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater<Lcom/google/common/util/concurrent/AbstractFuture;Lcom/google/common/util/concurrent/AbstractFuture$Waiter;>;", "Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater<Lcom/google/common/util/concurrent/AbstractFuture;Lcom/google/common/util/concurrent/AbstractFuture$Listener;>;", "Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater<Lcom/google/common/util/concurrent/AbstractFuture;Ljava/lang/Object;>;", "LComGoogleCommonUtilConcurrentAbstractFuture;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractFuture_SafeAtomicHelper = { "SafeAtomicHelper", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x1a, 6, 5, 20, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractFuture_SafeAtomicHelper;
}

@end

void ComGoogleCommonUtilConcurrentAbstractFuture_SafeAtomicHelper_initWithJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_(ComGoogleCommonUtilConcurrentAbstractFuture_SafeAtomicHelper *self, JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *waiterThreadUpdater, JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *waiterNextUpdater, JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *waitersUpdater, JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *listenersUpdater, JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *valueUpdater) {
  ComGoogleCommonUtilConcurrentAbstractFuture_AtomicHelper_init(self);
  self->waiterThreadUpdater_ = waiterThreadUpdater;
  self->waiterNextUpdater_ = waiterNextUpdater;
  self->waitersUpdater_ = waitersUpdater;
  self->listenersUpdater_ = listenersUpdater;
  self->valueUpdater_ = valueUpdater;
}

ComGoogleCommonUtilConcurrentAbstractFuture_SafeAtomicHelper *new_ComGoogleCommonUtilConcurrentAbstractFuture_SafeAtomicHelper_initWithJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_(JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *waiterThreadUpdater, JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *waiterNextUpdater, JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *waitersUpdater, JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *listenersUpdater, JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *valueUpdater) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractFuture_SafeAtomicHelper, initWithJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_, waiterThreadUpdater, waiterNextUpdater, waitersUpdater, listenersUpdater, valueUpdater)
}

ComGoogleCommonUtilConcurrentAbstractFuture_SafeAtomicHelper *create_ComGoogleCommonUtilConcurrentAbstractFuture_SafeAtomicHelper_initWithJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_(JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *waiterThreadUpdater, JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *waiterNextUpdater, JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *waitersUpdater, JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *listenersUpdater, JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *valueUpdater) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractFuture_SafeAtomicHelper, initWithJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_, waiterThreadUpdater, waiterNextUpdater, waitersUpdater, listenersUpdater, valueUpdater)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentAbstractFuture_SafeAtomicHelper)

@implementation ComGoogleCommonUtilConcurrentAbstractFuture_SynchronizedHelper

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentAbstractFuture_SynchronizedHelper_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)putThreadWithComGoogleCommonUtilConcurrentAbstractFuture_Waiter:(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)waiter
                                                     withJavaLangThread:(JavaLangThread *)newValue {
  (void) JreVolatileStrongAssign(&((ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *) nil_chk(waiter))->thread_, newValue);
}

- (void)putNextWithComGoogleCommonUtilConcurrentAbstractFuture_Waiter:(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)waiter
               withComGoogleCommonUtilConcurrentAbstractFuture_Waiter:(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)newValue {
  (void) JreVolatileStrongAssign(&((ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *) nil_chk(waiter))->next_, newValue);
}

- (jboolean)casWaitersWithComGoogleCommonUtilConcurrentAbstractFuture:(ComGoogleCommonUtilConcurrentAbstractFuture *)future
               withComGoogleCommonUtilConcurrentAbstractFuture_Waiter:(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)expect
               withComGoogleCommonUtilConcurrentAbstractFuture_Waiter:(ComGoogleCommonUtilConcurrentAbstractFuture_Waiter *)update {
  @synchronized(future) {
    if (JreLoadVolatileId(&((ComGoogleCommonUtilConcurrentAbstractFuture *) nil_chk(future))->waiters_) == expect) {
      (void) JreVolatileStrongAssign(&future->waiters_, update);
      return true;
    }
    return false;
  }
}

- (jboolean)casListenersWithComGoogleCommonUtilConcurrentAbstractFuture:(ComGoogleCommonUtilConcurrentAbstractFuture *)future
               withComGoogleCommonUtilConcurrentAbstractFuture_Listener:(ComGoogleCommonUtilConcurrentAbstractFuture_Listener *)expect
               withComGoogleCommonUtilConcurrentAbstractFuture_Listener:(ComGoogleCommonUtilConcurrentAbstractFuture_Listener *)update {
  @synchronized(future) {
    if (JreLoadVolatileId(&((ComGoogleCommonUtilConcurrentAbstractFuture *) nil_chk(future))->listeners_) == expect) {
      (void) JreVolatileStrongAssign(&future->listeners_, update);
      return true;
    }
    return false;
  }
}

- (jboolean)casValueWithComGoogleCommonUtilConcurrentAbstractFuture:(ComGoogleCommonUtilConcurrentAbstractFuture *)future
                                                             withId:(id)expect
                                                             withId:(id)update {
  @synchronized(future) {
    if (JreLoadVolatileId(&((ComGoogleCommonUtilConcurrentAbstractFuture *) nil_chk(future))->value_) == expect) {
      (void) JreVolatileStrongAssign(&future->value_, update);
      return true;
    }
    return false;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 4, 5, -1, 6, -1, -1 },
    { NULL, "Z", 0x0, 7, 8, -1, 9, -1, -1 },
    { NULL, "Z", 0x0, 10, 11, -1, 12, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(putThreadWithComGoogleCommonUtilConcurrentAbstractFuture_Waiter:withJavaLangThread:);
  methods[2].selector = @selector(putNextWithComGoogleCommonUtilConcurrentAbstractFuture_Waiter:withComGoogleCommonUtilConcurrentAbstractFuture_Waiter:);
  methods[3].selector = @selector(casWaitersWithComGoogleCommonUtilConcurrentAbstractFuture:withComGoogleCommonUtilConcurrentAbstractFuture_Waiter:withComGoogleCommonUtilConcurrentAbstractFuture_Waiter:);
  methods[4].selector = @selector(casListenersWithComGoogleCommonUtilConcurrentAbstractFuture:withComGoogleCommonUtilConcurrentAbstractFuture_Listener:withComGoogleCommonUtilConcurrentAbstractFuture_Listener:);
  methods[5].selector = @selector(casValueWithComGoogleCommonUtilConcurrentAbstractFuture:withId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "putThread", "LComGoogleCommonUtilConcurrentAbstractFuture_Waiter;LJavaLangThread;", "putNext", "LComGoogleCommonUtilConcurrentAbstractFuture_Waiter;LComGoogleCommonUtilConcurrentAbstractFuture_Waiter;", "casWaiters", "LComGoogleCommonUtilConcurrentAbstractFuture;LComGoogleCommonUtilConcurrentAbstractFuture_Waiter;LComGoogleCommonUtilConcurrentAbstractFuture_Waiter;", "(Lcom/google/common/util/concurrent/AbstractFuture<*>;Lcom/google/common/util/concurrent/AbstractFuture$Waiter;Lcom/google/common/util/concurrent/AbstractFuture$Waiter;)Z", "casListeners", "LComGoogleCommonUtilConcurrentAbstractFuture;LComGoogleCommonUtilConcurrentAbstractFuture_Listener;LComGoogleCommonUtilConcurrentAbstractFuture_Listener;", "(Lcom/google/common/util/concurrent/AbstractFuture<*>;Lcom/google/common/util/concurrent/AbstractFuture$Listener;Lcom/google/common/util/concurrent/AbstractFuture$Listener;)Z", "casValue", "LComGoogleCommonUtilConcurrentAbstractFuture;LNSObject;LNSObject;", "(Lcom/google/common/util/concurrent/AbstractFuture<*>;Ljava/lang/Object;Ljava/lang/Object;)Z", "LComGoogleCommonUtilConcurrentAbstractFuture;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractFuture_SynchronizedHelper = { "SynchronizedHelper", "com.google.common.util.concurrent", ptrTable, methods, NULL, 7, 0x1a, 6, 0, 13, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractFuture_SynchronizedHelper;
}

@end

void ComGoogleCommonUtilConcurrentAbstractFuture_SynchronizedHelper_init(ComGoogleCommonUtilConcurrentAbstractFuture_SynchronizedHelper *self) {
  ComGoogleCommonUtilConcurrentAbstractFuture_AtomicHelper_init(self);
}

ComGoogleCommonUtilConcurrentAbstractFuture_SynchronizedHelper *new_ComGoogleCommonUtilConcurrentAbstractFuture_SynchronizedHelper_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractFuture_SynchronizedHelper, init)
}

ComGoogleCommonUtilConcurrentAbstractFuture_SynchronizedHelper *create_ComGoogleCommonUtilConcurrentAbstractFuture_SynchronizedHelper_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractFuture_SynchronizedHelper, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentAbstractFuture_SynchronizedHelper)
