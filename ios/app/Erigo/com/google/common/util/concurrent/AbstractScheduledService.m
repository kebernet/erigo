//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/util/concurrent/AbstractScheduledService.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/base/Supplier.h"
#include "com/google/common/util/concurrent/AbstractScheduledService.h"
#include "com/google/common/util/concurrent/AbstractService.h"
#include "com/google/common/util/concurrent/ForwardingFuture.h"
#include "com/google/common/util/concurrent/MoreExecutors.h"
#include "com/google/common/util/concurrent/Service.h"
#include "java/lang/Exception.h"
#include "java/lang/Runnable.h"
#include "java/lang/Thread.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/Void.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/Executor.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/ScheduledExecutorService.h"
#include "java/util/concurrent/ScheduledFuture.h"
#include "java/util/concurrent/ThreadFactory.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/locks/ReentrantLock.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ComGoogleCommonUtilConcurrentAbstractScheduledService () {
 @public
  ComGoogleCommonUtilConcurrentAbstractService *delegate_;
}

@end

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractScheduledService, delegate_, ComGoogleCommonUtilConcurrentAbstractService *)

inline JavaUtilLoggingLogger *ComGoogleCommonUtilConcurrentAbstractScheduledService_get_logger();
static JavaUtilLoggingLogger *ComGoogleCommonUtilConcurrentAbstractScheduledService_logger;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonUtilConcurrentAbstractScheduledService, logger, JavaUtilLoggingLogger *)

__attribute__((unused)) static ComGoogleCommonUtilConcurrentService_State *ComGoogleCommonUtilConcurrentAbstractScheduledService_state(ComGoogleCommonUtilConcurrentAbstractScheduledService *self);

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractScheduledService_addListenerWithComGoogleCommonUtilConcurrentService_Listener_withJavaUtilConcurrentExecutor_(ComGoogleCommonUtilConcurrentAbstractScheduledService *self, ComGoogleCommonUtilConcurrentService_Listener *listener, id<JavaUtilConcurrentExecutor> executor);

@interface ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler ()

- (instancetype)init;

@end

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_init(ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler *self);

@interface ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_1 : ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler {
 @public
  jlong val$initialDelay_;
  jlong val$delay_;
  JavaUtilConcurrentTimeUnit *val$unit_;
}

- (instancetype)initWithLong:(jlong)capture$0
                    withLong:(jlong)capture$1
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)capture$2;

- (id<JavaUtilConcurrentFuture>)scheduleWithComGoogleCommonUtilConcurrentAbstractService:(ComGoogleCommonUtilConcurrentAbstractService *)service
                                          withJavaUtilConcurrentScheduledExecutorService:(id<JavaUtilConcurrentScheduledExecutorService>)executor
                                                                    withJavaLangRunnable:(id<JavaLangRunnable>)task;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_1)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_1_initWithLong_withLong_withJavaUtilConcurrentTimeUnit_(ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_1 *self, jlong capture$0, jlong capture$1, JavaUtilConcurrentTimeUnit *capture$2);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_1 *new_ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_1_initWithLong_withLong_withJavaUtilConcurrentTimeUnit_(jlong capture$0, jlong capture$1, JavaUtilConcurrentTimeUnit *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_1 *create_ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_1_initWithLong_withLong_withJavaUtilConcurrentTimeUnit_(jlong capture$0, jlong capture$1, JavaUtilConcurrentTimeUnit *capture$2);

@interface ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_2 : ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler {
 @public
  jlong val$initialDelay_;
  jlong val$period_;
  JavaUtilConcurrentTimeUnit *val$unit_;
}

- (instancetype)initWithLong:(jlong)capture$0
                    withLong:(jlong)capture$1
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)capture$2;

- (id<JavaUtilConcurrentFuture>)scheduleWithComGoogleCommonUtilConcurrentAbstractService:(ComGoogleCommonUtilConcurrentAbstractService *)service
                                          withJavaUtilConcurrentScheduledExecutorService:(id<JavaUtilConcurrentScheduledExecutorService>)executor
                                                                    withJavaLangRunnable:(id<JavaLangRunnable>)task;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_2)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_2_initWithLong_withLong_withJavaUtilConcurrentTimeUnit_(ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_2 *self, jlong capture$0, jlong capture$1, JavaUtilConcurrentTimeUnit *capture$2);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_2 *new_ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_2_initWithLong_withLong_withJavaUtilConcurrentTimeUnit_(jlong capture$0, jlong capture$1, JavaUtilConcurrentTimeUnit *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_2 *create_ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_2_initWithLong_withLong_withJavaUtilConcurrentTimeUnit_(jlong capture$0, jlong capture$1, JavaUtilConcurrentTimeUnit *capture$2);

@interface ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate : ComGoogleCommonUtilConcurrentAbstractService {
 @public
  __unsafe_unretained ComGoogleCommonUtilConcurrentAbstractScheduledService *this$0_;
  volatile_id runningTask_;
  volatile_id executorService_;
  JavaUtilConcurrentLocksReentrantLock *lock_;
  id<JavaLangRunnable> task_;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentAbstractScheduledService:(ComGoogleCommonUtilConcurrentAbstractScheduledService *)outer$;

- (void)doStart;

- (void)doStop;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate)

J2OBJC_VOLATILE_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate, runningTask_, id<JavaUtilConcurrentFuture>)
J2OBJC_VOLATILE_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate, executorService_, id<JavaUtilConcurrentScheduledExecutorService>)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate, lock_, JavaUtilConcurrentLocksReentrantLock *)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate, task_, id<JavaLangRunnable>)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate *self, ComGoogleCommonUtilConcurrentAbstractScheduledService *outer$);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate *new_ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_(ComGoogleCommonUtilConcurrentAbstractScheduledService *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate *create_ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_(ComGoogleCommonUtilConcurrentAbstractScheduledService *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate)

@interface ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_Task : NSObject < JavaLangRunnable > {
 @public
  __unsafe_unretained ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate *this$0_;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate:(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate *)outer$;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_Task)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_Task_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_Task *self, ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate *outer$);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_Task *new_ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_Task_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_Task *create_ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_Task_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_Task)

@interface ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_1 : NSObject < ComGoogleCommonBaseSupplier > {
 @public
  ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate *this$0_;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate:(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate *)outer$;

- (NSString *)get;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_1)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_1_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_1 *self, ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate *outer$);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_1 *new_ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_1_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_1 *create_ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_1_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate *outer$);

@interface ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_2 : NSObject < JavaLangRunnable > {
 @public
  ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate *this$0_;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate:(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate *)outer$;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_2)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_2_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_2 *self, ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate *outer$);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_2 *new_ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_2_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_2 *create_ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_2_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate *outer$);

@interface ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_3 : NSObject < JavaLangRunnable > {
 @public
  ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate *this$0_;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate:(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate *)outer$;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_3)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_3_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_3 *self, ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate *outer$);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_3 *new_ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_3_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_3 *create_ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_3_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate *outer$);

@interface ComGoogleCommonUtilConcurrentAbstractScheduledService_1ThreadFactoryImpl : NSObject < JavaUtilConcurrentThreadFactory > {
 @public
  __unsafe_unretained ComGoogleCommonUtilConcurrentAbstractScheduledService *this$0_;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentAbstractScheduledService:(ComGoogleCommonUtilConcurrentAbstractScheduledService *)outer$;

- (JavaLangThread *)newThreadWithJavaLangRunnable:(id<JavaLangRunnable>)runnable OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractScheduledService_1ThreadFactoryImpl)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractScheduledService_1ThreadFactoryImpl_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_(ComGoogleCommonUtilConcurrentAbstractScheduledService_1ThreadFactoryImpl *self, ComGoogleCommonUtilConcurrentAbstractScheduledService *outer$);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractScheduledService_1ThreadFactoryImpl *new_ComGoogleCommonUtilConcurrentAbstractScheduledService_1ThreadFactoryImpl_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_(ComGoogleCommonUtilConcurrentAbstractScheduledService *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractScheduledService_1ThreadFactoryImpl *create_ComGoogleCommonUtilConcurrentAbstractScheduledService_1ThreadFactoryImpl_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_(ComGoogleCommonUtilConcurrentAbstractScheduledService *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentAbstractScheduledService_1ThreadFactoryImpl)

@interface ComGoogleCommonUtilConcurrentAbstractScheduledService_1 : ComGoogleCommonUtilConcurrentService_Listener {
 @public
  id<JavaUtilConcurrentScheduledExecutorService> val$executor_;
}

- (instancetype)initWithJavaUtilConcurrentScheduledExecutorService:(id<JavaUtilConcurrentScheduledExecutorService>)capture$0;

- (void)terminatedWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)from;

- (void)failedWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)from
                                             withNSException:(NSException *)failure;
#define withJavaLangThrowable withNSException

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractScheduledService_1)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractScheduledService_1_initWithJavaUtilConcurrentScheduledExecutorService_(ComGoogleCommonUtilConcurrentAbstractScheduledService_1 *self, id<JavaUtilConcurrentScheduledExecutorService> capture$0);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractScheduledService_1 *new_ComGoogleCommonUtilConcurrentAbstractScheduledService_1_initWithJavaUtilConcurrentScheduledExecutorService_(id<JavaUtilConcurrentScheduledExecutorService> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractScheduledService_1 *create_ComGoogleCommonUtilConcurrentAbstractScheduledService_1_initWithJavaUtilConcurrentScheduledExecutorService_(id<JavaUtilConcurrentScheduledExecutorService> capture$0);

@interface ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_ReschedulableCallable : ComGoogleCommonUtilConcurrentForwardingFuture < JavaUtilConcurrentCallable > {
 @public
  ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler *this$0_;
  id<JavaLangRunnable> wrappedRunnable_;
  id<JavaUtilConcurrentScheduledExecutorService> executor_;
  ComGoogleCommonUtilConcurrentAbstractService *service_;
  JavaUtilConcurrentLocksReentrantLock *lock_;
  id<JavaUtilConcurrentFuture> currentFuture_;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler:(ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler *)outer$
                                             withComGoogleCommonUtilConcurrentAbstractService:(ComGoogleCommonUtilConcurrentAbstractService *)service
                                               withJavaUtilConcurrentScheduledExecutorService:(id<JavaUtilConcurrentScheduledExecutorService>)executor
                                                                         withJavaLangRunnable:(id<JavaLangRunnable>)runnable;

- (JavaLangVoid *)call;

- (void)reschedule;

- (jboolean)cancelWithBoolean:(jboolean)mayInterruptIfRunning;

- (jboolean)isCancelled;

- (id<JavaUtilConcurrentFuture>)delegate;

- (JavaLangVoid *)get;

- (JavaLangVoid *)getWithLong:(jlong)arg0
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)arg1;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_ReschedulableCallable)

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_ReschedulableCallable, wrappedRunnable_, id<JavaLangRunnable>)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_ReschedulableCallable, executor_, id<JavaUtilConcurrentScheduledExecutorService>)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_ReschedulableCallable, service_, ComGoogleCommonUtilConcurrentAbstractService *)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_ReschedulableCallable, lock_, JavaUtilConcurrentLocksReentrantLock *)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_ReschedulableCallable, currentFuture_, id<JavaUtilConcurrentFuture>)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_ReschedulableCallable_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_withComGoogleCommonUtilConcurrentAbstractService_withJavaUtilConcurrentScheduledExecutorService_withJavaLangRunnable_(ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_ReschedulableCallable *self, ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler *outer$, ComGoogleCommonUtilConcurrentAbstractService *service, id<JavaUtilConcurrentScheduledExecutorService> executor, id<JavaLangRunnable> runnable);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_ReschedulableCallable *new_ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_ReschedulableCallable_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_withComGoogleCommonUtilConcurrentAbstractService_withJavaUtilConcurrentScheduledExecutorService_withJavaLangRunnable_(ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler *outer$, ComGoogleCommonUtilConcurrentAbstractService *service, id<JavaUtilConcurrentScheduledExecutorService> executor, id<JavaLangRunnable> runnable) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_ReschedulableCallable *create_ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_ReschedulableCallable_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_withComGoogleCommonUtilConcurrentAbstractService_withJavaUtilConcurrentScheduledExecutorService_withJavaLangRunnable_(ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler *outer$, ComGoogleCommonUtilConcurrentAbstractService *service, id<JavaUtilConcurrentScheduledExecutorService> executor, id<JavaLangRunnable> runnable);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_ReschedulableCallable)

@interface ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_Schedule () {
 @public
  jlong delay_;
  JavaUtilConcurrentTimeUnit *unit_;
}

@end

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_Schedule, unit_, JavaUtilConcurrentTimeUnit *)

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonUtilConcurrentAbstractScheduledService)

@implementation ComGoogleCommonUtilConcurrentAbstractScheduledService

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentAbstractScheduledService_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)runOneIteration {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)startUp {
}

- (void)shutDown {
}

- (ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler *)scheduler {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<JavaUtilConcurrentScheduledExecutorService>)executor {
  id<JavaUtilConcurrentScheduledExecutorService> executor = JavaUtilConcurrentExecutors_newSingleThreadScheduledExecutorWithJavaUtilConcurrentThreadFactory_(new_ComGoogleCommonUtilConcurrentAbstractScheduledService_1ThreadFactoryImpl_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_(self));
  ComGoogleCommonUtilConcurrentAbstractScheduledService_addListenerWithComGoogleCommonUtilConcurrentService_Listener_withJavaUtilConcurrentExecutor_(self, new_ComGoogleCommonUtilConcurrentAbstractScheduledService_1_initWithJavaUtilConcurrentScheduledExecutorService_(executor), ComGoogleCommonUtilConcurrentMoreExecutors_directExecutor());
  return executor;
}

- (NSString *)serviceName {
  return [[self java_getClass] getSimpleName];
}

- (NSString *)description {
  return JreStrcat("$$@C", [self serviceName], @" [", ComGoogleCommonUtilConcurrentAbstractScheduledService_state(self), ']');
}

- (jboolean)isRunning {
  return [((ComGoogleCommonUtilConcurrentAbstractService *) nil_chk(delegate_)) isRunning];
}

- (ComGoogleCommonUtilConcurrentService_State *)state {
  return ComGoogleCommonUtilConcurrentAbstractScheduledService_state(self);
}

- (void)addListenerWithComGoogleCommonUtilConcurrentService_Listener:(ComGoogleCommonUtilConcurrentService_Listener *)listener
                                      withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor {
  ComGoogleCommonUtilConcurrentAbstractScheduledService_addListenerWithComGoogleCommonUtilConcurrentService_Listener_withJavaUtilConcurrentExecutor_(self, listener, executor);
}

- (NSException *)failureCause {
  return [((ComGoogleCommonUtilConcurrentAbstractService *) nil_chk(delegate_)) failureCause];
}

- (id<ComGoogleCommonUtilConcurrentService>)startAsync {
  (void) [((ComGoogleCommonUtilConcurrentAbstractService *) nil_chk(delegate_)) startAsync];
  return self;
}

- (id<ComGoogleCommonUtilConcurrentService>)stopAsync {
  (void) [((ComGoogleCommonUtilConcurrentAbstractService *) nil_chk(delegate_)) stopAsync];
  return self;
}

- (void)awaitRunning {
  [((ComGoogleCommonUtilConcurrentAbstractService *) nil_chk(delegate_)) awaitRunning];
}

- (void)awaitRunningWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  [((ComGoogleCommonUtilConcurrentAbstractService *) nil_chk(delegate_)) awaitRunningWithLong:timeout withJavaUtilConcurrentTimeUnit:unit];
}

- (void)awaitTerminated {
  [((ComGoogleCommonUtilConcurrentAbstractService *) nil_chk(delegate_)) awaitTerminated];
}

- (void)awaitTerminatedWithLong:(jlong)timeout
 withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  [((ComGoogleCommonUtilConcurrentAbstractService *) nil_chk(delegate_)) awaitTerminatedWithLong:timeout withJavaUtilConcurrentTimeUnit:unit];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x404, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 0, -1, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler;", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentScheduledExecutorService;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentService_State;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSException;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentService;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentService;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 4, 5, 6, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 7, 5, 6, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(runOneIteration);
  methods[2].selector = @selector(startUp);
  methods[3].selector = @selector(shutDown);
  methods[4].selector = @selector(scheduler);
  methods[5].selector = @selector(executor);
  methods[6].selector = @selector(serviceName);
  methods[7].selector = @selector(description);
  methods[8].selector = @selector(isRunning);
  methods[9].selector = @selector(state);
  methods[10].selector = @selector(addListenerWithComGoogleCommonUtilConcurrentService_Listener:withJavaUtilConcurrentExecutor:);
  methods[11].selector = @selector(failureCause);
  methods[12].selector = @selector(startAsync);
  methods[13].selector = @selector(stopAsync);
  methods[14].selector = @selector(awaitRunning);
  methods[15].selector = @selector(awaitRunningWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[16].selector = @selector(awaitTerminated);
  methods[17].selector = @selector(awaitTerminatedWithLong:withJavaUtilConcurrentTimeUnit:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
    { "delegate_", "LComGoogleCommonUtilConcurrentAbstractService;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", "toString", "addListener", "LComGoogleCommonUtilConcurrentService_Listener;LJavaUtilConcurrentExecutor;", "awaitRunning", "JLJavaUtilConcurrentTimeUnit;", "LJavaUtilConcurrentTimeoutException;", "awaitTerminated", &ComGoogleCommonUtilConcurrentAbstractScheduledService_logger, "LComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler;LComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate;LComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractScheduledService = { "AbstractScheduledService", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x401, 18, 2, -1, 9, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractScheduledService;
}

+ (void)initialize {
  if (self == [ComGoogleCommonUtilConcurrentAbstractScheduledService class]) {
    ComGoogleCommonUtilConcurrentAbstractScheduledService_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([ComGoogleCommonUtilConcurrentAbstractScheduledService_class_() getName]);
    J2OBJC_SET_INITIALIZED(ComGoogleCommonUtilConcurrentAbstractScheduledService)
  }
}

@end

void ComGoogleCommonUtilConcurrentAbstractScheduledService_init(ComGoogleCommonUtilConcurrentAbstractScheduledService *self) {
  NSObject_init(self);
  self->delegate_ = new_ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_(self);
}

ComGoogleCommonUtilConcurrentService_State *ComGoogleCommonUtilConcurrentAbstractScheduledService_state(ComGoogleCommonUtilConcurrentAbstractScheduledService *self) {
  return [((ComGoogleCommonUtilConcurrentAbstractService *) nil_chk(self->delegate_)) state];
}

void ComGoogleCommonUtilConcurrentAbstractScheduledService_addListenerWithComGoogleCommonUtilConcurrentService_Listener_withJavaUtilConcurrentExecutor_(ComGoogleCommonUtilConcurrentAbstractScheduledService *self, ComGoogleCommonUtilConcurrentService_Listener *listener, id<JavaUtilConcurrentExecutor> executor) {
  [((ComGoogleCommonUtilConcurrentAbstractService *) nil_chk(self->delegate_)) addListenerWithComGoogleCommonUtilConcurrentService_Listener:listener withJavaUtilConcurrentExecutor:executor];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentAbstractScheduledService)

@implementation ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler

+ (ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler *)newFixedDelayScheduleWithLong:(jlong)initialDelay
                                                                                          withLong:(jlong)delay
                                                                    withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_newFixedDelayScheduleWithLong_withLong_withJavaUtilConcurrentTimeUnit_(initialDelay, delay, unit);
}

+ (ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler *)newFixedRateScheduleWithLong:(jlong)initialDelay
                                                                                         withLong:(jlong)period
                                                                   withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_newFixedRateScheduleWithLong_withLong_withJavaUtilConcurrentTimeUnit_(initialDelay, period, unit);
}

- (id<JavaUtilConcurrentFuture>)scheduleWithComGoogleCommonUtilConcurrentAbstractService:(ComGoogleCommonUtilConcurrentAbstractService *)service
                                          withJavaUtilConcurrentScheduledExecutorService:(id<JavaUtilConcurrentScheduledExecutorService>)executor
                                                                    withJavaLangRunnable:(id<JavaLangRunnable>)runnable {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler;", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentFuture;", 0x400, 3, 4, -1, 5, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(newFixedDelayScheduleWithLong:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[1].selector = @selector(newFixedRateScheduleWithLong:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[2].selector = @selector(scheduleWithComGoogleCommonUtilConcurrentAbstractService:withJavaUtilConcurrentScheduledExecutorService:withJavaLangRunnable:);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "newFixedDelaySchedule", "JJLJavaUtilConcurrentTimeUnit;", "newFixedRateSchedule", "schedule", "LComGoogleCommonUtilConcurrentAbstractService;LJavaUtilConcurrentScheduledExecutorService;LJavaLangRunnable;", "(Lcom/google/common/util/concurrent/AbstractService;Ljava/util/concurrent/ScheduledExecutorService;Ljava/lang/Runnable;)Ljava/util/concurrent/Future<*>;", "LComGoogleCommonUtilConcurrentAbstractScheduledService;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler = { "Scheduler", "com.google.common.util.concurrent", ptrTable, methods, NULL, 7, 0x409, 4, 0, 6, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler;
}

@end

ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler *ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_newFixedDelayScheduleWithLong_withLong_withJavaUtilConcurrentTimeUnit_(jlong initialDelay, jlong delay, JavaUtilConcurrentTimeUnit *unit) {
  ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_initialize();
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(unit);
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withLong_(delay > 0, @"delay must be > 0, found %s", delay);
  return new_ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_1_initWithLong_withLong_withJavaUtilConcurrentTimeUnit_(initialDelay, delay, unit);
}

ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler *ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_newFixedRateScheduleWithLong_withLong_withJavaUtilConcurrentTimeUnit_(jlong initialDelay, jlong period, JavaUtilConcurrentTimeUnit *unit) {
  ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_initialize();
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(unit);
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withLong_(period > 0, @"period must be > 0, found %s", period);
  return new_ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_2_initWithLong_withLong_withJavaUtilConcurrentTimeUnit_(initialDelay, period, unit);
}

void ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_init(ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler)

@implementation ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_1

- (instancetype)initWithLong:(jlong)capture$0
                    withLong:(jlong)capture$1
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)capture$2 {
  ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_1_initWithLong_withLong_withJavaUtilConcurrentTimeUnit_(self, capture$0, capture$1, capture$2);
  return self;
}

- (id<JavaUtilConcurrentFuture>)scheduleWithComGoogleCommonUtilConcurrentAbstractService:(ComGoogleCommonUtilConcurrentAbstractService *)service
                                          withJavaUtilConcurrentScheduledExecutorService:(id<JavaUtilConcurrentScheduledExecutorService>)executor
                                                                    withJavaLangRunnable:(id<JavaLangRunnable>)task {
  return [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(executor)) scheduleWithFixedDelayWithJavaLangRunnable:task withLong:val$initialDelay_ withLong:val$delay_ withJavaUtilConcurrentTimeUnit:val$unit_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentFuture;", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithLong:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[1].selector = @selector(scheduleWithComGoogleCommonUtilConcurrentAbstractService:withJavaUtilConcurrentScheduledExecutorService:withJavaLangRunnable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$initialDelay_", "J", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$delay_", "J", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "schedule", "LComGoogleCommonUtilConcurrentAbstractService;LJavaUtilConcurrentScheduledExecutorService;LJavaLangRunnable;", "(Lcom/google/common/util/concurrent/AbstractService;Ljava/util/concurrent/ScheduledExecutorService;Ljava/lang/Runnable;)Ljava/util/concurrent/Future<*>;", "LComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler;", "newFixedDelayScheduleWithLong:withLong:withJavaUtilConcurrentTimeUnit:" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_1 = { "", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x8018, 2, 3, 3, -1, 4, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_1;
}

@end

void ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_1_initWithLong_withLong_withJavaUtilConcurrentTimeUnit_(ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_1 *self, jlong capture$0, jlong capture$1, JavaUtilConcurrentTimeUnit *capture$2) {
  self->val$initialDelay_ = capture$0;
  self->val$delay_ = capture$1;
  self->val$unit_ = capture$2;
  ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_init(self);
}

ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_1 *new_ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_1_initWithLong_withLong_withJavaUtilConcurrentTimeUnit_(jlong capture$0, jlong capture$1, JavaUtilConcurrentTimeUnit *capture$2) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_1, initWithLong_withLong_withJavaUtilConcurrentTimeUnit_, capture$0, capture$1, capture$2)
}

ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_1 *create_ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_1_initWithLong_withLong_withJavaUtilConcurrentTimeUnit_(jlong capture$0, jlong capture$1, JavaUtilConcurrentTimeUnit *capture$2) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_1, initWithLong_withLong_withJavaUtilConcurrentTimeUnit_, capture$0, capture$1, capture$2)
}

@implementation ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_2

- (instancetype)initWithLong:(jlong)capture$0
                    withLong:(jlong)capture$1
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)capture$2 {
  ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_2_initWithLong_withLong_withJavaUtilConcurrentTimeUnit_(self, capture$0, capture$1, capture$2);
  return self;
}

- (id<JavaUtilConcurrentFuture>)scheduleWithComGoogleCommonUtilConcurrentAbstractService:(ComGoogleCommonUtilConcurrentAbstractService *)service
                                          withJavaUtilConcurrentScheduledExecutorService:(id<JavaUtilConcurrentScheduledExecutorService>)executor
                                                                    withJavaLangRunnable:(id<JavaLangRunnable>)task {
  return [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(executor)) scheduleAtFixedRateWithJavaLangRunnable:task withLong:val$initialDelay_ withLong:val$period_ withJavaUtilConcurrentTimeUnit:val$unit_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentFuture;", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithLong:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[1].selector = @selector(scheduleWithComGoogleCommonUtilConcurrentAbstractService:withJavaUtilConcurrentScheduledExecutorService:withJavaLangRunnable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$initialDelay_", "J", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$period_", "J", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "schedule", "LComGoogleCommonUtilConcurrentAbstractService;LJavaUtilConcurrentScheduledExecutorService;LJavaLangRunnable;", "(Lcom/google/common/util/concurrent/AbstractService;Ljava/util/concurrent/ScheduledExecutorService;Ljava/lang/Runnable;)Ljava/util/concurrent/Future<*>;", "LComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler;", "newFixedRateScheduleWithLong:withLong:withJavaUtilConcurrentTimeUnit:" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_2 = { "", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x8018, 2, 3, 3, -1, 4, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_2;
}

@end

void ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_2_initWithLong_withLong_withJavaUtilConcurrentTimeUnit_(ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_2 *self, jlong capture$0, jlong capture$1, JavaUtilConcurrentTimeUnit *capture$2) {
  self->val$initialDelay_ = capture$0;
  self->val$period_ = capture$1;
  self->val$unit_ = capture$2;
  ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_init(self);
}

ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_2 *new_ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_2_initWithLong_withLong_withJavaUtilConcurrentTimeUnit_(jlong capture$0, jlong capture$1, JavaUtilConcurrentTimeUnit *capture$2) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_2, initWithLong_withLong_withJavaUtilConcurrentTimeUnit_, capture$0, capture$1, capture$2)
}

ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_2 *create_ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_2_initWithLong_withLong_withJavaUtilConcurrentTimeUnit_(jlong capture$0, jlong capture$1, JavaUtilConcurrentTimeUnit *capture$2) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_2, initWithLong_withLong_withJavaUtilConcurrentTimeUnit_, capture$0, capture$1, capture$2)
}

@implementation ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate

- (instancetype)initWithComGoogleCommonUtilConcurrentAbstractScheduledService:(ComGoogleCommonUtilConcurrentAbstractScheduledService *)outer$ {
  ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_(self, outer$);
  return self;
}

- (void)doStart {
  (void) JreVolatileStrongAssign(&executorService_, ComGoogleCommonUtilConcurrentMoreExecutors_renamingDecoratorWithJavaUtilConcurrentScheduledExecutorService_withComGoogleCommonBaseSupplier_([this$0_ executor], new_ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_1_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_(self)));
  [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(JreLoadVolatileId(&executorService_))) executeWithJavaLangRunnable:new_ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_2_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_(self)];
}

- (void)doStop {
  [((id<JavaUtilConcurrentFuture>) nil_chk(JreLoadVolatileId(&runningTask_))) cancelWithBoolean:false];
  [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(JreLoadVolatileId(&executorService_))) executeWithJavaLangRunnable:new_ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_3_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_(self)];
}

- (NSString *)description {
  return [this$0_ description];
}

- (void)__javaClone:(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
  JreCloneVolatileStrong(&runningTask_, &original->runningTask_);
  JreCloneVolatileStrong(&executorService_, &original->executorService_);
}

- (void)dealloc {
  JreReleaseVolatile(&runningTask_);
  JreReleaseVolatile(&executorService_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x14, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x14, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentAbstractScheduledService:);
  methods[1].selector = @selector(doStart);
  methods[2].selector = @selector(doStop);
  methods[3].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonUtilConcurrentAbstractScheduledService;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "runningTask_", "LJavaUtilConcurrentFuture;", .constantValue.asLong = 0, 0x42, -1, -1, 1, -1 },
    { "executorService_", "LJavaUtilConcurrentScheduledExecutorService;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "lock_", "LJavaUtilConcurrentLocksReentrantLock;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "task_", "LJavaLangRunnable;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "toString", "Ljava/util/concurrent/Future<*>;", "LComGoogleCommonUtilConcurrentAbstractScheduledService;", "LComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_Task;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate = { "ServiceDelegate", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x12, 4, 5, 2, 3, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate;
}

@end

void ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate *self, ComGoogleCommonUtilConcurrentAbstractScheduledService *outer$) {
  self->this$0_ = outer$;
  ComGoogleCommonUtilConcurrentAbstractService_init(self);
  self->lock_ = new_JavaUtilConcurrentLocksReentrantLock_init();
  self->task_ = new_ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_Task_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_(self);
}

ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate *new_ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_(ComGoogleCommonUtilConcurrentAbstractScheduledService *outer$) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate, initWithComGoogleCommonUtilConcurrentAbstractScheduledService_, outer$)
}

ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate *create_ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_(ComGoogleCommonUtilConcurrentAbstractScheduledService *outer$) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate, initWithComGoogleCommonUtilConcurrentAbstractScheduledService_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate)

@implementation ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_Task

- (instancetype)initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate:(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate *)outer$ {
  ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_Task_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_(self, outer$);
  return self;
}

- (void)run {
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(this$0_->lock_)) lock];
  @try {
    if ([((id<JavaUtilConcurrentFuture>) nil_chk(JreLoadVolatileId(&this$0_->runningTask_))) isCancelled]) {
      return;
    }
    [this$0_->this$0_ runOneIteration];
  }
  @catch (NSException *t) {
    @try {
      [this$0_->this$0_ shutDown];
    }
    @catch (JavaLangException *ignored) {
      [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(ComGoogleCommonUtilConcurrentAbstractScheduledService, logger))) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:@"Error while attempting to shut down the service after failure." withNSException:ignored];
    }
    [this$0_ notifyFailedWithNSException:t];
    [((id<JavaUtilConcurrentFuture>) nil_chk(JreLoadVolatileId(&this$0_->runningTask_))) cancelWithBoolean:false];
  }
  @finally {
    [this$0_->lock_ unlock];
  }
}

- (void)__javaClone:(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_Task *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_Task = { "Task", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x0, 2, 1, 0, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_Task;
}

@end

void ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_Task_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_Task *self, ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_Task *new_ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_Task_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate *outer$) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_Task, initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_, outer$)
}

ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_Task *create_ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_Task_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate *outer$) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_Task, initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_Task)

@implementation ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_1

- (instancetype)initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate:(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate *)outer$ {
  ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_1_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_(self, outer$);
  return self;
}

- (NSString *)get {
  return JreStrcat("$C@", [this$0_->this$0_ serviceName], ' ', [this$0_ state]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate:);
  methods[1].selector = @selector(get);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate;", "doStart", "Ljava/lang/Object;Lcom/google/common/base/Supplier<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_1 = { "", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x8018, 2, 1, 0, -1, 1, 2, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_1;
}

@end

void ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_1_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_1 *self, ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_1 *new_ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_1_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate *outer$) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_1, initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_, outer$)
}

ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_1 *create_ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_1_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate *outer$) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_1, initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_, outer$)
}

@implementation ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_2

- (instancetype)initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate:(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate *)outer$ {
  ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_2_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_(self, outer$);
  return self;
}

- (void)run {
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(this$0_->lock_)) lock];
  @try {
    [this$0_->this$0_ startUp];
    (void) JreVolatileStrongAssign(&this$0_->runningTask_, [((ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler *) nil_chk([this$0_->this$0_ scheduler])) scheduleWithComGoogleCommonUtilConcurrentAbstractService:this$0_->this$0_->delegate_ withJavaUtilConcurrentScheduledExecutorService:JreLoadVolatileId(&this$0_->executorService_) withJavaLangRunnable:this$0_->task_]);
    [this$0_ notifyStarted];
  }
  @catch (NSException *t) {
    [this$0_ notifyFailedWithNSException:t];
    if (JreLoadVolatileId(&this$0_->runningTask_) != nil) {
      [((id<JavaUtilConcurrentFuture>) nil_chk(JreLoadVolatileId(&this$0_->runningTask_))) cancelWithBoolean:false];
    }
  }
  @finally {
    [this$0_->lock_ unlock];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate;", "doStart" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_2 = { "", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x8018, 2, 1, 0, -1, 1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_2;
}

@end

void ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_2_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_2 *self, ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_2 *new_ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_2_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate *outer$) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_2, initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_, outer$)
}

ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_2 *create_ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_2_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate *outer$) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_2, initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_, outer$)
}

@implementation ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_3

- (instancetype)initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate:(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate *)outer$ {
  ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_3_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_(self, outer$);
  return self;
}

- (void)run {
  @try {
    [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(this$0_->lock_)) lock];
    @try {
      if ([this$0_ state] != JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, STOPPING)) {
        return;
      }
      [this$0_->this$0_ shutDown];
    }
    @finally {
      [this$0_->lock_ unlock];
    }
    [this$0_ notifyStopped];
  }
  @catch (NSException *t) {
    [this$0_ notifyFailedWithNSException:t];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate;", "doStop" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_3 = { "", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x8018, 2, 1, 0, -1, 1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_3;
}

@end

void ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_3_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_3 *self, ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_3 *new_ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_3_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate *outer$) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_3, initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_, outer$)
}

ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_3 *create_ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_3_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate *outer$) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_3, initWithComGoogleCommonUtilConcurrentAbstractScheduledService_ServiceDelegate_, outer$)
}

@implementation ComGoogleCommonUtilConcurrentAbstractScheduledService_1ThreadFactoryImpl

- (instancetype)initWithComGoogleCommonUtilConcurrentAbstractScheduledService:(ComGoogleCommonUtilConcurrentAbstractScheduledService *)outer$ {
  ComGoogleCommonUtilConcurrentAbstractScheduledService_1ThreadFactoryImpl_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_(self, outer$);
  return self;
}

- (JavaLangThread *)newThreadWithJavaLangRunnable:(id<JavaLangRunnable>)runnable {
  return ComGoogleCommonUtilConcurrentMoreExecutors_newThreadWithNSString_withJavaLangRunnable_([this$0_ serviceName], runnable);
}

- (void)__javaClone:(ComGoogleCommonUtilConcurrentAbstractScheduledService_1ThreadFactoryImpl *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThread;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentAbstractScheduledService:);
  methods[1].selector = @selector(newThreadWithJavaLangRunnable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonUtilConcurrentAbstractScheduledService;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "newThread", "LJavaLangRunnable;", "LComGoogleCommonUtilConcurrentAbstractScheduledService;", "executor" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractScheduledService_1ThreadFactoryImpl = { "ThreadFactoryImpl", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x0, 2, 1, 2, -1, 3, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractScheduledService_1ThreadFactoryImpl;
}

@end

void ComGoogleCommonUtilConcurrentAbstractScheduledService_1ThreadFactoryImpl_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_(ComGoogleCommonUtilConcurrentAbstractScheduledService_1ThreadFactoryImpl *self, ComGoogleCommonUtilConcurrentAbstractScheduledService *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

ComGoogleCommonUtilConcurrentAbstractScheduledService_1ThreadFactoryImpl *new_ComGoogleCommonUtilConcurrentAbstractScheduledService_1ThreadFactoryImpl_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_(ComGoogleCommonUtilConcurrentAbstractScheduledService *outer$) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractScheduledService_1ThreadFactoryImpl, initWithComGoogleCommonUtilConcurrentAbstractScheduledService_, outer$)
}

ComGoogleCommonUtilConcurrentAbstractScheduledService_1ThreadFactoryImpl *create_ComGoogleCommonUtilConcurrentAbstractScheduledService_1ThreadFactoryImpl_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_(ComGoogleCommonUtilConcurrentAbstractScheduledService *outer$) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractScheduledService_1ThreadFactoryImpl, initWithComGoogleCommonUtilConcurrentAbstractScheduledService_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentAbstractScheduledService_1ThreadFactoryImpl)

@implementation ComGoogleCommonUtilConcurrentAbstractScheduledService_1

- (instancetype)initWithJavaUtilConcurrentScheduledExecutorService:(id<JavaUtilConcurrentScheduledExecutorService>)capture$0 {
  ComGoogleCommonUtilConcurrentAbstractScheduledService_1_initWithJavaUtilConcurrentScheduledExecutorService_(self, capture$0);
  return self;
}

- (void)terminatedWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)from {
  [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(val$executor_)) shutdown];
}

- (void)failedWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)from
                                             withNSException:(NSException *)failure {
  [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(val$executor_)) shutdown];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentScheduledExecutorService:);
  methods[1].selector = @selector(terminatedWithComGoogleCommonUtilConcurrentService_State:);
  methods[2].selector = @selector(failedWithComGoogleCommonUtilConcurrentService_State:withNSException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$executor_", "LJavaUtilConcurrentScheduledExecutorService;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "terminated", "LComGoogleCommonUtilConcurrentService_State;", "failed", "LComGoogleCommonUtilConcurrentService_State;LNSException;", "LComGoogleCommonUtilConcurrentAbstractScheduledService;", "executor" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractScheduledService_1 = { "", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x8018, 3, 1, 4, -1, 5, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractScheduledService_1;
}

@end

void ComGoogleCommonUtilConcurrentAbstractScheduledService_1_initWithJavaUtilConcurrentScheduledExecutorService_(ComGoogleCommonUtilConcurrentAbstractScheduledService_1 *self, id<JavaUtilConcurrentScheduledExecutorService> capture$0) {
  self->val$executor_ = capture$0;
  ComGoogleCommonUtilConcurrentService_Listener_init(self);
}

ComGoogleCommonUtilConcurrentAbstractScheduledService_1 *new_ComGoogleCommonUtilConcurrentAbstractScheduledService_1_initWithJavaUtilConcurrentScheduledExecutorService_(id<JavaUtilConcurrentScheduledExecutorService> capture$0) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractScheduledService_1, initWithJavaUtilConcurrentScheduledExecutorService_, capture$0)
}

ComGoogleCommonUtilConcurrentAbstractScheduledService_1 *create_ComGoogleCommonUtilConcurrentAbstractScheduledService_1_initWithJavaUtilConcurrentScheduledExecutorService_(id<JavaUtilConcurrentScheduledExecutorService> capture$0) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractScheduledService_1, initWithJavaUtilConcurrentScheduledExecutorService_, capture$0)
}

@implementation ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilConcurrentFuture>)scheduleWithComGoogleCommonUtilConcurrentAbstractService:(ComGoogleCommonUtilConcurrentAbstractService *)service
                                          withJavaUtilConcurrentScheduledExecutorService:(id<JavaUtilConcurrentScheduledExecutorService>)executor
                                                                    withJavaLangRunnable:(id<JavaLangRunnable>)runnable {
  ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_ReschedulableCallable *task = new_ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_ReschedulableCallable_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_withComGoogleCommonUtilConcurrentAbstractService_withJavaUtilConcurrentScheduledExecutorService_withJavaLangRunnable_(self, service, executor, runnable);
  [task reschedule];
  return task;
}

- (ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_Schedule *)getNextSchedule {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentFuture;", 0x10, 0, 1, -1, 2, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_Schedule;", 0x404, -1, -1, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(scheduleWithComGoogleCommonUtilConcurrentAbstractService:withJavaUtilConcurrentScheduledExecutorService:withJavaLangRunnable:);
  methods[2].selector = @selector(getNextSchedule);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "schedule", "LComGoogleCommonUtilConcurrentAbstractService;LJavaUtilConcurrentScheduledExecutorService;LJavaLangRunnable;", "(Lcom/google/common/util/concurrent/AbstractService;Ljava/util/concurrent/ScheduledExecutorService;Ljava/lang/Runnable;)Ljava/util/concurrent/Future<*>;", "LJavaLangException;", "LComGoogleCommonUtilConcurrentAbstractScheduledService;", "LComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_ReschedulableCallable;LComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_Schedule;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler = { "CustomScheduler", "com.google.common.util.concurrent", ptrTable, methods, NULL, 7, 0x409, 3, 0, 4, 5, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler;
}

@end

void ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_init(ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler *self) {
  ComGoogleCommonUtilConcurrentAbstractScheduledService_Scheduler_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler)

@implementation ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_ReschedulableCallable

- (instancetype)initWithComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler:(ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler *)outer$
                                             withComGoogleCommonUtilConcurrentAbstractService:(ComGoogleCommonUtilConcurrentAbstractService *)service
                                               withJavaUtilConcurrentScheduledExecutorService:(id<JavaUtilConcurrentScheduledExecutorService>)executor
                                                                         withJavaLangRunnable:(id<JavaLangRunnable>)runnable {
  ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_ReschedulableCallable_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_withComGoogleCommonUtilConcurrentAbstractService_withJavaUtilConcurrentScheduledExecutorService_withJavaLangRunnable_(self, outer$, service, executor, runnable);
  return self;
}

- (JavaLangVoid *)call {
  [((id<JavaLangRunnable>) nil_chk(wrappedRunnable_)) run];
  [self reschedule];
  return nil;
}

- (void)reschedule {
  ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_Schedule *schedule;
  @try {
    schedule = [this$0_ getNextSchedule];
  }
  @catch (NSException *t) {
    [((ComGoogleCommonUtilConcurrentAbstractService *) nil_chk(service_)) notifyFailedWithNSException:t];
    return;
  }
  NSException *scheduleFailure = nil;
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(lock_)) lock];
  @try {
    if (currentFuture_ == nil || ![currentFuture_ isCancelled]) {
      currentFuture_ = [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(executor_)) scheduleWithJavaUtilConcurrentCallable:self withLong:((ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_Schedule *) nil_chk(schedule))->delay_ withJavaUtilConcurrentTimeUnit:schedule->unit_];
    }
  }
  @catch (NSException *e) {
    scheduleFailure = e;
  }
  @finally {
    [lock_ unlock];
  }
  if (scheduleFailure != nil) {
    [((ComGoogleCommonUtilConcurrentAbstractService *) nil_chk(service_)) notifyFailedWithNSException:scheduleFailure];
  }
}

- (jboolean)cancelWithBoolean:(jboolean)mayInterruptIfRunning {
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(lock_)) lock];
  @try {
    return [((id<JavaUtilConcurrentFuture>) nil_chk(currentFuture_)) cancelWithBoolean:mayInterruptIfRunning];
  }
  @finally {
    [lock_ unlock];
  }
}

- (jboolean)isCancelled {
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(lock_)) lock];
  @try {
    return [((id<JavaUtilConcurrentFuture>) nil_chk(currentFuture_)) isCancelled];
  }
  @finally {
    [lock_ unlock];
  }
}

- (id<JavaUtilConcurrentFuture>)delegate {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Only cancel and isCancelled is supported by this future");
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaLangVoid;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentFuture;", 0x4, -1, -1, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler:withComGoogleCommonUtilConcurrentAbstractService:withJavaUtilConcurrentScheduledExecutorService:withJavaLangRunnable:);
  methods[1].selector = @selector(call);
  methods[2].selector = @selector(reschedule);
  methods[3].selector = @selector(cancelWithBoolean:);
  methods[4].selector = @selector(isCancelled);
  methods[5].selector = @selector(delegate);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "wrappedRunnable_", "LJavaLangRunnable;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "executor_", "LJavaUtilConcurrentScheduledExecutorService;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "service_", "LComGoogleCommonUtilConcurrentAbstractService;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "lock_", "LJavaUtilConcurrentLocksReentrantLock;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "currentFuture_", "LJavaUtilConcurrentFuture;", .constantValue.asLong = 0, 0x2, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentAbstractService;LJavaUtilConcurrentScheduledExecutorService;LJavaLangRunnable;", "LJavaLangException;", "cancel", "Z", "()Ljava/util/concurrent/Future<Ljava/lang/Void;>;", "Ljava/util/concurrent/Future<Ljava/lang/Void;>;", "LComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler;", "Lcom/google/common/util/concurrent/ForwardingFuture<Ljava/lang/Void;>;Ljava/util/concurrent/Callable<Ljava/lang/Void;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_ReschedulableCallable = { "ReschedulableCallable", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x2, 6, 6, 6, -1, -1, 7, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_ReschedulableCallable;
}

@end

void ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_ReschedulableCallable_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_withComGoogleCommonUtilConcurrentAbstractService_withJavaUtilConcurrentScheduledExecutorService_withJavaLangRunnable_(ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_ReschedulableCallable *self, ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler *outer$, ComGoogleCommonUtilConcurrentAbstractService *service, id<JavaUtilConcurrentScheduledExecutorService> executor, id<JavaLangRunnable> runnable) {
  self->this$0_ = outer$;
  ComGoogleCommonUtilConcurrentForwardingFuture_init(self);
  self->lock_ = new_JavaUtilConcurrentLocksReentrantLock_init();
  self->wrappedRunnable_ = runnable;
  self->executor_ = executor;
  self->service_ = service;
}

ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_ReschedulableCallable *new_ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_ReschedulableCallable_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_withComGoogleCommonUtilConcurrentAbstractService_withJavaUtilConcurrentScheduledExecutorService_withJavaLangRunnable_(ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler *outer$, ComGoogleCommonUtilConcurrentAbstractService *service, id<JavaUtilConcurrentScheduledExecutorService> executor, id<JavaLangRunnable> runnable) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_ReschedulableCallable, initWithComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_withComGoogleCommonUtilConcurrentAbstractService_withJavaUtilConcurrentScheduledExecutorService_withJavaLangRunnable_, outer$, service, executor, runnable)
}

ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_ReschedulableCallable *create_ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_ReschedulableCallable_initWithComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_withComGoogleCommonUtilConcurrentAbstractService_withJavaUtilConcurrentScheduledExecutorService_withJavaLangRunnable_(ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler *outer$, ComGoogleCommonUtilConcurrentAbstractService *service, id<JavaUtilConcurrentScheduledExecutorService> executor, id<JavaLangRunnable> runnable) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_ReschedulableCallable, initWithComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_withComGoogleCommonUtilConcurrentAbstractService_withJavaUtilConcurrentScheduledExecutorService_withJavaLangRunnable_, outer$, service, executor, runnable)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_ReschedulableCallable)

@implementation ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_Schedule

- (instancetype)initWithLong:(jlong)delay
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_Schedule_initWithLong_withJavaUtilConcurrentTimeUnit_(self, delay, unit);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithLong:withJavaUtilConcurrentTimeUnit:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "delay_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "JLJavaUtilConcurrentTimeUnit;", "LComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_Schedule = { "Schedule", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x1c, 1, 2, 1, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_Schedule;
}

@end

void ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_Schedule_initWithLong_withJavaUtilConcurrentTimeUnit_(ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_Schedule *self, jlong delay, JavaUtilConcurrentTimeUnit *unit) {
  NSObject_init(self);
  self->delay_ = delay;
  self->unit_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(unit);
}

ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_Schedule *new_ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_Schedule_initWithLong_withJavaUtilConcurrentTimeUnit_(jlong delay, JavaUtilConcurrentTimeUnit *unit) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_Schedule, initWithLong_withJavaUtilConcurrentTimeUnit_, delay, unit)
}

ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_Schedule *create_ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_Schedule_initWithLong_withJavaUtilConcurrentTimeUnit_(jlong delay, JavaUtilConcurrentTimeUnit *unit) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_Schedule, initWithLong_withJavaUtilConcurrentTimeUnit_, delay, unit)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentAbstractScheduledService_CustomScheduler_Schedule)
