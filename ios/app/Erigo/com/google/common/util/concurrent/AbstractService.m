//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/util/concurrent/AbstractService.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/util/concurrent/AbstractService.h"
#include "com/google/common/util/concurrent/ListenerCallQueue.h"
#include "com/google/common/util/concurrent/Monitor.h"
#include "com/google/common/util/concurrent/Service.h"
#include "java/lang/AssertionError.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/Executor.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/TimeoutException.h"
#include "javax/annotation/Nullable.h"

@class ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot;

@interface ComGoogleCommonUtilConcurrentAbstractService () {
 @public
  ComGoogleCommonUtilConcurrentMonitor *monitor_;
  ComGoogleCommonUtilConcurrentMonitor_Guard *isStartable_;
  ComGoogleCommonUtilConcurrentMonitor_Guard *isStoppable_;
  ComGoogleCommonUtilConcurrentMonitor_Guard *hasReachedRunning_;
  ComGoogleCommonUtilConcurrentMonitor_Guard *isStopped_;
  ComGoogleCommonUtilConcurrentListenerCallQueue *listeners_;
  volatile_id snapshot_;
}

+ (id<ComGoogleCommonUtilConcurrentListenerCallQueue_Event>)terminatedEventWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)from;

+ (id<ComGoogleCommonUtilConcurrentListenerCallQueue_Event>)stoppingEventWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)from;

- (void)checkCurrentStateWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)expected;

- (void)dispatchListenerEvents;

- (void)enqueueStartingEvent;

- (void)enqueueRunningEvent;

- (void)enqueueStoppingEventWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)from;

- (void)enqueueTerminatedEventWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)from;

- (void)enqueueFailedEventWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)from
                                                         withNSException:(NSException *)cause;
#define withJavaLangThrowable withNSException

@end

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractService, monitor_, ComGoogleCommonUtilConcurrentMonitor *)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractService, isStartable_, ComGoogleCommonUtilConcurrentMonitor_Guard *)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractService, isStoppable_, ComGoogleCommonUtilConcurrentMonitor_Guard *)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractService, hasReachedRunning_, ComGoogleCommonUtilConcurrentMonitor_Guard *)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractService, isStopped_, ComGoogleCommonUtilConcurrentMonitor_Guard *)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractService, listeners_, ComGoogleCommonUtilConcurrentListenerCallQueue *)
J2OBJC_VOLATILE_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractService, snapshot_, ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot *)

inline id<ComGoogleCommonUtilConcurrentListenerCallQueue_Event> ComGoogleCommonUtilConcurrentAbstractService_get_STARTING_EVENT();
static id<ComGoogleCommonUtilConcurrentListenerCallQueue_Event> ComGoogleCommonUtilConcurrentAbstractService_STARTING_EVENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonUtilConcurrentAbstractService, STARTING_EVENT, id<ComGoogleCommonUtilConcurrentListenerCallQueue_Event>)

inline id<ComGoogleCommonUtilConcurrentListenerCallQueue_Event> ComGoogleCommonUtilConcurrentAbstractService_get_RUNNING_EVENT();
static id<ComGoogleCommonUtilConcurrentListenerCallQueue_Event> ComGoogleCommonUtilConcurrentAbstractService_RUNNING_EVENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonUtilConcurrentAbstractService, RUNNING_EVENT, id<ComGoogleCommonUtilConcurrentListenerCallQueue_Event>)

inline id<ComGoogleCommonUtilConcurrentListenerCallQueue_Event> ComGoogleCommonUtilConcurrentAbstractService_get_STOPPING_FROM_STARTING_EVENT();
static id<ComGoogleCommonUtilConcurrentListenerCallQueue_Event> ComGoogleCommonUtilConcurrentAbstractService_STOPPING_FROM_STARTING_EVENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonUtilConcurrentAbstractService, STOPPING_FROM_STARTING_EVENT, id<ComGoogleCommonUtilConcurrentListenerCallQueue_Event>)

inline id<ComGoogleCommonUtilConcurrentListenerCallQueue_Event> ComGoogleCommonUtilConcurrentAbstractService_get_STOPPING_FROM_RUNNING_EVENT();
static id<ComGoogleCommonUtilConcurrentListenerCallQueue_Event> ComGoogleCommonUtilConcurrentAbstractService_STOPPING_FROM_RUNNING_EVENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonUtilConcurrentAbstractService, STOPPING_FROM_RUNNING_EVENT, id<ComGoogleCommonUtilConcurrentListenerCallQueue_Event>)

inline id<ComGoogleCommonUtilConcurrentListenerCallQueue_Event> ComGoogleCommonUtilConcurrentAbstractService_get_TERMINATED_FROM_NEW_EVENT();
static id<ComGoogleCommonUtilConcurrentListenerCallQueue_Event> ComGoogleCommonUtilConcurrentAbstractService_TERMINATED_FROM_NEW_EVENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonUtilConcurrentAbstractService, TERMINATED_FROM_NEW_EVENT, id<ComGoogleCommonUtilConcurrentListenerCallQueue_Event>)

inline id<ComGoogleCommonUtilConcurrentListenerCallQueue_Event> ComGoogleCommonUtilConcurrentAbstractService_get_TERMINATED_FROM_RUNNING_EVENT();
static id<ComGoogleCommonUtilConcurrentListenerCallQueue_Event> ComGoogleCommonUtilConcurrentAbstractService_TERMINATED_FROM_RUNNING_EVENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonUtilConcurrentAbstractService, TERMINATED_FROM_RUNNING_EVENT, id<ComGoogleCommonUtilConcurrentListenerCallQueue_Event>)

inline id<ComGoogleCommonUtilConcurrentListenerCallQueue_Event> ComGoogleCommonUtilConcurrentAbstractService_get_TERMINATED_FROM_STOPPING_EVENT();
static id<ComGoogleCommonUtilConcurrentListenerCallQueue_Event> ComGoogleCommonUtilConcurrentAbstractService_TERMINATED_FROM_STOPPING_EVENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonUtilConcurrentAbstractService, TERMINATED_FROM_STOPPING_EVENT, id<ComGoogleCommonUtilConcurrentListenerCallQueue_Event>)

__attribute__((unused)) static id<ComGoogleCommonUtilConcurrentListenerCallQueue_Event> ComGoogleCommonUtilConcurrentAbstractService_terminatedEventWithComGoogleCommonUtilConcurrentService_State_(ComGoogleCommonUtilConcurrentService_State *from);

__attribute__((unused)) static id<ComGoogleCommonUtilConcurrentListenerCallQueue_Event> ComGoogleCommonUtilConcurrentAbstractService_stoppingEventWithComGoogleCommonUtilConcurrentService_State_(ComGoogleCommonUtilConcurrentService_State *from);

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractService_checkCurrentStateWithComGoogleCommonUtilConcurrentService_State_(ComGoogleCommonUtilConcurrentAbstractService *self, ComGoogleCommonUtilConcurrentService_State *expected);

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractService_notifyFailedWithNSException_(ComGoogleCommonUtilConcurrentAbstractService *self, NSException *cause);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentService_State *ComGoogleCommonUtilConcurrentAbstractService_state(ComGoogleCommonUtilConcurrentAbstractService *self);

__attribute__((unused)) static NSException *ComGoogleCommonUtilConcurrentAbstractService_failureCause(ComGoogleCommonUtilConcurrentAbstractService *self);

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractService_dispatchListenerEvents(ComGoogleCommonUtilConcurrentAbstractService *self);

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractService_enqueueStartingEvent(ComGoogleCommonUtilConcurrentAbstractService *self);

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractService_enqueueRunningEvent(ComGoogleCommonUtilConcurrentAbstractService *self);

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractService_enqueueStoppingEventWithComGoogleCommonUtilConcurrentService_State_(ComGoogleCommonUtilConcurrentAbstractService *self, ComGoogleCommonUtilConcurrentService_State *from);

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractService_enqueueTerminatedEventWithComGoogleCommonUtilConcurrentService_State_(ComGoogleCommonUtilConcurrentAbstractService *self, ComGoogleCommonUtilConcurrentService_State *from);

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractService_enqueueFailedEventWithComGoogleCommonUtilConcurrentService_State_withNSException_(ComGoogleCommonUtilConcurrentAbstractService *self, ComGoogleCommonUtilConcurrentService_State *from, NSException *cause);

@interface ComGoogleCommonUtilConcurrentAbstractService_1 : NSObject < ComGoogleCommonUtilConcurrentListenerCallQueue_Event >

- (instancetype)init;

- (void)callWithId:(ComGoogleCommonUtilConcurrentService_Listener *)listener;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractService_1)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractService_1_init(ComGoogleCommonUtilConcurrentAbstractService_1 *self);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractService_1 *new_ComGoogleCommonUtilConcurrentAbstractService_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractService_1 *create_ComGoogleCommonUtilConcurrentAbstractService_1_init();

@interface ComGoogleCommonUtilConcurrentAbstractService_2 : NSObject < ComGoogleCommonUtilConcurrentListenerCallQueue_Event >

- (instancetype)init;

- (void)callWithId:(ComGoogleCommonUtilConcurrentService_Listener *)listener;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractService_2)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractService_2_init(ComGoogleCommonUtilConcurrentAbstractService_2 *self);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractService_2 *new_ComGoogleCommonUtilConcurrentAbstractService_2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractService_2 *create_ComGoogleCommonUtilConcurrentAbstractService_2_init();

@interface ComGoogleCommonUtilConcurrentAbstractService_3 : NSObject < ComGoogleCommonUtilConcurrentListenerCallQueue_Event > {
 @public
  ComGoogleCommonUtilConcurrentService_State *val$from_;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)capture$0;

- (void)callWithId:(ComGoogleCommonUtilConcurrentService_Listener *)listener;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractService_3)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractService_3_initWithComGoogleCommonUtilConcurrentService_State_(ComGoogleCommonUtilConcurrentAbstractService_3 *self, ComGoogleCommonUtilConcurrentService_State *capture$0);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractService_3 *new_ComGoogleCommonUtilConcurrentAbstractService_3_initWithComGoogleCommonUtilConcurrentService_State_(ComGoogleCommonUtilConcurrentService_State *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractService_3 *create_ComGoogleCommonUtilConcurrentAbstractService_3_initWithComGoogleCommonUtilConcurrentService_State_(ComGoogleCommonUtilConcurrentService_State *capture$0);

@interface ComGoogleCommonUtilConcurrentAbstractService_4 : NSObject < ComGoogleCommonUtilConcurrentListenerCallQueue_Event > {
 @public
  ComGoogleCommonUtilConcurrentService_State *val$from_;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)capture$0;

- (void)callWithId:(ComGoogleCommonUtilConcurrentService_Listener *)listener;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractService_4)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractService_4_initWithComGoogleCommonUtilConcurrentService_State_(ComGoogleCommonUtilConcurrentAbstractService_4 *self, ComGoogleCommonUtilConcurrentService_State *capture$0);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractService_4 *new_ComGoogleCommonUtilConcurrentAbstractService_4_initWithComGoogleCommonUtilConcurrentService_State_(ComGoogleCommonUtilConcurrentService_State *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractService_4 *create_ComGoogleCommonUtilConcurrentAbstractService_4_initWithComGoogleCommonUtilConcurrentService_State_(ComGoogleCommonUtilConcurrentService_State *capture$0);

@interface ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard : ComGoogleCommonUtilConcurrentMonitor_Guard {
 @public
  __unsafe_unretained ComGoogleCommonUtilConcurrentAbstractService *this$0_;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentAbstractService:(ComGoogleCommonUtilConcurrentAbstractService *)outer$;

- (jboolean)isSatisfied;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard *self, ComGoogleCommonUtilConcurrentAbstractService *outer$);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard *new_ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard *create_ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard)

@interface ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard : ComGoogleCommonUtilConcurrentMonitor_Guard {
 @public
  __unsafe_unretained ComGoogleCommonUtilConcurrentAbstractService *this$0_;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentAbstractService:(ComGoogleCommonUtilConcurrentAbstractService *)outer$;

- (jboolean)isSatisfied;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard *self, ComGoogleCommonUtilConcurrentAbstractService *outer$);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard *new_ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard *create_ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard)

@interface ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard : ComGoogleCommonUtilConcurrentMonitor_Guard {
 @public
  __unsafe_unretained ComGoogleCommonUtilConcurrentAbstractService *this$0_;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentAbstractService:(ComGoogleCommonUtilConcurrentAbstractService *)outer$;

- (jboolean)isSatisfied;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard *self, ComGoogleCommonUtilConcurrentAbstractService *outer$);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard *new_ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard *create_ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard)

@interface ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard : ComGoogleCommonUtilConcurrentMonitor_Guard {
 @public
  __unsafe_unretained ComGoogleCommonUtilConcurrentAbstractService *this$0_;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentAbstractService:(ComGoogleCommonUtilConcurrentAbstractService *)outer$;

- (jboolean)isSatisfied;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard *self, ComGoogleCommonUtilConcurrentAbstractService *outer$);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard *new_ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard *create_ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard)

@interface ComGoogleCommonUtilConcurrentAbstractService_5 : NSObject < ComGoogleCommonUtilConcurrentListenerCallQueue_Event > {
 @public
  ComGoogleCommonUtilConcurrentService_State *val$from_;
  NSException *val$cause_;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)capture$0
                                                   withNSException:(NSException *)capture$1;
#define withJavaLangThrowable withNSException

- (void)callWithId:(ComGoogleCommonUtilConcurrentService_Listener *)listener;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractService_5)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractService_5_initWithComGoogleCommonUtilConcurrentService_State_withNSException_(ComGoogleCommonUtilConcurrentAbstractService_5 *self, ComGoogleCommonUtilConcurrentService_State *capture$0, NSException *capture$1);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractService_5 *new_ComGoogleCommonUtilConcurrentAbstractService_5_initWithComGoogleCommonUtilConcurrentService_State_withNSException_(ComGoogleCommonUtilConcurrentService_State *capture$0, NSException *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractService_5 *create_ComGoogleCommonUtilConcurrentAbstractService_5_initWithComGoogleCommonUtilConcurrentService_State_withNSException_(ComGoogleCommonUtilConcurrentService_State *capture$0, NSException *capture$1);

@interface ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot : NSObject {
 @public
  ComGoogleCommonUtilConcurrentService_State *state_;
  jboolean shutdownWhenStartupFinishes_;
  NSException *failure_;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)internalState;

- (instancetype)initWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)internalState
                                                       withBoolean:(jboolean)shutdownWhenStartupFinishes
                                                   withNSException:(NSException *)failure;
#define withJavaLangThrowable withNSException

- (ComGoogleCommonUtilConcurrentService_State *)externalState;

- (NSException *)failureCause;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot)

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot, state_, ComGoogleCommonUtilConcurrentService_State *)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot, failure_, NSException *)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_(ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot *self, ComGoogleCommonUtilConcurrentService_State *internalState);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot *new_ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_(ComGoogleCommonUtilConcurrentService_State *internalState) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot *create_ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_(ComGoogleCommonUtilConcurrentService_State *internalState);

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_withBoolean_withNSException_(ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot *self, ComGoogleCommonUtilConcurrentService_State *internalState, jboolean shutdownWhenStartupFinishes, NSException *failure);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot *new_ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_withBoolean_withNSException_(ComGoogleCommonUtilConcurrentService_State *internalState, jboolean shutdownWhenStartupFinishes, NSException *failure) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot *create_ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_withBoolean_withNSException_(ComGoogleCommonUtilConcurrentService_State *internalState, jboolean shutdownWhenStartupFinishes, NSException *failure);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot__Annotations$0();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot__Annotations$1();

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot)

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonUtilConcurrentAbstractService)

@implementation ComGoogleCommonUtilConcurrentAbstractService

+ (id<ComGoogleCommonUtilConcurrentListenerCallQueue_Event>)terminatedEventWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)from {
  return ComGoogleCommonUtilConcurrentAbstractService_terminatedEventWithComGoogleCommonUtilConcurrentService_State_(from);
}

+ (id<ComGoogleCommonUtilConcurrentListenerCallQueue_Event>)stoppingEventWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)from {
  return ComGoogleCommonUtilConcurrentAbstractService_stoppingEventWithComGoogleCommonUtilConcurrentService_State_(from);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentAbstractService_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)doStart {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)doStop {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id<ComGoogleCommonUtilConcurrentService>)startAsync {
  if ([((ComGoogleCommonUtilConcurrentMonitor *) nil_chk(monitor_)) enterIfWithComGoogleCommonUtilConcurrentMonitor_Guard:isStartable_]) {
    @try {
      (void) JreVolatileStrongAssign(&snapshot_, new_ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_(JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, STARTING)));
      ComGoogleCommonUtilConcurrentAbstractService_enqueueStartingEvent(self);
      [self doStart];
    }
    @catch (NSException *startupFailure) {
      ComGoogleCommonUtilConcurrentAbstractService_notifyFailedWithNSException_(self, startupFailure);
    }
    @finally {
      [monitor_ leave];
      ComGoogleCommonUtilConcurrentAbstractService_dispatchListenerEvents(self);
    }
  }
  else {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$", @"Service ", self, @" has already been started"));
  }
  return self;
}

- (id<ComGoogleCommonUtilConcurrentService>)stopAsync {
  if ([((ComGoogleCommonUtilConcurrentMonitor *) nil_chk(monitor_)) enterIfWithComGoogleCommonUtilConcurrentMonitor_Guard:isStoppable_]) {
    @try {
      ComGoogleCommonUtilConcurrentService_State *previous = ComGoogleCommonUtilConcurrentAbstractService_state(self);
      switch ([previous ordinal]) {
        case ComGoogleCommonUtilConcurrentService_State_Enum_NEW:
        (void) JreVolatileStrongAssign(&snapshot_, new_ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_(JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, TERMINATED)));
        ComGoogleCommonUtilConcurrentAbstractService_enqueueTerminatedEventWithComGoogleCommonUtilConcurrentService_State_(self, JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, NEW));
        break;
        case ComGoogleCommonUtilConcurrentService_State_Enum_STARTING:
        (void) JreVolatileStrongAssign(&snapshot_, new_ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_withBoolean_withNSException_(JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, STARTING), true, nil));
        ComGoogleCommonUtilConcurrentAbstractService_enqueueStoppingEventWithComGoogleCommonUtilConcurrentService_State_(self, JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, STARTING));
        break;
        case ComGoogleCommonUtilConcurrentService_State_Enum_RUNNING:
        (void) JreVolatileStrongAssign(&snapshot_, new_ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_(JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, STOPPING)));
        ComGoogleCommonUtilConcurrentAbstractService_enqueueStoppingEventWithComGoogleCommonUtilConcurrentService_State_(self, JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, RUNNING));
        [self doStop];
        break;
        case ComGoogleCommonUtilConcurrentService_State_Enum_STOPPING:
        case ComGoogleCommonUtilConcurrentService_State_Enum_TERMINATED:
        case ComGoogleCommonUtilConcurrentService_State_Enum_FAILED:
        @throw new_JavaLangAssertionError_initWithId_(JreStrcat("$@", @"isStoppable is incorrectly implemented, saw: ", previous));
        default:
        @throw new_JavaLangAssertionError_initWithId_(JreStrcat("$@", @"Unexpected state: ", previous));
      }
    }
    @catch (NSException *shutdownFailure) {
      ComGoogleCommonUtilConcurrentAbstractService_notifyFailedWithNSException_(self, shutdownFailure);
    }
    @finally {
      [monitor_ leave];
      ComGoogleCommonUtilConcurrentAbstractService_dispatchListenerEvents(self);
    }
  }
  return self;
}

- (void)awaitRunning {
  [((ComGoogleCommonUtilConcurrentMonitor *) nil_chk(monitor_)) enterWhenUninterruptiblyWithComGoogleCommonUtilConcurrentMonitor_Guard:hasReachedRunning_];
  @try {
    ComGoogleCommonUtilConcurrentAbstractService_checkCurrentStateWithComGoogleCommonUtilConcurrentService_State_(self, JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, RUNNING));
  }
  @finally {
    [monitor_ leave];
  }
}

- (void)awaitRunningWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  if ([((ComGoogleCommonUtilConcurrentMonitor *) nil_chk(monitor_)) enterWhenUninterruptiblyWithComGoogleCommonUtilConcurrentMonitor_Guard:hasReachedRunning_ withLong:timeout withJavaUtilConcurrentTimeUnit:unit]) {
    @try {
      ComGoogleCommonUtilConcurrentAbstractService_checkCurrentStateWithComGoogleCommonUtilConcurrentService_State_(self, JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, RUNNING));
    }
    @finally {
      [monitor_ leave];
    }
  }
  else {
    @throw new_JavaUtilConcurrentTimeoutException_initWithNSString_(JreStrcat("$@$", @"Timed out waiting for ", self, @" to reach the RUNNING state."));
  }
}

- (void)awaitTerminated {
  [((ComGoogleCommonUtilConcurrentMonitor *) nil_chk(monitor_)) enterWhenUninterruptiblyWithComGoogleCommonUtilConcurrentMonitor_Guard:isStopped_];
  @try {
    ComGoogleCommonUtilConcurrentAbstractService_checkCurrentStateWithComGoogleCommonUtilConcurrentService_State_(self, JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, TERMINATED));
  }
  @finally {
    [monitor_ leave];
  }
}

- (void)awaitTerminatedWithLong:(jlong)timeout
 withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  if ([((ComGoogleCommonUtilConcurrentMonitor *) nil_chk(monitor_)) enterWhenUninterruptiblyWithComGoogleCommonUtilConcurrentMonitor_Guard:isStopped_ withLong:timeout withJavaUtilConcurrentTimeUnit:unit]) {
    @try {
      ComGoogleCommonUtilConcurrentAbstractService_checkCurrentStateWithComGoogleCommonUtilConcurrentService_State_(self, JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, TERMINATED));
    }
    @finally {
      [monitor_ leave];
    }
  }
  else {
    @throw new_JavaUtilConcurrentTimeoutException_initWithNSString_(JreStrcat("$@$@", @"Timed out waiting for ", self, @" to reach a terminal state. Current state: ", ComGoogleCommonUtilConcurrentAbstractService_state(self)));
  }
}

- (void)checkCurrentStateWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)expected {
  ComGoogleCommonUtilConcurrentAbstractService_checkCurrentStateWithComGoogleCommonUtilConcurrentService_State_(self, expected);
}

- (void)notifyStarted {
  [((ComGoogleCommonUtilConcurrentMonitor *) nil_chk(monitor_)) enter];
  @try {
    if (((ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot *) nil_chk(JreLoadVolatileId(&snapshot_)))->state_ != JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, STARTING)) {
      JavaLangIllegalStateException *failure = new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Cannot notifyStarted() when the service is ", ((ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot *) nil_chk(JreLoadVolatileId(&snapshot_)))->state_));
      ComGoogleCommonUtilConcurrentAbstractService_notifyFailedWithNSException_(self, failure);
      @throw failure;
    }
    if (((ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot *) nil_chk(JreLoadVolatileId(&snapshot_)))->shutdownWhenStartupFinishes_) {
      (void) JreVolatileStrongAssign(&snapshot_, new_ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_(JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, STOPPING)));
      [self doStop];
    }
    else {
      (void) JreVolatileStrongAssign(&snapshot_, new_ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_(JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, RUNNING)));
      ComGoogleCommonUtilConcurrentAbstractService_enqueueRunningEvent(self);
    }
  }
  @finally {
    [monitor_ leave];
    ComGoogleCommonUtilConcurrentAbstractService_dispatchListenerEvents(self);
  }
}

- (void)notifyStopped {
  [((ComGoogleCommonUtilConcurrentMonitor *) nil_chk(monitor_)) enter];
  @try {
    ComGoogleCommonUtilConcurrentService_State *previous = ((ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot *) nil_chk(JreLoadVolatileId(&snapshot_)))->state_;
    if (previous != JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, STOPPING) && previous != JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, RUNNING)) {
      JavaLangIllegalStateException *failure = new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Cannot notifyStopped() when the service is ", previous));
      ComGoogleCommonUtilConcurrentAbstractService_notifyFailedWithNSException_(self, failure);
      @throw failure;
    }
    (void) JreVolatileStrongAssign(&snapshot_, new_ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_(JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, TERMINATED)));
    ComGoogleCommonUtilConcurrentAbstractService_enqueueTerminatedEventWithComGoogleCommonUtilConcurrentService_State_(self, previous);
  }
  @finally {
    [monitor_ leave];
    ComGoogleCommonUtilConcurrentAbstractService_dispatchListenerEvents(self);
  }
}

- (void)notifyFailedWithNSException:(NSException *)cause {
  ComGoogleCommonUtilConcurrentAbstractService_notifyFailedWithNSException_(self, cause);
}

- (jboolean)isRunning {
  return ComGoogleCommonUtilConcurrentAbstractService_state(self) == JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, RUNNING);
}

- (ComGoogleCommonUtilConcurrentService_State *)state {
  return ComGoogleCommonUtilConcurrentAbstractService_state(self);
}

- (NSException *)failureCause {
  return ComGoogleCommonUtilConcurrentAbstractService_failureCause(self);
}

- (void)addListenerWithComGoogleCommonUtilConcurrentService_Listener:(ComGoogleCommonUtilConcurrentService_Listener *)listener
                                      withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor {
  [((ComGoogleCommonUtilConcurrentListenerCallQueue *) nil_chk(listeners_)) addListenerWithId:listener withJavaUtilConcurrentExecutor:executor];
}

- (NSString *)description {
  return JreStrcat("$$@C", [[self java_getClass] getSimpleName], @" [", ComGoogleCommonUtilConcurrentAbstractService_state(self), ']');
}

- (void)dispatchListenerEvents {
  ComGoogleCommonUtilConcurrentAbstractService_dispatchListenerEvents(self);
}

- (void)enqueueStartingEvent {
  ComGoogleCommonUtilConcurrentAbstractService_enqueueStartingEvent(self);
}

- (void)enqueueRunningEvent {
  ComGoogleCommonUtilConcurrentAbstractService_enqueueRunningEvent(self);
}

- (void)enqueueStoppingEventWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)from {
  ComGoogleCommonUtilConcurrentAbstractService_enqueueStoppingEventWithComGoogleCommonUtilConcurrentService_State_(self, from);
}

- (void)enqueueTerminatedEventWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)from {
  ComGoogleCommonUtilConcurrentAbstractService_enqueueTerminatedEventWithComGoogleCommonUtilConcurrentService_State_(self, from);
}

- (void)enqueueFailedEventWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)from
                                                         withNSException:(NSException *)cause {
  ComGoogleCommonUtilConcurrentAbstractService_enqueueFailedEventWithComGoogleCommonUtilConcurrentService_State_withNSException_(self, from, cause);
}

- (void)__javaClone:(ComGoogleCommonUtilConcurrentAbstractService *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&snapshot_, &original->snapshot_);
}

- (void)dealloc {
  JreReleaseVolatile(&snapshot_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LComGoogleCommonUtilConcurrentListenerCallQueue_Event;", 0xa, 0, 1, -1, 2, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentListenerCallQueue_Event;", 0xa, 3, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentService;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentService;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 4, 5, 6, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 7, 5, 6, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x14, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x14, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x14, 9, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentService_State;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSException;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 11, 12, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 13, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 17, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(terminatedEventWithComGoogleCommonUtilConcurrentService_State:);
  methods[1].selector = @selector(stoppingEventWithComGoogleCommonUtilConcurrentService_State:);
  methods[2].selector = @selector(init);
  methods[3].selector = @selector(doStart);
  methods[4].selector = @selector(doStop);
  methods[5].selector = @selector(startAsync);
  methods[6].selector = @selector(stopAsync);
  methods[7].selector = @selector(awaitRunning);
  methods[8].selector = @selector(awaitRunningWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[9].selector = @selector(awaitTerminated);
  methods[10].selector = @selector(awaitTerminatedWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[11].selector = @selector(checkCurrentStateWithComGoogleCommonUtilConcurrentService_State:);
  methods[12].selector = @selector(notifyStarted);
  methods[13].selector = @selector(notifyStopped);
  methods[14].selector = @selector(notifyFailedWithNSException:);
  methods[15].selector = @selector(isRunning);
  methods[16].selector = @selector(state);
  methods[17].selector = @selector(failureCause);
  methods[18].selector = @selector(addListenerWithComGoogleCommonUtilConcurrentService_Listener:withJavaUtilConcurrentExecutor:);
  methods[19].selector = @selector(description);
  methods[20].selector = @selector(dispatchListenerEvents);
  methods[21].selector = @selector(enqueueStartingEvent);
  methods[22].selector = @selector(enqueueRunningEvent);
  methods[23].selector = @selector(enqueueStoppingEventWithComGoogleCommonUtilConcurrentService_State:);
  methods[24].selector = @selector(enqueueTerminatedEventWithComGoogleCommonUtilConcurrentService_State:);
  methods[25].selector = @selector(enqueueFailedEventWithComGoogleCommonUtilConcurrentService_State:withNSException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "STARTING_EVENT", "LComGoogleCommonUtilConcurrentListenerCallQueue_Event;", .constantValue.asLong = 0, 0x1a, -1, 18, 19, -1 },
    { "RUNNING_EVENT", "LComGoogleCommonUtilConcurrentListenerCallQueue_Event;", .constantValue.asLong = 0, 0x1a, -1, 20, 19, -1 },
    { "STOPPING_FROM_STARTING_EVENT", "LComGoogleCommonUtilConcurrentListenerCallQueue_Event;", .constantValue.asLong = 0, 0x1a, -1, 21, 19, -1 },
    { "STOPPING_FROM_RUNNING_EVENT", "LComGoogleCommonUtilConcurrentListenerCallQueue_Event;", .constantValue.asLong = 0, 0x1a, -1, 22, 19, -1 },
    { "TERMINATED_FROM_NEW_EVENT", "LComGoogleCommonUtilConcurrentListenerCallQueue_Event;", .constantValue.asLong = 0, 0x1a, -1, 23, 19, -1 },
    { "TERMINATED_FROM_RUNNING_EVENT", "LComGoogleCommonUtilConcurrentListenerCallQueue_Event;", .constantValue.asLong = 0, 0x1a, -1, 24, 19, -1 },
    { "TERMINATED_FROM_STOPPING_EVENT", "LComGoogleCommonUtilConcurrentListenerCallQueue_Event;", .constantValue.asLong = 0, 0x1a, -1, 25, 19, -1 },
    { "monitor_", "LComGoogleCommonUtilConcurrentMonitor;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "isStartable_", "LComGoogleCommonUtilConcurrentMonitor_Guard;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "isStoppable_", "LComGoogleCommonUtilConcurrentMonitor_Guard;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "hasReachedRunning_", "LComGoogleCommonUtilConcurrentMonitor_Guard;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "isStopped_", "LComGoogleCommonUtilConcurrentMonitor_Guard;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "listeners_", "LComGoogleCommonUtilConcurrentListenerCallQueue;", .constantValue.asLong = 0, 0x12, -1, -1, 26, -1 },
    { "snapshot_", "LComGoogleCommonUtilConcurrentAbstractService_StateSnapshot;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "terminatedEvent", "LComGoogleCommonUtilConcurrentService_State;", "(Lcom/google/common/util/concurrent/Service$State;)Lcom/google/common/util/concurrent/ListenerCallQueue$Event<Lcom/google/common/util/concurrent/Service$Listener;>;", "stoppingEvent", "awaitRunning", "JLJavaUtilConcurrentTimeUnit;", "LJavaUtilConcurrentTimeoutException;", "awaitTerminated", "checkCurrentState", "notifyFailed", "LNSException;", "addListener", "LComGoogleCommonUtilConcurrentService_Listener;LJavaUtilConcurrentExecutor;", "toString", "enqueueStoppingEvent", "enqueueTerminatedEvent", "enqueueFailedEvent", "LComGoogleCommonUtilConcurrentService_State;LNSException;", &ComGoogleCommonUtilConcurrentAbstractService_STARTING_EVENT, "Lcom/google/common/util/concurrent/ListenerCallQueue$Event<Lcom/google/common/util/concurrent/Service$Listener;>;", &ComGoogleCommonUtilConcurrentAbstractService_RUNNING_EVENT, &ComGoogleCommonUtilConcurrentAbstractService_STOPPING_FROM_STARTING_EVENT, &ComGoogleCommonUtilConcurrentAbstractService_STOPPING_FROM_RUNNING_EVENT, &ComGoogleCommonUtilConcurrentAbstractService_TERMINATED_FROM_NEW_EVENT, &ComGoogleCommonUtilConcurrentAbstractService_TERMINATED_FROM_RUNNING_EVENT, &ComGoogleCommonUtilConcurrentAbstractService_TERMINATED_FROM_STOPPING_EVENT, "Lcom/google/common/util/concurrent/ListenerCallQueue<Lcom/google/common/util/concurrent/Service$Listener;>;", "LComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard;LComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard;LComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard;LComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard;LComGoogleCommonUtilConcurrentAbstractService_StateSnapshot;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractService = { "AbstractService", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x401, 26, 14, -1, 27, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractService;
}

+ (void)initialize {
  if (self == [ComGoogleCommonUtilConcurrentAbstractService class]) {
    ComGoogleCommonUtilConcurrentAbstractService_STARTING_EVENT = new_ComGoogleCommonUtilConcurrentAbstractService_1_init();
    ComGoogleCommonUtilConcurrentAbstractService_RUNNING_EVENT = new_ComGoogleCommonUtilConcurrentAbstractService_2_init();
    ComGoogleCommonUtilConcurrentAbstractService_STOPPING_FROM_STARTING_EVENT = ComGoogleCommonUtilConcurrentAbstractService_stoppingEventWithComGoogleCommonUtilConcurrentService_State_(JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, STARTING));
    ComGoogleCommonUtilConcurrentAbstractService_STOPPING_FROM_RUNNING_EVENT = ComGoogleCommonUtilConcurrentAbstractService_stoppingEventWithComGoogleCommonUtilConcurrentService_State_(JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, RUNNING));
    ComGoogleCommonUtilConcurrentAbstractService_TERMINATED_FROM_NEW_EVENT = ComGoogleCommonUtilConcurrentAbstractService_terminatedEventWithComGoogleCommonUtilConcurrentService_State_(JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, NEW));
    ComGoogleCommonUtilConcurrentAbstractService_TERMINATED_FROM_RUNNING_EVENT = ComGoogleCommonUtilConcurrentAbstractService_terminatedEventWithComGoogleCommonUtilConcurrentService_State_(JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, RUNNING));
    ComGoogleCommonUtilConcurrentAbstractService_TERMINATED_FROM_STOPPING_EVENT = ComGoogleCommonUtilConcurrentAbstractService_terminatedEventWithComGoogleCommonUtilConcurrentService_State_(JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, STOPPING));
    J2OBJC_SET_INITIALIZED(ComGoogleCommonUtilConcurrentAbstractService)
  }
}

@end

id<ComGoogleCommonUtilConcurrentListenerCallQueue_Event> ComGoogleCommonUtilConcurrentAbstractService_terminatedEventWithComGoogleCommonUtilConcurrentService_State_(ComGoogleCommonUtilConcurrentService_State *from) {
  ComGoogleCommonUtilConcurrentAbstractService_initialize();
  return new_ComGoogleCommonUtilConcurrentAbstractService_3_initWithComGoogleCommonUtilConcurrentService_State_(from);
}

id<ComGoogleCommonUtilConcurrentListenerCallQueue_Event> ComGoogleCommonUtilConcurrentAbstractService_stoppingEventWithComGoogleCommonUtilConcurrentService_State_(ComGoogleCommonUtilConcurrentService_State *from) {
  ComGoogleCommonUtilConcurrentAbstractService_initialize();
  return new_ComGoogleCommonUtilConcurrentAbstractService_4_initWithComGoogleCommonUtilConcurrentService_State_(from);
}

void ComGoogleCommonUtilConcurrentAbstractService_init(ComGoogleCommonUtilConcurrentAbstractService *self) {
  NSObject_init(self);
  self->monitor_ = new_ComGoogleCommonUtilConcurrentMonitor_init();
  self->isStartable_ = new_ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(self);
  self->isStoppable_ = new_ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(self);
  self->hasReachedRunning_ = new_ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(self);
  self->isStopped_ = new_ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(self);
  self->listeners_ = new_ComGoogleCommonUtilConcurrentListenerCallQueue_init();
  (void) JreVolatileStrongAssign(&self->snapshot_, new_ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_(JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, NEW)));
}

void ComGoogleCommonUtilConcurrentAbstractService_checkCurrentStateWithComGoogleCommonUtilConcurrentService_State_(ComGoogleCommonUtilConcurrentAbstractService *self, ComGoogleCommonUtilConcurrentService_State *expected) {
  ComGoogleCommonUtilConcurrentService_State *actual = ComGoogleCommonUtilConcurrentAbstractService_state(self);
  if (actual != expected) {
    if (actual == JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, FAILED)) {
      @throw new_JavaLangIllegalStateException_initWithNSString_withNSException_(JreStrcat("$@$@$", @"Expected the service ", self, @" to be ", expected, @", but the service has FAILED"), ComGoogleCommonUtilConcurrentAbstractService_failureCause(self));
    }
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$@$@", @"Expected the service ", self, @" to be ", expected, @", but was ", actual));
  }
}

void ComGoogleCommonUtilConcurrentAbstractService_notifyFailedWithNSException_(ComGoogleCommonUtilConcurrentAbstractService *self, NSException *cause) {
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(cause);
  [((ComGoogleCommonUtilConcurrentMonitor *) nil_chk(self->monitor_)) enter];
  @try {
    ComGoogleCommonUtilConcurrentService_State *previous = ComGoogleCommonUtilConcurrentAbstractService_state(self);
    switch ([previous ordinal]) {
      case ComGoogleCommonUtilConcurrentService_State_Enum_NEW:
      case ComGoogleCommonUtilConcurrentService_State_Enum_TERMINATED:
      @throw new_JavaLangIllegalStateException_initWithNSString_withNSException_(JreStrcat("$@", @"Failed while in state:", previous), cause);
      case ComGoogleCommonUtilConcurrentService_State_Enum_RUNNING:
      case ComGoogleCommonUtilConcurrentService_State_Enum_STARTING:
      case ComGoogleCommonUtilConcurrentService_State_Enum_STOPPING:
      (void) JreVolatileStrongAssign(&self->snapshot_, new_ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_withBoolean_withNSException_(JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, FAILED), false, cause));
      ComGoogleCommonUtilConcurrentAbstractService_enqueueFailedEventWithComGoogleCommonUtilConcurrentService_State_withNSException_(self, previous, cause);
      break;
      case ComGoogleCommonUtilConcurrentService_State_Enum_FAILED:
      break;
      default:
      @throw new_JavaLangAssertionError_initWithId_(JreStrcat("$@", @"Unexpected state: ", previous));
    }
  }
  @finally {
    [self->monitor_ leave];
    ComGoogleCommonUtilConcurrentAbstractService_dispatchListenerEvents(self);
  }
}

ComGoogleCommonUtilConcurrentService_State *ComGoogleCommonUtilConcurrentAbstractService_state(ComGoogleCommonUtilConcurrentAbstractService *self) {
  return [((ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot *) nil_chk(JreLoadVolatileId(&self->snapshot_))) externalState];
}

NSException *ComGoogleCommonUtilConcurrentAbstractService_failureCause(ComGoogleCommonUtilConcurrentAbstractService *self) {
  return [((ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot *) nil_chk(JreLoadVolatileId(&self->snapshot_))) failureCause];
}

void ComGoogleCommonUtilConcurrentAbstractService_dispatchListenerEvents(ComGoogleCommonUtilConcurrentAbstractService *self) {
  if (![((ComGoogleCommonUtilConcurrentMonitor *) nil_chk(self->monitor_)) isOccupiedByCurrentThread]) {
    [((ComGoogleCommonUtilConcurrentListenerCallQueue *) nil_chk(self->listeners_)) dispatch];
  }
}

void ComGoogleCommonUtilConcurrentAbstractService_enqueueStartingEvent(ComGoogleCommonUtilConcurrentAbstractService *self) {
  [((ComGoogleCommonUtilConcurrentListenerCallQueue *) nil_chk(self->listeners_)) enqueueWithComGoogleCommonUtilConcurrentListenerCallQueue_Event:ComGoogleCommonUtilConcurrentAbstractService_STARTING_EVENT];
}

void ComGoogleCommonUtilConcurrentAbstractService_enqueueRunningEvent(ComGoogleCommonUtilConcurrentAbstractService *self) {
  [((ComGoogleCommonUtilConcurrentListenerCallQueue *) nil_chk(self->listeners_)) enqueueWithComGoogleCommonUtilConcurrentListenerCallQueue_Event:ComGoogleCommonUtilConcurrentAbstractService_RUNNING_EVENT];
}

void ComGoogleCommonUtilConcurrentAbstractService_enqueueStoppingEventWithComGoogleCommonUtilConcurrentService_State_(ComGoogleCommonUtilConcurrentAbstractService *self, ComGoogleCommonUtilConcurrentService_State *from) {
  if (from == JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, STARTING)) {
    [((ComGoogleCommonUtilConcurrentListenerCallQueue *) nil_chk(self->listeners_)) enqueueWithComGoogleCommonUtilConcurrentListenerCallQueue_Event:ComGoogleCommonUtilConcurrentAbstractService_STOPPING_FROM_STARTING_EVENT];
  }
  else if (from == JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, RUNNING)) {
    [((ComGoogleCommonUtilConcurrentListenerCallQueue *) nil_chk(self->listeners_)) enqueueWithComGoogleCommonUtilConcurrentListenerCallQueue_Event:ComGoogleCommonUtilConcurrentAbstractService_STOPPING_FROM_RUNNING_EVENT];
  }
  else {
    @throw new_JavaLangAssertionError_init();
  }
}

void ComGoogleCommonUtilConcurrentAbstractService_enqueueTerminatedEventWithComGoogleCommonUtilConcurrentService_State_(ComGoogleCommonUtilConcurrentAbstractService *self, ComGoogleCommonUtilConcurrentService_State *from) {
  switch ([from ordinal]) {
    case ComGoogleCommonUtilConcurrentService_State_Enum_NEW:
    [((ComGoogleCommonUtilConcurrentListenerCallQueue *) nil_chk(self->listeners_)) enqueueWithComGoogleCommonUtilConcurrentListenerCallQueue_Event:ComGoogleCommonUtilConcurrentAbstractService_TERMINATED_FROM_NEW_EVENT];
    break;
    case ComGoogleCommonUtilConcurrentService_State_Enum_RUNNING:
    [((ComGoogleCommonUtilConcurrentListenerCallQueue *) nil_chk(self->listeners_)) enqueueWithComGoogleCommonUtilConcurrentListenerCallQueue_Event:ComGoogleCommonUtilConcurrentAbstractService_TERMINATED_FROM_RUNNING_EVENT];
    break;
    case ComGoogleCommonUtilConcurrentService_State_Enum_STOPPING:
    [((ComGoogleCommonUtilConcurrentListenerCallQueue *) nil_chk(self->listeners_)) enqueueWithComGoogleCommonUtilConcurrentListenerCallQueue_Event:ComGoogleCommonUtilConcurrentAbstractService_TERMINATED_FROM_STOPPING_EVENT];
    break;
    case ComGoogleCommonUtilConcurrentService_State_Enum_STARTING:
    case ComGoogleCommonUtilConcurrentService_State_Enum_TERMINATED:
    case ComGoogleCommonUtilConcurrentService_State_Enum_FAILED:
    default:
    @throw new_JavaLangAssertionError_init();
  }
}

void ComGoogleCommonUtilConcurrentAbstractService_enqueueFailedEventWithComGoogleCommonUtilConcurrentService_State_withNSException_(ComGoogleCommonUtilConcurrentAbstractService *self, ComGoogleCommonUtilConcurrentService_State *from, NSException *cause) {
  [((ComGoogleCommonUtilConcurrentListenerCallQueue *) nil_chk(self->listeners_)) enqueueWithComGoogleCommonUtilConcurrentListenerCallQueue_Event:new_ComGoogleCommonUtilConcurrentAbstractService_5_initWithComGoogleCommonUtilConcurrentService_State_withNSException_(from, cause)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentAbstractService)

@implementation ComGoogleCommonUtilConcurrentAbstractService_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentAbstractService_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)callWithId:(ComGoogleCommonUtilConcurrentService_Listener *)listener {
  [((ComGoogleCommonUtilConcurrentService_Listener *) nil_chk(listener)) starting];
}

- (NSString *)description {
  return @"starting()";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(callWithId:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LComGoogleCommonUtilConcurrentService_Listener;", "toString", "LComGoogleCommonUtilConcurrentAbstractService;", "Ljava/lang/Object;Lcom/google/common/util/concurrent/ListenerCallQueue$Event<Lcom/google/common/util/concurrent/Service$Listener;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractService_1 = { "", "com.google.common.util.concurrent", ptrTable, methods, NULL, 7, 0x8018, 3, 0, 3, -1, -1, 4, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractService_1;
}

@end

void ComGoogleCommonUtilConcurrentAbstractService_1_init(ComGoogleCommonUtilConcurrentAbstractService_1 *self) {
  NSObject_init(self);
}

ComGoogleCommonUtilConcurrentAbstractService_1 *new_ComGoogleCommonUtilConcurrentAbstractService_1_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractService_1, init)
}

ComGoogleCommonUtilConcurrentAbstractService_1 *create_ComGoogleCommonUtilConcurrentAbstractService_1_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractService_1, init)
}

@implementation ComGoogleCommonUtilConcurrentAbstractService_2

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentAbstractService_2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)callWithId:(ComGoogleCommonUtilConcurrentService_Listener *)listener {
  [((ComGoogleCommonUtilConcurrentService_Listener *) nil_chk(listener)) running];
}

- (NSString *)description {
  return @"running()";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(callWithId:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LComGoogleCommonUtilConcurrentService_Listener;", "toString", "LComGoogleCommonUtilConcurrentAbstractService;", "Ljava/lang/Object;Lcom/google/common/util/concurrent/ListenerCallQueue$Event<Lcom/google/common/util/concurrent/Service$Listener;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractService_2 = { "", "com.google.common.util.concurrent", ptrTable, methods, NULL, 7, 0x8018, 3, 0, 3, -1, -1, 4, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractService_2;
}

@end

void ComGoogleCommonUtilConcurrentAbstractService_2_init(ComGoogleCommonUtilConcurrentAbstractService_2 *self) {
  NSObject_init(self);
}

ComGoogleCommonUtilConcurrentAbstractService_2 *new_ComGoogleCommonUtilConcurrentAbstractService_2_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractService_2, init)
}

ComGoogleCommonUtilConcurrentAbstractService_2 *create_ComGoogleCommonUtilConcurrentAbstractService_2_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractService_2, init)
}

@implementation ComGoogleCommonUtilConcurrentAbstractService_3

- (instancetype)initWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)capture$0 {
  ComGoogleCommonUtilConcurrentAbstractService_3_initWithComGoogleCommonUtilConcurrentService_State_(self, capture$0);
  return self;
}

- (void)callWithId:(ComGoogleCommonUtilConcurrentService_Listener *)listener {
  [((ComGoogleCommonUtilConcurrentService_Listener *) nil_chk(listener)) terminatedWithComGoogleCommonUtilConcurrentService_State:val$from_];
}

- (NSString *)description {
  return JreStrcat("$@$", @"terminated({from = ", val$from_, @"})");
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentService_State:);
  methods[1].selector = @selector(callWithId:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$from_", "LComGoogleCommonUtilConcurrentService_State;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LComGoogleCommonUtilConcurrentService_Listener;", "toString", "LComGoogleCommonUtilConcurrentAbstractService;", "terminatedEventWithComGoogleCommonUtilConcurrentService_State:", "Ljava/lang/Object;Lcom/google/common/util/concurrent/ListenerCallQueue$Event<Lcom/google/common/util/concurrent/Service$Listener;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractService_3 = { "", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x8018, 3, 1, 3, -1, 4, 5, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractService_3;
}

@end

void ComGoogleCommonUtilConcurrentAbstractService_3_initWithComGoogleCommonUtilConcurrentService_State_(ComGoogleCommonUtilConcurrentAbstractService_3 *self, ComGoogleCommonUtilConcurrentService_State *capture$0) {
  self->val$from_ = capture$0;
  NSObject_init(self);
}

ComGoogleCommonUtilConcurrentAbstractService_3 *new_ComGoogleCommonUtilConcurrentAbstractService_3_initWithComGoogleCommonUtilConcurrentService_State_(ComGoogleCommonUtilConcurrentService_State *capture$0) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractService_3, initWithComGoogleCommonUtilConcurrentService_State_, capture$0)
}

ComGoogleCommonUtilConcurrentAbstractService_3 *create_ComGoogleCommonUtilConcurrentAbstractService_3_initWithComGoogleCommonUtilConcurrentService_State_(ComGoogleCommonUtilConcurrentService_State *capture$0) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractService_3, initWithComGoogleCommonUtilConcurrentService_State_, capture$0)
}

@implementation ComGoogleCommonUtilConcurrentAbstractService_4

- (instancetype)initWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)capture$0 {
  ComGoogleCommonUtilConcurrentAbstractService_4_initWithComGoogleCommonUtilConcurrentService_State_(self, capture$0);
  return self;
}

- (void)callWithId:(ComGoogleCommonUtilConcurrentService_Listener *)listener {
  [((ComGoogleCommonUtilConcurrentService_Listener *) nil_chk(listener)) stoppingWithComGoogleCommonUtilConcurrentService_State:val$from_];
}

- (NSString *)description {
  return JreStrcat("$@$", @"stopping({from = ", val$from_, @"})");
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentService_State:);
  methods[1].selector = @selector(callWithId:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$from_", "LComGoogleCommonUtilConcurrentService_State;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LComGoogleCommonUtilConcurrentService_Listener;", "toString", "LComGoogleCommonUtilConcurrentAbstractService;", "stoppingEventWithComGoogleCommonUtilConcurrentService_State:", "Ljava/lang/Object;Lcom/google/common/util/concurrent/ListenerCallQueue$Event<Lcom/google/common/util/concurrent/Service$Listener;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractService_4 = { "", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x8018, 3, 1, 3, -1, 4, 5, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractService_4;
}

@end

void ComGoogleCommonUtilConcurrentAbstractService_4_initWithComGoogleCommonUtilConcurrentService_State_(ComGoogleCommonUtilConcurrentAbstractService_4 *self, ComGoogleCommonUtilConcurrentService_State *capture$0) {
  self->val$from_ = capture$0;
  NSObject_init(self);
}

ComGoogleCommonUtilConcurrentAbstractService_4 *new_ComGoogleCommonUtilConcurrentAbstractService_4_initWithComGoogleCommonUtilConcurrentService_State_(ComGoogleCommonUtilConcurrentService_State *capture$0) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractService_4, initWithComGoogleCommonUtilConcurrentService_State_, capture$0)
}

ComGoogleCommonUtilConcurrentAbstractService_4 *create_ComGoogleCommonUtilConcurrentAbstractService_4_initWithComGoogleCommonUtilConcurrentService_State_(ComGoogleCommonUtilConcurrentService_State *capture$0) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractService_4, initWithComGoogleCommonUtilConcurrentService_State_, capture$0)
}

@implementation ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard

- (instancetype)initWithComGoogleCommonUtilConcurrentAbstractService:(ComGoogleCommonUtilConcurrentAbstractService *)outer$ {
  ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(self, outer$);
  return self;
}

- (jboolean)isSatisfied {
  return ComGoogleCommonUtilConcurrentAbstractService_state(this$0_) == JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, NEW);
}

- (void)__javaClone:(ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentAbstractService:);
  methods[1].selector = @selector(isSatisfied);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonUtilConcurrentAbstractService;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentAbstractService;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard = { "IsStartableGuard", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x12, 2, 1, 0, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard;
}

@end

void ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard *self, ComGoogleCommonUtilConcurrentAbstractService *outer$) {
  self->this$0_ = outer$;
  ComGoogleCommonUtilConcurrentMonitor_Guard_initWithComGoogleCommonUtilConcurrentMonitor_(self, outer$->monitor_);
}

ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard *new_ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService *outer$) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard, initWithComGoogleCommonUtilConcurrentAbstractService_, outer$)
}

ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard *create_ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService *outer$) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard, initWithComGoogleCommonUtilConcurrentAbstractService_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard)

@implementation ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard

- (instancetype)initWithComGoogleCommonUtilConcurrentAbstractService:(ComGoogleCommonUtilConcurrentAbstractService *)outer$ {
  ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(self, outer$);
  return self;
}

- (jboolean)isSatisfied {
  return [((ComGoogleCommonUtilConcurrentService_State *) nil_chk(ComGoogleCommonUtilConcurrentAbstractService_state(this$0_))) compareToWithId:JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, RUNNING)] <= 0;
}

- (void)__javaClone:(ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentAbstractService:);
  methods[1].selector = @selector(isSatisfied);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonUtilConcurrentAbstractService;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentAbstractService;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard = { "IsStoppableGuard", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x12, 2, 1, 0, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard;
}

@end

void ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard *self, ComGoogleCommonUtilConcurrentAbstractService *outer$) {
  self->this$0_ = outer$;
  ComGoogleCommonUtilConcurrentMonitor_Guard_initWithComGoogleCommonUtilConcurrentMonitor_(self, outer$->monitor_);
}

ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard *new_ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService *outer$) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard, initWithComGoogleCommonUtilConcurrentAbstractService_, outer$)
}

ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard *create_ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService *outer$) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard, initWithComGoogleCommonUtilConcurrentAbstractService_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard)

@implementation ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard

- (instancetype)initWithComGoogleCommonUtilConcurrentAbstractService:(ComGoogleCommonUtilConcurrentAbstractService *)outer$ {
  ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(self, outer$);
  return self;
}

- (jboolean)isSatisfied {
  return [((ComGoogleCommonUtilConcurrentService_State *) nil_chk(ComGoogleCommonUtilConcurrentAbstractService_state(this$0_))) compareToWithId:JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, RUNNING)] >= 0;
}

- (void)__javaClone:(ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentAbstractService:);
  methods[1].selector = @selector(isSatisfied);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonUtilConcurrentAbstractService;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentAbstractService;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard = { "HasReachedRunningGuard", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x12, 2, 1, 0, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard;
}

@end

void ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard *self, ComGoogleCommonUtilConcurrentAbstractService *outer$) {
  self->this$0_ = outer$;
  ComGoogleCommonUtilConcurrentMonitor_Guard_initWithComGoogleCommonUtilConcurrentMonitor_(self, outer$->monitor_);
}

ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard *new_ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService *outer$) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard, initWithComGoogleCommonUtilConcurrentAbstractService_, outer$)
}

ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard *create_ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService *outer$) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard, initWithComGoogleCommonUtilConcurrentAbstractService_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard)

@implementation ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard

- (instancetype)initWithComGoogleCommonUtilConcurrentAbstractService:(ComGoogleCommonUtilConcurrentAbstractService *)outer$ {
  ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(self, outer$);
  return self;
}

- (jboolean)isSatisfied {
  return [((ComGoogleCommonUtilConcurrentService_State *) nil_chk(ComGoogleCommonUtilConcurrentAbstractService_state(this$0_))) isTerminal];
}

- (void)__javaClone:(ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentAbstractService:);
  methods[1].selector = @selector(isSatisfied);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonUtilConcurrentAbstractService;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentAbstractService;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard = { "IsStoppedGuard", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x12, 2, 1, 0, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard;
}

@end

void ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard *self, ComGoogleCommonUtilConcurrentAbstractService *outer$) {
  self->this$0_ = outer$;
  ComGoogleCommonUtilConcurrentMonitor_Guard_initWithComGoogleCommonUtilConcurrentMonitor_(self, outer$->monitor_);
}

ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard *new_ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService *outer$) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard, initWithComGoogleCommonUtilConcurrentAbstractService_, outer$)
}

ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard *create_ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService *outer$) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard, initWithComGoogleCommonUtilConcurrentAbstractService_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard)

@implementation ComGoogleCommonUtilConcurrentAbstractService_5

- (instancetype)initWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)capture$0
                                                   withNSException:(NSException *)capture$1 {
  ComGoogleCommonUtilConcurrentAbstractService_5_initWithComGoogleCommonUtilConcurrentService_State_withNSException_(self, capture$0, capture$1);
  return self;
}

- (void)callWithId:(ComGoogleCommonUtilConcurrentService_Listener *)listener {
  [((ComGoogleCommonUtilConcurrentService_Listener *) nil_chk(listener)) failedWithComGoogleCommonUtilConcurrentService_State:val$from_ withNSException:val$cause_];
}

- (NSString *)description {
  return JreStrcat("$@$@$", @"failed({from = ", val$from_, @", cause = ", val$cause_, @"})");
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentService_State:withNSException:);
  methods[1].selector = @selector(callWithId:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$from_", "LComGoogleCommonUtilConcurrentService_State;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$cause_", "LNSException;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LComGoogleCommonUtilConcurrentService_Listener;", "toString", "LComGoogleCommonUtilConcurrentAbstractService;", "enqueueFailedEventWithComGoogleCommonUtilConcurrentService_State:withNSException:", "Ljava/lang/Object;Lcom/google/common/util/concurrent/ListenerCallQueue$Event<Lcom/google/common/util/concurrent/Service$Listener;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractService_5 = { "", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x8018, 3, 2, 3, -1, 4, 5, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractService_5;
}

@end

void ComGoogleCommonUtilConcurrentAbstractService_5_initWithComGoogleCommonUtilConcurrentService_State_withNSException_(ComGoogleCommonUtilConcurrentAbstractService_5 *self, ComGoogleCommonUtilConcurrentService_State *capture$0, NSException *capture$1) {
  self->val$from_ = capture$0;
  self->val$cause_ = capture$1;
  NSObject_init(self);
}

ComGoogleCommonUtilConcurrentAbstractService_5 *new_ComGoogleCommonUtilConcurrentAbstractService_5_initWithComGoogleCommonUtilConcurrentService_State_withNSException_(ComGoogleCommonUtilConcurrentService_State *capture$0, NSException *capture$1) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractService_5, initWithComGoogleCommonUtilConcurrentService_State_withNSException_, capture$0, capture$1)
}

ComGoogleCommonUtilConcurrentAbstractService_5 *create_ComGoogleCommonUtilConcurrentAbstractService_5_initWithComGoogleCommonUtilConcurrentService_State_withNSException_(ComGoogleCommonUtilConcurrentService_State *capture$0, NSException *capture$1) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractService_5, initWithComGoogleCommonUtilConcurrentService_State_withNSException_, capture$0, capture$1)
}

@implementation ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot

- (instancetype)initWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)internalState {
  ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_(self, internalState);
  return self;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)internalState
                                                       withBoolean:(jboolean)shutdownWhenStartupFinishes
                                                   withNSException:(NSException *)failure {
  ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_withBoolean_withNSException_(self, internalState, shutdownWhenStartupFinishes, failure);
  return self;
}

- (ComGoogleCommonUtilConcurrentService_State *)externalState {
  if (shutdownWhenStartupFinishes_ && state_ == JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, STARTING)) {
    return JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, STOPPING);
  }
  else {
    return state_;
  }
}

- (NSException *)failureCause {
  ComGoogleCommonBasePreconditions_checkStateWithBoolean_withNSString_withId_(state_ == JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, FAILED), @"failureCause() is only valid if the service has failed, service is %s", state_);
  return failure_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, 2 },
    { NULL, "LComGoogleCommonUtilConcurrentService_State;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSException;", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentService_State:);
  methods[1].selector = @selector(initWithComGoogleCommonUtilConcurrentService_State:withBoolean:withNSException:);
  methods[2].selector = @selector(externalState);
  methods[3].selector = @selector(failureCause);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "state_", "LComGoogleCommonUtilConcurrentService_State;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "shutdownWhenStartupFinishes_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "failure_", "LNSException;", .constantValue.asLong = 0, 0x10, -1, -1, -1, 3 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentService_State;", "LComGoogleCommonUtilConcurrentService_State;ZLNSException;", (void *)&ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot__Annotations$0, (void *)&ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot__Annotations$1, "LComGoogleCommonUtilConcurrentAbstractService;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot = { "StateSnapshot", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x1a, 4, 3, 4, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot;
}

@end

void ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_(ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot *self, ComGoogleCommonUtilConcurrentService_State *internalState) {
  ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_withBoolean_withNSException_(self, internalState, false, nil);
}

ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot *new_ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_(ComGoogleCommonUtilConcurrentService_State *internalState) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot, initWithComGoogleCommonUtilConcurrentService_State_, internalState)
}

ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot *create_ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_(ComGoogleCommonUtilConcurrentService_State *internalState) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot, initWithComGoogleCommonUtilConcurrentService_State_, internalState)
}

void ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_withBoolean_withNSException_(ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot *self, ComGoogleCommonUtilConcurrentService_State *internalState, jboolean shutdownWhenStartupFinishes, NSException *failure) {
  NSObject_init(self);
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_(!shutdownWhenStartupFinishes || internalState == JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, STARTING), @"shudownWhenStartupFinishes can only be set if state is STARTING. Got %s instead.", internalState);
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_withId_(!(failure != nil ^ internalState == JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, FAILED)), @"A failure cause should be set if and only if the state is failed.  Got %s and %s instead.", internalState, failure);
  self->state_ = internalState;
  self->shutdownWhenStartupFinishes_ = shutdownWhenStartupFinishes;
  self->failure_ = failure;
}

ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot *new_ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_withBoolean_withNSException_(ComGoogleCommonUtilConcurrentService_State *internalState, jboolean shutdownWhenStartupFinishes, NSException *failure) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot, initWithComGoogleCommonUtilConcurrentService_State_withBoolean_withNSException_, internalState, shutdownWhenStartupFinishes, failure)
}

ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot *create_ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_withBoolean_withNSException_(ComGoogleCommonUtilConcurrentService_State *internalState, jboolean shutdownWhenStartupFinishes, NSException *failure) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot, initWithComGoogleCommonUtilConcurrentService_State_withBoolean_withNSException_, internalState, shutdownWhenStartupFinishes, failure)
}

IOSObjectArray *ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:3 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot__Annotations$1() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot)
