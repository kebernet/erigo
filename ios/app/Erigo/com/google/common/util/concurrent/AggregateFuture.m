//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/util/concurrent/AggregateFuture.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/collect/ImmutableCollection.h"
#include "com/google/common/util/concurrent/AbstractFuture.h"
#include "com/google/common/util/concurrent/AggregateFuture.h"
#include "com/google/common/util/concurrent/AggregateFutureState.h"
#include "com/google/common/util/concurrent/Futures.h"
#include "com/google/common/util/concurrent/ListenableFuture.h"
#include "com/google/common/util/concurrent/MoreExecutors.h"
#include "java/lang/Error.h"
#include "java/lang/Runnable.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ExecutionException.h"
#include "java/util/concurrent/Executor.h"
#include "java/util/concurrent/Future.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "javax/annotation/Nullable.h"

@interface ComGoogleCommonUtilConcurrentAggregateFuture () {
 @public
  ComGoogleCommonUtilConcurrentAggregateFuture_RunningState *runningState_;
}

+ (jboolean)addCausalChainWithJavaUtilSet:(id<JavaUtilSet>)seen
                          withNSException:(NSException *)t;
#define withJavaLangThrowable withNSException

@end

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentAggregateFuture, runningState_, ComGoogleCommonUtilConcurrentAggregateFuture_RunningState *)

inline JavaUtilLoggingLogger *ComGoogleCommonUtilConcurrentAggregateFuture_get_logger();
static JavaUtilLoggingLogger *ComGoogleCommonUtilConcurrentAggregateFuture_logger;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonUtilConcurrentAggregateFuture, logger, JavaUtilLoggingLogger *)

__attribute__((unused)) static jboolean ComGoogleCommonUtilConcurrentAggregateFuture_addCausalChainWithJavaUtilSet_withNSException_(id<JavaUtilSet> seen, NSException *t);

@interface ComGoogleCommonUtilConcurrentAggregateFuture_RunningState () {
 @public
  ComGoogleCommonUtilConcurrentAggregateFuture *this$0_;
  ComGoogleCommonCollectImmutableCollection *futures_;
  jboolean allMustSucceed_;
  jboolean collectsValues_;
}

- (void)init__ OBJC_METHOD_FAMILY_NONE;

- (void)handleExceptionWithNSException:(NSException *)throwable;
#define handleExceptionWithJavaLangThrowable handleExceptionWithNSException

- (void)handleOneInputDoneWithInt:(jint)index
     withJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)future;

- (void)decrementCountAndMaybeComplete;

- (void)processCompleted;

@end

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentAggregateFuture_RunningState, futures_, ComGoogleCommonCollectImmutableCollection *)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_init__(ComGoogleCommonUtilConcurrentAggregateFuture_RunningState *self);

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_handleExceptionWithNSException_(ComGoogleCommonUtilConcurrentAggregateFuture_RunningState *self, NSException *throwable);

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_handleOneInputDoneWithInt_withJavaUtilConcurrentFuture_(ComGoogleCommonUtilConcurrentAggregateFuture_RunningState *self, jint index, id<JavaUtilConcurrentFuture> future);

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_decrementCountAndMaybeComplete(ComGoogleCommonUtilConcurrentAggregateFuture_RunningState *self);

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_processCompleted(ComGoogleCommonUtilConcurrentAggregateFuture_RunningState *self);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonUtilConcurrentAggregateFuture_RunningState__Annotations$0();

@interface ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_1 : NSObject < JavaLangRunnable > {
 @public
  ComGoogleCommonUtilConcurrentAggregateFuture_RunningState *this$0_;
  jint val$index_;
  id<ComGoogleCommonUtilConcurrentListenableFuture> val$listenable_;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentAggregateFuture_RunningState:(ComGoogleCommonUtilConcurrentAggregateFuture_RunningState *)outer$
                                                                          withInt:(jint)capture$0
                                withComGoogleCommonUtilConcurrentListenableFuture:(id<ComGoogleCommonUtilConcurrentListenableFuture>)capture$1;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_1)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_1_initWithComGoogleCommonUtilConcurrentAggregateFuture_RunningState_withInt_withComGoogleCommonUtilConcurrentListenableFuture_(ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_1 *self, ComGoogleCommonUtilConcurrentAggregateFuture_RunningState *outer$, jint capture$0, id<ComGoogleCommonUtilConcurrentListenableFuture> capture$1);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_1 *new_ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_1_initWithComGoogleCommonUtilConcurrentAggregateFuture_RunningState_withInt_withComGoogleCommonUtilConcurrentListenableFuture_(ComGoogleCommonUtilConcurrentAggregateFuture_RunningState *outer$, jint capture$0, id<ComGoogleCommonUtilConcurrentListenableFuture> capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_1 *create_ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_1_initWithComGoogleCommonUtilConcurrentAggregateFuture_RunningState_withInt_withComGoogleCommonUtilConcurrentListenableFuture_(ComGoogleCommonUtilConcurrentAggregateFuture_RunningState *outer$, jint capture$0, id<ComGoogleCommonUtilConcurrentListenableFuture> capture$1);

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonUtilConcurrentAggregateFuture)

@implementation ComGoogleCommonUtilConcurrentAggregateFuture

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentAggregateFuture_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)afterDone {
  [super afterDone];
  ComGoogleCommonUtilConcurrentAggregateFuture_RunningState *localRunningState = runningState_;
  if (localRunningState != nil) {
    self->runningState_ = nil;
    ComGoogleCommonCollectImmutableCollection *futures = localRunningState->futures_;
    jboolean wasInterrupted = [self wasInterrupted];
    if ([self wasInterrupted]) {
      [localRunningState interruptTask];
    }
    if ([self isCancelled] & (futures != nil)) {
      for (id<ComGoogleCommonUtilConcurrentListenableFuture> __strong future in nil_chk(futures)) {
        [((id<ComGoogleCommonUtilConcurrentListenableFuture>) nil_chk(future)) cancelWithBoolean:wasInterrupted];
      }
    }
  }
}

- (void)init__WithComGoogleCommonUtilConcurrentAggregateFuture_RunningState:(ComGoogleCommonUtilConcurrentAggregateFuture_RunningState *)runningState {
  self->runningState_ = runningState;
  ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_init__(nil_chk(runningState));
}

+ (jboolean)addCausalChainWithJavaUtilSet:(id<JavaUtilSet>)seen
                          withNSException:(NSException *)t {
  return ComGoogleCommonUtilConcurrentAggregateFuture_addCausalChainWithJavaUtilSet_withNSException_(seen, t);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x14, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x10, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(afterDone);
  methods[2].selector = @selector(init__WithComGoogleCommonUtilConcurrentAggregateFuture_RunningState:);
  methods[3].selector = @selector(addCausalChainWithJavaUtilSet:withNSException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 5, -1, -1 },
    { "runningState_", "LComGoogleCommonUtilConcurrentAggregateFuture_RunningState;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "LComGoogleCommonUtilConcurrentAggregateFuture_RunningState;", "addCausalChain", "LJavaUtilSet;LNSException;", "(Ljava/util/Set<Ljava/lang/Throwable;>;Ljava/lang/Throwable;)Z", &ComGoogleCommonUtilConcurrentAggregateFuture_logger, "<InputT:Ljava/lang/Object;OutputT:Ljava/lang/Object;>Lcom/google/common/util/concurrent/AbstractFuture$TrustedFuture<TOutputT;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAggregateFuture = { "AggregateFuture", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x400, 4, 2, -1, 1, -1, 6, -1 };
  return &_ComGoogleCommonUtilConcurrentAggregateFuture;
}

+ (void)initialize {
  if (self == [ComGoogleCommonUtilConcurrentAggregateFuture class]) {
    ComGoogleCommonUtilConcurrentAggregateFuture_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([ComGoogleCommonUtilConcurrentAggregateFuture_class_() getName]);
    J2OBJC_SET_INITIALIZED(ComGoogleCommonUtilConcurrentAggregateFuture)
  }
}

@end

void ComGoogleCommonUtilConcurrentAggregateFuture_init(ComGoogleCommonUtilConcurrentAggregateFuture *self) {
  ComGoogleCommonUtilConcurrentAbstractFuture_TrustedFuture_init(self);
}

jboolean ComGoogleCommonUtilConcurrentAggregateFuture_addCausalChainWithJavaUtilSet_withNSException_(id<JavaUtilSet> seen, NSException *t) {
  ComGoogleCommonUtilConcurrentAggregateFuture_initialize();
  for (; t != nil; t = [t getCause]) {
    jboolean firstTimeSeen = [((id<JavaUtilSet>) nil_chk(seen)) addWithId:t];
    if (!firstTimeSeen) {
      return false;
    }
  }
  return true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentAggregateFuture)

@implementation ComGoogleCommonUtilConcurrentAggregateFuture_RunningState

- (instancetype)initWithComGoogleCommonUtilConcurrentAggregateFuture:(ComGoogleCommonUtilConcurrentAggregateFuture *)outer$
                       withComGoogleCommonCollectImmutableCollection:(ComGoogleCommonCollectImmutableCollection *)futures
                                                         withBoolean:(jboolean)allMustSucceed
                                                         withBoolean:(jboolean)collectsValues {
  ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_initWithComGoogleCommonUtilConcurrentAggregateFuture_withComGoogleCommonCollectImmutableCollection_withBoolean_withBoolean_(self, outer$, futures, allMustSucceed, collectsValues);
  return self;
}

- (void)run {
  ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_decrementCountAndMaybeComplete(self);
}

- (void)init__ {
  ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_init__(self);
}

- (void)handleExceptionWithNSException:(NSException *)throwable {
  ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_handleExceptionWithNSException_(self, throwable);
}

- (void)addInitialExceptionWithJavaUtilSet:(id<JavaUtilSet>)seen {
  if (![this$0_ isCancelled]) {
    jboolean unused = ComGoogleCommonUtilConcurrentAggregateFuture_addCausalChainWithJavaUtilSet_withNSException_(seen, [this$0_ trustedGetException]);
  }
}

- (void)handleOneInputDoneWithInt:(jint)index
     withJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)future {
  ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_handleOneInputDoneWithInt_withJavaUtilConcurrentFuture_(self, index, future);
}

- (void)decrementCountAndMaybeComplete {
  ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_decrementCountAndMaybeComplete(self);
}

- (void)processCompleted {
  ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_processCompleted(self);
}

- (void)releaseResourcesAfterFailure {
  self->futures_ = nil;
}

- (void)collectOneValueWithBoolean:(jboolean)allMustSucceed
                           withInt:(jint)index
                            withId:(id)returnValue {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)handleAllCompleted {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)interruptTask {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x10, 5, 6, -1, 7, -1, -1 },
    { NULL, "V", 0x2, 8, 9, -1, 10, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x400, 11, 12, -1, 13, -1, 14 },
    { NULL, "V", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentAggregateFuture:withComGoogleCommonCollectImmutableCollection:withBoolean:withBoolean:);
  methods[1].selector = @selector(run);
  methods[2].selector = @selector(init__);
  methods[3].selector = @selector(handleExceptionWithNSException:);
  methods[4].selector = @selector(addInitialExceptionWithJavaUtilSet:);
  methods[5].selector = @selector(handleOneInputDoneWithInt:withJavaUtilConcurrentFuture:);
  methods[6].selector = @selector(decrementCountAndMaybeComplete);
  methods[7].selector = @selector(processCompleted);
  methods[8].selector = @selector(releaseResourcesAfterFailure);
  methods[9].selector = @selector(collectOneValueWithBoolean:withInt:withId:);
  methods[10].selector = @selector(handleAllCompleted);
  methods[11].selector = @selector(interruptTask);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonUtilConcurrentAggregateFuture;", .constantValue.asLong = 0, 0x1012, -1, -1, 15, -1 },
    { "futures_", "LComGoogleCommonCollectImmutableCollection;", .constantValue.asLong = 0, 0x2, -1, -1, 16, -1 },
    { "allMustSucceed_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "collectsValues_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonCollectImmutableCollection;ZZ", "(Lcom/google/common/collect/ImmutableCollection<+Lcom/google/common/util/concurrent/ListenableFuture<+TInputT;>;>;ZZ)V", "init", "handleException", "LNSException;", "addInitialException", "LJavaUtilSet;", "(Ljava/util/Set<Ljava/lang/Throwable;>;)V", "handleOneInputDone", "ILJavaUtilConcurrentFuture;", "(ILjava/util/concurrent/Future<+TInputT;>;)V", "collectOneValue", "ZILNSObject;", "(ZITInputT;)V", (void *)&ComGoogleCommonUtilConcurrentAggregateFuture_RunningState__Annotations$0, "Lcom/google/common/util/concurrent/AggregateFuture<TInputT;TOutputT;>;", "Lcom/google/common/collect/ImmutableCollection<+Lcom/google/common/util/concurrent/ListenableFuture<+TInputT;>;>;", "LComGoogleCommonUtilConcurrentAggregateFuture;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAggregateFuture_RunningState = { "RunningState", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x400, 12, 4, 17, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentAggregateFuture_RunningState;
}

@end

void ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_initWithComGoogleCommonUtilConcurrentAggregateFuture_withComGoogleCommonCollectImmutableCollection_withBoolean_withBoolean_(ComGoogleCommonUtilConcurrentAggregateFuture_RunningState *self, ComGoogleCommonUtilConcurrentAggregateFuture *outer$, ComGoogleCommonCollectImmutableCollection *futures, jboolean allMustSucceed, jboolean collectsValues) {
  self->this$0_ = outer$;
  ComGoogleCommonUtilConcurrentAggregateFutureState_initWithInt_(self, [((ComGoogleCommonCollectImmutableCollection *) nil_chk(futures)) size]);
  self->futures_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(futures);
  self->allMustSucceed_ = allMustSucceed;
  self->collectsValues_ = collectsValues;
}

void ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_init__(ComGoogleCommonUtilConcurrentAggregateFuture_RunningState *self) {
  if ([((ComGoogleCommonCollectImmutableCollection *) nil_chk(self->futures_)) isEmpty]) {
    [self handleAllCompleted];
    return;
  }
  if (self->allMustSucceed_) {
    jint i = 0;
    for (id<ComGoogleCommonUtilConcurrentListenableFuture> __strong listenable in nil_chk(self->futures_)) {
      jint index = i++;
      [((id<ComGoogleCommonUtilConcurrentListenableFuture>) nil_chk(listenable)) addListenerWithJavaLangRunnable:new_ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_1_initWithComGoogleCommonUtilConcurrentAggregateFuture_RunningState_withInt_withComGoogleCommonUtilConcurrentListenableFuture_(self, index, listenable) withJavaUtilConcurrentExecutor:ComGoogleCommonUtilConcurrentMoreExecutors_directExecutor()];
    }
  }
  else {
    for (id<ComGoogleCommonUtilConcurrentListenableFuture> __strong listenable in nil_chk(self->futures_)) {
      [((id<ComGoogleCommonUtilConcurrentListenableFuture>) nil_chk(listenable)) addListenerWithJavaLangRunnable:self withJavaUtilConcurrentExecutor:ComGoogleCommonUtilConcurrentMoreExecutors_directExecutor()];
    }
  }
}

void ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_handleExceptionWithNSException_(ComGoogleCommonUtilConcurrentAggregateFuture_RunningState *self, NSException *throwable) {
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(throwable);
  jboolean completedWithFailure = false;
  jboolean firstTimeSeeingThisException = true;
  if (self->allMustSucceed_) {
    completedWithFailure = [self->this$0_ setExceptionWithNSException:throwable];
    if (completedWithFailure) {
      [self releaseResourcesAfterFailure];
    }
    else {
      firstTimeSeeingThisException = ComGoogleCommonUtilConcurrentAggregateFuture_addCausalChainWithJavaUtilSet_withNSException_([self getOrInitSeenExceptions], throwable);
    }
  }
  if ([throwable isKindOfClass:[JavaLangError class]] | (self->allMustSucceed_ & !completedWithFailure & firstTimeSeeingThisException)) {
    NSString *message = ([throwable isKindOfClass:[JavaLangError class]]) ? @"Input Future failed with Error" : @"Got more than one input Future failure. Logging failures after the first";
    [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(ComGoogleCommonUtilConcurrentAggregateFuture, logger))) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:message withNSException:throwable];
  }
}

void ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_handleOneInputDoneWithInt_withJavaUtilConcurrentFuture_(ComGoogleCommonUtilConcurrentAggregateFuture_RunningState *self, jint index, id<JavaUtilConcurrentFuture> future) {
  ComGoogleCommonBasePreconditions_checkStateWithBoolean_withId_(self->allMustSucceed_ || ![self->this$0_ isDone] || [self->this$0_ isCancelled], @"Future was done before all dependencies completed");
  @try {
    ComGoogleCommonBasePreconditions_checkStateWithBoolean_withId_([((id<JavaUtilConcurrentFuture>) nil_chk(future)) isDone], @"Tried to set value from future which is not done");
    if (self->allMustSucceed_) {
      if ([future isCancelled]) {
        self->this$0_->runningState_ = nil;
        [self->this$0_ cancelWithBoolean:false];
      }
      else {
        id result = ComGoogleCommonUtilConcurrentFutures_getDoneWithJavaUtilConcurrentFuture_(future);
        if (self->collectsValues_) {
          [self collectOneValueWithBoolean:self->allMustSucceed_ withInt:index withId:result];
        }
      }
    }
    else if (self->collectsValues_ && ![future isCancelled]) {
      [self collectOneValueWithBoolean:self->allMustSucceed_ withInt:index withId:ComGoogleCommonUtilConcurrentFutures_getDoneWithJavaUtilConcurrentFuture_(future)];
    }
  }
  @catch (JavaUtilConcurrentExecutionException *e) {
    ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_handleExceptionWithNSException_(self, [e getCause]);
  }
  @catch (NSException *t) {
    ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_handleExceptionWithNSException_(self, t);
  }
}

void ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_decrementCountAndMaybeComplete(ComGoogleCommonUtilConcurrentAggregateFuture_RunningState *self) {
  jint newRemaining = [self decrementRemainingAndGet];
  ComGoogleCommonBasePreconditions_checkStateWithBoolean_withId_(newRemaining >= 0, @"Less than 0 remaining futures");
  if (newRemaining == 0) {
    ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_processCompleted(self);
  }
}

void ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_processCompleted(ComGoogleCommonUtilConcurrentAggregateFuture_RunningState *self) {
  if (self->collectsValues_ & !self->allMustSucceed_) {
    jint i = 0;
    for (id<ComGoogleCommonUtilConcurrentListenableFuture> __strong listenable in nil_chk(self->futures_)) {
      ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_handleOneInputDoneWithInt_withJavaUtilConcurrentFuture_(self, i++, listenable);
    }
  }
  [self handleAllCompleted];
}

IOSObjectArray *ComGoogleCommonUtilConcurrentAggregateFuture_RunningState__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:3 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentAggregateFuture_RunningState)

@implementation ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_1

- (instancetype)initWithComGoogleCommonUtilConcurrentAggregateFuture_RunningState:(ComGoogleCommonUtilConcurrentAggregateFuture_RunningState *)outer$
                                                                          withInt:(jint)capture$0
                                withComGoogleCommonUtilConcurrentListenableFuture:(id<ComGoogleCommonUtilConcurrentListenableFuture>)capture$1 {
  ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_1_initWithComGoogleCommonUtilConcurrentAggregateFuture_RunningState_withInt_withComGoogleCommonUtilConcurrentListenableFuture_(self, outer$, capture$0, capture$1);
  return self;
}

- (void)run {
  @try {
    ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_handleOneInputDoneWithInt_withJavaUtilConcurrentFuture_(this$0_, val$index_, val$listenable_);
  }
  @finally {
    ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_decrementCountAndMaybeComplete(this$0_);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentAggregateFuture_RunningState:withInt:withComGoogleCommonUtilConcurrentListenableFuture:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonUtilConcurrentAggregateFuture_RunningState;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$index_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$listenable_", "LComGoogleCommonUtilConcurrentListenableFuture;", .constantValue.asLong = 0, 0x1012, -1, -1, 0, -1 },
  };
  static const void *ptrTable[] = { "Lcom/google/common/util/concurrent/ListenableFuture<+TInputT;>;", "LComGoogleCommonUtilConcurrentAggregateFuture_RunningState;", "init__" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_1 = { "", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x8018, 2, 3, 1, -1, 2, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_1;
}

@end

void ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_1_initWithComGoogleCommonUtilConcurrentAggregateFuture_RunningState_withInt_withComGoogleCommonUtilConcurrentListenableFuture_(ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_1 *self, ComGoogleCommonUtilConcurrentAggregateFuture_RunningState *outer$, jint capture$0, id<ComGoogleCommonUtilConcurrentListenableFuture> capture$1) {
  self->this$0_ = outer$;
  self->val$index_ = capture$0;
  self->val$listenable_ = capture$1;
  NSObject_init(self);
}

ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_1 *new_ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_1_initWithComGoogleCommonUtilConcurrentAggregateFuture_RunningState_withInt_withComGoogleCommonUtilConcurrentListenableFuture_(ComGoogleCommonUtilConcurrentAggregateFuture_RunningState *outer$, jint capture$0, id<ComGoogleCommonUtilConcurrentListenableFuture> capture$1) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_1, initWithComGoogleCommonUtilConcurrentAggregateFuture_RunningState_withInt_withComGoogleCommonUtilConcurrentListenableFuture_, outer$, capture$0, capture$1)
}

ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_1 *create_ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_1_initWithComGoogleCommonUtilConcurrentAggregateFuture_RunningState_withInt_withComGoogleCommonUtilConcurrentListenableFuture_(ComGoogleCommonUtilConcurrentAggregateFuture_RunningState *outer$, jint capture$0, id<ComGoogleCommonUtilConcurrentListenableFuture> capture$1) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_1, initWithComGoogleCommonUtilConcurrentAggregateFuture_RunningState_withInt_withComGoogleCommonUtilConcurrentListenableFuture_, outer$, capture$0, capture$1)
}
