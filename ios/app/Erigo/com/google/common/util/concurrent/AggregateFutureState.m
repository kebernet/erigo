//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/util/concurrent/AggregateFutureState.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/google/common/collect/Sets.h"
#include "com/google/common/util/concurrent/AggregateFutureState.h"
#include "java/util/Set.h"
#include "java/util/concurrent/atomic/AtomicIntegerFieldUpdater.h"
#include "java/util/concurrent/atomic/AtomicReferenceFieldUpdater.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"

@class ComGoogleCommonUtilConcurrentAggregateFutureState_AtomicHelper;

@interface ComGoogleCommonUtilConcurrentAggregateFutureState () {
 @public
  volatile_id seenExceptions_;
  volatile_jint remaining_;
}

@end

J2OBJC_VOLATILE_FIELD_SETTER(ComGoogleCommonUtilConcurrentAggregateFutureState, seenExceptions_, id<JavaUtilSet>)

inline ComGoogleCommonUtilConcurrentAggregateFutureState_AtomicHelper *ComGoogleCommonUtilConcurrentAggregateFutureState_get_ATOMIC_HELPER();
static ComGoogleCommonUtilConcurrentAggregateFutureState_AtomicHelper *ComGoogleCommonUtilConcurrentAggregateFutureState_ATOMIC_HELPER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonUtilConcurrentAggregateFutureState, ATOMIC_HELPER, ComGoogleCommonUtilConcurrentAggregateFutureState_AtomicHelper *)

inline JavaUtilLoggingLogger *ComGoogleCommonUtilConcurrentAggregateFutureState_get_log();
static JavaUtilLoggingLogger *ComGoogleCommonUtilConcurrentAggregateFutureState_log;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonUtilConcurrentAggregateFutureState, log, JavaUtilLoggingLogger *)

@interface ComGoogleCommonUtilConcurrentAggregateFutureState_AtomicHelper : NSObject

- (instancetype)init;

- (void)compareAndSetSeenExceptionsWithComGoogleCommonUtilConcurrentAggregateFutureState:(ComGoogleCommonUtilConcurrentAggregateFutureState *)state
                                                                         withJavaUtilSet:(id<JavaUtilSet>)expect
                                                                         withJavaUtilSet:(id<JavaUtilSet>)update;

- (jint)decrementAndGetRemainingCountWithComGoogleCommonUtilConcurrentAggregateFutureState:(ComGoogleCommonUtilConcurrentAggregateFutureState *)state;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAggregateFutureState_AtomicHelper)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAggregateFutureState_AtomicHelper_init(ComGoogleCommonUtilConcurrentAggregateFutureState_AtomicHelper *self);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentAggregateFutureState_AtomicHelper)

@interface ComGoogleCommonUtilConcurrentAggregateFutureState_SafeAtomicHelper : ComGoogleCommonUtilConcurrentAggregateFutureState_AtomicHelper {
 @public
  JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *seenExceptionsUpdater_;
  JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *remainingCountUpdater_;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater:(JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *)seenExceptionsUpdater
                      withJavaUtilConcurrentAtomicAtomicIntegerFieldUpdater:(JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *)remainingCountUpdater;

- (void)compareAndSetSeenExceptionsWithComGoogleCommonUtilConcurrentAggregateFutureState:(ComGoogleCommonUtilConcurrentAggregateFutureState *)state
                                                                         withJavaUtilSet:(id<JavaUtilSet>)expect
                                                                         withJavaUtilSet:(id<JavaUtilSet>)update;

- (jint)decrementAndGetRemainingCountWithComGoogleCommonUtilConcurrentAggregateFutureState:(ComGoogleCommonUtilConcurrentAggregateFutureState *)state;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAggregateFutureState_SafeAtomicHelper)

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentAggregateFutureState_SafeAtomicHelper, seenExceptionsUpdater_, JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentAggregateFutureState_SafeAtomicHelper, remainingCountUpdater_, JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAggregateFutureState_SafeAtomicHelper_initWithJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicIntegerFieldUpdater_(ComGoogleCommonUtilConcurrentAggregateFutureState_SafeAtomicHelper *self, JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *seenExceptionsUpdater, JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *remainingCountUpdater);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAggregateFutureState_SafeAtomicHelper *new_ComGoogleCommonUtilConcurrentAggregateFutureState_SafeAtomicHelper_initWithJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicIntegerFieldUpdater_(JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *seenExceptionsUpdater, JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *remainingCountUpdater) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAggregateFutureState_SafeAtomicHelper *create_ComGoogleCommonUtilConcurrentAggregateFutureState_SafeAtomicHelper_initWithJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicIntegerFieldUpdater_(JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *seenExceptionsUpdater, JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *remainingCountUpdater);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentAggregateFutureState_SafeAtomicHelper)

@interface ComGoogleCommonUtilConcurrentAggregateFutureState_SynchronizedAtomicHelper : ComGoogleCommonUtilConcurrentAggregateFutureState_AtomicHelper

- (instancetype)init;

- (void)compareAndSetSeenExceptionsWithComGoogleCommonUtilConcurrentAggregateFutureState:(ComGoogleCommonUtilConcurrentAggregateFutureState *)state
                                                                         withJavaUtilSet:(id<JavaUtilSet>)expect
                                                                         withJavaUtilSet:(id<JavaUtilSet>)update;

- (jint)decrementAndGetRemainingCountWithComGoogleCommonUtilConcurrentAggregateFutureState:(ComGoogleCommonUtilConcurrentAggregateFutureState *)state;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAggregateFutureState_SynchronizedAtomicHelper)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAggregateFutureState_SynchronizedAtomicHelper_init(ComGoogleCommonUtilConcurrentAggregateFutureState_SynchronizedAtomicHelper *self);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAggregateFutureState_SynchronizedAtomicHelper *new_ComGoogleCommonUtilConcurrentAggregateFutureState_SynchronizedAtomicHelper_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAggregateFutureState_SynchronizedAtomicHelper *create_ComGoogleCommonUtilConcurrentAggregateFutureState_SynchronizedAtomicHelper_init();

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentAggregateFutureState_SynchronizedAtomicHelper)

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonUtilConcurrentAggregateFutureState)

@implementation ComGoogleCommonUtilConcurrentAggregateFutureState

- (instancetype)initWithInt:(jint)remainingFutures {
  ComGoogleCommonUtilConcurrentAggregateFutureState_initWithInt_(self, remainingFutures);
  return self;
}

- (id<JavaUtilSet>)getOrInitSeenExceptions {
  id<JavaUtilSet> seenExceptionsLocal = JreLoadVolatileId(&seenExceptions_);
  if (seenExceptionsLocal == nil) {
    seenExceptionsLocal = ComGoogleCommonCollectSets_newConcurrentHashSet();
    [self addInitialExceptionWithJavaUtilSet:seenExceptionsLocal];
    [((ComGoogleCommonUtilConcurrentAggregateFutureState_AtomicHelper *) nil_chk(ComGoogleCommonUtilConcurrentAggregateFutureState_ATOMIC_HELPER)) compareAndSetSeenExceptionsWithComGoogleCommonUtilConcurrentAggregateFutureState:self withJavaUtilSet:nil withJavaUtilSet:seenExceptionsLocal];
    seenExceptionsLocal = JreLoadVolatileId(&seenExceptions_);
  }
  return seenExceptionsLocal;
}

- (void)addInitialExceptionWithJavaUtilSet:(id<JavaUtilSet>)seen {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jint)decrementRemainingAndGet {
  return [((ComGoogleCommonUtilConcurrentAggregateFutureState_AtomicHelper *) nil_chk(ComGoogleCommonUtilConcurrentAggregateFutureState_ATOMIC_HELPER)) decrementAndGetRemainingCountWithComGoogleCommonUtilConcurrentAggregateFutureState:self];
}

- (void)__javaClone:(ComGoogleCommonUtilConcurrentAggregateFutureState *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&seenExceptions_, &original->seenExceptions_);
}

- (void)dealloc {
  JreReleaseVolatile(&seenExceptions_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x10, -1, -1, -1, 1, -1, -1 },
    { NULL, "V", 0x400, 2, 3, -1, 4, -1, -1 },
    { NULL, "I", 0x10, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(getOrInitSeenExceptions);
  methods[2].selector = @selector(addInitialExceptionWithJavaUtilSet:);
  methods[3].selector = @selector(decrementRemainingAndGet);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "seenExceptions_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x42, -1, -1, 5, -1 },
    { "remaining_", "I", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "ATOMIC_HELPER", "LComGoogleCommonUtilConcurrentAggregateFutureState_AtomicHelper;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
    { "log", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "()Ljava/util/Set<Ljava/lang/Throwable;>;", "addInitialException", "LJavaUtilSet;", "(Ljava/util/Set<Ljava/lang/Throwable;>;)V", "Ljava/util/Set<Ljava/lang/Throwable;>;", &ComGoogleCommonUtilConcurrentAggregateFutureState_ATOMIC_HELPER, &ComGoogleCommonUtilConcurrentAggregateFutureState_log, "LComGoogleCommonUtilConcurrentAggregateFutureState_AtomicHelper;LComGoogleCommonUtilConcurrentAggregateFutureState_SafeAtomicHelper;LComGoogleCommonUtilConcurrentAggregateFutureState_SynchronizedAtomicHelper;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAggregateFutureState = { "AggregateFutureState", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x400, 4, 4, -1, 8, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentAggregateFutureState;
}

+ (void)initialize {
  if (self == [ComGoogleCommonUtilConcurrentAggregateFutureState class]) {
    ComGoogleCommonUtilConcurrentAggregateFutureState_log = JavaUtilLoggingLogger_getLoggerWithNSString_([ComGoogleCommonUtilConcurrentAggregateFutureState_class_() getName]);
    {
      ComGoogleCommonUtilConcurrentAggregateFutureState_AtomicHelper *helper;
      @try {
        helper = new_ComGoogleCommonUtilConcurrentAggregateFutureState_SafeAtomicHelper_initWithJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicIntegerFieldUpdater_(JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_newUpdaterWithIOSClass_withIOSClass_withNSString_(ComGoogleCommonUtilConcurrentAggregateFutureState_class_(), JavaUtilSet_class_(), @"seenExceptions"), JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater_newUpdaterWithIOSClass_withNSString_(ComGoogleCommonUtilConcurrentAggregateFutureState_class_(), @"remaining"));
      }
      @catch (NSException *reflectionFailure) {
        [((JavaUtilLoggingLogger *) nil_chk(ComGoogleCommonUtilConcurrentAggregateFutureState_log)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:@"SafeAtomicHelper is broken!" withNSException:reflectionFailure];
        helper = new_ComGoogleCommonUtilConcurrentAggregateFutureState_SynchronizedAtomicHelper_init();
      }
      ComGoogleCommonUtilConcurrentAggregateFutureState_ATOMIC_HELPER = helper;
    }
    J2OBJC_SET_INITIALIZED(ComGoogleCommonUtilConcurrentAggregateFutureState)
  }
}

@end

void ComGoogleCommonUtilConcurrentAggregateFutureState_initWithInt_(ComGoogleCommonUtilConcurrentAggregateFutureState *self, jint remainingFutures) {
  NSObject_init(self);
  (void) JreVolatileStrongAssign(&self->seenExceptions_, nil);
  JreAssignVolatileInt(&self->remaining_, remainingFutures);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentAggregateFutureState)

@implementation ComGoogleCommonUtilConcurrentAggregateFutureState_AtomicHelper

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentAggregateFutureState_AtomicHelper_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)compareAndSetSeenExceptionsWithComGoogleCommonUtilConcurrentAggregateFutureState:(ComGoogleCommonUtilConcurrentAggregateFutureState *)state
                                                                         withJavaUtilSet:(id<JavaUtilSet>)expect
                                                                         withJavaUtilSet:(id<JavaUtilSet>)update {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jint)decrementAndGetRemainingCountWithComGoogleCommonUtilConcurrentAggregateFutureState:(ComGoogleCommonUtilConcurrentAggregateFutureState *)state {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x400, 0, 1, -1, 2, -1, -1 },
    { NULL, "I", 0x400, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(compareAndSetSeenExceptionsWithComGoogleCommonUtilConcurrentAggregateFutureState:withJavaUtilSet:withJavaUtilSet:);
  methods[2].selector = @selector(decrementAndGetRemainingCountWithComGoogleCommonUtilConcurrentAggregateFutureState:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compareAndSetSeenExceptions", "LComGoogleCommonUtilConcurrentAggregateFutureState;LJavaUtilSet;LJavaUtilSet;", "(Lcom/google/common/util/concurrent/AggregateFutureState;Ljava/util/Set<Ljava/lang/Throwable;>;Ljava/util/Set<Ljava/lang/Throwable;>;)V", "decrementAndGetRemainingCount", "LComGoogleCommonUtilConcurrentAggregateFutureState;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAggregateFutureState_AtomicHelper = { "AtomicHelper", "com.google.common.util.concurrent", ptrTable, methods, NULL, 7, 0x40a, 3, 0, 4, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentAggregateFutureState_AtomicHelper;
}

@end

void ComGoogleCommonUtilConcurrentAggregateFutureState_AtomicHelper_init(ComGoogleCommonUtilConcurrentAggregateFutureState_AtomicHelper *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentAggregateFutureState_AtomicHelper)

@implementation ComGoogleCommonUtilConcurrentAggregateFutureState_SafeAtomicHelper

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater:(JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *)seenExceptionsUpdater
                      withJavaUtilConcurrentAtomicAtomicIntegerFieldUpdater:(JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *)remainingCountUpdater {
  ComGoogleCommonUtilConcurrentAggregateFutureState_SafeAtomicHelper_initWithJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicIntegerFieldUpdater_(self, seenExceptionsUpdater, remainingCountUpdater);
  return self;
}

- (void)compareAndSetSeenExceptionsWithComGoogleCommonUtilConcurrentAggregateFutureState:(ComGoogleCommonUtilConcurrentAggregateFutureState *)state
                                                                         withJavaUtilSet:(id<JavaUtilSet>)expect
                                                                         withJavaUtilSet:(id<JavaUtilSet>)update {
  [((JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *) nil_chk(seenExceptionsUpdater_)) compareAndSetWithId:state withId:expect withId:update];
}

- (jint)decrementAndGetRemainingCountWithComGoogleCommonUtilConcurrentAggregateFutureState:(ComGoogleCommonUtilConcurrentAggregateFutureState *)state {
  return [((JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *) nil_chk(remainingCountUpdater_)) decrementAndGetWithId:state];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, 3, -1, -1 },
    { NULL, "I", 0x0, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater:withJavaUtilConcurrentAtomicAtomicIntegerFieldUpdater:);
  methods[1].selector = @selector(compareAndSetSeenExceptionsWithComGoogleCommonUtilConcurrentAggregateFutureState:withJavaUtilSet:withJavaUtilSet:);
  methods[2].selector = @selector(decrementAndGetRemainingCountWithComGoogleCommonUtilConcurrentAggregateFutureState:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "seenExceptionsUpdater_", "LJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "remainingCountUpdater_", "LJavaUtilConcurrentAtomicAtomicIntegerFieldUpdater;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater;LJavaUtilConcurrentAtomicAtomicIntegerFieldUpdater;", "compareAndSetSeenExceptions", "LComGoogleCommonUtilConcurrentAggregateFutureState;LJavaUtilSet;LJavaUtilSet;", "(Lcom/google/common/util/concurrent/AggregateFutureState;Ljava/util/Set<Ljava/lang/Throwable;>;Ljava/util/Set<Ljava/lang/Throwable;>;)V", "decrementAndGetRemainingCount", "LComGoogleCommonUtilConcurrentAggregateFutureState;", "Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater<Lcom/google/common/util/concurrent/AggregateFutureState;Ljava/util/Set<Ljava/lang/Throwable;>;>;", "Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater<Lcom/google/common/util/concurrent/AggregateFutureState;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAggregateFutureState_SafeAtomicHelper = { "SafeAtomicHelper", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x1a, 3, 2, 5, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentAggregateFutureState_SafeAtomicHelper;
}

@end

void ComGoogleCommonUtilConcurrentAggregateFutureState_SafeAtomicHelper_initWithJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicIntegerFieldUpdater_(ComGoogleCommonUtilConcurrentAggregateFutureState_SafeAtomicHelper *self, JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *seenExceptionsUpdater, JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *remainingCountUpdater) {
  ComGoogleCommonUtilConcurrentAggregateFutureState_AtomicHelper_init(self);
  self->seenExceptionsUpdater_ = seenExceptionsUpdater;
  self->remainingCountUpdater_ = remainingCountUpdater;
}

ComGoogleCommonUtilConcurrentAggregateFutureState_SafeAtomicHelper *new_ComGoogleCommonUtilConcurrentAggregateFutureState_SafeAtomicHelper_initWithJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicIntegerFieldUpdater_(JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *seenExceptionsUpdater, JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *remainingCountUpdater) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAggregateFutureState_SafeAtomicHelper, initWithJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicIntegerFieldUpdater_, seenExceptionsUpdater, remainingCountUpdater)
}

ComGoogleCommonUtilConcurrentAggregateFutureState_SafeAtomicHelper *create_ComGoogleCommonUtilConcurrentAggregateFutureState_SafeAtomicHelper_initWithJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicIntegerFieldUpdater_(JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *seenExceptionsUpdater, JavaUtilConcurrentAtomicAtomicIntegerFieldUpdater *remainingCountUpdater) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAggregateFutureState_SafeAtomicHelper, initWithJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_withJavaUtilConcurrentAtomicAtomicIntegerFieldUpdater_, seenExceptionsUpdater, remainingCountUpdater)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentAggregateFutureState_SafeAtomicHelper)

@implementation ComGoogleCommonUtilConcurrentAggregateFutureState_SynchronizedAtomicHelper

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentAggregateFutureState_SynchronizedAtomicHelper_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)compareAndSetSeenExceptionsWithComGoogleCommonUtilConcurrentAggregateFutureState:(ComGoogleCommonUtilConcurrentAggregateFutureState *)state
                                                                         withJavaUtilSet:(id<JavaUtilSet>)expect
                                                                         withJavaUtilSet:(id<JavaUtilSet>)update {
  @synchronized(state) {
    if (JreLoadVolatileId(&((ComGoogleCommonUtilConcurrentAggregateFutureState *) nil_chk(state))->seenExceptions_) == expect) {
      (void) JreVolatileStrongAssign(&state->seenExceptions_, update);
    }
  }
}

- (jint)decrementAndGetRemainingCountWithComGoogleCommonUtilConcurrentAggregateFutureState:(ComGoogleCommonUtilConcurrentAggregateFutureState *)state {
  @synchronized(state) {
    ((ComGoogleCommonUtilConcurrentAggregateFutureState *) nil_chk(state))->remaining_--;
    return JreLoadVolatileInt(&state->remaining_);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 0, 1, -1, 2, -1, -1 },
    { NULL, "I", 0x0, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(compareAndSetSeenExceptionsWithComGoogleCommonUtilConcurrentAggregateFutureState:withJavaUtilSet:withJavaUtilSet:);
  methods[2].selector = @selector(decrementAndGetRemainingCountWithComGoogleCommonUtilConcurrentAggregateFutureState:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compareAndSetSeenExceptions", "LComGoogleCommonUtilConcurrentAggregateFutureState;LJavaUtilSet;LJavaUtilSet;", "(Lcom/google/common/util/concurrent/AggregateFutureState;Ljava/util/Set<Ljava/lang/Throwable;>;Ljava/util/Set<Ljava/lang/Throwable;>;)V", "decrementAndGetRemainingCount", "LComGoogleCommonUtilConcurrentAggregateFutureState;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAggregateFutureState_SynchronizedAtomicHelper = { "SynchronizedAtomicHelper", "com.google.common.util.concurrent", ptrTable, methods, NULL, 7, 0x1a, 3, 0, 4, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentAggregateFutureState_SynchronizedAtomicHelper;
}

@end

void ComGoogleCommonUtilConcurrentAggregateFutureState_SynchronizedAtomicHelper_init(ComGoogleCommonUtilConcurrentAggregateFutureState_SynchronizedAtomicHelper *self) {
  ComGoogleCommonUtilConcurrentAggregateFutureState_AtomicHelper_init(self);
}

ComGoogleCommonUtilConcurrentAggregateFutureState_SynchronizedAtomicHelper *new_ComGoogleCommonUtilConcurrentAggregateFutureState_SynchronizedAtomicHelper_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAggregateFutureState_SynchronizedAtomicHelper, init)
}

ComGoogleCommonUtilConcurrentAggregateFutureState_SynchronizedAtomicHelper *create_ComGoogleCommonUtilConcurrentAggregateFutureState_SynchronizedAtomicHelper_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAggregateFutureState_SynchronizedAtomicHelper, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentAggregateFutureState_SynchronizedAtomicHelper)
