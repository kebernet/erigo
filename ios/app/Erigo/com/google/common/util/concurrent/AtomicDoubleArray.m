//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/util/concurrent/AtomicDoubleArray.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/util/concurrent/AtomicDoubleArray.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/lang/Double.h"
#include "java/lang/StringBuilder.h"
#include "java/util/concurrent/atomic/AtomicLongArray.h"

@interface ComGoogleCommonUtilConcurrentAtomicDoubleArray () {
 @public
  JavaUtilConcurrentAtomicAtomicLongArray *longs_;
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)s;

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)s;

@end

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentAtomicDoubleArray, longs_, JavaUtilConcurrentAtomicAtomicLongArray *)

inline jlong ComGoogleCommonUtilConcurrentAtomicDoubleArray_get_serialVersionUID();
#define ComGoogleCommonUtilConcurrentAtomicDoubleArray_serialVersionUID 0LL
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonUtilConcurrentAtomicDoubleArray, serialVersionUID, jlong)

__attribute__((unused)) static jint ComGoogleCommonUtilConcurrentAtomicDoubleArray_length(ComGoogleCommonUtilConcurrentAtomicDoubleArray *self);

__attribute__((unused)) static jdouble ComGoogleCommonUtilConcurrentAtomicDoubleArray_getWithInt_(ComGoogleCommonUtilConcurrentAtomicDoubleArray *self, jint i);

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAtomicDoubleArray_setWithInt_withDouble_(ComGoogleCommonUtilConcurrentAtomicDoubleArray *self, jint i, jdouble newValue);

@implementation ComGoogleCommonUtilConcurrentAtomicDoubleArray

- (instancetype)initWithInt:(jint)length {
  ComGoogleCommonUtilConcurrentAtomicDoubleArray_initWithInt_(self, length);
  return self;
}

- (instancetype)initWithDoubleArray:(IOSDoubleArray *)array {
  ComGoogleCommonUtilConcurrentAtomicDoubleArray_initWithDoubleArray_(self, array);
  return self;
}

- (jint)length {
  return ComGoogleCommonUtilConcurrentAtomicDoubleArray_length(self);
}

- (jdouble)getWithInt:(jint)i {
  return ComGoogleCommonUtilConcurrentAtomicDoubleArray_getWithInt_(self, i);
}

- (void)setWithInt:(jint)i
        withDouble:(jdouble)newValue {
  ComGoogleCommonUtilConcurrentAtomicDoubleArray_setWithInt_withDouble_(self, i, newValue);
}

- (void)lazySetWithInt:(jint)i
            withDouble:(jdouble)newValue {
  ComGoogleCommonUtilConcurrentAtomicDoubleArray_setWithInt_withDouble_(self, i, newValue);
}

- (jdouble)getAndSetWithInt:(jint)i
                 withDouble:(jdouble)newValue {
  jlong next = JavaLangDouble_doubleToRawLongBitsWithDouble_(newValue);
  return JavaLangDouble_longBitsToDoubleWithLong_([((JavaUtilConcurrentAtomicAtomicLongArray *) nil_chk(longs_)) getAndSetWithInt:i withLong:next]);
}

- (jboolean)compareAndSetWithInt:(jint)i
                      withDouble:(jdouble)expect
                      withDouble:(jdouble)update {
  return [((JavaUtilConcurrentAtomicAtomicLongArray *) nil_chk(longs_)) compareAndSetWithInt:i withLong:JavaLangDouble_doubleToRawLongBitsWithDouble_(expect) withLong:JavaLangDouble_doubleToRawLongBitsWithDouble_(update)];
}

- (jboolean)weakCompareAndSetWithInt:(jint)i
                          withDouble:(jdouble)expect
                          withDouble:(jdouble)update {
  return [((JavaUtilConcurrentAtomicAtomicLongArray *) nil_chk(longs_)) weakCompareAndSetWithInt:i withLong:JavaLangDouble_doubleToRawLongBitsWithDouble_(expect) withLong:JavaLangDouble_doubleToRawLongBitsWithDouble_(update)];
}

- (jdouble)getAndAddWithInt:(jint)i
                 withDouble:(jdouble)delta {
  while (true) {
    jlong current = [((JavaUtilConcurrentAtomicAtomicLongArray *) nil_chk(longs_)) getWithInt:i];
    jdouble currentVal = JavaLangDouble_longBitsToDoubleWithLong_(current);
    jdouble nextVal = currentVal + delta;
    jlong next = JavaLangDouble_doubleToRawLongBitsWithDouble_(nextVal);
    if ([((JavaUtilConcurrentAtomicAtomicLongArray *) nil_chk(longs_)) compareAndSetWithInt:i withLong:current withLong:next]) {
      return currentVal;
    }
  }
}

- (jdouble)addAndGetWithInt:(jint)i
                 withDouble:(jdouble)delta {
  while (true) {
    jlong current = [((JavaUtilConcurrentAtomicAtomicLongArray *) nil_chk(longs_)) getWithInt:i];
    jdouble currentVal = JavaLangDouble_longBitsToDoubleWithLong_(current);
    jdouble nextVal = currentVal + delta;
    jlong next = JavaLangDouble_doubleToRawLongBitsWithDouble_(nextVal);
    if ([((JavaUtilConcurrentAtomicAtomicLongArray *) nil_chk(longs_)) compareAndSetWithInt:i withLong:current withLong:next]) {
      return nextVal;
    }
  }
}

- (NSString *)description {
  jint iMax = ComGoogleCommonUtilConcurrentAtomicDoubleArray_length(self) - 1;
  if (iMax == -1) {
    return @"[]";
  }
  JavaLangStringBuilder *b = new_JavaLangStringBuilder_initWithInt_((17 + 2) * (iMax + 1));
  (void) [b appendWithChar:'['];
  for (jint i = 0; ; i++) {
    (void) [b appendWithDouble:JavaLangDouble_longBitsToDoubleWithLong_([((JavaUtilConcurrentAtomicAtomicLongArray *) nil_chk(longs_)) getWithInt:i])];
    if (i == iMax) {
      return [((JavaLangStringBuilder *) nil_chk([b appendWithChar:']'])) description];
    }
    (void) [((JavaLangStringBuilder *) nil_chk([b appendWithChar:','])) appendWithChar:' '];
  }
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)s {
  [((JavaIoObjectOutputStream *) nil_chk(s)) defaultWriteObject];
  jint length = ComGoogleCommonUtilConcurrentAtomicDoubleArray_length(self);
  [s writeIntWithInt:length];
  for (jint i = 0; i < length; i++) {
    [s writeDoubleWithDouble:ComGoogleCommonUtilConcurrentAtomicDoubleArray_getWithInt_(self, i)];
  }
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)s {
  [((JavaIoObjectInputStream *) nil_chk(s)) defaultReadObject];
  jint length = [s readInt];
  self->longs_ = new_JavaUtilConcurrentAtomicAtomicLongArray_initWithInt_(length);
  for (jint i = 0; i < length; i++) {
    ComGoogleCommonUtilConcurrentAtomicDoubleArray_setWithInt_withDouble_(self, i, [s readDouble]);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x11, 2, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 5, 4, -1, -1, -1, -1 },
    { NULL, "D", 0x11, 6, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 9, 8, -1, -1, -1, -1 },
    { NULL, "D", 0x11, 10, 4, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 11, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 12, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 14, 15, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 17, 18, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(initWithDoubleArray:);
  methods[2].selector = @selector(length);
  methods[3].selector = @selector(getWithInt:);
  methods[4].selector = @selector(setWithInt:withDouble:);
  methods[5].selector = @selector(lazySetWithInt:withDouble:);
  methods[6].selector = @selector(getAndSetWithInt:withDouble:);
  methods[7].selector = @selector(compareAndSetWithInt:withDouble:withDouble:);
  methods[8].selector = @selector(weakCompareAndSetWithInt:withDouble:withDouble:);
  methods[9].selector = @selector(getAndAddWithInt:withDouble:);
  methods[10].selector = @selector(addAndGetWithInt:withDouble:);
  methods[11].selector = @selector(description);
  methods[12].selector = @selector(writeObjectWithJavaIoObjectOutputStream:);
  methods[13].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = ComGoogleCommonUtilConcurrentAtomicDoubleArray_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "longs_", "LJavaUtilConcurrentAtomicAtomicLongArray;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "[D", "get", "set", "ID", "lazySet", "getAndSet", "compareAndSet", "IDD", "weakCompareAndSet", "getAndAdd", "addAndGet", "toString", "writeObject", "LJavaIoObjectOutputStream;", "LJavaIoIOException;", "readObject", "LJavaIoObjectInputStream;", "LJavaIoIOException;LJavaLangClassNotFoundException;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAtomicDoubleArray = { "AtomicDoubleArray", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x1, 14, 2, -1, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentAtomicDoubleArray;
}

@end

void ComGoogleCommonUtilConcurrentAtomicDoubleArray_initWithInt_(ComGoogleCommonUtilConcurrentAtomicDoubleArray *self, jint length) {
  NSObject_init(self);
  self->longs_ = new_JavaUtilConcurrentAtomicAtomicLongArray_initWithInt_(length);
}

ComGoogleCommonUtilConcurrentAtomicDoubleArray *new_ComGoogleCommonUtilConcurrentAtomicDoubleArray_initWithInt_(jint length) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAtomicDoubleArray, initWithInt_, length)
}

ComGoogleCommonUtilConcurrentAtomicDoubleArray *create_ComGoogleCommonUtilConcurrentAtomicDoubleArray_initWithInt_(jint length) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAtomicDoubleArray, initWithInt_, length)
}

void ComGoogleCommonUtilConcurrentAtomicDoubleArray_initWithDoubleArray_(ComGoogleCommonUtilConcurrentAtomicDoubleArray *self, IOSDoubleArray *array) {
  NSObject_init(self);
  jint len = ((IOSDoubleArray *) nil_chk(array))->size_;
  IOSLongArray *longArray = [IOSLongArray newArrayWithLength:len];
  for (jint i = 0; i < len; i++) {
    *IOSLongArray_GetRef(longArray, i) = JavaLangDouble_doubleToRawLongBitsWithDouble_(IOSDoubleArray_Get(array, i));
  }
  self->longs_ = new_JavaUtilConcurrentAtomicAtomicLongArray_initWithLongArray_(longArray);
}

ComGoogleCommonUtilConcurrentAtomicDoubleArray *new_ComGoogleCommonUtilConcurrentAtomicDoubleArray_initWithDoubleArray_(IOSDoubleArray *array) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAtomicDoubleArray, initWithDoubleArray_, array)
}

ComGoogleCommonUtilConcurrentAtomicDoubleArray *create_ComGoogleCommonUtilConcurrentAtomicDoubleArray_initWithDoubleArray_(IOSDoubleArray *array) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAtomicDoubleArray, initWithDoubleArray_, array)
}

jint ComGoogleCommonUtilConcurrentAtomicDoubleArray_length(ComGoogleCommonUtilConcurrentAtomicDoubleArray *self) {
  return [((JavaUtilConcurrentAtomicAtomicLongArray *) nil_chk(self->longs_)) length];
}

jdouble ComGoogleCommonUtilConcurrentAtomicDoubleArray_getWithInt_(ComGoogleCommonUtilConcurrentAtomicDoubleArray *self, jint i) {
  return JavaLangDouble_longBitsToDoubleWithLong_([((JavaUtilConcurrentAtomicAtomicLongArray *) nil_chk(self->longs_)) getWithInt:i]);
}

void ComGoogleCommonUtilConcurrentAtomicDoubleArray_setWithInt_withDouble_(ComGoogleCommonUtilConcurrentAtomicDoubleArray *self, jint i, jdouble newValue) {
  jlong next = JavaLangDouble_doubleToRawLongBitsWithDouble_(newValue);
  [((JavaUtilConcurrentAtomicAtomicLongArray *) nil_chk(self->longs_)) setWithInt:i withLong:next];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentAtomicDoubleArray)
