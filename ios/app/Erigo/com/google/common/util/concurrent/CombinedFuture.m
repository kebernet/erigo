//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/util/concurrent/CombinedFuture.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/collect/ImmutableCollection.h"
#include "com/google/common/util/concurrent/AggregateFuture.h"
#include "com/google/common/util/concurrent/AsyncCallable.h"
#include "com/google/common/util/concurrent/CombinedFuture.h"
#include "com/google/common/util/concurrent/InterruptibleTask.h"
#include "com/google/common/util/concurrent/ListenableFuture.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/CancellationException.h"
#include "java/util/concurrent/ExecutionException.h"
#include "java/util/concurrent/Executor.h"
#include "java/util/concurrent/RejectedExecutionException.h"
#include "javax/annotation/Nullable.h"

@class ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask;

@interface ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureRunningState : ComGoogleCommonUtilConcurrentAggregateFuture_RunningState {
 @public
  ComGoogleCommonUtilConcurrentCombinedFuture *this$1_;
  ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask *task_;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentCombinedFuture:(ComGoogleCommonUtilConcurrentCombinedFuture *)outer$
                      withComGoogleCommonCollectImmutableCollection:(ComGoogleCommonCollectImmutableCollection *)futures
                                                        withBoolean:(jboolean)allMustSucceed
withComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask:(ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask *)task;

- (void)collectOneValueWithBoolean:(jboolean)allMustSucceed
                           withInt:(jint)index
                            withId:(id)returnValue;

- (void)handleAllCompleted;

- (void)releaseResourcesAfterFailure;

- (void)interruptTask;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureRunningState)

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureRunningState, task_, ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask *)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureRunningState_initWithComGoogleCommonUtilConcurrentCombinedFuture_withComGoogleCommonCollectImmutableCollection_withBoolean_withComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask_(ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureRunningState *self, ComGoogleCommonUtilConcurrentCombinedFuture *outer$, ComGoogleCommonCollectImmutableCollection *futures, jboolean allMustSucceed, ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask *task);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureRunningState *new_ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureRunningState_initWithComGoogleCommonUtilConcurrentCombinedFuture_withComGoogleCommonCollectImmutableCollection_withBoolean_withComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask_(ComGoogleCommonUtilConcurrentCombinedFuture *outer$, ComGoogleCommonCollectImmutableCollection *futures, jboolean allMustSucceed, ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask *task) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureRunningState *create_ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureRunningState_initWithComGoogleCommonUtilConcurrentCombinedFuture_withComGoogleCommonCollectImmutableCollection_withBoolean_withComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask_(ComGoogleCommonUtilConcurrentCombinedFuture *outer$, ComGoogleCommonCollectImmutableCollection *futures, jboolean allMustSucceed, ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask *task);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureRunningState__Annotations$0();

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureRunningState)

@interface ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask : ComGoogleCommonUtilConcurrentInterruptibleTask {
 @public
  __unsafe_unretained ComGoogleCommonUtilConcurrentCombinedFuture *this$0_;
  id<JavaUtilConcurrentExecutor> listenerExecutor_;
  volatile_jboolean thrownByExecute_;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentCombinedFuture:(ComGoogleCommonUtilConcurrentCombinedFuture *)outer$
                                     withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)listenerExecutor;

- (void)runInterruptibly;

- (jboolean)wasInterrupted;

- (void)execute;

- (void)setValue;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask)

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask, listenerExecutor_, id<JavaUtilConcurrentExecutor>)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask_initWithComGoogleCommonUtilConcurrentCombinedFuture_withJavaUtilConcurrentExecutor_(ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask *self, ComGoogleCommonUtilConcurrentCombinedFuture *outer$, id<JavaUtilConcurrentExecutor> listenerExecutor);

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask_execute(ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask *self);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask)

@interface ComGoogleCommonUtilConcurrentCombinedFuture_AsyncCallableInterruptibleTask : ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask {
 @public
  __unsafe_unretained ComGoogleCommonUtilConcurrentCombinedFuture *this$1_;
  id<ComGoogleCommonUtilConcurrentAsyncCallable> callable_;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentCombinedFuture:(ComGoogleCommonUtilConcurrentCombinedFuture *)outer$
                     withComGoogleCommonUtilConcurrentAsyncCallable:(id<ComGoogleCommonUtilConcurrentAsyncCallable>)callable
                                     withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)listenerExecutor;

- (void)setValue;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentCombinedFuture_AsyncCallableInterruptibleTask)

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentCombinedFuture_AsyncCallableInterruptibleTask, callable_, id<ComGoogleCommonUtilConcurrentAsyncCallable>)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentCombinedFuture_AsyncCallableInterruptibleTask_initWithComGoogleCommonUtilConcurrentCombinedFuture_withComGoogleCommonUtilConcurrentAsyncCallable_withJavaUtilConcurrentExecutor_(ComGoogleCommonUtilConcurrentCombinedFuture_AsyncCallableInterruptibleTask *self, ComGoogleCommonUtilConcurrentCombinedFuture *outer$, id<ComGoogleCommonUtilConcurrentAsyncCallable> callable, id<JavaUtilConcurrentExecutor> listenerExecutor);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentCombinedFuture_AsyncCallableInterruptibleTask *new_ComGoogleCommonUtilConcurrentCombinedFuture_AsyncCallableInterruptibleTask_initWithComGoogleCommonUtilConcurrentCombinedFuture_withComGoogleCommonUtilConcurrentAsyncCallable_withJavaUtilConcurrentExecutor_(ComGoogleCommonUtilConcurrentCombinedFuture *outer$, id<ComGoogleCommonUtilConcurrentAsyncCallable> callable, id<JavaUtilConcurrentExecutor> listenerExecutor) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentCombinedFuture_AsyncCallableInterruptibleTask *create_ComGoogleCommonUtilConcurrentCombinedFuture_AsyncCallableInterruptibleTask_initWithComGoogleCommonUtilConcurrentCombinedFuture_withComGoogleCommonUtilConcurrentAsyncCallable_withJavaUtilConcurrentExecutor_(ComGoogleCommonUtilConcurrentCombinedFuture *outer$, id<ComGoogleCommonUtilConcurrentAsyncCallable> callable, id<JavaUtilConcurrentExecutor> listenerExecutor);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentCombinedFuture_AsyncCallableInterruptibleTask)

@interface ComGoogleCommonUtilConcurrentCombinedFuture_CallableInterruptibleTask : ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask {
 @public
  __unsafe_unretained ComGoogleCommonUtilConcurrentCombinedFuture *this$1_;
  id<JavaUtilConcurrentCallable> callable_;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentCombinedFuture:(ComGoogleCommonUtilConcurrentCombinedFuture *)outer$
                                     withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable
                                     withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)listenerExecutor;

- (void)setValue;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentCombinedFuture_CallableInterruptibleTask)

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentCombinedFuture_CallableInterruptibleTask, callable_, id<JavaUtilConcurrentCallable>)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentCombinedFuture_CallableInterruptibleTask_initWithComGoogleCommonUtilConcurrentCombinedFuture_withJavaUtilConcurrentCallable_withJavaUtilConcurrentExecutor_(ComGoogleCommonUtilConcurrentCombinedFuture_CallableInterruptibleTask *self, ComGoogleCommonUtilConcurrentCombinedFuture *outer$, id<JavaUtilConcurrentCallable> callable, id<JavaUtilConcurrentExecutor> listenerExecutor);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentCombinedFuture_CallableInterruptibleTask *new_ComGoogleCommonUtilConcurrentCombinedFuture_CallableInterruptibleTask_initWithComGoogleCommonUtilConcurrentCombinedFuture_withJavaUtilConcurrentCallable_withJavaUtilConcurrentExecutor_(ComGoogleCommonUtilConcurrentCombinedFuture *outer$, id<JavaUtilConcurrentCallable> callable, id<JavaUtilConcurrentExecutor> listenerExecutor) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentCombinedFuture_CallableInterruptibleTask *create_ComGoogleCommonUtilConcurrentCombinedFuture_CallableInterruptibleTask_initWithComGoogleCommonUtilConcurrentCombinedFuture_withJavaUtilConcurrentCallable_withJavaUtilConcurrentExecutor_(ComGoogleCommonUtilConcurrentCombinedFuture *outer$, id<JavaUtilConcurrentCallable> callable, id<JavaUtilConcurrentExecutor> listenerExecutor);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentCombinedFuture_CallableInterruptibleTask)

@implementation ComGoogleCommonUtilConcurrentCombinedFuture

- (instancetype)initWithComGoogleCommonCollectImmutableCollection:(ComGoogleCommonCollectImmutableCollection *)futures
                                                      withBoolean:(jboolean)allMustSucceed
                                   withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)listenerExecutor
                   withComGoogleCommonUtilConcurrentAsyncCallable:(id<ComGoogleCommonUtilConcurrentAsyncCallable>)callable {
  ComGoogleCommonUtilConcurrentCombinedFuture_initWithComGoogleCommonCollectImmutableCollection_withBoolean_withJavaUtilConcurrentExecutor_withComGoogleCommonUtilConcurrentAsyncCallable_(self, futures, allMustSucceed, listenerExecutor, callable);
  return self;
}

- (instancetype)initWithComGoogleCommonCollectImmutableCollection:(ComGoogleCommonCollectImmutableCollection *)futures
                                                      withBoolean:(jboolean)allMustSucceed
                                   withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)listenerExecutor
                                   withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable {
  ComGoogleCommonUtilConcurrentCombinedFuture_initWithComGoogleCommonCollectImmutableCollection_withBoolean_withJavaUtilConcurrentExecutor_withJavaUtilConcurrentCallable_(self, futures, allMustSucceed, listenerExecutor, callable);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonCollectImmutableCollection:withBoolean:withJavaUtilConcurrentExecutor:withComGoogleCommonUtilConcurrentAsyncCallable:);
  methods[1].selector = @selector(initWithComGoogleCommonCollectImmutableCollection:withBoolean:withJavaUtilConcurrentExecutor:withJavaUtilConcurrentCallable:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LComGoogleCommonCollectImmutableCollection;ZLJavaUtilConcurrentExecutor;LComGoogleCommonUtilConcurrentAsyncCallable;", "(Lcom/google/common/collect/ImmutableCollection<+Lcom/google/common/util/concurrent/ListenableFuture<*>;>;ZLjava/util/concurrent/Executor;Lcom/google/common/util/concurrent/AsyncCallable<TV;>;)V", "LComGoogleCommonCollectImmutableCollection;ZLJavaUtilConcurrentExecutor;LJavaUtilConcurrentCallable;", "(Lcom/google/common/collect/ImmutableCollection<+Lcom/google/common/util/concurrent/ListenableFuture<*>;>;ZLjava/util/concurrent/Executor;Ljava/util/concurrent/Callable<TV;>;)V", "LComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureRunningState;LComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask;LComGoogleCommonUtilConcurrentCombinedFuture_AsyncCallableInterruptibleTask;LComGoogleCommonUtilConcurrentCombinedFuture_CallableInterruptibleTask;", "<V:Ljava/lang/Object;>Lcom/google/common/util/concurrent/AggregateFuture<Ljava/lang/Object;TV;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentCombinedFuture = { "CombinedFuture", "com.google.common.util.concurrent", ptrTable, methods, NULL, 7, 0x10, 2, 0, -1, 4, -1, 5, -1 };
  return &_ComGoogleCommonUtilConcurrentCombinedFuture;
}

@end

void ComGoogleCommonUtilConcurrentCombinedFuture_initWithComGoogleCommonCollectImmutableCollection_withBoolean_withJavaUtilConcurrentExecutor_withComGoogleCommonUtilConcurrentAsyncCallable_(ComGoogleCommonUtilConcurrentCombinedFuture *self, ComGoogleCommonCollectImmutableCollection *futures, jboolean allMustSucceed, id<JavaUtilConcurrentExecutor> listenerExecutor, id<ComGoogleCommonUtilConcurrentAsyncCallable> callable) {
  ComGoogleCommonUtilConcurrentAggregateFuture_init(self);
  [self init__WithComGoogleCommonUtilConcurrentAggregateFuture_RunningState:new_ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureRunningState_initWithComGoogleCommonUtilConcurrentCombinedFuture_withComGoogleCommonCollectImmutableCollection_withBoolean_withComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask_(self, futures, allMustSucceed, new_ComGoogleCommonUtilConcurrentCombinedFuture_AsyncCallableInterruptibleTask_initWithComGoogleCommonUtilConcurrentCombinedFuture_withComGoogleCommonUtilConcurrentAsyncCallable_withJavaUtilConcurrentExecutor_(self, callable, listenerExecutor))];
}

ComGoogleCommonUtilConcurrentCombinedFuture *new_ComGoogleCommonUtilConcurrentCombinedFuture_initWithComGoogleCommonCollectImmutableCollection_withBoolean_withJavaUtilConcurrentExecutor_withComGoogleCommonUtilConcurrentAsyncCallable_(ComGoogleCommonCollectImmutableCollection *futures, jboolean allMustSucceed, id<JavaUtilConcurrentExecutor> listenerExecutor, id<ComGoogleCommonUtilConcurrentAsyncCallable> callable) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentCombinedFuture, initWithComGoogleCommonCollectImmutableCollection_withBoolean_withJavaUtilConcurrentExecutor_withComGoogleCommonUtilConcurrentAsyncCallable_, futures, allMustSucceed, listenerExecutor, callable)
}

ComGoogleCommonUtilConcurrentCombinedFuture *create_ComGoogleCommonUtilConcurrentCombinedFuture_initWithComGoogleCommonCollectImmutableCollection_withBoolean_withJavaUtilConcurrentExecutor_withComGoogleCommonUtilConcurrentAsyncCallable_(ComGoogleCommonCollectImmutableCollection *futures, jboolean allMustSucceed, id<JavaUtilConcurrentExecutor> listenerExecutor, id<ComGoogleCommonUtilConcurrentAsyncCallable> callable) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentCombinedFuture, initWithComGoogleCommonCollectImmutableCollection_withBoolean_withJavaUtilConcurrentExecutor_withComGoogleCommonUtilConcurrentAsyncCallable_, futures, allMustSucceed, listenerExecutor, callable)
}

void ComGoogleCommonUtilConcurrentCombinedFuture_initWithComGoogleCommonCollectImmutableCollection_withBoolean_withJavaUtilConcurrentExecutor_withJavaUtilConcurrentCallable_(ComGoogleCommonUtilConcurrentCombinedFuture *self, ComGoogleCommonCollectImmutableCollection *futures, jboolean allMustSucceed, id<JavaUtilConcurrentExecutor> listenerExecutor, id<JavaUtilConcurrentCallable> callable) {
  ComGoogleCommonUtilConcurrentAggregateFuture_init(self);
  [self init__WithComGoogleCommonUtilConcurrentAggregateFuture_RunningState:new_ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureRunningState_initWithComGoogleCommonUtilConcurrentCombinedFuture_withComGoogleCommonCollectImmutableCollection_withBoolean_withComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask_(self, futures, allMustSucceed, new_ComGoogleCommonUtilConcurrentCombinedFuture_CallableInterruptibleTask_initWithComGoogleCommonUtilConcurrentCombinedFuture_withJavaUtilConcurrentCallable_withJavaUtilConcurrentExecutor_(self, callable, listenerExecutor))];
}

ComGoogleCommonUtilConcurrentCombinedFuture *new_ComGoogleCommonUtilConcurrentCombinedFuture_initWithComGoogleCommonCollectImmutableCollection_withBoolean_withJavaUtilConcurrentExecutor_withJavaUtilConcurrentCallable_(ComGoogleCommonCollectImmutableCollection *futures, jboolean allMustSucceed, id<JavaUtilConcurrentExecutor> listenerExecutor, id<JavaUtilConcurrentCallable> callable) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentCombinedFuture, initWithComGoogleCommonCollectImmutableCollection_withBoolean_withJavaUtilConcurrentExecutor_withJavaUtilConcurrentCallable_, futures, allMustSucceed, listenerExecutor, callable)
}

ComGoogleCommonUtilConcurrentCombinedFuture *create_ComGoogleCommonUtilConcurrentCombinedFuture_initWithComGoogleCommonCollectImmutableCollection_withBoolean_withJavaUtilConcurrentExecutor_withJavaUtilConcurrentCallable_(ComGoogleCommonCollectImmutableCollection *futures, jboolean allMustSucceed, id<JavaUtilConcurrentExecutor> listenerExecutor, id<JavaUtilConcurrentCallable> callable) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentCombinedFuture, initWithComGoogleCommonCollectImmutableCollection_withBoolean_withJavaUtilConcurrentExecutor_withJavaUtilConcurrentCallable_, futures, allMustSucceed, listenerExecutor, callable)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentCombinedFuture)

@implementation ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureRunningState

- (instancetype)initWithComGoogleCommonUtilConcurrentCombinedFuture:(ComGoogleCommonUtilConcurrentCombinedFuture *)outer$
                      withComGoogleCommonCollectImmutableCollection:(ComGoogleCommonCollectImmutableCollection *)futures
                                                        withBoolean:(jboolean)allMustSucceed
withComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask:(ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask *)task {
  ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureRunningState_initWithComGoogleCommonUtilConcurrentCombinedFuture_withComGoogleCommonCollectImmutableCollection_withBoolean_withComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask_(self, outer$, futures, allMustSucceed, task);
  return self;
}

- (void)collectOneValueWithBoolean:(jboolean)allMustSucceed
                           withInt:(jint)index
                            withId:(id)returnValue {
}

- (void)handleAllCompleted {
  ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask *localTask = task_;
  if (localTask != nil) {
    ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask_execute(localTask);
  }
  else {
    ComGoogleCommonBasePreconditions_checkStateWithBoolean_([this$1_ isDone]);
  }
}

- (void)releaseResourcesAfterFailure {
  [super releaseResourcesAfterFailure];
  self->task_ = nil;
}

- (void)interruptTask {
  ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask *localTask = task_;
  if (localTask != nil) {
    [localTask interruptTask];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, -1, -1, 4 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentCombinedFuture:withComGoogleCommonCollectImmutableCollection:withBoolean:withComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask:);
  methods[1].selector = @selector(collectOneValueWithBoolean:withInt:withId:);
  methods[2].selector = @selector(handleAllCompleted);
  methods[3].selector = @selector(releaseResourcesAfterFailure);
  methods[4].selector = @selector(interruptTask);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$1_", "LComGoogleCommonUtilConcurrentCombinedFuture;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
    { "task_", "LComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonCollectImmutableCollection;ZLComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask;", "(Lcom/google/common/collect/ImmutableCollection<+Lcom/google/common/util/concurrent/ListenableFuture<+Ljava/lang/Object;>;>;ZLcom/google/common/util/concurrent/CombinedFuture$CombinedFutureInterruptibleTask;)V", "collectOneValue", "ZILNSObject;", (void *)&ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureRunningState__Annotations$0, "Lcom/google/common/util/concurrent/CombinedFuture<TV;>;", "LComGoogleCommonUtilConcurrentCombinedFuture;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureRunningState = { "CombinedFutureRunningState", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x12, 5, 2, 6, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureRunningState;
}

@end

void ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureRunningState_initWithComGoogleCommonUtilConcurrentCombinedFuture_withComGoogleCommonCollectImmutableCollection_withBoolean_withComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask_(ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureRunningState *self, ComGoogleCommonUtilConcurrentCombinedFuture *outer$, ComGoogleCommonCollectImmutableCollection *futures, jboolean allMustSucceed, ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask *task) {
  self->this$1_ = outer$;
  ComGoogleCommonUtilConcurrentAggregateFuture_RunningState_initWithComGoogleCommonUtilConcurrentAggregateFuture_withComGoogleCommonCollectImmutableCollection_withBoolean_withBoolean_(self, outer$, futures, allMustSucceed, false);
  self->task_ = task;
}

ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureRunningState *new_ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureRunningState_initWithComGoogleCommonUtilConcurrentCombinedFuture_withComGoogleCommonCollectImmutableCollection_withBoolean_withComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask_(ComGoogleCommonUtilConcurrentCombinedFuture *outer$, ComGoogleCommonCollectImmutableCollection *futures, jboolean allMustSucceed, ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask *task) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureRunningState, initWithComGoogleCommonUtilConcurrentCombinedFuture_withComGoogleCommonCollectImmutableCollection_withBoolean_withComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask_, outer$, futures, allMustSucceed, task)
}

ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureRunningState *create_ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureRunningState_initWithComGoogleCommonUtilConcurrentCombinedFuture_withComGoogleCommonCollectImmutableCollection_withBoolean_withComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask_(ComGoogleCommonUtilConcurrentCombinedFuture *outer$, ComGoogleCommonCollectImmutableCollection *futures, jboolean allMustSucceed, ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask *task) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureRunningState, initWithComGoogleCommonUtilConcurrentCombinedFuture_withComGoogleCommonCollectImmutableCollection_withBoolean_withComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask_, outer$, futures, allMustSucceed, task)
}

IOSObjectArray *ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureRunningState__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:3 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureRunningState)

@implementation ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask

- (instancetype)initWithComGoogleCommonUtilConcurrentCombinedFuture:(ComGoogleCommonUtilConcurrentCombinedFuture *)outer$
                                     withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)listenerExecutor {
  ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask_initWithComGoogleCommonUtilConcurrentCombinedFuture_withJavaUtilConcurrentExecutor_(self, outer$, listenerExecutor);
  return self;
}

- (void)runInterruptibly {
  JreAssignVolatileBoolean(&thrownByExecute_, false);
  if (![this$0_ isDone]) {
    @try {
      [self setValue];
    }
    @catch (JavaUtilConcurrentExecutionException *e) {
      [this$0_ setExceptionWithNSException:[e getCause]];
    }
    @catch (JavaUtilConcurrentCancellationException *e) {
      [this$0_ cancelWithBoolean:false];
    }
    @catch (NSException *e) {
      [this$0_ setExceptionWithNSException:e];
    }
  }
}

- (jboolean)wasInterrupted {
  return [this$0_ wasInterrupted];
}

- (void)execute {
  ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask_execute(self);
}

- (void)setValue {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)__javaClone:(ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x10, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x10, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x10, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x400, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentCombinedFuture:withJavaUtilConcurrentExecutor:);
  methods[1].selector = @selector(runInterruptibly);
  methods[2].selector = @selector(wasInterrupted);
  methods[3].selector = @selector(execute);
  methods[4].selector = @selector(setValue);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonUtilConcurrentCombinedFuture;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
    { "listenerExecutor_", "LJavaUtilConcurrentExecutor;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "thrownByExecute_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentExecutor;", "LJavaLangException;", "Lcom/google/common/util/concurrent/CombinedFuture<TV;>;", "LComGoogleCommonUtilConcurrentCombinedFuture;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask = { "CombinedFutureInterruptibleTask", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x402, 5, 3, 3, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask;
}

@end

void ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask_initWithComGoogleCommonUtilConcurrentCombinedFuture_withJavaUtilConcurrentExecutor_(ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask *self, ComGoogleCommonUtilConcurrentCombinedFuture *outer$, id<JavaUtilConcurrentExecutor> listenerExecutor) {
  self->this$0_ = outer$;
  ComGoogleCommonUtilConcurrentInterruptibleTask_init(self);
  JreAssignVolatileBoolean(&self->thrownByExecute_, true);
  self->listenerExecutor_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(listenerExecutor);
}

void ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask_execute(ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask *self) {
  @try {
    [((id<JavaUtilConcurrentExecutor>) nil_chk(self->listenerExecutor_)) executeWithJavaLangRunnable:self];
  }
  @catch (JavaUtilConcurrentRejectedExecutionException *e) {
    if (JreLoadVolatileBoolean(&self->thrownByExecute_)) {
      [self->this$0_ setExceptionWithNSException:e];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask)

@implementation ComGoogleCommonUtilConcurrentCombinedFuture_AsyncCallableInterruptibleTask

- (instancetype)initWithComGoogleCommonUtilConcurrentCombinedFuture:(ComGoogleCommonUtilConcurrentCombinedFuture *)outer$
                     withComGoogleCommonUtilConcurrentAsyncCallable:(id<ComGoogleCommonUtilConcurrentAsyncCallable>)callable
                                     withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)listenerExecutor {
  ComGoogleCommonUtilConcurrentCombinedFuture_AsyncCallableInterruptibleTask_initWithComGoogleCommonUtilConcurrentCombinedFuture_withComGoogleCommonUtilConcurrentAsyncCallable_withJavaUtilConcurrentExecutor_(self, outer$, callable, listenerExecutor);
  return self;
}

- (void)setValue {
  [this$1_ setFutureWithComGoogleCommonUtilConcurrentListenableFuture:[((id<ComGoogleCommonUtilConcurrentAsyncCallable>) nil_chk(callable_)) call]];
}

- (void)__javaClone:(ComGoogleCommonUtilConcurrentCombinedFuture_AsyncCallableInterruptibleTask *)original {
  [super __javaClone:original];
  JreRelease(this$1_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentCombinedFuture:withComGoogleCommonUtilConcurrentAsyncCallable:withJavaUtilConcurrentExecutor:);
  methods[1].selector = @selector(setValue);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$1_", "LComGoogleCommonUtilConcurrentCombinedFuture;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
    { "callable_", "LComGoogleCommonUtilConcurrentAsyncCallable;", .constantValue.asLong = 0, 0x12, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentAsyncCallable;LJavaUtilConcurrentExecutor;", "(Lcom/google/common/util/concurrent/AsyncCallable<TV;>;Ljava/util/concurrent/Executor;)V", "LJavaLangException;", "Lcom/google/common/util/concurrent/CombinedFuture<TV;>;", "Lcom/google/common/util/concurrent/AsyncCallable<TV;>;", "LComGoogleCommonUtilConcurrentCombinedFuture;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentCombinedFuture_AsyncCallableInterruptibleTask = { "AsyncCallableInterruptibleTask", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x12, 2, 2, 5, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentCombinedFuture_AsyncCallableInterruptibleTask;
}

@end

void ComGoogleCommonUtilConcurrentCombinedFuture_AsyncCallableInterruptibleTask_initWithComGoogleCommonUtilConcurrentCombinedFuture_withComGoogleCommonUtilConcurrentAsyncCallable_withJavaUtilConcurrentExecutor_(ComGoogleCommonUtilConcurrentCombinedFuture_AsyncCallableInterruptibleTask *self, ComGoogleCommonUtilConcurrentCombinedFuture *outer$, id<ComGoogleCommonUtilConcurrentAsyncCallable> callable, id<JavaUtilConcurrentExecutor> listenerExecutor) {
  self->this$1_ = outer$;
  ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask_initWithComGoogleCommonUtilConcurrentCombinedFuture_withJavaUtilConcurrentExecutor_(self, outer$, listenerExecutor);
  self->callable_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(callable);
}

ComGoogleCommonUtilConcurrentCombinedFuture_AsyncCallableInterruptibleTask *new_ComGoogleCommonUtilConcurrentCombinedFuture_AsyncCallableInterruptibleTask_initWithComGoogleCommonUtilConcurrentCombinedFuture_withComGoogleCommonUtilConcurrentAsyncCallable_withJavaUtilConcurrentExecutor_(ComGoogleCommonUtilConcurrentCombinedFuture *outer$, id<ComGoogleCommonUtilConcurrentAsyncCallable> callable, id<JavaUtilConcurrentExecutor> listenerExecutor) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentCombinedFuture_AsyncCallableInterruptibleTask, initWithComGoogleCommonUtilConcurrentCombinedFuture_withComGoogleCommonUtilConcurrentAsyncCallable_withJavaUtilConcurrentExecutor_, outer$, callable, listenerExecutor)
}

ComGoogleCommonUtilConcurrentCombinedFuture_AsyncCallableInterruptibleTask *create_ComGoogleCommonUtilConcurrentCombinedFuture_AsyncCallableInterruptibleTask_initWithComGoogleCommonUtilConcurrentCombinedFuture_withComGoogleCommonUtilConcurrentAsyncCallable_withJavaUtilConcurrentExecutor_(ComGoogleCommonUtilConcurrentCombinedFuture *outer$, id<ComGoogleCommonUtilConcurrentAsyncCallable> callable, id<JavaUtilConcurrentExecutor> listenerExecutor) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentCombinedFuture_AsyncCallableInterruptibleTask, initWithComGoogleCommonUtilConcurrentCombinedFuture_withComGoogleCommonUtilConcurrentAsyncCallable_withJavaUtilConcurrentExecutor_, outer$, callable, listenerExecutor)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentCombinedFuture_AsyncCallableInterruptibleTask)

@implementation ComGoogleCommonUtilConcurrentCombinedFuture_CallableInterruptibleTask

- (instancetype)initWithComGoogleCommonUtilConcurrentCombinedFuture:(ComGoogleCommonUtilConcurrentCombinedFuture *)outer$
                                     withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable
                                     withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)listenerExecutor {
  ComGoogleCommonUtilConcurrentCombinedFuture_CallableInterruptibleTask_initWithComGoogleCommonUtilConcurrentCombinedFuture_withJavaUtilConcurrentCallable_withJavaUtilConcurrentExecutor_(self, outer$, callable, listenerExecutor);
  return self;
}

- (void)setValue {
  [this$1_ setWithId:[((id<JavaUtilConcurrentCallable>) nil_chk(callable_)) call]];
}

- (void)__javaClone:(ComGoogleCommonUtilConcurrentCombinedFuture_CallableInterruptibleTask *)original {
  [super __javaClone:original];
  JreRelease(this$1_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentCombinedFuture:withJavaUtilConcurrentCallable:withJavaUtilConcurrentExecutor:);
  methods[1].selector = @selector(setValue);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$1_", "LComGoogleCommonUtilConcurrentCombinedFuture;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
    { "callable_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x12, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentCallable;LJavaUtilConcurrentExecutor;", "(Ljava/util/concurrent/Callable<TV;>;Ljava/util/concurrent/Executor;)V", "LJavaLangException;", "Lcom/google/common/util/concurrent/CombinedFuture<TV;>;", "Ljava/util/concurrent/Callable<TV;>;", "LComGoogleCommonUtilConcurrentCombinedFuture;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentCombinedFuture_CallableInterruptibleTask = { "CallableInterruptibleTask", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x12, 2, 2, 5, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentCombinedFuture_CallableInterruptibleTask;
}

@end

void ComGoogleCommonUtilConcurrentCombinedFuture_CallableInterruptibleTask_initWithComGoogleCommonUtilConcurrentCombinedFuture_withJavaUtilConcurrentCallable_withJavaUtilConcurrentExecutor_(ComGoogleCommonUtilConcurrentCombinedFuture_CallableInterruptibleTask *self, ComGoogleCommonUtilConcurrentCombinedFuture *outer$, id<JavaUtilConcurrentCallable> callable, id<JavaUtilConcurrentExecutor> listenerExecutor) {
  self->this$1_ = outer$;
  ComGoogleCommonUtilConcurrentCombinedFuture_CombinedFutureInterruptibleTask_initWithComGoogleCommonUtilConcurrentCombinedFuture_withJavaUtilConcurrentExecutor_(self, outer$, listenerExecutor);
  self->callable_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(callable);
}

ComGoogleCommonUtilConcurrentCombinedFuture_CallableInterruptibleTask *new_ComGoogleCommonUtilConcurrentCombinedFuture_CallableInterruptibleTask_initWithComGoogleCommonUtilConcurrentCombinedFuture_withJavaUtilConcurrentCallable_withJavaUtilConcurrentExecutor_(ComGoogleCommonUtilConcurrentCombinedFuture *outer$, id<JavaUtilConcurrentCallable> callable, id<JavaUtilConcurrentExecutor> listenerExecutor) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentCombinedFuture_CallableInterruptibleTask, initWithComGoogleCommonUtilConcurrentCombinedFuture_withJavaUtilConcurrentCallable_withJavaUtilConcurrentExecutor_, outer$, callable, listenerExecutor)
}

ComGoogleCommonUtilConcurrentCombinedFuture_CallableInterruptibleTask *create_ComGoogleCommonUtilConcurrentCombinedFuture_CallableInterruptibleTask_initWithComGoogleCommonUtilConcurrentCombinedFuture_withJavaUtilConcurrentCallable_withJavaUtilConcurrentExecutor_(ComGoogleCommonUtilConcurrentCombinedFuture *outer$, id<JavaUtilConcurrentCallable> callable, id<JavaUtilConcurrentExecutor> listenerExecutor) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentCombinedFuture_CallableInterruptibleTask, initWithComGoogleCommonUtilConcurrentCombinedFuture_withJavaUtilConcurrentCallable_withJavaUtilConcurrentExecutor_, outer$, callable, listenerExecutor)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentCombinedFuture_CallableInterruptibleTask)
