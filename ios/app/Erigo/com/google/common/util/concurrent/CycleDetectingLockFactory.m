//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/util/concurrent/CycleDetectingLockFactory.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/MoreObjects.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/collect/ImmutableSet.h"
#include "com/google/common/collect/Lists.h"
#include "com/google/common/collect/MapMaker.h"
#include "com/google/common/collect/Maps.h"
#include "com/google/common/collect/Sets.h"
#include "com/google/common/util/concurrent/CycleDetectingLockFactory.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/StackTraceElement.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/ThreadLocal.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/EnumMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ConcurrentMap.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/locks/ReentrantLock.h"
#include "java/util/concurrent/locks/ReentrantReadWriteLock.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "javax/annotation/Nullable.h"

@class ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadLock;
@class ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantWriteLock;

#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ComGoogleCommonUtilConcurrentCycleDetectingLockFactory ()

+ (id<JavaUtilMap>)getOrCreateNodesWithIOSClass:(IOSClass *)clazz;

+ (NSString *)getLockNameWithJavaLangEnum:(JavaLangEnum *)rank;

- (instancetype)initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy:(id<ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy>)policy;

- (void)aboutToAcquireWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock:(id<ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock>)lock;

+ (void)lockStateChangedWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock:(id<ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock>)lock;

@end

inline id<JavaUtilConcurrentConcurrentMap> ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_get_lockGraphNodesPerType();
static id<JavaUtilConcurrentConcurrentMap> ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_lockGraphNodesPerType;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory, lockGraphNodesPerType, id<JavaUtilConcurrentConcurrentMap>)

inline JavaUtilLoggingLogger *ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_get_logger();
static JavaUtilLoggingLogger *ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_logger;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory, logger, JavaUtilLoggingLogger *)

inline JavaLangThreadLocal *ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_get_acquiredLocks();
static JavaLangThreadLocal *ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_acquiredLocks;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory, acquiredLocks, JavaLangThreadLocal *)

__attribute__((unused)) static id<JavaUtilMap> ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_getOrCreateNodesWithIOSClass_(IOSClass *clazz);

__attribute__((unused)) static NSString *ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_getLockNameWithJavaLangEnum_(JavaLangEnum *rank);

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory *self, id<ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy> policy);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentCycleDetectingLockFactory *new_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy_(id<ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy> policy) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentCycleDetectingLockFactory *create_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy_(id<ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy> policy);

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_aboutToAcquireWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory *self, id<ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock> lock);

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_lockStateChangedWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock_(id<ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock> lock);

@interface ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy : NSObject

@end

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_initWithNSString_withInt_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies *new_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_1 : ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies < NSCopying >

- (void)handlePotentialDeadlockWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException:(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException *)e;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_1)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_1_initWithNSString_withInt_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_1 *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_1 *new_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_1_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_2 : ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies < NSCopying >

- (void)handlePotentialDeadlockWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException:(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException *)e;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_2)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_2_initWithNSString_withInt_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_2 *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_2 *new_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_2_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_3 : ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies < NSCopying >

- (void)handlePotentialDeadlockWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException:(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException *)e;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_3)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_3_initWithNSString_withInt_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_3 *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_3 *new_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_3_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_WithExplicitOrdering () {
 @public
  id<JavaUtilMap> lockGraphNodes_;
}

@end

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_WithExplicitOrdering, lockGraphNodes_, id<JavaUtilMap>)

@interface ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_1 : JavaLangThreadLocal

- (instancetype)init;

- (JavaUtilArrayList *)initialValue OBJC_METHOD_FAMILY_NONE;

- (JavaUtilArrayList *)get;

- (JavaUtilArrayList *)childValueWithId:(JavaUtilArrayList *)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_1)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_1_init(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_1 *self);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_1 *new_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_1 *create_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_1_init();

@interface ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException () {
 @public
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace *conflictingStackTrace_;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode:(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *)node1
                    withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode:(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *)node2
                withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace:(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace *)conflictingStackTrace;

@end

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException, conflictingStackTrace_, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace *)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException *self, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *node1, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *node2, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace *conflictingStackTrace);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException *new_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *node1, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *node2, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace *conflictingStackTrace) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException *create_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *node1, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *node2, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace *conflictingStackTrace);

@interface ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock : NSObject

@end

@interface ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode ()

- (ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace *)findPathToWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode:(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *)node
                                                                                                                                                 withJavaUtilSet:(id<JavaUtilSet>)seen;

@end

__attribute__((unused)) static ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace *ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_findPathToWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withJavaUtilSet_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *self, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *node, id<JavaUtilSet> seen);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode__Annotations$0();

@interface ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantLock () {
 @public
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory *this$0_;
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *lockGraphNode_;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory:(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory *)outer$
      withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode:(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *)lockGraphNode
                                                                   withBoolean:(jboolean)fair;

@end

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantLock, lockGraphNode_, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantLock_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withBoolean_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantLock *self, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory *outer$, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *lockGraphNode, jboolean fair);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantLock *new_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantLock_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withBoolean_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory *outer$, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *lockGraphNode, jboolean fair) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantLock *create_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantLock_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withBoolean_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory *outer$, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *lockGraphNode, jboolean fair);

@interface ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock () {
 @public
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadLock *readLock_;
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantWriteLock *writeLock_;
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *lockGraphNode_;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory:(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory *)outer$
      withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode:(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *)lockGraphNode
                                                                   withBoolean:(jboolean)fair;

@end

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock, readLock_, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadLock *)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock, writeLock_, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantWriteLock *)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock, lockGraphNode_, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withBoolean_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock *self, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory *outer$, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *lockGraphNode, jboolean fair);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock *new_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withBoolean_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory *outer$, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *lockGraphNode, jboolean fair) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock *create_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withBoolean_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory *outer$, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *lockGraphNode, jboolean fair);

@interface ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadLock : JavaUtilConcurrentLocksReentrantReadWriteLock_ReadLock {
 @public
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory *this$0_;
  __unsafe_unretained ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock *readWriteLock_;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory:(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory *)outer$
withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock:(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock *)readWriteLock;

- (void)lock;

- (void)lockInterruptibly;

- (jboolean)tryLock;

- (jboolean)tryLockWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (void)unlock;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadLock)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadLock_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadLock *self, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory *outer$, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock *readWriteLock);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadLock *new_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadLock_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory *outer$, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock *readWriteLock) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadLock *create_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadLock_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory *outer$, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock *readWriteLock);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadLock)

@interface ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantWriteLock : JavaUtilConcurrentLocksReentrantReadWriteLock_WriteLock {
 @public
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory *this$0_;
  __unsafe_unretained ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock *readWriteLock_;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory:(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory *)outer$
withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock:(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock *)readWriteLock;

- (void)lock;

- (void)lockInterruptibly;

- (jboolean)tryLock;

- (jboolean)tryLockWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (void)unlock;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantWriteLock)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantWriteLock_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantWriteLock *self, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory *outer$, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock *readWriteLock);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantWriteLock *new_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantWriteLock_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory *outer$, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock *readWriteLock) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantWriteLock *create_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantWriteLock_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory *outer$, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock *readWriteLock);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantWriteLock)

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory)

@implementation ComGoogleCommonUtilConcurrentCycleDetectingLockFactory

+ (ComGoogleCommonUtilConcurrentCycleDetectingLockFactory *)newInstanceWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy:(id<ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy>)policy {
  return ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_newInstanceWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy_(policy);
}

- (JavaUtilConcurrentLocksReentrantLock *)newReentrantLockWithNSString:(NSString *)lockName {
  return [self newReentrantLockWithNSString:lockName withBoolean:false];
}

- (JavaUtilConcurrentLocksReentrantLock *)newReentrantLockWithNSString:(NSString *)lockName
                                                           withBoolean:(jboolean)fair {
  return policy_ == JreLoadEnum(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies, DISABLED) ? new_JavaUtilConcurrentLocksReentrantLock_initWithBoolean_(fair) : new_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantLock_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withBoolean_(self, new_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_initWithNSString_(lockName), fair);
}

- (JavaUtilConcurrentLocksReentrantReadWriteLock *)newReentrantReadWriteLockWithNSString:(NSString *)lockName {
  return [self newReentrantReadWriteLockWithNSString:lockName withBoolean:false];
}

- (JavaUtilConcurrentLocksReentrantReadWriteLock *)newReentrantReadWriteLockWithNSString:(NSString *)lockName
                                                                             withBoolean:(jboolean)fair {
  return policy_ == JreLoadEnum(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies, DISABLED) ? new_JavaUtilConcurrentLocksReentrantReadWriteLock_initWithBoolean_(fair) : new_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withBoolean_(self, new_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_initWithNSString_(lockName), fair);
}

+ (ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_WithExplicitOrdering *)newInstanceWithExplicitOrderingWithIOSClass:(IOSClass *)enumClass
                                                           withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy:(id<ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy>)policy {
  return ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_newInstanceWithExplicitOrderingWithIOSClass_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy_(enumClass, policy);
}

+ (id<JavaUtilMap>)getOrCreateNodesWithIOSClass:(IOSClass *)clazz {
  return ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_getOrCreateNodesWithIOSClass_(clazz);
}

+ (id<JavaUtilMap>)createNodesWithIOSClass:(IOSClass *)clazz {
  return ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_createNodesWithIOSClass_(clazz);
}

+ (NSString *)getLockNameWithJavaLangEnum:(JavaLangEnum *)rank {
  return ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_getLockNameWithJavaLangEnum_(rank);
}

- (instancetype)initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy:(id<ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy>)policy {
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy_(self, policy);
  return self;
}

- (void)aboutToAcquireWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock:(id<ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock>)lock {
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_aboutToAcquireWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock_(self, lock);
}

+ (void)lockStateChangedWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock:(id<ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock>)lock {
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_lockStateChangedWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock_(lock);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentLocksReentrantLock;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentLocksReentrantLock;", 0x1, 2, 4, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentLocksReentrantReadWriteLock;", 0x1, 5, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentLocksReentrantReadWriteLock;", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_WithExplicitOrdering;", 0x9, 6, 7, -1, 8, -1, -1 },
    { NULL, "LJavaUtilMap;", 0xa, 9, 10, -1, 11, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x8, 12, 10, -1, 13, -1, -1 },
    { NULL, "LNSString;", 0xa, 14, 15, -1, 16, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 19, 18, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(newInstanceWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy:);
  methods[1].selector = @selector(newReentrantLockWithNSString:);
  methods[2].selector = @selector(newReentrantLockWithNSString:withBoolean:);
  methods[3].selector = @selector(newReentrantReadWriteLockWithNSString:);
  methods[4].selector = @selector(newReentrantReadWriteLockWithNSString:withBoolean:);
  methods[5].selector = @selector(newInstanceWithExplicitOrderingWithIOSClass:withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy:);
  methods[6].selector = @selector(getOrCreateNodesWithIOSClass:);
  methods[7].selector = @selector(createNodesWithIOSClass:);
  methods[8].selector = @selector(getLockNameWithJavaLangEnum:);
  methods[9].selector = @selector(initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy:);
  methods[10].selector = @selector(aboutToAcquireWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock:);
  methods[11].selector = @selector(lockStateChangedWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "lockGraphNodesPerType", "LJavaUtilConcurrentConcurrentMap;", .constantValue.asLong = 0, 0x1a, -1, 20, 21, -1 },
    { "logger", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 22, -1, -1 },
    { "policy_", "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "acquiredLocks", "LJavaLangThreadLocal;", .constantValue.asLong = 0, 0x1a, -1, 23, 24, -1 },
  };
  static const void *ptrTable[] = { "newInstance", "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy;", "newReentrantLock", "LNSString;", "LNSString;Z", "newReentrantReadWriteLock", "newInstanceWithExplicitOrdering", "LIOSClass;LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy;", "<E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;Lcom/google/common/util/concurrent/CycleDetectingLockFactory$Policy;)Lcom/google/common/util/concurrent/CycleDetectingLockFactory$WithExplicitOrdering<TE;>;", "getOrCreateNodes", "LIOSClass;", "(Ljava/lang/Class<+Ljava/lang/Enum;>;)Ljava/util/Map<+Ljava/lang/Enum;Lcom/google/common/util/concurrent/CycleDetectingLockFactory$LockGraphNode;>;", "createNodes", "<E:Ljava/lang/Enum<TE;>;>(Ljava/lang/Class<TE;>;)Ljava/util/Map<TE;Lcom/google/common/util/concurrent/CycleDetectingLockFactory$LockGraphNode;>;", "getLockName", "LJavaLangEnum;", "(Ljava/lang/Enum<*>;)Ljava/lang/String;", "aboutToAcquire", "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock;", "lockStateChanged", &ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_lockGraphNodesPerType, "Ljava/util/concurrent/ConcurrentMap<Ljava/lang/Class<+Ljava/lang/Enum;>;Ljava/util/Map<+Ljava/lang/Enum;Lcom/google/common/util/concurrent/CycleDetectingLockFactory$LockGraphNode;>;>;", &ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_logger, &ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_acquiredLocks, "Ljava/lang/ThreadLocal<Ljava/util/ArrayList<Lcom/google/common/util/concurrent/CycleDetectingLockFactory$LockGraphNode;>;>;", "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy;LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies;LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_WithExplicitOrdering;LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace;LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException;LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock;LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode;LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantLock;LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock;LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadLock;LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantWriteLock;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentCycleDetectingLockFactory = { "CycleDetectingLockFactory", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x1, 12, 4, -1, 25, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory;
}

+ (void)initialize {
  if (self == [ComGoogleCommonUtilConcurrentCycleDetectingLockFactory class]) {
    ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_lockGraphNodesPerType = [((ComGoogleCommonCollectMapMaker *) nil_chk([new_ComGoogleCommonCollectMapMaker_init() weakKeys])) makeMap];
    ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_class_() getName]);
    ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_acquiredLocks = new_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_1_init();
    J2OBJC_SET_INITIALIZED(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory)
  }
}

@end

ComGoogleCommonUtilConcurrentCycleDetectingLockFactory *ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_newInstanceWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy_(id<ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy> policy) {
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_initialize();
  return new_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy_(policy);
}

ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_WithExplicitOrdering *ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_newInstanceWithExplicitOrderingWithIOSClass_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy_(IOSClass *enumClass, id<ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy> policy) {
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_initialize();
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(enumClass);
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(policy);
  id<JavaUtilMap> lockGraphNodes = ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_getOrCreateNodesWithIOSClass_(enumClass);
  return new_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_WithExplicitOrdering_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy_withJavaUtilMap_(policy, lockGraphNodes);
}

id<JavaUtilMap> ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_getOrCreateNodesWithIOSClass_(IOSClass *clazz) {
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_initialize();
  id<JavaUtilMap> existing = [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_lockGraphNodesPerType)) getWithId:clazz];
  if (existing != nil) {
    return existing;
  }
  id<JavaUtilMap> created = ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_createNodesWithIOSClass_(clazz);
  existing = [ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_lockGraphNodesPerType putIfAbsentWithId:clazz withId:created];
  return ComGoogleCommonBaseMoreObjects_firstNonNullWithId_withId_(existing, created);
}

id<JavaUtilMap> ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_createNodesWithIOSClass_(IOSClass *clazz) {
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_initialize();
  JavaUtilEnumMap *map = ComGoogleCommonCollectMaps_newEnumMapWithIOSClass_(clazz);
  IOSObjectArray *keys = [((IOSClass *) nil_chk(clazz)) getEnumConstants];
  jint numKeys = ((IOSObjectArray *) nil_chk(keys))->size_;
  JavaUtilArrayList *nodes = ComGoogleCommonCollectLists_newArrayListWithCapacityWithInt_(numKeys);
  {
    IOSObjectArray *a__ = keys;
    JavaLangEnum * const *b__ = a__->buffer_;
    JavaLangEnum * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaLangEnum *key = *b__++;
      ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *node = new_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_initWithNSString_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_getLockNameWithJavaLangEnum_(key));
      [((JavaUtilArrayList *) nil_chk(nodes)) addWithId:node];
      (void) [((JavaUtilEnumMap *) nil_chk(map)) putWithId:key withId:node];
    }
  }
  for (jint i = 1; i < numKeys; i++) {
    [((ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *) nil_chk([((JavaUtilArrayList *) nil_chk(nodes)) getWithInt:i])) checkAcquiredLocksWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy:JreLoadEnum(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies, THROW) withJavaUtilList:[nodes subListWithInt:0 withInt:i]];
  }
  for (jint i = 0; i < numKeys - 1; i++) {
    [((ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *) nil_chk([((JavaUtilArrayList *) nil_chk(nodes)) getWithInt:i])) checkAcquiredLocksWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy:JreLoadEnum(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies, DISABLED) withJavaUtilList:[nodes subListWithInt:i + 1 withInt:numKeys]];
  }
  return JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(map);
}

NSString *ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_getLockNameWithJavaLangEnum_(JavaLangEnum *rank) {
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_initialize();
  return JreStrcat("$C$", [((IOSClass *) nil_chk([((JavaLangEnum *) nil_chk(rank)) getDeclaringClass])) getSimpleName], '.', [rank name]);
}

void ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory *self, id<ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy> policy) {
  NSObject_init(self);
  self->policy_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(policy);
}

ComGoogleCommonUtilConcurrentCycleDetectingLockFactory *new_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy_(id<ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy> policy) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory, initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy_, policy)
}

ComGoogleCommonUtilConcurrentCycleDetectingLockFactory *create_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy_(id<ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy> policy) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory, initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy_, policy)
}

void ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_aboutToAcquireWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory *self, id<ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock> lock) {
  if (![((id<ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock>) nil_chk(lock)) isAcquiredByCurrentThread]) {
    JavaUtilArrayList *acquiredLockList = [((JavaLangThreadLocal *) nil_chk(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_acquiredLocks)) get];
    ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *node = [lock getLockGraphNode];
    [((ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *) nil_chk(node)) checkAcquiredLocksWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy:self->policy_ withJavaUtilList:acquiredLockList];
    [((JavaUtilArrayList *) nil_chk(acquiredLockList)) addWithId:node];
  }
}

void ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_lockStateChangedWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock_(id<ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock> lock) {
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_initialize();
  if (![((id<ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock>) nil_chk(lock)) isAcquiredByCurrentThread]) {
    JavaUtilArrayList *acquiredLockList = [((JavaLangThreadLocal *) nil_chk(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_acquiredLocks)) get];
    ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *node = [lock getLockGraphNode];
    for (jint i = [((JavaUtilArrayList *) nil_chk(acquiredLockList)) size] - 1; i >= 0; i--) {
      if ([acquiredLockList getWithInt:i] == node) {
        (void) [acquiredLockList removeWithInt:i];
        break;
      }
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory)

@implementation ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(handlePotentialDeadlockWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "handlePotentialDeadlock", "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException;", "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy = { "Policy", "com.google.common.util.concurrent", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy)

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies)

ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies *ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_values_[3];

@implementation ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies

+ (IOSObjectArray *)values {
  return ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_values();
}

+ (ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies *)valueOfWithNSString:(NSString *)name {
  return ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "THROW", "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "WARN", "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "DISABLED", "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies, THROW), &JreEnum(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies, WARN), &JreEnum(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies, DISABLED), "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory;", "Ljava/lang/Enum<Lcom/google/common/util/concurrent/CycleDetectingLockFactory$Policies;>;Lcom/google/common/util/concurrent/CycleDetectingLockFactory$Policy;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies = { "Policies", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x4409, 2, 3, 5, -1, -1, 6, -1 };
  return &_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies;
}

+ (void)initialize {
  if (self == [ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies class]) {
    JreEnum(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies, THROW) = new_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_1_initWithNSString_withInt_(@"THROW", 0);
    JreEnum(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies, WARN) = new_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_2_initWithNSString_withInt_(@"WARN", 1);
    JreEnum(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies, DISABLED) = new_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_3_initWithNSString_withInt_(@"DISABLED", 2);
    J2OBJC_SET_INITIALIZED(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies)
  }
}

@end

void ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_initWithNSString_withInt_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies *new_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_values() {
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_initialize();
  return [IOSObjectArray arrayWithObjects:ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_values_ count:3 type:ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_class_()];
}

ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies *ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_valueOfWithNSString_(NSString *name) {
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_initialize();
  for (int i = 0; i < 3; i++) {
    ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies *e = ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies *ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_fromOrdinal(NSUInteger ordinal) {
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_initialize();
  if (ordinal >= 3) {
    return nil;
  }
  return ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies)

@implementation ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_1

- (void)handlePotentialDeadlockWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException:(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException *)e {
  @throw nil_chk(e);
}

- (void)dealloc {
  JreCheckFinalize(self, [ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_1 class]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(handlePotentialDeadlockWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "handlePotentialDeadlock", "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException;", "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_1 = { "", "com.google.common.util.concurrent", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 2, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_1;
}

@end

void ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_1_initWithNSString_withInt_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_1 *self, NSString *__name, jint __ordinal) {
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_initWithNSString_withInt_(self, __name, __ordinal);
}

ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_1 *new_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_1_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_1, initWithNSString_withInt_, __name, __ordinal)
}

@implementation ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_2

- (void)handlePotentialDeadlockWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException:(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException *)e {
  [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory, logger))) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:@"Detected potential deadlock" withNSException:e];
}

- (void)dealloc {
  JreCheckFinalize(self, [ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_2 class]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(handlePotentialDeadlockWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "handlePotentialDeadlock", "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException;", "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_2 = { "", "com.google.common.util.concurrent", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 2, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_2;
}

@end

void ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_2_initWithNSString_withInt_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_2 *self, NSString *__name, jint __ordinal) {
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_initWithNSString_withInt_(self, __name, __ordinal);
}

ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_2 *new_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_2_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_2, initWithNSString_withInt_, __name, __ordinal)
}

@implementation ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_3

- (void)handlePotentialDeadlockWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException:(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException *)e {
}

- (void)dealloc {
  JreCheckFinalize(self, [ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_3 class]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(handlePotentialDeadlockWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "handlePotentialDeadlock", "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException;", "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_3 = { "", "com.google.common.util.concurrent", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 2, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_3;
}

@end

void ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_3_initWithNSString_withInt_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_3 *self, NSString *__name, jint __ordinal) {
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_initWithNSString_withInt_(self, __name, __ordinal);
}

ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_3 *new_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_3_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies_3, initWithNSString_withInt_, __name, __ordinal)
}

@implementation ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_WithExplicitOrdering

- (instancetype)initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy:(id<ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy>)policy
                                                                      withJavaUtilMap:(id<JavaUtilMap>)lockGraphNodes {
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_WithExplicitOrdering_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy_withJavaUtilMap_(self, policy, lockGraphNodes);
  return self;
}

- (JavaUtilConcurrentLocksReentrantLock *)newReentrantLockWithJavaLangEnum:(JavaLangEnum *)rank {
  return [self newReentrantLockWithJavaLangEnum:rank withBoolean:false];
}

- (JavaUtilConcurrentLocksReentrantLock *)newReentrantLockWithJavaLangEnum:(JavaLangEnum *)rank
                                                               withBoolean:(jboolean)fair {
  return policy_ == JreLoadEnum(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies, DISABLED) ? new_JavaUtilConcurrentLocksReentrantLock_initWithBoolean_(fair) : new_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantLock_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withBoolean_(self, [((id<JavaUtilMap>) nil_chk(lockGraphNodes_)) getWithId:rank], fair);
}

- (JavaUtilConcurrentLocksReentrantReadWriteLock *)newReentrantReadWriteLockWithJavaLangEnum:(JavaLangEnum *)rank {
  return [self newReentrantReadWriteLockWithJavaLangEnum:rank withBoolean:false];
}

- (JavaUtilConcurrentLocksReentrantReadWriteLock *)newReentrantReadWriteLockWithJavaLangEnum:(JavaLangEnum *)rank
                                                                                 withBoolean:(jboolean)fair {
  return policy_ == JreLoadEnum(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policies, DISABLED) ? new_JavaUtilConcurrentLocksReentrantReadWriteLock_initWithBoolean_(fair) : new_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withBoolean_(self, [((id<JavaUtilMap>) nil_chk(lockGraphNodes_)) getWithId:rank], fair);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LJavaUtilConcurrentLocksReentrantLock;", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LJavaUtilConcurrentLocksReentrantLock;", 0x1, 2, 5, -1, 6, -1, -1 },
    { NULL, "LJavaUtilConcurrentLocksReentrantReadWriteLock;", 0x1, 7, 3, -1, 8, -1, -1 },
    { NULL, "LJavaUtilConcurrentLocksReentrantReadWriteLock;", 0x1, 7, 5, -1, 9, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy:withJavaUtilMap:);
  methods[1].selector = @selector(newReentrantLockWithJavaLangEnum:);
  methods[2].selector = @selector(newReentrantLockWithJavaLangEnum:withBoolean:);
  methods[3].selector = @selector(newReentrantReadWriteLockWithJavaLangEnum:);
  methods[4].selector = @selector(newReentrantReadWriteLockWithJavaLangEnum:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "lockGraphNodes_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 10, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy;LJavaUtilMap;", "(Lcom/google/common/util/concurrent/CycleDetectingLockFactory$Policy;Ljava/util/Map<TE;Lcom/google/common/util/concurrent/CycleDetectingLockFactory$LockGraphNode;>;)V", "newReentrantLock", "LJavaLangEnum;", "(TE;)Ljava/util/concurrent/locks/ReentrantLock;", "LJavaLangEnum;Z", "(TE;Z)Ljava/util/concurrent/locks/ReentrantLock;", "newReentrantReadWriteLock", "(TE;)Ljava/util/concurrent/locks/ReentrantReadWriteLock;", "(TE;Z)Ljava/util/concurrent/locks/ReentrantReadWriteLock;", "Ljava/util/Map<TE;Lcom/google/common/util/concurrent/CycleDetectingLockFactory$LockGraphNode;>;", "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory;", "<E:Ljava/lang/Enum<TE;>;>Lcom/google/common/util/concurrent/CycleDetectingLockFactory;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_WithExplicitOrdering = { "WithExplicitOrdering", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x19, 5, 1, 11, -1, -1, 12, -1 };
  return &_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_WithExplicitOrdering;
}

@end

void ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_WithExplicitOrdering_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy_withJavaUtilMap_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_WithExplicitOrdering *self, id<ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy> policy, id<JavaUtilMap> lockGraphNodes) {
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy_(self, policy);
  self->lockGraphNodes_ = lockGraphNodes;
}

ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_WithExplicitOrdering *new_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_WithExplicitOrdering_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy_withJavaUtilMap_(id<ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy> policy, id<JavaUtilMap> lockGraphNodes) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_WithExplicitOrdering, initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy_withJavaUtilMap_, policy, lockGraphNodes)
}

ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_WithExplicitOrdering *create_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_WithExplicitOrdering_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy_withJavaUtilMap_(id<ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy> policy, id<JavaUtilMap> lockGraphNodes) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_WithExplicitOrdering, initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy_withJavaUtilMap_, policy, lockGraphNodes)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_WithExplicitOrdering)

@implementation ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaUtilArrayList *)initialValue {
  return ComGoogleCommonCollectLists_newArrayListWithCapacityWithInt_(3);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x4, -1, -1, -1, 0, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initialValue);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()Ljava/util/ArrayList<Lcom/google/common/util/concurrent/CycleDetectingLockFactory$LockGraphNode;>;", "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory;", "Ljava/lang/ThreadLocal<Ljava/util/ArrayList<Lcom/google/common/util/concurrent/CycleDetectingLockFactory$LockGraphNode;>;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_1 = { "", "com.google.common.util.concurrent", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 1, -1, -1, 2, -1 };
  return &_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_1;
}

@end

void ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_1_init(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_1 *self) {
  JavaLangThreadLocal_init(self);
}

ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_1 *new_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_1_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_1, init)
}

ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_1 *create_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_1_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_1, init)
}

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace)

IOSObjectArray *ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace_EMPTY_STACK_TRACE;
ComGoogleCommonCollectImmutableSet *ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace_EXCLUDED_CLASS_NAMES;

@implementation ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace

- (instancetype)initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode:(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *)node1
                    withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode:(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *)node2 {
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_(self, node1, node2);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode:withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY_STACK_TRACE", "[LJavaLangStackTraceElement;", .constantValue.asLong = 0, 0x18, -1, 1, -1, -1 },
    { "EXCLUDED_CLASS_NAMES", "LComGoogleCommonCollectImmutableSet;", .constantValue.asLong = 0, 0x18, -1, 2, 3, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode;LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode;", &ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace_EMPTY_STACK_TRACE, &ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace_EXCLUDED_CLASS_NAMES, "Lcom/google/common/collect/ImmutableSet<Ljava/lang/String;>;", "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace = { "ExampleStackTrace", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0xa, 1, 2, 4, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace;
}

+ (void)initialize {
  if (self == [ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace class]) {
    ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace_EMPTY_STACK_TRACE = [IOSObjectArray newArrayWithLength:0 type:JavaLangStackTraceElement_class_()];
    ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace_EXCLUDED_CLASS_NAMES = ComGoogleCommonCollectImmutableSet_ofWithId_withId_withId_([ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_class_() getName], [ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace_class_() getName], [ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_class_() getName]);
    J2OBJC_SET_INITIALIZED(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace)
  }
}

@end

void ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace *self, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *node1, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *node2) {
  JavaLangIllegalStateException_initWithNSString_(self, JreStrcat("$$$", [((ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *) nil_chk(node1)) getLockName], @" -> ", [((ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *) nil_chk(node2)) getLockName]));
  IOSObjectArray *origStackTrace = [self getStackTrace];
  for (jint i = 0, n = ((IOSObjectArray *) nil_chk(origStackTrace))->size_; i < n; i++) {
    if ([((NSString *) nil_chk([ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_WithExplicitOrdering_class_() getName])) isEqual:[((JavaLangStackTraceElement *) nil_chk(IOSObjectArray_Get(origStackTrace, i))) getClassName]]) {
      [self setStackTraceWithJavaLangStackTraceElementArray:ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace_EMPTY_STACK_TRACE];
      break;
    }
    if (![((ComGoogleCommonCollectImmutableSet *) nil_chk(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace_EXCLUDED_CLASS_NAMES)) containsWithId:[((JavaLangStackTraceElement *) nil_chk(IOSObjectArray_Get(origStackTrace, i))) getClassName]]) {
      [self setStackTraceWithJavaLangStackTraceElementArray:JavaUtilArrays_copyOfRangeWithNSObjectArray_withInt_withInt_(origStackTrace, i, n)];
      break;
    }
  }
}

ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace *new_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *node1, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *node2) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace, initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_, node1, node2)
}

ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace *create_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *node1, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *node2) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace, initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_, node1, node2)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace)

@implementation ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException

- (instancetype)initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode:(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *)node1
                    withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode:(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *)node2
                withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace:(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace *)conflictingStackTrace {
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace_(self, node1, node2, conflictingStackTrace);
  return self;
}

- (ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace *)getConflictingStackTrace {
  return conflictingStackTrace_;
}

- (NSString *)getMessage {
  JavaLangStringBuilder *message = new_JavaLangStringBuilder_initWithNSString_([super getMessage]);
  for (NSException *t = conflictingStackTrace_; t != nil; t = [t getCause]) {
    (void) [((JavaLangStringBuilder *) nil_chk([message appendWithNSString:@", "])) appendWithNSString:[t getMessage]];
  }
  return [message description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode:withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode:withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace:);
  methods[1].selector = @selector(getConflictingStackTrace);
  methods[2].selector = @selector(getMessage);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "conflictingStackTrace_", "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode;LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode;LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace;", "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException = { "PotentialDeadlockException", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x19, 3, 1, 1, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException;
}

@end

void ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException *self, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *node1, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *node2, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace *conflictingStackTrace) {
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_(self, node1, node2);
  self->conflictingStackTrace_ = conflictingStackTrace;
  (void) [self initCauseWithNSException:conflictingStackTrace];
}

ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException *new_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *node1, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *node2, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace *conflictingStackTrace) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException, initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace_, node1, node2, conflictingStackTrace)
}

ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException *create_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *node1, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *node2, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace *conflictingStackTrace) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException, initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace_, node1, node2, conflictingStackTrace)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException)

@implementation ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getLockGraphNode);
  methods[1].selector = @selector(isAcquiredByCurrentThread);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock = { "CycleDetectingLock", "com.google.common.util.concurrent", ptrTable, methods, NULL, 7, 0x60a, 2, 0, 0, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock)

@implementation ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode

- (instancetype)initWithNSString:(NSString *)lockName {
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_initWithNSString_(self, lockName);
  return self;
}

- (NSString *)getLockName {
  return lockName_;
}

- (void)checkAcquiredLocksWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy:(id<ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy>)policy
                                                                           withJavaUtilList:(id<JavaUtilList>)acquiredLocks {
  for (jint i = 0, size = [((id<JavaUtilList>) nil_chk(acquiredLocks)) size]; i < size; i++) {
    [self checkAcquiredLockWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy:policy withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode:[acquiredLocks getWithInt:i]];
  }
}

- (void)checkAcquiredLockWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy:(id<ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy>)policy
                  withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode:(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *)acquiredLock {
  ComGoogleCommonBasePreconditions_checkStateWithBoolean_withNSString_withId_(self != acquiredLock, @"Attempted to acquire multiple locks with the same rank %s", [((ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *) nil_chk(acquiredLock)) getLockName]);
  if ([((id<JavaUtilMap>) nil_chk(allowedPriorLocks_)) containsKeyWithId:acquiredLock]) {
    return;
  }
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException *previousDeadlockException = [((id<JavaUtilMap>) nil_chk(disallowedPriorLocks_)) getWithId:acquiredLock];
  if (previousDeadlockException != nil) {
    ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException *exception = new_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace_(acquiredLock, self, [previousDeadlockException getConflictingStackTrace]);
    [((id<ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy>) nil_chk(policy)) handlePotentialDeadlockWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException:exception];
    return;
  }
  id<JavaUtilSet> seen = ComGoogleCommonCollectSets_newIdentityHashSet();
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace *path = ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_findPathToWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withJavaUtilSet_(acquiredLock, self, seen);
  if (path == nil) {
    (void) [allowedPriorLocks_ putWithId:acquiredLock withId:new_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_(acquiredLock, self)];
  }
  else {
    ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException *exception = new_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace_(acquiredLock, self, path);
    (void) [disallowedPriorLocks_ putWithId:acquiredLock withId:exception];
    [((id<ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy>) nil_chk(policy)) handlePotentialDeadlockWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_PotentialDeadlockException:exception];
  }
}

- (ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace *)findPathToWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode:(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *)node
                                                                                                                                                 withJavaUtilSet:(id<JavaUtilSet>)seen {
  return ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_findPathToWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withJavaUtilSet_(self, node, seen);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x0, 4, 5, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace;", 0x2, 6, 7, -1, 8, 9, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(getLockName);
  methods[2].selector = @selector(checkAcquiredLocksWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy:withJavaUtilList:);
  methods[3].selector = @selector(checkAcquiredLockWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy:withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode:);
  methods[4].selector = @selector(findPathToWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode:withJavaUtilSet:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "allowedPriorLocks_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "disallowedPriorLocks_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
    { "lockName_", "LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "checkAcquiredLocks", "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy;LJavaUtilList;", "(Lcom/google/common/util/concurrent/CycleDetectingLockFactory$Policy;Ljava/util/List<Lcom/google/common/util/concurrent/CycleDetectingLockFactory$LockGraphNode;>;)V", "checkAcquiredLock", "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_Policy;LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode;", "findPathTo", "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode;LJavaUtilSet;", "(Lcom/google/common/util/concurrent/CycleDetectingLockFactory$LockGraphNode;Ljava/util/Set<Lcom/google/common/util/concurrent/CycleDetectingLockFactory$LockGraphNode;>;)Lcom/google/common/util/concurrent/CycleDetectingLockFactory$ExampleStackTrace;", (void *)&ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode__Annotations$0, "Ljava/util/Map<Lcom/google/common/util/concurrent/CycleDetectingLockFactory$LockGraphNode;Lcom/google/common/util/concurrent/CycleDetectingLockFactory$ExampleStackTrace;>;", "Ljava/util/Map<Lcom/google/common/util/concurrent/CycleDetectingLockFactory$LockGraphNode;Lcom/google/common/util/concurrent/CycleDetectingLockFactory$PotentialDeadlockException;>;", "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode = { "LockGraphNode", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0xa, 5, 3, 12, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode;
}

@end

void ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_initWithNSString_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *self, NSString *lockName) {
  NSObject_init(self);
  self->allowedPriorLocks_ = [((ComGoogleCommonCollectMapMaker *) nil_chk([new_ComGoogleCommonCollectMapMaker_init() weakKeys])) makeMap];
  self->disallowedPriorLocks_ = [((ComGoogleCommonCollectMapMaker *) nil_chk([new_ComGoogleCommonCollectMapMaker_init() weakKeys])) makeMap];
  self->lockName_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(lockName);
}

ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *new_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_initWithNSString_(NSString *lockName) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode, initWithNSString_, lockName)
}

ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *create_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_initWithNSString_(NSString *lockName) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode, initWithNSString_, lockName)
}

ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace *ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_findPathToWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withJavaUtilSet_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *self, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *node, id<JavaUtilSet> seen) {
  if (![((id<JavaUtilSet>) nil_chk(seen)) addWithId:self]) {
    return nil;
  }
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace *found = [((id<JavaUtilMap>) nil_chk(self->allowedPriorLocks_)) getWithId:node];
  if (found != nil) {
    return found;
  }
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([self->allowedPriorLocks_ entrySet])) {
    ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *preAcquiredLock = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
    found = ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_findPathToWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withJavaUtilSet_(nil_chk(preAcquiredLock), node, seen);
    if (found != nil) {
      ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace *path = new_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_(preAcquiredLock, self);
      [path setStackTraceWithJavaLangStackTraceElementArray:[((ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_ExampleStackTrace *) nil_chk([entry_ getValue])) getStackTrace]];
      (void) [path initCauseWithNSException:found];
      return path;
    }
  }
  return nil;
}

IOSObjectArray *ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode)

@implementation ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantLock

- (instancetype)initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory:(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory *)outer$
      withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode:(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *)lockGraphNode
                                                                   withBoolean:(jboolean)fair {
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantLock_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withBoolean_(self, outer$, lockGraphNode, fair);
  return self;
}

- (ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *)getLockGraphNode {
  return lockGraphNode_;
}

- (jboolean)isAcquiredByCurrentThread {
  return [self isHeldByCurrentThread];
}

- (void)lock {
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_aboutToAcquireWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock_(this$0_, self);
  @try {
    [super lock];
  }
  @finally {
    ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_lockStateChangedWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock_(self);
  }
}

- (void)lockInterruptibly {
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_aboutToAcquireWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock_(this$0_, self);
  @try {
    [super lockInterruptibly];
  }
  @finally {
    ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_lockStateChangedWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock_(self);
  }
}

- (jboolean)tryLock {
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_aboutToAcquireWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock_(this$0_, self);
  @try {
    return [super tryLock];
  }
  @finally {
    ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_lockStateChangedWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock_(self);
  }
}

- (jboolean)tryLockWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_aboutToAcquireWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock_(this$0_, self);
  @try {
    return [super tryLockWithLong:timeout withJavaUtilConcurrentTimeUnit:unit];
  }
  @finally {
    ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_lockStateChangedWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock_(self);
  }
}

- (void)unlock {
  @try {
    [super unlock];
  }
  @finally {
    ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_lockStateChangedWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock_(self);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory:withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode:withBoolean:);
  methods[1].selector = @selector(getLockGraphNode);
  methods[2].selector = @selector(isAcquiredByCurrentThread);
  methods[3].selector = @selector(lock);
  methods[4].selector = @selector(lockInterruptibly);
  methods[5].selector = @selector(tryLock);
  methods[6].selector = @selector(tryLockWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[7].selector = @selector(unlock);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "lockGraphNode_", "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode;Z", "LJavaLangInterruptedException;", "tryLock", "JLJavaUtilConcurrentTimeUnit;", "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantLock = { "CycleDetectingReentrantLock", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x10, 8, 2, 4, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantLock;
}

@end

void ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantLock_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withBoolean_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantLock *self, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory *outer$, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *lockGraphNode, jboolean fair) {
  self->this$0_ = outer$;
  JavaUtilConcurrentLocksReentrantLock_initWithBoolean_(self, fair);
  self->lockGraphNode_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(lockGraphNode);
}

ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantLock *new_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantLock_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withBoolean_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory *outer$, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *lockGraphNode, jboolean fair) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantLock, initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withBoolean_, outer$, lockGraphNode, fair)
}

ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantLock *create_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantLock_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withBoolean_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory *outer$, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *lockGraphNode, jboolean fair) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantLock, initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withBoolean_, outer$, lockGraphNode, fair)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantLock)

@implementation ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock

- (instancetype)initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory:(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory *)outer$
      withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode:(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *)lockGraphNode
                                                                   withBoolean:(jboolean)fair {
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withBoolean_(self, outer$, lockGraphNode, fair);
  return self;
}

- (JavaUtilConcurrentLocksReentrantReadWriteLock_ReadLock *)readLock {
  return readLock_;
}

- (JavaUtilConcurrentLocksReentrantReadWriteLock_WriteLock *)writeLock {
  return writeLock_;
}

- (ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *)getLockGraphNode {
  return lockGraphNode_;
}

- (jboolean)isAcquiredByCurrentThread {
  return [self isWriteLockedByCurrentThread] || [self getReadHoldCount] > 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentLocksReentrantReadWriteLock_ReadLock;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentLocksReentrantReadWriteLock_WriteLock;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory:withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode:withBoolean:);
  methods[1].selector = @selector(readLock);
  methods[2].selector = @selector(writeLock);
  methods[3].selector = @selector(getLockGraphNode);
  methods[4].selector = @selector(isAcquiredByCurrentThread);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "readLock_", "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadLock;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "writeLock_", "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantWriteLock;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "lockGraphNode_", "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode;Z", "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock = { "CycleDetectingReentrantReadWriteLock", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x10, 5, 3, 1, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock;
}

@end

void ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withBoolean_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock *self, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory *outer$, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *lockGraphNode, jboolean fair) {
  JavaUtilConcurrentLocksReentrantReadWriteLock_initWithBoolean_(self, fair);
  self->readLock_ = new_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadLock_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock_(outer$, self);
  self->writeLock_ = new_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantWriteLock_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock_(outer$, self);
  self->lockGraphNode_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(lockGraphNode);
}

ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock *new_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withBoolean_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory *outer$, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *lockGraphNode, jboolean fair) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock, initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withBoolean_, outer$, lockGraphNode, fair)
}

ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock *create_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withBoolean_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory *outer$, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode *lockGraphNode, jboolean fair) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock, initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_LockGraphNode_withBoolean_, outer$, lockGraphNode, fair)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock)

@implementation ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadLock

- (instancetype)initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory:(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory *)outer$
withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock:(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock *)readWriteLock {
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadLock_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock_(self, outer$, readWriteLock);
  return self;
}

- (void)lock {
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_aboutToAcquireWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock_(this$0_, readWriteLock_);
  @try {
    [super lock];
  }
  @finally {
    ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_lockStateChangedWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock_(readWriteLock_);
  }
}

- (void)lockInterruptibly {
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_aboutToAcquireWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock_(this$0_, readWriteLock_);
  @try {
    [super lockInterruptibly];
  }
  @finally {
    ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_lockStateChangedWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock_(readWriteLock_);
  }
}

- (jboolean)tryLock {
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_aboutToAcquireWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock_(this$0_, readWriteLock_);
  @try {
    return [super tryLock];
  }
  @finally {
    ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_lockStateChangedWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock_(readWriteLock_);
  }
}

- (jboolean)tryLockWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_aboutToAcquireWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock_(this$0_, readWriteLock_);
  @try {
    return [super tryLockWithLong:timeout withJavaUtilConcurrentTimeUnit:unit];
  }
  @finally {
    ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_lockStateChangedWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock_(readWriteLock_);
  }
}

- (void)unlock {
  @try {
    [super unlock];
  }
  @finally {
    ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_lockStateChangedWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock_(readWriteLock_);
  }
}

- (void)__javaClone:(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadLock *)original {
  [super __javaClone:original];
  JreRelease(readWriteLock_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory:withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock:);
  methods[1].selector = @selector(lock);
  methods[2].selector = @selector(lockInterruptibly);
  methods[3].selector = @selector(tryLock);
  methods[4].selector = @selector(tryLockWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[5].selector = @selector(unlock);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "readWriteLock_", "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock;", "LJavaLangInterruptedException;", "tryLock", "JLJavaUtilConcurrentTimeUnit;", "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadLock = { "CycleDetectingReentrantReadLock", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x2, 6, 2, 4, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadLock;
}

@end

void ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadLock_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadLock *self, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory *outer$, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock *readWriteLock) {
  self->this$0_ = outer$;
  JavaUtilConcurrentLocksReentrantReadWriteLock_ReadLock_initWithJavaUtilConcurrentLocksReentrantReadWriteLock_(self, readWriteLock);
  self->readWriteLock_ = readWriteLock;
}

ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadLock *new_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadLock_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory *outer$, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock *readWriteLock) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadLock, initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock_, outer$, readWriteLock)
}

ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadLock *create_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadLock_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory *outer$, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock *readWriteLock) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadLock, initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock_, outer$, readWriteLock)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadLock)

@implementation ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantWriteLock

- (instancetype)initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory:(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory *)outer$
withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock:(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock *)readWriteLock {
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantWriteLock_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock_(self, outer$, readWriteLock);
  return self;
}

- (void)lock {
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_aboutToAcquireWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock_(this$0_, readWriteLock_);
  @try {
    [super lock];
  }
  @finally {
    ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_lockStateChangedWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock_(readWriteLock_);
  }
}

- (void)lockInterruptibly {
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_aboutToAcquireWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock_(this$0_, readWriteLock_);
  @try {
    [super lockInterruptibly];
  }
  @finally {
    ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_lockStateChangedWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock_(readWriteLock_);
  }
}

- (jboolean)tryLock {
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_aboutToAcquireWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock_(this$0_, readWriteLock_);
  @try {
    return [super tryLock];
  }
  @finally {
    ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_lockStateChangedWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock_(readWriteLock_);
  }
}

- (jboolean)tryLockWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_aboutToAcquireWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock_(this$0_, readWriteLock_);
  @try {
    return [super tryLockWithLong:timeout withJavaUtilConcurrentTimeUnit:unit];
  }
  @finally {
    ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_lockStateChangedWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock_(readWriteLock_);
  }
}

- (void)unlock {
  @try {
    [super unlock];
  }
  @finally {
    ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_lockStateChangedWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingLock_(readWriteLock_);
  }
}

- (void)__javaClone:(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantWriteLock *)original {
  [super __javaClone:original];
  JreRelease(readWriteLock_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory:withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock:);
  methods[1].selector = @selector(lock);
  methods[2].selector = @selector(lockInterruptibly);
  methods[3].selector = @selector(tryLock);
  methods[4].selector = @selector(tryLockWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[5].selector = @selector(unlock);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "readWriteLock_", "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock;", "LJavaLangInterruptedException;", "tryLock", "JLJavaUtilConcurrentTimeUnit;", "LComGoogleCommonUtilConcurrentCycleDetectingLockFactory;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantWriteLock = { "CycleDetectingReentrantWriteLock", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x2, 6, 2, 4, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantWriteLock;
}

@end

void ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantWriteLock_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantWriteLock *self, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory *outer$, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock *readWriteLock) {
  self->this$0_ = outer$;
  JavaUtilConcurrentLocksReentrantReadWriteLock_WriteLock_initWithJavaUtilConcurrentLocksReentrantReadWriteLock_(self, readWriteLock);
  self->readWriteLock_ = readWriteLock;
}

ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantWriteLock *new_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantWriteLock_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory *outer$, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock *readWriteLock) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantWriteLock, initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock_, outer$, readWriteLock)
}

ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantWriteLock *create_ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantWriteLock_initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock_(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory *outer$, ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock *readWriteLock) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantWriteLock, initWithComGoogleCommonUtilConcurrentCycleDetectingLockFactory_withComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantReadWriteLock_, outer$, readWriteLock)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentCycleDetectingLockFactory_CycleDetectingReentrantWriteLock)
