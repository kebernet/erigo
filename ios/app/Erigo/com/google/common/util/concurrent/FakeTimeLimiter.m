//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/util/concurrent/FakeTimeLimiter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/util/concurrent/ExecutionError.h"
#include "com/google/common/util/concurrent/FakeTimeLimiter.h"
#include "com/google/common/util/concurrent/UncheckedExecutionException.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Error.h"
#include "java/lang/Exception.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/ExecutionException.h"
#include "java/util/concurrent/TimeUnit.h"

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonUtilConcurrentFakeTimeLimiter__Annotations$0();

@implementation ComGoogleCommonUtilConcurrentFakeTimeLimiter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentFakeTimeLimiter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)newProxyWithId:(id)target
        withIOSClass:(IOSClass *)interfaceType
            withLong:(jlong)timeoutDuration
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)timeoutUnit {
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(target);
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(interfaceType);
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(timeoutUnit);
  return target;
}

- (id)callWithTimeoutWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable
                                           withLong:(jlong)timeoutDuration
                     withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)timeoutUnit
                                        withBoolean:(jboolean)amInterruptible {
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(timeoutUnit);
  return [((id<JavaUtilConcurrentCallable>) nil_chk(callable)) call];
}

- (id)callWithTimeoutWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable
                                           withLong:(jlong)timeoutDuration
                     withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)timeoutUnit {
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(callable);
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(timeoutUnit);
  @try {
    return [((id<JavaUtilConcurrentCallable>) nil_chk(callable)) call];
  }
  @catch (JavaLangRuntimeException *e) {
    @throw new_ComGoogleCommonUtilConcurrentUncheckedExecutionException_initWithNSException_(e);
  }
  @catch (JavaLangException *e) {
    @throw new_JavaUtilConcurrentExecutionException_initWithNSException_(e);
  }
  @catch (JavaLangError *e) {
    @throw new_ComGoogleCommonUtilConcurrentExecutionError_initWithJavaLangError_(e);
  }
  @catch (NSException *e) {
    @throw new_JavaUtilConcurrentExecutionException_initWithNSException_(e);
  }
}

- (id)callUninterruptiblyWithTimeoutWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable
                                                          withLong:(jlong)timeoutDuration
                                    withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)timeoutUnit {
  return [self callWithTimeoutWithJavaUtilConcurrentCallable:callable withLong:timeoutDuration withJavaUtilConcurrentTimeUnit:timeoutUnit];
}

- (void)runWithTimeoutWithJavaLangRunnable:(id<JavaLangRunnable>)runnable
                                  withLong:(jlong)timeoutDuration
            withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)timeoutUnit {
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(runnable);
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(timeoutUnit);
  @try {
    [((id<JavaLangRunnable>) nil_chk(runnable)) run];
  }
  @catch (JavaLangRuntimeException *e) {
    @throw new_ComGoogleCommonUtilConcurrentUncheckedExecutionException_initWithNSException_(e);
  }
  @catch (JavaLangError *e) {
    @throw new_ComGoogleCommonUtilConcurrentExecutionError_initWithJavaLangError_(e);
  }
  @catch (NSException *e) {
    @throw new_ComGoogleCommonUtilConcurrentUncheckedExecutionException_initWithNSException_(e);
  }
}

- (void)runUninterruptiblyWithTimeoutWithJavaLangRunnable:(id<JavaLangRunnable>)runnable
                                                 withLong:(jlong)timeoutDuration
                           withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)timeoutUnit {
  [self runWithTimeoutWithJavaLangRunnable:runnable withLong:timeoutDuration withJavaUtilConcurrentTimeUnit:timeoutUnit];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, 3, 4, 5, 6, 7, -1 },
    { NULL, "LNSObject;", 0x1, 3, 8, 9, 10, -1, -1 },
    { NULL, "LNSObject;", 0x1, 11, 8, 9, 10, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 13, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(newProxyWithId:withIOSClass:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[2].selector = @selector(callWithTimeoutWithJavaUtilConcurrentCallable:withLong:withJavaUtilConcurrentTimeUnit:withBoolean:);
  methods[3].selector = @selector(callWithTimeoutWithJavaUtilConcurrentCallable:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[4].selector = @selector(callUninterruptiblyWithTimeoutWithJavaUtilConcurrentCallable:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[5].selector = @selector(runWithTimeoutWithJavaLangRunnable:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[6].selector = @selector(runUninterruptiblyWithTimeoutWithJavaLangRunnable:withLong:withJavaUtilConcurrentTimeUnit:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "newProxy", "LNSObject;LIOSClass;JLJavaUtilConcurrentTimeUnit;", "<T:Ljava/lang/Object;>(TT;Ljava/lang/Class<TT;>;JLjava/util/concurrent/TimeUnit;)TT;", "callWithTimeout", "LJavaUtilConcurrentCallable;JLJavaUtilConcurrentTimeUnit;Z", "LJavaLangException;", "<T:Ljava/lang/Object;>(Ljava/util/concurrent/Callable<TT;>;JLjava/util/concurrent/TimeUnit;Z)TT;", (void *)&ComGoogleCommonUtilConcurrentFakeTimeLimiter__Annotations$0, "LJavaUtilConcurrentCallable;JLJavaUtilConcurrentTimeUnit;", "LJavaUtilConcurrentExecutionException;", "<T:Ljava/lang/Object;>(Ljava/util/concurrent/Callable<TT;>;JLjava/util/concurrent/TimeUnit;)TT;", "callUninterruptiblyWithTimeout", "runWithTimeout", "LJavaLangRunnable;JLJavaUtilConcurrentTimeUnit;", "runUninterruptiblyWithTimeout" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentFakeTimeLimiter = { "FakeTimeLimiter", "com.google.common.util.concurrent", ptrTable, methods, NULL, 7, 0x11, 7, 0, -1, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentFakeTimeLimiter;
}

@end

void ComGoogleCommonUtilConcurrentFakeTimeLimiter_init(ComGoogleCommonUtilConcurrentFakeTimeLimiter *self) {
  NSObject_init(self);
}

ComGoogleCommonUtilConcurrentFakeTimeLimiter *new_ComGoogleCommonUtilConcurrentFakeTimeLimiter_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentFakeTimeLimiter, init)
}

ComGoogleCommonUtilConcurrentFakeTimeLimiter *create_ComGoogleCommonUtilConcurrentFakeTimeLimiter_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentFakeTimeLimiter, init)
}

IOSObjectArray *ComGoogleCommonUtilConcurrentFakeTimeLimiter__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentFakeTimeLimiter)
