//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/util/concurrent/ForwardingExecutorService.java
//

#include "J2ObjC_source.h"
#include "com/google/common/collect/ForwardingObject.h"
#include "com/google/common/util/concurrent/ForwardingExecutorService.h"
#include "java/lang/Runnable.h"
#include "java/util/Collection.h"
#include "java/util/List.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/TimeUnit.h"

@implementation ComGoogleCommonUtilConcurrentForwardingExecutorService

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentForwardingExecutorService_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilConcurrentExecutorService>)delegate {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)awaitTerminationWithLong:(jlong)timeout
      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return [((id<JavaUtilConcurrentExecutorService>) nil_chk([self delegate])) awaitTerminationWithLong:timeout withJavaUtilConcurrentTimeUnit:unit];
}

- (id<JavaUtilList>)invokeAllWithJavaUtilCollection:(id<JavaUtilCollection>)tasks {
  return [((id<JavaUtilConcurrentExecutorService>) nil_chk([self delegate])) invokeAllWithJavaUtilCollection:tasks];
}

- (id<JavaUtilList>)invokeAllWithJavaUtilCollection:(id<JavaUtilCollection>)tasks
                                           withLong:(jlong)timeout
                     withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return [((id<JavaUtilConcurrentExecutorService>) nil_chk([self delegate])) invokeAllWithJavaUtilCollection:tasks withLong:timeout withJavaUtilConcurrentTimeUnit:unit];
}

- (id)invokeAnyWithJavaUtilCollection:(id<JavaUtilCollection>)tasks {
  return [((id<JavaUtilConcurrentExecutorService>) nil_chk([self delegate])) invokeAnyWithJavaUtilCollection:tasks];
}

- (id)invokeAnyWithJavaUtilCollection:(id<JavaUtilCollection>)tasks
                             withLong:(jlong)timeout
       withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return [((id<JavaUtilConcurrentExecutorService>) nil_chk([self delegate])) invokeAnyWithJavaUtilCollection:tasks withLong:timeout withJavaUtilConcurrentTimeUnit:unit];
}

- (jboolean)isShutdown {
  return [((id<JavaUtilConcurrentExecutorService>) nil_chk([self delegate])) isShutdown];
}

- (jboolean)isTerminated {
  return [((id<JavaUtilConcurrentExecutorService>) nil_chk([self delegate])) isTerminated];
}

- (void)shutdown {
  [((id<JavaUtilConcurrentExecutorService>) nil_chk([self delegate])) shutdown];
}

- (id<JavaUtilList>)shutdownNow {
  return [((id<JavaUtilConcurrentExecutorService>) nil_chk([self delegate])) shutdownNow];
}

- (void)executeWithJavaLangRunnable:(id<JavaLangRunnable>)command {
  [((id<JavaUtilConcurrentExecutorService>) nil_chk([self delegate])) executeWithJavaLangRunnable:command];
}

- (id<JavaUtilConcurrentFuture>)submitWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)task {
  return [((id<JavaUtilConcurrentExecutorService>) nil_chk([self delegate])) submitWithJavaUtilConcurrentCallable:task];
}

- (id<JavaUtilConcurrentFuture>)submitWithJavaLangRunnable:(id<JavaLangRunnable>)task {
  return [((id<JavaUtilConcurrentExecutorService>) nil_chk([self delegate])) submitWithJavaLangRunnable:task];
}

- (id<JavaUtilConcurrentFuture>)submitWithJavaLangRunnable:(id<JavaLangRunnable>)task
                                                    withId:(id)result {
  return [((id<JavaUtilConcurrentExecutorService>) nil_chk([self delegate])) submitWithJavaLangRunnable:task withId:result];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentExecutorService;", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 3, 4, 2, 5, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 3, 6, 2, 7, -1, -1 },
    { NULL, "LNSObject;", 0x1, 8, 4, 9, 10, -1, -1 },
    { NULL, "LNSObject;", 0x1, 8, 6, 11, 12, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 13, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentFuture;", 0x1, 16, 17, -1, 18, -1, -1 },
    { NULL, "LJavaUtilConcurrentFuture;", 0x1, 16, 15, -1, 19, -1, -1 },
    { NULL, "LJavaUtilConcurrentFuture;", 0x1, 16, 20, -1, 21, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(delegate);
  methods[2].selector = @selector(awaitTerminationWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[3].selector = @selector(invokeAllWithJavaUtilCollection:);
  methods[4].selector = @selector(invokeAllWithJavaUtilCollection:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[5].selector = @selector(invokeAnyWithJavaUtilCollection:);
  methods[6].selector = @selector(invokeAnyWithJavaUtilCollection:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[7].selector = @selector(isShutdown);
  methods[8].selector = @selector(isTerminated);
  methods[9].selector = @selector(shutdown);
  methods[10].selector = @selector(shutdownNow);
  methods[11].selector = @selector(executeWithJavaLangRunnable:);
  methods[12].selector = @selector(submitWithJavaUtilConcurrentCallable:);
  methods[13].selector = @selector(submitWithJavaLangRunnable:);
  methods[14].selector = @selector(submitWithJavaLangRunnable:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "awaitTermination", "JLJavaUtilConcurrentTimeUnit;", "LJavaLangInterruptedException;", "invokeAll", "LJavaUtilCollection;", "<T:Ljava/lang/Object;>(Ljava/util/Collection<+Ljava/util/concurrent/Callable<TT;>;>;)Ljava/util/List<Ljava/util/concurrent/Future<TT;>;>;", "LJavaUtilCollection;JLJavaUtilConcurrentTimeUnit;", "<T:Ljava/lang/Object;>(Ljava/util/Collection<+Ljava/util/concurrent/Callable<TT;>;>;JLjava/util/concurrent/TimeUnit;)Ljava/util/List<Ljava/util/concurrent/Future<TT;>;>;", "invokeAny", "LJavaLangInterruptedException;LJavaUtilConcurrentExecutionException;", "<T:Ljava/lang/Object;>(Ljava/util/Collection<+Ljava/util/concurrent/Callable<TT;>;>;)TT;", "LJavaLangInterruptedException;LJavaUtilConcurrentExecutionException;LJavaUtilConcurrentTimeoutException;", "<T:Ljava/lang/Object;>(Ljava/util/Collection<+Ljava/util/concurrent/Callable<TT;>;>;JLjava/util/concurrent/TimeUnit;)TT;", "()Ljava/util/List<Ljava/lang/Runnable;>;", "execute", "LJavaLangRunnable;", "submit", "LJavaUtilConcurrentCallable;", "<T:Ljava/lang/Object;>(Ljava/util/concurrent/Callable<TT;>;)Ljava/util/concurrent/Future<TT;>;", "(Ljava/lang/Runnable;)Ljava/util/concurrent/Future<*>;", "LJavaLangRunnable;LNSObject;", "<T:Ljava/lang/Object;>(Ljava/lang/Runnable;TT;)Ljava/util/concurrent/Future<TT;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentForwardingExecutorService = { "ForwardingExecutorService", "com.google.common.util.concurrent", ptrTable, methods, NULL, 7, 0x401, 15, 0, -1, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentForwardingExecutorService;
}

@end

void ComGoogleCommonUtilConcurrentForwardingExecutorService_init(ComGoogleCommonUtilConcurrentForwardingExecutorService *self) {
  ComGoogleCommonCollectForwardingObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentForwardingExecutorService)
