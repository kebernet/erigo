//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/util/concurrent/ForwardingFuture.java
//

#include "J2ObjC_source.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/collect/ForwardingObject.h"
#include "com/google/common/util/concurrent/ForwardingFuture.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/TimeUnit.h"

@interface ComGoogleCommonUtilConcurrentForwardingFuture_SimpleForwardingFuture () {
 @public
  id<JavaUtilConcurrentFuture> delegate_;
}

@end

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentForwardingFuture_SimpleForwardingFuture, delegate_, id<JavaUtilConcurrentFuture>)

@implementation ComGoogleCommonUtilConcurrentForwardingFuture

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentForwardingFuture_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilConcurrentFuture>)delegate {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)cancelWithBoolean:(jboolean)mayInterruptIfRunning {
  return [((id<JavaUtilConcurrentFuture>) nil_chk([self delegate])) cancelWithBoolean:mayInterruptIfRunning];
}

- (jboolean)isCancelled {
  return [((id<JavaUtilConcurrentFuture>) nil_chk([self delegate])) isCancelled];
}

- (jboolean)isDone {
  return [((id<JavaUtilConcurrentFuture>) nil_chk([self delegate])) isDone];
}

- (id)get {
  return [((id<JavaUtilConcurrentFuture>) nil_chk([self delegate])) get];
}

- (id)getWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return [((id<JavaUtilConcurrentFuture>) nil_chk([self delegate])) getWithLong:timeout withJavaUtilConcurrentTimeUnit:unit];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentFuture;", 0x404, -1, -1, -1, 0, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 3, 4, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, 6, 7, 8, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(delegate);
  methods[2].selector = @selector(cancelWithBoolean:);
  methods[3].selector = @selector(isCancelled);
  methods[4].selector = @selector(isDone);
  methods[5].selector = @selector(get);
  methods[6].selector = @selector(getWithLong:withJavaUtilConcurrentTimeUnit:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()Ljava/util/concurrent/Future<+TV;>;", "cancel", "Z", "LJavaLangInterruptedException;LJavaUtilConcurrentExecutionException;", "()TV;", "get", "JLJavaUtilConcurrentTimeUnit;", "LJavaLangInterruptedException;LJavaUtilConcurrentExecutionException;LJavaUtilConcurrentTimeoutException;", "(JLjava/util/concurrent/TimeUnit;)TV;", "LComGoogleCommonUtilConcurrentForwardingFuture_SimpleForwardingFuture;", "<V:Ljava/lang/Object;>Lcom/google/common/collect/ForwardingObject;Ljava/util/concurrent/Future<TV;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentForwardingFuture = { "ForwardingFuture", "com.google.common.util.concurrent", ptrTable, methods, NULL, 7, 0x401, 7, 0, -1, 9, -1, 10, -1 };
  return &_ComGoogleCommonUtilConcurrentForwardingFuture;
}

@end

void ComGoogleCommonUtilConcurrentForwardingFuture_init(ComGoogleCommonUtilConcurrentForwardingFuture *self) {
  ComGoogleCommonCollectForwardingObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentForwardingFuture)

@implementation ComGoogleCommonUtilConcurrentForwardingFuture_SimpleForwardingFuture

- (instancetype)initWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)delegate {
  ComGoogleCommonUtilConcurrentForwardingFuture_SimpleForwardingFuture_initWithJavaUtilConcurrentFuture_(self, delegate);
  return self;
}

- (id<JavaUtilConcurrentFuture>)delegate {
  return delegate_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, 1, -1, -1 },
    { NULL, "LJavaUtilConcurrentFuture;", 0x14, -1, -1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentFuture:);
  methods[1].selector = @selector(delegate);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "delegate_", "LJavaUtilConcurrentFuture;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentFuture;", "(Ljava/util/concurrent/Future<TV;>;)V", "()Ljava/util/concurrent/Future<TV;>;", "Ljava/util/concurrent/Future<TV;>;", "LComGoogleCommonUtilConcurrentForwardingFuture;", "<V:Ljava/lang/Object;>Lcom/google/common/util/concurrent/ForwardingFuture<TV;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentForwardingFuture_SimpleForwardingFuture = { "SimpleForwardingFuture", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x409, 2, 1, 4, -1, -1, 5, -1 };
  return &_ComGoogleCommonUtilConcurrentForwardingFuture_SimpleForwardingFuture;
}

@end

void ComGoogleCommonUtilConcurrentForwardingFuture_SimpleForwardingFuture_initWithJavaUtilConcurrentFuture_(ComGoogleCommonUtilConcurrentForwardingFuture_SimpleForwardingFuture *self, id<JavaUtilConcurrentFuture> delegate) {
  ComGoogleCommonUtilConcurrentForwardingFuture_init(self);
  self->delegate_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(delegate);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentForwardingFuture_SimpleForwardingFuture)
