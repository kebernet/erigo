//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/util/concurrent/FuturesGetChecked.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Function.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/collect/Ordering.h"
#include "com/google/common/util/concurrent/ExecutionError.h"
#include "com/google/common/util/concurrent/FuturesGetChecked.h"
#include "com/google/common/util/concurrent/UncheckedExecutionException.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Boolean.h"
#include "java/lang/Enum.h"
#include "java/lang/Error.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/InstantiationException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/ref/WeakReference.h"
#include "java/lang/reflect/Constructor.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "java/util/concurrent/CopyOnWriteArraySet.h"
#include "java/util/concurrent/ExecutionException.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/TimeoutException.h"
#include "java/util/function/Function.h"
#include "javax/annotation/Nullable.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface ComGoogleCommonUtilConcurrentFuturesGetChecked ()

+ (id<ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidator>)bestGetCheckedTypeValidator;

+ (void)wrapAndThrowExceptionOrErrorWithNSException:(NSException *)cause
                                       withIOSClass:(IOSClass *)exceptionClass;
#define wrapAndThrowExceptionOrErrorWithJavaLangThrowable wrapAndThrowExceptionOrErrorWithNSException

+ (jboolean)hasConstructorUsableByGetCheckedWithIOSClass:(IOSClass *)exceptionClass;

+ (JavaLangException *)newWithCauseWithIOSClass:(IOSClass *)exceptionClass
                                withNSException:(NSException *)cause OBJC_METHOD_FAMILY_NONE;
#define withJavaLangThrowable withNSException

+ (id<JavaUtilList>)preferringStringsWithJavaUtilList:(id<JavaUtilList>)constructors;

+ (id)newFromConstructorWithJavaLangReflectConstructor:(JavaLangReflectConstructor *)constructor
                                       withNSException:(NSException *)cause OBJC_METHOD_FAMILY_NONE;
#define withJavaLangThrowable withNSException

- (instancetype)init;

@end

inline ComGoogleCommonCollectOrdering *ComGoogleCommonUtilConcurrentFuturesGetChecked_get_WITH_STRING_PARAM_FIRST();
static ComGoogleCommonCollectOrdering *ComGoogleCommonUtilConcurrentFuturesGetChecked_WITH_STRING_PARAM_FIRST;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonUtilConcurrentFuturesGetChecked, WITH_STRING_PARAM_FIRST, ComGoogleCommonCollectOrdering *)

__attribute__((unused)) static id<ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidator> ComGoogleCommonUtilConcurrentFuturesGetChecked_bestGetCheckedTypeValidator();

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentFuturesGetChecked_wrapAndThrowExceptionOrErrorWithNSException_withIOSClass_(NSException *cause, IOSClass *exceptionClass);

__attribute__((unused)) static jboolean ComGoogleCommonUtilConcurrentFuturesGetChecked_hasConstructorUsableByGetCheckedWithIOSClass_(IOSClass *exceptionClass);

__attribute__((unused)) static JavaLangException *ComGoogleCommonUtilConcurrentFuturesGetChecked_newWithCauseWithIOSClass_withNSException_(IOSClass *exceptionClass, NSException *cause);

__attribute__((unused)) static id<JavaUtilList> ComGoogleCommonUtilConcurrentFuturesGetChecked_preferringStringsWithJavaUtilList_(id<JavaUtilList> constructors);

__attribute__((unused)) static id ComGoogleCommonUtilConcurrentFuturesGetChecked_newFromConstructorWithJavaLangReflectConstructor_withNSException_(JavaLangReflectConstructor *constructor, NSException *cause);

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentFuturesGetChecked_init(ComGoogleCommonUtilConcurrentFuturesGetChecked *self);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentFuturesGetChecked *new_ComGoogleCommonUtilConcurrentFuturesGetChecked_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentFuturesGetChecked *create_ComGoogleCommonUtilConcurrentFuturesGetChecked_init();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonUtilConcurrentFuturesGetChecked__Annotations$0();

@interface ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidator : NSObject

@end

inline id<JavaUtilSet> ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator_get_validClasses();
static id<JavaUtilSet> ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator_validClasses;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator, validClasses, id<JavaUtilSet>)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator_initWithNSString_withInt_(ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator *new_ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface ComGoogleCommonUtilConcurrentFuturesGetChecked_1 : NSObject < ComGoogleCommonBaseFunction >

- (instancetype)init;

- (JavaLangBoolean *)applyWithId:(JavaLangReflectConstructor *)input;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentFuturesGetChecked_1)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentFuturesGetChecked_1_init(ComGoogleCommonUtilConcurrentFuturesGetChecked_1 *self);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentFuturesGetChecked_1 *new_ComGoogleCommonUtilConcurrentFuturesGetChecked_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentFuturesGetChecked_1 *create_ComGoogleCommonUtilConcurrentFuturesGetChecked_1_init();

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonUtilConcurrentFuturesGetChecked)

@implementation ComGoogleCommonUtilConcurrentFuturesGetChecked

+ (id)getCheckedWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)future
                                withIOSClass:(IOSClass *)exceptionClass {
  return ComGoogleCommonUtilConcurrentFuturesGetChecked_getCheckedWithJavaUtilConcurrentFuture_withIOSClass_(future, exceptionClass);
}

+ (id)getCheckedWithComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidator:(id<ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidator>)validator
                                                              withJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)future
                                                                              withIOSClass:(IOSClass *)exceptionClass {
  return ComGoogleCommonUtilConcurrentFuturesGetChecked_getCheckedWithComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidator_withJavaUtilConcurrentFuture_withIOSClass_(validator, future, exceptionClass);
}

+ (id)getCheckedWithJavaUtilConcurrentFuture:(id<JavaUtilConcurrentFuture>)future
                                withIOSClass:(IOSClass *)exceptionClass
                                    withLong:(jlong)timeout
              withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return ComGoogleCommonUtilConcurrentFuturesGetChecked_getCheckedWithJavaUtilConcurrentFuture_withIOSClass_withLong_withJavaUtilConcurrentTimeUnit_(future, exceptionClass, timeout, unit);
}

+ (id<ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidator>)bestGetCheckedTypeValidator {
  return ComGoogleCommonUtilConcurrentFuturesGetChecked_bestGetCheckedTypeValidator();
}

+ (id<ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidator>)weakSetValidator {
  return ComGoogleCommonUtilConcurrentFuturesGetChecked_weakSetValidator();
}

+ (void)wrapAndThrowExceptionOrErrorWithNSException:(NSException *)cause
                                       withIOSClass:(IOSClass *)exceptionClass {
  ComGoogleCommonUtilConcurrentFuturesGetChecked_wrapAndThrowExceptionOrErrorWithNSException_withIOSClass_(cause, exceptionClass);
}

+ (jboolean)hasConstructorUsableByGetCheckedWithIOSClass:(IOSClass *)exceptionClass {
  return ComGoogleCommonUtilConcurrentFuturesGetChecked_hasConstructorUsableByGetCheckedWithIOSClass_(exceptionClass);
}

+ (JavaLangException *)newWithCauseWithIOSClass:(IOSClass *)exceptionClass
                                withNSException:(NSException *)cause {
  return ComGoogleCommonUtilConcurrentFuturesGetChecked_newWithCauseWithIOSClass_withNSException_(exceptionClass, cause);
}

+ (id<JavaUtilList>)preferringStringsWithJavaUtilList:(id<JavaUtilList>)constructors {
  return ComGoogleCommonUtilConcurrentFuturesGetChecked_preferringStringsWithJavaUtilList_(constructors);
}

+ (id)newFromConstructorWithJavaLangReflectConstructor:(JavaLangReflectConstructor *)constructor
                                       withNSException:(NSException *)cause {
  return ComGoogleCommonUtilConcurrentFuturesGetChecked_newFromConstructorWithJavaLangReflectConstructor_withNSException_(constructor, cause);
}

+ (jboolean)isCheckedExceptionWithIOSClass:(IOSClass *)type {
  return ComGoogleCommonUtilConcurrentFuturesGetChecked_isCheckedExceptionWithIOSClass_(type);
}

+ (void)checkExceptionClassValidityWithIOSClass:(IOSClass *)exceptionClass {
  ComGoogleCommonUtilConcurrentFuturesGetChecked_checkExceptionClassValidityWithIOSClass_(exceptionClass);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentFuturesGetChecked_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x8, 0, 1, 2, 3, -1, -1 },
    { NULL, "LNSObject;", 0x8, 0, 4, 2, 5, -1, -1 },
    { NULL, "LNSObject;", 0x8, 0, 6, 2, 7, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidator;", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidator;", 0x8, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 8, 9, 2, 10, -1, -1 },
    { NULL, "Z", 0xa, 11, 12, -1, 13, -1, -1 },
    { NULL, "LJavaLangException;", 0xa, 14, 15, -1, 16, -1, -1 },
    { NULL, "LJavaUtilList;", 0xa, 17, 18, -1, 19, -1, -1 },
    { NULL, "LNSObject;", 0xa, 20, 21, -1, 22, 23, -1 },
    { NULL, "Z", 0x8, 24, 12, -1, 13, -1, -1 },
    { NULL, "V", 0x8, 25, 12, -1, 26, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getCheckedWithJavaUtilConcurrentFuture:withIOSClass:);
  methods[1].selector = @selector(getCheckedWithComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidator:withJavaUtilConcurrentFuture:withIOSClass:);
  methods[2].selector = @selector(getCheckedWithJavaUtilConcurrentFuture:withIOSClass:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[3].selector = @selector(bestGetCheckedTypeValidator);
  methods[4].selector = @selector(weakSetValidator);
  methods[5].selector = @selector(wrapAndThrowExceptionOrErrorWithNSException:withIOSClass:);
  methods[6].selector = @selector(hasConstructorUsableByGetCheckedWithIOSClass:);
  methods[7].selector = @selector(newWithCauseWithIOSClass:withNSException:);
  methods[8].selector = @selector(preferringStringsWithJavaUtilList:);
  methods[9].selector = @selector(newFromConstructorWithJavaLangReflectConstructor:withNSException:);
  methods[10].selector = @selector(isCheckedExceptionWithIOSClass:);
  methods[11].selector = @selector(checkExceptionClassValidityWithIOSClass:);
  methods[12].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "WITH_STRING_PARAM_FIRST", "LComGoogleCommonCollectOrdering;", .constantValue.asLong = 0, 0x1a, -1, 27, 28, -1 },
  };
  static const void *ptrTable[] = { "getChecked", "LJavaUtilConcurrentFuture;LIOSClass;", "LJavaLangException;", "<V:Ljava/lang/Object;X:Ljava/lang/Exception;>(Ljava/util/concurrent/Future<TV;>;Ljava/lang/Class<TX;>;)TV;^TX;", "LComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidator;LJavaUtilConcurrentFuture;LIOSClass;", "<V:Ljava/lang/Object;X:Ljava/lang/Exception;>(Lcom/google/common/util/concurrent/FuturesGetChecked$GetCheckedTypeValidator;Ljava/util/concurrent/Future<TV;>;Ljava/lang/Class<TX;>;)TV;^TX;", "LJavaUtilConcurrentFuture;LIOSClass;JLJavaUtilConcurrentTimeUnit;", "<V:Ljava/lang/Object;X:Ljava/lang/Exception;>(Ljava/util/concurrent/Future<TV;>;Ljava/lang/Class<TX;>;JLjava/util/concurrent/TimeUnit;)TV;^TX;", "wrapAndThrowExceptionOrError", "LNSException;LIOSClass;", "<X:Ljava/lang/Exception;>(Ljava/lang/Throwable;Ljava/lang/Class<TX;>;)V^TX;", "hasConstructorUsableByGetChecked", "LIOSClass;", "(Ljava/lang/Class<+Ljava/lang/Exception;>;)Z", "newWithCause", "LIOSClass;LNSException;", "<X:Ljava/lang/Exception;>(Ljava/lang/Class<TX;>;Ljava/lang/Throwable;)TX;", "preferringStrings", "LJavaUtilList;", "<X:Ljava/lang/Exception;>(Ljava/util/List<Ljava/lang/reflect/Constructor<TX;>;>;)Ljava/util/List<Ljava/lang/reflect/Constructor<TX;>;>;", "newFromConstructor", "LJavaLangReflectConstructor;LNSException;", "<X:Ljava/lang/Object;>(Ljava/lang/reflect/Constructor<TX;>;Ljava/lang/Throwable;)TX;", (void *)&ComGoogleCommonUtilConcurrentFuturesGetChecked__Annotations$0, "isCheckedException", "checkExceptionClassValidity", "(Ljava/lang/Class<+Ljava/lang/Exception;>;)V", &ComGoogleCommonUtilConcurrentFuturesGetChecked_WITH_STRING_PARAM_FIRST, "Lcom/google/common/collect/Ordering<Ljava/lang/reflect/Constructor<*>;>;", "LComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidator;LComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentFuturesGetChecked = { "FuturesGetChecked", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x10, 13, 1, -1, 29, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentFuturesGetChecked;
}

+ (void)initialize {
  if (self == [ComGoogleCommonUtilConcurrentFuturesGetChecked class]) {
    ComGoogleCommonUtilConcurrentFuturesGetChecked_WITH_STRING_PARAM_FIRST = [((ComGoogleCommonCollectOrdering *) nil_chk([((ComGoogleCommonCollectOrdering *) nil_chk(ComGoogleCommonCollectOrdering_natural())) onResultOfWithComGoogleCommonBaseFunction:new_ComGoogleCommonUtilConcurrentFuturesGetChecked_1_init()])) reverse];
    J2OBJC_SET_INITIALIZED(ComGoogleCommonUtilConcurrentFuturesGetChecked)
  }
}

@end

id ComGoogleCommonUtilConcurrentFuturesGetChecked_getCheckedWithJavaUtilConcurrentFuture_withIOSClass_(id<JavaUtilConcurrentFuture> future, IOSClass *exceptionClass) {
  ComGoogleCommonUtilConcurrentFuturesGetChecked_initialize();
  return ComGoogleCommonUtilConcurrentFuturesGetChecked_getCheckedWithComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidator_withJavaUtilConcurrentFuture_withIOSClass_(ComGoogleCommonUtilConcurrentFuturesGetChecked_bestGetCheckedTypeValidator(), future, exceptionClass);
}

id ComGoogleCommonUtilConcurrentFuturesGetChecked_getCheckedWithComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidator_withJavaUtilConcurrentFuture_withIOSClass_(id<ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidator> validator, id<JavaUtilConcurrentFuture> future, IOSClass *exceptionClass) {
  ComGoogleCommonUtilConcurrentFuturesGetChecked_initialize();
  [((id<ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidator>) nil_chk(validator)) validateClassWithIOSClass:exceptionClass];
  @try {
    return [((id<JavaUtilConcurrentFuture>) nil_chk(future)) get];
  }
  @catch (JavaLangInterruptedException *e) {
    [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) interrupt];
    @throw nil_chk(ComGoogleCommonUtilConcurrentFuturesGetChecked_newWithCauseWithIOSClass_withNSException_(exceptionClass, e));
  }
  @catch (JavaUtilConcurrentExecutionException *e) {
    ComGoogleCommonUtilConcurrentFuturesGetChecked_wrapAndThrowExceptionOrErrorWithNSException_withIOSClass_([e getCause], exceptionClass);
    @throw new_JavaLangAssertionError_init();
  }
}

id ComGoogleCommonUtilConcurrentFuturesGetChecked_getCheckedWithJavaUtilConcurrentFuture_withIOSClass_withLong_withJavaUtilConcurrentTimeUnit_(id<JavaUtilConcurrentFuture> future, IOSClass *exceptionClass, jlong timeout, JavaUtilConcurrentTimeUnit *unit) {
  ComGoogleCommonUtilConcurrentFuturesGetChecked_initialize();
  [((id<ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidator>) nil_chk(ComGoogleCommonUtilConcurrentFuturesGetChecked_bestGetCheckedTypeValidator())) validateClassWithIOSClass:exceptionClass];
  @try {
    return [((id<JavaUtilConcurrentFuture>) nil_chk(future)) getWithLong:timeout withJavaUtilConcurrentTimeUnit:unit];
  }
  @catch (JavaLangInterruptedException *e) {
    [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) interrupt];
    @throw nil_chk(ComGoogleCommonUtilConcurrentFuturesGetChecked_newWithCauseWithIOSClass_withNSException_(exceptionClass, e));
  }
  @catch (JavaUtilConcurrentTimeoutException *e) {
    @throw nil_chk(ComGoogleCommonUtilConcurrentFuturesGetChecked_newWithCauseWithIOSClass_withNSException_(exceptionClass, e));
  }
  @catch (JavaUtilConcurrentExecutionException *e) {
    ComGoogleCommonUtilConcurrentFuturesGetChecked_wrapAndThrowExceptionOrErrorWithNSException_withIOSClass_([e getCause], exceptionClass);
    @throw new_JavaLangAssertionError_init();
  }
}

id<ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidator> ComGoogleCommonUtilConcurrentFuturesGetChecked_bestGetCheckedTypeValidator() {
  ComGoogleCommonUtilConcurrentFuturesGetChecked_initialize();
  return JreLoadStatic(ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder, BEST_VALIDATOR);
}

id<ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidator> ComGoogleCommonUtilConcurrentFuturesGetChecked_weakSetValidator() {
  ComGoogleCommonUtilConcurrentFuturesGetChecked_initialize();
  return JreLoadEnum(ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator, INSTANCE);
}

void ComGoogleCommonUtilConcurrentFuturesGetChecked_wrapAndThrowExceptionOrErrorWithNSException_withIOSClass_(NSException *cause, IOSClass *exceptionClass) {
  ComGoogleCommonUtilConcurrentFuturesGetChecked_initialize();
  if ([cause isKindOfClass:[JavaLangError class]]) {
    @throw new_ComGoogleCommonUtilConcurrentExecutionError_initWithJavaLangError_((JavaLangError *) cast_chk(cause, [JavaLangError class]));
  }
  if ([cause isKindOfClass:[JavaLangRuntimeException class]]) {
    @throw new_ComGoogleCommonUtilConcurrentUncheckedExecutionException_initWithNSException_(cause);
  }
  @throw nil_chk(ComGoogleCommonUtilConcurrentFuturesGetChecked_newWithCauseWithIOSClass_withNSException_(exceptionClass, cause));
}

jboolean ComGoogleCommonUtilConcurrentFuturesGetChecked_hasConstructorUsableByGetCheckedWithIOSClass_(IOSClass *exceptionClass) {
  ComGoogleCommonUtilConcurrentFuturesGetChecked_initialize();
  @try {
    JavaLangException *unused = ComGoogleCommonUtilConcurrentFuturesGetChecked_newWithCauseWithIOSClass_withNSException_(exceptionClass, new_JavaLangException_init());
    return true;
  }
  @catch (JavaLangException *e) {
    return false;
  }
}

JavaLangException *ComGoogleCommonUtilConcurrentFuturesGetChecked_newWithCauseWithIOSClass_withNSException_(IOSClass *exceptionClass, NSException *cause) {
  ComGoogleCommonUtilConcurrentFuturesGetChecked_initialize();
  id<JavaUtilList> constructors = JavaUtilArrays_asListWithNSObjectArray_([((IOSClass *) nil_chk(exceptionClass)) getConstructors]);
  for (JavaLangReflectConstructor * __strong constructor in nil_chk(ComGoogleCommonUtilConcurrentFuturesGetChecked_preferringStringsWithJavaUtilList_(constructors))) {
    JavaLangException *instance = ComGoogleCommonUtilConcurrentFuturesGetChecked_newFromConstructorWithJavaLangReflectConstructor_withNSException_(constructor, cause);
    if (instance != nil) {
      if ([instance getCause] == nil) {
        (void) [instance initCauseWithNSException:cause];
      }
      return instance;
    }
  }
  @throw new_JavaLangIllegalArgumentException_initWithNSString_withNSException_(JreStrcat("$@$", @"No appropriate constructor for exception of type ", exceptionClass, @" in response to chained exception"), cause);
}

id<JavaUtilList> ComGoogleCommonUtilConcurrentFuturesGetChecked_preferringStringsWithJavaUtilList_(id<JavaUtilList> constructors) {
  ComGoogleCommonUtilConcurrentFuturesGetChecked_initialize();
  return [((ComGoogleCommonCollectOrdering *) nil_chk(ComGoogleCommonUtilConcurrentFuturesGetChecked_WITH_STRING_PARAM_FIRST)) sortedCopyWithJavaLangIterable:constructors];
}

id ComGoogleCommonUtilConcurrentFuturesGetChecked_newFromConstructorWithJavaLangReflectConstructor_withNSException_(JavaLangReflectConstructor *constructor, NSException *cause) {
  ComGoogleCommonUtilConcurrentFuturesGetChecked_initialize();
  IOSObjectArray *paramTypes = [((JavaLangReflectConstructor *) nil_chk(constructor)) getParameterTypes];
  IOSObjectArray *params = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(paramTypes))->size_ type:NSObject_class_()];
  for (jint i = 0; i < paramTypes->size_; i++) {
    IOSClass *paramType = IOSObjectArray_Get(paramTypes, i);
    if ([((IOSClass *) nil_chk(paramType)) isEqual:NSString_class_()]) {
      (void) IOSObjectArray_Set(params, i, [((NSException *) nil_chk(cause)) description]);
    }
    else if ([paramType isEqual:NSException_class_()]) {
      (void) IOSObjectArray_Set(params, i, cause);
    }
    else {
      return nil;
    }
  }
  @try {
    return [constructor newInstanceWithNSObjectArray:params];
  }
  @catch (JavaLangIllegalArgumentException *e) {
    return nil;
  }
  @catch (JavaLangInstantiationException *e) {
    return nil;
  }
  @catch (JavaLangIllegalAccessException *e) {
    return nil;
  }
  @catch (JavaLangReflectInvocationTargetException *e) {
    return nil;
  }
}

jboolean ComGoogleCommonUtilConcurrentFuturesGetChecked_isCheckedExceptionWithIOSClass_(IOSClass *type) {
  ComGoogleCommonUtilConcurrentFuturesGetChecked_initialize();
  return ![JavaLangRuntimeException_class_() isAssignableFrom:type];
}

void ComGoogleCommonUtilConcurrentFuturesGetChecked_checkExceptionClassValidityWithIOSClass_(IOSClass *exceptionClass) {
  ComGoogleCommonUtilConcurrentFuturesGetChecked_initialize();
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_(ComGoogleCommonUtilConcurrentFuturesGetChecked_isCheckedExceptionWithIOSClass_(exceptionClass), @"Futures.getChecked exception type (%s) must not be a RuntimeException", exceptionClass);
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_(ComGoogleCommonUtilConcurrentFuturesGetChecked_hasConstructorUsableByGetCheckedWithIOSClass_(exceptionClass), @"Futures.getChecked exception type (%s) must be an accessible class with an accessible constructor whose parameters (if any) must be of type String and/or Throwable", exceptionClass);
}

void ComGoogleCommonUtilConcurrentFuturesGetChecked_init(ComGoogleCommonUtilConcurrentFuturesGetChecked *self) {
  NSObject_init(self);
}

ComGoogleCommonUtilConcurrentFuturesGetChecked *new_ComGoogleCommonUtilConcurrentFuturesGetChecked_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentFuturesGetChecked, init)
}

ComGoogleCommonUtilConcurrentFuturesGetChecked *create_ComGoogleCommonUtilConcurrentFuturesGetChecked_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentFuturesGetChecked, init)
}

IOSObjectArray *ComGoogleCommonUtilConcurrentFuturesGetChecked__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentFuturesGetChecked)

@implementation ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidator

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(validateClassWithIOSClass:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "validateClass", "LIOSClass;", "(Ljava/lang/Class<+Ljava/lang/Exception;>;)V", "LComGoogleCommonUtilConcurrentFuturesGetChecked;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidator = { "GetCheckedTypeValidator", "com.google.common.util.concurrent", ptrTable, methods, NULL, 7, 0x608, 1, 0, 3, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidator;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidator)

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder)

NSString *ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_CLASS_VALUE_VALIDATOR_NAME;
id<ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidator> ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_BEST_VALIDATOR;

@implementation ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id<ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidator>)getBestValidator {
  return ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_getBestValidator();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidator;", 0x8, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getBestValidator);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CLASS_VALUE_VALIDATOR_NAME", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 0, -1, -1 },
    { "BEST_VALIDATOR", "LComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidator;", .constantValue.asLong = 0, 0x18, -1, 1, -1, -1 },
  };
  static const void *ptrTable[] = { &ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_CLASS_VALUE_VALIDATOR_NAME, &ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_BEST_VALIDATOR, "LComGoogleCommonUtilConcurrentFuturesGetChecked;", "LComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder = { "GetCheckedTypeValidatorHolder", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x8, 2, 2, 2, 3, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder;
}

+ (void)initialize {
  if (self == [ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder class]) {
    ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_CLASS_VALUE_VALIDATOR_NAME = JreStrcat("$$", [ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_class_() getName], @"$ClassValueValidator");
    ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_BEST_VALIDATOR = ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_getBestValidator();
    J2OBJC_SET_INITIALIZED(ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder)
  }
}

@end

void ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_init(ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder *self) {
  NSObject_init(self);
}

ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder *new_ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder, init)
}

ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder *create_ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder, init)
}

id<ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidator> ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_getBestValidator() {
  ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_initialize();
  @try {
    IOSClass *theClass = IOSClass_forName_(ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_CLASS_VALUE_VALIDATOR_NAME);
    return (id<ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidator>) cast_check(IOSObjectArray_Get(nil_chk([((IOSClass *) nil_chk(theClass)) getEnumConstants]), 0), ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidator_class_());
  }
  @catch (NSException *t) {
    return ComGoogleCommonUtilConcurrentFuturesGetChecked_weakSetValidator();
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder)

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator)

ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator *ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator_values_[1];

@implementation ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator

- (void)validateClassWithIOSClass:(IOSClass *)exceptionClass {
  for (JavaLangRefWeakReference * __strong knownGood in nil_chk(ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator_validClasses)) {
    if ([((IOSClass *) nil_chk(exceptionClass)) isEqual:[((JavaLangRefWeakReference *) nil_chk(knownGood)) get]]) {
      return;
    }
  }
  ComGoogleCommonUtilConcurrentFuturesGetChecked_checkExceptionClassValidityWithIOSClass_(exceptionClass);
  if ([ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator_validClasses size] > 1000) {
    [ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator_validClasses clear];
  }
  [ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator_validClasses addWithId:new_JavaLangRefWeakReference_initWithId_(exceptionClass)];
}

+ (IOSObjectArray *)values {
  return ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator_values();
}

+ (ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator *)valueOfWithNSString:(NSString *)name {
  return ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "[LComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator;", 0x9, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(validateClassWithIOSClass:);
  methods[1].selector = @selector(values);
  methods[2].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "validClasses", "LJavaUtilSet;", .constantValue.asLong = 0, 0x1a, -1, 6, 7, -1 },
  };
  static const void *ptrTable[] = { "validateClass", "LIOSClass;", "(Ljava/lang/Class<+Ljava/lang/Exception;>;)V", "valueOf", "LNSString;", &JreEnum(ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator, INSTANCE), &ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator_validClasses, "Ljava/util/Set<Ljava/lang/ref/WeakReference<Ljava/lang/Class<+Ljava/lang/Exception;>;>;>;", "LComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder;", "Ljava/lang/Enum<Lcom/google/common/util/concurrent/FuturesGetChecked$GetCheckedTypeValidatorHolder$WeakSetValidator;>;Lcom/google/common/util/concurrent/FuturesGetChecked$GetCheckedTypeValidator;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator = { "WeakSetValidator", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x4018, 3, 2, 8, -1, -1, 9, -1 };
  return &_ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator;
}

+ (void)initialize {
  if (self == [ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator class]) {
    JreEnum(ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator, INSTANCE) = new_ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator_initWithNSString_withInt_(@"INSTANCE", 0);
    ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator_validClasses = new_JavaUtilConcurrentCopyOnWriteArraySet_init();
    J2OBJC_SET_INITIALIZED(ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator)
  }
}

@end

void ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator_initWithNSString_withInt_(ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator *new_ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator_values() {
  ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator_initialize();
  return [IOSObjectArray arrayWithObjects:ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator_values_ count:1 type:ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator_class_()];
}

ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator *ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator_valueOfWithNSString_(NSString *name) {
  ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator_initialize();
  for (int i = 0; i < 1; i++) {
    ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator *e = ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator *ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator_fromOrdinal(NSUInteger ordinal) {
  ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator_initialize();
  if (ordinal >= 1) {
    return nil;
  }
  return ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentFuturesGetChecked_GetCheckedTypeValidatorHolder_WeakSetValidator)

@implementation ComGoogleCommonUtilConcurrentFuturesGetChecked_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentFuturesGetChecked_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaLangBoolean *)applyWithId:(JavaLangReflectConstructor *)input {
  return JavaLangBoolean_valueOfWithBoolean_([((id<JavaUtilList>) nil_chk(JavaUtilArrays_asListWithNSObjectArray_([((JavaLangReflectConstructor *) nil_chk(input)) getParameterTypes]))) containsWithId:NSString_class_()]);
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(applyWithId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "apply", "LJavaLangReflectConstructor;", "(Ljava/lang/reflect/Constructor<*>;)Ljava/lang/Boolean;", "LComGoogleCommonUtilConcurrentFuturesGetChecked;", "Ljava/lang/Object;Lcom/google/common/base/Function<Ljava/lang/reflect/Constructor<*>;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentFuturesGetChecked_1 = { "", "com.google.common.util.concurrent", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 3, -1, -1, 4, -1 };
  return &_ComGoogleCommonUtilConcurrentFuturesGetChecked_1;
}

@end

void ComGoogleCommonUtilConcurrentFuturesGetChecked_1_init(ComGoogleCommonUtilConcurrentFuturesGetChecked_1 *self) {
  NSObject_init(self);
}

ComGoogleCommonUtilConcurrentFuturesGetChecked_1 *new_ComGoogleCommonUtilConcurrentFuturesGetChecked_1_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentFuturesGetChecked_1, init)
}

ComGoogleCommonUtilConcurrentFuturesGetChecked_1 *create_ComGoogleCommonUtilConcurrentFuturesGetChecked_1_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentFuturesGetChecked_1, init)
}
