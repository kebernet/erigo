//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/util/concurrent/InterruptibleTask.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/google/common/util/concurrent/InterruptibleTask.h"
#include "java/lang/Thread.h"
#include "java/util/concurrent/atomic/AtomicReferenceFieldUpdater.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"

@class ComGoogleCommonUtilConcurrentInterruptibleTask_AtomicHelper;

@interface ComGoogleCommonUtilConcurrentInterruptibleTask () {
 @public
  volatile_id runner_;
  volatile_jboolean doneInterrupting_;
}

@end

J2OBJC_VOLATILE_FIELD_SETTER(ComGoogleCommonUtilConcurrentInterruptibleTask, runner_, JavaLangThread *)

inline ComGoogleCommonUtilConcurrentInterruptibleTask_AtomicHelper *ComGoogleCommonUtilConcurrentInterruptibleTask_get_ATOMIC_HELPER();
static ComGoogleCommonUtilConcurrentInterruptibleTask_AtomicHelper *ComGoogleCommonUtilConcurrentInterruptibleTask_ATOMIC_HELPER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonUtilConcurrentInterruptibleTask, ATOMIC_HELPER, ComGoogleCommonUtilConcurrentInterruptibleTask_AtomicHelper *)

inline JavaUtilLoggingLogger *ComGoogleCommonUtilConcurrentInterruptibleTask_get_log();
static JavaUtilLoggingLogger *ComGoogleCommonUtilConcurrentInterruptibleTask_log;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonUtilConcurrentInterruptibleTask, log, JavaUtilLoggingLogger *)

@interface ComGoogleCommonUtilConcurrentInterruptibleTask_AtomicHelper : NSObject

- (instancetype)init;

- (jboolean)compareAndSetRunnerWithComGoogleCommonUtilConcurrentInterruptibleTask:(ComGoogleCommonUtilConcurrentInterruptibleTask *)task
                                                               withJavaLangThread:(JavaLangThread *)expect
                                                               withJavaLangThread:(JavaLangThread *)update;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentInterruptibleTask_AtomicHelper)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentInterruptibleTask_AtomicHelper_init(ComGoogleCommonUtilConcurrentInterruptibleTask_AtomicHelper *self);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentInterruptibleTask_AtomicHelper)

@interface ComGoogleCommonUtilConcurrentInterruptibleTask_SafeAtomicHelper : ComGoogleCommonUtilConcurrentInterruptibleTask_AtomicHelper {
 @public
  JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *runnerUpdater_;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater:(JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *)runnerUpdater;

- (jboolean)compareAndSetRunnerWithComGoogleCommonUtilConcurrentInterruptibleTask:(ComGoogleCommonUtilConcurrentInterruptibleTask *)task
                                                               withJavaLangThread:(JavaLangThread *)expect
                                                               withJavaLangThread:(JavaLangThread *)update;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentInterruptibleTask_SafeAtomicHelper)

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentInterruptibleTask_SafeAtomicHelper, runnerUpdater_, JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentInterruptibleTask_SafeAtomicHelper_initWithJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_(ComGoogleCommonUtilConcurrentInterruptibleTask_SafeAtomicHelper *self, JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *runnerUpdater);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentInterruptibleTask_SafeAtomicHelper *new_ComGoogleCommonUtilConcurrentInterruptibleTask_SafeAtomicHelper_initWithJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_(JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *runnerUpdater) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentInterruptibleTask_SafeAtomicHelper *create_ComGoogleCommonUtilConcurrentInterruptibleTask_SafeAtomicHelper_initWithJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_(JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *runnerUpdater);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentInterruptibleTask_SafeAtomicHelper)

@interface ComGoogleCommonUtilConcurrentInterruptibleTask_SynchronizedAtomicHelper : ComGoogleCommonUtilConcurrentInterruptibleTask_AtomicHelper

- (instancetype)init;

- (jboolean)compareAndSetRunnerWithComGoogleCommonUtilConcurrentInterruptibleTask:(ComGoogleCommonUtilConcurrentInterruptibleTask *)task
                                                               withJavaLangThread:(JavaLangThread *)expect
                                                               withJavaLangThread:(JavaLangThread *)update;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentInterruptibleTask_SynchronizedAtomicHelper)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentInterruptibleTask_SynchronizedAtomicHelper_init(ComGoogleCommonUtilConcurrentInterruptibleTask_SynchronizedAtomicHelper *self);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentInterruptibleTask_SynchronizedAtomicHelper *new_ComGoogleCommonUtilConcurrentInterruptibleTask_SynchronizedAtomicHelper_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentInterruptibleTask_SynchronizedAtomicHelper *create_ComGoogleCommonUtilConcurrentInterruptibleTask_SynchronizedAtomicHelper_init();

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentInterruptibleTask_SynchronizedAtomicHelper)

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonUtilConcurrentInterruptibleTask)

@implementation ComGoogleCommonUtilConcurrentInterruptibleTask

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentInterruptibleTask_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)run {
  if (![((ComGoogleCommonUtilConcurrentInterruptibleTask_AtomicHelper *) nil_chk(ComGoogleCommonUtilConcurrentInterruptibleTask_ATOMIC_HELPER)) compareAndSetRunnerWithComGoogleCommonUtilConcurrentInterruptibleTask:self withJavaLangThread:nil withJavaLangThread:JavaLangThread_currentThread()]) {
    return;
  }
  @try {
    [self runInterruptibly];
  }
  @finally {
    if ([self wasInterrupted]) {
      while (!JreLoadVolatileBoolean(&doneInterrupting_)) {
        JavaLangThread_yield();
      }
    }
  }
}

- (void)runInterruptibly {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)wasInterrupted {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)interruptTask {
  JavaLangThread *currentRunner = JreLoadVolatileId(&runner_);
  if (currentRunner != nil) {
    [currentRunner interrupt];
  }
  JreAssignVolatileBoolean(&doneInterrupting_, true);
}

- (void)__javaClone:(ComGoogleCommonUtilConcurrentInterruptibleTask *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&runner_, &original->runner_);
}

- (void)dealloc {
  JreReleaseVolatile(&runner_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x10, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(run);
  methods[2].selector = @selector(runInterruptibly);
  methods[3].selector = @selector(wasInterrupted);
  methods[4].selector = @selector(interruptTask);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "runner_", "LJavaLangThread;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "doneInterrupting_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "ATOMIC_HELPER", "LComGoogleCommonUtilConcurrentInterruptibleTask_AtomicHelper;", .constantValue.asLong = 0, 0x1a, -1, 0, -1, -1 },
    { "log", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 1, -1, -1 },
  };
  static const void *ptrTable[] = { &ComGoogleCommonUtilConcurrentInterruptibleTask_ATOMIC_HELPER, &ComGoogleCommonUtilConcurrentInterruptibleTask_log, "LComGoogleCommonUtilConcurrentInterruptibleTask_AtomicHelper;LComGoogleCommonUtilConcurrentInterruptibleTask_SafeAtomicHelper;LComGoogleCommonUtilConcurrentInterruptibleTask_SynchronizedAtomicHelper;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentInterruptibleTask = { "InterruptibleTask", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x400, 5, 4, -1, 2, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentInterruptibleTask;
}

+ (void)initialize {
  if (self == [ComGoogleCommonUtilConcurrentInterruptibleTask class]) {
    ComGoogleCommonUtilConcurrentInterruptibleTask_log = JavaUtilLoggingLogger_getLoggerWithNSString_([ComGoogleCommonUtilConcurrentInterruptibleTask_class_() getName]);
    {
      ComGoogleCommonUtilConcurrentInterruptibleTask_AtomicHelper *helper;
      @try {
        helper = new_ComGoogleCommonUtilConcurrentInterruptibleTask_SafeAtomicHelper_initWithJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_(JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_newUpdaterWithIOSClass_withIOSClass_withNSString_(ComGoogleCommonUtilConcurrentInterruptibleTask_class_(), JavaLangThread_class_(), @"runner"));
      }
      @catch (NSException *reflectionFailure) {
        [((JavaUtilLoggingLogger *) nil_chk(ComGoogleCommonUtilConcurrentInterruptibleTask_log)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:@"SafeAtomicHelper is broken!" withNSException:reflectionFailure];
        helper = new_ComGoogleCommonUtilConcurrentInterruptibleTask_SynchronizedAtomicHelper_init();
      }
      ComGoogleCommonUtilConcurrentInterruptibleTask_ATOMIC_HELPER = helper;
    }
    J2OBJC_SET_INITIALIZED(ComGoogleCommonUtilConcurrentInterruptibleTask)
  }
}

@end

void ComGoogleCommonUtilConcurrentInterruptibleTask_init(ComGoogleCommonUtilConcurrentInterruptibleTask *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentInterruptibleTask)

@implementation ComGoogleCommonUtilConcurrentInterruptibleTask_AtomicHelper

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentInterruptibleTask_AtomicHelper_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)compareAndSetRunnerWithComGoogleCommonUtilConcurrentInterruptibleTask:(ComGoogleCommonUtilConcurrentInterruptibleTask *)task
                                                               withJavaLangThread:(JavaLangThread *)expect
                                                               withJavaLangThread:(JavaLangThread *)update {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x400, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(compareAndSetRunnerWithComGoogleCommonUtilConcurrentInterruptibleTask:withJavaLangThread:withJavaLangThread:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compareAndSetRunner", "LComGoogleCommonUtilConcurrentInterruptibleTask;LJavaLangThread;LJavaLangThread;", "LComGoogleCommonUtilConcurrentInterruptibleTask;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentInterruptibleTask_AtomicHelper = { "AtomicHelper", "com.google.common.util.concurrent", ptrTable, methods, NULL, 7, 0x40a, 2, 0, 2, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentInterruptibleTask_AtomicHelper;
}

@end

void ComGoogleCommonUtilConcurrentInterruptibleTask_AtomicHelper_init(ComGoogleCommonUtilConcurrentInterruptibleTask_AtomicHelper *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentInterruptibleTask_AtomicHelper)

@implementation ComGoogleCommonUtilConcurrentInterruptibleTask_SafeAtomicHelper

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater:(JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *)runnerUpdater {
  ComGoogleCommonUtilConcurrentInterruptibleTask_SafeAtomicHelper_initWithJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_(self, runnerUpdater);
  return self;
}

- (jboolean)compareAndSetRunnerWithComGoogleCommonUtilConcurrentInterruptibleTask:(ComGoogleCommonUtilConcurrentInterruptibleTask *)task
                                                               withJavaLangThread:(JavaLangThread *)expect
                                                               withJavaLangThread:(JavaLangThread *)update {
  return [((JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *) nil_chk(runnerUpdater_)) compareAndSetWithId:task withId:expect withId:update];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater:);
  methods[1].selector = @selector(compareAndSetRunnerWithComGoogleCommonUtilConcurrentInterruptibleTask:withJavaLangThread:withJavaLangThread:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "runnerUpdater_", "LJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater;", .constantValue.asLong = 0, 0x10, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater;", "compareAndSetRunner", "LComGoogleCommonUtilConcurrentInterruptibleTask;LJavaLangThread;LJavaLangThread;", "Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater<Lcom/google/common/util/concurrent/InterruptibleTask;Ljava/lang/Thread;>;", "LComGoogleCommonUtilConcurrentInterruptibleTask;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentInterruptibleTask_SafeAtomicHelper = { "SafeAtomicHelper", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x1a, 2, 1, 4, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentInterruptibleTask_SafeAtomicHelper;
}

@end

void ComGoogleCommonUtilConcurrentInterruptibleTask_SafeAtomicHelper_initWithJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_(ComGoogleCommonUtilConcurrentInterruptibleTask_SafeAtomicHelper *self, JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *runnerUpdater) {
  ComGoogleCommonUtilConcurrentInterruptibleTask_AtomicHelper_init(self);
  self->runnerUpdater_ = runnerUpdater;
}

ComGoogleCommonUtilConcurrentInterruptibleTask_SafeAtomicHelper *new_ComGoogleCommonUtilConcurrentInterruptibleTask_SafeAtomicHelper_initWithJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_(JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *runnerUpdater) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentInterruptibleTask_SafeAtomicHelper, initWithJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_, runnerUpdater)
}

ComGoogleCommonUtilConcurrentInterruptibleTask_SafeAtomicHelper *create_ComGoogleCommonUtilConcurrentInterruptibleTask_SafeAtomicHelper_initWithJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_(JavaUtilConcurrentAtomicAtomicReferenceFieldUpdater *runnerUpdater) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentInterruptibleTask_SafeAtomicHelper, initWithJavaUtilConcurrentAtomicAtomicReferenceFieldUpdater_, runnerUpdater)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentInterruptibleTask_SafeAtomicHelper)

@implementation ComGoogleCommonUtilConcurrentInterruptibleTask_SynchronizedAtomicHelper

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentInterruptibleTask_SynchronizedAtomicHelper_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)compareAndSetRunnerWithComGoogleCommonUtilConcurrentInterruptibleTask:(ComGoogleCommonUtilConcurrentInterruptibleTask *)task
                                                               withJavaLangThread:(JavaLangThread *)expect
                                                               withJavaLangThread:(JavaLangThread *)update {
  @synchronized(task) {
    if (JreLoadVolatileId(&((ComGoogleCommonUtilConcurrentInterruptibleTask *) nil_chk(task))->runner_) == expect) {
      (void) JreVolatileStrongAssign(&task->runner_, update);
    }
  }
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(compareAndSetRunnerWithComGoogleCommonUtilConcurrentInterruptibleTask:withJavaLangThread:withJavaLangThread:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compareAndSetRunner", "LComGoogleCommonUtilConcurrentInterruptibleTask;LJavaLangThread;LJavaLangThread;", "LComGoogleCommonUtilConcurrentInterruptibleTask;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentInterruptibleTask_SynchronizedAtomicHelper = { "SynchronizedAtomicHelper", "com.google.common.util.concurrent", ptrTable, methods, NULL, 7, 0x1a, 2, 0, 2, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentInterruptibleTask_SynchronizedAtomicHelper;
}

@end

void ComGoogleCommonUtilConcurrentInterruptibleTask_SynchronizedAtomicHelper_init(ComGoogleCommonUtilConcurrentInterruptibleTask_SynchronizedAtomicHelper *self) {
  ComGoogleCommonUtilConcurrentInterruptibleTask_AtomicHelper_init(self);
}

ComGoogleCommonUtilConcurrentInterruptibleTask_SynchronizedAtomicHelper *new_ComGoogleCommonUtilConcurrentInterruptibleTask_SynchronizedAtomicHelper_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentInterruptibleTask_SynchronizedAtomicHelper, init)
}

ComGoogleCommonUtilConcurrentInterruptibleTask_SynchronizedAtomicHelper *create_ComGoogleCommonUtilConcurrentInterruptibleTask_SynchronizedAtomicHelper_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentInterruptibleTask_SynchronizedAtomicHelper, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentInterruptibleTask_SynchronizedAtomicHelper)
