//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/util/concurrent/ListenerCallQueue.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/collect/Queues.h"
#include "com/google/common/util/concurrent/ListenerCallQueue.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/util/ArrayDeque.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/Queue.h"
#include "java/util/concurrent/Executor.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"

@interface ComGoogleCommonUtilConcurrentListenerCallQueue () {
 @public
  id<JavaUtilList> listeners_;
}

- (void)enqueueHelperWithComGoogleCommonUtilConcurrentListenerCallQueue_Event:(id<ComGoogleCommonUtilConcurrentListenerCallQueue_Event>)event
                                                                       withId:(id)label;

@end

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentListenerCallQueue, listeners_, id<JavaUtilList>)

inline JavaUtilLoggingLogger *ComGoogleCommonUtilConcurrentListenerCallQueue_get_logger();
static JavaUtilLoggingLogger *ComGoogleCommonUtilConcurrentListenerCallQueue_logger;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonUtilConcurrentListenerCallQueue, logger, JavaUtilLoggingLogger *)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentListenerCallQueue_enqueueHelperWithComGoogleCommonUtilConcurrentListenerCallQueue_Event_withId_(ComGoogleCommonUtilConcurrentListenerCallQueue *self, id<ComGoogleCommonUtilConcurrentListenerCallQueue_Event> event, id label);

@interface ComGoogleCommonUtilConcurrentListenerCallQueue_Event : NSObject

@end

@interface ComGoogleCommonUtilConcurrentListenerCallQueue_PerListenerQueue : NSObject < JavaLangRunnable > {
 @public
  id listener_;
  id<JavaUtilConcurrentExecutor> executor_;
  id<JavaUtilQueue> waitQueue_;
  id<JavaUtilQueue> labelQueue_;
  jboolean isThreadScheduled_;
}

- (instancetype)initWithId:(id)listener
withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor;

- (void)addWithComGoogleCommonUtilConcurrentListenerCallQueue_Event:(id<ComGoogleCommonUtilConcurrentListenerCallQueue_Event>)event
                                                             withId:(id)label;

- (void)dispatch;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentListenerCallQueue_PerListenerQueue)

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentListenerCallQueue_PerListenerQueue, listener_, id)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentListenerCallQueue_PerListenerQueue, executor_, id<JavaUtilConcurrentExecutor>)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentListenerCallQueue_PerListenerQueue, waitQueue_, id<JavaUtilQueue>)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentListenerCallQueue_PerListenerQueue, labelQueue_, id<JavaUtilQueue>)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentListenerCallQueue_PerListenerQueue_initWithId_withJavaUtilConcurrentExecutor_(ComGoogleCommonUtilConcurrentListenerCallQueue_PerListenerQueue *self, id listener, id<JavaUtilConcurrentExecutor> executor);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentListenerCallQueue_PerListenerQueue *new_ComGoogleCommonUtilConcurrentListenerCallQueue_PerListenerQueue_initWithId_withJavaUtilConcurrentExecutor_(id listener, id<JavaUtilConcurrentExecutor> executor) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentListenerCallQueue_PerListenerQueue *create_ComGoogleCommonUtilConcurrentListenerCallQueue_PerListenerQueue_initWithId_withJavaUtilConcurrentExecutor_(id listener, id<JavaUtilConcurrentExecutor> executor);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentListenerCallQueue_PerListenerQueue)

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonUtilConcurrentListenerCallQueue)

@implementation ComGoogleCommonUtilConcurrentListenerCallQueue

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentListenerCallQueue_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)addListenerWithId:(id)listener
withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor {
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_withId_(listener, @"listener");
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_withId_(executor, @"executor");
  [((id<JavaUtilList>) nil_chk(listeners_)) addWithId:new_ComGoogleCommonUtilConcurrentListenerCallQueue_PerListenerQueue_initWithId_withJavaUtilConcurrentExecutor_(listener, executor)];
}

- (void)enqueueWithComGoogleCommonUtilConcurrentListenerCallQueue_Event:(id<ComGoogleCommonUtilConcurrentListenerCallQueue_Event>)event {
  ComGoogleCommonUtilConcurrentListenerCallQueue_enqueueHelperWithComGoogleCommonUtilConcurrentListenerCallQueue_Event_withId_(self, event, event);
}

- (void)enqueueWithComGoogleCommonUtilConcurrentListenerCallQueue_Event:(id<ComGoogleCommonUtilConcurrentListenerCallQueue_Event>)event
                                                           withNSString:(NSString *)label {
  ComGoogleCommonUtilConcurrentListenerCallQueue_enqueueHelperWithComGoogleCommonUtilConcurrentListenerCallQueue_Event_withId_(self, event, label);
}

- (void)enqueueHelperWithComGoogleCommonUtilConcurrentListenerCallQueue_Event:(id<ComGoogleCommonUtilConcurrentListenerCallQueue_Event>)event
                                                                       withId:(id)label {
  ComGoogleCommonUtilConcurrentListenerCallQueue_enqueueHelperWithComGoogleCommonUtilConcurrentListenerCallQueue_Event_withId_(self, event, label);
}

- (void)dispatch {
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(listeners_)) size]; i++) {
    [((ComGoogleCommonUtilConcurrentListenerCallQueue_PerListenerQueue *) nil_chk([listeners_ getWithInt:i])) dispatch];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x1, 3, 6, -1, 7, -1, -1 },
    { NULL, "V", 0x2, 8, 9, -1, 10, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addListenerWithId:withJavaUtilConcurrentExecutor:);
  methods[2].selector = @selector(enqueueWithComGoogleCommonUtilConcurrentListenerCallQueue_Event:);
  methods[3].selector = @selector(enqueueWithComGoogleCommonUtilConcurrentListenerCallQueue_Event:withNSString:);
  methods[4].selector = @selector(enqueueHelperWithComGoogleCommonUtilConcurrentListenerCallQueue_Event:withId:);
  methods[5].selector = @selector(dispatch);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
    { "listeners_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 12, -1 },
  };
  static const void *ptrTable[] = { "addListener", "LNSObject;LJavaUtilConcurrentExecutor;", "(TL;Ljava/util/concurrent/Executor;)V", "enqueue", "LComGoogleCommonUtilConcurrentListenerCallQueue_Event;", "(Lcom/google/common/util/concurrent/ListenerCallQueue$Event<TL;>;)V", "LComGoogleCommonUtilConcurrentListenerCallQueue_Event;LNSString;", "(Lcom/google/common/util/concurrent/ListenerCallQueue$Event<TL;>;Ljava/lang/String;)V", "enqueueHelper", "LComGoogleCommonUtilConcurrentListenerCallQueue_Event;LNSObject;", "(Lcom/google/common/util/concurrent/ListenerCallQueue$Event<TL;>;Ljava/lang/Object;)V", &ComGoogleCommonUtilConcurrentListenerCallQueue_logger, "Ljava/util/List<Lcom/google/common/util/concurrent/ListenerCallQueue$PerListenerQueue<TL;>;>;", "LComGoogleCommonUtilConcurrentListenerCallQueue_Event;LComGoogleCommonUtilConcurrentListenerCallQueue_PerListenerQueue;", "<L:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentListenerCallQueue = { "ListenerCallQueue", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x10, 6, 2, -1, 13, -1, 14, -1 };
  return &_ComGoogleCommonUtilConcurrentListenerCallQueue;
}

+ (void)initialize {
  if (self == [ComGoogleCommonUtilConcurrentListenerCallQueue class]) {
    ComGoogleCommonUtilConcurrentListenerCallQueue_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([ComGoogleCommonUtilConcurrentListenerCallQueue_class_() getName]);
    J2OBJC_SET_INITIALIZED(ComGoogleCommonUtilConcurrentListenerCallQueue)
  }
}

@end

void ComGoogleCommonUtilConcurrentListenerCallQueue_init(ComGoogleCommonUtilConcurrentListenerCallQueue *self) {
  NSObject_init(self);
  self->listeners_ = JavaUtilCollections_synchronizedListWithJavaUtilList_(new_JavaUtilArrayList_init());
}

ComGoogleCommonUtilConcurrentListenerCallQueue *new_ComGoogleCommonUtilConcurrentListenerCallQueue_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentListenerCallQueue, init)
}

ComGoogleCommonUtilConcurrentListenerCallQueue *create_ComGoogleCommonUtilConcurrentListenerCallQueue_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentListenerCallQueue, init)
}

void ComGoogleCommonUtilConcurrentListenerCallQueue_enqueueHelperWithComGoogleCommonUtilConcurrentListenerCallQueue_Event_withId_(ComGoogleCommonUtilConcurrentListenerCallQueue *self, id<ComGoogleCommonUtilConcurrentListenerCallQueue_Event> event, id label) {
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_withId_(event, @"event");
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_withId_(label, @"label");
  @synchronized(self->listeners_) {
    for (ComGoogleCommonUtilConcurrentListenerCallQueue_PerListenerQueue * __strong queue in nil_chk(self->listeners_)) {
      [((ComGoogleCommonUtilConcurrentListenerCallQueue_PerListenerQueue *) nil_chk(queue)) addWithComGoogleCommonUtilConcurrentListenerCallQueue_Event:event withId:label];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentListenerCallQueue)

@implementation ComGoogleCommonUtilConcurrentListenerCallQueue_Event

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(callWithId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LNSObject;", "(TL;)V", "LComGoogleCommonUtilConcurrentListenerCallQueue;", "<L:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentListenerCallQueue_Event = { "Event", "com.google.common.util.concurrent", ptrTable, methods, NULL, 7, 0x609, 1, 0, 3, -1, -1, 4, -1 };
  return &_ComGoogleCommonUtilConcurrentListenerCallQueue_Event;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentListenerCallQueue_Event)

@implementation ComGoogleCommonUtilConcurrentListenerCallQueue_PerListenerQueue

- (instancetype)initWithId:(id)listener
withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor {
  ComGoogleCommonUtilConcurrentListenerCallQueue_PerListenerQueue_initWithId_withJavaUtilConcurrentExecutor_(self, listener, executor);
  return self;
}

- (void)addWithComGoogleCommonUtilConcurrentListenerCallQueue_Event:(id<ComGoogleCommonUtilConcurrentListenerCallQueue_Event>)event
                                                             withId:(id)label {
  @synchronized(self) {
    [((id<JavaUtilQueue>) nil_chk(waitQueue_)) addWithId:event];
    [((id<JavaUtilQueue>) nil_chk(labelQueue_)) addWithId:label];
  }
}

- (void)dispatch {
  jboolean scheduleEventRunner = false;
  @synchronized(self) {
    if (!isThreadScheduled_) {
      isThreadScheduled_ = true;
      scheduleEventRunner = true;
    }
  }
  if (scheduleEventRunner) {
    @try {
      [((id<JavaUtilConcurrentExecutor>) nil_chk(executor_)) executeWithJavaLangRunnable:self];
    }
    @catch (JavaLangRuntimeException *e) {
      @synchronized(self) {
        isThreadScheduled_ = false;
      }
      [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(ComGoogleCommonUtilConcurrentListenerCallQueue, logger))) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:JreStrcat("$@$@", @"Exception while running callbacks for ", listener_, @" on ", executor_) withNSException:e];
      @throw e;
    }
  }
}

- (void)run {
  jboolean stillRunning = true;
  @try {
    while (true) {
      id<ComGoogleCommonUtilConcurrentListenerCallQueue_Event> nextToRun;
      id nextLabel;
      @synchronized(self) {
        ComGoogleCommonBasePreconditions_checkStateWithBoolean_(isThreadScheduled_);
        nextToRun = [((id<JavaUtilQueue>) nil_chk(waitQueue_)) poll];
        nextLabel = [((id<JavaUtilQueue>) nil_chk(labelQueue_)) poll];
        if (nextToRun == nil) {
          isThreadScheduled_ = false;
          stillRunning = false;
          break;
        }
      }
      @try {
        [nextToRun callWithId:listener_];
      }
      @catch (JavaLangRuntimeException *e) {
        [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(ComGoogleCommonUtilConcurrentListenerCallQueue, logger))) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:JreStrcat("$@C@", @"Exception while executing callback: ", listener_, ' ', nextLabel) withNSException:e];
      }
    }
  }
  @finally {
    if (stillRunning) {
      @synchronized(self) {
        isThreadScheduled_ = false;
      }
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x20, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithId:withJavaUtilConcurrentExecutor:);
  methods[1].selector = @selector(addWithComGoogleCommonUtilConcurrentListenerCallQueue_Event:withId:);
  methods[2].selector = @selector(dispatch);
  methods[3].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "listener_", "LNSObject;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "executor_", "LJavaUtilConcurrentExecutor;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "waitQueue_", "LJavaUtilQueue;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "labelQueue_", "LJavaUtilQueue;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
    { "isThreadScheduled_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;LJavaUtilConcurrentExecutor;", "(TL;Ljava/util/concurrent/Executor;)V", "add", "LComGoogleCommonUtilConcurrentListenerCallQueue_Event;LNSObject;", "(Lcom/google/common/util/concurrent/ListenerCallQueue$Event<TL;>;Ljava/lang/Object;)V", "TL;", "Ljava/util/Queue<Lcom/google/common/util/concurrent/ListenerCallQueue$Event<TL;>;>;", "Ljava/util/Queue<Ljava/lang/Object;>;", "LComGoogleCommonUtilConcurrentListenerCallQueue;", "<L:Ljava/lang/Object;>Ljava/lang/Object;Ljava/lang/Runnable;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentListenerCallQueue_PerListenerQueue = { "PerListenerQueue", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x1a, 4, 5, 8, -1, -1, 9, -1 };
  return &_ComGoogleCommonUtilConcurrentListenerCallQueue_PerListenerQueue;
}

@end

void ComGoogleCommonUtilConcurrentListenerCallQueue_PerListenerQueue_initWithId_withJavaUtilConcurrentExecutor_(ComGoogleCommonUtilConcurrentListenerCallQueue_PerListenerQueue *self, id listener, id<JavaUtilConcurrentExecutor> executor) {
  NSObject_init(self);
  self->waitQueue_ = ComGoogleCommonCollectQueues_newArrayDeque();
  self->labelQueue_ = ComGoogleCommonCollectQueues_newArrayDeque();
  self->listener_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(listener);
  self->executor_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(executor);
}

ComGoogleCommonUtilConcurrentListenerCallQueue_PerListenerQueue *new_ComGoogleCommonUtilConcurrentListenerCallQueue_PerListenerQueue_initWithId_withJavaUtilConcurrentExecutor_(id listener, id<JavaUtilConcurrentExecutor> executor) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentListenerCallQueue_PerListenerQueue, initWithId_withJavaUtilConcurrentExecutor_, listener, executor)
}

ComGoogleCommonUtilConcurrentListenerCallQueue_PerListenerQueue *create_ComGoogleCommonUtilConcurrentListenerCallQueue_PerListenerQueue_initWithId_withJavaUtilConcurrentExecutor_(id listener, id<JavaUtilConcurrentExecutor> executor) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentListenerCallQueue_PerListenerQueue, initWithId_withJavaUtilConcurrentExecutor_, listener, executor)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentListenerCallQueue_PerListenerQueue)
