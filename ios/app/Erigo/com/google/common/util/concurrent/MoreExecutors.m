//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/util/concurrent/MoreExecutors.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/base/Supplier.h"
#include "com/google/common/base/Throwables.h"
#include "com/google/common/collect/Lists.h"
#include "com/google/common/collect/Queues.h"
#include "com/google/common/util/concurrent/AbstractFuture.h"
#include "com/google/common/util/concurrent/AbstractListeningExecutorService.h"
#include "com/google/common/util/concurrent/Callables.h"
#include "com/google/common/util/concurrent/ForwardingListenableFuture.h"
#include "com/google/common/util/concurrent/ListenableFuture.h"
#include "com/google/common/util/concurrent/ListenableScheduledFuture.h"
#include "com/google/common/util/concurrent/ListeningExecutorService.h"
#include "com/google/common/util/concurrent/ListeningScheduledExecutorService.h"
#include "com/google/common/util/concurrent/MoreExecutors.h"
#include "com/google/common/util/concurrent/ThreadFactoryBuilder.h"
#include "com/google/common/util/concurrent/TrustedListenableFutureTask.h"
#include "com/google/common/util/concurrent/WrappingExecutorService.h"
#include "com/google/common/util/concurrent/WrappingScheduledExecutorService.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/Runnable.h"
#include "java/lang/Runtime.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/SecurityException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/lang/reflect/Method.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/concurrent/BlockingQueue.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/Delayed.h"
#include "java/util/concurrent/ExecutionException.h"
#include "java/util/concurrent/Executor.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/LinkedBlockingQueue.h"
#include "java/util/concurrent/RejectedExecutionException.h"
#include "java/util/concurrent/ScheduledExecutorService.h"
#include "java/util/concurrent/ScheduledFuture.h"
#include "java/util/concurrent/ScheduledThreadPoolExecutor.h"
#include "java/util/concurrent/ThreadFactory.h"
#include "java/util/concurrent/ThreadPoolExecutor.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/TimeoutException.h"

@class JavaLangVoid;

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ComGoogleCommonUtilConcurrentMoreExecutors ()

- (instancetype)init;

+ (void)useDaemonThreadFactoryWithJavaUtilConcurrentThreadPoolExecutor:(JavaUtilConcurrentThreadPoolExecutor *)executor;

+ (id<ComGoogleCommonUtilConcurrentListenableFuture>)submitAndAddQueueListenerWithComGoogleCommonUtilConcurrentListeningExecutorService:(id<ComGoogleCommonUtilConcurrentListeningExecutorService>)executorService
                                                                                                         withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)task
                                                                                                    withJavaUtilConcurrentBlockingQueue:(id<JavaUtilConcurrentBlockingQueue>)queue;

+ (jboolean)isAppEngine;

@end

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentMoreExecutors_init(ComGoogleCommonUtilConcurrentMoreExecutors *self);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentMoreExecutors *new_ComGoogleCommonUtilConcurrentMoreExecutors_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentMoreExecutors *create_ComGoogleCommonUtilConcurrentMoreExecutors_init();

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentMoreExecutors_useDaemonThreadFactoryWithJavaUtilConcurrentThreadPoolExecutor_(JavaUtilConcurrentThreadPoolExecutor *executor);

__attribute__((unused)) static id<ComGoogleCommonUtilConcurrentListenableFuture> ComGoogleCommonUtilConcurrentMoreExecutors_submitAndAddQueueListenerWithComGoogleCommonUtilConcurrentListeningExecutorService_withJavaUtilConcurrentCallable_withJavaUtilConcurrentBlockingQueue_(id<ComGoogleCommonUtilConcurrentListeningExecutorService> executorService, id<JavaUtilConcurrentCallable> task, id<JavaUtilConcurrentBlockingQueue> queue);

__attribute__((unused)) static jboolean ComGoogleCommonUtilConcurrentMoreExecutors_isAppEngine();

__attribute__((unused)) static id<JavaUtilConcurrentExecutorService> ComGoogleCommonUtilConcurrentMoreExecutors_Application_getExitingExecutorServiceWithJavaUtilConcurrentThreadPoolExecutor_withLong_withJavaUtilConcurrentTimeUnit_(ComGoogleCommonUtilConcurrentMoreExecutors_Application *self, JavaUtilConcurrentThreadPoolExecutor *executor, jlong terminationTimeout, JavaUtilConcurrentTimeUnit *timeUnit);

__attribute__((unused)) static id<JavaUtilConcurrentScheduledExecutorService> ComGoogleCommonUtilConcurrentMoreExecutors_Application_getExitingScheduledExecutorServiceWithJavaUtilConcurrentScheduledThreadPoolExecutor_withLong_withJavaUtilConcurrentTimeUnit_(ComGoogleCommonUtilConcurrentMoreExecutors_Application *self, JavaUtilConcurrentScheduledThreadPoolExecutor *executor, jlong terminationTimeout, JavaUtilConcurrentTimeUnit *timeUnit);

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentMoreExecutors_Application_addDelayedShutdownHookWithJavaUtilConcurrentExecutorService_withLong_withJavaUtilConcurrentTimeUnit_(ComGoogleCommonUtilConcurrentMoreExecutors_Application *self, id<JavaUtilConcurrentExecutorService> service, jlong terminationTimeout, JavaUtilConcurrentTimeUnit *timeUnit);

__attribute__((unused)) static id<JavaUtilConcurrentExecutorService> ComGoogleCommonUtilConcurrentMoreExecutors_Application_getExitingExecutorServiceWithJavaUtilConcurrentThreadPoolExecutor_(ComGoogleCommonUtilConcurrentMoreExecutors_Application *self, JavaUtilConcurrentThreadPoolExecutor *executor);

__attribute__((unused)) static id<JavaUtilConcurrentScheduledExecutorService> ComGoogleCommonUtilConcurrentMoreExecutors_Application_getExitingScheduledExecutorServiceWithJavaUtilConcurrentScheduledThreadPoolExecutor_(ComGoogleCommonUtilConcurrentMoreExecutors_Application *self, JavaUtilConcurrentScheduledThreadPoolExecutor *executor);

@interface ComGoogleCommonUtilConcurrentMoreExecutors_Application_1 : NSObject < JavaLangRunnable > {
 @public
  id<JavaUtilConcurrentExecutorService> val$service_;
  jlong val$terminationTimeout_;
  JavaUtilConcurrentTimeUnit *val$timeUnit_;
}

- (instancetype)initWithJavaUtilConcurrentExecutorService:(id<JavaUtilConcurrentExecutorService>)capture$0
                                                 withLong:(jlong)capture$1
                           withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)capture$2;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentMoreExecutors_Application_1)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentMoreExecutors_Application_1_initWithJavaUtilConcurrentExecutorService_withLong_withJavaUtilConcurrentTimeUnit_(ComGoogleCommonUtilConcurrentMoreExecutors_Application_1 *self, id<JavaUtilConcurrentExecutorService> capture$0, jlong capture$1, JavaUtilConcurrentTimeUnit *capture$2);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentMoreExecutors_Application_1 *new_ComGoogleCommonUtilConcurrentMoreExecutors_Application_1_initWithJavaUtilConcurrentExecutorService_withLong_withJavaUtilConcurrentTimeUnit_(id<JavaUtilConcurrentExecutorService> capture$0, jlong capture$1, JavaUtilConcurrentTimeUnit *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentMoreExecutors_Application_1 *create_ComGoogleCommonUtilConcurrentMoreExecutors_Application_1_initWithJavaUtilConcurrentExecutorService_withLong_withJavaUtilConcurrentTimeUnit_(id<JavaUtilConcurrentExecutorService> capture$0, jlong capture$1, JavaUtilConcurrentTimeUnit *capture$2);

@interface ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutorService : ComGoogleCommonUtilConcurrentAbstractListeningExecutorService {
 @public
  id lock_;
  jint runningTasks_;
  jboolean shutdown_;
}

- (instancetype)init;

- (void)executeWithJavaLangRunnable:(id<JavaLangRunnable>)command;

- (jboolean)isShutdown;

- (void)shutdown;

- (id<JavaUtilList>)shutdownNow;

- (jboolean)isTerminated;

- (jboolean)awaitTerminationWithLong:(jlong)timeout
      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (void)startTask;

- (void)endTask;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutorService)

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutorService, lock_, id)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutorService_init(ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutorService *self);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutorService *new_ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutorService_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutorService *create_ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutorService_init();

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutorService_startTask(ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutorService *self);

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutorService_endTask(ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutorService *self);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutorService)

typedef NS_ENUM(NSUInteger, ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor_Enum) {
  ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor_Enum_INSTANCE = 0,
};

@interface ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor : JavaLangEnum < NSCopying, JavaUtilConcurrentExecutor >

- (void)executeWithJavaLangRunnable:(id<JavaLangRunnable>)command;

- (NSString *)description;

+ (IOSObjectArray *)values;

+ (ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor *)valueOfWithNSString:(NSString *)name;

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor *ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor_values_[];

inline ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor *ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor_get_INSTANCE();
J2OBJC_ENUM_CONSTANT(ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor, INSTANCE)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor_initWithNSString_withInt_(ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor *new_ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor_values();

__attribute__((unused)) static ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor *ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor *ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor)

@interface ComGoogleCommonUtilConcurrentMoreExecutors_ListeningDecorator : ComGoogleCommonUtilConcurrentAbstractListeningExecutorService {
 @public
  id<JavaUtilConcurrentExecutorService> delegate_;
}

- (instancetype)initWithJavaUtilConcurrentExecutorService:(id<JavaUtilConcurrentExecutorService>)delegate;

- (jboolean)awaitTerminationWithLong:(jlong)timeout
      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (jboolean)isShutdown;

- (jboolean)isTerminated;

- (void)shutdown;

- (id<JavaUtilList>)shutdownNow;

- (void)executeWithJavaLangRunnable:(id<JavaLangRunnable>)command;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentMoreExecutors_ListeningDecorator)

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentMoreExecutors_ListeningDecorator, delegate_, id<JavaUtilConcurrentExecutorService>)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentMoreExecutors_ListeningDecorator_initWithJavaUtilConcurrentExecutorService_(ComGoogleCommonUtilConcurrentMoreExecutors_ListeningDecorator *self, id<JavaUtilConcurrentExecutorService> delegate);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentMoreExecutors_ListeningDecorator *new_ComGoogleCommonUtilConcurrentMoreExecutors_ListeningDecorator_initWithJavaUtilConcurrentExecutorService_(id<JavaUtilConcurrentExecutorService> delegate) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentMoreExecutors_ListeningDecorator *create_ComGoogleCommonUtilConcurrentMoreExecutors_ListeningDecorator_initWithJavaUtilConcurrentExecutorService_(id<JavaUtilConcurrentExecutorService> delegate);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentMoreExecutors_ListeningDecorator)

@interface ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator : ComGoogleCommonUtilConcurrentMoreExecutors_ListeningDecorator < ComGoogleCommonUtilConcurrentListeningScheduledExecutorService > {
 @public
  id<JavaUtilConcurrentScheduledExecutorService> delegate_ScheduledListeningDecorator_;
}

- (instancetype)initWithJavaUtilConcurrentScheduledExecutorService:(id<JavaUtilConcurrentScheduledExecutorService>)delegate;

- (id<ComGoogleCommonUtilConcurrentListenableScheduledFuture>)scheduleWithJavaLangRunnable:(id<JavaLangRunnable>)command
                                                                                  withLong:(jlong)delay
                                                            withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (id<ComGoogleCommonUtilConcurrentListenableScheduledFuture>)scheduleWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable
                                                                                            withLong:(jlong)delay
                                                                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (id<ComGoogleCommonUtilConcurrentListenableScheduledFuture>)scheduleAtFixedRateWithJavaLangRunnable:(id<JavaLangRunnable>)command
                                                                                             withLong:(jlong)initialDelay
                                                                                             withLong:(jlong)period
                                                                       withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (id<ComGoogleCommonUtilConcurrentListenableScheduledFuture>)scheduleWithFixedDelayWithJavaLangRunnable:(id<JavaLangRunnable>)command
                                                                                                withLong:(jlong)initialDelay
                                                                                                withLong:(jlong)delay
                                                                          withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (id<ComGoogleCommonUtilConcurrentListenableFuture>)submitWithJavaLangRunnable:(id<JavaLangRunnable>)arg0;

- (id<ComGoogleCommonUtilConcurrentListenableFuture>)submitWithJavaLangRunnable:(id<JavaLangRunnable>)arg0
                                                                         withId:(id)arg1;

- (id<ComGoogleCommonUtilConcurrentListenableFuture>)submitWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator)

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator, delegate_ScheduledListeningDecorator_, id<JavaUtilConcurrentScheduledExecutorService>)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_initWithJavaUtilConcurrentScheduledExecutorService_(ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator *self, id<JavaUtilConcurrentScheduledExecutorService> delegate);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator *new_ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_initWithJavaUtilConcurrentScheduledExecutorService_(id<JavaUtilConcurrentScheduledExecutorService> delegate) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator *create_ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_initWithJavaUtilConcurrentScheduledExecutorService_(id<JavaUtilConcurrentScheduledExecutorService> delegate);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator)

@interface ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_ListenableScheduledTask : ComGoogleCommonUtilConcurrentForwardingListenableFuture_SimpleForwardingListenableFuture < ComGoogleCommonUtilConcurrentListenableScheduledFuture > {
 @public
  id<JavaUtilConcurrentScheduledFuture> scheduledDelegate_;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentListenableFuture:(id<ComGoogleCommonUtilConcurrentListenableFuture>)listenableDelegate
                                withJavaUtilConcurrentScheduledFuture:(id<JavaUtilConcurrentScheduledFuture>)scheduledDelegate;

- (jboolean)cancelWithBoolean:(jboolean)mayInterruptIfRunning;

- (jlong)getDelayWithJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (jint)compareToWithId:(id<JavaUtilConcurrentDelayed>)other;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_ListenableScheduledTask)

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_ListenableScheduledTask, scheduledDelegate_, id<JavaUtilConcurrentScheduledFuture>)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_ListenableScheduledTask_initWithComGoogleCommonUtilConcurrentListenableFuture_withJavaUtilConcurrentScheduledFuture_(ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_ListenableScheduledTask *self, id<ComGoogleCommonUtilConcurrentListenableFuture> listenableDelegate, id<JavaUtilConcurrentScheduledFuture> scheduledDelegate);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_ListenableScheduledTask *new_ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_ListenableScheduledTask_initWithComGoogleCommonUtilConcurrentListenableFuture_withJavaUtilConcurrentScheduledFuture_(id<ComGoogleCommonUtilConcurrentListenableFuture> listenableDelegate, id<JavaUtilConcurrentScheduledFuture> scheduledDelegate) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_ListenableScheduledTask *create_ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_ListenableScheduledTask_initWithComGoogleCommonUtilConcurrentListenableFuture_withJavaUtilConcurrentScheduledFuture_(id<ComGoogleCommonUtilConcurrentListenableFuture> listenableDelegate, id<JavaUtilConcurrentScheduledFuture> scheduledDelegate);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_ListenableScheduledTask)

@interface ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_NeverSuccessfulListenableFutureTask : ComGoogleCommonUtilConcurrentAbstractFuture < JavaLangRunnable > {
 @public
  id<JavaLangRunnable> delegate_;
}

- (instancetype)initWithJavaLangRunnable:(id<JavaLangRunnable>)delegate;

- (void)run;

- (JavaLangVoid *)get;

- (JavaLangVoid *)getWithLong:(jlong)arg0
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)arg1;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_NeverSuccessfulListenableFutureTask)

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_NeverSuccessfulListenableFutureTask, delegate_, id<JavaLangRunnable>)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_NeverSuccessfulListenableFutureTask_initWithJavaLangRunnable_(ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_NeverSuccessfulListenableFutureTask *self, id<JavaLangRunnable> delegate);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_NeverSuccessfulListenableFutureTask *new_ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_NeverSuccessfulListenableFutureTask_initWithJavaLangRunnable_(id<JavaLangRunnable> delegate) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_NeverSuccessfulListenableFutureTask *create_ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_NeverSuccessfulListenableFutureTask_initWithJavaLangRunnable_(id<JavaLangRunnable> delegate);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_NeverSuccessfulListenableFutureTask)

@interface ComGoogleCommonUtilConcurrentMoreExecutors_1 : NSObject < JavaLangRunnable > {
 @public
  id<JavaUtilConcurrentBlockingQueue> val$queue_;
  id<ComGoogleCommonUtilConcurrentListenableFuture> val$future_;
}

- (instancetype)initWithJavaUtilConcurrentBlockingQueue:(id<JavaUtilConcurrentBlockingQueue>)capture$0
      withComGoogleCommonUtilConcurrentListenableFuture:(id<ComGoogleCommonUtilConcurrentListenableFuture>)capture$1;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentMoreExecutors_1)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentMoreExecutors_1_initWithJavaUtilConcurrentBlockingQueue_withComGoogleCommonUtilConcurrentListenableFuture_(ComGoogleCommonUtilConcurrentMoreExecutors_1 *self, id<JavaUtilConcurrentBlockingQueue> capture$0, id<ComGoogleCommonUtilConcurrentListenableFuture> capture$1);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentMoreExecutors_1 *new_ComGoogleCommonUtilConcurrentMoreExecutors_1_initWithJavaUtilConcurrentBlockingQueue_withComGoogleCommonUtilConcurrentListenableFuture_(id<JavaUtilConcurrentBlockingQueue> capture$0, id<ComGoogleCommonUtilConcurrentListenableFuture> capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentMoreExecutors_1 *create_ComGoogleCommonUtilConcurrentMoreExecutors_1_initWithJavaUtilConcurrentBlockingQueue_withComGoogleCommonUtilConcurrentListenableFuture_(id<JavaUtilConcurrentBlockingQueue> capture$0, id<ComGoogleCommonUtilConcurrentListenableFuture> capture$1);

@interface ComGoogleCommonUtilConcurrentMoreExecutors_2 : NSObject < JavaUtilConcurrentExecutor > {
 @public
  id<JavaUtilConcurrentExecutor> val$executor_;
  id<ComGoogleCommonBaseSupplier> val$nameSupplier_;
}

- (instancetype)initWithJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)capture$0
                   withComGoogleCommonBaseSupplier:(id<ComGoogleCommonBaseSupplier>)capture$1;

- (void)executeWithJavaLangRunnable:(id<JavaLangRunnable>)command;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentMoreExecutors_2)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentMoreExecutors_2_initWithJavaUtilConcurrentExecutor_withComGoogleCommonBaseSupplier_(ComGoogleCommonUtilConcurrentMoreExecutors_2 *self, id<JavaUtilConcurrentExecutor> capture$0, id<ComGoogleCommonBaseSupplier> capture$1);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentMoreExecutors_2 *new_ComGoogleCommonUtilConcurrentMoreExecutors_2_initWithJavaUtilConcurrentExecutor_withComGoogleCommonBaseSupplier_(id<JavaUtilConcurrentExecutor> capture$0, id<ComGoogleCommonBaseSupplier> capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentMoreExecutors_2 *create_ComGoogleCommonUtilConcurrentMoreExecutors_2_initWithJavaUtilConcurrentExecutor_withComGoogleCommonBaseSupplier_(id<JavaUtilConcurrentExecutor> capture$0, id<ComGoogleCommonBaseSupplier> capture$1);

@interface ComGoogleCommonUtilConcurrentMoreExecutors_3 : ComGoogleCommonUtilConcurrentWrappingExecutorService {
 @public
  id<ComGoogleCommonBaseSupplier> val$nameSupplier_;
}

- (instancetype)initWithComGoogleCommonBaseSupplier:(id<ComGoogleCommonBaseSupplier>)capture$0
              withJavaUtilConcurrentExecutorService:(id<JavaUtilConcurrentExecutorService>)delegate;

- (id<JavaUtilConcurrentCallable>)wrapTaskWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable;

- (id<JavaLangRunnable>)wrapTaskWithJavaLangRunnable:(id<JavaLangRunnable>)command;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentMoreExecutors_3)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentMoreExecutors_3_initWithComGoogleCommonBaseSupplier_withJavaUtilConcurrentExecutorService_(ComGoogleCommonUtilConcurrentMoreExecutors_3 *self, id<ComGoogleCommonBaseSupplier> capture$0, id<JavaUtilConcurrentExecutorService> delegate);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentMoreExecutors_3 *new_ComGoogleCommonUtilConcurrentMoreExecutors_3_initWithComGoogleCommonBaseSupplier_withJavaUtilConcurrentExecutorService_(id<ComGoogleCommonBaseSupplier> capture$0, id<JavaUtilConcurrentExecutorService> delegate) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentMoreExecutors_3 *create_ComGoogleCommonUtilConcurrentMoreExecutors_3_initWithComGoogleCommonBaseSupplier_withJavaUtilConcurrentExecutorService_(id<ComGoogleCommonBaseSupplier> capture$0, id<JavaUtilConcurrentExecutorService> delegate);

@interface ComGoogleCommonUtilConcurrentMoreExecutors_4 : ComGoogleCommonUtilConcurrentWrappingScheduledExecutorService {
 @public
  id<ComGoogleCommonBaseSupplier> val$nameSupplier_;
}

- (instancetype)initWithComGoogleCommonBaseSupplier:(id<ComGoogleCommonBaseSupplier>)capture$0
     withJavaUtilConcurrentScheduledExecutorService:(id<JavaUtilConcurrentScheduledExecutorService>)delegate;

- (id<JavaUtilConcurrentCallable>)wrapTaskWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable;

- (id<JavaLangRunnable>)wrapTaskWithJavaLangRunnable:(id<JavaLangRunnable>)command;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentMoreExecutors_4)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentMoreExecutors_4_initWithComGoogleCommonBaseSupplier_withJavaUtilConcurrentScheduledExecutorService_(ComGoogleCommonUtilConcurrentMoreExecutors_4 *self, id<ComGoogleCommonBaseSupplier> capture$0, id<JavaUtilConcurrentScheduledExecutorService> delegate);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentMoreExecutors_4 *new_ComGoogleCommonUtilConcurrentMoreExecutors_4_initWithComGoogleCommonBaseSupplier_withJavaUtilConcurrentScheduledExecutorService_(id<ComGoogleCommonBaseSupplier> capture$0, id<JavaUtilConcurrentScheduledExecutorService> delegate) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentMoreExecutors_4 *create_ComGoogleCommonUtilConcurrentMoreExecutors_4_initWithComGoogleCommonBaseSupplier_withJavaUtilConcurrentScheduledExecutorService_(id<ComGoogleCommonBaseSupplier> capture$0, id<JavaUtilConcurrentScheduledExecutorService> delegate);

@interface ComGoogleCommonUtilConcurrentMoreExecutors_5 : NSObject < JavaUtilConcurrentExecutor > {
 @public
  id<JavaUtilConcurrentExecutor> val$delegate_;
  ComGoogleCommonUtilConcurrentAbstractFuture *val$future_;
  volatile_jboolean thrownFromDelegate_;
}

- (instancetype)initWithJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)capture$0
   withComGoogleCommonUtilConcurrentAbstractFuture:(ComGoogleCommonUtilConcurrentAbstractFuture *)capture$1;

- (void)executeWithJavaLangRunnable:(id<JavaLangRunnable>)command;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentMoreExecutors_5)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentMoreExecutors_5_initWithJavaUtilConcurrentExecutor_withComGoogleCommonUtilConcurrentAbstractFuture_(ComGoogleCommonUtilConcurrentMoreExecutors_5 *self, id<JavaUtilConcurrentExecutor> capture$0, ComGoogleCommonUtilConcurrentAbstractFuture *capture$1);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentMoreExecutors_5 *new_ComGoogleCommonUtilConcurrentMoreExecutors_5_initWithJavaUtilConcurrentExecutor_withComGoogleCommonUtilConcurrentAbstractFuture_(id<JavaUtilConcurrentExecutor> capture$0, ComGoogleCommonUtilConcurrentAbstractFuture *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentMoreExecutors_5 *create_ComGoogleCommonUtilConcurrentMoreExecutors_5_initWithJavaUtilConcurrentExecutor_withComGoogleCommonUtilConcurrentAbstractFuture_(id<JavaUtilConcurrentExecutor> capture$0, ComGoogleCommonUtilConcurrentAbstractFuture *capture$1);

@interface ComGoogleCommonUtilConcurrentMoreExecutors_5_1 : NSObject < JavaLangRunnable > {
 @public
  ComGoogleCommonUtilConcurrentMoreExecutors_5 *this$0_;
  id<JavaLangRunnable> val$command_;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentMoreExecutors_5:(ComGoogleCommonUtilConcurrentMoreExecutors_5 *)outer$
                                                withJavaLangRunnable:(id<JavaLangRunnable>)capture$0;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentMoreExecutors_5_1)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentMoreExecutors_5_1_initWithComGoogleCommonUtilConcurrentMoreExecutors_5_withJavaLangRunnable_(ComGoogleCommonUtilConcurrentMoreExecutors_5_1 *self, ComGoogleCommonUtilConcurrentMoreExecutors_5 *outer$, id<JavaLangRunnable> capture$0);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentMoreExecutors_5_1 *new_ComGoogleCommonUtilConcurrentMoreExecutors_5_1_initWithComGoogleCommonUtilConcurrentMoreExecutors_5_withJavaLangRunnable_(ComGoogleCommonUtilConcurrentMoreExecutors_5 *outer$, id<JavaLangRunnable> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentMoreExecutors_5_1 *create_ComGoogleCommonUtilConcurrentMoreExecutors_5_1_initWithComGoogleCommonUtilConcurrentMoreExecutors_5_withJavaLangRunnable_(ComGoogleCommonUtilConcurrentMoreExecutors_5 *outer$, id<JavaLangRunnable> capture$0);

@implementation ComGoogleCommonUtilConcurrentMoreExecutors

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentMoreExecutors_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id<JavaUtilConcurrentExecutorService>)getExitingExecutorServiceWithJavaUtilConcurrentThreadPoolExecutor:(JavaUtilConcurrentThreadPoolExecutor *)executor
                                                                                                  withLong:(jlong)terminationTimeout
                                                                            withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)timeUnit {
  return ComGoogleCommonUtilConcurrentMoreExecutors_getExitingExecutorServiceWithJavaUtilConcurrentThreadPoolExecutor_withLong_withJavaUtilConcurrentTimeUnit_(executor, terminationTimeout, timeUnit);
}

+ (id<JavaUtilConcurrentScheduledExecutorService>)getExitingScheduledExecutorServiceWithJavaUtilConcurrentScheduledThreadPoolExecutor:(JavaUtilConcurrentScheduledThreadPoolExecutor *)executor
                                                                                                                             withLong:(jlong)terminationTimeout
                                                                                                       withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)timeUnit {
  return ComGoogleCommonUtilConcurrentMoreExecutors_getExitingScheduledExecutorServiceWithJavaUtilConcurrentScheduledThreadPoolExecutor_withLong_withJavaUtilConcurrentTimeUnit_(executor, terminationTimeout, timeUnit);
}

+ (void)addDelayedShutdownHookWithJavaUtilConcurrentExecutorService:(id<JavaUtilConcurrentExecutorService>)service
                                                           withLong:(jlong)terminationTimeout
                                     withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)timeUnit {
  ComGoogleCommonUtilConcurrentMoreExecutors_addDelayedShutdownHookWithJavaUtilConcurrentExecutorService_withLong_withJavaUtilConcurrentTimeUnit_(service, terminationTimeout, timeUnit);
}

+ (id<JavaUtilConcurrentExecutorService>)getExitingExecutorServiceWithJavaUtilConcurrentThreadPoolExecutor:(JavaUtilConcurrentThreadPoolExecutor *)executor {
  return ComGoogleCommonUtilConcurrentMoreExecutors_getExitingExecutorServiceWithJavaUtilConcurrentThreadPoolExecutor_(executor);
}

+ (id<JavaUtilConcurrentScheduledExecutorService>)getExitingScheduledExecutorServiceWithJavaUtilConcurrentScheduledThreadPoolExecutor:(JavaUtilConcurrentScheduledThreadPoolExecutor *)executor {
  return ComGoogleCommonUtilConcurrentMoreExecutors_getExitingScheduledExecutorServiceWithJavaUtilConcurrentScheduledThreadPoolExecutor_(executor);
}

+ (void)useDaemonThreadFactoryWithJavaUtilConcurrentThreadPoolExecutor:(JavaUtilConcurrentThreadPoolExecutor *)executor {
  ComGoogleCommonUtilConcurrentMoreExecutors_useDaemonThreadFactoryWithJavaUtilConcurrentThreadPoolExecutor_(executor);
}

+ (id<ComGoogleCommonUtilConcurrentListeningExecutorService>)newDirectExecutorService {
  return ComGoogleCommonUtilConcurrentMoreExecutors_newDirectExecutorService();
}

+ (id<JavaUtilConcurrentExecutor>)directExecutor {
  return ComGoogleCommonUtilConcurrentMoreExecutors_directExecutor();
}

+ (id<ComGoogleCommonUtilConcurrentListeningExecutorService>)listeningDecoratorWithJavaUtilConcurrentExecutorService:(id<JavaUtilConcurrentExecutorService>)delegate {
  return ComGoogleCommonUtilConcurrentMoreExecutors_listeningDecoratorWithJavaUtilConcurrentExecutorService_(delegate);
}

+ (id<ComGoogleCommonUtilConcurrentListeningScheduledExecutorService>)listeningDecoratorWithJavaUtilConcurrentScheduledExecutorService:(id<JavaUtilConcurrentScheduledExecutorService>)delegate {
  return ComGoogleCommonUtilConcurrentMoreExecutors_listeningDecoratorWithJavaUtilConcurrentScheduledExecutorService_(delegate);
}

+ (id)invokeAnyImplWithComGoogleCommonUtilConcurrentListeningExecutorService:(id<ComGoogleCommonUtilConcurrentListeningExecutorService>)executorService
                                                      withJavaUtilCollection:(id<JavaUtilCollection>)tasks
                                                                 withBoolean:(jboolean)timed
                                                                    withLong:(jlong)timeout
                                              withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return ComGoogleCommonUtilConcurrentMoreExecutors_invokeAnyImplWithComGoogleCommonUtilConcurrentListeningExecutorService_withJavaUtilCollection_withBoolean_withLong_withJavaUtilConcurrentTimeUnit_(executorService, tasks, timed, timeout, unit);
}

+ (id<ComGoogleCommonUtilConcurrentListenableFuture>)submitAndAddQueueListenerWithComGoogleCommonUtilConcurrentListeningExecutorService:(id<ComGoogleCommonUtilConcurrentListeningExecutorService>)executorService
                                                                                                         withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)task
                                                                                                    withJavaUtilConcurrentBlockingQueue:(id<JavaUtilConcurrentBlockingQueue>)queue {
  return ComGoogleCommonUtilConcurrentMoreExecutors_submitAndAddQueueListenerWithComGoogleCommonUtilConcurrentListeningExecutorService_withJavaUtilConcurrentCallable_withJavaUtilConcurrentBlockingQueue_(executorService, task, queue);
}

+ (id<JavaUtilConcurrentThreadFactory>)platformThreadFactory {
  return ComGoogleCommonUtilConcurrentMoreExecutors_platformThreadFactory();
}

+ (jboolean)isAppEngine {
  return ComGoogleCommonUtilConcurrentMoreExecutors_isAppEngine();
}

+ (JavaLangThread *)newThreadWithNSString:(NSString *)name
                     withJavaLangRunnable:(id<JavaLangRunnable>)runnable {
  return ComGoogleCommonUtilConcurrentMoreExecutors_newThreadWithNSString_withJavaLangRunnable_(name, runnable);
}

+ (id<JavaUtilConcurrentExecutor>)renamingDecoratorWithJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor
                                                  withComGoogleCommonBaseSupplier:(id<ComGoogleCommonBaseSupplier>)nameSupplier {
  return ComGoogleCommonUtilConcurrentMoreExecutors_renamingDecoratorWithJavaUtilConcurrentExecutor_withComGoogleCommonBaseSupplier_(executor, nameSupplier);
}

+ (id<JavaUtilConcurrentExecutorService>)renamingDecoratorWithJavaUtilConcurrentExecutorService:(id<JavaUtilConcurrentExecutorService>)service
                                                                withComGoogleCommonBaseSupplier:(id<ComGoogleCommonBaseSupplier>)nameSupplier {
  return ComGoogleCommonUtilConcurrentMoreExecutors_renamingDecoratorWithJavaUtilConcurrentExecutorService_withComGoogleCommonBaseSupplier_(service, nameSupplier);
}

+ (id<JavaUtilConcurrentScheduledExecutorService>)renamingDecoratorWithJavaUtilConcurrentScheduledExecutorService:(id<JavaUtilConcurrentScheduledExecutorService>)service
                                                                                  withComGoogleCommonBaseSupplier:(id<ComGoogleCommonBaseSupplier>)nameSupplier {
  return ComGoogleCommonUtilConcurrentMoreExecutors_renamingDecoratorWithJavaUtilConcurrentScheduledExecutorService_withComGoogleCommonBaseSupplier_(service, nameSupplier);
}

+ (jboolean)shutdownAndAwaitTerminationWithJavaUtilConcurrentExecutorService:(id<JavaUtilConcurrentExecutorService>)service
                                                                    withLong:(jlong)timeout
                                              withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return ComGoogleCommonUtilConcurrentMoreExecutors_shutdownAndAwaitTerminationWithJavaUtilConcurrentExecutorService_withLong_withJavaUtilConcurrentTimeUnit_(service, timeout, unit);
}

+ (id<JavaUtilConcurrentExecutor>)rejectionPropagatingExecutorWithJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)delegate
                                             withComGoogleCommonUtilConcurrentAbstractFuture:(ComGoogleCommonUtilConcurrentAbstractFuture *)future {
  return ComGoogleCommonUtilConcurrentMoreExecutors_rejectionPropagatingExecutorWithJavaUtilConcurrentExecutor_withComGoogleCommonUtilConcurrentAbstractFuture_(delegate, future);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentExecutorService;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentScheduledExecutorService;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentExecutorService;", 0x9, 0, 6, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentScheduledExecutorService;", 0x9, 2, 7, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 8, 6, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentListeningExecutorService;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentExecutor;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentListeningExecutorService;", 0x9, 9, 10, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentListeningScheduledExecutorService;", 0x9, 9, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x8, 12, 13, 14, 15, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentListenableFuture;", 0xa, 16, 17, -1, 18, -1, -1 },
    { NULL, "LJavaUtilConcurrentThreadFactory;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThread;", 0x8, 19, 20, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentExecutor;", 0x8, 21, 22, -1, 23, -1, -1 },
    { NULL, "LJavaUtilConcurrentExecutorService;", 0x8, 21, 24, -1, 25, -1, -1 },
    { NULL, "LJavaUtilConcurrentScheduledExecutorService;", 0x8, 21, 26, -1, 27, -1, -1 },
    { NULL, "Z", 0x9, 28, 5, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentExecutor;", 0x8, 29, 30, -1, 31, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getExitingExecutorServiceWithJavaUtilConcurrentThreadPoolExecutor:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[2].selector = @selector(getExitingScheduledExecutorServiceWithJavaUtilConcurrentScheduledThreadPoolExecutor:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[3].selector = @selector(addDelayedShutdownHookWithJavaUtilConcurrentExecutorService:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[4].selector = @selector(getExitingExecutorServiceWithJavaUtilConcurrentThreadPoolExecutor:);
  methods[5].selector = @selector(getExitingScheduledExecutorServiceWithJavaUtilConcurrentScheduledThreadPoolExecutor:);
  methods[6].selector = @selector(useDaemonThreadFactoryWithJavaUtilConcurrentThreadPoolExecutor:);
  methods[7].selector = @selector(newDirectExecutorService);
  methods[8].selector = @selector(directExecutor);
  methods[9].selector = @selector(listeningDecoratorWithJavaUtilConcurrentExecutorService:);
  methods[10].selector = @selector(listeningDecoratorWithJavaUtilConcurrentScheduledExecutorService:);
  methods[11].selector = @selector(invokeAnyImplWithComGoogleCommonUtilConcurrentListeningExecutorService:withJavaUtilCollection:withBoolean:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[12].selector = @selector(submitAndAddQueueListenerWithComGoogleCommonUtilConcurrentListeningExecutorService:withJavaUtilConcurrentCallable:withJavaUtilConcurrentBlockingQueue:);
  methods[13].selector = @selector(platformThreadFactory);
  methods[14].selector = @selector(isAppEngine);
  methods[15].selector = @selector(newThreadWithNSString:withJavaLangRunnable:);
  methods[16].selector = @selector(renamingDecoratorWithJavaUtilConcurrentExecutor:withComGoogleCommonBaseSupplier:);
  methods[17].selector = @selector(renamingDecoratorWithJavaUtilConcurrentExecutorService:withComGoogleCommonBaseSupplier:);
  methods[18].selector = @selector(renamingDecoratorWithJavaUtilConcurrentScheduledExecutorService:withComGoogleCommonBaseSupplier:);
  methods[19].selector = @selector(shutdownAndAwaitTerminationWithJavaUtilConcurrentExecutorService:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[20].selector = @selector(rejectionPropagatingExecutorWithJavaUtilConcurrentExecutor:withComGoogleCommonUtilConcurrentAbstractFuture:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getExitingExecutorService", "LJavaUtilConcurrentThreadPoolExecutor;JLJavaUtilConcurrentTimeUnit;", "getExitingScheduledExecutorService", "LJavaUtilConcurrentScheduledThreadPoolExecutor;JLJavaUtilConcurrentTimeUnit;", "addDelayedShutdownHook", "LJavaUtilConcurrentExecutorService;JLJavaUtilConcurrentTimeUnit;", "LJavaUtilConcurrentThreadPoolExecutor;", "LJavaUtilConcurrentScheduledThreadPoolExecutor;", "useDaemonThreadFactory", "listeningDecorator", "LJavaUtilConcurrentExecutorService;", "LJavaUtilConcurrentScheduledExecutorService;", "invokeAnyImpl", "LComGoogleCommonUtilConcurrentListeningExecutorService;LJavaUtilCollection;ZJLJavaUtilConcurrentTimeUnit;", "LJavaLangInterruptedException;LJavaUtilConcurrentExecutionException;LJavaUtilConcurrentTimeoutException;", "<T:Ljava/lang/Object;>(Lcom/google/common/util/concurrent/ListeningExecutorService;Ljava/util/Collection<+Ljava/util/concurrent/Callable<TT;>;>;ZJLjava/util/concurrent/TimeUnit;)TT;", "submitAndAddQueueListener", "LComGoogleCommonUtilConcurrentListeningExecutorService;LJavaUtilConcurrentCallable;LJavaUtilConcurrentBlockingQueue;", "<T:Ljava/lang/Object;>(Lcom/google/common/util/concurrent/ListeningExecutorService;Ljava/util/concurrent/Callable<TT;>;Ljava/util/concurrent/BlockingQueue<Ljava/util/concurrent/Future<TT;>;>;)Lcom/google/common/util/concurrent/ListenableFuture<TT;>;", "newThread", "LNSString;LJavaLangRunnable;", "renamingDecorator", "LJavaUtilConcurrentExecutor;LComGoogleCommonBaseSupplier;", "(Ljava/util/concurrent/Executor;Lcom/google/common/base/Supplier<Ljava/lang/String;>;)Ljava/util/concurrent/Executor;", "LJavaUtilConcurrentExecutorService;LComGoogleCommonBaseSupplier;", "(Ljava/util/concurrent/ExecutorService;Lcom/google/common/base/Supplier<Ljava/lang/String;>;)Ljava/util/concurrent/ExecutorService;", "LJavaUtilConcurrentScheduledExecutorService;LComGoogleCommonBaseSupplier;", "(Ljava/util/concurrent/ScheduledExecutorService;Lcom/google/common/base/Supplier<Ljava/lang/String;>;)Ljava/util/concurrent/ScheduledExecutorService;", "shutdownAndAwaitTermination", "rejectionPropagatingExecutor", "LJavaUtilConcurrentExecutor;LComGoogleCommonUtilConcurrentAbstractFuture;", "(Ljava/util/concurrent/Executor;Lcom/google/common/util/concurrent/AbstractFuture<*>;)Ljava/util/concurrent/Executor;", "LComGoogleCommonUtilConcurrentMoreExecutors_Application;LComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutorService;LComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor;LComGoogleCommonUtilConcurrentMoreExecutors_ListeningDecorator;LComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentMoreExecutors = { "MoreExecutors", "com.google.common.util.concurrent", ptrTable, methods, NULL, 7, 0x11, 21, 0, -1, 32, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentMoreExecutors;
}

@end

void ComGoogleCommonUtilConcurrentMoreExecutors_init(ComGoogleCommonUtilConcurrentMoreExecutors *self) {
  NSObject_init(self);
}

ComGoogleCommonUtilConcurrentMoreExecutors *new_ComGoogleCommonUtilConcurrentMoreExecutors_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentMoreExecutors, init)
}

ComGoogleCommonUtilConcurrentMoreExecutors *create_ComGoogleCommonUtilConcurrentMoreExecutors_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentMoreExecutors, init)
}

id<JavaUtilConcurrentExecutorService> ComGoogleCommonUtilConcurrentMoreExecutors_getExitingExecutorServiceWithJavaUtilConcurrentThreadPoolExecutor_withLong_withJavaUtilConcurrentTimeUnit_(JavaUtilConcurrentThreadPoolExecutor *executor, jlong terminationTimeout, JavaUtilConcurrentTimeUnit *timeUnit) {
  ComGoogleCommonUtilConcurrentMoreExecutors_initialize();
  return ComGoogleCommonUtilConcurrentMoreExecutors_Application_getExitingExecutorServiceWithJavaUtilConcurrentThreadPoolExecutor_withLong_withJavaUtilConcurrentTimeUnit_(new_ComGoogleCommonUtilConcurrentMoreExecutors_Application_init(), executor, terminationTimeout, timeUnit);
}

id<JavaUtilConcurrentScheduledExecutorService> ComGoogleCommonUtilConcurrentMoreExecutors_getExitingScheduledExecutorServiceWithJavaUtilConcurrentScheduledThreadPoolExecutor_withLong_withJavaUtilConcurrentTimeUnit_(JavaUtilConcurrentScheduledThreadPoolExecutor *executor, jlong terminationTimeout, JavaUtilConcurrentTimeUnit *timeUnit) {
  ComGoogleCommonUtilConcurrentMoreExecutors_initialize();
  return ComGoogleCommonUtilConcurrentMoreExecutors_Application_getExitingScheduledExecutorServiceWithJavaUtilConcurrentScheduledThreadPoolExecutor_withLong_withJavaUtilConcurrentTimeUnit_(new_ComGoogleCommonUtilConcurrentMoreExecutors_Application_init(), executor, terminationTimeout, timeUnit);
}

void ComGoogleCommonUtilConcurrentMoreExecutors_addDelayedShutdownHookWithJavaUtilConcurrentExecutorService_withLong_withJavaUtilConcurrentTimeUnit_(id<JavaUtilConcurrentExecutorService> service, jlong terminationTimeout, JavaUtilConcurrentTimeUnit *timeUnit) {
  ComGoogleCommonUtilConcurrentMoreExecutors_initialize();
  ComGoogleCommonUtilConcurrentMoreExecutors_Application_addDelayedShutdownHookWithJavaUtilConcurrentExecutorService_withLong_withJavaUtilConcurrentTimeUnit_(new_ComGoogleCommonUtilConcurrentMoreExecutors_Application_init(), service, terminationTimeout, timeUnit);
}

id<JavaUtilConcurrentExecutorService> ComGoogleCommonUtilConcurrentMoreExecutors_getExitingExecutorServiceWithJavaUtilConcurrentThreadPoolExecutor_(JavaUtilConcurrentThreadPoolExecutor *executor) {
  ComGoogleCommonUtilConcurrentMoreExecutors_initialize();
  return ComGoogleCommonUtilConcurrentMoreExecutors_Application_getExitingExecutorServiceWithJavaUtilConcurrentThreadPoolExecutor_(new_ComGoogleCommonUtilConcurrentMoreExecutors_Application_init(), executor);
}

id<JavaUtilConcurrentScheduledExecutorService> ComGoogleCommonUtilConcurrentMoreExecutors_getExitingScheduledExecutorServiceWithJavaUtilConcurrentScheduledThreadPoolExecutor_(JavaUtilConcurrentScheduledThreadPoolExecutor *executor) {
  ComGoogleCommonUtilConcurrentMoreExecutors_initialize();
  return ComGoogleCommonUtilConcurrentMoreExecutors_Application_getExitingScheduledExecutorServiceWithJavaUtilConcurrentScheduledThreadPoolExecutor_(new_ComGoogleCommonUtilConcurrentMoreExecutors_Application_init(), executor);
}

void ComGoogleCommonUtilConcurrentMoreExecutors_useDaemonThreadFactoryWithJavaUtilConcurrentThreadPoolExecutor_(JavaUtilConcurrentThreadPoolExecutor *executor) {
  ComGoogleCommonUtilConcurrentMoreExecutors_initialize();
  [((JavaUtilConcurrentThreadPoolExecutor *) nil_chk(executor)) setThreadFactoryWithJavaUtilConcurrentThreadFactory:[((ComGoogleCommonUtilConcurrentThreadFactoryBuilder *) nil_chk([((ComGoogleCommonUtilConcurrentThreadFactoryBuilder *) nil_chk([new_ComGoogleCommonUtilConcurrentThreadFactoryBuilder_init() setDaemonWithBoolean:true])) setThreadFactoryWithJavaUtilConcurrentThreadFactory:[executor getThreadFactory]])) build]];
}

id<ComGoogleCommonUtilConcurrentListeningExecutorService> ComGoogleCommonUtilConcurrentMoreExecutors_newDirectExecutorService() {
  ComGoogleCommonUtilConcurrentMoreExecutors_initialize();
  return new_ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutorService_init();
}

id<JavaUtilConcurrentExecutor> ComGoogleCommonUtilConcurrentMoreExecutors_directExecutor() {
  ComGoogleCommonUtilConcurrentMoreExecutors_initialize();
  return JreLoadEnum(ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor, INSTANCE);
}

id<ComGoogleCommonUtilConcurrentListeningExecutorService> ComGoogleCommonUtilConcurrentMoreExecutors_listeningDecoratorWithJavaUtilConcurrentExecutorService_(id<JavaUtilConcurrentExecutorService> delegate) {
  ComGoogleCommonUtilConcurrentMoreExecutors_initialize();
  return ([ComGoogleCommonUtilConcurrentListeningExecutorService_class_() isInstance:delegate]) ? (id<ComGoogleCommonUtilConcurrentListeningExecutorService>) cast_check(delegate, ComGoogleCommonUtilConcurrentListeningExecutorService_class_()) : ([JavaUtilConcurrentScheduledExecutorService_class_() isInstance:delegate]) ? new_ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_initWithJavaUtilConcurrentScheduledExecutorService_((id<JavaUtilConcurrentScheduledExecutorService>) cast_check(delegate, JavaUtilConcurrentScheduledExecutorService_class_())) : new_ComGoogleCommonUtilConcurrentMoreExecutors_ListeningDecorator_initWithJavaUtilConcurrentExecutorService_(delegate);
}

id<ComGoogleCommonUtilConcurrentListeningScheduledExecutorService> ComGoogleCommonUtilConcurrentMoreExecutors_listeningDecoratorWithJavaUtilConcurrentScheduledExecutorService_(id<JavaUtilConcurrentScheduledExecutorService> delegate) {
  ComGoogleCommonUtilConcurrentMoreExecutors_initialize();
  return ([ComGoogleCommonUtilConcurrentListeningScheduledExecutorService_class_() isInstance:delegate]) ? (id<ComGoogleCommonUtilConcurrentListeningScheduledExecutorService>) cast_check(delegate, ComGoogleCommonUtilConcurrentListeningScheduledExecutorService_class_()) : new_ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_initWithJavaUtilConcurrentScheduledExecutorService_(delegate);
}

id ComGoogleCommonUtilConcurrentMoreExecutors_invokeAnyImplWithComGoogleCommonUtilConcurrentListeningExecutorService_withJavaUtilCollection_withBoolean_withLong_withJavaUtilConcurrentTimeUnit_(id<ComGoogleCommonUtilConcurrentListeningExecutorService> executorService, id<JavaUtilCollection> tasks, jboolean timed, jlong timeout, JavaUtilConcurrentTimeUnit *unit) {
  ComGoogleCommonUtilConcurrentMoreExecutors_initialize();
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(executorService);
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(unit);
  jint ntasks = [((id<JavaUtilCollection>) nil_chk(tasks)) size];
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_(ntasks > 0);
  id<JavaUtilList> futures = ComGoogleCommonCollectLists_newArrayListWithCapacityWithInt_(ntasks);
  id<JavaUtilConcurrentBlockingQueue> futureQueue = ComGoogleCommonCollectQueues_newLinkedBlockingQueue();
  jlong timeoutNanos = [((JavaUtilConcurrentTimeUnit *) nil_chk(unit)) toNanosWithLong:timeout];
  @try {
    JavaUtilConcurrentExecutionException *ee = nil;
    jlong lastTime = timed ? JavaLangSystem_nanoTime() : 0;
    id<JavaUtilIterator> it = [tasks iterator];
    [((id<JavaUtilList>) nil_chk(futures)) addWithId:ComGoogleCommonUtilConcurrentMoreExecutors_submitAndAddQueueListenerWithComGoogleCommonUtilConcurrentListeningExecutorService_withJavaUtilConcurrentCallable_withJavaUtilConcurrentBlockingQueue_(executorService, [((id<JavaUtilIterator>) nil_chk(it)) next], futureQueue)];
    --ntasks;
    jint active = 1;
    while (true) {
      id<JavaUtilConcurrentFuture> f = [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(futureQueue)) poll];
      if (f == nil) {
        if (ntasks > 0) {
          --ntasks;
          [futures addWithId:ComGoogleCommonUtilConcurrentMoreExecutors_submitAndAddQueueListenerWithComGoogleCommonUtilConcurrentListeningExecutorService_withJavaUtilConcurrentCallable_withJavaUtilConcurrentBlockingQueue_(executorService, [it next], futureQueue)];
          ++active;
        }
        else if (active == 0) {
          break;
        }
        else if (timed) {
          f = [futureQueue pollWithLong:timeoutNanos withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, NANOSECONDS)];
          if (f == nil) {
            @throw new_JavaUtilConcurrentTimeoutException_init();
          }
          jlong now = JavaLangSystem_nanoTime();
          timeoutNanos -= now - lastTime;
          lastTime = now;
        }
        else {
          f = [futureQueue take];
        }
      }
      if (f != nil) {
        --active;
        @try {
          return [f get];
        }
        @catch (JavaUtilConcurrentExecutionException *eex) {
          ee = eex;
        }
        @catch (JavaLangRuntimeException *rex) {
          ee = new_JavaUtilConcurrentExecutionException_initWithNSException_(rex);
        }
      }
    }
    if (ee == nil) {
      ee = new_JavaUtilConcurrentExecutionException_initWithNSException_(nil);
    }
    @throw ee;
  }
  @finally {
    for (id<JavaUtilConcurrentFuture> __strong f in nil_chk(futures)) {
      [((id<JavaUtilConcurrentFuture>) nil_chk(f)) cancelWithBoolean:true];
    }
  }
}

id<ComGoogleCommonUtilConcurrentListenableFuture> ComGoogleCommonUtilConcurrentMoreExecutors_submitAndAddQueueListenerWithComGoogleCommonUtilConcurrentListeningExecutorService_withJavaUtilConcurrentCallable_withJavaUtilConcurrentBlockingQueue_(id<ComGoogleCommonUtilConcurrentListeningExecutorService> executorService, id<JavaUtilConcurrentCallable> task, id<JavaUtilConcurrentBlockingQueue> queue) {
  ComGoogleCommonUtilConcurrentMoreExecutors_initialize();
  id<ComGoogleCommonUtilConcurrentListenableFuture> future = [((id<ComGoogleCommonUtilConcurrentListeningExecutorService>) nil_chk(executorService)) submitWithJavaUtilConcurrentCallable:task];
  [((id<ComGoogleCommonUtilConcurrentListenableFuture>) nil_chk(future)) addListenerWithJavaLangRunnable:new_ComGoogleCommonUtilConcurrentMoreExecutors_1_initWithJavaUtilConcurrentBlockingQueue_withComGoogleCommonUtilConcurrentListenableFuture_(queue, future) withJavaUtilConcurrentExecutor:ComGoogleCommonUtilConcurrentMoreExecutors_directExecutor()];
  return future;
}

id<JavaUtilConcurrentThreadFactory> ComGoogleCommonUtilConcurrentMoreExecutors_platformThreadFactory() {
  ComGoogleCommonUtilConcurrentMoreExecutors_initialize();
  if (!ComGoogleCommonUtilConcurrentMoreExecutors_isAppEngine()) {
    return JavaUtilConcurrentExecutors_defaultThreadFactory();
  }
  @try {
    return (id<JavaUtilConcurrentThreadFactory>) cast_check([((JavaLangReflectMethod *) nil_chk([((IOSClass *) nil_chk(IOSClass_forName_(@"com.google.appengine.api.ThreadManager"))) getMethod:@"currentRequestThreadFactory" parameterTypes:[IOSObjectArray newArrayWithLength:0 type:IOSClass_class_()]])) invokeWithId:nil withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]], JavaUtilConcurrentThreadFactory_class_());
  }
  @catch (JavaLangIllegalAccessException *e) {
    @throw new_JavaLangRuntimeException_initWithNSString_withNSException_(@"Couldn't invoke ThreadManager.currentRequestThreadFactory", e);
  }
  @catch (JavaLangClassNotFoundException *e) {
    @throw new_JavaLangRuntimeException_initWithNSString_withNSException_(@"Couldn't invoke ThreadManager.currentRequestThreadFactory", e);
  }
  @catch (JavaLangNoSuchMethodException *e) {
    @throw new_JavaLangRuntimeException_initWithNSString_withNSException_(@"Couldn't invoke ThreadManager.currentRequestThreadFactory", e);
  }
  @catch (JavaLangReflectInvocationTargetException *e) {
    @throw nil_chk(ComGoogleCommonBaseThrowables_propagateWithNSException_([e getCause]));
  }
}

jboolean ComGoogleCommonUtilConcurrentMoreExecutors_isAppEngine() {
  ComGoogleCommonUtilConcurrentMoreExecutors_initialize();
  if (JavaLangSystem_getPropertyWithNSString_(@"com.google.appengine.runtime.environment") == nil) {
    return false;
  }
  @try {
    return [((JavaLangReflectMethod *) nil_chk([((IOSClass *) nil_chk(IOSClass_forName_(@"com.google.apphosting.api.ApiProxy"))) getMethod:@"getCurrentEnvironment" parameterTypes:[IOSObjectArray newArrayWithLength:0 type:IOSClass_class_()]])) invokeWithId:nil withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]] != nil;
  }
  @catch (JavaLangClassNotFoundException *e) {
    return false;
  }
  @catch (JavaLangReflectInvocationTargetException *e) {
    return false;
  }
  @catch (JavaLangIllegalAccessException *e) {
    return false;
  }
  @catch (JavaLangNoSuchMethodException *e) {
    return false;
  }
}

JavaLangThread *ComGoogleCommonUtilConcurrentMoreExecutors_newThreadWithNSString_withJavaLangRunnable_(NSString *name, id<JavaLangRunnable> runnable) {
  ComGoogleCommonUtilConcurrentMoreExecutors_initialize();
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(name);
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(runnable);
  JavaLangThread *result = [((id<JavaUtilConcurrentThreadFactory>) nil_chk(ComGoogleCommonUtilConcurrentMoreExecutors_platformThreadFactory())) newThreadWithJavaLangRunnable:runnable];
  @try {
    [((JavaLangThread *) nil_chk(result)) setNameWithNSString:name];
  }
  @catch (JavaLangSecurityException *e) {
  }
  return result;
}

id<JavaUtilConcurrentExecutor> ComGoogleCommonUtilConcurrentMoreExecutors_renamingDecoratorWithJavaUtilConcurrentExecutor_withComGoogleCommonBaseSupplier_(id<JavaUtilConcurrentExecutor> executor, id<ComGoogleCommonBaseSupplier> nameSupplier) {
  ComGoogleCommonUtilConcurrentMoreExecutors_initialize();
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(executor);
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(nameSupplier);
  if (ComGoogleCommonUtilConcurrentMoreExecutors_isAppEngine()) {
    return executor;
  }
  return new_ComGoogleCommonUtilConcurrentMoreExecutors_2_initWithJavaUtilConcurrentExecutor_withComGoogleCommonBaseSupplier_(executor, nameSupplier);
}

id<JavaUtilConcurrentExecutorService> ComGoogleCommonUtilConcurrentMoreExecutors_renamingDecoratorWithJavaUtilConcurrentExecutorService_withComGoogleCommonBaseSupplier_(id<JavaUtilConcurrentExecutorService> service, id<ComGoogleCommonBaseSupplier> nameSupplier) {
  ComGoogleCommonUtilConcurrentMoreExecutors_initialize();
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(service);
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(nameSupplier);
  if (ComGoogleCommonUtilConcurrentMoreExecutors_isAppEngine()) {
    return service;
  }
  return new_ComGoogleCommonUtilConcurrentMoreExecutors_3_initWithComGoogleCommonBaseSupplier_withJavaUtilConcurrentExecutorService_(nameSupplier, service);
}

id<JavaUtilConcurrentScheduledExecutorService> ComGoogleCommonUtilConcurrentMoreExecutors_renamingDecoratorWithJavaUtilConcurrentScheduledExecutorService_withComGoogleCommonBaseSupplier_(id<JavaUtilConcurrentScheduledExecutorService> service, id<ComGoogleCommonBaseSupplier> nameSupplier) {
  ComGoogleCommonUtilConcurrentMoreExecutors_initialize();
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(service);
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(nameSupplier);
  if (ComGoogleCommonUtilConcurrentMoreExecutors_isAppEngine()) {
    return service;
  }
  return new_ComGoogleCommonUtilConcurrentMoreExecutors_4_initWithComGoogleCommonBaseSupplier_withJavaUtilConcurrentScheduledExecutorService_(nameSupplier, service);
}

jboolean ComGoogleCommonUtilConcurrentMoreExecutors_shutdownAndAwaitTerminationWithJavaUtilConcurrentExecutorService_withLong_withJavaUtilConcurrentTimeUnit_(id<JavaUtilConcurrentExecutorService> service, jlong timeout, JavaUtilConcurrentTimeUnit *unit) {
  ComGoogleCommonUtilConcurrentMoreExecutors_initialize();
  jlong halfTimeoutNanos = [((JavaUtilConcurrentTimeUnit *) nil_chk(unit)) toNanosWithLong:timeout] / 2;
  [((id<JavaUtilConcurrentExecutorService>) nil_chk(service)) shutdown];
  @try {
    if (![service awaitTerminationWithLong:halfTimeoutNanos withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, NANOSECONDS)]) {
      (void) [service shutdownNow];
      [service awaitTerminationWithLong:halfTimeoutNanos withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, NANOSECONDS)];
    }
  }
  @catch (JavaLangInterruptedException *ie) {
    [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) interrupt];
    (void) [service shutdownNow];
  }
  return [service isTerminated];
}

id<JavaUtilConcurrentExecutor> ComGoogleCommonUtilConcurrentMoreExecutors_rejectionPropagatingExecutorWithJavaUtilConcurrentExecutor_withComGoogleCommonUtilConcurrentAbstractFuture_(id<JavaUtilConcurrentExecutor> delegate, ComGoogleCommonUtilConcurrentAbstractFuture *future) {
  ComGoogleCommonUtilConcurrentMoreExecutors_initialize();
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(delegate);
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(future);
  if (delegate == ComGoogleCommonUtilConcurrentMoreExecutors_directExecutor()) {
    return delegate;
  }
  return new_ComGoogleCommonUtilConcurrentMoreExecutors_5_initWithJavaUtilConcurrentExecutor_withComGoogleCommonUtilConcurrentAbstractFuture_(delegate, future);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentMoreExecutors)

@implementation ComGoogleCommonUtilConcurrentMoreExecutors_Application

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentMoreExecutors_Application_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilConcurrentExecutorService>)getExitingExecutorServiceWithJavaUtilConcurrentThreadPoolExecutor:(JavaUtilConcurrentThreadPoolExecutor *)executor
                                                                                                  withLong:(jlong)terminationTimeout
                                                                            withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)timeUnit {
  return ComGoogleCommonUtilConcurrentMoreExecutors_Application_getExitingExecutorServiceWithJavaUtilConcurrentThreadPoolExecutor_withLong_withJavaUtilConcurrentTimeUnit_(self, executor, terminationTimeout, timeUnit);
}

- (id<JavaUtilConcurrentScheduledExecutorService>)getExitingScheduledExecutorServiceWithJavaUtilConcurrentScheduledThreadPoolExecutor:(JavaUtilConcurrentScheduledThreadPoolExecutor *)executor
                                                                                                                             withLong:(jlong)terminationTimeout
                                                                                                       withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)timeUnit {
  return ComGoogleCommonUtilConcurrentMoreExecutors_Application_getExitingScheduledExecutorServiceWithJavaUtilConcurrentScheduledThreadPoolExecutor_withLong_withJavaUtilConcurrentTimeUnit_(self, executor, terminationTimeout, timeUnit);
}

- (void)addDelayedShutdownHookWithJavaUtilConcurrentExecutorService:(id<JavaUtilConcurrentExecutorService>)service
                                                           withLong:(jlong)terminationTimeout
                                     withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)timeUnit {
  ComGoogleCommonUtilConcurrentMoreExecutors_Application_addDelayedShutdownHookWithJavaUtilConcurrentExecutorService_withLong_withJavaUtilConcurrentTimeUnit_(self, service, terminationTimeout, timeUnit);
}

- (id<JavaUtilConcurrentExecutorService>)getExitingExecutorServiceWithJavaUtilConcurrentThreadPoolExecutor:(JavaUtilConcurrentThreadPoolExecutor *)executor {
  return ComGoogleCommonUtilConcurrentMoreExecutors_Application_getExitingExecutorServiceWithJavaUtilConcurrentThreadPoolExecutor_(self, executor);
}

- (id<JavaUtilConcurrentScheduledExecutorService>)getExitingScheduledExecutorServiceWithJavaUtilConcurrentScheduledThreadPoolExecutor:(JavaUtilConcurrentScheduledThreadPoolExecutor *)executor {
  return ComGoogleCommonUtilConcurrentMoreExecutors_Application_getExitingScheduledExecutorServiceWithJavaUtilConcurrentScheduledThreadPoolExecutor_(self, executor);
}

- (void)addShutdownHookWithJavaLangThread:(JavaLangThread *)hook {
  [((JavaLangRuntime *) nil_chk(JavaLangRuntime_getRuntime())) addShutdownHookWithJavaLangThread:hook];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentExecutorService;", 0x10, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentScheduledExecutorService;", 0x10, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x10, 4, 5, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentExecutorService;", 0x10, 0, 6, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentScheduledExecutorService;", 0x10, 2, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getExitingExecutorServiceWithJavaUtilConcurrentThreadPoolExecutor:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[2].selector = @selector(getExitingScheduledExecutorServiceWithJavaUtilConcurrentScheduledThreadPoolExecutor:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[3].selector = @selector(addDelayedShutdownHookWithJavaUtilConcurrentExecutorService:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[4].selector = @selector(getExitingExecutorServiceWithJavaUtilConcurrentThreadPoolExecutor:);
  methods[5].selector = @selector(getExitingScheduledExecutorServiceWithJavaUtilConcurrentScheduledThreadPoolExecutor:);
  methods[6].selector = @selector(addShutdownHookWithJavaLangThread:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getExitingExecutorService", "LJavaUtilConcurrentThreadPoolExecutor;JLJavaUtilConcurrentTimeUnit;", "getExitingScheduledExecutorService", "LJavaUtilConcurrentScheduledThreadPoolExecutor;JLJavaUtilConcurrentTimeUnit;", "addDelayedShutdownHook", "LJavaUtilConcurrentExecutorService;JLJavaUtilConcurrentTimeUnit;", "LJavaUtilConcurrentThreadPoolExecutor;", "LJavaUtilConcurrentScheduledThreadPoolExecutor;", "addShutdownHook", "LJavaLangThread;", "LComGoogleCommonUtilConcurrentMoreExecutors;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentMoreExecutors_Application = { "Application", "com.google.common.util.concurrent", ptrTable, methods, NULL, 7, 0x8, 7, 0, 10, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentMoreExecutors_Application;
}

@end

void ComGoogleCommonUtilConcurrentMoreExecutors_Application_init(ComGoogleCommonUtilConcurrentMoreExecutors_Application *self) {
  NSObject_init(self);
}

ComGoogleCommonUtilConcurrentMoreExecutors_Application *new_ComGoogleCommonUtilConcurrentMoreExecutors_Application_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentMoreExecutors_Application, init)
}

ComGoogleCommonUtilConcurrentMoreExecutors_Application *create_ComGoogleCommonUtilConcurrentMoreExecutors_Application_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentMoreExecutors_Application, init)
}

id<JavaUtilConcurrentExecutorService> ComGoogleCommonUtilConcurrentMoreExecutors_Application_getExitingExecutorServiceWithJavaUtilConcurrentThreadPoolExecutor_withLong_withJavaUtilConcurrentTimeUnit_(ComGoogleCommonUtilConcurrentMoreExecutors_Application *self, JavaUtilConcurrentThreadPoolExecutor *executor, jlong terminationTimeout, JavaUtilConcurrentTimeUnit *timeUnit) {
  ComGoogleCommonUtilConcurrentMoreExecutors_useDaemonThreadFactoryWithJavaUtilConcurrentThreadPoolExecutor_(executor);
  id<JavaUtilConcurrentExecutorService> service = JavaUtilConcurrentExecutors_unconfigurableExecutorServiceWithJavaUtilConcurrentExecutorService_(executor);
  ComGoogleCommonUtilConcurrentMoreExecutors_Application_addDelayedShutdownHookWithJavaUtilConcurrentExecutorService_withLong_withJavaUtilConcurrentTimeUnit_(self, service, terminationTimeout, timeUnit);
  return service;
}

id<JavaUtilConcurrentScheduledExecutorService> ComGoogleCommonUtilConcurrentMoreExecutors_Application_getExitingScheduledExecutorServiceWithJavaUtilConcurrentScheduledThreadPoolExecutor_withLong_withJavaUtilConcurrentTimeUnit_(ComGoogleCommonUtilConcurrentMoreExecutors_Application *self, JavaUtilConcurrentScheduledThreadPoolExecutor *executor, jlong terminationTimeout, JavaUtilConcurrentTimeUnit *timeUnit) {
  ComGoogleCommonUtilConcurrentMoreExecutors_useDaemonThreadFactoryWithJavaUtilConcurrentThreadPoolExecutor_(executor);
  id<JavaUtilConcurrentScheduledExecutorService> service = JavaUtilConcurrentExecutors_unconfigurableScheduledExecutorServiceWithJavaUtilConcurrentScheduledExecutorService_(executor);
  ComGoogleCommonUtilConcurrentMoreExecutors_Application_addDelayedShutdownHookWithJavaUtilConcurrentExecutorService_withLong_withJavaUtilConcurrentTimeUnit_(self, service, terminationTimeout, timeUnit);
  return service;
}

void ComGoogleCommonUtilConcurrentMoreExecutors_Application_addDelayedShutdownHookWithJavaUtilConcurrentExecutorService_withLong_withJavaUtilConcurrentTimeUnit_(ComGoogleCommonUtilConcurrentMoreExecutors_Application *self, id<JavaUtilConcurrentExecutorService> service, jlong terminationTimeout, JavaUtilConcurrentTimeUnit *timeUnit) {
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(service);
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(timeUnit);
  [self addShutdownHookWithJavaLangThread:ComGoogleCommonUtilConcurrentMoreExecutors_newThreadWithNSString_withJavaLangRunnable_(JreStrcat("$@", @"DelayedShutdownHook-for-", service), new_ComGoogleCommonUtilConcurrentMoreExecutors_Application_1_initWithJavaUtilConcurrentExecutorService_withLong_withJavaUtilConcurrentTimeUnit_(service, terminationTimeout, timeUnit))];
}

id<JavaUtilConcurrentExecutorService> ComGoogleCommonUtilConcurrentMoreExecutors_Application_getExitingExecutorServiceWithJavaUtilConcurrentThreadPoolExecutor_(ComGoogleCommonUtilConcurrentMoreExecutors_Application *self, JavaUtilConcurrentThreadPoolExecutor *executor) {
  return ComGoogleCommonUtilConcurrentMoreExecutors_Application_getExitingExecutorServiceWithJavaUtilConcurrentThreadPoolExecutor_withLong_withJavaUtilConcurrentTimeUnit_(self, executor, 120, JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS));
}

id<JavaUtilConcurrentScheduledExecutorService> ComGoogleCommonUtilConcurrentMoreExecutors_Application_getExitingScheduledExecutorServiceWithJavaUtilConcurrentScheduledThreadPoolExecutor_(ComGoogleCommonUtilConcurrentMoreExecutors_Application *self, JavaUtilConcurrentScheduledThreadPoolExecutor *executor) {
  return ComGoogleCommonUtilConcurrentMoreExecutors_Application_getExitingScheduledExecutorServiceWithJavaUtilConcurrentScheduledThreadPoolExecutor_withLong_withJavaUtilConcurrentTimeUnit_(self, executor, 120, JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentMoreExecutors_Application)

@implementation ComGoogleCommonUtilConcurrentMoreExecutors_Application_1

- (instancetype)initWithJavaUtilConcurrentExecutorService:(id<JavaUtilConcurrentExecutorService>)capture$0
                                                 withLong:(jlong)capture$1
                           withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)capture$2 {
  ComGoogleCommonUtilConcurrentMoreExecutors_Application_1_initWithJavaUtilConcurrentExecutorService_withLong_withJavaUtilConcurrentTimeUnit_(self, capture$0, capture$1, capture$2);
  return self;
}

- (void)run {
  @try {
    [((id<JavaUtilConcurrentExecutorService>) nil_chk(val$service_)) shutdown];
    [val$service_ awaitTerminationWithLong:val$terminationTimeout_ withJavaUtilConcurrentTimeUnit:val$timeUnit_];
  }
  @catch (JavaLangInterruptedException *ignored) {
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentExecutorService:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$service_", "LJavaUtilConcurrentExecutorService;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$terminationTimeout_", "J", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$timeUnit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentMoreExecutors_Application;", "addDelayedShutdownHookWithJavaUtilConcurrentExecutorService:withLong:withJavaUtilConcurrentTimeUnit:" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentMoreExecutors_Application_1 = { "", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x8018, 2, 3, 0, -1, 1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentMoreExecutors_Application_1;
}

@end

void ComGoogleCommonUtilConcurrentMoreExecutors_Application_1_initWithJavaUtilConcurrentExecutorService_withLong_withJavaUtilConcurrentTimeUnit_(ComGoogleCommonUtilConcurrentMoreExecutors_Application_1 *self, id<JavaUtilConcurrentExecutorService> capture$0, jlong capture$1, JavaUtilConcurrentTimeUnit *capture$2) {
  self->val$service_ = capture$0;
  self->val$terminationTimeout_ = capture$1;
  self->val$timeUnit_ = capture$2;
  NSObject_init(self);
}

ComGoogleCommonUtilConcurrentMoreExecutors_Application_1 *new_ComGoogleCommonUtilConcurrentMoreExecutors_Application_1_initWithJavaUtilConcurrentExecutorService_withLong_withJavaUtilConcurrentTimeUnit_(id<JavaUtilConcurrentExecutorService> capture$0, jlong capture$1, JavaUtilConcurrentTimeUnit *capture$2) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentMoreExecutors_Application_1, initWithJavaUtilConcurrentExecutorService_withLong_withJavaUtilConcurrentTimeUnit_, capture$0, capture$1, capture$2)
}

ComGoogleCommonUtilConcurrentMoreExecutors_Application_1 *create_ComGoogleCommonUtilConcurrentMoreExecutors_Application_1_initWithJavaUtilConcurrentExecutorService_withLong_withJavaUtilConcurrentTimeUnit_(id<JavaUtilConcurrentExecutorService> capture$0, jlong capture$1, JavaUtilConcurrentTimeUnit *capture$2) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentMoreExecutors_Application_1, initWithJavaUtilConcurrentExecutorService_withLong_withJavaUtilConcurrentTimeUnit_, capture$0, capture$1, capture$2)
}

@implementation ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutorService

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutorService_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)executeWithJavaLangRunnable:(id<JavaLangRunnable>)command {
  ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutorService_startTask(self);
  @try {
    [((id<JavaLangRunnable>) nil_chk(command)) run];
  }
  @finally {
    ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutorService_endTask(self);
  }
}

- (jboolean)isShutdown {
  @synchronized(lock_) {
    return shutdown_;
  }
}

- (void)shutdown {
  @synchronized(lock_) {
    shutdown_ = true;
    if (runningTasks_ == 0) {
      [nil_chk(lock_) java_notifyAll];
    }
  }
}

- (id<JavaUtilList>)shutdownNow {
  [self shutdown];
  return JavaUtilCollections_emptyList();
}

- (jboolean)isTerminated {
  @synchronized(lock_) {
    return shutdown_ && runningTasks_ == 0;
  }
}

- (jboolean)awaitTerminationWithLong:(jlong)timeout
      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  jlong nanos = [((JavaUtilConcurrentTimeUnit *) nil_chk(unit)) toNanosWithLong:timeout];
  @synchronized(lock_) {
    while (true) {
      if (shutdown_ && runningTasks_ == 0) {
        return true;
      }
      else if (nanos <= 0) {
        return false;
      }
      else {
        jlong now = JavaLangSystem_nanoTime();
        [((JavaUtilConcurrentTimeUnit *) nil_chk(JreLoadEnum(JavaUtilConcurrentTimeUnit, NANOSECONDS))) timedWaitWithId:lock_ withLong:nanos];
        nanos -= JavaLangSystem_nanoTime() - now;
      }
    }
  }
}

- (void)startTask {
  ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutorService_startTask(self);
}

- (void)endTask {
  ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutorService_endTask(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, 5, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(executeWithJavaLangRunnable:);
  methods[2].selector = @selector(isShutdown);
  methods[3].selector = @selector(shutdown);
  methods[4].selector = @selector(shutdownNow);
  methods[5].selector = @selector(isTerminated);
  methods[6].selector = @selector(awaitTerminationWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[7].selector = @selector(startTask);
  methods[8].selector = @selector(endTask);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "lock_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "runningTasks_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "shutdown_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "execute", "LJavaLangRunnable;", "()Ljava/util/List<Ljava/lang/Runnable;>;", "awaitTermination", "JLJavaUtilConcurrentTimeUnit;", "LJavaLangInterruptedException;", "LComGoogleCommonUtilConcurrentMoreExecutors;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutorService = { "DirectExecutorService", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x1a, 9, 3, 6, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutorService;
}

@end

void ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutorService_init(ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutorService *self) {
  ComGoogleCommonUtilConcurrentAbstractListeningExecutorService_init(self);
  self->lock_ = new_NSObject_init();
  self->runningTasks_ = 0;
  self->shutdown_ = false;
}

ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutorService *new_ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutorService_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutorService, init)
}

ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutorService *create_ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutorService_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutorService, init)
}

void ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutorService_startTask(ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutorService *self) {
  @synchronized(self->lock_) {
    if (self->shutdown_) {
      @throw new_JavaUtilConcurrentRejectedExecutionException_initWithNSString_(@"Executor already shutdown");
    }
    self->runningTasks_++;
  }
}

void ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutorService_endTask(ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutorService *self) {
  @synchronized(self->lock_) {
    jint numRunning = --self->runningTasks_;
    if (numRunning == 0) {
      [nil_chk(self->lock_) java_notifyAll];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutorService)

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor)

ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor *ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor_values_[1];

@implementation ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor

- (void)executeWithJavaLangRunnable:(id<JavaLangRunnable>)command {
  [((id<JavaLangRunnable>) nil_chk(command)) run];
}

- (NSString *)description {
  return @"MoreExecutors.directExecutor()";
}

+ (IOSObjectArray *)values {
  return ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor_values();
}

+ (ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor *)valueOfWithNSString:(NSString *)name {
  return ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
    { NULL, "[LComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor;", 0x9, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(executeWithJavaLangRunnable:);
  methods[1].selector = @selector(description);
  methods[2].selector = @selector(values);
  methods[3].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "execute", "LJavaLangRunnable;", "toString", "valueOf", "LNSString;", &JreEnum(ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor, INSTANCE), "LComGoogleCommonUtilConcurrentMoreExecutors;", "Ljava/lang/Enum<Lcom/google/common/util/concurrent/MoreExecutors$DirectExecutor;>;Ljava/util/concurrent/Executor;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor = { "DirectExecutor", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x401a, 4, 1, 6, -1, -1, 7, -1 };
  return &_ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor;
}

+ (void)initialize {
  if (self == [ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor class]) {
    JreEnum(ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor, INSTANCE) = new_ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor_initWithNSString_withInt_(@"INSTANCE", 0);
    J2OBJC_SET_INITIALIZED(ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor)
  }
}

@end

void ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor_initWithNSString_withInt_(ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor *new_ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor_values() {
  ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor_initialize();
  return [IOSObjectArray arrayWithObjects:ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor_values_ count:1 type:ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor_class_()];
}

ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor *ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor_valueOfWithNSString_(NSString *name) {
  ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor_initialize();
  for (int i = 0; i < 1; i++) {
    ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor *e = ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor *ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor_fromOrdinal(NSUInteger ordinal) {
  ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor_initialize();
  if (ordinal >= 1) {
    return nil;
  }
  return ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentMoreExecutors_DirectExecutor)

@implementation ComGoogleCommonUtilConcurrentMoreExecutors_ListeningDecorator

- (instancetype)initWithJavaUtilConcurrentExecutorService:(id<JavaUtilConcurrentExecutorService>)delegate {
  ComGoogleCommonUtilConcurrentMoreExecutors_ListeningDecorator_initWithJavaUtilConcurrentExecutorService_(self, delegate);
  return self;
}

- (jboolean)awaitTerminationWithLong:(jlong)timeout
      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return [((id<JavaUtilConcurrentExecutorService>) nil_chk(delegate_)) awaitTerminationWithLong:timeout withJavaUtilConcurrentTimeUnit:unit];
}

- (jboolean)isShutdown {
  return [((id<JavaUtilConcurrentExecutorService>) nil_chk(delegate_)) isShutdown];
}

- (jboolean)isTerminated {
  return [((id<JavaUtilConcurrentExecutorService>) nil_chk(delegate_)) isTerminated];
}

- (void)shutdown {
  [((id<JavaUtilConcurrentExecutorService>) nil_chk(delegate_)) shutdown];
}

- (id<JavaUtilList>)shutdownNow {
  return [((id<JavaUtilConcurrentExecutorService>) nil_chk(delegate_)) shutdownNow];
}

- (void)executeWithJavaLangRunnable:(id<JavaLangRunnable>)command {
  [((id<JavaUtilConcurrentExecutorService>) nil_chk(delegate_)) executeWithJavaLangRunnable:command];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 1, 2, 3, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x11, -1, -1, -1, 4, -1, -1 },
    { NULL, "V", 0x11, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentExecutorService:);
  methods[1].selector = @selector(awaitTerminationWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[2].selector = @selector(isShutdown);
  methods[3].selector = @selector(isTerminated);
  methods[4].selector = @selector(shutdown);
  methods[5].selector = @selector(shutdownNow);
  methods[6].selector = @selector(executeWithJavaLangRunnable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "delegate_", "LJavaUtilConcurrentExecutorService;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentExecutorService;", "awaitTermination", "JLJavaUtilConcurrentTimeUnit;", "LJavaLangInterruptedException;", "()Ljava/util/List<Ljava/lang/Runnable;>;", "execute", "LJavaLangRunnable;", "LComGoogleCommonUtilConcurrentMoreExecutors;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentMoreExecutors_ListeningDecorator = { "ListeningDecorator", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0xa, 7, 1, 7, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentMoreExecutors_ListeningDecorator;
}

@end

void ComGoogleCommonUtilConcurrentMoreExecutors_ListeningDecorator_initWithJavaUtilConcurrentExecutorService_(ComGoogleCommonUtilConcurrentMoreExecutors_ListeningDecorator *self, id<JavaUtilConcurrentExecutorService> delegate) {
  ComGoogleCommonUtilConcurrentAbstractListeningExecutorService_init(self);
  self->delegate_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(delegate);
}

ComGoogleCommonUtilConcurrentMoreExecutors_ListeningDecorator *new_ComGoogleCommonUtilConcurrentMoreExecutors_ListeningDecorator_initWithJavaUtilConcurrentExecutorService_(id<JavaUtilConcurrentExecutorService> delegate) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentMoreExecutors_ListeningDecorator, initWithJavaUtilConcurrentExecutorService_, delegate)
}

ComGoogleCommonUtilConcurrentMoreExecutors_ListeningDecorator *create_ComGoogleCommonUtilConcurrentMoreExecutors_ListeningDecorator_initWithJavaUtilConcurrentExecutorService_(id<JavaUtilConcurrentExecutorService> delegate) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentMoreExecutors_ListeningDecorator, initWithJavaUtilConcurrentExecutorService_, delegate)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentMoreExecutors_ListeningDecorator)

@implementation ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator

- (instancetype)initWithJavaUtilConcurrentScheduledExecutorService:(id<JavaUtilConcurrentScheduledExecutorService>)delegate {
  ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_initWithJavaUtilConcurrentScheduledExecutorService_(self, delegate);
  return self;
}

- (id<ComGoogleCommonUtilConcurrentListenableScheduledFuture>)scheduleWithJavaLangRunnable:(id<JavaLangRunnable>)command
                                                                                  withLong:(jlong)delay
                                                            withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  ComGoogleCommonUtilConcurrentTrustedListenableFutureTask *task = ComGoogleCommonUtilConcurrentTrustedListenableFutureTask_createWithJavaLangRunnable_withId_(command, nil);
  id<JavaUtilConcurrentScheduledFuture> scheduled = [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(delegate_ScheduledListeningDecorator_)) scheduleWithJavaLangRunnable:task withLong:delay withJavaUtilConcurrentTimeUnit:unit];
  return new_ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_ListenableScheduledTask_initWithComGoogleCommonUtilConcurrentListenableFuture_withJavaUtilConcurrentScheduledFuture_(task, scheduled);
}

- (id<ComGoogleCommonUtilConcurrentListenableScheduledFuture>)scheduleWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable
                                                                                            withLong:(jlong)delay
                                                                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  ComGoogleCommonUtilConcurrentTrustedListenableFutureTask *task = ComGoogleCommonUtilConcurrentTrustedListenableFutureTask_createWithJavaUtilConcurrentCallable_(callable);
  id<JavaUtilConcurrentScheduledFuture> scheduled = [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(delegate_ScheduledListeningDecorator_)) scheduleWithJavaLangRunnable:task withLong:delay withJavaUtilConcurrentTimeUnit:unit];
  return new_ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_ListenableScheduledTask_initWithComGoogleCommonUtilConcurrentListenableFuture_withJavaUtilConcurrentScheduledFuture_(task, scheduled);
}

- (id<ComGoogleCommonUtilConcurrentListenableScheduledFuture>)scheduleAtFixedRateWithJavaLangRunnable:(id<JavaLangRunnable>)command
                                                                                             withLong:(jlong)initialDelay
                                                                                             withLong:(jlong)period
                                                                       withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_NeverSuccessfulListenableFutureTask *task = new_ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_NeverSuccessfulListenableFutureTask_initWithJavaLangRunnable_(command);
  id<JavaUtilConcurrentScheduledFuture> scheduled = [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(delegate_ScheduledListeningDecorator_)) scheduleAtFixedRateWithJavaLangRunnable:task withLong:initialDelay withLong:period withJavaUtilConcurrentTimeUnit:unit];
  return new_ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_ListenableScheduledTask_initWithComGoogleCommonUtilConcurrentListenableFuture_withJavaUtilConcurrentScheduledFuture_(task, scheduled);
}

- (id<ComGoogleCommonUtilConcurrentListenableScheduledFuture>)scheduleWithFixedDelayWithJavaLangRunnable:(id<JavaLangRunnable>)command
                                                                                                withLong:(jlong)initialDelay
                                                                                                withLong:(jlong)delay
                                                                          withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_NeverSuccessfulListenableFutureTask *task = new_ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_NeverSuccessfulListenableFutureTask_initWithJavaLangRunnable_(command);
  id<JavaUtilConcurrentScheduledFuture> scheduled = [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(delegate_ScheduledListeningDecorator_)) scheduleWithFixedDelayWithJavaLangRunnable:task withLong:initialDelay withLong:delay withJavaUtilConcurrentTimeUnit:unit];
  return new_ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_ListenableScheduledTask_initWithComGoogleCommonUtilConcurrentListenableFuture_withJavaUtilConcurrentScheduledFuture_(task, scheduled);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentListenableScheduledFuture;", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentListenableScheduledFuture;", 0x1, 1, 4, -1, 5, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentListenableScheduledFuture;", 0x1, 6, 7, -1, 8, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentListenableScheduledFuture;", 0x1, 9, 7, -1, 8, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentScheduledExecutorService:);
  methods[1].selector = @selector(scheduleWithJavaLangRunnable:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[2].selector = @selector(scheduleWithJavaUtilConcurrentCallable:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[3].selector = @selector(scheduleAtFixedRateWithJavaLangRunnable:withLong:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[4].selector = @selector(scheduleWithFixedDelayWithJavaLangRunnable:withLong:withLong:withJavaUtilConcurrentTimeUnit:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "delegate_ScheduledListeningDecorator_", "LJavaUtilConcurrentScheduledExecutorService;", .constantValue.asLong = 0, 0x10, 10, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentScheduledExecutorService;", "schedule", "LJavaLangRunnable;JLJavaUtilConcurrentTimeUnit;", "(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lcom/google/common/util/concurrent/ListenableScheduledFuture<*>;", "LJavaUtilConcurrentCallable;JLJavaUtilConcurrentTimeUnit;", "<V:Ljava/lang/Object;>(Ljava/util/concurrent/Callable<TV;>;JLjava/util/concurrent/TimeUnit;)Lcom/google/common/util/concurrent/ListenableScheduledFuture<TV;>;", "scheduleAtFixedRate", "LJavaLangRunnable;JJLJavaUtilConcurrentTimeUnit;", "(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lcom/google/common/util/concurrent/ListenableScheduledFuture<*>;", "scheduleWithFixedDelay", "delegate", "LComGoogleCommonUtilConcurrentMoreExecutors;", "LComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_ListenableScheduledTask;LComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_NeverSuccessfulListenableFutureTask;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator = { "ScheduledListeningDecorator", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x1a, 5, 1, 11, 12, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator;
}

@end

void ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_initWithJavaUtilConcurrentScheduledExecutorService_(ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator *self, id<JavaUtilConcurrentScheduledExecutorService> delegate) {
  ComGoogleCommonUtilConcurrentMoreExecutors_ListeningDecorator_initWithJavaUtilConcurrentExecutorService_(self, delegate);
  self->delegate_ScheduledListeningDecorator_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(delegate);
}

ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator *new_ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_initWithJavaUtilConcurrentScheduledExecutorService_(id<JavaUtilConcurrentScheduledExecutorService> delegate) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator, initWithJavaUtilConcurrentScheduledExecutorService_, delegate)
}

ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator *create_ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_initWithJavaUtilConcurrentScheduledExecutorService_(id<JavaUtilConcurrentScheduledExecutorService> delegate) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator, initWithJavaUtilConcurrentScheduledExecutorService_, delegate)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator)

@implementation ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_ListenableScheduledTask

- (instancetype)initWithComGoogleCommonUtilConcurrentListenableFuture:(id<ComGoogleCommonUtilConcurrentListenableFuture>)listenableDelegate
                                withJavaUtilConcurrentScheduledFuture:(id<JavaUtilConcurrentScheduledFuture>)scheduledDelegate {
  ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_ListenableScheduledTask_initWithComGoogleCommonUtilConcurrentListenableFuture_withJavaUtilConcurrentScheduledFuture_(self, listenableDelegate, scheduledDelegate);
  return self;
}

- (jboolean)cancelWithBoolean:(jboolean)mayInterruptIfRunning {
  jboolean cancelled = [super cancelWithBoolean:mayInterruptIfRunning];
  if (cancelled) {
    [((id<JavaUtilConcurrentScheduledFuture>) nil_chk(scheduledDelegate_)) cancelWithBoolean:mayInterruptIfRunning];
  }
  return cancelled;
}

- (jlong)getDelayWithJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return [((id<JavaUtilConcurrentScheduledFuture>) nil_chk(scheduledDelegate_)) getDelayWithJavaUtilConcurrentTimeUnit:unit];
}

- (jint)compareToWithId:(id<JavaUtilConcurrentDelayed>)other {
  return [((id<JavaUtilConcurrentScheduledFuture>) nil_chk(scheduledDelegate_)) compareToWithId:other];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentListenableFuture:withJavaUtilConcurrentScheduledFuture:);
  methods[1].selector = @selector(cancelWithBoolean:);
  methods[2].selector = @selector(getDelayWithJavaUtilConcurrentTimeUnit:);
  methods[3].selector = @selector(compareToWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "scheduledDelegate_", "LJavaUtilConcurrentScheduledFuture;", .constantValue.asLong = 0, 0x12, -1, -1, 8, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentListenableFuture;LJavaUtilConcurrentScheduledFuture;", "(Lcom/google/common/util/concurrent/ListenableFuture<TV;>;Ljava/util/concurrent/ScheduledFuture<*>;)V", "cancel", "Z", "getDelay", "LJavaUtilConcurrentTimeUnit;", "compareTo", "LJavaUtilConcurrentDelayed;", "Ljava/util/concurrent/ScheduledFuture<*>;", "LComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator;", "<V:Ljava/lang/Object;>Lcom/google/common/util/concurrent/ForwardingListenableFuture$SimpleForwardingListenableFuture<TV;>;Lcom/google/common/util/concurrent/ListenableScheduledFuture<TV;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_ListenableScheduledTask = { "ListenableScheduledTask", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x1a, 4, 1, 9, -1, -1, 10, -1 };
  return &_ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_ListenableScheduledTask;
}

@end

void ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_ListenableScheduledTask_initWithComGoogleCommonUtilConcurrentListenableFuture_withJavaUtilConcurrentScheduledFuture_(ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_ListenableScheduledTask *self, id<ComGoogleCommonUtilConcurrentListenableFuture> listenableDelegate, id<JavaUtilConcurrentScheduledFuture> scheduledDelegate) {
  ComGoogleCommonUtilConcurrentForwardingListenableFuture_SimpleForwardingListenableFuture_initWithComGoogleCommonUtilConcurrentListenableFuture_(self, listenableDelegate);
  self->scheduledDelegate_ = scheduledDelegate;
}

ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_ListenableScheduledTask *new_ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_ListenableScheduledTask_initWithComGoogleCommonUtilConcurrentListenableFuture_withJavaUtilConcurrentScheduledFuture_(id<ComGoogleCommonUtilConcurrentListenableFuture> listenableDelegate, id<JavaUtilConcurrentScheduledFuture> scheduledDelegate) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_ListenableScheduledTask, initWithComGoogleCommonUtilConcurrentListenableFuture_withJavaUtilConcurrentScheduledFuture_, listenableDelegate, scheduledDelegate)
}

ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_ListenableScheduledTask *create_ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_ListenableScheduledTask_initWithComGoogleCommonUtilConcurrentListenableFuture_withJavaUtilConcurrentScheduledFuture_(id<ComGoogleCommonUtilConcurrentListenableFuture> listenableDelegate, id<JavaUtilConcurrentScheduledFuture> scheduledDelegate) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_ListenableScheduledTask, initWithComGoogleCommonUtilConcurrentListenableFuture_withJavaUtilConcurrentScheduledFuture_, listenableDelegate, scheduledDelegate)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_ListenableScheduledTask)

@implementation ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_NeverSuccessfulListenableFutureTask

- (instancetype)initWithJavaLangRunnable:(id<JavaLangRunnable>)delegate {
  ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_NeverSuccessfulListenableFutureTask_initWithJavaLangRunnable_(self, delegate);
  return self;
}

- (void)run {
  @try {
    [((id<JavaLangRunnable>) nil_chk(delegate_)) run];
  }
  @catch (NSException *t) {
    [self setExceptionWithNSException:t];
    @throw nil_chk(ComGoogleCommonBaseThrowables_propagateWithNSException_(t));
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangRunnable:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "delegate_", "LJavaLangRunnable;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangRunnable;", "LComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator;", "Lcom/google/common/util/concurrent/AbstractFuture<Ljava/lang/Void;>;Ljava/lang/Runnable;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_NeverSuccessfulListenableFutureTask = { "NeverSuccessfulListenableFutureTask", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x1a, 2, 1, 1, -1, -1, 2, -1 };
  return &_ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_NeverSuccessfulListenableFutureTask;
}

@end

void ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_NeverSuccessfulListenableFutureTask_initWithJavaLangRunnable_(ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_NeverSuccessfulListenableFutureTask *self, id<JavaLangRunnable> delegate) {
  ComGoogleCommonUtilConcurrentAbstractFuture_init(self);
  self->delegate_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(delegate);
}

ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_NeverSuccessfulListenableFutureTask *new_ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_NeverSuccessfulListenableFutureTask_initWithJavaLangRunnable_(id<JavaLangRunnable> delegate) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_NeverSuccessfulListenableFutureTask, initWithJavaLangRunnable_, delegate)
}

ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_NeverSuccessfulListenableFutureTask *create_ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_NeverSuccessfulListenableFutureTask_initWithJavaLangRunnable_(id<JavaLangRunnable> delegate) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_NeverSuccessfulListenableFutureTask, initWithJavaLangRunnable_, delegate)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentMoreExecutors_ScheduledListeningDecorator_NeverSuccessfulListenableFutureTask)

@implementation ComGoogleCommonUtilConcurrentMoreExecutors_1

- (instancetype)initWithJavaUtilConcurrentBlockingQueue:(id<JavaUtilConcurrentBlockingQueue>)capture$0
      withComGoogleCommonUtilConcurrentListenableFuture:(id<ComGoogleCommonUtilConcurrentListenableFuture>)capture$1 {
  ComGoogleCommonUtilConcurrentMoreExecutors_1_initWithJavaUtilConcurrentBlockingQueue_withComGoogleCommonUtilConcurrentListenableFuture_(self, capture$0, capture$1);
  return self;
}

- (void)run {
  [((id<JavaUtilConcurrentBlockingQueue>) nil_chk(val$queue_)) addWithId:val$future_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentBlockingQueue:withComGoogleCommonUtilConcurrentListenableFuture:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$queue_", "LJavaUtilConcurrentBlockingQueue;", .constantValue.asLong = 0, 0x1012, -1, -1, 0, -1 },
    { "val$future_", "LComGoogleCommonUtilConcurrentListenableFuture;", .constantValue.asLong = 0, 0x1012, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "Ljava/util/concurrent/BlockingQueue<Ljava/util/concurrent/Future<TT;>;>;", "Lcom/google/common/util/concurrent/ListenableFuture<TT;>;", "LComGoogleCommonUtilConcurrentMoreExecutors;", "submitAndAddQueueListenerWithComGoogleCommonUtilConcurrentListeningExecutorService:withJavaUtilConcurrentCallable:withJavaUtilConcurrentBlockingQueue:" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentMoreExecutors_1 = { "", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x8018, 2, 2, 2, -1, 3, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentMoreExecutors_1;
}

@end

void ComGoogleCommonUtilConcurrentMoreExecutors_1_initWithJavaUtilConcurrentBlockingQueue_withComGoogleCommonUtilConcurrentListenableFuture_(ComGoogleCommonUtilConcurrentMoreExecutors_1 *self, id<JavaUtilConcurrentBlockingQueue> capture$0, id<ComGoogleCommonUtilConcurrentListenableFuture> capture$1) {
  self->val$queue_ = capture$0;
  self->val$future_ = capture$1;
  NSObject_init(self);
}

ComGoogleCommonUtilConcurrentMoreExecutors_1 *new_ComGoogleCommonUtilConcurrentMoreExecutors_1_initWithJavaUtilConcurrentBlockingQueue_withComGoogleCommonUtilConcurrentListenableFuture_(id<JavaUtilConcurrentBlockingQueue> capture$0, id<ComGoogleCommonUtilConcurrentListenableFuture> capture$1) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentMoreExecutors_1, initWithJavaUtilConcurrentBlockingQueue_withComGoogleCommonUtilConcurrentListenableFuture_, capture$0, capture$1)
}

ComGoogleCommonUtilConcurrentMoreExecutors_1 *create_ComGoogleCommonUtilConcurrentMoreExecutors_1_initWithJavaUtilConcurrentBlockingQueue_withComGoogleCommonUtilConcurrentListenableFuture_(id<JavaUtilConcurrentBlockingQueue> capture$0, id<ComGoogleCommonUtilConcurrentListenableFuture> capture$1) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentMoreExecutors_1, initWithJavaUtilConcurrentBlockingQueue_withComGoogleCommonUtilConcurrentListenableFuture_, capture$0, capture$1)
}

@implementation ComGoogleCommonUtilConcurrentMoreExecutors_2

- (instancetype)initWithJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)capture$0
                   withComGoogleCommonBaseSupplier:(id<ComGoogleCommonBaseSupplier>)capture$1 {
  ComGoogleCommonUtilConcurrentMoreExecutors_2_initWithJavaUtilConcurrentExecutor_withComGoogleCommonBaseSupplier_(self, capture$0, capture$1);
  return self;
}

- (void)executeWithJavaLangRunnable:(id<JavaLangRunnable>)command {
  [((id<JavaUtilConcurrentExecutor>) nil_chk(val$executor_)) executeWithJavaLangRunnable:ComGoogleCommonUtilConcurrentCallables_threadRenamingWithJavaLangRunnable_withComGoogleCommonBaseSupplier_(command, val$nameSupplier_)];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentExecutor:withComGoogleCommonBaseSupplier:);
  methods[1].selector = @selector(executeWithJavaLangRunnable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$executor_", "LJavaUtilConcurrentExecutor;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$nameSupplier_", "LComGoogleCommonBaseSupplier;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "execute", "LJavaLangRunnable;", "Lcom/google/common/base/Supplier<Ljava/lang/String;>;", "LComGoogleCommonUtilConcurrentMoreExecutors;", "renamingDecoratorWithJavaUtilConcurrentExecutor:withComGoogleCommonBaseSupplier:" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentMoreExecutors_2 = { "", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x8018, 2, 2, 3, -1, 4, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentMoreExecutors_2;
}

@end

void ComGoogleCommonUtilConcurrentMoreExecutors_2_initWithJavaUtilConcurrentExecutor_withComGoogleCommonBaseSupplier_(ComGoogleCommonUtilConcurrentMoreExecutors_2 *self, id<JavaUtilConcurrentExecutor> capture$0, id<ComGoogleCommonBaseSupplier> capture$1) {
  self->val$executor_ = capture$0;
  self->val$nameSupplier_ = capture$1;
  NSObject_init(self);
}

ComGoogleCommonUtilConcurrentMoreExecutors_2 *new_ComGoogleCommonUtilConcurrentMoreExecutors_2_initWithJavaUtilConcurrentExecutor_withComGoogleCommonBaseSupplier_(id<JavaUtilConcurrentExecutor> capture$0, id<ComGoogleCommonBaseSupplier> capture$1) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentMoreExecutors_2, initWithJavaUtilConcurrentExecutor_withComGoogleCommonBaseSupplier_, capture$0, capture$1)
}

ComGoogleCommonUtilConcurrentMoreExecutors_2 *create_ComGoogleCommonUtilConcurrentMoreExecutors_2_initWithJavaUtilConcurrentExecutor_withComGoogleCommonBaseSupplier_(id<JavaUtilConcurrentExecutor> capture$0, id<ComGoogleCommonBaseSupplier> capture$1) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentMoreExecutors_2, initWithJavaUtilConcurrentExecutor_withComGoogleCommonBaseSupplier_, capture$0, capture$1)
}

@implementation ComGoogleCommonUtilConcurrentMoreExecutors_3

- (instancetype)initWithComGoogleCommonBaseSupplier:(id<ComGoogleCommonBaseSupplier>)capture$0
              withJavaUtilConcurrentExecutorService:(id<JavaUtilConcurrentExecutorService>)delegate {
  ComGoogleCommonUtilConcurrentMoreExecutors_3_initWithComGoogleCommonBaseSupplier_withJavaUtilConcurrentExecutorService_(self, capture$0, delegate);
  return self;
}

- (id<JavaUtilConcurrentCallable>)wrapTaskWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable {
  return ComGoogleCommonUtilConcurrentCallables_threadRenamingWithJavaUtilConcurrentCallable_withComGoogleCommonBaseSupplier_(callable, val$nameSupplier_);
}

- (id<JavaLangRunnable>)wrapTaskWithJavaLangRunnable:(id<JavaLangRunnable>)command {
  return ComGoogleCommonUtilConcurrentCallables_threadRenamingWithJavaLangRunnable_withComGoogleCommonBaseSupplier_(command, val$nameSupplier_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentCallable;", 0x4, 1, 2, -1, 3, -1, -1 },
    { NULL, "LJavaLangRunnable;", 0x4, 1, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonBaseSupplier:withJavaUtilConcurrentExecutorService:);
  methods[1].selector = @selector(wrapTaskWithJavaUtilConcurrentCallable:);
  methods[2].selector = @selector(wrapTaskWithJavaLangRunnable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$nameSupplier_", "LComGoogleCommonBaseSupplier;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentExecutorService;", "wrapTask", "LJavaUtilConcurrentCallable;", "<T:Ljava/lang/Object;>(Ljava/util/concurrent/Callable<TT;>;)Ljava/util/concurrent/Callable<TT;>;", "LJavaLangRunnable;", "Lcom/google/common/base/Supplier<Ljava/lang/String;>;", "LComGoogleCommonUtilConcurrentMoreExecutors;", "renamingDecoratorWithJavaUtilConcurrentExecutorService:withComGoogleCommonBaseSupplier:" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentMoreExecutors_3 = { "", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x8018, 3, 1, 6, -1, 7, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentMoreExecutors_3;
}

@end

void ComGoogleCommonUtilConcurrentMoreExecutors_3_initWithComGoogleCommonBaseSupplier_withJavaUtilConcurrentExecutorService_(ComGoogleCommonUtilConcurrentMoreExecutors_3 *self, id<ComGoogleCommonBaseSupplier> capture$0, id<JavaUtilConcurrentExecutorService> delegate) {
  self->val$nameSupplier_ = capture$0;
  ComGoogleCommonUtilConcurrentWrappingExecutorService_initWithJavaUtilConcurrentExecutorService_(self, delegate);
}

ComGoogleCommonUtilConcurrentMoreExecutors_3 *new_ComGoogleCommonUtilConcurrentMoreExecutors_3_initWithComGoogleCommonBaseSupplier_withJavaUtilConcurrentExecutorService_(id<ComGoogleCommonBaseSupplier> capture$0, id<JavaUtilConcurrentExecutorService> delegate) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentMoreExecutors_3, initWithComGoogleCommonBaseSupplier_withJavaUtilConcurrentExecutorService_, capture$0, delegate)
}

ComGoogleCommonUtilConcurrentMoreExecutors_3 *create_ComGoogleCommonUtilConcurrentMoreExecutors_3_initWithComGoogleCommonBaseSupplier_withJavaUtilConcurrentExecutorService_(id<ComGoogleCommonBaseSupplier> capture$0, id<JavaUtilConcurrentExecutorService> delegate) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentMoreExecutors_3, initWithComGoogleCommonBaseSupplier_withJavaUtilConcurrentExecutorService_, capture$0, delegate)
}

@implementation ComGoogleCommonUtilConcurrentMoreExecutors_4

- (instancetype)initWithComGoogleCommonBaseSupplier:(id<ComGoogleCommonBaseSupplier>)capture$0
     withJavaUtilConcurrentScheduledExecutorService:(id<JavaUtilConcurrentScheduledExecutorService>)delegate {
  ComGoogleCommonUtilConcurrentMoreExecutors_4_initWithComGoogleCommonBaseSupplier_withJavaUtilConcurrentScheduledExecutorService_(self, capture$0, delegate);
  return self;
}

- (id<JavaUtilConcurrentCallable>)wrapTaskWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable {
  return ComGoogleCommonUtilConcurrentCallables_threadRenamingWithJavaUtilConcurrentCallable_withComGoogleCommonBaseSupplier_(callable, val$nameSupplier_);
}

- (id<JavaLangRunnable>)wrapTaskWithJavaLangRunnable:(id<JavaLangRunnable>)command {
  return ComGoogleCommonUtilConcurrentCallables_threadRenamingWithJavaLangRunnable_withComGoogleCommonBaseSupplier_(command, val$nameSupplier_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentCallable;", 0x4, 1, 2, -1, 3, -1, -1 },
    { NULL, "LJavaLangRunnable;", 0x4, 1, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonBaseSupplier:withJavaUtilConcurrentScheduledExecutorService:);
  methods[1].selector = @selector(wrapTaskWithJavaUtilConcurrentCallable:);
  methods[2].selector = @selector(wrapTaskWithJavaLangRunnable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$nameSupplier_", "LComGoogleCommonBaseSupplier;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentScheduledExecutorService;", "wrapTask", "LJavaUtilConcurrentCallable;", "<T:Ljava/lang/Object;>(Ljava/util/concurrent/Callable<TT;>;)Ljava/util/concurrent/Callable<TT;>;", "LJavaLangRunnable;", "Lcom/google/common/base/Supplier<Ljava/lang/String;>;", "LComGoogleCommonUtilConcurrentMoreExecutors;", "renamingDecoratorWithJavaUtilConcurrentScheduledExecutorService:withComGoogleCommonBaseSupplier:" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentMoreExecutors_4 = { "", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x8018, 3, 1, 6, -1, 7, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentMoreExecutors_4;
}

@end

void ComGoogleCommonUtilConcurrentMoreExecutors_4_initWithComGoogleCommonBaseSupplier_withJavaUtilConcurrentScheduledExecutorService_(ComGoogleCommonUtilConcurrentMoreExecutors_4 *self, id<ComGoogleCommonBaseSupplier> capture$0, id<JavaUtilConcurrentScheduledExecutorService> delegate) {
  self->val$nameSupplier_ = capture$0;
  ComGoogleCommonUtilConcurrentWrappingScheduledExecutorService_initWithJavaUtilConcurrentScheduledExecutorService_(self, delegate);
}

ComGoogleCommonUtilConcurrentMoreExecutors_4 *new_ComGoogleCommonUtilConcurrentMoreExecutors_4_initWithComGoogleCommonBaseSupplier_withJavaUtilConcurrentScheduledExecutorService_(id<ComGoogleCommonBaseSupplier> capture$0, id<JavaUtilConcurrentScheduledExecutorService> delegate) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentMoreExecutors_4, initWithComGoogleCommonBaseSupplier_withJavaUtilConcurrentScheduledExecutorService_, capture$0, delegate)
}

ComGoogleCommonUtilConcurrentMoreExecutors_4 *create_ComGoogleCommonUtilConcurrentMoreExecutors_4_initWithComGoogleCommonBaseSupplier_withJavaUtilConcurrentScheduledExecutorService_(id<ComGoogleCommonBaseSupplier> capture$0, id<JavaUtilConcurrentScheduledExecutorService> delegate) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentMoreExecutors_4, initWithComGoogleCommonBaseSupplier_withJavaUtilConcurrentScheduledExecutorService_, capture$0, delegate)
}

@implementation ComGoogleCommonUtilConcurrentMoreExecutors_5

- (instancetype)initWithJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)capture$0
   withComGoogleCommonUtilConcurrentAbstractFuture:(ComGoogleCommonUtilConcurrentAbstractFuture *)capture$1 {
  ComGoogleCommonUtilConcurrentMoreExecutors_5_initWithJavaUtilConcurrentExecutor_withComGoogleCommonUtilConcurrentAbstractFuture_(self, capture$0, capture$1);
  return self;
}

- (void)executeWithJavaLangRunnable:(id<JavaLangRunnable>)command {
  @try {
    [((id<JavaUtilConcurrentExecutor>) nil_chk(val$delegate_)) executeWithJavaLangRunnable:new_ComGoogleCommonUtilConcurrentMoreExecutors_5_1_initWithComGoogleCommonUtilConcurrentMoreExecutors_5_withJavaLangRunnable_(self, command)];
  }
  @catch (JavaUtilConcurrentRejectedExecutionException *e) {
    if (JreLoadVolatileBoolean(&thrownFromDelegate_)) {
      [((ComGoogleCommonUtilConcurrentAbstractFuture *) nil_chk(val$future_)) setExceptionWithNSException:e];
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentExecutor:withComGoogleCommonUtilConcurrentAbstractFuture:);
  methods[1].selector = @selector(executeWithJavaLangRunnable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$delegate_", "LJavaUtilConcurrentExecutor;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$future_", "LComGoogleCommonUtilConcurrentAbstractFuture;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
    { "thrownFromDelegate_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "execute", "LJavaLangRunnable;", "Lcom/google/common/util/concurrent/AbstractFuture<*>;", "LComGoogleCommonUtilConcurrentMoreExecutors;", "rejectionPropagatingExecutorWithJavaUtilConcurrentExecutor:withComGoogleCommonUtilConcurrentAbstractFuture:" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentMoreExecutors_5 = { "", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x8018, 2, 3, 3, -1, 4, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentMoreExecutors_5;
}

@end

void ComGoogleCommonUtilConcurrentMoreExecutors_5_initWithJavaUtilConcurrentExecutor_withComGoogleCommonUtilConcurrentAbstractFuture_(ComGoogleCommonUtilConcurrentMoreExecutors_5 *self, id<JavaUtilConcurrentExecutor> capture$0, ComGoogleCommonUtilConcurrentAbstractFuture *capture$1) {
  self->val$delegate_ = capture$0;
  self->val$future_ = capture$1;
  NSObject_init(self);
  JreAssignVolatileBoolean(&self->thrownFromDelegate_, true);
}

ComGoogleCommonUtilConcurrentMoreExecutors_5 *new_ComGoogleCommonUtilConcurrentMoreExecutors_5_initWithJavaUtilConcurrentExecutor_withComGoogleCommonUtilConcurrentAbstractFuture_(id<JavaUtilConcurrentExecutor> capture$0, ComGoogleCommonUtilConcurrentAbstractFuture *capture$1) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentMoreExecutors_5, initWithJavaUtilConcurrentExecutor_withComGoogleCommonUtilConcurrentAbstractFuture_, capture$0, capture$1)
}

ComGoogleCommonUtilConcurrentMoreExecutors_5 *create_ComGoogleCommonUtilConcurrentMoreExecutors_5_initWithJavaUtilConcurrentExecutor_withComGoogleCommonUtilConcurrentAbstractFuture_(id<JavaUtilConcurrentExecutor> capture$0, ComGoogleCommonUtilConcurrentAbstractFuture *capture$1) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentMoreExecutors_5, initWithJavaUtilConcurrentExecutor_withComGoogleCommonUtilConcurrentAbstractFuture_, capture$0, capture$1)
}

@implementation ComGoogleCommonUtilConcurrentMoreExecutors_5_1

- (instancetype)initWithComGoogleCommonUtilConcurrentMoreExecutors_5:(ComGoogleCommonUtilConcurrentMoreExecutors_5 *)outer$
                                                withJavaLangRunnable:(id<JavaLangRunnable>)capture$0 {
  ComGoogleCommonUtilConcurrentMoreExecutors_5_1_initWithComGoogleCommonUtilConcurrentMoreExecutors_5_withJavaLangRunnable_(self, outer$, capture$0);
  return self;
}

- (void)run {
  JreAssignVolatileBoolean(&this$0_->thrownFromDelegate_, false);
  [((id<JavaLangRunnable>) nil_chk(val$command_)) run];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentMoreExecutors_5:withJavaLangRunnable:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonUtilConcurrentMoreExecutors_5;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$command_", "LJavaLangRunnable;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentMoreExecutors_5;", "executeWithJavaLangRunnable:" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentMoreExecutors_5_1 = { "", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x8018, 2, 2, 0, -1, 1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentMoreExecutors_5_1;
}

@end

void ComGoogleCommonUtilConcurrentMoreExecutors_5_1_initWithComGoogleCommonUtilConcurrentMoreExecutors_5_withJavaLangRunnable_(ComGoogleCommonUtilConcurrentMoreExecutors_5_1 *self, ComGoogleCommonUtilConcurrentMoreExecutors_5 *outer$, id<JavaLangRunnable> capture$0) {
  self->this$0_ = outer$;
  self->val$command_ = capture$0;
  NSObject_init(self);
}

ComGoogleCommonUtilConcurrentMoreExecutors_5_1 *new_ComGoogleCommonUtilConcurrentMoreExecutors_5_1_initWithComGoogleCommonUtilConcurrentMoreExecutors_5_withJavaLangRunnable_(ComGoogleCommonUtilConcurrentMoreExecutors_5 *outer$, id<JavaLangRunnable> capture$0) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentMoreExecutors_5_1, initWithComGoogleCommonUtilConcurrentMoreExecutors_5_withJavaLangRunnable_, outer$, capture$0)
}

ComGoogleCommonUtilConcurrentMoreExecutors_5_1 *create_ComGoogleCommonUtilConcurrentMoreExecutors_5_1_initWithComGoogleCommonUtilConcurrentMoreExecutors_5_withJavaLangRunnable_(ComGoogleCommonUtilConcurrentMoreExecutors_5 *outer$, id<JavaLangRunnable> capture$0) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentMoreExecutors_5_1, initWithComGoogleCommonUtilConcurrentMoreExecutors_5_withJavaLangRunnable_, outer$, capture$0)
}
