//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/util/concurrent/RateLimiter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/base/Stopwatch.h"
#include "com/google/common/util/concurrent/RateLimiter.h"
#include "com/google/common/util/concurrent/SmoothRateLimiter.h"
#include "com/google/common/util/concurrent/Uninterruptibles.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/util/Locale.h"
#include "java/util/concurrent/TimeUnit.h"

@interface ComGoogleCommonUtilConcurrentRateLimiter () {
 @public
  ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch *stopwatch_;
  volatile_id mutexDoNotUseDirectly_;
}

- (id)mutex;

- (jboolean)canAcquireWithLong:(jlong)nowMicros
                      withLong:(jlong)timeoutMicros;

+ (void)checkPermitsWithInt:(jint)permits;

@end

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentRateLimiter, stopwatch_, ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch *)
J2OBJC_VOLATILE_FIELD_SETTER(ComGoogleCommonUtilConcurrentRateLimiter, mutexDoNotUseDirectly_, id)

__attribute__((unused)) static id ComGoogleCommonUtilConcurrentRateLimiter_mutex(ComGoogleCommonUtilConcurrentRateLimiter *self);

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentRateLimiter_setRateWithDouble_(ComGoogleCommonUtilConcurrentRateLimiter *self, jdouble permitsPerSecond);

__attribute__((unused)) static jdouble ComGoogleCommonUtilConcurrentRateLimiter_getRate(ComGoogleCommonUtilConcurrentRateLimiter *self);

__attribute__((unused)) static jlong ComGoogleCommonUtilConcurrentRateLimiter_reserveWithInt_(ComGoogleCommonUtilConcurrentRateLimiter *self, jint permits);

__attribute__((unused)) static jboolean ComGoogleCommonUtilConcurrentRateLimiter_canAcquireWithLong_withLong_(ComGoogleCommonUtilConcurrentRateLimiter *self, jlong nowMicros, jlong timeoutMicros);

__attribute__((unused)) static jlong ComGoogleCommonUtilConcurrentRateLimiter_reserveAndGetWaitLengthWithInt_withLong_(ComGoogleCommonUtilConcurrentRateLimiter *self, jint permits, jlong nowMicros);

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentRateLimiter_checkPermitsWithInt_(jint permits);

@interface ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_1 : ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch {
 @public
  ComGoogleCommonBaseStopwatch *stopwatch_;
}

- (instancetype)init;

- (jlong)readMicros;

- (void)sleepMicrosUninterruptiblyWithLong:(jlong)micros;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_1)

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_1, stopwatch_, ComGoogleCommonBaseStopwatch *)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_1_init(ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_1 *self);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_1 *new_ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_1 *create_ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_1_init();

@implementation ComGoogleCommonUtilConcurrentRateLimiter

+ (ComGoogleCommonUtilConcurrentRateLimiter *)createWithDouble:(jdouble)permitsPerSecond {
  return ComGoogleCommonUtilConcurrentRateLimiter_createWithDouble_(permitsPerSecond);
}

+ (ComGoogleCommonUtilConcurrentRateLimiter *)createWithComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch:(ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch *)stopwatch
                                                                                                        withDouble:(jdouble)permitsPerSecond {
  return ComGoogleCommonUtilConcurrentRateLimiter_createWithComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_withDouble_(stopwatch, permitsPerSecond);
}

+ (ComGoogleCommonUtilConcurrentRateLimiter *)createWithDouble:(jdouble)permitsPerSecond
                                                      withLong:(jlong)warmupPeriod
                                withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return ComGoogleCommonUtilConcurrentRateLimiter_createWithDouble_withLong_withJavaUtilConcurrentTimeUnit_(permitsPerSecond, warmupPeriod, unit);
}

+ (ComGoogleCommonUtilConcurrentRateLimiter *)createWithComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch:(ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch *)stopwatch
                                                                                                        withDouble:(jdouble)permitsPerSecond
                                                                                                          withLong:(jlong)warmupPeriod
                                                                                    withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                                                                                                        withDouble:(jdouble)coldFactor {
  return ComGoogleCommonUtilConcurrentRateLimiter_createWithComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_withDouble_withLong_withJavaUtilConcurrentTimeUnit_withDouble_(stopwatch, permitsPerSecond, warmupPeriod, unit, coldFactor);
}

- (id)mutex {
  return ComGoogleCommonUtilConcurrentRateLimiter_mutex(self);
}

- (instancetype)initWithComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch:(ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch *)stopwatch {
  ComGoogleCommonUtilConcurrentRateLimiter_initWithComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_(self, stopwatch);
  return self;
}

- (void)setRateWithDouble:(jdouble)permitsPerSecond {
  ComGoogleCommonUtilConcurrentRateLimiter_setRateWithDouble_(self, permitsPerSecond);
}

- (void)doSetRateWithDouble:(jdouble)permitsPerSecond
                   withLong:(jlong)nowMicros {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jdouble)getRate {
  return ComGoogleCommonUtilConcurrentRateLimiter_getRate(self);
}

- (jdouble)doGetRate {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)acquire {
  return [self acquireWithInt:1];
}

- (jdouble)acquireWithInt:(jint)permits {
  jlong microsToWait = ComGoogleCommonUtilConcurrentRateLimiter_reserveWithInt_(self, permits);
  [((ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch *) nil_chk(stopwatch_)) sleepMicrosUninterruptiblyWithLong:microsToWait];
  return 1.0 * microsToWait / [((JavaUtilConcurrentTimeUnit *) nil_chk(JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS))) toMicrosWithLong:1LL];
}

- (jlong)reserveWithInt:(jint)permits {
  return ComGoogleCommonUtilConcurrentRateLimiter_reserveWithInt_(self, permits);
}

- (jboolean)tryAcquireWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return [self tryAcquireWithInt:1 withLong:timeout withJavaUtilConcurrentTimeUnit:unit];
}

- (jboolean)tryAcquireWithInt:(jint)permits {
  return [self tryAcquireWithInt:permits withLong:0 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MICROSECONDS)];
}

- (jboolean)tryAcquire {
  return [self tryAcquireWithInt:1 withLong:0 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MICROSECONDS)];
}

- (jboolean)tryAcquireWithInt:(jint)permits
                     withLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  jlong timeoutMicros = JavaLangMath_maxWithLong_withLong_([((JavaUtilConcurrentTimeUnit *) nil_chk(unit)) toMicrosWithLong:timeout], 0);
  ComGoogleCommonUtilConcurrentRateLimiter_checkPermitsWithInt_(permits);
  jlong microsToWait;
  @synchronized(ComGoogleCommonUtilConcurrentRateLimiter_mutex(self)) {
    jlong nowMicros = [((ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch *) nil_chk(stopwatch_)) readMicros];
    if (!ComGoogleCommonUtilConcurrentRateLimiter_canAcquireWithLong_withLong_(self, nowMicros, timeoutMicros)) {
      return false;
    }
    else {
      microsToWait = ComGoogleCommonUtilConcurrentRateLimiter_reserveAndGetWaitLengthWithInt_withLong_(self, permits, nowMicros);
    }
  }
  [stopwatch_ sleepMicrosUninterruptiblyWithLong:microsToWait];
  return true;
}

- (jboolean)canAcquireWithLong:(jlong)nowMicros
                      withLong:(jlong)timeoutMicros {
  return ComGoogleCommonUtilConcurrentRateLimiter_canAcquireWithLong_withLong_(self, nowMicros, timeoutMicros);
}

- (jlong)reserveAndGetWaitLengthWithInt:(jint)permits
                               withLong:(jlong)nowMicros {
  return ComGoogleCommonUtilConcurrentRateLimiter_reserveAndGetWaitLengthWithInt_withLong_(self, permits, nowMicros);
}

- (jlong)queryEarliestAvailableWithLong:(jlong)nowMicros {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)reserveEarliestAvailableWithInt:(jint)permits
                                withLong:(jlong)nowMicros {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)description {
  return NSString_java_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT), @"RateLimiter[stableRate=%3.1fqps]", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(ComGoogleCommonUtilConcurrentRateLimiter_getRate(self)) } count:1 type:NSObject_class_()]);
}

+ (void)checkPermitsWithInt:(jint)permits {
  ComGoogleCommonUtilConcurrentRateLimiter_checkPermitsWithInt_(permits);
}

- (void)__javaClone:(ComGoogleCommonUtilConcurrentRateLimiter *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&mutexDoNotUseDirectly_, &original->mutexDoNotUseDirectly_);
}

- (void)dealloc {
  JreReleaseVolatile(&mutexDoNotUseDirectly_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LComGoogleCommonUtilConcurrentRateLimiter;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentRateLimiter;", 0x8, 0, 2, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentRateLimiter;", 0x9, 0, 3, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentRateLimiter;", 0x8, 0, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 6, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x400, 7, 8, -1, -1, -1, -1 },
    { NULL, "D", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "J", 0x10, 11, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 15, 16, -1, -1, -1, -1 },
    { NULL, "J", 0x10, 17, 18, -1, -1, -1, -1 },
    { NULL, "J", 0x400, 19, 20, -1, -1, -1, -1 },
    { NULL, "J", 0x400, 21, 18, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 22, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 23, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(createWithDouble:);
  methods[1].selector = @selector(createWithComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch:withDouble:);
  methods[2].selector = @selector(createWithDouble:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[3].selector = @selector(createWithComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch:withDouble:withLong:withJavaUtilConcurrentTimeUnit:withDouble:);
  methods[4].selector = @selector(mutex);
  methods[5].selector = @selector(initWithComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch:);
  methods[6].selector = @selector(setRateWithDouble:);
  methods[7].selector = @selector(doSetRateWithDouble:withLong:);
  methods[8].selector = @selector(getRate);
  methods[9].selector = @selector(doGetRate);
  methods[10].selector = @selector(acquire);
  methods[11].selector = @selector(acquireWithInt:);
  methods[12].selector = @selector(reserveWithInt:);
  methods[13].selector = @selector(tryAcquireWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[14].selector = @selector(tryAcquireWithInt:);
  methods[15].selector = @selector(tryAcquire);
  methods[16].selector = @selector(tryAcquireWithInt:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[17].selector = @selector(canAcquireWithLong:withLong:);
  methods[18].selector = @selector(reserveAndGetWaitLengthWithInt:withLong:);
  methods[19].selector = @selector(queryEarliestAvailableWithLong:);
  methods[20].selector = @selector(reserveEarliestAvailableWithInt:withLong:);
  methods[21].selector = @selector(description);
  methods[22].selector = @selector(checkPermitsWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "stopwatch_", "LComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mutexDoNotUseDirectly_", "LNSObject;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "create", "D", "LComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch;D", "DJLJavaUtilConcurrentTimeUnit;", "LComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch;DJLJavaUtilConcurrentTimeUnit;D", "LComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch;", "setRate", "doSetRate", "DJ", "acquire", "I", "reserve", "tryAcquire", "JLJavaUtilConcurrentTimeUnit;", "IJLJavaUtilConcurrentTimeUnit;", "canAcquire", "JJ", "reserveAndGetWaitLength", "IJ", "queryEarliestAvailable", "J", "reserveEarliestAvailable", "toString", "checkPermits" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentRateLimiter = { "RateLimiter", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x401, 23, 2, -1, 5, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentRateLimiter;
}

@end

ComGoogleCommonUtilConcurrentRateLimiter *ComGoogleCommonUtilConcurrentRateLimiter_createWithDouble_(jdouble permitsPerSecond) {
  ComGoogleCommonUtilConcurrentRateLimiter_initialize();
  return ComGoogleCommonUtilConcurrentRateLimiter_createWithComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_withDouble_(ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_createFromSystemTimer(), permitsPerSecond);
}

ComGoogleCommonUtilConcurrentRateLimiter *ComGoogleCommonUtilConcurrentRateLimiter_createWithComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_withDouble_(ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch *stopwatch, jdouble permitsPerSecond) {
  ComGoogleCommonUtilConcurrentRateLimiter_initialize();
  ComGoogleCommonUtilConcurrentRateLimiter *rateLimiter = new_ComGoogleCommonUtilConcurrentSmoothRateLimiter_SmoothBursty_initWithComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_withDouble_(stopwatch, 1.0);
  ComGoogleCommonUtilConcurrentRateLimiter_setRateWithDouble_(rateLimiter, permitsPerSecond);
  return rateLimiter;
}

ComGoogleCommonUtilConcurrentRateLimiter *ComGoogleCommonUtilConcurrentRateLimiter_createWithDouble_withLong_withJavaUtilConcurrentTimeUnit_(jdouble permitsPerSecond, jlong warmupPeriod, JavaUtilConcurrentTimeUnit *unit) {
  ComGoogleCommonUtilConcurrentRateLimiter_initialize();
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withLong_(warmupPeriod >= 0, @"warmupPeriod must not be negative: %s", warmupPeriod);
  return ComGoogleCommonUtilConcurrentRateLimiter_createWithComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_withDouble_withLong_withJavaUtilConcurrentTimeUnit_withDouble_(ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_createFromSystemTimer(), permitsPerSecond, warmupPeriod, unit, 3.0);
}

ComGoogleCommonUtilConcurrentRateLimiter *ComGoogleCommonUtilConcurrentRateLimiter_createWithComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_withDouble_withLong_withJavaUtilConcurrentTimeUnit_withDouble_(ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch *stopwatch, jdouble permitsPerSecond, jlong warmupPeriod, JavaUtilConcurrentTimeUnit *unit, jdouble coldFactor) {
  ComGoogleCommonUtilConcurrentRateLimiter_initialize();
  ComGoogleCommonUtilConcurrentRateLimiter *rateLimiter = new_ComGoogleCommonUtilConcurrentSmoothRateLimiter_SmoothWarmingUp_initWithComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_withLong_withJavaUtilConcurrentTimeUnit_withDouble_(stopwatch, warmupPeriod, unit, coldFactor);
  ComGoogleCommonUtilConcurrentRateLimiter_setRateWithDouble_(rateLimiter, permitsPerSecond);
  return rateLimiter;
}

id ComGoogleCommonUtilConcurrentRateLimiter_mutex(ComGoogleCommonUtilConcurrentRateLimiter *self) {
  id mutex = JreLoadVolatileId(&self->mutexDoNotUseDirectly_);
  if (mutex == nil) {
    @synchronized(self) {
      mutex = JreLoadVolatileId(&self->mutexDoNotUseDirectly_);
      if (mutex == nil) {
        (void) JreVolatileStrongAssign(&self->mutexDoNotUseDirectly_, mutex = new_NSObject_init());
      }
    }
  }
  return mutex;
}

void ComGoogleCommonUtilConcurrentRateLimiter_initWithComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_(ComGoogleCommonUtilConcurrentRateLimiter *self, ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch *stopwatch) {
  NSObject_init(self);
  self->stopwatch_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(stopwatch);
}

void ComGoogleCommonUtilConcurrentRateLimiter_setRateWithDouble_(ComGoogleCommonUtilConcurrentRateLimiter *self, jdouble permitsPerSecond) {
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withId_(permitsPerSecond > 0.0 && !JavaLangDouble_isNaNWithDouble_(permitsPerSecond), @"rate must be positive");
  @synchronized(ComGoogleCommonUtilConcurrentRateLimiter_mutex(self)) {
    [self doSetRateWithDouble:permitsPerSecond withLong:[((ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch *) nil_chk(self->stopwatch_)) readMicros]];
  }
}

jdouble ComGoogleCommonUtilConcurrentRateLimiter_getRate(ComGoogleCommonUtilConcurrentRateLimiter *self) {
  @synchronized(ComGoogleCommonUtilConcurrentRateLimiter_mutex(self)) {
    return [self doGetRate];
  }
}

jlong ComGoogleCommonUtilConcurrentRateLimiter_reserveWithInt_(ComGoogleCommonUtilConcurrentRateLimiter *self, jint permits) {
  ComGoogleCommonUtilConcurrentRateLimiter_checkPermitsWithInt_(permits);
  @synchronized(ComGoogleCommonUtilConcurrentRateLimiter_mutex(self)) {
    return ComGoogleCommonUtilConcurrentRateLimiter_reserveAndGetWaitLengthWithInt_withLong_(self, permits, [((ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch *) nil_chk(self->stopwatch_)) readMicros]);
  }
}

jboolean ComGoogleCommonUtilConcurrentRateLimiter_canAcquireWithLong_withLong_(ComGoogleCommonUtilConcurrentRateLimiter *self, jlong nowMicros, jlong timeoutMicros) {
  return [self queryEarliestAvailableWithLong:nowMicros] - timeoutMicros <= nowMicros;
}

jlong ComGoogleCommonUtilConcurrentRateLimiter_reserveAndGetWaitLengthWithInt_withLong_(ComGoogleCommonUtilConcurrentRateLimiter *self, jint permits, jlong nowMicros) {
  jlong momentAvailable = [self reserveEarliestAvailableWithInt:permits withLong:nowMicros];
  return JavaLangMath_maxWithLong_withLong_(momentAvailable - nowMicros, 0);
}

void ComGoogleCommonUtilConcurrentRateLimiter_checkPermitsWithInt_(jint permits) {
  ComGoogleCommonUtilConcurrentRateLimiter_initialize();
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withInt_(permits > 0, @"Requested permits (%s) must be positive", permits);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentRateLimiter)

@implementation ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jlong)readMicros {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)sleepMicrosUninterruptiblyWithLong:(jlong)micros {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

+ (ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch *)createFromSystemTimer {
  return ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_createFromSystemTimer();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x404, 0, 1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch;", 0x19, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(readMicros);
  methods[2].selector = @selector(sleepMicrosUninterruptiblyWithLong:);
  methods[3].selector = @selector(createFromSystemTimer);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "sleepMicrosUninterruptibly", "J", "LComGoogleCommonUtilConcurrentRateLimiter;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch = { "SleepingStopwatch", "com.google.common.util.concurrent", ptrTable, methods, NULL, 7, 0x408, 4, 0, 2, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch;
}

@end

void ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_init(ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch *self) {
  NSObject_init(self);
}

ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch *ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_createFromSystemTimer() {
  ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_initialize();
  return new_ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_1_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch)

@implementation ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jlong)readMicros {
  return [((ComGoogleCommonBaseStopwatch *) nil_chk(stopwatch_)) elapsedWithJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MICROSECONDS)];
}

- (void)sleepMicrosUninterruptiblyWithLong:(jlong)micros {
  if (micros > 0) {
    ComGoogleCommonUtilConcurrentUninterruptibles_sleepUninterruptiblyWithLong_withJavaUtilConcurrentTimeUnit_(micros, JreLoadEnum(JavaUtilConcurrentTimeUnit, MICROSECONDS));
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(readMicros);
  methods[2].selector = @selector(sleepMicrosUninterruptiblyWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "stopwatch_", "LComGoogleCommonBaseStopwatch;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "sleepMicrosUninterruptibly", "J", "LComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch;", "createFromSystemTimer" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_1 = { "", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x8018, 3, 1, 2, -1, 3, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_1;
}

@end

void ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_1_init(ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_1 *self) {
  ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_init(self);
  self->stopwatch_ = ComGoogleCommonBaseStopwatch_createStarted();
}

ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_1 *new_ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_1_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_1, init)
}

ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_1 *create_ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_1_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentRateLimiter_SleepingStopwatch_1, init)
}
