//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/util/concurrent/Runnables.java
//

#include "J2ObjC_source.h"
#include "com/google/common/util/concurrent/Runnables.h"
#include "java/lang/Runnable.h"

@interface ComGoogleCommonUtilConcurrentRunnables ()

- (instancetype)init;

@end

inline id<JavaLangRunnable> ComGoogleCommonUtilConcurrentRunnables_get_EMPTY_RUNNABLE();
static id<JavaLangRunnable> ComGoogleCommonUtilConcurrentRunnables_EMPTY_RUNNABLE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonUtilConcurrentRunnables, EMPTY_RUNNABLE, id<JavaLangRunnable>)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentRunnables_init(ComGoogleCommonUtilConcurrentRunnables *self);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentRunnables *new_ComGoogleCommonUtilConcurrentRunnables_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentRunnables *create_ComGoogleCommonUtilConcurrentRunnables_init();

@interface ComGoogleCommonUtilConcurrentRunnables_1 : NSObject < JavaLangRunnable >

- (instancetype)init;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentRunnables_1)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentRunnables_1_init(ComGoogleCommonUtilConcurrentRunnables_1 *self);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentRunnables_1 *new_ComGoogleCommonUtilConcurrentRunnables_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentRunnables_1 *create_ComGoogleCommonUtilConcurrentRunnables_1_init();

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonUtilConcurrentRunnables)

@implementation ComGoogleCommonUtilConcurrentRunnables

+ (id<JavaLangRunnable>)doNothing {
  return ComGoogleCommonUtilConcurrentRunnables_doNothing();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentRunnables_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangRunnable;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(doNothing);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY_RUNNABLE", "LJavaLangRunnable;", .constantValue.asLong = 0, 0x1a, -1, 0, -1, -1 },
  };
  static const void *ptrTable[] = { &ComGoogleCommonUtilConcurrentRunnables_EMPTY_RUNNABLE };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentRunnables = { "Runnables", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentRunnables;
}

+ (void)initialize {
  if (self == [ComGoogleCommonUtilConcurrentRunnables class]) {
    ComGoogleCommonUtilConcurrentRunnables_EMPTY_RUNNABLE = new_ComGoogleCommonUtilConcurrentRunnables_1_init();
    J2OBJC_SET_INITIALIZED(ComGoogleCommonUtilConcurrentRunnables)
  }
}

@end

id<JavaLangRunnable> ComGoogleCommonUtilConcurrentRunnables_doNothing() {
  ComGoogleCommonUtilConcurrentRunnables_initialize();
  return ComGoogleCommonUtilConcurrentRunnables_EMPTY_RUNNABLE;
}

void ComGoogleCommonUtilConcurrentRunnables_init(ComGoogleCommonUtilConcurrentRunnables *self) {
  NSObject_init(self);
}

ComGoogleCommonUtilConcurrentRunnables *new_ComGoogleCommonUtilConcurrentRunnables_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentRunnables, init)
}

ComGoogleCommonUtilConcurrentRunnables *create_ComGoogleCommonUtilConcurrentRunnables_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentRunnables, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentRunnables)

@implementation ComGoogleCommonUtilConcurrentRunnables_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentRunnables_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)run {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentRunnables;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentRunnables_1 = { "", "com.google.common.util.concurrent", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 0, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentRunnables_1;
}

@end

void ComGoogleCommonUtilConcurrentRunnables_1_init(ComGoogleCommonUtilConcurrentRunnables_1 *self) {
  NSObject_init(self);
}

ComGoogleCommonUtilConcurrentRunnables_1 *new_ComGoogleCommonUtilConcurrentRunnables_1_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentRunnables_1, init)
}

ComGoogleCommonUtilConcurrentRunnables_1 *create_ComGoogleCommonUtilConcurrentRunnables_1_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentRunnables_1, init)
}
