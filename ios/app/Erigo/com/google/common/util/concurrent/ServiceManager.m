//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/util/concurrent/ServiceManager.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Function.h"
#include "com/google/common/base/MoreObjects.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/base/Predicate.h"
#include "com/google/common/base/Predicates.h"
#include "com/google/common/base/Stopwatch.h"
#include "com/google/common/collect/Collections2.h"
#include "com/google/common/collect/ImmutableCollection.h"
#include "com/google/common/collect/ImmutableList.h"
#include "com/google/common/collect/ImmutableMap.h"
#include "com/google/common/collect/ImmutableMultimap.h"
#include "com/google/common/collect/ImmutableSet.h"
#include "com/google/common/collect/ImmutableSetMultimap.h"
#include "com/google/common/collect/Lists.h"
#include "com/google/common/collect/Maps.h"
#include "com/google/common/collect/MultimapBuilder.h"
#include "com/google/common/collect/Multimaps.h"
#include "com/google/common/collect/Multiset.h"
#include "com/google/common/collect/Ordering.h"
#include "com/google/common/collect/SetMultimap.h"
#include "com/google/common/util/concurrent/AbstractService.h"
#include "com/google/common/util/concurrent/ListenerCallQueue.h"
#include "com/google/common/util/concurrent/Monitor.h"
#include "com/google/common/util/concurrent/MoreExecutors.h"
#include "com/google/common/util/concurrent/Service.h"
#include "com/google/common/util/concurrent/ServiceManager.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Iterable.h"
#include "java/lang/Long.h"
#include "java/lang/ref/WeakReference.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/EnumSet.h"
#include "java/util/IdentityHashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/concurrent/Executor.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/TimeoutException.h"
#include "java/util/function/Function.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"

@class ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState;

#pragma clang diagnostic ignored "-Wprotocol"

@interface ComGoogleCommonUtilConcurrentServiceManager () {
 @public
  ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState *state_;
  ComGoogleCommonCollectImmutableList *services_;
}

@end

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentServiceManager, state_, ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState *)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentServiceManager, services_, ComGoogleCommonCollectImmutableList *)

inline JavaUtilLoggingLogger *ComGoogleCommonUtilConcurrentServiceManager_get_logger();
static JavaUtilLoggingLogger *ComGoogleCommonUtilConcurrentServiceManager_logger;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonUtilConcurrentServiceManager, logger, JavaUtilLoggingLogger *)

inline id<ComGoogleCommonUtilConcurrentListenerCallQueue_Event> ComGoogleCommonUtilConcurrentServiceManager_get_HEALTHY_EVENT();
static id<ComGoogleCommonUtilConcurrentListenerCallQueue_Event> ComGoogleCommonUtilConcurrentServiceManager_HEALTHY_EVENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonUtilConcurrentServiceManager, HEALTHY_EVENT, id<ComGoogleCommonUtilConcurrentListenerCallQueue_Event>)

inline id<ComGoogleCommonUtilConcurrentListenerCallQueue_Event> ComGoogleCommonUtilConcurrentServiceManager_get_STOPPED_EVENT();
static id<ComGoogleCommonUtilConcurrentListenerCallQueue_Event> ComGoogleCommonUtilConcurrentServiceManager_STOPPED_EVENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonUtilConcurrentServiceManager, STOPPED_EVENT, id<ComGoogleCommonUtilConcurrentListenerCallQueue_Event>)

@interface ComGoogleCommonUtilConcurrentServiceManager_1 : NSObject < ComGoogleCommonUtilConcurrentListenerCallQueue_Event >

- (instancetype)init;

- (void)callWithId:(ComGoogleCommonUtilConcurrentServiceManager_Listener *)listener;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentServiceManager_1)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentServiceManager_1_init(ComGoogleCommonUtilConcurrentServiceManager_1 *self);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentServiceManager_1 *new_ComGoogleCommonUtilConcurrentServiceManager_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentServiceManager_1 *create_ComGoogleCommonUtilConcurrentServiceManager_1_init();

@interface ComGoogleCommonUtilConcurrentServiceManager_2 : NSObject < ComGoogleCommonUtilConcurrentListenerCallQueue_Event >

- (instancetype)init;

- (void)callWithId:(ComGoogleCommonUtilConcurrentServiceManager_Listener *)listener;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentServiceManager_2)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentServiceManager_2_init(ComGoogleCommonUtilConcurrentServiceManager_2 *self);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentServiceManager_2 *new_ComGoogleCommonUtilConcurrentServiceManager_2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentServiceManager_2 *create_ComGoogleCommonUtilConcurrentServiceManager_2_init();

@interface ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState : NSObject {
 @public
  ComGoogleCommonUtilConcurrentMonitor *monitor_;
  id<ComGoogleCommonCollectSetMultimap> servicesByState_;
  id<ComGoogleCommonCollectMultiset> states_;
  id<JavaUtilMap> startupTimers_;
  jboolean ready_;
  jboolean transitioned_;
  jint numberOfServices_;
  ComGoogleCommonUtilConcurrentMonitor_Guard *awaitHealthGuard_;
  ComGoogleCommonUtilConcurrentMonitor_Guard *stoppedGuard_;
  ComGoogleCommonUtilConcurrentListenerCallQueue *listeners_;
}

- (instancetype)initWithComGoogleCommonCollectImmutableCollection:(ComGoogleCommonCollectImmutableCollection *)services;

- (void)tryStartTimingWithComGoogleCommonUtilConcurrentService:(id<ComGoogleCommonUtilConcurrentService>)service;

- (void)markReady;

- (void)addListenerWithComGoogleCommonUtilConcurrentServiceManager_Listener:(ComGoogleCommonUtilConcurrentServiceManager_Listener *)listener
                                             withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor;

- (void)awaitHealthy;

- (void)awaitHealthyWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (void)awaitStopped;

- (void)awaitStoppedWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (ComGoogleCommonCollectImmutableMultimap *)servicesByState;

- (ComGoogleCommonCollectImmutableMap *)startupTimes;

- (void)transitionServiceWithComGoogleCommonUtilConcurrentService:(id<ComGoogleCommonUtilConcurrentService>)service
                   withComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)from
                   withComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)to;

- (void)enqueueStoppedEvent;

- (void)enqueueHealthyEvent;

- (void)enqueueFailedEventWithComGoogleCommonUtilConcurrentService:(id<ComGoogleCommonUtilConcurrentService>)service;

- (void)dispatchListenerEvents;

- (void)checkHealthy;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState)

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState, monitor_, ComGoogleCommonUtilConcurrentMonitor *)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState, servicesByState_, id<ComGoogleCommonCollectSetMultimap>)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState, states_, id<ComGoogleCommonCollectMultiset>)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState, startupTimers_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState, awaitHealthGuard_, ComGoogleCommonUtilConcurrentMonitor_Guard *)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState, stoppedGuard_, ComGoogleCommonUtilConcurrentMonitor_Guard *)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState, listeners_, ComGoogleCommonUtilConcurrentListenerCallQueue *)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_initWithComGoogleCommonCollectImmutableCollection_(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState *self, ComGoogleCommonCollectImmutableCollection *services);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState *new_ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_initWithComGoogleCommonCollectImmutableCollection_(ComGoogleCommonCollectImmutableCollection *services) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState *create_ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_initWithComGoogleCommonCollectImmutableCollection_(ComGoogleCommonCollectImmutableCollection *services);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState)

@interface ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_AwaitHealthGuard : ComGoogleCommonUtilConcurrentMonitor_Guard {
 @public
  __unsafe_unretained ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState *this$0_;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState:(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState *)outer$;

- (jboolean)isSatisfied;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_AwaitHealthGuard)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_AwaitHealthGuard_initWithComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_AwaitHealthGuard *self, ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState *outer$);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_AwaitHealthGuard *new_ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_AwaitHealthGuard_initWithComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_AwaitHealthGuard *create_ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_AwaitHealthGuard_initWithComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_AwaitHealthGuard)

@interface ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_StoppedGuard : ComGoogleCommonUtilConcurrentMonitor_Guard {
 @public
  __unsafe_unretained ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState *this$0_;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState:(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState *)outer$;

- (jboolean)isSatisfied;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_StoppedGuard)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_StoppedGuard_initWithComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_StoppedGuard *self, ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState *outer$);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_StoppedGuard *new_ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_StoppedGuard_initWithComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_StoppedGuard *create_ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_StoppedGuard_initWithComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_StoppedGuard)

@interface ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_1 : NSObject < ComGoogleCommonBaseFunction >

- (instancetype)init;

- (JavaLangLong *)applyWithId:(id<JavaUtilMap_Entry>)input;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_1)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_1_init(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_1 *self);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_1 *new_ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_1 *create_ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_1_init();

@interface ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_2 : NSObject < ComGoogleCommonUtilConcurrentListenerCallQueue_Event > {
 @public
  id<ComGoogleCommonUtilConcurrentService> val$service_;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentService:(id<ComGoogleCommonUtilConcurrentService>)capture$0;

- (void)callWithId:(ComGoogleCommonUtilConcurrentServiceManager_Listener *)listener;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_2)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_2_initWithComGoogleCommonUtilConcurrentService_(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_2 *self, id<ComGoogleCommonUtilConcurrentService> capture$0);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_2 *new_ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_2_initWithComGoogleCommonUtilConcurrentService_(id<ComGoogleCommonUtilConcurrentService> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_2 *create_ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_2_initWithComGoogleCommonUtilConcurrentService_(id<ComGoogleCommonUtilConcurrentService> capture$0);

@interface ComGoogleCommonUtilConcurrentServiceManager_ServiceListener : ComGoogleCommonUtilConcurrentService_Listener {
 @public
  id<ComGoogleCommonUtilConcurrentService> service_;
  JavaLangRefWeakReference *state_;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentService:(id<ComGoogleCommonUtilConcurrentService>)service
                                withJavaLangRefWeakReference:(JavaLangRefWeakReference *)state;

- (void)starting;

- (void)running;

- (void)stoppingWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)from;

- (void)terminatedWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)from;

- (void)failedWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)from
                                             withNSException:(NSException *)failure;
#define withJavaLangThrowable withNSException

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentServiceManager_ServiceListener)

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentServiceManager_ServiceListener, service_, id<ComGoogleCommonUtilConcurrentService>)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentServiceManager_ServiceListener, state_, JavaLangRefWeakReference *)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentServiceManager_ServiceListener_initWithComGoogleCommonUtilConcurrentService_withJavaLangRefWeakReference_(ComGoogleCommonUtilConcurrentServiceManager_ServiceListener *self, id<ComGoogleCommonUtilConcurrentService> service, JavaLangRefWeakReference *state);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentServiceManager_ServiceListener *new_ComGoogleCommonUtilConcurrentServiceManager_ServiceListener_initWithComGoogleCommonUtilConcurrentService_withJavaLangRefWeakReference_(id<ComGoogleCommonUtilConcurrentService> service, JavaLangRefWeakReference *state) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentServiceManager_ServiceListener *create_ComGoogleCommonUtilConcurrentServiceManager_ServiceListener_initWithComGoogleCommonUtilConcurrentService_withJavaLangRefWeakReference_(id<ComGoogleCommonUtilConcurrentService> service, JavaLangRefWeakReference *state);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentServiceManager_ServiceListener)

@interface ComGoogleCommonUtilConcurrentServiceManager_NoOpService : ComGoogleCommonUtilConcurrentAbstractService

- (instancetype)init;

- (void)doStart;

- (void)doStop;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentServiceManager_NoOpService)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentServiceManager_NoOpService_init(ComGoogleCommonUtilConcurrentServiceManager_NoOpService *self);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentServiceManager_NoOpService *new_ComGoogleCommonUtilConcurrentServiceManager_NoOpService_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentServiceManager_NoOpService *create_ComGoogleCommonUtilConcurrentServiceManager_NoOpService_init();

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentServiceManager_NoOpService)

@interface ComGoogleCommonUtilConcurrentServiceManager_EmptyServiceManagerWarning : NSException

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentServiceManager_EmptyServiceManagerWarning)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentServiceManager_EmptyServiceManagerWarning_init(ComGoogleCommonUtilConcurrentServiceManager_EmptyServiceManagerWarning *self);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentServiceManager_EmptyServiceManagerWarning *new_ComGoogleCommonUtilConcurrentServiceManager_EmptyServiceManagerWarning_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentServiceManager_EmptyServiceManagerWarning *create_ComGoogleCommonUtilConcurrentServiceManager_EmptyServiceManagerWarning_init();

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentServiceManager_EmptyServiceManagerWarning)

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonUtilConcurrentServiceManager)

@implementation ComGoogleCommonUtilConcurrentServiceManager

- (instancetype)initWithJavaLangIterable:(id<JavaLangIterable>)services {
  ComGoogleCommonUtilConcurrentServiceManager_initWithJavaLangIterable_(self, services);
  return self;
}

- (void)addListenerWithComGoogleCommonUtilConcurrentServiceManager_Listener:(ComGoogleCommonUtilConcurrentServiceManager_Listener *)listener
                                             withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor {
  [((ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState *) nil_chk(state_)) addListenerWithComGoogleCommonUtilConcurrentServiceManager_Listener:listener withJavaUtilConcurrentExecutor:executor];
}

- (void)addListenerWithComGoogleCommonUtilConcurrentServiceManager_Listener:(ComGoogleCommonUtilConcurrentServiceManager_Listener *)listener {
  [((ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState *) nil_chk(state_)) addListenerWithComGoogleCommonUtilConcurrentServiceManager_Listener:listener withJavaUtilConcurrentExecutor:ComGoogleCommonUtilConcurrentMoreExecutors_directExecutor()];
}

- (ComGoogleCommonUtilConcurrentServiceManager *)startAsync {
  for (id<ComGoogleCommonUtilConcurrentService> __strong service in nil_chk(services_)) {
    ComGoogleCommonUtilConcurrentService_State *state = [((id<ComGoogleCommonUtilConcurrentService>) nil_chk(service)) state];
    ComGoogleCommonBasePreconditions_checkStateWithBoolean_withNSString_withId_withId_(state == JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, NEW), @"Service %s is %s, cannot start it.", service, state);
  }
  for (id<ComGoogleCommonUtilConcurrentService> __strong service in services_) {
    @try {
      [((ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState *) nil_chk(state_)) tryStartTimingWithComGoogleCommonUtilConcurrentService:service];
      (void) [((id<ComGoogleCommonUtilConcurrentService>) nil_chk(service)) startAsync];
    }
    @catch (JavaLangIllegalStateException *e) {
      [((JavaUtilLoggingLogger *) nil_chk(ComGoogleCommonUtilConcurrentServiceManager_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$@", @"Unable to start Service ", service) withNSException:e];
    }
  }
  return self;
}

- (void)awaitHealthy {
  [((ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState *) nil_chk(state_)) awaitHealthy];
}

- (void)awaitHealthyWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  [((ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState *) nil_chk(state_)) awaitHealthyWithLong:timeout withJavaUtilConcurrentTimeUnit:unit];
}

- (ComGoogleCommonUtilConcurrentServiceManager *)stopAsync {
  for (id<ComGoogleCommonUtilConcurrentService> __strong service in nil_chk(services_)) {
    (void) [((id<ComGoogleCommonUtilConcurrentService>) nil_chk(service)) stopAsync];
  }
  return self;
}

- (void)awaitStopped {
  [((ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState *) nil_chk(state_)) awaitStopped];
}

- (void)awaitStoppedWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  [((ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState *) nil_chk(state_)) awaitStoppedWithLong:timeout withJavaUtilConcurrentTimeUnit:unit];
}

- (jboolean)isHealthy {
  for (id<ComGoogleCommonUtilConcurrentService> __strong service in nil_chk(services_)) {
    if (![((id<ComGoogleCommonUtilConcurrentService>) nil_chk(service)) isRunning]) {
      return false;
    }
  }
  return true;
}

- (ComGoogleCommonCollectImmutableMultimap *)servicesByState {
  return [((ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState *) nil_chk(state_)) servicesByState];
}

- (ComGoogleCommonCollectImmutableMap *)startupTimes {
  return [((ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState *) nil_chk(state_)) startupTimes];
}

- (NSString *)description {
  return [((ComGoogleCommonBaseMoreObjects_ToStringHelper *) nil_chk([((ComGoogleCommonBaseMoreObjects_ToStringHelper *) nil_chk(ComGoogleCommonBaseMoreObjects_toStringHelperWithIOSClass_(ComGoogleCommonUtilConcurrentServiceManager_class_()))) addWithNSString:@"services" withId:ComGoogleCommonCollectCollections2_filterWithJavaUtilCollection_withComGoogleCommonBasePredicate_(services_, ComGoogleCommonBasePredicates_not__WithComGoogleCommonBasePredicate_(ComGoogleCommonBasePredicates_instanceOfWithIOSClass_(ComGoogleCommonUtilConcurrentServiceManager_NoOpService_class_())))])) description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 4, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentServiceManager;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, 7, -1, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentServiceManager;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 6, 7, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonCollectImmutableMultimap;", 0x1, -1, -1, -1, 9, -1, -1 },
    { NULL, "LComGoogleCommonCollectImmutableMap;", 0x1, -1, -1, -1, 10, -1, -1 },
    { NULL, "LNSString;", 0x1, 11, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangIterable:);
  methods[1].selector = @selector(addListenerWithComGoogleCommonUtilConcurrentServiceManager_Listener:withJavaUtilConcurrentExecutor:);
  methods[2].selector = @selector(addListenerWithComGoogleCommonUtilConcurrentServiceManager_Listener:);
  methods[3].selector = @selector(startAsync);
  methods[4].selector = @selector(awaitHealthy);
  methods[5].selector = @selector(awaitHealthyWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[6].selector = @selector(stopAsync);
  methods[7].selector = @selector(awaitStopped);
  methods[8].selector = @selector(awaitStoppedWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[9].selector = @selector(isHealthy);
  methods[10].selector = @selector(servicesByState);
  methods[11].selector = @selector(startupTimes);
  methods[12].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
    { "HEALTHY_EVENT", "LComGoogleCommonUtilConcurrentListenerCallQueue_Event;", .constantValue.asLong = 0, 0x1a, -1, 13, 14, -1 },
    { "STOPPED_EVENT", "LComGoogleCommonUtilConcurrentListenerCallQueue_Event;", .constantValue.asLong = 0, 0x1a, -1, 15, 14, -1 },
    { "state_", "LComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "services_", "LComGoogleCommonCollectImmutableList;", .constantValue.asLong = 0, 0x12, -1, -1, 16, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangIterable;", "(Ljava/lang/Iterable<+Lcom/google/common/util/concurrent/Service;>;)V", "addListener", "LComGoogleCommonUtilConcurrentServiceManager_Listener;LJavaUtilConcurrentExecutor;", "LComGoogleCommonUtilConcurrentServiceManager_Listener;", "awaitHealthy", "JLJavaUtilConcurrentTimeUnit;", "LJavaUtilConcurrentTimeoutException;", "awaitStopped", "()Lcom/google/common/collect/ImmutableMultimap<Lcom/google/common/util/concurrent/Service$State;Lcom/google/common/util/concurrent/Service;>;", "()Lcom/google/common/collect/ImmutableMap<Lcom/google/common/util/concurrent/Service;Ljava/lang/Long;>;", "toString", &ComGoogleCommonUtilConcurrentServiceManager_logger, &ComGoogleCommonUtilConcurrentServiceManager_HEALTHY_EVENT, "Lcom/google/common/util/concurrent/ListenerCallQueue$Event<Lcom/google/common/util/concurrent/ServiceManager$Listener;>;", &ComGoogleCommonUtilConcurrentServiceManager_STOPPED_EVENT, "Lcom/google/common/collect/ImmutableList<Lcom/google/common/util/concurrent/Service;>;", "LComGoogleCommonUtilConcurrentServiceManager_Listener;LComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState;LComGoogleCommonUtilConcurrentServiceManager_ServiceListener;LComGoogleCommonUtilConcurrentServiceManager_NoOpService;LComGoogleCommonUtilConcurrentServiceManager_EmptyServiceManagerWarning;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentServiceManager = { "ServiceManager", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x11, 13, 5, -1, 17, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentServiceManager;
}

+ (void)initialize {
  if (self == [ComGoogleCommonUtilConcurrentServiceManager class]) {
    ComGoogleCommonUtilConcurrentServiceManager_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([ComGoogleCommonUtilConcurrentServiceManager_class_() getName]);
    ComGoogleCommonUtilConcurrentServiceManager_HEALTHY_EVENT = new_ComGoogleCommonUtilConcurrentServiceManager_1_init();
    ComGoogleCommonUtilConcurrentServiceManager_STOPPED_EVENT = new_ComGoogleCommonUtilConcurrentServiceManager_2_init();
    J2OBJC_SET_INITIALIZED(ComGoogleCommonUtilConcurrentServiceManager)
  }
}

@end

void ComGoogleCommonUtilConcurrentServiceManager_initWithJavaLangIterable_(ComGoogleCommonUtilConcurrentServiceManager *self, id<JavaLangIterable> services) {
  NSObject_init(self);
  ComGoogleCommonCollectImmutableList *copy_ = ComGoogleCommonCollectImmutableList_copyOfWithJavaLangIterable_(services);
  if ([((ComGoogleCommonCollectImmutableList *) nil_chk(copy_)) isEmpty]) {
    [((JavaUtilLoggingLogger *) nil_chk(ComGoogleCommonUtilConcurrentServiceManager_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:@"ServiceManager configured with no services.  Is your application configured properly?" withNSException:new_ComGoogleCommonUtilConcurrentServiceManager_EmptyServiceManagerWarning_init()];
    copy_ = ComGoogleCommonCollectImmutableList_ofWithId_(new_ComGoogleCommonUtilConcurrentServiceManager_NoOpService_init());
  }
  self->state_ = new_ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_initWithComGoogleCommonCollectImmutableCollection_(copy_);
  self->services_ = copy_;
  JavaLangRefWeakReference *stateReference = new_JavaLangRefWeakReference_initWithId_(self->state_);
  for (id<ComGoogleCommonUtilConcurrentService> __strong service in nil_chk(copy_)) {
    [((id<ComGoogleCommonUtilConcurrentService>) nil_chk(service)) addListenerWithComGoogleCommonUtilConcurrentService_Listener:new_ComGoogleCommonUtilConcurrentServiceManager_ServiceListener_initWithComGoogleCommonUtilConcurrentService_withJavaLangRefWeakReference_(service, stateReference) withJavaUtilConcurrentExecutor:ComGoogleCommonUtilConcurrentMoreExecutors_directExecutor()];
    ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_([service state] == JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, NEW), @"Can only manage NEW services, %s", service);
  }
  [self->state_ markReady];
}

ComGoogleCommonUtilConcurrentServiceManager *new_ComGoogleCommonUtilConcurrentServiceManager_initWithJavaLangIterable_(id<JavaLangIterable> services) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentServiceManager, initWithJavaLangIterable_, services)
}

ComGoogleCommonUtilConcurrentServiceManager *create_ComGoogleCommonUtilConcurrentServiceManager_initWithJavaLangIterable_(id<JavaLangIterable> services) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentServiceManager, initWithJavaLangIterable_, services)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentServiceManager)

@implementation ComGoogleCommonUtilConcurrentServiceManager_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentServiceManager_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)callWithId:(ComGoogleCommonUtilConcurrentServiceManager_Listener *)listener {
  [((ComGoogleCommonUtilConcurrentServiceManager_Listener *) nil_chk(listener)) healthy];
}

- (NSString *)description {
  return @"healthy()";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(callWithId:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LComGoogleCommonUtilConcurrentServiceManager_Listener;", "toString", "LComGoogleCommonUtilConcurrentServiceManager;", "Ljava/lang/Object;Lcom/google/common/util/concurrent/ListenerCallQueue$Event<Lcom/google/common/util/concurrent/ServiceManager$Listener;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentServiceManager_1 = { "", "com.google.common.util.concurrent", ptrTable, methods, NULL, 7, 0x8018, 3, 0, 3, -1, -1, 4, -1 };
  return &_ComGoogleCommonUtilConcurrentServiceManager_1;
}

@end

void ComGoogleCommonUtilConcurrentServiceManager_1_init(ComGoogleCommonUtilConcurrentServiceManager_1 *self) {
  NSObject_init(self);
}

ComGoogleCommonUtilConcurrentServiceManager_1 *new_ComGoogleCommonUtilConcurrentServiceManager_1_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentServiceManager_1, init)
}

ComGoogleCommonUtilConcurrentServiceManager_1 *create_ComGoogleCommonUtilConcurrentServiceManager_1_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentServiceManager_1, init)
}

@implementation ComGoogleCommonUtilConcurrentServiceManager_2

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentServiceManager_2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)callWithId:(ComGoogleCommonUtilConcurrentServiceManager_Listener *)listener {
  [((ComGoogleCommonUtilConcurrentServiceManager_Listener *) nil_chk(listener)) stopped];
}

- (NSString *)description {
  return @"stopped()";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(callWithId:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "call", "LComGoogleCommonUtilConcurrentServiceManager_Listener;", "toString", "LComGoogleCommonUtilConcurrentServiceManager;", "Ljava/lang/Object;Lcom/google/common/util/concurrent/ListenerCallQueue$Event<Lcom/google/common/util/concurrent/ServiceManager$Listener;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentServiceManager_2 = { "", "com.google.common.util.concurrent", ptrTable, methods, NULL, 7, 0x8018, 3, 0, 3, -1, -1, 4, -1 };
  return &_ComGoogleCommonUtilConcurrentServiceManager_2;
}

@end

void ComGoogleCommonUtilConcurrentServiceManager_2_init(ComGoogleCommonUtilConcurrentServiceManager_2 *self) {
  NSObject_init(self);
}

ComGoogleCommonUtilConcurrentServiceManager_2 *new_ComGoogleCommonUtilConcurrentServiceManager_2_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentServiceManager_2, init)
}

ComGoogleCommonUtilConcurrentServiceManager_2 *create_ComGoogleCommonUtilConcurrentServiceManager_2_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentServiceManager_2, init)
}

@implementation ComGoogleCommonUtilConcurrentServiceManager_Listener

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentServiceManager_Listener_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)healthy {
}

- (void)stopped {
}

- (void)failureWithComGoogleCommonUtilConcurrentService:(id<ComGoogleCommonUtilConcurrentService>)service {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(healthy);
  methods[2].selector = @selector(stopped);
  methods[3].selector = @selector(failureWithComGoogleCommonUtilConcurrentService:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "failure", "LComGoogleCommonUtilConcurrentService;", "LComGoogleCommonUtilConcurrentServiceManager;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentServiceManager_Listener = { "Listener", "com.google.common.util.concurrent", ptrTable, methods, NULL, 7, 0x409, 4, 0, 2, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentServiceManager_Listener;
}

@end

void ComGoogleCommonUtilConcurrentServiceManager_Listener_init(ComGoogleCommonUtilConcurrentServiceManager_Listener *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentServiceManager_Listener)

@implementation ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState

- (instancetype)initWithComGoogleCommonCollectImmutableCollection:(ComGoogleCommonCollectImmutableCollection *)services {
  ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_initWithComGoogleCommonCollectImmutableCollection_(self, services);
  return self;
}

- (void)tryStartTimingWithComGoogleCommonUtilConcurrentService:(id<ComGoogleCommonUtilConcurrentService>)service {
  [((ComGoogleCommonUtilConcurrentMonitor *) nil_chk(monitor_)) enter];
  @try {
    ComGoogleCommonBaseStopwatch *stopwatch = [((id<JavaUtilMap>) nil_chk(startupTimers_)) getWithId:service];
    if (stopwatch == nil) {
      (void) [startupTimers_ putWithId:service withId:ComGoogleCommonBaseStopwatch_createStarted()];
    }
  }
  @finally {
    [monitor_ leave];
  }
}

- (void)markReady {
  [((ComGoogleCommonUtilConcurrentMonitor *) nil_chk(monitor_)) enter];
  @try {
    if (!transitioned_) {
      ready_ = true;
    }
    else {
      id<JavaUtilList> servicesInBadStates = ComGoogleCommonCollectLists_newArrayList();
      for (id<ComGoogleCommonUtilConcurrentService> __strong service in nil_chk([((ComGoogleCommonCollectImmutableMultimap *) nil_chk([self servicesByState])) values])) {
        if ([((id<ComGoogleCommonUtilConcurrentService>) nil_chk(service)) state] != JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, NEW)) {
          [((id<JavaUtilList>) nil_chk(servicesInBadStates)) addWithId:service];
        }
      }
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Services started transitioning asynchronously before the ServiceManager was constructed: ", servicesInBadStates));
    }
  }
  @finally {
    [monitor_ leave];
  }
}

- (void)addListenerWithComGoogleCommonUtilConcurrentServiceManager_Listener:(ComGoogleCommonUtilConcurrentServiceManager_Listener *)listener
                                             withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor {
  [((ComGoogleCommonUtilConcurrentListenerCallQueue *) nil_chk(listeners_)) addListenerWithId:listener withJavaUtilConcurrentExecutor:executor];
}

- (void)awaitHealthy {
  [((ComGoogleCommonUtilConcurrentMonitor *) nil_chk(monitor_)) enterWhenUninterruptiblyWithComGoogleCommonUtilConcurrentMonitor_Guard:awaitHealthGuard_];
  @try {
    [self checkHealthy];
  }
  @finally {
    [monitor_ leave];
  }
}

- (void)awaitHealthyWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  [((ComGoogleCommonUtilConcurrentMonitor *) nil_chk(monitor_)) enter];
  @try {
    if (![monitor_ waitForUninterruptiblyWithComGoogleCommonUtilConcurrentMonitor_Guard:awaitHealthGuard_ withLong:timeout withJavaUtilConcurrentTimeUnit:unit]) {
      @throw new_JavaUtilConcurrentTimeoutException_initWithNSString_(JreStrcat("$@", @"Timeout waiting for the services to become healthy. The following services have not started: ", ComGoogleCommonCollectMultimaps_filterKeysWithComGoogleCommonCollectSetMultimap_withComGoogleCommonBasePredicate_(servicesByState_, ComGoogleCommonBasePredicates_inWithJavaUtilCollection_(ComGoogleCommonCollectImmutableSet_ofWithId_withId_(JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, NEW), JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, STARTING))))));
    }
    [self checkHealthy];
  }
  @finally {
    [monitor_ leave];
  }
}

- (void)awaitStopped {
  [((ComGoogleCommonUtilConcurrentMonitor *) nil_chk(monitor_)) enterWhenUninterruptiblyWithComGoogleCommonUtilConcurrentMonitor_Guard:stoppedGuard_];
  [monitor_ leave];
}

- (void)awaitStoppedWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  [((ComGoogleCommonUtilConcurrentMonitor *) nil_chk(monitor_)) enter];
  @try {
    if (![monitor_ waitForUninterruptiblyWithComGoogleCommonUtilConcurrentMonitor_Guard:stoppedGuard_ withLong:timeout withJavaUtilConcurrentTimeUnit:unit]) {
      @throw new_JavaUtilConcurrentTimeoutException_initWithNSString_(JreStrcat("$@", @"Timeout waiting for the services to stop. The following services have not stopped: ", ComGoogleCommonCollectMultimaps_filterKeysWithComGoogleCommonCollectSetMultimap_withComGoogleCommonBasePredicate_(servicesByState_, ComGoogleCommonBasePredicates_not__WithComGoogleCommonBasePredicate_(ComGoogleCommonBasePredicates_inWithJavaUtilCollection_(JavaUtilEnumSet_ofWithJavaLangEnum_withJavaLangEnum_(JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, TERMINATED), JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, FAILED)))))));
    }
  }
  @finally {
    [monitor_ leave];
  }
}

- (ComGoogleCommonCollectImmutableMultimap *)servicesByState {
  ComGoogleCommonCollectImmutableSetMultimap_Builder *builder = ComGoogleCommonCollectImmutableSetMultimap_builder();
  [((ComGoogleCommonUtilConcurrentMonitor *) nil_chk(monitor_)) enter];
  @try {
    for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<ComGoogleCommonCollectSetMultimap>) nil_chk(servicesByState_)) entries])) {
      if (!([[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue] isKindOfClass:[ComGoogleCommonUtilConcurrentServiceManager_NoOpService class]])) {
        (void) [((ComGoogleCommonCollectImmutableSetMultimap_Builder *) nil_chk(builder)) putWithJavaUtilMap_Entry:entry_];
      }
    }
  }
  @finally {
    [monitor_ leave];
  }
  return [((ComGoogleCommonCollectImmutableSetMultimap_Builder *) nil_chk(builder)) build];
}

- (ComGoogleCommonCollectImmutableMap *)startupTimes {
  id<JavaUtilList> loadTimes;
  [((ComGoogleCommonUtilConcurrentMonitor *) nil_chk(monitor_)) enter];
  @try {
    loadTimes = ComGoogleCommonCollectLists_newArrayListWithCapacityWithInt_([((id<JavaUtilMap>) nil_chk(startupTimers_)) size]);
    for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([startupTimers_ entrySet])) {
      id<ComGoogleCommonUtilConcurrentService> service = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
      ComGoogleCommonBaseStopwatch *stopWatch = [entry_ getValue];
      if (![((ComGoogleCommonBaseStopwatch *) nil_chk(stopWatch)) isRunning] && !([service isKindOfClass:[ComGoogleCommonUtilConcurrentServiceManager_NoOpService class]])) {
        [((id<JavaUtilList>) nil_chk(loadTimes)) addWithId:ComGoogleCommonCollectMaps_immutableEntryWithId_withId_(service, JavaLangLong_valueOfWithLong_([stopWatch elapsedWithJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)]))];
      }
    }
  }
  @finally {
    [monitor_ leave];
  }
  JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(loadTimes, [((ComGoogleCommonCollectOrdering *) nil_chk(ComGoogleCommonCollectOrdering_natural())) onResultOfWithComGoogleCommonBaseFunction:new_ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_1_init()]);
  return ComGoogleCommonCollectImmutableMap_copyOfWithJavaLangIterable_(loadTimes);
}

- (void)transitionServiceWithComGoogleCommonUtilConcurrentService:(id<ComGoogleCommonUtilConcurrentService>)service
                   withComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)from
                   withComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)to {
  (void) ComGoogleCommonBasePreconditions_checkNotNullWithId_(service);
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_(from != to);
  [((ComGoogleCommonUtilConcurrentMonitor *) nil_chk(monitor_)) enter];
  @try {
    transitioned_ = true;
    if (!ready_) {
      return;
    }
    ComGoogleCommonBasePreconditions_checkStateWithBoolean_withNSString_withId_withId_([((id<ComGoogleCommonCollectSetMultimap>) nil_chk(servicesByState_)) removeWithId:from withId:service], @"Service %s not at the expected location in the state map %s", service, from);
    ComGoogleCommonBasePreconditions_checkStateWithBoolean_withNSString_withId_withId_([servicesByState_ putWithId:to withId:service], @"Service %s in the state map unexpectedly at %s", service, to);
    ComGoogleCommonBaseStopwatch *stopwatch = [((id<JavaUtilMap>) nil_chk(startupTimers_)) getWithId:service];
    if (stopwatch == nil) {
      stopwatch = ComGoogleCommonBaseStopwatch_createStarted();
      (void) [startupTimers_ putWithId:service withId:stopwatch];
    }
    if ([((ComGoogleCommonUtilConcurrentService_State *) nil_chk(to)) compareToWithId:JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, RUNNING)] >= 0 && [((ComGoogleCommonBaseStopwatch *) nil_chk(stopwatch)) isRunning]) {
      (void) [((ComGoogleCommonBaseStopwatch *) nil_chk(stopwatch)) stop];
      if (!([service isKindOfClass:[ComGoogleCommonUtilConcurrentServiceManager_NoOpService class]])) {
        [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(ComGoogleCommonUtilConcurrentServiceManager, logger))) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE) withNSString:@"Started {0} in {1}." withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ service, stopwatch } count:2 type:NSObject_class_()]];
      }
    }
    if (to == JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, FAILED)) {
      [self enqueueFailedEventWithComGoogleCommonUtilConcurrentService:service];
    }
    if ([((id<ComGoogleCommonCollectMultiset>) nil_chk(states_)) countWithId:JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, RUNNING)] == numberOfServices_) {
      [self enqueueHealthyEvent];
    }
    else if ([states_ countWithId:JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, TERMINATED)] + [states_ countWithId:JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, FAILED)] == numberOfServices_) {
      [self enqueueStoppedEvent];
    }
  }
  @finally {
    [monitor_ leave];
    [self dispatchListenerEvents];
  }
}

- (void)enqueueStoppedEvent {
  [((ComGoogleCommonUtilConcurrentListenerCallQueue *) nil_chk(listeners_)) enqueueWithComGoogleCommonUtilConcurrentListenerCallQueue_Event:JreLoadStatic(ComGoogleCommonUtilConcurrentServiceManager, STOPPED_EVENT)];
}

- (void)enqueueHealthyEvent {
  [((ComGoogleCommonUtilConcurrentListenerCallQueue *) nil_chk(listeners_)) enqueueWithComGoogleCommonUtilConcurrentListenerCallQueue_Event:JreLoadStatic(ComGoogleCommonUtilConcurrentServiceManager, HEALTHY_EVENT)];
}

- (void)enqueueFailedEventWithComGoogleCommonUtilConcurrentService:(id<ComGoogleCommonUtilConcurrentService>)service {
  [((ComGoogleCommonUtilConcurrentListenerCallQueue *) nil_chk(listeners_)) enqueueWithComGoogleCommonUtilConcurrentListenerCallQueue_Event:new_ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_2_initWithComGoogleCommonUtilConcurrentService_(service)];
}

- (void)dispatchListenerEvents {
  ComGoogleCommonBasePreconditions_checkStateWithBoolean_withId_(![((ComGoogleCommonUtilConcurrentMonitor *) nil_chk(monitor_)) isOccupiedByCurrentThread], @"It is incorrect to execute listeners with the monitor held.");
  [((ComGoogleCommonUtilConcurrentListenerCallQueue *) nil_chk(listeners_)) dispatch];
}

- (void)checkHealthy {
  if ([((id<ComGoogleCommonCollectMultiset>) nil_chk(states_)) countWithId:JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, RUNNING)] != numberOfServices_) {
    JavaLangIllegalStateException *exception = new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Expected to be healthy after starting. The following services are not running: ", ComGoogleCommonCollectMultimaps_filterKeysWithComGoogleCommonCollectSetMultimap_withComGoogleCommonBasePredicate_(servicesByState_, ComGoogleCommonBasePredicates_not__WithComGoogleCommonBasePredicate_(ComGoogleCommonBasePredicates_equalToWithId_(JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, RUNNING))))));
    @throw exception;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 6, 7, 8, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 7, 8, -1, -1, -1 },
    { NULL, "LComGoogleCommonCollectImmutableMultimap;", 0x0, -1, -1, -1, 10, -1, -1 },
    { NULL, "LComGoogleCommonCollectImmutableMap;", 0x0, -1, -1, -1, 11, -1, -1 },
    { NULL, "V", 0x0, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 14, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonCollectImmutableCollection:);
  methods[1].selector = @selector(tryStartTimingWithComGoogleCommonUtilConcurrentService:);
  methods[2].selector = @selector(markReady);
  methods[3].selector = @selector(addListenerWithComGoogleCommonUtilConcurrentServiceManager_Listener:withJavaUtilConcurrentExecutor:);
  methods[4].selector = @selector(awaitHealthy);
  methods[5].selector = @selector(awaitHealthyWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[6].selector = @selector(awaitStopped);
  methods[7].selector = @selector(awaitStoppedWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[8].selector = @selector(servicesByState);
  methods[9].selector = @selector(startupTimes);
  methods[10].selector = @selector(transitionServiceWithComGoogleCommonUtilConcurrentService:withComGoogleCommonUtilConcurrentService_State:withComGoogleCommonUtilConcurrentService_State:);
  methods[11].selector = @selector(enqueueStoppedEvent);
  methods[12].selector = @selector(enqueueHealthyEvent);
  methods[13].selector = @selector(enqueueFailedEventWithComGoogleCommonUtilConcurrentService:);
  methods[14].selector = @selector(dispatchListenerEvents);
  methods[15].selector = @selector(checkHealthy);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "monitor_", "LComGoogleCommonUtilConcurrentMonitor;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "servicesByState_", "LComGoogleCommonCollectSetMultimap;", .constantValue.asLong = 0, 0x10, -1, -1, 15, -1 },
    { "states_", "LComGoogleCommonCollectMultiset;", .constantValue.asLong = 0, 0x10, -1, -1, 16, -1 },
    { "startupTimers_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x10, -1, -1, 17, -1 },
    { "ready_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "transitioned_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "numberOfServices_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "awaitHealthGuard_", "LComGoogleCommonUtilConcurrentMonitor_Guard;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "stoppedGuard_", "LComGoogleCommonUtilConcurrentMonitor_Guard;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "listeners_", "LComGoogleCommonUtilConcurrentListenerCallQueue;", .constantValue.asLong = 0, 0x10, -1, -1, 18, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonCollectImmutableCollection;", "(Lcom/google/common/collect/ImmutableCollection<Lcom/google/common/util/concurrent/Service;>;)V", "tryStartTiming", "LComGoogleCommonUtilConcurrentService;", "addListener", "LComGoogleCommonUtilConcurrentServiceManager_Listener;LJavaUtilConcurrentExecutor;", "awaitHealthy", "JLJavaUtilConcurrentTimeUnit;", "LJavaUtilConcurrentTimeoutException;", "awaitStopped", "()Lcom/google/common/collect/ImmutableMultimap<Lcom/google/common/util/concurrent/Service$State;Lcom/google/common/util/concurrent/Service;>;", "()Lcom/google/common/collect/ImmutableMap<Lcom/google/common/util/concurrent/Service;Ljava/lang/Long;>;", "transitionService", "LComGoogleCommonUtilConcurrentService;LComGoogleCommonUtilConcurrentService_State;LComGoogleCommonUtilConcurrentService_State;", "enqueueFailedEvent", "Lcom/google/common/collect/SetMultimap<Lcom/google/common/util/concurrent/Service$State;Lcom/google/common/util/concurrent/Service;>;", "Lcom/google/common/collect/Multiset<Lcom/google/common/util/concurrent/Service$State;>;", "Ljava/util/Map<Lcom/google/common/util/concurrent/Service;Lcom/google/common/base/Stopwatch;>;", "Lcom/google/common/util/concurrent/ListenerCallQueue<Lcom/google/common/util/concurrent/ServiceManager$Listener;>;", "LComGoogleCommonUtilConcurrentServiceManager;", "LComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_AwaitHealthGuard;LComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_StoppedGuard;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState = { "ServiceManagerState", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x1a, 16, 10, 19, 20, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState;
}

@end

void ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_initWithComGoogleCommonCollectImmutableCollection_(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState *self, ComGoogleCommonCollectImmutableCollection *services) {
  NSObject_init(self);
  self->monitor_ = new_ComGoogleCommonUtilConcurrentMonitor_init();
  self->servicesByState_ = [((ComGoogleCommonCollectMultimapBuilder_SetMultimapBuilder *) nil_chk([((ComGoogleCommonCollectMultimapBuilder_MultimapBuilderWithKeys *) nil_chk(ComGoogleCommonCollectMultimapBuilder_enumKeysWithIOSClass_(ComGoogleCommonUtilConcurrentService_State_class_()))) linkedHashSetValues])) build];
  self->states_ = [((id<ComGoogleCommonCollectSetMultimap>) nil_chk(self->servicesByState_)) keys];
  self->startupTimers_ = ComGoogleCommonCollectMaps_newIdentityHashMap();
  self->awaitHealthGuard_ = new_ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_AwaitHealthGuard_initWithComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_(self);
  self->stoppedGuard_ = new_ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_StoppedGuard_initWithComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_(self);
  self->listeners_ = new_ComGoogleCommonUtilConcurrentListenerCallQueue_init();
  self->numberOfServices_ = [((ComGoogleCommonCollectImmutableCollection *) nil_chk(services)) size];
  [self->servicesByState_ putAllWithId:JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, NEW) withJavaLangIterable:services];
}

ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState *new_ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_initWithComGoogleCommonCollectImmutableCollection_(ComGoogleCommonCollectImmutableCollection *services) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState, initWithComGoogleCommonCollectImmutableCollection_, services)
}

ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState *create_ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_initWithComGoogleCommonCollectImmutableCollection_(ComGoogleCommonCollectImmutableCollection *services) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState, initWithComGoogleCommonCollectImmutableCollection_, services)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState)

@implementation ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_AwaitHealthGuard

- (instancetype)initWithComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState:(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState *)outer$ {
  ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_AwaitHealthGuard_initWithComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_(self, outer$);
  return self;
}

- (jboolean)isSatisfied {
  return [((id<ComGoogleCommonCollectMultiset>) nil_chk(this$0_->states_)) countWithId:JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, RUNNING)] == this$0_->numberOfServices_ || [this$0_->states_ containsWithId:JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, STOPPING)] || [this$0_->states_ containsWithId:JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, TERMINATED)] || [this$0_->states_ containsWithId:JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, FAILED)];
}

- (void)__javaClone:(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_AwaitHealthGuard *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState:);
  methods[1].selector = @selector(isSatisfied);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_AwaitHealthGuard = { "AwaitHealthGuard", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x10, 2, 1, 0, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_AwaitHealthGuard;
}

@end

void ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_AwaitHealthGuard_initWithComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_AwaitHealthGuard *self, ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState *outer$) {
  self->this$0_ = outer$;
  ComGoogleCommonUtilConcurrentMonitor_Guard_initWithComGoogleCommonUtilConcurrentMonitor_(self, outer$->monitor_);
}

ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_AwaitHealthGuard *new_ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_AwaitHealthGuard_initWithComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState *outer$) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_AwaitHealthGuard, initWithComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_, outer$)
}

ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_AwaitHealthGuard *create_ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_AwaitHealthGuard_initWithComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState *outer$) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_AwaitHealthGuard, initWithComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_AwaitHealthGuard)

@implementation ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_StoppedGuard

- (instancetype)initWithComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState:(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState *)outer$ {
  ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_StoppedGuard_initWithComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_(self, outer$);
  return self;
}

- (jboolean)isSatisfied {
  return [((id<ComGoogleCommonCollectMultiset>) nil_chk(this$0_->states_)) countWithId:JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, TERMINATED)] + [this$0_->states_ countWithId:JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, FAILED)] == this$0_->numberOfServices_;
}

- (void)__javaClone:(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_StoppedGuard *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState:);
  methods[1].selector = @selector(isSatisfied);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_StoppedGuard = { "StoppedGuard", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x10, 2, 1, 0, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_StoppedGuard;
}

@end

void ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_StoppedGuard_initWithComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_StoppedGuard *self, ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState *outer$) {
  self->this$0_ = outer$;
  ComGoogleCommonUtilConcurrentMonitor_Guard_initWithComGoogleCommonUtilConcurrentMonitor_(self, outer$->monitor_);
}

ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_StoppedGuard *new_ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_StoppedGuard_initWithComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState *outer$) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_StoppedGuard, initWithComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_, outer$)
}

ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_StoppedGuard *create_ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_StoppedGuard_initWithComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState *outer$) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_StoppedGuard, initWithComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_StoppedGuard)

@implementation ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaLangLong *)applyWithId:(id<JavaUtilMap_Entry>)input {
  return [((id<JavaUtilMap_Entry>) nil_chk(input)) getValue];
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangLong;", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(applyWithId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "apply", "LJavaUtilMap_Entry;", "(Ljava/util/Map$Entry<Lcom/google/common/util/concurrent/Service;Ljava/lang/Long;>;)Ljava/lang/Long;", "LComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState;", "startupTimes", "Ljava/lang/Object;Lcom/google/common/base/Function<Ljava/util/Map$Entry<Lcom/google/common/util/concurrent/Service;Ljava/lang/Long;>;Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_1 = { "", "com.google.common.util.concurrent", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 3, -1, 4, 5, -1 };
  return &_ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_1;
}

@end

void ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_1_init(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_1 *self) {
  NSObject_init(self);
}

ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_1 *new_ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_1_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_1, init)
}

ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_1 *create_ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_1_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_1, init)
}

@implementation ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_2

- (instancetype)initWithComGoogleCommonUtilConcurrentService:(id<ComGoogleCommonUtilConcurrentService>)capture$0 {
  ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_2_initWithComGoogleCommonUtilConcurrentService_(self, capture$0);
  return self;
}

- (void)callWithId:(ComGoogleCommonUtilConcurrentServiceManager_Listener *)listener {
  [((ComGoogleCommonUtilConcurrentServiceManager_Listener *) nil_chk(listener)) failureWithComGoogleCommonUtilConcurrentService:val$service_];
}

- (NSString *)description {
  return JreStrcat("$@$", @"failed({service=", val$service_, @"})");
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentService:);
  methods[1].selector = @selector(callWithId:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$service_", "LComGoogleCommonUtilConcurrentService;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "call", "LComGoogleCommonUtilConcurrentServiceManager_Listener;", "toString", "LComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState;", "enqueueFailedEventWithComGoogleCommonUtilConcurrentService:", "Ljava/lang/Object;Lcom/google/common/util/concurrent/ListenerCallQueue$Event<Lcom/google/common/util/concurrent/ServiceManager$Listener;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_2 = { "", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x8018, 3, 1, 3, -1, 4, 5, -1 };
  return &_ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_2;
}

@end

void ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_2_initWithComGoogleCommonUtilConcurrentService_(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_2 *self, id<ComGoogleCommonUtilConcurrentService> capture$0) {
  self->val$service_ = capture$0;
  NSObject_init(self);
}

ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_2 *new_ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_2_initWithComGoogleCommonUtilConcurrentService_(id<ComGoogleCommonUtilConcurrentService> capture$0) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_2, initWithComGoogleCommonUtilConcurrentService_, capture$0)
}

ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_2 *create_ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_2_initWithComGoogleCommonUtilConcurrentService_(id<ComGoogleCommonUtilConcurrentService> capture$0) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState_2, initWithComGoogleCommonUtilConcurrentService_, capture$0)
}

@implementation ComGoogleCommonUtilConcurrentServiceManager_ServiceListener

- (instancetype)initWithComGoogleCommonUtilConcurrentService:(id<ComGoogleCommonUtilConcurrentService>)service
                                withJavaLangRefWeakReference:(JavaLangRefWeakReference *)state {
  ComGoogleCommonUtilConcurrentServiceManager_ServiceListener_initWithComGoogleCommonUtilConcurrentService_withJavaLangRefWeakReference_(self, service, state);
  return self;
}

- (void)starting {
  ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState *state = [((JavaLangRefWeakReference *) nil_chk(self->state_)) get];
  if (state != nil) {
    [state transitionServiceWithComGoogleCommonUtilConcurrentService:service_ withComGoogleCommonUtilConcurrentService_State:JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, NEW) withComGoogleCommonUtilConcurrentService_State:JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, STARTING)];
    if (!([service_ isKindOfClass:[ComGoogleCommonUtilConcurrentServiceManager_NoOpService class]])) {
      [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(ComGoogleCommonUtilConcurrentServiceManager, logger))) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE) withNSString:@"Starting {0}." withId:service_];
    }
  }
}

- (void)running {
  ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState *state = [((JavaLangRefWeakReference *) nil_chk(self->state_)) get];
  if (state != nil) {
    [state transitionServiceWithComGoogleCommonUtilConcurrentService:service_ withComGoogleCommonUtilConcurrentService_State:JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, STARTING) withComGoogleCommonUtilConcurrentService_State:JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, RUNNING)];
  }
}

- (void)stoppingWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)from {
  ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState *state = [((JavaLangRefWeakReference *) nil_chk(self->state_)) get];
  if (state != nil) {
    [state transitionServiceWithComGoogleCommonUtilConcurrentService:service_ withComGoogleCommonUtilConcurrentService_State:from withComGoogleCommonUtilConcurrentService_State:JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, STOPPING)];
  }
}

- (void)terminatedWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)from {
  ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState *state = [((JavaLangRefWeakReference *) nil_chk(self->state_)) get];
  if (state != nil) {
    if (!([service_ isKindOfClass:[ComGoogleCommonUtilConcurrentServiceManager_NoOpService class]])) {
      [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(ComGoogleCommonUtilConcurrentServiceManager, logger))) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE) withNSString:@"Service {0} has terminated. Previous state was: {1}" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ service_, from } count:2 type:NSObject_class_()]];
    }
    [state transitionServiceWithComGoogleCommonUtilConcurrentService:service_ withComGoogleCommonUtilConcurrentService_State:from withComGoogleCommonUtilConcurrentService_State:JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, TERMINATED)];
  }
}

- (void)failedWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)from
                                             withNSException:(NSException *)failure {
  ComGoogleCommonUtilConcurrentServiceManager_ServiceManagerState *state = [((JavaLangRefWeakReference *) nil_chk(self->state_)) get];
  if (state != nil) {
    jboolean log = !([service_ isKindOfClass:[ComGoogleCommonUtilConcurrentServiceManager_NoOpService class]]);
    if (log) {
      [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(ComGoogleCommonUtilConcurrentServiceManager, logger))) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:JreStrcat("$@$@$", @"Service ", service_, @" has failed in the ", from, @" state.") withNSException:failure];
    }
    [state transitionServiceWithComGoogleCommonUtilConcurrentService:service_ withComGoogleCommonUtilConcurrentService_State:from withComGoogleCommonUtilConcurrentService_State:JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, FAILED)];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentService:withJavaLangRefWeakReference:);
  methods[1].selector = @selector(starting);
  methods[2].selector = @selector(running);
  methods[3].selector = @selector(stoppingWithComGoogleCommonUtilConcurrentService_State:);
  methods[4].selector = @selector(terminatedWithComGoogleCommonUtilConcurrentService_State:);
  methods[5].selector = @selector(failedWithComGoogleCommonUtilConcurrentService_State:withNSException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "service_", "LComGoogleCommonUtilConcurrentService;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "state_", "LJavaLangRefWeakReference;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentService;LJavaLangRefWeakReference;", "(Lcom/google/common/util/concurrent/Service;Ljava/lang/ref/WeakReference<Lcom/google/common/util/concurrent/ServiceManager$ServiceManagerState;>;)V", "stopping", "LComGoogleCommonUtilConcurrentService_State;", "terminated", "failed", "LComGoogleCommonUtilConcurrentService_State;LNSException;", "Ljava/lang/ref/WeakReference<Lcom/google/common/util/concurrent/ServiceManager$ServiceManagerState;>;", "LComGoogleCommonUtilConcurrentServiceManager;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentServiceManager_ServiceListener = { "ServiceListener", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x1a, 6, 2, 8, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentServiceManager_ServiceListener;
}

@end

void ComGoogleCommonUtilConcurrentServiceManager_ServiceListener_initWithComGoogleCommonUtilConcurrentService_withJavaLangRefWeakReference_(ComGoogleCommonUtilConcurrentServiceManager_ServiceListener *self, id<ComGoogleCommonUtilConcurrentService> service, JavaLangRefWeakReference *state) {
  ComGoogleCommonUtilConcurrentService_Listener_init(self);
  self->service_ = service;
  self->state_ = state;
}

ComGoogleCommonUtilConcurrentServiceManager_ServiceListener *new_ComGoogleCommonUtilConcurrentServiceManager_ServiceListener_initWithComGoogleCommonUtilConcurrentService_withJavaLangRefWeakReference_(id<ComGoogleCommonUtilConcurrentService> service, JavaLangRefWeakReference *state) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentServiceManager_ServiceListener, initWithComGoogleCommonUtilConcurrentService_withJavaLangRefWeakReference_, service, state)
}

ComGoogleCommonUtilConcurrentServiceManager_ServiceListener *create_ComGoogleCommonUtilConcurrentServiceManager_ServiceListener_initWithComGoogleCommonUtilConcurrentService_withJavaLangRefWeakReference_(id<ComGoogleCommonUtilConcurrentService> service, JavaLangRefWeakReference *state) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentServiceManager_ServiceListener, initWithComGoogleCommonUtilConcurrentService_withJavaLangRefWeakReference_, service, state)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentServiceManager_ServiceListener)

@implementation ComGoogleCommonUtilConcurrentServiceManager_NoOpService

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentServiceManager_NoOpService_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)doStart {
  [self notifyStarted];
}

- (void)doStop {
  [self notifyStopped];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(doStart);
  methods[2].selector = @selector(doStop);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentServiceManager;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentServiceManager_NoOpService = { "NoOpService", "com.google.common.util.concurrent", ptrTable, methods, NULL, 7, 0x1a, 3, 0, 0, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentServiceManager_NoOpService;
}

@end

void ComGoogleCommonUtilConcurrentServiceManager_NoOpService_init(ComGoogleCommonUtilConcurrentServiceManager_NoOpService *self) {
  ComGoogleCommonUtilConcurrentAbstractService_init(self);
}

ComGoogleCommonUtilConcurrentServiceManager_NoOpService *new_ComGoogleCommonUtilConcurrentServiceManager_NoOpService_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentServiceManager_NoOpService, init)
}

ComGoogleCommonUtilConcurrentServiceManager_NoOpService *create_ComGoogleCommonUtilConcurrentServiceManager_NoOpService_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentServiceManager_NoOpService, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentServiceManager_NoOpService)

@implementation ComGoogleCommonUtilConcurrentServiceManager_EmptyServiceManagerWarning

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentServiceManager_EmptyServiceManagerWarning_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentServiceManager;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentServiceManager_EmptyServiceManagerWarning = { "EmptyServiceManagerWarning", "com.google.common.util.concurrent", ptrTable, methods, NULL, 7, 0x1a, 1, 0, 0, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentServiceManager_EmptyServiceManagerWarning;
}

@end

void ComGoogleCommonUtilConcurrentServiceManager_EmptyServiceManagerWarning_init(ComGoogleCommonUtilConcurrentServiceManager_EmptyServiceManagerWarning *self) {
  NSException_init(self);
}

ComGoogleCommonUtilConcurrentServiceManager_EmptyServiceManagerWarning *new_ComGoogleCommonUtilConcurrentServiceManager_EmptyServiceManagerWarning_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentServiceManager_EmptyServiceManagerWarning, init)
}

ComGoogleCommonUtilConcurrentServiceManager_EmptyServiceManagerWarning *create_ComGoogleCommonUtilConcurrentServiceManager_EmptyServiceManagerWarning_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentServiceManager_EmptyServiceManagerWarning, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentServiceManager_EmptyServiceManagerWarning)
