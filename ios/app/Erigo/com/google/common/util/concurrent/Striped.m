//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/util/concurrent/Striped.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/MoreObjects.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/base/Supplier.h"
#include "com/google/common/collect/ImmutableList.h"
#include "com/google/common/collect/Iterables.h"
#include "com/google/common/collect/MapMaker.h"
#include "com/google/common/math/IntMath.h"
#include "com/google/common/primitives/Ints.h"
#include "com/google/common/util/concurrent/Striped.h"
#include "java/lang/Integer.h"
#include "java/lang/Iterable.h"
#include "java/lang/ref/Reference.h"
#include "java/lang/ref/ReferenceQueue.h"
#include "java/lang/ref/WeakReference.h"
#include "java/math/RoundingMode.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/concurrent/ConcurrentMap.h"
#include "java/util/concurrent/Semaphore.h"
#include "java/util/concurrent/atomic/AtomicReferenceArray.h"
#include "java/util/concurrent/locks/Lock.h"
#include "java/util/concurrent/locks/ReadWriteLock.h"
#include "java/util/concurrent/locks/ReentrantLock.h"
#include "java/util/concurrent/locks/ReentrantReadWriteLock.h"

@interface ComGoogleCommonUtilConcurrentStriped ()

- (instancetype)init;

+ (ComGoogleCommonUtilConcurrentStriped *)lazyWithInt:(jint)stripes
                      withComGoogleCommonBaseSupplier:(id<ComGoogleCommonBaseSupplier>)supplier;

+ (jint)ceilToPowerOfTwoWithInt:(jint)x;

+ (jint)smearWithInt:(jint)hashCode;

@end

inline jint ComGoogleCommonUtilConcurrentStriped_get_LARGE_LAZY_CUTOFF();
#define ComGoogleCommonUtilConcurrentStriped_LARGE_LAZY_CUTOFF 1024
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonUtilConcurrentStriped, LARGE_LAZY_CUTOFF, jint)

inline id<ComGoogleCommonBaseSupplier> ComGoogleCommonUtilConcurrentStriped_get_READ_WRITE_LOCK_SUPPLIER();
static id<ComGoogleCommonBaseSupplier> ComGoogleCommonUtilConcurrentStriped_READ_WRITE_LOCK_SUPPLIER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonUtilConcurrentStriped, READ_WRITE_LOCK_SUPPLIER, id<ComGoogleCommonBaseSupplier>)

inline jint ComGoogleCommonUtilConcurrentStriped_get_ALL_SET();
#define ComGoogleCommonUtilConcurrentStriped_ALL_SET -1
J2OBJC_STATIC_FIELD_CONSTANT(ComGoogleCommonUtilConcurrentStriped, ALL_SET, jint)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentStriped_init(ComGoogleCommonUtilConcurrentStriped *self);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentStriped *ComGoogleCommonUtilConcurrentStriped_lazyWithInt_withComGoogleCommonBaseSupplier_(jint stripes, id<ComGoogleCommonBaseSupplier> supplier);

__attribute__((unused)) static jint ComGoogleCommonUtilConcurrentStriped_ceilToPowerOfTwoWithInt_(jint x);

__attribute__((unused)) static jint ComGoogleCommonUtilConcurrentStriped_smearWithInt_(jint hashCode);

@interface ComGoogleCommonUtilConcurrentStriped_1 : NSObject < ComGoogleCommonBaseSupplier >

- (instancetype)init;

- (id<JavaUtilConcurrentLocksLock>)get;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentStriped_1)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentStriped_1_init(ComGoogleCommonUtilConcurrentStriped_1 *self);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentStriped_1 *new_ComGoogleCommonUtilConcurrentStriped_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentStriped_1 *create_ComGoogleCommonUtilConcurrentStriped_1_init();

@interface ComGoogleCommonUtilConcurrentStriped_2 : NSObject < ComGoogleCommonBaseSupplier >

- (instancetype)init;

- (id<JavaUtilConcurrentLocksLock>)get;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentStriped_2)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentStriped_2_init(ComGoogleCommonUtilConcurrentStriped_2 *self);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentStriped_2 *new_ComGoogleCommonUtilConcurrentStriped_2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentStriped_2 *create_ComGoogleCommonUtilConcurrentStriped_2_init();

@interface ComGoogleCommonUtilConcurrentStriped_3 : NSObject < ComGoogleCommonBaseSupplier > {
 @public
  jint val$permits_;
}

- (instancetype)initWithInt:(jint)capture$0;

- (JavaUtilConcurrentSemaphore *)get;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentStriped_3)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentStriped_3_initWithInt_(ComGoogleCommonUtilConcurrentStriped_3 *self, jint capture$0);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentStriped_3 *new_ComGoogleCommonUtilConcurrentStriped_3_initWithInt_(jint capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentStriped_3 *create_ComGoogleCommonUtilConcurrentStriped_3_initWithInt_(jint capture$0);

@interface ComGoogleCommonUtilConcurrentStriped_4 : NSObject < ComGoogleCommonBaseSupplier > {
 @public
  jint val$permits_;
}

- (instancetype)initWithInt:(jint)capture$0;

- (JavaUtilConcurrentSemaphore *)get;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentStriped_4)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentStriped_4_initWithInt_(ComGoogleCommonUtilConcurrentStriped_4 *self, jint capture$0);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentStriped_4 *new_ComGoogleCommonUtilConcurrentStriped_4_initWithInt_(jint capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentStriped_4 *create_ComGoogleCommonUtilConcurrentStriped_4_initWithInt_(jint capture$0);

@interface ComGoogleCommonUtilConcurrentStriped_5 : NSObject < ComGoogleCommonBaseSupplier >

- (instancetype)init;

- (id<JavaUtilConcurrentLocksReadWriteLock>)get;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentStriped_5)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentStriped_5_init(ComGoogleCommonUtilConcurrentStriped_5 *self);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentStriped_5 *new_ComGoogleCommonUtilConcurrentStriped_5_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentStriped_5 *create_ComGoogleCommonUtilConcurrentStriped_5_init();

__attribute__((unused)) static jint ComGoogleCommonUtilConcurrentStriped_PowerOfTwoStriped_indexForWithId_(ComGoogleCommonUtilConcurrentStriped_PowerOfTwoStriped *self, id key);

@interface ComGoogleCommonUtilConcurrentStriped_CompactStriped : ComGoogleCommonUtilConcurrentStriped_PowerOfTwoStriped {
 @public
  IOSObjectArray *array_;
}

- (instancetype)initWithInt:(jint)stripes
withComGoogleCommonBaseSupplier:(id<ComGoogleCommonBaseSupplier>)supplier;

- (id)getAtWithInt:(jint)index;

- (jint)size;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentStriped_CompactStriped)

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentStriped_CompactStriped, array_, IOSObjectArray *)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentStriped_CompactStriped_initWithInt_withComGoogleCommonBaseSupplier_(ComGoogleCommonUtilConcurrentStriped_CompactStriped *self, jint stripes, id<ComGoogleCommonBaseSupplier> supplier);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentStriped_CompactStriped *new_ComGoogleCommonUtilConcurrentStriped_CompactStriped_initWithInt_withComGoogleCommonBaseSupplier_(jint stripes, id<ComGoogleCommonBaseSupplier> supplier) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentStriped_CompactStriped *create_ComGoogleCommonUtilConcurrentStriped_CompactStriped_initWithInt_withComGoogleCommonBaseSupplier_(jint stripes, id<ComGoogleCommonBaseSupplier> supplier);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentStriped_CompactStriped)

@interface ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped ()

- (void)drainQueue;

@end

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped_drainQueue(ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped *self);

@interface ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped_ArrayReference : JavaLangRefWeakReference {
 @public
  jint index_;
}

- (instancetype)initWithId:(id)referent
                   withInt:(jint)index
withJavaLangRefReferenceQueue:(JavaLangRefReferenceQueue *)queue;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped_ArrayReference)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped_ArrayReference_initWithId_withInt_withJavaLangRefReferenceQueue_(ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped_ArrayReference *self, id referent, jint index, JavaLangRefReferenceQueue *queue);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped_ArrayReference *new_ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped_ArrayReference_initWithId_withInt_withJavaLangRefReferenceQueue_(id referent, jint index, JavaLangRefReferenceQueue *queue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped_ArrayReference *create_ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped_ArrayReference_initWithId_withInt_withJavaLangRefReferenceQueue_(id referent, jint index, JavaLangRefReferenceQueue *queue);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped_ArrayReference)

@interface ComGoogleCommonUtilConcurrentStriped_PaddedLock : JavaUtilConcurrentLocksReentrantLock {
 @public
  jlong unused1_;
  jlong unused2_;
  jlong unused3_;
}

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentStriped_PaddedLock)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentStriped_PaddedLock_init(ComGoogleCommonUtilConcurrentStriped_PaddedLock *self);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentStriped_PaddedLock *new_ComGoogleCommonUtilConcurrentStriped_PaddedLock_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentStriped_PaddedLock *create_ComGoogleCommonUtilConcurrentStriped_PaddedLock_init();

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentStriped_PaddedLock)

@interface ComGoogleCommonUtilConcurrentStriped_PaddedSemaphore : JavaUtilConcurrentSemaphore {
 @public
  jlong unused1_;
  jlong unused2_;
  jlong unused3_;
}

- (instancetype)initWithInt:(jint)permits;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentStriped_PaddedSemaphore)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentStriped_PaddedSemaphore_initWithInt_(ComGoogleCommonUtilConcurrentStriped_PaddedSemaphore *self, jint permits);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentStriped_PaddedSemaphore *new_ComGoogleCommonUtilConcurrentStriped_PaddedSemaphore_initWithInt_(jint permits) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentStriped_PaddedSemaphore *create_ComGoogleCommonUtilConcurrentStriped_PaddedSemaphore_initWithInt_(jint permits);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentStriped_PaddedSemaphore)

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonUtilConcurrentStriped)

@implementation ComGoogleCommonUtilConcurrentStriped

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentStriped_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)getWithId:(id)key {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)getAtWithInt:(jint)index {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)indexForWithId:(id)key {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)size {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<JavaLangIterable>)bulkGetWithJavaLangIterable:(id<JavaLangIterable>)keys {
  IOSObjectArray *array = ComGoogleCommonCollectIterables_toArrayWithJavaLangIterable_withIOSClass_(keys, NSObject_class_());
  if (((IOSObjectArray *) nil_chk(array))->size_ == 0) {
    return ComGoogleCommonCollectImmutableList_of();
  }
  IOSIntArray *stripes = [IOSIntArray newArrayWithLength:array->size_];
  for (jint i = 0; i < array->size_; i++) {
    *IOSIntArray_GetRef(stripes, i) = [self indexForWithId:IOSObjectArray_Get(array, i)];
  }
  JavaUtilArrays_sortWithIntArray_(stripes);
  jint previousStripe = IOSIntArray_Get(stripes, 0);
  (void) IOSObjectArray_Set(array, 0, [self getAtWithInt:previousStripe]);
  for (jint i = 1; i < array->size_; i++) {
    jint currentStripe = IOSIntArray_Get(stripes, i);
    if (currentStripe == previousStripe) {
      (void) IOSObjectArray_Set(array, i, IOSObjectArray_Get(array, i - 1));
    }
    else {
      (void) IOSObjectArray_Set(array, i, [self getAtWithInt:currentStripe]);
      previousStripe = currentStripe;
    }
  }
  id<JavaUtilList> asList = JavaUtilArrays_asListWithNSObjectArray_(array);
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(asList);
}

+ (ComGoogleCommonUtilConcurrentStriped *)lockWithInt:(jint)stripes {
  return ComGoogleCommonUtilConcurrentStriped_lockWithInt_(stripes);
}

+ (ComGoogleCommonUtilConcurrentStriped *)lazyWeakLockWithInt:(jint)stripes {
  return ComGoogleCommonUtilConcurrentStriped_lazyWeakLockWithInt_(stripes);
}

+ (ComGoogleCommonUtilConcurrentStriped *)lazyWithInt:(jint)stripes
                      withComGoogleCommonBaseSupplier:(id<ComGoogleCommonBaseSupplier>)supplier {
  return ComGoogleCommonUtilConcurrentStriped_lazyWithInt_withComGoogleCommonBaseSupplier_(stripes, supplier);
}

+ (ComGoogleCommonUtilConcurrentStriped *)semaphoreWithInt:(jint)stripes
                                                   withInt:(jint)permits {
  return ComGoogleCommonUtilConcurrentStriped_semaphoreWithInt_withInt_(stripes, permits);
}

+ (ComGoogleCommonUtilConcurrentStriped *)lazyWeakSemaphoreWithInt:(jint)stripes
                                                           withInt:(jint)permits {
  return ComGoogleCommonUtilConcurrentStriped_lazyWeakSemaphoreWithInt_withInt_(stripes, permits);
}

+ (ComGoogleCommonUtilConcurrentStriped *)readWriteLockWithInt:(jint)stripes {
  return ComGoogleCommonUtilConcurrentStriped_readWriteLockWithInt_(stripes);
}

+ (ComGoogleCommonUtilConcurrentStriped *)lazyWeakReadWriteLockWithInt:(jint)stripes {
  return ComGoogleCommonUtilConcurrentStriped_lazyWeakReadWriteLockWithInt_(stripes);
}

+ (jint)ceilToPowerOfTwoWithInt:(jint)x {
  return ComGoogleCommonUtilConcurrentStriped_ceilToPowerOfTwoWithInt_(x);
}

+ (jint)smearWithInt:(jint)hashCode {
  return ComGoogleCommonUtilConcurrentStriped_smearWithInt_(hashCode);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x401, 0, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x401, 3, 4, -1, 5, -1, -1 },
    { NULL, "I", 0x400, 6, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x1, 7, 8, -1, 9, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentStriped;", 0x9, 10, 4, -1, 11, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentStriped;", 0x9, 12, 4, -1, 11, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentStriped;", 0xa, 13, 14, -1, 15, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentStriped;", 0x9, 16, 17, -1, 18, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentStriped;", 0x9, 19, 17, -1, 18, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentStriped;", 0x9, 20, 4, -1, 21, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentStriped;", 0x9, 22, 4, -1, 21, -1, -1 },
    { NULL, "I", 0xa, 23, 4, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 24, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getWithId:);
  methods[2].selector = @selector(getAtWithInt:);
  methods[3].selector = @selector(indexForWithId:);
  methods[4].selector = @selector(size);
  methods[5].selector = @selector(bulkGetWithJavaLangIterable:);
  methods[6].selector = @selector(lockWithInt:);
  methods[7].selector = @selector(lazyWeakLockWithInt:);
  methods[8].selector = @selector(lazyWithInt:withComGoogleCommonBaseSupplier:);
  methods[9].selector = @selector(semaphoreWithInt:withInt:);
  methods[10].selector = @selector(lazyWeakSemaphoreWithInt:withInt:);
  methods[11].selector = @selector(readWriteLockWithInt:);
  methods[12].selector = @selector(lazyWeakReadWriteLockWithInt:);
  methods[13].selector = @selector(ceilToPowerOfTwoWithInt:);
  methods[14].selector = @selector(smearWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LARGE_LAZY_CUTOFF", "I", .constantValue.asInt = ComGoogleCommonUtilConcurrentStriped_LARGE_LAZY_CUTOFF, 0x1a, -1, -1, -1, -1 },
    { "READ_WRITE_LOCK_SUPPLIER", "LComGoogleCommonBaseSupplier;", .constantValue.asLong = 0, 0x1a, -1, 25, 26, -1 },
    { "ALL_SET", "I", .constantValue.asInt = ComGoogleCommonUtilConcurrentStriped_ALL_SET, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "get", "LNSObject;", "(Ljava/lang/Object;)TL;", "getAt", "I", "(I)TL;", "indexFor", "bulkGet", "LJavaLangIterable;", "(Ljava/lang/Iterable<*>;)Ljava/lang/Iterable<TL;>;", "lock", "(I)Lcom/google/common/util/concurrent/Striped<Ljava/util/concurrent/locks/Lock;>;", "lazyWeakLock", "lazy", "ILComGoogleCommonBaseSupplier;", "<L:Ljava/lang/Object;>(ILcom/google/common/base/Supplier<TL;>;)Lcom/google/common/util/concurrent/Striped<TL;>;", "semaphore", "II", "(II)Lcom/google/common/util/concurrent/Striped<Ljava/util/concurrent/Semaphore;>;", "lazyWeakSemaphore", "readWriteLock", "(I)Lcom/google/common/util/concurrent/Striped<Ljava/util/concurrent/locks/ReadWriteLock;>;", "lazyWeakReadWriteLock", "ceilToPowerOfTwo", "smear", &ComGoogleCommonUtilConcurrentStriped_READ_WRITE_LOCK_SUPPLIER, "Lcom/google/common/base/Supplier<Ljava/util/concurrent/locks/ReadWriteLock;>;", "LComGoogleCommonUtilConcurrentStriped_PowerOfTwoStriped;LComGoogleCommonUtilConcurrentStriped_CompactStriped;LComGoogleCommonUtilConcurrentStriped_SmallLazyStriped;LComGoogleCommonUtilConcurrentStriped_LargeLazyStriped;LComGoogleCommonUtilConcurrentStriped_PaddedLock;LComGoogleCommonUtilConcurrentStriped_PaddedSemaphore;", "<L:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentStriped = { "Striped", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x401, 15, 3, -1, 27, -1, 28, -1 };
  return &_ComGoogleCommonUtilConcurrentStriped;
}

+ (void)initialize {
  if (self == [ComGoogleCommonUtilConcurrentStriped class]) {
    ComGoogleCommonUtilConcurrentStriped_READ_WRITE_LOCK_SUPPLIER = new_ComGoogleCommonUtilConcurrentStriped_5_init();
    J2OBJC_SET_INITIALIZED(ComGoogleCommonUtilConcurrentStriped)
  }
}

@end

void ComGoogleCommonUtilConcurrentStriped_init(ComGoogleCommonUtilConcurrentStriped *self) {
  NSObject_init(self);
}

ComGoogleCommonUtilConcurrentStriped *ComGoogleCommonUtilConcurrentStriped_lockWithInt_(jint stripes) {
  ComGoogleCommonUtilConcurrentStriped_initialize();
  return new_ComGoogleCommonUtilConcurrentStriped_CompactStriped_initWithInt_withComGoogleCommonBaseSupplier_(stripes, new_ComGoogleCommonUtilConcurrentStriped_1_init());
}

ComGoogleCommonUtilConcurrentStriped *ComGoogleCommonUtilConcurrentStriped_lazyWeakLockWithInt_(jint stripes) {
  ComGoogleCommonUtilConcurrentStriped_initialize();
  return ComGoogleCommonUtilConcurrentStriped_lazyWithInt_withComGoogleCommonBaseSupplier_(stripes, new_ComGoogleCommonUtilConcurrentStriped_2_init());
}

ComGoogleCommonUtilConcurrentStriped *ComGoogleCommonUtilConcurrentStriped_lazyWithInt_withComGoogleCommonBaseSupplier_(jint stripes, id<ComGoogleCommonBaseSupplier> supplier) {
  ComGoogleCommonUtilConcurrentStriped_initialize();
  return stripes < ComGoogleCommonUtilConcurrentStriped_LARGE_LAZY_CUTOFF ? new_ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped_initWithInt_withComGoogleCommonBaseSupplier_(stripes, supplier) : (id) new_ComGoogleCommonUtilConcurrentStriped_LargeLazyStriped_initWithInt_withComGoogleCommonBaseSupplier_(stripes, supplier);
}

ComGoogleCommonUtilConcurrentStriped *ComGoogleCommonUtilConcurrentStriped_semaphoreWithInt_withInt_(jint stripes, jint permits) {
  ComGoogleCommonUtilConcurrentStriped_initialize();
  return new_ComGoogleCommonUtilConcurrentStriped_CompactStriped_initWithInt_withComGoogleCommonBaseSupplier_(stripes, new_ComGoogleCommonUtilConcurrentStriped_3_initWithInt_(permits));
}

ComGoogleCommonUtilConcurrentStriped *ComGoogleCommonUtilConcurrentStriped_lazyWeakSemaphoreWithInt_withInt_(jint stripes, jint permits) {
  ComGoogleCommonUtilConcurrentStriped_initialize();
  return ComGoogleCommonUtilConcurrentStriped_lazyWithInt_withComGoogleCommonBaseSupplier_(stripes, new_ComGoogleCommonUtilConcurrentStriped_4_initWithInt_(permits));
}

ComGoogleCommonUtilConcurrentStriped *ComGoogleCommonUtilConcurrentStriped_readWriteLockWithInt_(jint stripes) {
  ComGoogleCommonUtilConcurrentStriped_initialize();
  return new_ComGoogleCommonUtilConcurrentStriped_CompactStriped_initWithInt_withComGoogleCommonBaseSupplier_(stripes, ComGoogleCommonUtilConcurrentStriped_READ_WRITE_LOCK_SUPPLIER);
}

ComGoogleCommonUtilConcurrentStriped *ComGoogleCommonUtilConcurrentStriped_lazyWeakReadWriteLockWithInt_(jint stripes) {
  ComGoogleCommonUtilConcurrentStriped_initialize();
  return ComGoogleCommonUtilConcurrentStriped_lazyWithInt_withComGoogleCommonBaseSupplier_(stripes, ComGoogleCommonUtilConcurrentStriped_READ_WRITE_LOCK_SUPPLIER);
}

jint ComGoogleCommonUtilConcurrentStriped_ceilToPowerOfTwoWithInt_(jint x) {
  ComGoogleCommonUtilConcurrentStriped_initialize();
  return JreLShift32(1, ComGoogleCommonMathIntMath_log2WithInt_withJavaMathRoundingMode_(x, JreLoadEnum(JavaMathRoundingMode, CEILING)));
}

jint ComGoogleCommonUtilConcurrentStriped_smearWithInt_(jint hashCode) {
  ComGoogleCommonUtilConcurrentStriped_initialize();
  hashCode ^= (JreURShift32(hashCode, 20)) ^ (JreURShift32(hashCode, 12));
  return hashCode ^ (JreURShift32(hashCode, 7)) ^ (JreURShift32(hashCode, 4));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentStriped)

@implementation ComGoogleCommonUtilConcurrentStriped_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentStriped_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilConcurrentLocksLock>)get {
  return new_ComGoogleCommonUtilConcurrentStriped_PaddedLock_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentLocksLock;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(get);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentStriped;", "lockWithInt:", "Ljava/lang/Object;Lcom/google/common/base/Supplier<Ljava/util/concurrent/locks/Lock;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentStriped_1 = { "", "com.google.common.util.concurrent", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 0, -1, 1, 2, -1 };
  return &_ComGoogleCommonUtilConcurrentStriped_1;
}

@end

void ComGoogleCommonUtilConcurrentStriped_1_init(ComGoogleCommonUtilConcurrentStriped_1 *self) {
  NSObject_init(self);
}

ComGoogleCommonUtilConcurrentStriped_1 *new_ComGoogleCommonUtilConcurrentStriped_1_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentStriped_1, init)
}

ComGoogleCommonUtilConcurrentStriped_1 *create_ComGoogleCommonUtilConcurrentStriped_1_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentStriped_1, init)
}

@implementation ComGoogleCommonUtilConcurrentStriped_2

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentStriped_2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilConcurrentLocksLock>)get {
  return new_JavaUtilConcurrentLocksReentrantLock_initWithBoolean_(false);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentLocksLock;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(get);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentStriped;", "lazyWeakLockWithInt:", "Ljava/lang/Object;Lcom/google/common/base/Supplier<Ljava/util/concurrent/locks/Lock;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentStriped_2 = { "", "com.google.common.util.concurrent", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 0, -1, 1, 2, -1 };
  return &_ComGoogleCommonUtilConcurrentStriped_2;
}

@end

void ComGoogleCommonUtilConcurrentStriped_2_init(ComGoogleCommonUtilConcurrentStriped_2 *self) {
  NSObject_init(self);
}

ComGoogleCommonUtilConcurrentStriped_2 *new_ComGoogleCommonUtilConcurrentStriped_2_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentStriped_2, init)
}

ComGoogleCommonUtilConcurrentStriped_2 *create_ComGoogleCommonUtilConcurrentStriped_2_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentStriped_2, init)
}

@implementation ComGoogleCommonUtilConcurrentStriped_3

- (instancetype)initWithInt:(jint)capture$0 {
  ComGoogleCommonUtilConcurrentStriped_3_initWithInt_(self, capture$0);
  return self;
}

- (JavaUtilConcurrentSemaphore *)get {
  return new_ComGoogleCommonUtilConcurrentStriped_PaddedSemaphore_initWithInt_(val$permits_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentSemaphore;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(get);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$permits_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentStriped;", "semaphoreWithInt:withInt:", "Ljava/lang/Object;Lcom/google/common/base/Supplier<Ljava/util/concurrent/Semaphore;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentStriped_3 = { "", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x8018, 2, 1, 0, -1, 1, 2, -1 };
  return &_ComGoogleCommonUtilConcurrentStriped_3;
}

@end

void ComGoogleCommonUtilConcurrentStriped_3_initWithInt_(ComGoogleCommonUtilConcurrentStriped_3 *self, jint capture$0) {
  self->val$permits_ = capture$0;
  NSObject_init(self);
}

ComGoogleCommonUtilConcurrentStriped_3 *new_ComGoogleCommonUtilConcurrentStriped_3_initWithInt_(jint capture$0) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentStriped_3, initWithInt_, capture$0)
}

ComGoogleCommonUtilConcurrentStriped_3 *create_ComGoogleCommonUtilConcurrentStriped_3_initWithInt_(jint capture$0) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentStriped_3, initWithInt_, capture$0)
}

@implementation ComGoogleCommonUtilConcurrentStriped_4

- (instancetype)initWithInt:(jint)capture$0 {
  ComGoogleCommonUtilConcurrentStriped_4_initWithInt_(self, capture$0);
  return self;
}

- (JavaUtilConcurrentSemaphore *)get {
  return new_JavaUtilConcurrentSemaphore_initWithInt_withBoolean_(val$permits_, false);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentSemaphore;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(get);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$permits_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentStriped;", "lazyWeakSemaphoreWithInt:withInt:", "Ljava/lang/Object;Lcom/google/common/base/Supplier<Ljava/util/concurrent/Semaphore;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentStriped_4 = { "", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x8018, 2, 1, 0, -1, 1, 2, -1 };
  return &_ComGoogleCommonUtilConcurrentStriped_4;
}

@end

void ComGoogleCommonUtilConcurrentStriped_4_initWithInt_(ComGoogleCommonUtilConcurrentStriped_4 *self, jint capture$0) {
  self->val$permits_ = capture$0;
  NSObject_init(self);
}

ComGoogleCommonUtilConcurrentStriped_4 *new_ComGoogleCommonUtilConcurrentStriped_4_initWithInt_(jint capture$0) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentStriped_4, initWithInt_, capture$0)
}

ComGoogleCommonUtilConcurrentStriped_4 *create_ComGoogleCommonUtilConcurrentStriped_4_initWithInt_(jint capture$0) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentStriped_4, initWithInt_, capture$0)
}

@implementation ComGoogleCommonUtilConcurrentStriped_5

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentStriped_5_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilConcurrentLocksReadWriteLock>)get {
  return new_JavaUtilConcurrentLocksReentrantReadWriteLock_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentLocksReadWriteLock;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(get);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentStriped;", "Ljava/lang/Object;Lcom/google/common/base/Supplier<Ljava/util/concurrent/locks/ReadWriteLock;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentStriped_5 = { "", "com.google.common.util.concurrent", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 0, -1, -1, 1, -1 };
  return &_ComGoogleCommonUtilConcurrentStriped_5;
}

@end

void ComGoogleCommonUtilConcurrentStriped_5_init(ComGoogleCommonUtilConcurrentStriped_5 *self) {
  NSObject_init(self);
}

ComGoogleCommonUtilConcurrentStriped_5 *new_ComGoogleCommonUtilConcurrentStriped_5_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentStriped_5, init)
}

ComGoogleCommonUtilConcurrentStriped_5 *create_ComGoogleCommonUtilConcurrentStriped_5_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentStriped_5, init)
}

@implementation ComGoogleCommonUtilConcurrentStriped_PowerOfTwoStriped

- (instancetype)initWithInt:(jint)stripes {
  ComGoogleCommonUtilConcurrentStriped_PowerOfTwoStriped_initWithInt_(self, stripes);
  return self;
}

- (jint)indexForWithId:(id)key {
  return ComGoogleCommonUtilConcurrentStriped_PowerOfTwoStriped_indexForWithId_(self, key);
}

- (id)getWithId:(id)key {
  return [self getAtWithInt:ComGoogleCommonUtilConcurrentStriped_PowerOfTwoStriped_indexForWithId_(self, key)];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x10, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x11, 3, 2, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(indexForWithId:);
  methods[2].selector = @selector(getWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mask_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "indexFor", "LNSObject;", "get", "(Ljava/lang/Object;)TL;", "LComGoogleCommonUtilConcurrentStriped;", "<L:Ljava/lang/Object;>Lcom/google/common/util/concurrent/Striped<TL;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentStriped_PowerOfTwoStriped = { "PowerOfTwoStriped", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x40a, 3, 1, 5, -1, -1, 6, -1 };
  return &_ComGoogleCommonUtilConcurrentStriped_PowerOfTwoStriped;
}

@end

void ComGoogleCommonUtilConcurrentStriped_PowerOfTwoStriped_initWithInt_(ComGoogleCommonUtilConcurrentStriped_PowerOfTwoStriped *self, jint stripes) {
  ComGoogleCommonUtilConcurrentStriped_init(self);
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withId_(stripes > 0, @"Stripes must be positive");
  self->mask_ = stripes > ComGoogleCommonPrimitivesInts_MAX_POWER_OF_TWO ? ComGoogleCommonUtilConcurrentStriped_ALL_SET : ComGoogleCommonUtilConcurrentStriped_ceilToPowerOfTwoWithInt_(stripes) - 1;
}

jint ComGoogleCommonUtilConcurrentStriped_PowerOfTwoStriped_indexForWithId_(ComGoogleCommonUtilConcurrentStriped_PowerOfTwoStriped *self, id key) {
  jint hash_ = ComGoogleCommonUtilConcurrentStriped_smearWithInt_(((jint) [nil_chk(key) hash]));
  return hash_ & self->mask_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentStriped_PowerOfTwoStriped)

@implementation ComGoogleCommonUtilConcurrentStriped_CompactStriped

- (instancetype)initWithInt:(jint)stripes
withComGoogleCommonBaseSupplier:(id<ComGoogleCommonBaseSupplier>)supplier {
  ComGoogleCommonUtilConcurrentStriped_CompactStriped_initWithInt_withComGoogleCommonBaseSupplier_(self, stripes, supplier);
  return self;
}

- (id)getAtWithInt:(jint)index {
  return IOSObjectArray_Get(nil_chk(array_), index);
}

- (jint)size {
  return ((IOSObjectArray *) nil_chk(array_))->size_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withComGoogleCommonBaseSupplier:);
  methods[1].selector = @selector(getAtWithInt:);
  methods[2].selector = @selector(size);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "array_", "[LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILComGoogleCommonBaseSupplier;", "(ILcom/google/common/base/Supplier<TL;>;)V", "getAt", "I", "(I)TL;", "LComGoogleCommonUtilConcurrentStriped;", "<L:Ljava/lang/Object;>Lcom/google/common/util/concurrent/Striped$PowerOfTwoStriped<TL;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentStriped_CompactStriped = { "CompactStriped", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0xa, 3, 1, 5, -1, -1, 6, -1 };
  return &_ComGoogleCommonUtilConcurrentStriped_CompactStriped;
}

@end

void ComGoogleCommonUtilConcurrentStriped_CompactStriped_initWithInt_withComGoogleCommonBaseSupplier_(ComGoogleCommonUtilConcurrentStriped_CompactStriped *self, jint stripes, id<ComGoogleCommonBaseSupplier> supplier) {
  ComGoogleCommonUtilConcurrentStriped_PowerOfTwoStriped_initWithInt_(self, stripes);
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withId_(stripes <= ComGoogleCommonPrimitivesInts_MAX_POWER_OF_TWO, @"Stripes must be <= 2^30)");
  self->array_ = [IOSObjectArray newArrayWithLength:self->mask_ + 1 type:NSObject_class_()];
  for (jint i = 0; i < self->array_->size_; i++) {
    (void) IOSObjectArray_Set(self->array_, i, [((id<ComGoogleCommonBaseSupplier>) nil_chk(supplier)) get]);
  }
}

ComGoogleCommonUtilConcurrentStriped_CompactStriped *new_ComGoogleCommonUtilConcurrentStriped_CompactStriped_initWithInt_withComGoogleCommonBaseSupplier_(jint stripes, id<ComGoogleCommonBaseSupplier> supplier) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentStriped_CompactStriped, initWithInt_withComGoogleCommonBaseSupplier_, stripes, supplier)
}

ComGoogleCommonUtilConcurrentStriped_CompactStriped *create_ComGoogleCommonUtilConcurrentStriped_CompactStriped_initWithInt_withComGoogleCommonBaseSupplier_(jint stripes, id<ComGoogleCommonBaseSupplier> supplier) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentStriped_CompactStriped, initWithInt_withComGoogleCommonBaseSupplier_, stripes, supplier)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentStriped_CompactStriped)

@implementation ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped

- (instancetype)initWithInt:(jint)stripes
withComGoogleCommonBaseSupplier:(id<ComGoogleCommonBaseSupplier>)supplier {
  ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped_initWithInt_withComGoogleCommonBaseSupplier_(self, stripes, supplier);
  return self;
}

- (id)getAtWithInt:(jint)index {
  if (size_ != JavaLangInteger_MAX_VALUE) {
    ComGoogleCommonBasePreconditions_checkElementIndexWithInt_withInt_(index, [self size]);
  }
  ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped_ArrayReference *existingRef = [((JavaUtilConcurrentAtomicAtomicReferenceArray *) nil_chk(locks_)) getWithInt:index];
  id existing = existingRef == nil ? nil : [existingRef get];
  if (existing != nil) {
    return existing;
  }
  id created = [((id<ComGoogleCommonBaseSupplier>) nil_chk(supplier_)) get];
  ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped_ArrayReference *newRef = new_ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped_ArrayReference_initWithId_withInt_withJavaLangRefReferenceQueue_(created, index, queue_);
  while (![locks_ compareAndSetWithInt:index withId:existingRef withId:newRef]) {
    existingRef = [locks_ getWithInt:index];
    existing = existingRef == nil ? nil : [existingRef get];
    if (existing != nil) {
      return existing;
    }
  }
  ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped_drainQueue(self);
  return created;
}

- (void)drainQueue {
  ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped_drainQueue(self);
}

- (jint)size {
  return size_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withComGoogleCommonBaseSupplier:);
  methods[1].selector = @selector(getAtWithInt:);
  methods[2].selector = @selector(drainQueue);
  methods[3].selector = @selector(size);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "locks_", "LJavaUtilConcurrentAtomicAtomicReferenceArray;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "supplier_", "LComGoogleCommonBaseSupplier;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "size_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "queue_", "LJavaLangRefReferenceQueue;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "ILComGoogleCommonBaseSupplier;", "(ILcom/google/common/base/Supplier<TL;>;)V", "getAt", "I", "(I)TL;", "Ljava/util/concurrent/atomic/AtomicReferenceArray<Lcom/google/common/util/concurrent/Striped$SmallLazyStriped$ArrayReference<+TL;>;>;", "Lcom/google/common/base/Supplier<TL;>;", "Ljava/lang/ref/ReferenceQueue<TL;>;", "LComGoogleCommonUtilConcurrentStriped;", "LComGoogleCommonUtilConcurrentStriped_SmallLazyStriped_ArrayReference;", "<L:Ljava/lang/Object;>Lcom/google/common/util/concurrent/Striped$PowerOfTwoStriped<TL;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped = { "SmallLazyStriped", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x8, 4, 4, 8, 9, -1, 10, -1 };
  return &_ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped;
}

@end

void ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped_initWithInt_withComGoogleCommonBaseSupplier_(ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped *self, jint stripes, id<ComGoogleCommonBaseSupplier> supplier) {
  ComGoogleCommonUtilConcurrentStriped_PowerOfTwoStriped_initWithInt_(self, stripes);
  self->queue_ = new_JavaLangRefReferenceQueue_init();
  self->size_ = (self->mask_ == ComGoogleCommonUtilConcurrentStriped_ALL_SET) ? JavaLangInteger_MAX_VALUE : self->mask_ + 1;
  self->locks_ = new_JavaUtilConcurrentAtomicAtomicReferenceArray_initWithInt_(self->size_);
  self->supplier_ = supplier;
}

ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped *new_ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped_initWithInt_withComGoogleCommonBaseSupplier_(jint stripes, id<ComGoogleCommonBaseSupplier> supplier) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped, initWithInt_withComGoogleCommonBaseSupplier_, stripes, supplier)
}

ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped *create_ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped_initWithInt_withComGoogleCommonBaseSupplier_(jint stripes, id<ComGoogleCommonBaseSupplier> supplier) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped, initWithInt_withComGoogleCommonBaseSupplier_, stripes, supplier)
}

void ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped_drainQueue(ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped *self) {
  JavaLangRefReference *ref;
  while ((ref = [((JavaLangRefReferenceQueue *) nil_chk(self->queue_)) poll]) != nil) {
    ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped_ArrayReference *arrayRef = (ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped_ArrayReference *) cast_chk(ref, [ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped_ArrayReference class]);
    [((JavaUtilConcurrentAtomicAtomicReferenceArray *) nil_chk(self->locks_)) compareAndSetWithInt:((ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped_ArrayReference *) nil_chk(arrayRef))->index_ withId:arrayRef withId:nil];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped)

@implementation ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped_ArrayReference

- (instancetype)initWithId:(id)referent
                   withInt:(jint)index
withJavaLangRefReferenceQueue:(JavaLangRefReferenceQueue *)queue {
  ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped_ArrayReference_initWithId_withInt_withJavaLangRefReferenceQueue_(self, referent, index, queue);
  return self;
}

- (void)dealloc {
  JreCheckFinalize(self, [ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped_ArrayReference class]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithId:withInt:withJavaLangRefReferenceQueue:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "index_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;ILJavaLangRefReferenceQueue;", "(TL;ILjava/lang/ref/ReferenceQueue<TL;>;)V", "LComGoogleCommonUtilConcurrentStriped_SmallLazyStriped;", "<L:Ljava/lang/Object;>Ljava/lang/ref/WeakReference<TL;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped_ArrayReference = { "ArrayReference", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x1a, 1, 1, 2, -1, -1, 3, -1 };
  return &_ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped_ArrayReference;
}

@end

void ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped_ArrayReference_initWithId_withInt_withJavaLangRefReferenceQueue_(ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped_ArrayReference *self, id referent, jint index, JavaLangRefReferenceQueue *queue) {
  JavaLangRefWeakReference_initWithId_withJavaLangRefReferenceQueue_(self, referent, queue);
  self->index_ = index;
}

ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped_ArrayReference *new_ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped_ArrayReference_initWithId_withInt_withJavaLangRefReferenceQueue_(id referent, jint index, JavaLangRefReferenceQueue *queue) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped_ArrayReference, initWithId_withInt_withJavaLangRefReferenceQueue_, referent, index, queue)
}

ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped_ArrayReference *create_ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped_ArrayReference_initWithId_withInt_withJavaLangRefReferenceQueue_(id referent, jint index, JavaLangRefReferenceQueue *queue) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped_ArrayReference, initWithId_withInt_withJavaLangRefReferenceQueue_, referent, index, queue)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentStriped_SmallLazyStriped_ArrayReference)

@implementation ComGoogleCommonUtilConcurrentStriped_LargeLazyStriped

- (instancetype)initWithInt:(jint)stripes
withComGoogleCommonBaseSupplier:(id<ComGoogleCommonBaseSupplier>)supplier {
  ComGoogleCommonUtilConcurrentStriped_LargeLazyStriped_initWithInt_withComGoogleCommonBaseSupplier_(self, stripes, supplier);
  return self;
}

- (id)getAtWithInt:(jint)index {
  if (size_ != JavaLangInteger_MAX_VALUE) {
    ComGoogleCommonBasePreconditions_checkElementIndexWithInt_withInt_(index, [self size]);
  }
  id existing = [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(locks_)) getWithId:JavaLangInteger_valueOfWithInt_(index)];
  if (existing != nil) {
    return existing;
  }
  id created = [((id<ComGoogleCommonBaseSupplier>) nil_chk(supplier_)) get];
  existing = [locks_ putIfAbsentWithId:JavaLangInteger_valueOfWithInt_(index) withId:created];
  return ComGoogleCommonBaseMoreObjects_firstNonNullWithId_withId_(existing, created);
}

- (jint)size {
  return size_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withComGoogleCommonBaseSupplier:);
  methods[1].selector = @selector(getAtWithInt:);
  methods[2].selector = @selector(size);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "locks_", "LJavaUtilConcurrentConcurrentMap;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "supplier_", "LComGoogleCommonBaseSupplier;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "size_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILComGoogleCommonBaseSupplier;", "(ILcom/google/common/base/Supplier<TL;>;)V", "getAt", "I", "(I)TL;", "Ljava/util/concurrent/ConcurrentMap<Ljava/lang/Integer;TL;>;", "Lcom/google/common/base/Supplier<TL;>;", "LComGoogleCommonUtilConcurrentStriped;", "<L:Ljava/lang/Object;>Lcom/google/common/util/concurrent/Striped$PowerOfTwoStriped<TL;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentStriped_LargeLazyStriped = { "LargeLazyStriped", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x8, 3, 3, 7, -1, -1, 8, -1 };
  return &_ComGoogleCommonUtilConcurrentStriped_LargeLazyStriped;
}

@end

void ComGoogleCommonUtilConcurrentStriped_LargeLazyStriped_initWithInt_withComGoogleCommonBaseSupplier_(ComGoogleCommonUtilConcurrentStriped_LargeLazyStriped *self, jint stripes, id<ComGoogleCommonBaseSupplier> supplier) {
  ComGoogleCommonUtilConcurrentStriped_PowerOfTwoStriped_initWithInt_(self, stripes);
  self->size_ = (self->mask_ == ComGoogleCommonUtilConcurrentStriped_ALL_SET) ? JavaLangInteger_MAX_VALUE : self->mask_ + 1;
  self->supplier_ = supplier;
  self->locks_ = [((ComGoogleCommonCollectMapMaker *) nil_chk([new_ComGoogleCommonCollectMapMaker_init() weakValues])) makeMap];
}

ComGoogleCommonUtilConcurrentStriped_LargeLazyStriped *new_ComGoogleCommonUtilConcurrentStriped_LargeLazyStriped_initWithInt_withComGoogleCommonBaseSupplier_(jint stripes, id<ComGoogleCommonBaseSupplier> supplier) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentStriped_LargeLazyStriped, initWithInt_withComGoogleCommonBaseSupplier_, stripes, supplier)
}

ComGoogleCommonUtilConcurrentStriped_LargeLazyStriped *create_ComGoogleCommonUtilConcurrentStriped_LargeLazyStriped_initWithInt_withComGoogleCommonBaseSupplier_(jint stripes, id<ComGoogleCommonBaseSupplier> supplier) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentStriped_LargeLazyStriped, initWithInt_withComGoogleCommonBaseSupplier_, stripes, supplier)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentStriped_LargeLazyStriped)

@implementation ComGoogleCommonUtilConcurrentStriped_PaddedLock

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentStriped_PaddedLock_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "unused1_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "unused2_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "unused3_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentStriped;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentStriped_PaddedLock = { "PaddedLock", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0xa, 1, 3, 0, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentStriped_PaddedLock;
}

@end

void ComGoogleCommonUtilConcurrentStriped_PaddedLock_init(ComGoogleCommonUtilConcurrentStriped_PaddedLock *self) {
  JavaUtilConcurrentLocksReentrantLock_initWithBoolean_(self, false);
}

ComGoogleCommonUtilConcurrentStriped_PaddedLock *new_ComGoogleCommonUtilConcurrentStriped_PaddedLock_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentStriped_PaddedLock, init)
}

ComGoogleCommonUtilConcurrentStriped_PaddedLock *create_ComGoogleCommonUtilConcurrentStriped_PaddedLock_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentStriped_PaddedLock, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentStriped_PaddedLock)

@implementation ComGoogleCommonUtilConcurrentStriped_PaddedSemaphore

- (instancetype)initWithInt:(jint)permits {
  ComGoogleCommonUtilConcurrentStriped_PaddedSemaphore_initWithInt_(self, permits);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "unused1_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "unused2_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "unused3_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "LComGoogleCommonUtilConcurrentStriped;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentStriped_PaddedSemaphore = { "PaddedSemaphore", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0xa, 1, 3, 1, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentStriped_PaddedSemaphore;
}

@end

void ComGoogleCommonUtilConcurrentStriped_PaddedSemaphore_initWithInt_(ComGoogleCommonUtilConcurrentStriped_PaddedSemaphore *self, jint permits) {
  JavaUtilConcurrentSemaphore_initWithInt_withBoolean_(self, permits, false);
}

ComGoogleCommonUtilConcurrentStriped_PaddedSemaphore *new_ComGoogleCommonUtilConcurrentStriped_PaddedSemaphore_initWithInt_(jint permits) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentStriped_PaddedSemaphore, initWithInt_, permits)
}

ComGoogleCommonUtilConcurrentStriped_PaddedSemaphore *create_ComGoogleCommonUtilConcurrentStriped_PaddedSemaphore_initWithInt_(jint permits) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentStriped_PaddedSemaphore, initWithInt_, permits)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentStriped_PaddedSemaphore)
