//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/util/concurrent/ThreadFactoryBuilder.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/util/concurrent/ThreadFactoryBuilder.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Runnable.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Locale.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/ThreadFactory.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "javax/annotation/CheckReturnValue.h"
#include "javax/annotation/meta/When.h"

@interface ComGoogleCommonUtilConcurrentThreadFactoryBuilder () {
 @public
  NSString *nameFormat_;
  JavaLangBoolean *daemon_;
  JavaLangInteger *priority_;
  id<JavaLangThread_UncaughtExceptionHandler> uncaughtExceptionHandler_;
  id<JavaUtilConcurrentThreadFactory> backingThreadFactory_;
}

+ (id<JavaUtilConcurrentThreadFactory>)buildWithComGoogleCommonUtilConcurrentThreadFactoryBuilder:(ComGoogleCommonUtilConcurrentThreadFactoryBuilder *)builder;

+ (NSString *)formatWithNSString:(NSString *)format
               withNSObjectArray:(IOSObjectArray *)args;

@end

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentThreadFactoryBuilder, nameFormat_, NSString *)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentThreadFactoryBuilder, daemon_, JavaLangBoolean *)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentThreadFactoryBuilder, priority_, JavaLangInteger *)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentThreadFactoryBuilder, uncaughtExceptionHandler_, id<JavaLangThread_UncaughtExceptionHandler>)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentThreadFactoryBuilder, backingThreadFactory_, id<JavaUtilConcurrentThreadFactory>)

__attribute__((unused)) static id<JavaUtilConcurrentThreadFactory> ComGoogleCommonUtilConcurrentThreadFactoryBuilder_buildWithComGoogleCommonUtilConcurrentThreadFactoryBuilder_(ComGoogleCommonUtilConcurrentThreadFactoryBuilder *builder);

__attribute__((unused)) static NSString *ComGoogleCommonUtilConcurrentThreadFactoryBuilder_formatWithNSString_withNSObjectArray_(NSString *format, IOSObjectArray *args);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonUtilConcurrentThreadFactoryBuilder__Annotations$0();

@interface ComGoogleCommonUtilConcurrentThreadFactoryBuilder_1 : NSObject < JavaUtilConcurrentThreadFactory > {
 @public
  id<JavaUtilConcurrentThreadFactory> val$backingThreadFactory_;
  NSString *val$nameFormat_;
  JavaUtilConcurrentAtomicAtomicLong *val$count_;
  JavaLangBoolean *val$daemon_;
  JavaLangInteger *val$priority_;
  id<JavaLangThread_UncaughtExceptionHandler> val$uncaughtExceptionHandler_;
}

- (instancetype)initWithJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)capture$0
                                           withNSString:(NSString *)capture$1
                 withJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$2
                                    withJavaLangBoolean:(JavaLangBoolean *)capture$3
                                    withJavaLangInteger:(JavaLangInteger *)capture$4
            withJavaLangThread_UncaughtExceptionHandler:(id<JavaLangThread_UncaughtExceptionHandler>)capture$5;

- (JavaLangThread *)newThreadWithJavaLangRunnable:(id<JavaLangRunnable>)runnable OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentThreadFactoryBuilder_1)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentThreadFactoryBuilder_1_initWithJavaUtilConcurrentThreadFactory_withNSString_withJavaUtilConcurrentAtomicAtomicLong_withJavaLangBoolean_withJavaLangInteger_withJavaLangThread_UncaughtExceptionHandler_(ComGoogleCommonUtilConcurrentThreadFactoryBuilder_1 *self, id<JavaUtilConcurrentThreadFactory> capture$0, NSString *capture$1, JavaUtilConcurrentAtomicAtomicLong *capture$2, JavaLangBoolean *capture$3, JavaLangInteger *capture$4, id<JavaLangThread_UncaughtExceptionHandler> capture$5);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentThreadFactoryBuilder_1 *new_ComGoogleCommonUtilConcurrentThreadFactoryBuilder_1_initWithJavaUtilConcurrentThreadFactory_withNSString_withJavaUtilConcurrentAtomicAtomicLong_withJavaLangBoolean_withJavaLangInteger_withJavaLangThread_UncaughtExceptionHandler_(id<JavaUtilConcurrentThreadFactory> capture$0, NSString *capture$1, JavaUtilConcurrentAtomicAtomicLong *capture$2, JavaLangBoolean *capture$3, JavaLangInteger *capture$4, id<JavaLangThread_UncaughtExceptionHandler> capture$5) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentThreadFactoryBuilder_1 *create_ComGoogleCommonUtilConcurrentThreadFactoryBuilder_1_initWithJavaUtilConcurrentThreadFactory_withNSString_withJavaUtilConcurrentAtomicAtomicLong_withJavaLangBoolean_withJavaLangInteger_withJavaLangThread_UncaughtExceptionHandler_(id<JavaUtilConcurrentThreadFactory> capture$0, NSString *capture$1, JavaUtilConcurrentAtomicAtomicLong *capture$2, JavaLangBoolean *capture$3, JavaLangInteger *capture$4, id<JavaLangThread_UncaughtExceptionHandler> capture$5);

@implementation ComGoogleCommonUtilConcurrentThreadFactoryBuilder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentThreadFactoryBuilder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (ComGoogleCommonUtilConcurrentThreadFactoryBuilder *)setNameFormatWithNSString:(NSString *)nameFormat {
  NSString *unused = ComGoogleCommonUtilConcurrentThreadFactoryBuilder_formatWithNSString_withNSObjectArray_(nameFormat, [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(0) } count:1 type:NSObject_class_()]);
  self->nameFormat_ = nameFormat;
  return self;
}

- (ComGoogleCommonUtilConcurrentThreadFactoryBuilder *)setDaemonWithBoolean:(jboolean)daemon {
  self->daemon_ = JavaLangBoolean_valueOfWithBoolean_(daemon);
  return self;
}

- (ComGoogleCommonUtilConcurrentThreadFactoryBuilder *)setPriorityWithInt:(jint)priority {
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withInt_withInt_(priority >= JavaLangThread_MIN_PRIORITY, @"Thread priority (%s) must be >= %s", priority, JavaLangThread_MIN_PRIORITY);
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withInt_withInt_(priority <= JavaLangThread_MAX_PRIORITY, @"Thread priority (%s) must be <= %s", priority, JavaLangThread_MAX_PRIORITY);
  self->priority_ = JavaLangInteger_valueOfWithInt_(priority);
  return self;
}

- (ComGoogleCommonUtilConcurrentThreadFactoryBuilder *)setUncaughtExceptionHandlerWithJavaLangThread_UncaughtExceptionHandler:(id<JavaLangThread_UncaughtExceptionHandler>)uncaughtExceptionHandler {
  self->uncaughtExceptionHandler_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(uncaughtExceptionHandler);
  return self;
}

- (ComGoogleCommonUtilConcurrentThreadFactoryBuilder *)setThreadFactoryWithJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)backingThreadFactory {
  self->backingThreadFactory_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(backingThreadFactory);
  return self;
}

- (id<JavaUtilConcurrentThreadFactory>)build {
  return ComGoogleCommonUtilConcurrentThreadFactoryBuilder_buildWithComGoogleCommonUtilConcurrentThreadFactoryBuilder_(self);
}

+ (id<JavaUtilConcurrentThreadFactory>)buildWithComGoogleCommonUtilConcurrentThreadFactoryBuilder:(ComGoogleCommonUtilConcurrentThreadFactoryBuilder *)builder {
  return ComGoogleCommonUtilConcurrentThreadFactoryBuilder_buildWithComGoogleCommonUtilConcurrentThreadFactoryBuilder_(builder);
}

+ (NSString *)formatWithNSString:(NSString *)format
               withNSObjectArray:(IOSObjectArray *)args {
  return ComGoogleCommonUtilConcurrentThreadFactoryBuilder_formatWithNSString_withNSObjectArray_(format, args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentThreadFactoryBuilder;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentThreadFactoryBuilder;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentThreadFactoryBuilder;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentThreadFactoryBuilder;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentThreadFactoryBuilder;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentThreadFactory;", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, "LJavaUtilConcurrentThreadFactory;", 0xa, 11, 12, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8a, 13, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setNameFormatWithNSString:);
  methods[2].selector = @selector(setDaemonWithBoolean:);
  methods[3].selector = @selector(setPriorityWithInt:);
  methods[4].selector = @selector(setUncaughtExceptionHandlerWithJavaLangThread_UncaughtExceptionHandler:);
  methods[5].selector = @selector(setThreadFactoryWithJavaUtilConcurrentThreadFactory:);
  methods[6].selector = @selector(build);
  methods[7].selector = @selector(buildWithComGoogleCommonUtilConcurrentThreadFactoryBuilder:);
  methods[8].selector = @selector(formatWithNSString:withNSObjectArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "nameFormat_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "daemon_", "LJavaLangBoolean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "priority_", "LJavaLangInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "uncaughtExceptionHandler_", "LJavaLangThread_UncaughtExceptionHandler;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "backingThreadFactory_", "LJavaUtilConcurrentThreadFactory;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setNameFormat", "LNSString;", "setDaemon", "Z", "setPriority", "I", "setUncaughtExceptionHandler", "LJavaLangThread_UncaughtExceptionHandler;", "setThreadFactory", "LJavaUtilConcurrentThreadFactory;", (void *)&ComGoogleCommonUtilConcurrentThreadFactoryBuilder__Annotations$0, "build", "LComGoogleCommonUtilConcurrentThreadFactoryBuilder;", "format", "LNSString;[LNSObject;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentThreadFactoryBuilder = { "ThreadFactoryBuilder", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x11, 9, 5, -1, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentThreadFactoryBuilder;
}

@end

void ComGoogleCommonUtilConcurrentThreadFactoryBuilder_init(ComGoogleCommonUtilConcurrentThreadFactoryBuilder *self) {
  NSObject_init(self);
  self->nameFormat_ = nil;
  self->daemon_ = nil;
  self->priority_ = nil;
  self->uncaughtExceptionHandler_ = nil;
  self->backingThreadFactory_ = nil;
}

ComGoogleCommonUtilConcurrentThreadFactoryBuilder *new_ComGoogleCommonUtilConcurrentThreadFactoryBuilder_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentThreadFactoryBuilder, init)
}

ComGoogleCommonUtilConcurrentThreadFactoryBuilder *create_ComGoogleCommonUtilConcurrentThreadFactoryBuilder_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentThreadFactoryBuilder, init)
}

id<JavaUtilConcurrentThreadFactory> ComGoogleCommonUtilConcurrentThreadFactoryBuilder_buildWithComGoogleCommonUtilConcurrentThreadFactoryBuilder_(ComGoogleCommonUtilConcurrentThreadFactoryBuilder *builder) {
  ComGoogleCommonUtilConcurrentThreadFactoryBuilder_initialize();
  NSString *nameFormat = ((ComGoogleCommonUtilConcurrentThreadFactoryBuilder *) nil_chk(builder))->nameFormat_;
  JavaLangBoolean *daemon = builder->daemon_;
  JavaLangInteger *priority = builder->priority_;
  id<JavaLangThread_UncaughtExceptionHandler> uncaughtExceptionHandler = builder->uncaughtExceptionHandler_;
  id<JavaUtilConcurrentThreadFactory> backingThreadFactory = (builder->backingThreadFactory_ != nil) ? builder->backingThreadFactory_ : JavaUtilConcurrentExecutors_defaultThreadFactory();
  JavaUtilConcurrentAtomicAtomicLong *count = (nameFormat != nil) ? new_JavaUtilConcurrentAtomicAtomicLong_initWithLong_(0) : nil;
  return new_ComGoogleCommonUtilConcurrentThreadFactoryBuilder_1_initWithJavaUtilConcurrentThreadFactory_withNSString_withJavaUtilConcurrentAtomicAtomicLong_withJavaLangBoolean_withJavaLangInteger_withJavaLangThread_UncaughtExceptionHandler_(backingThreadFactory, nameFormat, count, daemon, priority, uncaughtExceptionHandler);
}

NSString *ComGoogleCommonUtilConcurrentThreadFactoryBuilder_formatWithNSString_withNSObjectArray_(NSString *format, IOSObjectArray *args) {
  ComGoogleCommonUtilConcurrentThreadFactoryBuilder_initialize();
  return NSString_java_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT), format, args);
}

IOSObjectArray *ComGoogleCommonUtilConcurrentThreadFactoryBuilder__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationCheckReturnValue(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentThreadFactoryBuilder)

@implementation ComGoogleCommonUtilConcurrentThreadFactoryBuilder_1

- (instancetype)initWithJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)capture$0
                                           withNSString:(NSString *)capture$1
                 withJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)capture$2
                                    withJavaLangBoolean:(JavaLangBoolean *)capture$3
                                    withJavaLangInteger:(JavaLangInteger *)capture$4
            withJavaLangThread_UncaughtExceptionHandler:(id<JavaLangThread_UncaughtExceptionHandler>)capture$5 {
  ComGoogleCommonUtilConcurrentThreadFactoryBuilder_1_initWithJavaUtilConcurrentThreadFactory_withNSString_withJavaUtilConcurrentAtomicAtomicLong_withJavaLangBoolean_withJavaLangInteger_withJavaLangThread_UncaughtExceptionHandler_(self, capture$0, capture$1, capture$2, capture$3, capture$4, capture$5);
  return self;
}

- (JavaLangThread *)newThreadWithJavaLangRunnable:(id<JavaLangRunnable>)runnable {
  JavaLangThread *thread = [((id<JavaUtilConcurrentThreadFactory>) nil_chk(val$backingThreadFactory_)) newThreadWithJavaLangRunnable:runnable];
  if (val$nameFormat_ != nil) {
    [((JavaLangThread *) nil_chk(thread)) setNameWithNSString:ComGoogleCommonUtilConcurrentThreadFactoryBuilder_formatWithNSString_withNSObjectArray_(val$nameFormat_, [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangLong_valueOfWithLong_([((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(val$count_)) getAndIncrement]) } count:1 type:NSObject_class_()])];
  }
  if (val$daemon_ != nil) {
    [((JavaLangThread *) nil_chk(thread)) setDaemonWithBoolean:[val$daemon_ booleanValue]];
  }
  if (val$priority_ != nil) {
    [((JavaLangThread *) nil_chk(thread)) setPriorityWithInt:[val$priority_ intValue]];
  }
  if (val$uncaughtExceptionHandler_ != nil) {
    [((JavaLangThread *) nil_chk(thread)) setUncaughtExceptionHandlerWithJavaLangThread_UncaughtExceptionHandler:val$uncaughtExceptionHandler_];
  }
  return thread;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThread;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentThreadFactory:withNSString:withJavaUtilConcurrentAtomicAtomicLong:withJavaLangBoolean:withJavaLangInteger:withJavaLangThread_UncaughtExceptionHandler:);
  methods[1].selector = @selector(newThreadWithJavaLangRunnable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$backingThreadFactory_", "LJavaUtilConcurrentThreadFactory;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$nameFormat_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$daemon_", "LJavaLangBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$priority_", "LJavaLangInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$uncaughtExceptionHandler_", "LJavaLangThread_UncaughtExceptionHandler;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "newThread", "LJavaLangRunnable;", "LComGoogleCommonUtilConcurrentThreadFactoryBuilder;", "buildWithComGoogleCommonUtilConcurrentThreadFactoryBuilder:" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentThreadFactoryBuilder_1 = { "", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x8018, 2, 6, 2, -1, 3, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentThreadFactoryBuilder_1;
}

@end

void ComGoogleCommonUtilConcurrentThreadFactoryBuilder_1_initWithJavaUtilConcurrentThreadFactory_withNSString_withJavaUtilConcurrentAtomicAtomicLong_withJavaLangBoolean_withJavaLangInteger_withJavaLangThread_UncaughtExceptionHandler_(ComGoogleCommonUtilConcurrentThreadFactoryBuilder_1 *self, id<JavaUtilConcurrentThreadFactory> capture$0, NSString *capture$1, JavaUtilConcurrentAtomicAtomicLong *capture$2, JavaLangBoolean *capture$3, JavaLangInteger *capture$4, id<JavaLangThread_UncaughtExceptionHandler> capture$5) {
  self->val$backingThreadFactory_ = capture$0;
  self->val$nameFormat_ = capture$1;
  self->val$count_ = capture$2;
  self->val$daemon_ = capture$3;
  self->val$priority_ = capture$4;
  self->val$uncaughtExceptionHandler_ = capture$5;
  NSObject_init(self);
}

ComGoogleCommonUtilConcurrentThreadFactoryBuilder_1 *new_ComGoogleCommonUtilConcurrentThreadFactoryBuilder_1_initWithJavaUtilConcurrentThreadFactory_withNSString_withJavaUtilConcurrentAtomicAtomicLong_withJavaLangBoolean_withJavaLangInteger_withJavaLangThread_UncaughtExceptionHandler_(id<JavaUtilConcurrentThreadFactory> capture$0, NSString *capture$1, JavaUtilConcurrentAtomicAtomicLong *capture$2, JavaLangBoolean *capture$3, JavaLangInteger *capture$4, id<JavaLangThread_UncaughtExceptionHandler> capture$5) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentThreadFactoryBuilder_1, initWithJavaUtilConcurrentThreadFactory_withNSString_withJavaUtilConcurrentAtomicAtomicLong_withJavaLangBoolean_withJavaLangInteger_withJavaLangThread_UncaughtExceptionHandler_, capture$0, capture$1, capture$2, capture$3, capture$4, capture$5)
}

ComGoogleCommonUtilConcurrentThreadFactoryBuilder_1 *create_ComGoogleCommonUtilConcurrentThreadFactoryBuilder_1_initWithJavaUtilConcurrentThreadFactory_withNSString_withJavaUtilConcurrentAtomicAtomicLong_withJavaLangBoolean_withJavaLangInteger_withJavaLangThread_UncaughtExceptionHandler_(id<JavaUtilConcurrentThreadFactory> capture$0, NSString *capture$1, JavaUtilConcurrentAtomicAtomicLong *capture$2, JavaLangBoolean *capture$3, JavaLangInteger *capture$4, id<JavaLangThread_UncaughtExceptionHandler> capture$5) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentThreadFactoryBuilder_1, initWithJavaUtilConcurrentThreadFactory_withNSString_withJavaUtilConcurrentAtomicAtomicLong_withJavaLangBoolean_withJavaLangInteger_withJavaLangThread_UncaughtExceptionHandler_, capture$0, capture$1, capture$2, capture$3, capture$4, capture$5)
}
