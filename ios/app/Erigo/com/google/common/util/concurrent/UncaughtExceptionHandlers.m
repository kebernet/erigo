//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/util/concurrent/UncaughtExceptionHandlers.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/util/concurrent/UncaughtExceptionHandlers.h"
#include "java/io/PrintStream.h"
#include "java/lang/Runtime.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/util/Locale.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"

@interface ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers ()

- (instancetype)init;

@end

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers_init(ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers *self);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers *new_ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers *create_ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers_init();

@interface ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers_Exiter () {
 @public
  JavaLangRuntime *runtime_;
}

@end

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers_Exiter, runtime_, JavaLangRuntime *)

inline JavaUtilLoggingLogger *ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers_Exiter_get_logger();
static JavaUtilLoggingLogger *ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers_Exiter_logger;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers_Exiter, logger, JavaUtilLoggingLogger *)

@implementation ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id<JavaLangThread_UncaughtExceptionHandler>)systemExit {
  return ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers_systemExit();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThread_UncaughtExceptionHandler;", 0x9, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(systemExit);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentUncaughtExceptionHandlers_Exiter;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers = { "UncaughtExceptionHandlers", "com.google.common.util.concurrent", ptrTable, methods, NULL, 7, 0x11, 2, 0, -1, 0, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers;
}

@end

void ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers_init(ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers *self) {
  NSObject_init(self);
}

ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers *new_ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers_init() {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers, init)
}

ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers *create_ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers_init() {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers, init)
}

id<JavaLangThread_UncaughtExceptionHandler> ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers_systemExit() {
  ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers_initialize();
  return new_ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers_Exiter_initWithJavaLangRuntime_(JavaLangRuntime_getRuntime());
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers)

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers_Exiter)

@implementation ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers_Exiter

- (instancetype)initWithJavaLangRuntime:(JavaLangRuntime *)runtime {
  ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers_Exiter_initWithJavaLangRuntime_(self, runtime);
  return self;
}

- (void)uncaughtExceptionWithJavaLangThread:(JavaLangThread *)t
                            withNSException:(NSException *)e {
  @try {
    [((JavaUtilLoggingLogger *) nil_chk(ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers_Exiter_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:NSString_java_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT), @"Caught an exception in %s.  Shutting down.", [IOSObjectArray newArrayWithObjects:(id[]){ t } count:1 type:NSObject_class_()]) withNSException:e];
  }
  @catch (NSException *errorInLogging) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:[((NSException *) nil_chk(e)) getMessage]];
    [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:[errorInLogging getMessage]];
  }
  @finally {
    [((JavaLangRuntime *) nil_chk(runtime_)) exitWithInt:1];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangRuntime:);
  methods[1].selector = @selector(uncaughtExceptionWithJavaLangThread:withNSException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 3, -1, -1 },
    { "runtime_", "LJavaLangRuntime;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangRuntime;", "uncaughtException", "LJavaLangThread;LNSException;", &ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers_Exiter_logger, "LComGoogleCommonUtilConcurrentUncaughtExceptionHandlers;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers_Exiter = { "Exiter", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x18, 2, 2, 4, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers_Exiter;
}

+ (void)initialize {
  if (self == [ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers_Exiter class]) {
    ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers_Exiter_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers_Exiter_class_() getName]);
    J2OBJC_SET_INITIALIZED(ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers_Exiter)
  }
}

@end

void ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers_Exiter_initWithJavaLangRuntime_(ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers_Exiter *self, JavaLangRuntime *runtime) {
  NSObject_init(self);
  self->runtime_ = runtime;
}

ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers_Exiter *new_ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers_Exiter_initWithJavaLangRuntime_(JavaLangRuntime *runtime) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers_Exiter, initWithJavaLangRuntime_, runtime)
}

ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers_Exiter *create_ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers_Exiter_initWithJavaLangRuntime_(JavaLangRuntime *runtime) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers_Exiter, initWithJavaLangRuntime_, runtime)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentUncaughtExceptionHandlers_Exiter)
