//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/util/concurrent/WrappingExecutorService.java
//

#include "J2ObjC_source.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/base/Throwables.h"
#include "com/google/common/collect/ImmutableList.h"
#include "com/google/common/util/concurrent/WrappingExecutorService.h"
#include "java/lang/Exception.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/util/Collection.h"
#include "java/util/List.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/TimeUnit.h"

@interface ComGoogleCommonUtilConcurrentWrappingExecutorService () {
 @public
  id<JavaUtilConcurrentExecutorService> delegate_;
}

- (ComGoogleCommonCollectImmutableList *)wrapTasksWithJavaUtilCollection:(id<JavaUtilCollection>)tasks;

@end

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentWrappingExecutorService, delegate_, id<JavaUtilConcurrentExecutorService>)

__attribute__((unused)) static ComGoogleCommonCollectImmutableList *ComGoogleCommonUtilConcurrentWrappingExecutorService_wrapTasksWithJavaUtilCollection_(ComGoogleCommonUtilConcurrentWrappingExecutorService *self, id<JavaUtilCollection> tasks);

@interface ComGoogleCommonUtilConcurrentWrappingExecutorService_1 : NSObject < JavaLangRunnable > {
 @public
  id<JavaUtilConcurrentCallable> val$wrapped_;
}

- (instancetype)initWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)capture$0;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentWrappingExecutorService_1)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentWrappingExecutorService_1_initWithJavaUtilConcurrentCallable_(ComGoogleCommonUtilConcurrentWrappingExecutorService_1 *self, id<JavaUtilConcurrentCallable> capture$0);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentWrappingExecutorService_1 *new_ComGoogleCommonUtilConcurrentWrappingExecutorService_1_initWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentWrappingExecutorService_1 *create_ComGoogleCommonUtilConcurrentWrappingExecutorService_1_initWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> capture$0);

@implementation ComGoogleCommonUtilConcurrentWrappingExecutorService

- (instancetype)initWithJavaUtilConcurrentExecutorService:(id<JavaUtilConcurrentExecutorService>)delegate {
  ComGoogleCommonUtilConcurrentWrappingExecutorService_initWithJavaUtilConcurrentExecutorService_(self, delegate);
  return self;
}

- (id<JavaUtilConcurrentCallable>)wrapTaskWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<JavaLangRunnable>)wrapTaskWithJavaLangRunnable:(id<JavaLangRunnable>)command {
  id<JavaUtilConcurrentCallable> wrapped = [self wrapTaskWithJavaUtilConcurrentCallable:JavaUtilConcurrentExecutors_callableWithJavaLangRunnable_withId_(command, nil)];
  return new_ComGoogleCommonUtilConcurrentWrappingExecutorService_1_initWithJavaUtilConcurrentCallable_(wrapped);
}

- (ComGoogleCommonCollectImmutableList *)wrapTasksWithJavaUtilCollection:(id<JavaUtilCollection>)tasks {
  return ComGoogleCommonUtilConcurrentWrappingExecutorService_wrapTasksWithJavaUtilCollection_(self, tasks);
}

- (void)executeWithJavaLangRunnable:(id<JavaLangRunnable>)command {
  [((id<JavaUtilConcurrentExecutorService>) nil_chk(delegate_)) executeWithJavaLangRunnable:[self wrapTaskWithJavaLangRunnable:command]];
}

- (id<JavaUtilConcurrentFuture>)submitWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)task {
  return [((id<JavaUtilConcurrentExecutorService>) nil_chk(delegate_)) submitWithJavaUtilConcurrentCallable:[self wrapTaskWithJavaUtilConcurrentCallable:ComGoogleCommonBasePreconditions_checkNotNullWithId_(task)]];
}

- (id<JavaUtilConcurrentFuture>)submitWithJavaLangRunnable:(id<JavaLangRunnable>)task {
  return [((id<JavaUtilConcurrentExecutorService>) nil_chk(delegate_)) submitWithJavaLangRunnable:[self wrapTaskWithJavaLangRunnable:task]];
}

- (id<JavaUtilConcurrentFuture>)submitWithJavaLangRunnable:(id<JavaLangRunnable>)task
                                                    withId:(id)result {
  return [((id<JavaUtilConcurrentExecutorService>) nil_chk(delegate_)) submitWithJavaLangRunnable:[self wrapTaskWithJavaLangRunnable:task] withId:result];
}

- (id<JavaUtilList>)invokeAllWithJavaUtilCollection:(id<JavaUtilCollection>)tasks {
  return [((id<JavaUtilConcurrentExecutorService>) nil_chk(delegate_)) invokeAllWithJavaUtilCollection:ComGoogleCommonUtilConcurrentWrappingExecutorService_wrapTasksWithJavaUtilCollection_(self, tasks)];
}

- (id<JavaUtilList>)invokeAllWithJavaUtilCollection:(id<JavaUtilCollection>)tasks
                                           withLong:(jlong)timeout
                     withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return [((id<JavaUtilConcurrentExecutorService>) nil_chk(delegate_)) invokeAllWithJavaUtilCollection:ComGoogleCommonUtilConcurrentWrappingExecutorService_wrapTasksWithJavaUtilCollection_(self, tasks) withLong:timeout withJavaUtilConcurrentTimeUnit:unit];
}

- (id)invokeAnyWithJavaUtilCollection:(id<JavaUtilCollection>)tasks {
  return [((id<JavaUtilConcurrentExecutorService>) nil_chk(delegate_)) invokeAnyWithJavaUtilCollection:ComGoogleCommonUtilConcurrentWrappingExecutorService_wrapTasksWithJavaUtilCollection_(self, tasks)];
}

- (id)invokeAnyWithJavaUtilCollection:(id<JavaUtilCollection>)tasks
                             withLong:(jlong)timeout
       withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return [((id<JavaUtilConcurrentExecutorService>) nil_chk(delegate_)) invokeAnyWithJavaUtilCollection:ComGoogleCommonUtilConcurrentWrappingExecutorService_wrapTasksWithJavaUtilCollection_(self, tasks) withLong:timeout withJavaUtilConcurrentTimeUnit:unit];
}

- (void)shutdown {
  [((id<JavaUtilConcurrentExecutorService>) nil_chk(delegate_)) shutdown];
}

- (id<JavaUtilList>)shutdownNow {
  return [((id<JavaUtilConcurrentExecutorService>) nil_chk(delegate_)) shutdownNow];
}

- (jboolean)isShutdown {
  return [((id<JavaUtilConcurrentExecutorService>) nil_chk(delegate_)) isShutdown];
}

- (jboolean)isTerminated {
  return [((id<JavaUtilConcurrentExecutorService>) nil_chk(delegate_)) isTerminated];
}

- (jboolean)awaitTerminationWithLong:(jlong)timeout
      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return [((id<JavaUtilConcurrentExecutorService>) nil_chk(delegate_)) awaitTerminationWithLong:timeout withJavaUtilConcurrentTimeUnit:unit];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentCallable;", 0x404, 1, 2, -1, 3, -1, -1 },
    { NULL, "LJavaLangRunnable;", 0x4, 1, 4, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonCollectImmutableList;", 0x12, 5, 6, -1, 7, -1, -1 },
    { NULL, "V", 0x11, 8, 4, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentFuture;", 0x11, 9, 2, -1, 10, -1, -1 },
    { NULL, "LJavaUtilConcurrentFuture;", 0x11, 9, 4, -1, 11, -1, -1 },
    { NULL, "LJavaUtilConcurrentFuture;", 0x11, 9, 12, -1, 13, -1, -1 },
    { NULL, "LJavaUtilList;", 0x11, 14, 6, 15, 16, -1, -1 },
    { NULL, "LJavaUtilList;", 0x11, 14, 17, 15, 18, -1, -1 },
    { NULL, "LNSObject;", 0x11, 19, 6, 20, 21, -1, -1 },
    { NULL, "LNSObject;", 0x11, 19, 17, 22, 23, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x11, -1, -1, -1, 24, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 25, 26, 15, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentExecutorService:);
  methods[1].selector = @selector(wrapTaskWithJavaUtilConcurrentCallable:);
  methods[2].selector = @selector(wrapTaskWithJavaLangRunnable:);
  methods[3].selector = @selector(wrapTasksWithJavaUtilCollection:);
  methods[4].selector = @selector(executeWithJavaLangRunnable:);
  methods[5].selector = @selector(submitWithJavaUtilConcurrentCallable:);
  methods[6].selector = @selector(submitWithJavaLangRunnable:);
  methods[7].selector = @selector(submitWithJavaLangRunnable:withId:);
  methods[8].selector = @selector(invokeAllWithJavaUtilCollection:);
  methods[9].selector = @selector(invokeAllWithJavaUtilCollection:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[10].selector = @selector(invokeAnyWithJavaUtilCollection:);
  methods[11].selector = @selector(invokeAnyWithJavaUtilCollection:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[12].selector = @selector(shutdown);
  methods[13].selector = @selector(shutdownNow);
  methods[14].selector = @selector(isShutdown);
  methods[15].selector = @selector(isTerminated);
  methods[16].selector = @selector(awaitTerminationWithLong:withJavaUtilConcurrentTimeUnit:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "delegate_", "LJavaUtilConcurrentExecutorService;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentExecutorService;", "wrapTask", "LJavaUtilConcurrentCallable;", "<T:Ljava/lang/Object;>(Ljava/util/concurrent/Callable<TT;>;)Ljava/util/concurrent/Callable<TT;>;", "LJavaLangRunnable;", "wrapTasks", "LJavaUtilCollection;", "<T:Ljava/lang/Object;>(Ljava/util/Collection<+Ljava/util/concurrent/Callable<TT;>;>;)Lcom/google/common/collect/ImmutableList<Ljava/util/concurrent/Callable<TT;>;>;", "execute", "submit", "<T:Ljava/lang/Object;>(Ljava/util/concurrent/Callable<TT;>;)Ljava/util/concurrent/Future<TT;>;", "(Ljava/lang/Runnable;)Ljava/util/concurrent/Future<*>;", "LJavaLangRunnable;LNSObject;", "<T:Ljava/lang/Object;>(Ljava/lang/Runnable;TT;)Ljava/util/concurrent/Future<TT;>;", "invokeAll", "LJavaLangInterruptedException;", "<T:Ljava/lang/Object;>(Ljava/util/Collection<+Ljava/util/concurrent/Callable<TT;>;>;)Ljava/util/List<Ljava/util/concurrent/Future<TT;>;>;", "LJavaUtilCollection;JLJavaUtilConcurrentTimeUnit;", "<T:Ljava/lang/Object;>(Ljava/util/Collection<+Ljava/util/concurrent/Callable<TT;>;>;JLjava/util/concurrent/TimeUnit;)Ljava/util/List<Ljava/util/concurrent/Future<TT;>;>;", "invokeAny", "LJavaLangInterruptedException;LJavaUtilConcurrentExecutionException;", "<T:Ljava/lang/Object;>(Ljava/util/Collection<+Ljava/util/concurrent/Callable<TT;>;>;)TT;", "LJavaLangInterruptedException;LJavaUtilConcurrentExecutionException;LJavaUtilConcurrentTimeoutException;", "<T:Ljava/lang/Object;>(Ljava/util/Collection<+Ljava/util/concurrent/Callable<TT;>;>;JLjava/util/concurrent/TimeUnit;)TT;", "()Ljava/util/List<Ljava/lang/Runnable;>;", "awaitTermination", "JLJavaUtilConcurrentTimeUnit;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentWrappingExecutorService = { "WrappingExecutorService", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x400, 17, 1, -1, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentWrappingExecutorService;
}

@end

void ComGoogleCommonUtilConcurrentWrappingExecutorService_initWithJavaUtilConcurrentExecutorService_(ComGoogleCommonUtilConcurrentWrappingExecutorService *self, id<JavaUtilConcurrentExecutorService> delegate) {
  NSObject_init(self);
  self->delegate_ = ComGoogleCommonBasePreconditions_checkNotNullWithId_(delegate);
}

ComGoogleCommonCollectImmutableList *ComGoogleCommonUtilConcurrentWrappingExecutorService_wrapTasksWithJavaUtilCollection_(ComGoogleCommonUtilConcurrentWrappingExecutorService *self, id<JavaUtilCollection> tasks) {
  ComGoogleCommonCollectImmutableList_Builder *builder = ComGoogleCommonCollectImmutableList_builder();
  for (id<JavaUtilConcurrentCallable> __strong task in nil_chk(tasks)) {
    (void) [((ComGoogleCommonCollectImmutableList_Builder *) nil_chk(builder)) addWithId:[self wrapTaskWithJavaUtilConcurrentCallable:task]];
  }
  return [((ComGoogleCommonCollectImmutableList_Builder *) nil_chk(builder)) build];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentWrappingExecutorService)

@implementation ComGoogleCommonUtilConcurrentWrappingExecutorService_1

- (instancetype)initWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)capture$0 {
  ComGoogleCommonUtilConcurrentWrappingExecutorService_1_initWithJavaUtilConcurrentCallable_(self, capture$0);
  return self;
}

- (void)run {
  @try {
    (void) [((id<JavaUtilConcurrentCallable>) nil_chk(val$wrapped_)) call];
  }
  @catch (JavaLangException *e) {
    ComGoogleCommonBaseThrowables_throwIfUncheckedWithNSException_(e);
    @throw new_JavaLangRuntimeException_initWithNSException_(e);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentCallable:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$wrapped_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x1012, -1, -1, 0, -1 },
  };
  static const void *ptrTable[] = { "Ljava/util/concurrent/Callable<Ljava/lang/Object;>;", "LComGoogleCommonUtilConcurrentWrappingExecutorService;", "wrapTaskWithJavaLangRunnable:" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentWrappingExecutorService_1 = { "", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x8018, 2, 1, 1, -1, 2, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentWrappingExecutorService_1;
}

@end

void ComGoogleCommonUtilConcurrentWrappingExecutorService_1_initWithJavaUtilConcurrentCallable_(ComGoogleCommonUtilConcurrentWrappingExecutorService_1 *self, id<JavaUtilConcurrentCallable> capture$0) {
  self->val$wrapped_ = capture$0;
  NSObject_init(self);
}

ComGoogleCommonUtilConcurrentWrappingExecutorService_1 *new_ComGoogleCommonUtilConcurrentWrappingExecutorService_1_initWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> capture$0) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentWrappingExecutorService_1, initWithJavaUtilConcurrentCallable_, capture$0)
}

ComGoogleCommonUtilConcurrentWrappingExecutorService_1 *create_ComGoogleCommonUtilConcurrentWrappingExecutorService_1_initWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> capture$0) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentWrappingExecutorService_1, initWithJavaUtilConcurrentCallable_, capture$0)
}
