//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/common/util/concurrent/WrappingScheduledExecutorService.java
//

#include "J2ObjC_source.h"
#include "com/google/common/util/concurrent/WrappingExecutorService.h"
#include "com/google/common/util/concurrent/WrappingScheduledExecutorService.h"
#include "java/lang/Runnable.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/ScheduledExecutorService.h"
#include "java/util/concurrent/ScheduledFuture.h"
#include "java/util/concurrent/TimeUnit.h"

@implementation ComGoogleCommonUtilConcurrentWrappingScheduledExecutorService

- (instancetype)initWithJavaUtilConcurrentScheduledExecutorService:(id<JavaUtilConcurrentScheduledExecutorService>)delegate {
  ComGoogleCommonUtilConcurrentWrappingScheduledExecutorService_initWithJavaUtilConcurrentScheduledExecutorService_(self, delegate);
  return self;
}

- (id<JavaUtilConcurrentScheduledFuture>)scheduleWithJavaLangRunnable:(id<JavaLangRunnable>)command
                                                             withLong:(jlong)delay
                                       withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(delegate_WrappingScheduledExecutorService_)) scheduleWithJavaLangRunnable:[self wrapTaskWithJavaLangRunnable:command] withLong:delay withJavaUtilConcurrentTimeUnit:unit];
}

- (id<JavaUtilConcurrentScheduledFuture>)scheduleWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)task
                                                                       withLong:(jlong)delay
                                                 withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(delegate_WrappingScheduledExecutorService_)) scheduleWithJavaUtilConcurrentCallable:[self wrapTaskWithJavaUtilConcurrentCallable:task] withLong:delay withJavaUtilConcurrentTimeUnit:unit];
}

- (id<JavaUtilConcurrentScheduledFuture>)scheduleAtFixedRateWithJavaLangRunnable:(id<JavaLangRunnable>)command
                                                                        withLong:(jlong)initialDelay
                                                                        withLong:(jlong)period
                                                  withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(delegate_WrappingScheduledExecutorService_)) scheduleAtFixedRateWithJavaLangRunnable:[self wrapTaskWithJavaLangRunnable:command] withLong:initialDelay withLong:period withJavaUtilConcurrentTimeUnit:unit];
}

- (id<JavaUtilConcurrentScheduledFuture>)scheduleWithFixedDelayWithJavaLangRunnable:(id<JavaLangRunnable>)command
                                                                           withLong:(jlong)initialDelay
                                                                           withLong:(jlong)delay
                                                     withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(delegate_WrappingScheduledExecutorService_)) scheduleWithFixedDelayWithJavaLangRunnable:[self wrapTaskWithJavaLangRunnable:command] withLong:initialDelay withLong:delay withJavaUtilConcurrentTimeUnit:unit];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentScheduledFuture;", 0x11, 1, 2, -1, 3, -1, -1 },
    { NULL, "LJavaUtilConcurrentScheduledFuture;", 0x11, 1, 4, -1, 5, -1, -1 },
    { NULL, "LJavaUtilConcurrentScheduledFuture;", 0x11, 6, 7, -1, 8, -1, -1 },
    { NULL, "LJavaUtilConcurrentScheduledFuture;", 0x11, 9, 7, -1, 8, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentScheduledExecutorService:);
  methods[1].selector = @selector(scheduleWithJavaLangRunnable:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[2].selector = @selector(scheduleWithJavaUtilConcurrentCallable:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[3].selector = @selector(scheduleAtFixedRateWithJavaLangRunnable:withLong:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[4].selector = @selector(scheduleWithFixedDelayWithJavaLangRunnable:withLong:withLong:withJavaUtilConcurrentTimeUnit:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "delegate_WrappingScheduledExecutorService_", "LJavaUtilConcurrentScheduledExecutorService;", .constantValue.asLong = 0, 0x10, 10, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentScheduledExecutorService;", "schedule", "LJavaLangRunnable;JLJavaUtilConcurrentTimeUnit;", "(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture<*>;", "LJavaUtilConcurrentCallable;JLJavaUtilConcurrentTimeUnit;", "<V:Ljava/lang/Object;>(Ljava/util/concurrent/Callable<TV;>;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture<TV;>;", "scheduleAtFixedRate", "LJavaLangRunnable;JJLJavaUtilConcurrentTimeUnit;", "(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture<*>;", "scheduleWithFixedDelay", "delegate" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentWrappingScheduledExecutorService = { "WrappingScheduledExecutorService", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x400, 5, 1, -1, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentWrappingScheduledExecutorService;
}

@end

void ComGoogleCommonUtilConcurrentWrappingScheduledExecutorService_initWithJavaUtilConcurrentScheduledExecutorService_(ComGoogleCommonUtilConcurrentWrappingScheduledExecutorService *self, id<JavaUtilConcurrentScheduledExecutorService> delegate) {
  ComGoogleCommonUtilConcurrentWrappingExecutorService_initWithJavaUtilConcurrentExecutorService_(self, delegate);
  self->delegate_WrappingScheduledExecutorService_ = delegate;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentWrappingScheduledExecutorService)
