//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/gson/DefaultDateTypeAdapter.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/google/gson/DefaultDateTypeAdapter.h"
#include "com/google/gson/JsonParseException.h"
#include "com/google/gson/JsonSyntaxException.h"
#include "com/google/gson/TypeAdapter.h"
#include "com/google/gson/internal/bind/util/ISO8601Utils.h"
#include "com/google/gson/stream/JsonReader.h"
#include "com/google/gson/stream/JsonToken.h"
#include "com/google/gson/stream/JsonWriter.h"
#include "java/lang/AssertionError.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/sql/Date.h"
#include "java/sql/Timestamp.h"
#include "java/text/DateFormat.h"
#include "java/text/ParseException.h"
#include "java/text/ParsePosition.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Date.h"
#include "java/util/Locale.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ComGoogleGsonDefaultDateTypeAdapter () {
 @public
  IOSClass *dateType_;
  JavaTextDateFormat *enUsFormat_;
  JavaTextDateFormat *localFormat_;
}

- (JavaUtilDate *)deserializeToDateWithNSString:(NSString *)s;

@end

J2OBJC_FIELD_SETTER(ComGoogleGsonDefaultDateTypeAdapter, dateType_, IOSClass *)
J2OBJC_FIELD_SETTER(ComGoogleGsonDefaultDateTypeAdapter, enUsFormat_, JavaTextDateFormat *)
J2OBJC_FIELD_SETTER(ComGoogleGsonDefaultDateTypeAdapter, localFormat_, JavaTextDateFormat *)

inline NSString *ComGoogleGsonDefaultDateTypeAdapter_get_SIMPLE_NAME();
static NSString *ComGoogleGsonDefaultDateTypeAdapter_SIMPLE_NAME = @"DefaultDateTypeAdapter";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleGsonDefaultDateTypeAdapter, SIMPLE_NAME, NSString *)

__attribute__((unused)) static JavaUtilDate *ComGoogleGsonDefaultDateTypeAdapter_deserializeToDateWithNSString_(ComGoogleGsonDefaultDateTypeAdapter *self, NSString *s);

@implementation ComGoogleGsonDefaultDateTypeAdapter

- (instancetype)initWithIOSClass:(IOSClass *)dateType {
  ComGoogleGsonDefaultDateTypeAdapter_initWithIOSClass_(self, dateType);
  return self;
}

- (instancetype)initWithIOSClass:(IOSClass *)dateType
                    withNSString:(NSString *)datePattern {
  ComGoogleGsonDefaultDateTypeAdapter_initWithIOSClass_withNSString_(self, dateType, datePattern);
  return self;
}

- (instancetype)initWithIOSClass:(IOSClass *)dateType
                         withInt:(jint)style {
  ComGoogleGsonDefaultDateTypeAdapter_initWithIOSClass_withInt_(self, dateType, style);
  return self;
}

- (instancetype)initWithInt:(jint)dateStyle
                    withInt:(jint)timeStyle {
  ComGoogleGsonDefaultDateTypeAdapter_initWithInt_withInt_(self, dateStyle, timeStyle);
  return self;
}

- (instancetype)initWithIOSClass:(IOSClass *)dateType
                         withInt:(jint)dateStyle
                         withInt:(jint)timeStyle {
  ComGoogleGsonDefaultDateTypeAdapter_initWithIOSClass_withInt_withInt_(self, dateType, dateStyle, timeStyle);
  return self;
}

- (instancetype)initWithIOSClass:(IOSClass *)dateType
          withJavaTextDateFormat:(JavaTextDateFormat *)enUsFormat
          withJavaTextDateFormat:(JavaTextDateFormat *)localFormat {
  ComGoogleGsonDefaultDateTypeAdapter_initWithIOSClass_withJavaTextDateFormat_withJavaTextDateFormat_(self, dateType, enUsFormat, localFormat);
  return self;
}

- (void)writeWithComGoogleGsonStreamJsonWriter:(ComGoogleGsonStreamJsonWriter *)outArg
                                        withId:(JavaUtilDate *)value {
  @synchronized(localFormat_) {
    NSString *dateFormatAsString = [((JavaTextDateFormat *) nil_chk(enUsFormat_)) formatWithJavaUtilDate:value];
    (void) [((ComGoogleGsonStreamJsonWriter *) nil_chk(outArg)) valueWithNSString:dateFormatAsString];
  }
}

- (JavaUtilDate *)readWithComGoogleGsonStreamJsonReader:(ComGoogleGsonStreamJsonReader *)inArg {
  if ([((ComGoogleGsonStreamJsonReader *) nil_chk(inArg)) peek] != JreLoadEnum(ComGoogleGsonStreamJsonToken, STRING)) {
    @throw new_ComGoogleGsonJsonParseException_initWithNSString_(@"The date should be a string value");
  }
  JavaUtilDate *date = ComGoogleGsonDefaultDateTypeAdapter_deserializeToDateWithNSString_(self, [inArg nextString]);
  if (dateType_ == JavaUtilDate_class_()) {
    return date;
  }
  else if (dateType_ == JavaSqlTimestamp_class_()) {
    return new_JavaSqlTimestamp_initWithLong_([((JavaUtilDate *) nil_chk(date)) getTime]);
  }
  else if (dateType_ == JavaSqlDate_class_()) {
    return new_JavaSqlDate_initWithLong_([((JavaUtilDate *) nil_chk(date)) getTime]);
  }
  else {
    @throw new_JavaLangAssertionError_init();
  }
}

- (JavaUtilDate *)deserializeToDateWithNSString:(NSString *)s {
  return ComGoogleGsonDefaultDateTypeAdapter_deserializeToDateWithNSString_(self, s);
}

- (NSString *)description {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  (void) [sb appendWithNSString:ComGoogleGsonDefaultDateTypeAdapter_SIMPLE_NAME];
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithChar:'('])) appendWithNSString:[[((JavaTextDateFormat *) nil_chk(localFormat_)) java_getClass] getSimpleName]])) appendWithChar:')'];
  return [sb description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, 5, -1, -1 },
    { NULL, NULL, 0x1, -1, 6, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 7, -1, 8, -1, -1 },
    { NULL, NULL, 0x0, -1, 9, -1, 10, -1, -1 },
    { NULL, "V", 0x1, 11, 12, 13, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, 14, 15, 13, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x2, 16, 17, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 18, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIOSClass:);
  methods[1].selector = @selector(initWithIOSClass:withNSString:);
  methods[2].selector = @selector(initWithIOSClass:withInt:);
  methods[3].selector = @selector(initWithInt:withInt:);
  methods[4].selector = @selector(initWithIOSClass:withInt:withInt:);
  methods[5].selector = @selector(initWithIOSClass:withJavaTextDateFormat:withJavaTextDateFormat:);
  methods[6].selector = @selector(writeWithComGoogleGsonStreamJsonWriter:withId:);
  methods[7].selector = @selector(readWithComGoogleGsonStreamJsonReader:);
  methods[8].selector = @selector(deserializeToDateWithNSString:);
  methods[9].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SIMPLE_NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 19, -1, -1 },
    { "dateType_", "LIOSClass;", .constantValue.asLong = 0, 0x12, -1, -1, 20, -1 },
    { "enUsFormat_", "LJavaTextDateFormat;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "localFormat_", "LJavaTextDateFormat;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIOSClass;", "(Ljava/lang/Class<+Ljava/util/Date;>;)V", "LIOSClass;LNSString;", "(Ljava/lang/Class<+Ljava/util/Date;>;Ljava/lang/String;)V", "LIOSClass;I", "(Ljava/lang/Class<+Ljava/util/Date;>;I)V", "II", "LIOSClass;II", "(Ljava/lang/Class<+Ljava/util/Date;>;II)V", "LIOSClass;LJavaTextDateFormat;LJavaTextDateFormat;", "(Ljava/lang/Class<+Ljava/util/Date;>;Ljava/text/DateFormat;Ljava/text/DateFormat;)V", "write", "LComGoogleGsonStreamJsonWriter;LJavaUtilDate;", "LJavaIoIOException;", "read", "LComGoogleGsonStreamJsonReader;", "deserializeToDate", "LNSString;", "toString", &ComGoogleGsonDefaultDateTypeAdapter_SIMPLE_NAME, "Ljava/lang/Class<+Ljava/util/Date;>;", "Lcom/google/gson/TypeAdapter<Ljava/util/Date;>;" };
  static const J2ObjcClassInfo _ComGoogleGsonDefaultDateTypeAdapter = { "DefaultDateTypeAdapter", "com.google.gson", ptrTable, methods, fields, 7, 0x10, 10, 4, -1, -1, -1, 21, -1 };
  return &_ComGoogleGsonDefaultDateTypeAdapter;
}

@end

void ComGoogleGsonDefaultDateTypeAdapter_initWithIOSClass_(ComGoogleGsonDefaultDateTypeAdapter *self, IOSClass *dateType) {
  ComGoogleGsonDefaultDateTypeAdapter_initWithIOSClass_withJavaTextDateFormat_withJavaTextDateFormat_(self, dateType, JavaTextDateFormat_getDateTimeInstanceWithInt_withInt_withJavaUtilLocale_(JavaTextDateFormat_DEFAULT, JavaTextDateFormat_DEFAULT, JreLoadStatic(JavaUtilLocale, US)), JavaTextDateFormat_getDateTimeInstanceWithInt_withInt_(JavaTextDateFormat_DEFAULT, JavaTextDateFormat_DEFAULT));
}

ComGoogleGsonDefaultDateTypeAdapter *new_ComGoogleGsonDefaultDateTypeAdapter_initWithIOSClass_(IOSClass *dateType) {
  J2OBJC_NEW_IMPL(ComGoogleGsonDefaultDateTypeAdapter, initWithIOSClass_, dateType)
}

ComGoogleGsonDefaultDateTypeAdapter *create_ComGoogleGsonDefaultDateTypeAdapter_initWithIOSClass_(IOSClass *dateType) {
  J2OBJC_CREATE_IMPL(ComGoogleGsonDefaultDateTypeAdapter, initWithIOSClass_, dateType)
}

void ComGoogleGsonDefaultDateTypeAdapter_initWithIOSClass_withNSString_(ComGoogleGsonDefaultDateTypeAdapter *self, IOSClass *dateType, NSString *datePattern) {
  ComGoogleGsonDefaultDateTypeAdapter_initWithIOSClass_withJavaTextDateFormat_withJavaTextDateFormat_(self, dateType, new_JavaTextSimpleDateFormat_initWithNSString_withJavaUtilLocale_(datePattern, JreLoadStatic(JavaUtilLocale, US)), new_JavaTextSimpleDateFormat_initWithNSString_(datePattern));
}

ComGoogleGsonDefaultDateTypeAdapter *new_ComGoogleGsonDefaultDateTypeAdapter_initWithIOSClass_withNSString_(IOSClass *dateType, NSString *datePattern) {
  J2OBJC_NEW_IMPL(ComGoogleGsonDefaultDateTypeAdapter, initWithIOSClass_withNSString_, dateType, datePattern)
}

ComGoogleGsonDefaultDateTypeAdapter *create_ComGoogleGsonDefaultDateTypeAdapter_initWithIOSClass_withNSString_(IOSClass *dateType, NSString *datePattern) {
  J2OBJC_CREATE_IMPL(ComGoogleGsonDefaultDateTypeAdapter, initWithIOSClass_withNSString_, dateType, datePattern)
}

void ComGoogleGsonDefaultDateTypeAdapter_initWithIOSClass_withInt_(ComGoogleGsonDefaultDateTypeAdapter *self, IOSClass *dateType, jint style) {
  ComGoogleGsonDefaultDateTypeAdapter_initWithIOSClass_withJavaTextDateFormat_withJavaTextDateFormat_(self, dateType, JavaTextDateFormat_getDateInstanceWithInt_withJavaUtilLocale_(style, JreLoadStatic(JavaUtilLocale, US)), JavaTextDateFormat_getDateInstanceWithInt_(style));
}

ComGoogleGsonDefaultDateTypeAdapter *new_ComGoogleGsonDefaultDateTypeAdapter_initWithIOSClass_withInt_(IOSClass *dateType, jint style) {
  J2OBJC_NEW_IMPL(ComGoogleGsonDefaultDateTypeAdapter, initWithIOSClass_withInt_, dateType, style)
}

ComGoogleGsonDefaultDateTypeAdapter *create_ComGoogleGsonDefaultDateTypeAdapter_initWithIOSClass_withInt_(IOSClass *dateType, jint style) {
  J2OBJC_CREATE_IMPL(ComGoogleGsonDefaultDateTypeAdapter, initWithIOSClass_withInt_, dateType, style)
}

void ComGoogleGsonDefaultDateTypeAdapter_initWithInt_withInt_(ComGoogleGsonDefaultDateTypeAdapter *self, jint dateStyle, jint timeStyle) {
  ComGoogleGsonDefaultDateTypeAdapter_initWithIOSClass_withJavaTextDateFormat_withJavaTextDateFormat_(self, JavaUtilDate_class_(), JavaTextDateFormat_getDateTimeInstanceWithInt_withInt_withJavaUtilLocale_(dateStyle, timeStyle, JreLoadStatic(JavaUtilLocale, US)), JavaTextDateFormat_getDateTimeInstanceWithInt_withInt_(dateStyle, timeStyle));
}

ComGoogleGsonDefaultDateTypeAdapter *new_ComGoogleGsonDefaultDateTypeAdapter_initWithInt_withInt_(jint dateStyle, jint timeStyle) {
  J2OBJC_NEW_IMPL(ComGoogleGsonDefaultDateTypeAdapter, initWithInt_withInt_, dateStyle, timeStyle)
}

ComGoogleGsonDefaultDateTypeAdapter *create_ComGoogleGsonDefaultDateTypeAdapter_initWithInt_withInt_(jint dateStyle, jint timeStyle) {
  J2OBJC_CREATE_IMPL(ComGoogleGsonDefaultDateTypeAdapter, initWithInt_withInt_, dateStyle, timeStyle)
}

void ComGoogleGsonDefaultDateTypeAdapter_initWithIOSClass_withInt_withInt_(ComGoogleGsonDefaultDateTypeAdapter *self, IOSClass *dateType, jint dateStyle, jint timeStyle) {
  ComGoogleGsonDefaultDateTypeAdapter_initWithIOSClass_withJavaTextDateFormat_withJavaTextDateFormat_(self, dateType, JavaTextDateFormat_getDateTimeInstanceWithInt_withInt_withJavaUtilLocale_(dateStyle, timeStyle, JreLoadStatic(JavaUtilLocale, US)), JavaTextDateFormat_getDateTimeInstanceWithInt_withInt_(dateStyle, timeStyle));
}

ComGoogleGsonDefaultDateTypeAdapter *new_ComGoogleGsonDefaultDateTypeAdapter_initWithIOSClass_withInt_withInt_(IOSClass *dateType, jint dateStyle, jint timeStyle) {
  J2OBJC_NEW_IMPL(ComGoogleGsonDefaultDateTypeAdapter, initWithIOSClass_withInt_withInt_, dateType, dateStyle, timeStyle)
}

ComGoogleGsonDefaultDateTypeAdapter *create_ComGoogleGsonDefaultDateTypeAdapter_initWithIOSClass_withInt_withInt_(IOSClass *dateType, jint dateStyle, jint timeStyle) {
  J2OBJC_CREATE_IMPL(ComGoogleGsonDefaultDateTypeAdapter, initWithIOSClass_withInt_withInt_, dateType, dateStyle, timeStyle)
}

void ComGoogleGsonDefaultDateTypeAdapter_initWithIOSClass_withJavaTextDateFormat_withJavaTextDateFormat_(ComGoogleGsonDefaultDateTypeAdapter *self, IOSClass *dateType, JavaTextDateFormat *enUsFormat, JavaTextDateFormat *localFormat) {
  ComGoogleGsonTypeAdapter_init(self);
  if (dateType != JavaUtilDate_class_() && dateType != JavaSqlDate_class_() && dateType != JavaSqlTimestamp_class_()) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$@$@$@", @"Date type must be one of ", JavaUtilDate_class_(), @", ", JavaSqlTimestamp_class_(), @", or ", JavaSqlDate_class_(), @" but was ", dateType));
  }
  self->dateType_ = dateType;
  self->enUsFormat_ = enUsFormat;
  self->localFormat_ = localFormat;
}

ComGoogleGsonDefaultDateTypeAdapter *new_ComGoogleGsonDefaultDateTypeAdapter_initWithIOSClass_withJavaTextDateFormat_withJavaTextDateFormat_(IOSClass *dateType, JavaTextDateFormat *enUsFormat, JavaTextDateFormat *localFormat) {
  J2OBJC_NEW_IMPL(ComGoogleGsonDefaultDateTypeAdapter, initWithIOSClass_withJavaTextDateFormat_withJavaTextDateFormat_, dateType, enUsFormat, localFormat)
}

ComGoogleGsonDefaultDateTypeAdapter *create_ComGoogleGsonDefaultDateTypeAdapter_initWithIOSClass_withJavaTextDateFormat_withJavaTextDateFormat_(IOSClass *dateType, JavaTextDateFormat *enUsFormat, JavaTextDateFormat *localFormat) {
  J2OBJC_CREATE_IMPL(ComGoogleGsonDefaultDateTypeAdapter, initWithIOSClass_withJavaTextDateFormat_withJavaTextDateFormat_, dateType, enUsFormat, localFormat)
}

JavaUtilDate *ComGoogleGsonDefaultDateTypeAdapter_deserializeToDateWithNSString_(ComGoogleGsonDefaultDateTypeAdapter *self, NSString *s) {
  @synchronized(self->localFormat_) {
    @try {
      return [((JavaTextDateFormat *) nil_chk(self->localFormat_)) parseWithNSString:s];
    }
    @catch (JavaTextParseException *ignored) {
    }
    @try {
      return [((JavaTextDateFormat *) nil_chk(self->enUsFormat_)) parseWithNSString:s];
    }
    @catch (JavaTextParseException *ignored) {
    }
    @try {
      return ComGoogleGsonInternalBindUtilISO8601Utils_parseWithNSString_withJavaTextParsePosition_(s, new_JavaTextParsePosition_initWithInt_(0));
    }
    @catch (JavaTextParseException *e) {
      @throw new_ComGoogleGsonJsonSyntaxException_initWithNSString_withNSException_(s, e);
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonDefaultDateTypeAdapter)
