//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/gson/internal/bind/JsonTreeReader.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/gson/JsonArray.h"
#include "com/google/gson/JsonElement.h"
#include "com/google/gson/JsonNull.h"
#include "com/google/gson/JsonObject.h"
#include "com/google/gson/JsonPrimitive.h"
#include "com/google/gson/internal/bind/JsonTreeReader.h"
#include "com/google/gson/stream/JsonReader.h"
#include "com/google/gson/stream/JsonToken.h"
#include "java/io/Reader.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface ComGoogleGsonInternalBindJsonTreeReader () {
 @public
  IOSObjectArray *stack_JsonTreeReader_;
  jint stackSize_JsonTreeReader_;
  IOSObjectArray *pathNames_JsonTreeReader_;
  IOSIntArray *pathIndices_JsonTreeReader_;
}

- (id)peekStack;

- (id)popStack;

- (void)expectWithComGoogleGsonStreamJsonToken:(ComGoogleGsonStreamJsonToken *)expected;

- (void)pushWithId:(id)newTop;

- (NSString *)locationString;

@end

J2OBJC_FIELD_SETTER(ComGoogleGsonInternalBindJsonTreeReader, stack_JsonTreeReader_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComGoogleGsonInternalBindJsonTreeReader, pathNames_JsonTreeReader_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComGoogleGsonInternalBindJsonTreeReader, pathIndices_JsonTreeReader_, IOSIntArray *)

inline JavaIoReader *ComGoogleGsonInternalBindJsonTreeReader_get_UNREADABLE_READER();
static JavaIoReader *ComGoogleGsonInternalBindJsonTreeReader_UNREADABLE_READER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleGsonInternalBindJsonTreeReader, UNREADABLE_READER, JavaIoReader *)

inline id ComGoogleGsonInternalBindJsonTreeReader_get_SENTINEL_CLOSED();
static id ComGoogleGsonInternalBindJsonTreeReader_SENTINEL_CLOSED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleGsonInternalBindJsonTreeReader, SENTINEL_CLOSED, id)

__attribute__((unused)) static id ComGoogleGsonInternalBindJsonTreeReader_peekStack(ComGoogleGsonInternalBindJsonTreeReader *self);

__attribute__((unused)) static id ComGoogleGsonInternalBindJsonTreeReader_popStack(ComGoogleGsonInternalBindJsonTreeReader *self);

__attribute__((unused)) static void ComGoogleGsonInternalBindJsonTreeReader_expectWithComGoogleGsonStreamJsonToken_(ComGoogleGsonInternalBindJsonTreeReader *self, ComGoogleGsonStreamJsonToken *expected);

__attribute__((unused)) static void ComGoogleGsonInternalBindJsonTreeReader_pushWithId_(ComGoogleGsonInternalBindJsonTreeReader *self, id newTop);

__attribute__((unused)) static NSString *ComGoogleGsonInternalBindJsonTreeReader_locationString(ComGoogleGsonInternalBindJsonTreeReader *self);

@interface ComGoogleGsonInternalBindJsonTreeReader_1 : JavaIoReader

- (instancetype)init;

- (jint)readWithCharArray:(IOSCharArray *)buffer
                  withInt:(jint)offset
                  withInt:(jint)count;

- (void)close;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleGsonInternalBindJsonTreeReader_1)

__attribute__((unused)) static void ComGoogleGsonInternalBindJsonTreeReader_1_init(ComGoogleGsonInternalBindJsonTreeReader_1 *self);

__attribute__((unused)) static ComGoogleGsonInternalBindJsonTreeReader_1 *new_ComGoogleGsonInternalBindJsonTreeReader_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleGsonInternalBindJsonTreeReader_1 *create_ComGoogleGsonInternalBindJsonTreeReader_1_init();

J2OBJC_INITIALIZED_DEFN(ComGoogleGsonInternalBindJsonTreeReader)

@implementation ComGoogleGsonInternalBindJsonTreeReader

- (instancetype)initWithComGoogleGsonJsonElement:(ComGoogleGsonJsonElement *)element {
  ComGoogleGsonInternalBindJsonTreeReader_initWithComGoogleGsonJsonElement_(self, element);
  return self;
}

- (void)beginArray {
  ComGoogleGsonInternalBindJsonTreeReader_expectWithComGoogleGsonStreamJsonToken_(self, JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_ARRAY));
  ComGoogleGsonJsonArray *array = (ComGoogleGsonJsonArray *) cast_chk(ComGoogleGsonInternalBindJsonTreeReader_peekStack(self), [ComGoogleGsonJsonArray class]);
  ComGoogleGsonInternalBindJsonTreeReader_pushWithId_(self, [((ComGoogleGsonJsonArray *) nil_chk(array)) iterator]);
  *IOSIntArray_GetRef(nil_chk(pathIndices_JsonTreeReader_), stackSize_JsonTreeReader_ - 1) = 0;
}

- (void)endArray {
  ComGoogleGsonInternalBindJsonTreeReader_expectWithComGoogleGsonStreamJsonToken_(self, JreLoadEnum(ComGoogleGsonStreamJsonToken, END_ARRAY));
  (void) ComGoogleGsonInternalBindJsonTreeReader_popStack(self);
  (void) ComGoogleGsonInternalBindJsonTreeReader_popStack(self);
  if (stackSize_JsonTreeReader_ > 0) {
    (*IOSIntArray_GetRef(nil_chk(pathIndices_JsonTreeReader_), stackSize_JsonTreeReader_ - 1))++;
  }
}

- (void)beginObject {
  ComGoogleGsonInternalBindJsonTreeReader_expectWithComGoogleGsonStreamJsonToken_(self, JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_OBJECT));
  ComGoogleGsonJsonObject *object = (ComGoogleGsonJsonObject *) cast_chk(ComGoogleGsonInternalBindJsonTreeReader_peekStack(self), [ComGoogleGsonJsonObject class]);
  ComGoogleGsonInternalBindJsonTreeReader_pushWithId_(self, [((id<JavaUtilSet>) nil_chk([((ComGoogleGsonJsonObject *) nil_chk(object)) entrySet])) iterator]);
}

- (void)endObject {
  ComGoogleGsonInternalBindJsonTreeReader_expectWithComGoogleGsonStreamJsonToken_(self, JreLoadEnum(ComGoogleGsonStreamJsonToken, END_OBJECT));
  (void) ComGoogleGsonInternalBindJsonTreeReader_popStack(self);
  (void) ComGoogleGsonInternalBindJsonTreeReader_popStack(self);
  if (stackSize_JsonTreeReader_ > 0) {
    (*IOSIntArray_GetRef(nil_chk(pathIndices_JsonTreeReader_), stackSize_JsonTreeReader_ - 1))++;
  }
}

- (jboolean)hasNext {
  ComGoogleGsonStreamJsonToken *token = [self peek];
  return token != JreLoadEnum(ComGoogleGsonStreamJsonToken, END_OBJECT) && token != JreLoadEnum(ComGoogleGsonStreamJsonToken, END_ARRAY);
}

- (ComGoogleGsonStreamJsonToken *)peek {
  if (stackSize_JsonTreeReader_ == 0) {
    return JreLoadEnum(ComGoogleGsonStreamJsonToken, END_DOCUMENT);
  }
  id o = ComGoogleGsonInternalBindJsonTreeReader_peekStack(self);
  if ([JavaUtilIterator_class_() isInstance:o]) {
    jboolean isObject = [IOSObjectArray_Get(nil_chk(stack_JsonTreeReader_), stackSize_JsonTreeReader_ - 2) isKindOfClass:[ComGoogleGsonJsonObject class]];
    id<JavaUtilIterator> iterator = (id<JavaUtilIterator>) cast_check(o, JavaUtilIterator_class_());
    if ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
      if (isObject) {
        return JreLoadEnum(ComGoogleGsonStreamJsonToken, NAME);
      }
      else {
        ComGoogleGsonInternalBindJsonTreeReader_pushWithId_(self, [iterator next]);
        return [self peek];
      }
    }
    else {
      return isObject ? JreLoadEnum(ComGoogleGsonStreamJsonToken, END_OBJECT) : JreLoadEnum(ComGoogleGsonStreamJsonToken, END_ARRAY);
    }
  }
  else if ([o isKindOfClass:[ComGoogleGsonJsonObject class]]) {
    return JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_OBJECT);
  }
  else if ([o isKindOfClass:[ComGoogleGsonJsonArray class]]) {
    return JreLoadEnum(ComGoogleGsonStreamJsonToken, BEGIN_ARRAY);
  }
  else if ([o isKindOfClass:[ComGoogleGsonJsonPrimitive class]]) {
    ComGoogleGsonJsonPrimitive *primitive = (ComGoogleGsonJsonPrimitive *) cast_chk(o, [ComGoogleGsonJsonPrimitive class]);
    if ([((ComGoogleGsonJsonPrimitive *) nil_chk(primitive)) isString]) {
      return JreLoadEnum(ComGoogleGsonStreamJsonToken, STRING);
    }
    else if ([primitive isBoolean]) {
      return JreLoadEnum(ComGoogleGsonStreamJsonToken, BOOLEAN);
    }
    else if ([primitive isNumber]) {
      return JreLoadEnum(ComGoogleGsonStreamJsonToken, NUMBER);
    }
    else {
      @throw new_JavaLangAssertionError_init();
    }
  }
  else if ([o isKindOfClass:[ComGoogleGsonJsonNull class]]) {
    return JreLoadEnum(ComGoogleGsonStreamJsonToken, NULL);
  }
  else if (o == ComGoogleGsonInternalBindJsonTreeReader_SENTINEL_CLOSED) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"JsonReader is closed");
  }
  else {
    @throw new_JavaLangAssertionError_init();
  }
}

- (id)peekStack {
  return ComGoogleGsonInternalBindJsonTreeReader_peekStack(self);
}

- (id)popStack {
  return ComGoogleGsonInternalBindJsonTreeReader_popStack(self);
}

- (void)expectWithComGoogleGsonStreamJsonToken:(ComGoogleGsonStreamJsonToken *)expected {
  ComGoogleGsonInternalBindJsonTreeReader_expectWithComGoogleGsonStreamJsonToken_(self, expected);
}

- (NSString *)nextName {
  ComGoogleGsonInternalBindJsonTreeReader_expectWithComGoogleGsonStreamJsonToken_(self, JreLoadEnum(ComGoogleGsonStreamJsonToken, NAME));
  id<JavaUtilIterator> i = (id<JavaUtilIterator>) cast_check(ComGoogleGsonInternalBindJsonTreeReader_peekStack(self), JavaUtilIterator_class_());
  id<JavaUtilMap_Entry> entry_ = (id<JavaUtilMap_Entry>) cast_check([((id<JavaUtilIterator>) nil_chk(i)) next], JavaUtilMap_Entry_class_());
  NSString *result = (NSString *) cast_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey], [NSString class]);
  (void) IOSObjectArray_Set(nil_chk(pathNames_JsonTreeReader_), stackSize_JsonTreeReader_ - 1, result);
  ComGoogleGsonInternalBindJsonTreeReader_pushWithId_(self, [entry_ getValue]);
  return result;
}

- (NSString *)nextString {
  ComGoogleGsonStreamJsonToken *token = [self peek];
  if (token != JreLoadEnum(ComGoogleGsonStreamJsonToken, STRING) && token != JreLoadEnum(ComGoogleGsonStreamJsonToken, NUMBER)) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$@$", @"Expected ", JreLoadEnum(ComGoogleGsonStreamJsonToken, STRING), @" but was ", token, ComGoogleGsonInternalBindJsonTreeReader_locationString(self)));
  }
  NSString *result = [((ComGoogleGsonJsonPrimitive *) nil_chk(((ComGoogleGsonJsonPrimitive *) cast_chk(ComGoogleGsonInternalBindJsonTreeReader_popStack(self), [ComGoogleGsonJsonPrimitive class])))) getAsString];
  if (stackSize_JsonTreeReader_ > 0) {
    (*IOSIntArray_GetRef(nil_chk(pathIndices_JsonTreeReader_), stackSize_JsonTreeReader_ - 1))++;
  }
  return result;
}

- (jboolean)nextBoolean {
  ComGoogleGsonInternalBindJsonTreeReader_expectWithComGoogleGsonStreamJsonToken_(self, JreLoadEnum(ComGoogleGsonStreamJsonToken, BOOLEAN));
  jboolean result = [((ComGoogleGsonJsonPrimitive *) nil_chk(((ComGoogleGsonJsonPrimitive *) cast_chk(ComGoogleGsonInternalBindJsonTreeReader_popStack(self), [ComGoogleGsonJsonPrimitive class])))) getAsBoolean];
  if (stackSize_JsonTreeReader_ > 0) {
    (*IOSIntArray_GetRef(nil_chk(pathIndices_JsonTreeReader_), stackSize_JsonTreeReader_ - 1))++;
  }
  return result;
}

- (void)nextNull {
  ComGoogleGsonInternalBindJsonTreeReader_expectWithComGoogleGsonStreamJsonToken_(self, JreLoadEnum(ComGoogleGsonStreamJsonToken, NULL));
  (void) ComGoogleGsonInternalBindJsonTreeReader_popStack(self);
  if (stackSize_JsonTreeReader_ > 0) {
    (*IOSIntArray_GetRef(nil_chk(pathIndices_JsonTreeReader_), stackSize_JsonTreeReader_ - 1))++;
  }
}

- (jdouble)nextDouble {
  ComGoogleGsonStreamJsonToken *token = [self peek];
  if (token != JreLoadEnum(ComGoogleGsonStreamJsonToken, NUMBER) && token != JreLoadEnum(ComGoogleGsonStreamJsonToken, STRING)) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$@$", @"Expected ", JreLoadEnum(ComGoogleGsonStreamJsonToken, NUMBER), @" but was ", token, ComGoogleGsonInternalBindJsonTreeReader_locationString(self)));
  }
  jdouble result = [((ComGoogleGsonJsonPrimitive *) nil_chk(((ComGoogleGsonJsonPrimitive *) cast_chk(ComGoogleGsonInternalBindJsonTreeReader_peekStack(self), [ComGoogleGsonJsonPrimitive class])))) getAsDouble];
  if (![self isLenient] && (JavaLangDouble_isNaNWithDouble_(result) || JavaLangDouble_isInfiniteWithDouble_(result))) {
    @throw new_JavaLangNumberFormatException_initWithNSString_(JreStrcat("$D", @"JSON forbids NaN and infinities: ", result));
  }
  (void) ComGoogleGsonInternalBindJsonTreeReader_popStack(self);
  if (stackSize_JsonTreeReader_ > 0) {
    (*IOSIntArray_GetRef(nil_chk(pathIndices_JsonTreeReader_), stackSize_JsonTreeReader_ - 1))++;
  }
  return result;
}

- (jlong)nextLong {
  ComGoogleGsonStreamJsonToken *token = [self peek];
  if (token != JreLoadEnum(ComGoogleGsonStreamJsonToken, NUMBER) && token != JreLoadEnum(ComGoogleGsonStreamJsonToken, STRING)) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$@$", @"Expected ", JreLoadEnum(ComGoogleGsonStreamJsonToken, NUMBER), @" but was ", token, ComGoogleGsonInternalBindJsonTreeReader_locationString(self)));
  }
  jlong result = [((ComGoogleGsonJsonPrimitive *) nil_chk(((ComGoogleGsonJsonPrimitive *) cast_chk(ComGoogleGsonInternalBindJsonTreeReader_peekStack(self), [ComGoogleGsonJsonPrimitive class])))) getAsLong];
  (void) ComGoogleGsonInternalBindJsonTreeReader_popStack(self);
  if (stackSize_JsonTreeReader_ > 0) {
    (*IOSIntArray_GetRef(nil_chk(pathIndices_JsonTreeReader_), stackSize_JsonTreeReader_ - 1))++;
  }
  return result;
}

- (jint)nextInt {
  ComGoogleGsonStreamJsonToken *token = [self peek];
  if (token != JreLoadEnum(ComGoogleGsonStreamJsonToken, NUMBER) && token != JreLoadEnum(ComGoogleGsonStreamJsonToken, STRING)) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$@$", @"Expected ", JreLoadEnum(ComGoogleGsonStreamJsonToken, NUMBER), @" but was ", token, ComGoogleGsonInternalBindJsonTreeReader_locationString(self)));
  }
  jint result = [((ComGoogleGsonJsonPrimitive *) nil_chk(((ComGoogleGsonJsonPrimitive *) cast_chk(ComGoogleGsonInternalBindJsonTreeReader_peekStack(self), [ComGoogleGsonJsonPrimitive class])))) getAsInt];
  (void) ComGoogleGsonInternalBindJsonTreeReader_popStack(self);
  if (stackSize_JsonTreeReader_ > 0) {
    (*IOSIntArray_GetRef(nil_chk(pathIndices_JsonTreeReader_), stackSize_JsonTreeReader_ - 1))++;
  }
  return result;
}

- (void)close {
  stack_JsonTreeReader_ = [IOSObjectArray newArrayWithObjects:(id[]){ ComGoogleGsonInternalBindJsonTreeReader_SENTINEL_CLOSED } count:1 type:NSObject_class_()];
  stackSize_JsonTreeReader_ = 1;
}

- (void)skipValue {
  if ([self peek] == JreLoadEnum(ComGoogleGsonStreamJsonToken, NAME)) {
    (void) [self nextName];
    (void) IOSObjectArray_Set(nil_chk(pathNames_JsonTreeReader_), stackSize_JsonTreeReader_ - 2, @"null");
  }
  else {
    (void) ComGoogleGsonInternalBindJsonTreeReader_popStack(self);
    if (stackSize_JsonTreeReader_ > 0) {
      (void) IOSObjectArray_Set(nil_chk(pathNames_JsonTreeReader_), stackSize_JsonTreeReader_ - 1, @"null");
    }
  }
  if (stackSize_JsonTreeReader_ > 0) {
    (*IOSIntArray_GetRef(nil_chk(pathIndices_JsonTreeReader_), stackSize_JsonTreeReader_ - 1))++;
  }
}

- (NSString *)description {
  return [[self java_getClass] getSimpleName];
}

- (void)promoteNameToValue {
  ComGoogleGsonInternalBindJsonTreeReader_expectWithComGoogleGsonStreamJsonToken_(self, JreLoadEnum(ComGoogleGsonStreamJsonToken, NAME));
  id<JavaUtilIterator> i = (id<JavaUtilIterator>) cast_check(ComGoogleGsonInternalBindJsonTreeReader_peekStack(self), JavaUtilIterator_class_());
  id<JavaUtilMap_Entry> entry_ = (id<JavaUtilMap_Entry>) cast_check([((id<JavaUtilIterator>) nil_chk(i)) next], JavaUtilMap_Entry_class_());
  ComGoogleGsonInternalBindJsonTreeReader_pushWithId_(self, [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue]);
  ComGoogleGsonInternalBindJsonTreeReader_pushWithId_(self, new_ComGoogleGsonJsonPrimitive_initWithNSString_((NSString *) cast_chk([entry_ getKey], [NSString class])));
}

- (void)pushWithId:(id)newTop {
  ComGoogleGsonInternalBindJsonTreeReader_pushWithId_(self, newTop);
}

- (NSString *)getPath {
  JavaLangStringBuilder *result = [new_JavaLangStringBuilder_init() appendWithChar:'$'];
  for (jint i = 0; i < stackSize_JsonTreeReader_; i++) {
    if ([IOSObjectArray_Get(nil_chk(stack_JsonTreeReader_), i) isKindOfClass:[ComGoogleGsonJsonArray class]]) {
      if ([JavaUtilIterator_class_() isInstance:IOSObjectArray_Get(stack_JsonTreeReader_, ++i)]) {
        (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(result)) appendWithChar:'['])) appendWithInt:IOSIntArray_Get(nil_chk(pathIndices_JsonTreeReader_), i)])) appendWithChar:']'];
      }
    }
    else if ([IOSObjectArray_Get(stack_JsonTreeReader_, i) isKindOfClass:[ComGoogleGsonJsonObject class]]) {
      if ([JavaUtilIterator_class_() isInstance:IOSObjectArray_Get(stack_JsonTreeReader_, ++i)]) {
        (void) [((JavaLangStringBuilder *) nil_chk(result)) appendWithChar:'.'];
        if (IOSObjectArray_Get(nil_chk(pathNames_JsonTreeReader_), i) != nil) {
          (void) [result appendWithNSString:IOSObjectArray_Get(pathNames_JsonTreeReader_, i)];
        }
      }
    }
  }
  return [((JavaLangStringBuilder *) nil_chk(result)) description];
}

- (NSString *)locationString {
  return ComGoogleGsonInternalBindJsonTreeReader_locationString(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LComGoogleGsonStreamJsonToken;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 3, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleGsonJsonElement:);
  methods[1].selector = @selector(beginArray);
  methods[2].selector = @selector(endArray);
  methods[3].selector = @selector(beginObject);
  methods[4].selector = @selector(endObject);
  methods[5].selector = @selector(hasNext);
  methods[6].selector = @selector(peek);
  methods[7].selector = @selector(peekStack);
  methods[8].selector = @selector(popStack);
  methods[9].selector = @selector(expectWithComGoogleGsonStreamJsonToken:);
  methods[10].selector = @selector(nextName);
  methods[11].selector = @selector(nextString);
  methods[12].selector = @selector(nextBoolean);
  methods[13].selector = @selector(nextNull);
  methods[14].selector = @selector(nextDouble);
  methods[15].selector = @selector(nextLong);
  methods[16].selector = @selector(nextInt);
  methods[17].selector = @selector(close);
  methods[18].selector = @selector(skipValue);
  methods[19].selector = @selector(description);
  methods[20].selector = @selector(promoteNameToValue);
  methods[21].selector = @selector(pushWithId:);
  methods[22].selector = @selector(getPath);
  methods[23].selector = @selector(locationString);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "UNREADABLE_READER", "LJavaIoReader;", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
    { "SENTINEL_CLOSED", "LNSObject;", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
    { "stack_JsonTreeReader_", "[LNSObject;", .constantValue.asLong = 0, 0x2, 9, -1, -1, -1 },
    { "stackSize_JsonTreeReader_", "I", .constantValue.asLong = 0, 0x2, 10, -1, -1, -1 },
    { "pathNames_JsonTreeReader_", "[LNSString;", .constantValue.asLong = 0, 0x2, 11, -1, -1, -1 },
    { "pathIndices_JsonTreeReader_", "[I", .constantValue.asLong = 0, 0x2, 12, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleGsonJsonElement;", "LJavaIoIOException;", "expect", "LComGoogleGsonStreamJsonToken;", "toString", "push", "LNSObject;", &ComGoogleGsonInternalBindJsonTreeReader_UNREADABLE_READER, &ComGoogleGsonInternalBindJsonTreeReader_SENTINEL_CLOSED, "stack", "stackSize", "pathNames", "pathIndices" };
  static const J2ObjcClassInfo _ComGoogleGsonInternalBindJsonTreeReader = { "JsonTreeReader", "com.google.gson.internal.bind", ptrTable, methods, fields, 7, 0x11, 24, 6, -1, -1, -1, -1, -1 };
  return &_ComGoogleGsonInternalBindJsonTreeReader;
}

+ (void)initialize {
  if (self == [ComGoogleGsonInternalBindJsonTreeReader class]) {
    ComGoogleGsonInternalBindJsonTreeReader_UNREADABLE_READER = new_ComGoogleGsonInternalBindJsonTreeReader_1_init();
    ComGoogleGsonInternalBindJsonTreeReader_SENTINEL_CLOSED = new_NSObject_init();
    J2OBJC_SET_INITIALIZED(ComGoogleGsonInternalBindJsonTreeReader)
  }
}

@end

void ComGoogleGsonInternalBindJsonTreeReader_initWithComGoogleGsonJsonElement_(ComGoogleGsonInternalBindJsonTreeReader *self, ComGoogleGsonJsonElement *element) {
  ComGoogleGsonStreamJsonReader_initWithJavaIoReader_(self, ComGoogleGsonInternalBindJsonTreeReader_UNREADABLE_READER);
  self->stack_JsonTreeReader_ = [IOSObjectArray newArrayWithLength:32 type:NSObject_class_()];
  self->stackSize_JsonTreeReader_ = 0;
  self->pathNames_JsonTreeReader_ = [IOSObjectArray newArrayWithLength:32 type:NSString_class_()];
  self->pathIndices_JsonTreeReader_ = [IOSIntArray newArrayWithLength:32];
  ComGoogleGsonInternalBindJsonTreeReader_pushWithId_(self, element);
}

ComGoogleGsonInternalBindJsonTreeReader *new_ComGoogleGsonInternalBindJsonTreeReader_initWithComGoogleGsonJsonElement_(ComGoogleGsonJsonElement *element) {
  J2OBJC_NEW_IMPL(ComGoogleGsonInternalBindJsonTreeReader, initWithComGoogleGsonJsonElement_, element)
}

ComGoogleGsonInternalBindJsonTreeReader *create_ComGoogleGsonInternalBindJsonTreeReader_initWithComGoogleGsonJsonElement_(ComGoogleGsonJsonElement *element) {
  J2OBJC_CREATE_IMPL(ComGoogleGsonInternalBindJsonTreeReader, initWithComGoogleGsonJsonElement_, element)
}

id ComGoogleGsonInternalBindJsonTreeReader_peekStack(ComGoogleGsonInternalBindJsonTreeReader *self) {
  return IOSObjectArray_Get(nil_chk(self->stack_JsonTreeReader_), self->stackSize_JsonTreeReader_ - 1);
}

id ComGoogleGsonInternalBindJsonTreeReader_popStack(ComGoogleGsonInternalBindJsonTreeReader *self) {
  id result = IOSObjectArray_Get(nil_chk(self->stack_JsonTreeReader_), --self->stackSize_JsonTreeReader_);
  (void) IOSObjectArray_Set(self->stack_JsonTreeReader_, self->stackSize_JsonTreeReader_, nil);
  return result;
}

void ComGoogleGsonInternalBindJsonTreeReader_expectWithComGoogleGsonStreamJsonToken_(ComGoogleGsonInternalBindJsonTreeReader *self, ComGoogleGsonStreamJsonToken *expected) {
  if ([self peek] != expected) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$@$", @"Expected ", expected, @" but was ", [self peek], ComGoogleGsonInternalBindJsonTreeReader_locationString(self)));
  }
}

void ComGoogleGsonInternalBindJsonTreeReader_pushWithId_(ComGoogleGsonInternalBindJsonTreeReader *self, id newTop) {
  if (self->stackSize_JsonTreeReader_ == ((IOSObjectArray *) nil_chk(self->stack_JsonTreeReader_))->size_) {
    IOSObjectArray *newStack = [IOSObjectArray newArrayWithLength:self->stackSize_JsonTreeReader_ * 2 type:NSObject_class_()];
    IOSIntArray *newPathIndices = [IOSIntArray newArrayWithLength:self->stackSize_JsonTreeReader_ * 2];
    IOSObjectArray *newPathNames = [IOSObjectArray newArrayWithLength:self->stackSize_JsonTreeReader_ * 2 type:NSString_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->stack_JsonTreeReader_, 0, newStack, 0, self->stackSize_JsonTreeReader_);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->pathIndices_JsonTreeReader_, 0, newPathIndices, 0, self->stackSize_JsonTreeReader_);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->pathNames_JsonTreeReader_, 0, newPathNames, 0, self->stackSize_JsonTreeReader_);
    self->stack_JsonTreeReader_ = newStack;
    self->pathIndices_JsonTreeReader_ = newPathIndices;
    self->pathNames_JsonTreeReader_ = newPathNames;
  }
  (void) IOSObjectArray_Set(self->stack_JsonTreeReader_, self->stackSize_JsonTreeReader_++, newTop);
}

NSString *ComGoogleGsonInternalBindJsonTreeReader_locationString(ComGoogleGsonInternalBindJsonTreeReader *self) {
  return JreStrcat("$$", @" at path ", [self getPath]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGsonInternalBindJsonTreeReader)

@implementation ComGoogleGsonInternalBindJsonTreeReader_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleGsonInternalBindJsonTreeReader_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)readWithCharArray:(IOSCharArray *)buffer
                  withInt:(jint)offset
                  withInt:(jint)count {
  @throw new_JavaLangAssertionError_init();
}

- (void)close {
  @throw new_JavaLangAssertionError_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(readWithCharArray:withInt:withInt:);
  methods[2].selector = @selector(close);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "read", "[CII", "LJavaIoIOException;", "LComGoogleGsonInternalBindJsonTreeReader;" };
  static const J2ObjcClassInfo _ComGoogleGsonInternalBindJsonTreeReader_1 = { "", "com.google.gson.internal.bind", ptrTable, methods, NULL, 7, 0x8018, 3, 0, 3, -1, -1, -1, -1 };
  return &_ComGoogleGsonInternalBindJsonTreeReader_1;
}

@end

void ComGoogleGsonInternalBindJsonTreeReader_1_init(ComGoogleGsonInternalBindJsonTreeReader_1 *self) {
  JavaIoReader_init(self);
}

ComGoogleGsonInternalBindJsonTreeReader_1 *new_ComGoogleGsonInternalBindJsonTreeReader_1_init() {
  J2OBJC_NEW_IMPL(ComGoogleGsonInternalBindJsonTreeReader_1, init)
}

ComGoogleGsonInternalBindJsonTreeReader_1 *create_ComGoogleGsonInternalBindJsonTreeReader_1_init() {
  J2OBJC_CREATE_IMPL(ComGoogleGsonInternalBindJsonTreeReader_1, init)
}
