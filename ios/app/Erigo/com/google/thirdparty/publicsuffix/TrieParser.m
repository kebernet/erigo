//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/com/google/thirdparty/publicsuffix/TrieParser.java
//

#include "J2ObjC_source.h"
#include "com/google/common/base/Joiner.h"
#include "com/google/common/collect/ImmutableMap.h"
#include "com/google/common/collect/Lists.h"
#include "com/google/thirdparty/publicsuffix/PublicSuffixType.h"
#include "com/google/thirdparty/publicsuffix/TrieParser.h"
#include "java/lang/CharSequence.h"
#include "java/lang/StringBuilder.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"

@interface ComGoogleThirdpartyPublicsuffixTrieParser ()

+ (jint)doParseTrieToBuilderWithJavaUtilList:(id<JavaUtilList>)stack
                    withJavaLangCharSequence:(id<JavaLangCharSequence>)encoded
withComGoogleCommonCollectImmutableMap_Builder:(ComGoogleCommonCollectImmutableMap_Builder *)builder;

+ (id<JavaLangCharSequence>)reverseWithJavaLangCharSequence:(id<JavaLangCharSequence>)s;

@end

inline ComGoogleCommonBaseJoiner *ComGoogleThirdpartyPublicsuffixTrieParser_get_PREFIX_JOINER();
static ComGoogleCommonBaseJoiner *ComGoogleThirdpartyPublicsuffixTrieParser_PREFIX_JOINER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleThirdpartyPublicsuffixTrieParser, PREFIX_JOINER, ComGoogleCommonBaseJoiner *)

__attribute__((unused)) static jint ComGoogleThirdpartyPublicsuffixTrieParser_doParseTrieToBuilderWithJavaUtilList_withJavaLangCharSequence_withComGoogleCommonCollectImmutableMap_Builder_(id<JavaUtilList> stack, id<JavaLangCharSequence> encoded, ComGoogleCommonCollectImmutableMap_Builder *builder);

__attribute__((unused)) static id<JavaLangCharSequence> ComGoogleThirdpartyPublicsuffixTrieParser_reverseWithJavaLangCharSequence_(id<JavaLangCharSequence> s);

J2OBJC_INITIALIZED_DEFN(ComGoogleThirdpartyPublicsuffixTrieParser)

@implementation ComGoogleThirdpartyPublicsuffixTrieParser

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleThirdpartyPublicsuffixTrieParser_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (ComGoogleCommonCollectImmutableMap *)parseTrieWithJavaLangCharSequence:(id<JavaLangCharSequence>)encoded {
  return ComGoogleThirdpartyPublicsuffixTrieParser_parseTrieWithJavaLangCharSequence_(encoded);
}

+ (jint)doParseTrieToBuilderWithJavaUtilList:(id<JavaUtilList>)stack
                    withJavaLangCharSequence:(id<JavaLangCharSequence>)encoded
withComGoogleCommonCollectImmutableMap_Builder:(ComGoogleCommonCollectImmutableMap_Builder *)builder {
  return ComGoogleThirdpartyPublicsuffixTrieParser_doParseTrieToBuilderWithJavaUtilList_withJavaLangCharSequence_withComGoogleCommonCollectImmutableMap_Builder_(stack, encoded, builder);
}

+ (id<JavaLangCharSequence>)reverseWithJavaLangCharSequence:(id<JavaLangCharSequence>)s {
  return ComGoogleThirdpartyPublicsuffixTrieParser_reverseWithJavaLangCharSequence_(s);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonCollectImmutableMap;", 0x8, 0, 1, -1, 2, -1, -1 },
    { NULL, "I", 0xa, 3, 4, -1, 5, -1, -1 },
    { NULL, "LJavaLangCharSequence;", 0xa, 6, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(parseTrieWithJavaLangCharSequence:);
  methods[2].selector = @selector(doParseTrieToBuilderWithJavaUtilList:withJavaLangCharSequence:withComGoogleCommonCollectImmutableMap_Builder:);
  methods[3].selector = @selector(reverseWithJavaLangCharSequence:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PREFIX_JOINER", "LComGoogleCommonBaseJoiner;", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
  };
  static const void *ptrTable[] = { "parseTrie", "LJavaLangCharSequence;", "(Ljava/lang/CharSequence;)Lcom/google/common/collect/ImmutableMap<Ljava/lang/String;Lcom/google/thirdparty/publicsuffix/PublicSuffixType;>;", "doParseTrieToBuilder", "LJavaUtilList;LJavaLangCharSequence;LComGoogleCommonCollectImmutableMap_Builder;", "(Ljava/util/List<Ljava/lang/CharSequence;>;Ljava/lang/CharSequence;Lcom/google/common/collect/ImmutableMap$Builder<Ljava/lang/String;Lcom/google/thirdparty/publicsuffix/PublicSuffixType;>;)I", "reverse", &ComGoogleThirdpartyPublicsuffixTrieParser_PREFIX_JOINER };
  static const J2ObjcClassInfo _ComGoogleThirdpartyPublicsuffixTrieParser = { "TrieParser", "com.google.thirdparty.publicsuffix", ptrTable, methods, fields, 7, 0x10, 4, 1, -1, -1, -1, -1, -1 };
  return &_ComGoogleThirdpartyPublicsuffixTrieParser;
}

+ (void)initialize {
  if (self == [ComGoogleThirdpartyPublicsuffixTrieParser class]) {
    ComGoogleThirdpartyPublicsuffixTrieParser_PREFIX_JOINER = ComGoogleCommonBaseJoiner_onWithNSString_(@"");
    J2OBJC_SET_INITIALIZED(ComGoogleThirdpartyPublicsuffixTrieParser)
  }
}

@end

void ComGoogleThirdpartyPublicsuffixTrieParser_init(ComGoogleThirdpartyPublicsuffixTrieParser *self) {
  NSObject_init(self);
}

ComGoogleThirdpartyPublicsuffixTrieParser *new_ComGoogleThirdpartyPublicsuffixTrieParser_init() {
  J2OBJC_NEW_IMPL(ComGoogleThirdpartyPublicsuffixTrieParser, init)
}

ComGoogleThirdpartyPublicsuffixTrieParser *create_ComGoogleThirdpartyPublicsuffixTrieParser_init() {
  J2OBJC_CREATE_IMPL(ComGoogleThirdpartyPublicsuffixTrieParser, init)
}

ComGoogleCommonCollectImmutableMap *ComGoogleThirdpartyPublicsuffixTrieParser_parseTrieWithJavaLangCharSequence_(id<JavaLangCharSequence> encoded) {
  ComGoogleThirdpartyPublicsuffixTrieParser_initialize();
  ComGoogleCommonCollectImmutableMap_Builder *builder = ComGoogleCommonCollectImmutableMap_builder();
  jint encodedLen = [((id<JavaLangCharSequence>) nil_chk(encoded)) java_length];
  jint idx = 0;
  while (idx < encodedLen) {
    idx += ComGoogleThirdpartyPublicsuffixTrieParser_doParseTrieToBuilderWithJavaUtilList_withJavaLangCharSequence_withComGoogleCommonCollectImmutableMap_Builder_(ComGoogleCommonCollectLists_newLinkedList(), [encoded subSequenceFrom:idx to:encodedLen], builder);
  }
  return [((ComGoogleCommonCollectImmutableMap_Builder *) nil_chk(builder)) build];
}

jint ComGoogleThirdpartyPublicsuffixTrieParser_doParseTrieToBuilderWithJavaUtilList_withJavaLangCharSequence_withComGoogleCommonCollectImmutableMap_Builder_(id<JavaUtilList> stack, id<JavaLangCharSequence> encoded, ComGoogleCommonCollectImmutableMap_Builder *builder) {
  ComGoogleThirdpartyPublicsuffixTrieParser_initialize();
  jint encodedLen = [((id<JavaLangCharSequence>) nil_chk(encoded)) java_length];
  jint idx = 0;
  jchar c = 0x0000;
  for (; idx < encodedLen; idx++) {
    c = [encoded charAtWithInt:idx];
    if (c == '&' || c == '?' || c == '!' || c == ':' || c == ',') {
      break;
    }
  }
  [((id<JavaUtilList>) nil_chk(stack)) addWithInt:0 withId:ComGoogleThirdpartyPublicsuffixTrieParser_reverseWithJavaLangCharSequence_([encoded subSequenceFrom:0 to:idx])];
  if (c == '!' || c == '?' || c == ':' || c == ',') {
    NSString *domain = [((ComGoogleCommonBaseJoiner *) nil_chk(ComGoogleThirdpartyPublicsuffixTrieParser_PREFIX_JOINER)) joinWithJavaLangIterable:stack];
    if ([((NSString *) nil_chk(domain)) java_length] > 0) {
      (void) [((ComGoogleCommonCollectImmutableMap_Builder *) nil_chk(builder)) putWithId:domain withId:ComGoogleThirdpartyPublicsuffixPublicSuffixType_fromCodeWithChar_(c)];
    }
  }
  idx++;
  if (c != '?' && c != ',') {
    while (idx < encodedLen) {
      idx += ComGoogleThirdpartyPublicsuffixTrieParser_doParseTrieToBuilderWithJavaUtilList_withJavaLangCharSequence_withComGoogleCommonCollectImmutableMap_Builder_(stack, [encoded subSequenceFrom:idx to:encodedLen], builder);
      if ([encoded charAtWithInt:idx] == '?' || [encoded charAtWithInt:idx] == ',') {
        idx++;
        break;
      }
    }
  }
  (void) [stack removeWithInt:0];
  return idx;
}

id<JavaLangCharSequence> ComGoogleThirdpartyPublicsuffixTrieParser_reverseWithJavaLangCharSequence_(id<JavaLangCharSequence> s) {
  ComGoogleThirdpartyPublicsuffixTrieParser_initialize();
  return [new_JavaLangStringBuilder_initWithJavaLangCharSequence_(s) reverse];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleThirdpartyPublicsuffixTrieParser)
