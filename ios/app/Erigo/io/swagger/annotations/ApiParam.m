//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/io/swagger/annotations/ApiParam.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "io/swagger/annotations/ApiParam.h"
#include "io/swagger/annotations/Example.h"
#include "io/swagger/annotations/ExampleProperty.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/annotation/ElementType.h"
#include "java/lang/annotation/Retention.h"
#include "java/lang/annotation/RetentionPolicy.h"
#include "java/lang/annotation/Target.h"

__attribute__((unused)) static IOSObjectArray *IoSwaggerAnnotationsApiParam__Annotations$0();

@implementation IoSwaggerAnnotationsApiParam

@synthesize name = name_;
@synthesize value = value_;
@synthesize defaultValue = defaultValue_;
@synthesize allowableValues = allowableValues_;
@synthesize required = required_;
@synthesize access = access_;
@synthesize allowMultiple = allowMultiple_;
@synthesize hidden = hidden_;
@synthesize example = example_;
@synthesize examples = examples_;

+ (NSString *)nameDefault {
  return @"";
}

+ (NSString *)valueDefault {
  return @"";
}

+ (NSString *)defaultValueDefault {
  return @"";
}

+ (NSString *)allowableValuesDefault {
  return @"";
}

+ (jboolean)requiredDefault {
  return false;
}

+ (NSString *)accessDefault {
  return @"";
}

+ (jboolean)allowMultipleDefault {
  return false;
}

+ (jboolean)hiddenDefault {
  return false;
}

+ (NSString *)exampleDefault {
  return @"";
}

+ (id<IoSwaggerAnnotationsExample>)examplesDefault {
  return create_IoSwaggerAnnotationsExample([IOSObjectArray newArrayWithObjects:(id[]){ create_IoSwaggerAnnotationsExampleProperty(@"", @"") } count:1 type:IoSwaggerAnnotationsExampleProperty_class_()]);
}

- (IOSClass *)annotationType {
  return IoSwaggerAnnotationsApiParam_class_();
}

- (NSString *)description {
  return [NSString stringWithFormat:@"@io.swagger.annotations.ApiParam(name=%@, value=%@, defaultValue=%@, allowableValues=%@, required=%d, access=%@, allowMultiple=%d, hidden=%d, example=%@, examples=%@)", name_, value_, defaultValue_, allowableValues_, required_, access_, allowMultiple_, hidden_, example_, examples_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIoSwaggerAnnotationsExample;", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(name);
  methods[1].selector = @selector(value);
  methods[2].selector = @selector(defaultValue);
  methods[3].selector = @selector(allowableValues);
  methods[4].selector = @selector(required);
  methods[5].selector = @selector(access);
  methods[6].selector = @selector(allowMultiple);
  methods[7].selector = @selector(hidden);
  methods[8].selector = @selector(example);
  methods[9].selector = @selector(examples);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
    { "value_", "LNSString;", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
    { "defaultValue_", "LNSString;", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
    { "allowableValues_", "LNSString;", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
    { "required_", "Z", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
    { "access_", "LNSString;", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
    { "allowMultiple_", "Z", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
    { "hidden_", "Z", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
    { "example_", "LNSString;", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
    { "examples_", "LIoSwaggerAnnotationsExample;", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { (void *)&IoSwaggerAnnotationsApiParam__Annotations$0 };
  static const J2ObjcClassInfo _IoSwaggerAnnotationsApiParam = { "ApiParam", "io.swagger.annotations", ptrTable, methods, fields, 7, 0x2609, 10, 10, -1, -1, -1, -1, 0 };
  return &_IoSwaggerAnnotationsApiParam;
}

@end

id<IoSwaggerAnnotationsApiParam> create_IoSwaggerAnnotationsApiParam(NSString *access, jboolean allowMultiple, NSString *allowableValues, NSString *defaultValue, NSString *example, id<IoSwaggerAnnotationsExample> examples, jboolean hidden, NSString *name, jboolean required, NSString *value) {
  IoSwaggerAnnotationsApiParam *self = AUTORELEASE([[IoSwaggerAnnotationsApiParam alloc] init]);
  self->access_ = RETAIN_(access);
  self->allowMultiple_ = allowMultiple;
  self->allowableValues_ = RETAIN_(allowableValues);
  self->defaultValue_ = RETAIN_(defaultValue);
  self->example_ = RETAIN_(example);
  self->examples_ = RETAIN_(examples);
  self->hidden_ = hidden;
  self->name_ = RETAIN_(name);
  self->required_ = required;
  self->value_ = RETAIN_(value);
  return self;
}

IOSObjectArray *IoSwaggerAnnotationsApiParam__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangAnnotationTarget([IOSObjectArray newArrayWithObjects:(id[]){ JreLoadEnum(JavaLangAnnotationElementType, PARAMETER), JreLoadEnum(JavaLangAnnotationElementType, METHOD), JreLoadEnum(JavaLangAnnotationElementType, FIELD) } count:3 type:JavaLangAnnotationElementType_class_()]), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, RUNTIME)) } count:2 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(IoSwaggerAnnotationsApiParam)
