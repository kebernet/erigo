//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/annotation/MatchesPattern.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/annotation/Documented.h"
#include "java/lang/annotation/Retention.h"
#include "java/lang/annotation/RetentionPolicy.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"
#include "javax/annotation/MatchesPattern.h"
#include "javax/annotation/meta/TypeQualifier.h"
#include "javax/annotation/meta/When.h"

__attribute__((unused)) static IOSObjectArray *JavaxAnnotationMatchesPattern__Annotations$0();

@implementation JavaxAnnotationMatchesPattern

@synthesize value = value_;
@synthesize flags = flags_;

+ (jint)flagsDefault {
  return 0;
}

- (IOSClass *)annotationType {
  return JavaxAnnotationMatchesPattern_class_();
}

- (NSString *)description {
  return [NSString stringWithFormat:@"@javax.annotation.MatchesPattern(value=%@, flags=%d)", value_, flags_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(value);
  methods[1].selector = @selector(flags);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "value_", "LNSString;", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
    { "flags_", "I", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaxAnnotationMatchesPattern_Checker;", (void *)&JavaxAnnotationMatchesPattern__Annotations$0 };
  static const J2ObjcClassInfo _JavaxAnnotationMatchesPattern = { "MatchesPattern", "javax.annotation", ptrTable, methods, fields, 7, 0x2609, 2, 2, -1, 0, -1, -1, 1 };
  return &_JavaxAnnotationMatchesPattern;
}

@end

id<JavaxAnnotationMatchesPattern> create_JavaxAnnotationMatchesPattern(jint flags, NSString *value) {
  JavaxAnnotationMatchesPattern *self = AUTORELEASE([[JavaxAnnotationMatchesPattern alloc] init]);
  self->flags_ = flags;
  self->value_ = RETAIN_(value);
  return self;
}

IOSObjectArray *JavaxAnnotationMatchesPattern__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangAnnotationDocumented(), create_JavaxAnnotationMetaTypeQualifier(NSString_class_()), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, RUNTIME)) } count:3 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxAnnotationMatchesPattern)

@implementation JavaxAnnotationMatchesPattern_Checker

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  JavaxAnnotationMatchesPattern_Checker_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaxAnnotationMetaWhen *)forConstantValueWithJavaLangAnnotationAnnotation:(id<JavaxAnnotationMatchesPattern>)annotation
                                                                       withId:(id)value {
  JavaUtilRegexPattern *p = JavaUtilRegexPattern_compileWithNSString_withInt_([((id<JavaxAnnotationMatchesPattern>) nil_chk(annotation)) value], [annotation flags]);
  if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(p)) matcherWithJavaLangCharSequence:((NSString *) cast_chk(value, [NSString class]))])) matches]) return JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS);
  return JreLoadEnum(JavaxAnnotationMetaWhen, NEVER);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxAnnotationMetaWhen;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(forConstantValueWithJavaLangAnnotationAnnotation:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "forConstantValue", "LJavaxAnnotationMatchesPattern;LNSObject;", "LJavaxAnnotationMatchesPattern;", "Ljava/lang/Object;Ljavax/annotation/meta/TypeQualifierValidator<Ljavax/annotation/MatchesPattern;>;" };
  static const J2ObjcClassInfo _JavaxAnnotationMatchesPattern_Checker = { "Checker", "javax.annotation", ptrTable, methods, NULL, 7, 0x9, 2, 0, 2, -1, -1, 3, -1 };
  return &_JavaxAnnotationMatchesPattern_Checker;
}

@end

void JavaxAnnotationMatchesPattern_Checker_init(JavaxAnnotationMatchesPattern_Checker *self) {
  NSObject_init(self);
}

JavaxAnnotationMatchesPattern_Checker *new_JavaxAnnotationMatchesPattern_Checker_init() {
  J2OBJC_NEW_IMPL(JavaxAnnotationMatchesPattern_Checker, init)
}

JavaxAnnotationMatchesPattern_Checker *create_JavaxAnnotationMatchesPattern_Checker_init() {
  J2OBJC_CREATE_IMPL(JavaxAnnotationMatchesPattern_Checker, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxAnnotationMatchesPattern_Checker)
