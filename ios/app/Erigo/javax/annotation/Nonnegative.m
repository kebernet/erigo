//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/annotation/Nonnegative.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Long.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/annotation/Documented.h"
#include "java/lang/annotation/Retention.h"
#include "java/lang/annotation/RetentionPolicy.h"
#include "javax/annotation/Nonnegative.h"
#include "javax/annotation/meta/TypeQualifier.h"
#include "javax/annotation/meta/When.h"

__attribute__((unused)) static IOSObjectArray *JavaxAnnotationNonnegative__Annotations$0();

@implementation JavaxAnnotationNonnegative

@synthesize when = when_;

+ (JavaxAnnotationMetaWhen *)whenDefault {
  return JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS);
}

- (IOSClass *)annotationType {
  return JavaxAnnotationNonnegative_class_();
}

- (NSString *)description {
  return [NSString stringWithFormat:@"@javax.annotation.Nonnegative(when=%@)", when_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaxAnnotationMetaWhen;", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(when);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "when_", "LJavaxAnnotationMetaWhen;", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaxAnnotationNonnegative_Checker;", (void *)&JavaxAnnotationNonnegative__Annotations$0 };
  static const J2ObjcClassInfo _JavaxAnnotationNonnegative = { "Nonnegative", "javax.annotation", ptrTable, methods, fields, 7, 0x2609, 1, 1, -1, 0, -1, -1, 1 };
  return &_JavaxAnnotationNonnegative;
}

@end

id<JavaxAnnotationNonnegative> create_JavaxAnnotationNonnegative(JavaxAnnotationMetaWhen *when) {
  JavaxAnnotationNonnegative *self = AUTORELEASE([[JavaxAnnotationNonnegative alloc] init]);
  self->when_ = RETAIN_(when);
  return self;
}

IOSObjectArray *JavaxAnnotationNonnegative__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangAnnotationDocumented(), create_JavaxAnnotationMetaTypeQualifier(NSNumber_class_()), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, RUNTIME)) } count:3 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxAnnotationNonnegative)

@implementation JavaxAnnotationNonnegative_Checker

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  JavaxAnnotationNonnegative_Checker_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaxAnnotationMetaWhen *)forConstantValueWithJavaLangAnnotationAnnotation:(id<JavaxAnnotationNonnegative>)annotation
                                                                       withId:(id)v {
  if (!([v isKindOfClass:[NSNumber class]])) return JreLoadEnum(JavaxAnnotationMetaWhen, NEVER);
  jboolean isNegative;
  NSNumber *value = (NSNumber *) cast_chk(v, [NSNumber class]);
  if ([value isKindOfClass:[JavaLangLong class]]) isNegative = ([((NSNumber *) nil_chk(value)) longLongValue] < 0);
  else if ([value isKindOfClass:[JavaLangDouble class]]) isNegative = ([((NSNumber *) nil_chk(value)) doubleValue] < 0);
  else if ([value isKindOfClass:[JavaLangFloat class]]) isNegative = ([((NSNumber *) nil_chk(value)) floatValue] < 0);
  else isNegative = ([((NSNumber *) nil_chk(value)) intValue] < 0);
  if (isNegative) return JreLoadEnum(JavaxAnnotationMetaWhen, NEVER);
  else return JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxAnnotationMetaWhen;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(forConstantValueWithJavaLangAnnotationAnnotation:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "forConstantValue", "LJavaxAnnotationNonnegative;LNSObject;", "LJavaxAnnotationNonnegative;", "Ljava/lang/Object;Ljavax/annotation/meta/TypeQualifierValidator<Ljavax/annotation/Nonnegative;>;" };
  static const J2ObjcClassInfo _JavaxAnnotationNonnegative_Checker = { "Checker", "javax.annotation", ptrTable, methods, NULL, 7, 0x9, 2, 0, 2, -1, -1, 3, -1 };
  return &_JavaxAnnotationNonnegative_Checker;
}

@end

void JavaxAnnotationNonnegative_Checker_init(JavaxAnnotationNonnegative_Checker *self) {
  NSObject_init(self);
}

JavaxAnnotationNonnegative_Checker *new_JavaxAnnotationNonnegative_Checker_init() {
  J2OBJC_NEW_IMPL(JavaxAnnotationNonnegative_Checker, init)
}

JavaxAnnotationNonnegative_Checker *create_JavaxAnnotationNonnegative_Checker_init() {
  J2OBJC_CREATE_IMPL(JavaxAnnotationNonnegative_Checker, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxAnnotationNonnegative_Checker)
