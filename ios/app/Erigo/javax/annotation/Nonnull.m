//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/annotation/Nonnull.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/annotation/Documented.h"
#include "java/lang/annotation/Retention.h"
#include "java/lang/annotation/RetentionPolicy.h"
#include "javax/annotation/Nonnull.h"
#include "javax/annotation/meta/TypeQualifier.h"
#include "javax/annotation/meta/When.h"

__attribute__((unused)) static IOSObjectArray *JavaxAnnotationNonnull__Annotations$0();

@implementation JavaxAnnotationNonnull

@synthesize when = when_;

+ (JavaxAnnotationMetaWhen *)whenDefault {
  return JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS);
}

- (IOSClass *)annotationType {
  return JavaxAnnotationNonnull_class_();
}

- (NSString *)description {
  return [NSString stringWithFormat:@"@javax.annotation.Nonnull(when=%@)", when_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaxAnnotationMetaWhen;", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(when);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "when_", "LJavaxAnnotationMetaWhen;", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaxAnnotationNonnull_Checker;", (void *)&JavaxAnnotationNonnull__Annotations$0 };
  static const J2ObjcClassInfo _JavaxAnnotationNonnull = { "Nonnull", "javax.annotation", ptrTable, methods, fields, 7, 0x2609, 1, 1, -1, 0, -1, -1, 1 };
  return &_JavaxAnnotationNonnull;
}

@end

id<JavaxAnnotationNonnull> create_JavaxAnnotationNonnull(JavaxAnnotationMetaWhen *when) {
  JavaxAnnotationNonnull *self = AUTORELEASE([[JavaxAnnotationNonnull alloc] init]);
  self->when_ = RETAIN_(when);
  return self;
}

IOSObjectArray *JavaxAnnotationNonnull__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangAnnotationDocumented(), create_JavaxAnnotationMetaTypeQualifier(NSObject_class_()), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, RUNTIME)) } count:3 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxAnnotationNonnull)

@implementation JavaxAnnotationNonnull_Checker

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  JavaxAnnotationNonnull_Checker_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaxAnnotationMetaWhen *)forConstantValueWithJavaLangAnnotationAnnotation:(id<JavaxAnnotationNonnull>)qualifierArgument
                                                                       withId:(id)value {
  if (value == nil) return JreLoadEnum(JavaxAnnotationMetaWhen, NEVER);
  return JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxAnnotationMetaWhen;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(forConstantValueWithJavaLangAnnotationAnnotation:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "forConstantValue", "LJavaxAnnotationNonnull;LNSObject;", "LJavaxAnnotationNonnull;", "Ljava/lang/Object;Ljavax/annotation/meta/TypeQualifierValidator<Ljavax/annotation/Nonnull;>;" };
  static const J2ObjcClassInfo _JavaxAnnotationNonnull_Checker = { "Checker", "javax.annotation", ptrTable, methods, NULL, 7, 0x9, 2, 0, 2, -1, -1, 3, -1 };
  return &_JavaxAnnotationNonnull_Checker;
}

@end

void JavaxAnnotationNonnull_Checker_init(JavaxAnnotationNonnull_Checker *self) {
  NSObject_init(self);
}

JavaxAnnotationNonnull_Checker *new_JavaxAnnotationNonnull_Checker_init() {
  J2OBJC_NEW_IMPL(JavaxAnnotationNonnull_Checker, init)
}

JavaxAnnotationNonnull_Checker *create_JavaxAnnotationNonnull_Checker_init() {
  J2OBJC_CREATE_IMPL(JavaxAnnotationNonnull_Checker, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxAnnotationNonnull_Checker)
