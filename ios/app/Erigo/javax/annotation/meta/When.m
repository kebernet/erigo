//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/annotation/meta/When.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "javax/annotation/meta/When.h"

__attribute__((unused)) static void JavaxAnnotationMetaWhen_initWithNSString_withInt_(JavaxAnnotationMetaWhen *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static JavaxAnnotationMetaWhen *new_JavaxAnnotationMetaWhen_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

J2OBJC_INITIALIZED_DEFN(JavaxAnnotationMetaWhen)

JavaxAnnotationMetaWhen *JavaxAnnotationMetaWhen_values_[4];

@implementation JavaxAnnotationMetaWhen

+ (IOSObjectArray *)values {
  return JavaxAnnotationMetaWhen_values();
}

+ (JavaxAnnotationMetaWhen *)valueOfWithNSString:(NSString *)name {
  return JavaxAnnotationMetaWhen_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LJavaxAnnotationMetaWhen;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxAnnotationMetaWhen;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ALWAYS", "LJavaxAnnotationMetaWhen;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "UNKNOWN", "LJavaxAnnotationMetaWhen;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "MAYBE", "LJavaxAnnotationMetaWhen;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "NEVER", "LJavaxAnnotationMetaWhen;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(JavaxAnnotationMetaWhen, ALWAYS), &JreEnum(JavaxAnnotationMetaWhen, UNKNOWN), &JreEnum(JavaxAnnotationMetaWhen, MAYBE), &JreEnum(JavaxAnnotationMetaWhen, NEVER), "Ljava/lang/Enum<Ljavax/annotation/meta/When;>;" };
  static const J2ObjcClassInfo _JavaxAnnotationMetaWhen = { "When", "javax.annotation.meta", ptrTable, methods, fields, 7, 0x4011, 2, 4, -1, -1, -1, 6, -1 };
  return &_JavaxAnnotationMetaWhen;
}

+ (void)initialize {
  if (self == [JavaxAnnotationMetaWhen class]) {
    JreEnum(JavaxAnnotationMetaWhen, ALWAYS) = new_JavaxAnnotationMetaWhen_initWithNSString_withInt_(@"ALWAYS", 0);
    JreEnum(JavaxAnnotationMetaWhen, UNKNOWN) = new_JavaxAnnotationMetaWhen_initWithNSString_withInt_(@"UNKNOWN", 1);
    JreEnum(JavaxAnnotationMetaWhen, MAYBE) = new_JavaxAnnotationMetaWhen_initWithNSString_withInt_(@"MAYBE", 2);
    JreEnum(JavaxAnnotationMetaWhen, NEVER) = new_JavaxAnnotationMetaWhen_initWithNSString_withInt_(@"NEVER", 3);
    J2OBJC_SET_INITIALIZED(JavaxAnnotationMetaWhen)
  }
}

@end

void JavaxAnnotationMetaWhen_initWithNSString_withInt_(JavaxAnnotationMetaWhen *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

JavaxAnnotationMetaWhen *new_JavaxAnnotationMetaWhen_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(JavaxAnnotationMetaWhen, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *JavaxAnnotationMetaWhen_values() {
  JavaxAnnotationMetaWhen_initialize();
  return [IOSObjectArray arrayWithObjects:JavaxAnnotationMetaWhen_values_ count:4 type:JavaxAnnotationMetaWhen_class_()];
}

JavaxAnnotationMetaWhen *JavaxAnnotationMetaWhen_valueOfWithNSString_(NSString *name) {
  JavaxAnnotationMetaWhen_initialize();
  for (int i = 0; i < 4; i++) {
    JavaxAnnotationMetaWhen *e = JavaxAnnotationMetaWhen_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

JavaxAnnotationMetaWhen *JavaxAnnotationMetaWhen_fromOrdinal(NSUInteger ordinal) {
  JavaxAnnotationMetaWhen_initialize();
  if (ordinal >= 4) {
    return nil;
  }
  return JavaxAnnotationMetaWhen_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxAnnotationMetaWhen)
