//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/jmdns/JmDNS.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/annotation/Annotation.h"
#include "java/net/InetAddress.h"
#include "java/util/Map.h"
#include "javax/jmdns/JmDNS.h"
#include "javax/jmdns/ServiceInfo.h"
#include "javax/jmdns/ServiceListener.h"
#include "javax/jmdns/ServiceTypeListener.h"
#include "javax/jmdns/impl/JmDNSImpl.h"

#pragma clang diagnostic ignored "-Wprotocol"

__attribute__((unused)) static IOSObjectArray *JavaxJmdnsJmDNS__Annotations$0();

@interface JavaxJmdnsJmDNS_Delegate : NSObject

@end

NSString *JavaxJmdnsJmDNS_VERSION = @"3.4.1";

@implementation JavaxJmdnsJmDNS

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  JavaxJmdnsJmDNS_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (JavaxJmdnsJmDNS *)create {
  return JavaxJmdnsJmDNS_create();
}

+ (JavaxJmdnsJmDNS *)createWithJavaNetInetAddress:(JavaNetInetAddress *)addr {
  return JavaxJmdnsJmDNS_createWithJavaNetInetAddress_(addr);
}

+ (JavaxJmdnsJmDNS *)createWithNSString:(NSString *)name {
  return JavaxJmdnsJmDNS_createWithNSString_(name);
}

+ (JavaxJmdnsJmDNS *)createWithJavaNetInetAddress:(JavaNetInetAddress *)addr
                                     withNSString:(NSString *)name {
  return JavaxJmdnsJmDNS_createWithJavaNetInetAddress_withNSString_(addr, name);
}

- (NSString *)getName {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getHostName {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaNetInetAddress *)getInterface {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaxJmdnsServiceInfo *)getServiceInfoWithNSString:(NSString *)type
                                         withNSString:(NSString *)name {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaxJmdnsServiceInfo *)getServiceInfoWithNSString:(NSString *)type
                                         withNSString:(NSString *)name
                                             withLong:(jlong)timeout {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaxJmdnsServiceInfo *)getServiceInfoWithNSString:(NSString *)type
                                         withNSString:(NSString *)name
                                          withBoolean:(jboolean)persistent {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaxJmdnsServiceInfo *)getServiceInfoWithNSString:(NSString *)type
                                         withNSString:(NSString *)name
                                          withBoolean:(jboolean)persistent
                                             withLong:(jlong)timeout {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)requestServiceInfoWithNSString:(NSString *)type
                          withNSString:(NSString *)name {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)requestServiceInfoWithNSString:(NSString *)type
                          withNSString:(NSString *)name
                           withBoolean:(jboolean)persistent {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)requestServiceInfoWithNSString:(NSString *)type
                          withNSString:(NSString *)name
                              withLong:(jlong)timeout {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)requestServiceInfoWithNSString:(NSString *)type
                          withNSString:(NSString *)name
                           withBoolean:(jboolean)persistent
                              withLong:(jlong)timeout {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)addServiceTypeListenerWithJavaxJmdnsServiceTypeListener:(id<JavaxJmdnsServiceTypeListener>)listener {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)removeServiceTypeListenerWithJavaxJmdnsServiceTypeListener:(id<JavaxJmdnsServiceTypeListener>)listener {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)addServiceListenerWithNSString:(NSString *)type
         withJavaxJmdnsServiceListener:(id<JavaxJmdnsServiceListener>)listener {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)removeServiceListenerWithNSString:(NSString *)type
            withJavaxJmdnsServiceListener:(id<JavaxJmdnsServiceListener>)listener {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)registerServiceWithJavaxJmdnsServiceInfo:(JavaxJmdnsServiceInfo *)info {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)unregisterServiceWithJavaxJmdnsServiceInfo:(JavaxJmdnsServiceInfo *)info {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)unregisterAllServices {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)registerServiceTypeWithNSString:(NSString *)type {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)printServices {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (IOSObjectArray *)listWithNSString:(NSString *)type {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSObjectArray *)listWithNSString:(NSString *)type
                            withLong:(jlong)timeout {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<JavaUtilMap>)listBySubtypeWithNSString:(NSString *)type {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<JavaUtilMap>)listBySubtypeWithNSString:(NSString *)type
                                    withLong:(jlong)timeout {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<JavaxJmdnsJmDNS_Delegate>)getDelegate {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<JavaxJmdnsJmDNS_Delegate>)setDelegateWithJavaxJmdnsJmDNS_Delegate:(id<JavaxJmdnsJmDNS_Delegate>)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsJmDNS;", 0x9, -1, -1, 0, -1, -1, -1 },
    { NULL, "LJavaxJmdnsJmDNS;", 0x9, 1, 2, 0, -1, -1, -1 },
    { NULL, "LJavaxJmdnsJmDNS;", 0x9, 1, 3, 0, -1, -1, -1 },
    { NULL, "LJavaxJmdnsJmDNS;", 0x9, 1, 4, 0, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x401, -1, -1, 0, -1, -1, -1 },
    { NULL, "LJavaxJmdnsServiceInfo;", 0x401, 5, 6, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsServiceInfo;", 0x401, 5, 7, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsServiceInfo;", 0x401, 5, 8, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsServiceInfo;", 0x401, 5, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 10, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 10, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 10, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 10, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 11, 12, 0, -1, -1, -1 },
    { NULL, "V", 0x401, 13, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 16, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 17, 18, 0, -1, -1, -1 },
    { NULL, "V", 0x401, 19, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 20, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, 21, -1 },
    { NULL, "[LJavaxJmdnsServiceInfo;", 0x401, 22, 3, -1, -1, -1, -1 },
    { NULL, "[LJavaxJmdnsServiceInfo;", 0x401, 22, 23, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x401, 24, 3, -1, 25, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x401, 24, 23, -1, 26, -1, -1 },
    { NULL, "LJavaxJmdnsJmDNS_Delegate;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsJmDNS_Delegate;", 0x401, 27, 28, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(create);
  methods[2].selector = @selector(createWithJavaNetInetAddress:);
  methods[3].selector = @selector(createWithNSString:);
  methods[4].selector = @selector(createWithJavaNetInetAddress:withNSString:);
  methods[5].selector = @selector(getName);
  methods[6].selector = @selector(getHostName);
  methods[7].selector = @selector(getInterface);
  methods[8].selector = @selector(getServiceInfoWithNSString:withNSString:);
  methods[9].selector = @selector(getServiceInfoWithNSString:withNSString:withLong:);
  methods[10].selector = @selector(getServiceInfoWithNSString:withNSString:withBoolean:);
  methods[11].selector = @selector(getServiceInfoWithNSString:withNSString:withBoolean:withLong:);
  methods[12].selector = @selector(requestServiceInfoWithNSString:withNSString:);
  methods[13].selector = @selector(requestServiceInfoWithNSString:withNSString:withBoolean:);
  methods[14].selector = @selector(requestServiceInfoWithNSString:withNSString:withLong:);
  methods[15].selector = @selector(requestServiceInfoWithNSString:withNSString:withBoolean:withLong:);
  methods[16].selector = @selector(addServiceTypeListenerWithJavaxJmdnsServiceTypeListener:);
  methods[17].selector = @selector(removeServiceTypeListenerWithJavaxJmdnsServiceTypeListener:);
  methods[18].selector = @selector(addServiceListenerWithNSString:withJavaxJmdnsServiceListener:);
  methods[19].selector = @selector(removeServiceListenerWithNSString:withJavaxJmdnsServiceListener:);
  methods[20].selector = @selector(registerServiceWithJavaxJmdnsServiceInfo:);
  methods[21].selector = @selector(unregisterServiceWithJavaxJmdnsServiceInfo:);
  methods[22].selector = @selector(unregisterAllServices);
  methods[23].selector = @selector(registerServiceTypeWithNSString:);
  methods[24].selector = @selector(printServices);
  methods[25].selector = @selector(listWithNSString:);
  methods[26].selector = @selector(listWithNSString:withLong:);
  methods[27].selector = @selector(listBySubtypeWithNSString:);
  methods[28].selector = @selector(listBySubtypeWithNSString:withLong:);
  methods[29].selector = @selector(getDelegate);
  methods[30].selector = @selector(setDelegateWithJavaxJmdnsJmDNS_Delegate:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "VERSION", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 29, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoIOException;", "create", "LJavaNetInetAddress;", "LNSString;", "LJavaNetInetAddress;LNSString;", "getServiceInfo", "LNSString;LNSString;", "LNSString;LNSString;J", "LNSString;LNSString;Z", "LNSString;LNSString;ZJ", "requestServiceInfo", "addServiceTypeListener", "LJavaxJmdnsServiceTypeListener;", "removeServiceTypeListener", "addServiceListener", "LNSString;LJavaxJmdnsServiceListener;", "removeServiceListener", "registerService", "LJavaxJmdnsServiceInfo;", "unregisterService", "registerServiceType", (void *)&JavaxJmdnsJmDNS__Annotations$0, "list", "LNSString;J", "listBySubtype", "(Ljava/lang/String;)Ljava/util/Map<Ljava/lang/String;[Ljavax/jmdns/ServiceInfo;>;", "(Ljava/lang/String;J)Ljava/util/Map<Ljava/lang/String;[Ljavax/jmdns/ServiceInfo;>;", "setDelegate", "LJavaxJmdnsJmDNS_Delegate;", &JavaxJmdnsJmDNS_VERSION };
  static const J2ObjcClassInfo _JavaxJmdnsJmDNS = { "JmDNS", "javax.jmdns", ptrTable, methods, fields, 7, 0x401, 31, 1, -1, 28, -1, -1, -1 };
  return &_JavaxJmdnsJmDNS;
}

@end

void JavaxJmdnsJmDNS_init(JavaxJmdnsJmDNS *self) {
  NSObject_init(self);
}

JavaxJmdnsJmDNS *JavaxJmdnsJmDNS_create() {
  JavaxJmdnsJmDNS_initialize();
  return new_JavaxJmdnsImplJmDNSImpl_initWithJavaNetInetAddress_withNSString_(nil, nil);
}

JavaxJmdnsJmDNS *JavaxJmdnsJmDNS_createWithJavaNetInetAddress_(JavaNetInetAddress *addr) {
  JavaxJmdnsJmDNS_initialize();
  return new_JavaxJmdnsImplJmDNSImpl_initWithJavaNetInetAddress_withNSString_(addr, nil);
}

JavaxJmdnsJmDNS *JavaxJmdnsJmDNS_createWithNSString_(NSString *name) {
  JavaxJmdnsJmDNS_initialize();
  return new_JavaxJmdnsImplJmDNSImpl_initWithJavaNetInetAddress_withNSString_(nil, name);
}

JavaxJmdnsJmDNS *JavaxJmdnsJmDNS_createWithJavaNetInetAddress_withNSString_(JavaNetInetAddress *addr, NSString *name) {
  JavaxJmdnsJmDNS_initialize();
  return new_JavaxJmdnsImplJmDNSImpl_initWithJavaNetInetAddress_withNSString_(addr, name);
}

IOSObjectArray *JavaxJmdnsJmDNS__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsJmDNS)

@implementation JavaxJmdnsJmDNS_Delegate

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(cannotRecoverFromIOErrorWithJavaxJmdnsJmDNS:withJavaUtilCollection:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "cannotRecoverFromIOError", "LJavaxJmdnsJmDNS;LJavaUtilCollection;", "(Ljavax/jmdns/JmDNS;Ljava/util/Collection<Ljavax/jmdns/ServiceInfo;>;)V", "LJavaxJmdnsJmDNS;" };
  static const J2ObjcClassInfo _JavaxJmdnsJmDNS_Delegate = { "Delegate", "javax.jmdns", ptrTable, methods, NULL, 7, 0x609, 1, 0, 3, -1, -1, -1, -1 };
  return &_JavaxJmdnsJmDNS_Delegate;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxJmdnsJmDNS_Delegate)
