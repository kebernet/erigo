//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/jmdns/JmmDNS.java
//

#include "J2ObjC_source.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "javax/jmdns/JmmDNS.h"
#include "javax/jmdns/impl/JmmDNSImpl.h"

@interface JavaxJmdnsJmmDNS : NSObject

@end

@interface JavaxJmdnsJmmDNS_Factory ()

- (instancetype)init;

@end

inline id<JavaxJmdnsJmmDNS> JavaxJmdnsJmmDNS_Factory_get__instance();
inline id<JavaxJmdnsJmmDNS> JavaxJmdnsJmmDNS_Factory_set__instance(id<JavaxJmdnsJmmDNS> value);
static volatile_id JavaxJmdnsJmmDNS_Factory__instance;
J2OBJC_STATIC_FIELD_OBJ_VOLATILE(JavaxJmdnsJmmDNS_Factory, _instance, id<JavaxJmdnsJmmDNS>)

inline JavaUtilConcurrentAtomicAtomicReference *JavaxJmdnsJmmDNS_Factory_get__databaseClassDelegate();
static JavaUtilConcurrentAtomicAtomicReference *JavaxJmdnsJmmDNS_Factory__databaseClassDelegate;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaxJmdnsJmmDNS_Factory, _databaseClassDelegate, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void JavaxJmdnsJmmDNS_Factory_init(JavaxJmdnsJmmDNS_Factory *self);

__attribute__((unused)) static JavaxJmdnsJmmDNS_Factory *new_JavaxJmdnsJmmDNS_Factory_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static JavaxJmdnsJmmDNS_Factory *create_JavaxJmdnsJmmDNS_Factory_init();

@interface JavaxJmdnsJmmDNS_Factory_ClassDelegate : NSObject

@end

@implementation JavaxJmdnsJmmDNS

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LJavaNetInetAddress;", 0x401, -1, -1, 0, -1, -1, -1 },
    { NULL, "[LJavaxJmdnsServiceInfo;", 0x401, 1, 2, -1, -1, -1, -1 },
    { NULL, "[LJavaxJmdnsServiceInfo;", 0x401, 1, 3, -1, -1, -1, -1 },
    { NULL, "[LJavaxJmdnsServiceInfo;", 0x401, 1, 4, -1, -1, -1, -1 },
    { NULL, "[LJavaxJmdnsServiceInfo;", 0x401, 1, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 6, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 6, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 6, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 6, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 7, 8, 0, -1, -1, -1 },
    { NULL, "V", 0x401, 9, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 12, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 13, 14, 0, -1, -1, -1 },
    { NULL, "V", 0x401, 15, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 16, 17, -1, -1, -1, -1 },
    { NULL, "[LJavaxJmdnsServiceInfo;", 0x401, 18, 17, -1, -1, -1, -1 },
    { NULL, "[LJavaxJmdnsServiceInfo;", 0x401, 18, 19, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x401, 20, 17, -1, 21, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x401, 20, 19, -1, 22, -1, -1 },
    { NULL, "V", 0x401, 23, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 25, 24, -1, -1, -1, -1 },
    { NULL, "[LJavaxJmdnsNetworkTopologyListener;", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getNames);
  methods[1].selector = @selector(getHostNames);
  methods[2].selector = @selector(getInterfaces);
  methods[3].selector = @selector(getServiceInfosWithNSString:withNSString:);
  methods[4].selector = @selector(getServiceInfosWithNSString:withNSString:withLong:);
  methods[5].selector = @selector(getServiceInfosWithNSString:withNSString:withBoolean:);
  methods[6].selector = @selector(getServiceInfosWithNSString:withNSString:withBoolean:withLong:);
  methods[7].selector = @selector(requestServiceInfoWithNSString:withNSString:);
  methods[8].selector = @selector(requestServiceInfoWithNSString:withNSString:withBoolean:);
  methods[9].selector = @selector(requestServiceInfoWithNSString:withNSString:withLong:);
  methods[10].selector = @selector(requestServiceInfoWithNSString:withNSString:withBoolean:withLong:);
  methods[11].selector = @selector(addServiceTypeListenerWithJavaxJmdnsServiceTypeListener:);
  methods[12].selector = @selector(removeServiceTypeListenerWithJavaxJmdnsServiceTypeListener:);
  methods[13].selector = @selector(addServiceListenerWithNSString:withJavaxJmdnsServiceListener:);
  methods[14].selector = @selector(removeServiceListenerWithNSString:withJavaxJmdnsServiceListener:);
  methods[15].selector = @selector(registerServiceWithJavaxJmdnsServiceInfo:);
  methods[16].selector = @selector(unregisterServiceWithJavaxJmdnsServiceInfo:);
  methods[17].selector = @selector(unregisterAllServices);
  methods[18].selector = @selector(registerServiceTypeWithNSString:);
  methods[19].selector = @selector(listWithNSString:);
  methods[20].selector = @selector(listWithNSString:withLong:);
  methods[21].selector = @selector(listBySubtypeWithNSString:);
  methods[22].selector = @selector(listBySubtypeWithNSString:withLong:);
  methods[23].selector = @selector(addNetworkTopologyListenerWithJavaxJmdnsNetworkTopologyListener:);
  methods[24].selector = @selector(removeNetworkTopologyListenerWithJavaxJmdnsNetworkTopologyListener:);
  methods[25].selector = @selector(networkListeners);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaIoIOException;", "getServiceInfos", "LNSString;LNSString;", "LNSString;LNSString;J", "LNSString;LNSString;Z", "LNSString;LNSString;ZJ", "requestServiceInfo", "addServiceTypeListener", "LJavaxJmdnsServiceTypeListener;", "removeServiceTypeListener", "addServiceListener", "LNSString;LJavaxJmdnsServiceListener;", "removeServiceListener", "registerService", "LJavaxJmdnsServiceInfo;", "unregisterService", "registerServiceType", "LNSString;", "list", "LNSString;J", "listBySubtype", "(Ljava/lang/String;)Ljava/util/Map<Ljava/lang/String;[Ljavax/jmdns/ServiceInfo;>;", "(Ljava/lang/String;J)Ljava/util/Map<Ljava/lang/String;[Ljavax/jmdns/ServiceInfo;>;", "addNetworkTopologyListener", "LJavaxJmdnsNetworkTopologyListener;", "removeNetworkTopologyListener", "LJavaxJmdnsJmmDNS_Factory;" };
  static const J2ObjcClassInfo _JavaxJmdnsJmmDNS = { "JmmDNS", "javax.jmdns", ptrTable, methods, NULL, 7, 0x609, 26, 0, -1, 26, -1, -1, -1 };
  return &_JavaxJmdnsJmmDNS;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxJmdnsJmmDNS)

J2OBJC_INITIALIZED_DEFN(JavaxJmdnsJmmDNS_Factory)

@implementation JavaxJmdnsJmmDNS_Factory

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  JavaxJmdnsJmmDNS_Factory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)setClassDelegateWithJavaxJmdnsJmmDNS_Factory_ClassDelegate:(id<JavaxJmdnsJmmDNS_Factory_ClassDelegate>)delegate {
  JavaxJmdnsJmmDNS_Factory_setClassDelegateWithJavaxJmdnsJmmDNS_Factory_ClassDelegate_(delegate);
}

+ (id<JavaxJmdnsJmmDNS_Factory_ClassDelegate>)classDelegate {
  return JavaxJmdnsJmmDNS_Factory_classDelegate();
}

+ (id<JavaxJmdnsJmmDNS>)newJmmDNS {
  return JavaxJmdnsJmmDNS_Factory_newJmmDNS();
}

+ (id<JavaxJmdnsJmmDNS>)getInstance {
  return JavaxJmdnsJmmDNS_Factory_getInstance();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsJmmDNS_Factory_ClassDelegate;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsJmmDNS;", 0xc, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsJmmDNS;", 0x9, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setClassDelegateWithJavaxJmdnsJmmDNS_Factory_ClassDelegate:);
  methods[2].selector = @selector(classDelegate);
  methods[3].selector = @selector(newJmmDNS);
  methods[4].selector = @selector(getInstance);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_instance", "LJavaxJmdnsJmmDNS;", .constantValue.asLong = 0, 0x4a, -1, 2, -1, -1 },
    { "_databaseClassDelegate", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1a, -1, 3, 4, -1 },
  };
  static const void *ptrTable[] = { "setClassDelegate", "LJavaxJmdnsJmmDNS_Factory_ClassDelegate;", &JavaxJmdnsJmmDNS_Factory__instance, &JavaxJmdnsJmmDNS_Factory__databaseClassDelegate, "Ljava/util/concurrent/atomic/AtomicReference<Ljavax/jmdns/JmmDNS$Factory$ClassDelegate;>;", "LJavaxJmdnsJmmDNS;" };
  static const J2ObjcClassInfo _JavaxJmdnsJmmDNS_Factory = { "Factory", "javax.jmdns", ptrTable, methods, fields, 7, 0x19, 5, 2, 5, 1, -1, -1, -1 };
  return &_JavaxJmdnsJmmDNS_Factory;
}

+ (void)initialize {
  if (self == [JavaxJmdnsJmmDNS_Factory class]) {
    JavaxJmdnsJmmDNS_Factory__databaseClassDelegate = new_JavaUtilConcurrentAtomicAtomicReference_init();
    J2OBJC_SET_INITIALIZED(JavaxJmdnsJmmDNS_Factory)
  }
}

@end

void JavaxJmdnsJmmDNS_Factory_init(JavaxJmdnsJmmDNS_Factory *self) {
  NSObject_init(self);
}

JavaxJmdnsJmmDNS_Factory *new_JavaxJmdnsJmmDNS_Factory_init() {
  J2OBJC_NEW_IMPL(JavaxJmdnsJmmDNS_Factory, init)
}

JavaxJmdnsJmmDNS_Factory *create_JavaxJmdnsJmmDNS_Factory_init() {
  J2OBJC_CREATE_IMPL(JavaxJmdnsJmmDNS_Factory, init)
}

void JavaxJmdnsJmmDNS_Factory_setClassDelegateWithJavaxJmdnsJmmDNS_Factory_ClassDelegate_(id<JavaxJmdnsJmmDNS_Factory_ClassDelegate> delegate) {
  JavaxJmdnsJmmDNS_Factory_initialize();
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(JavaxJmdnsJmmDNS_Factory__databaseClassDelegate)) setWithId:delegate];
}

id<JavaxJmdnsJmmDNS_Factory_ClassDelegate> JavaxJmdnsJmmDNS_Factory_classDelegate() {
  JavaxJmdnsJmmDNS_Factory_initialize();
  return [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(JavaxJmdnsJmmDNS_Factory__databaseClassDelegate)) get];
}

id<JavaxJmdnsJmmDNS> JavaxJmdnsJmmDNS_Factory_newJmmDNS() {
  JavaxJmdnsJmmDNS_Factory_initialize();
  id<JavaxJmdnsJmmDNS> dns = nil;
  id<JavaxJmdnsJmmDNS_Factory_ClassDelegate> delegate = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(JavaxJmdnsJmmDNS_Factory__databaseClassDelegate)) get];
  if (delegate != nil) {
    dns = [delegate newJmmDNS];
  }
  return (dns != nil ? dns : new_JavaxJmdnsImplJmmDNSImpl_init());
}

id<JavaxJmdnsJmmDNS> JavaxJmdnsJmmDNS_Factory_getInstance() {
  JavaxJmdnsJmmDNS_Factory_initialize();
  if (JreLoadVolatileId(&JavaxJmdnsJmmDNS_Factory__instance) == nil) {
    @synchronized(JavaxJmdnsJmmDNS_Factory_class_()) {
      if (JreLoadVolatileId(&JavaxJmdnsJmmDNS_Factory__instance) == nil) {
        (void) JreVolatileStrongAssign(&JavaxJmdnsJmmDNS_Factory__instance, JavaxJmdnsJmmDNS_Factory_newJmmDNS());
      }
    }
  }
  return JreLoadVolatileId(&JavaxJmdnsJmmDNS_Factory__instance);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsJmmDNS_Factory)

@implementation JavaxJmdnsJmmDNS_Factory_ClassDelegate

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaxJmdnsJmmDNS;", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(newJmmDNS);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaxJmdnsJmmDNS_Factory;" };
  static const J2ObjcClassInfo _JavaxJmdnsJmmDNS_Factory_ClassDelegate = { "ClassDelegate", "javax.jmdns", ptrTable, methods, NULL, 7, 0x609, 1, 0, 0, -1, -1, -1, -1 };
  return &_JavaxJmdnsJmmDNS_Factory_ClassDelegate;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxJmdnsJmmDNS_Factory_ClassDelegate)
