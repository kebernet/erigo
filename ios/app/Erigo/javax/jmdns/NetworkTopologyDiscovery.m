//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/jmdns/NetworkTopologyDiscovery.java
//

#include "J2ObjC_source.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "javax/jmdns/NetworkTopologyDiscovery.h"
#include "javax/jmdns/impl/NetworkTopologyDiscoveryImpl.h"

@interface JavaxJmdnsNetworkTopologyDiscovery : NSObject

@end

@interface JavaxJmdnsNetworkTopologyDiscovery_Factory ()

- (instancetype)init;

@end

inline id<JavaxJmdnsNetworkTopologyDiscovery> JavaxJmdnsNetworkTopologyDiscovery_Factory_get__instance();
inline id<JavaxJmdnsNetworkTopologyDiscovery> JavaxJmdnsNetworkTopologyDiscovery_Factory_set__instance(id<JavaxJmdnsNetworkTopologyDiscovery> value);
static volatile_id JavaxJmdnsNetworkTopologyDiscovery_Factory__instance;
J2OBJC_STATIC_FIELD_OBJ_VOLATILE(JavaxJmdnsNetworkTopologyDiscovery_Factory, _instance, id<JavaxJmdnsNetworkTopologyDiscovery>)

inline JavaUtilConcurrentAtomicAtomicReference *JavaxJmdnsNetworkTopologyDiscovery_Factory_get__databaseClassDelegate();
static JavaUtilConcurrentAtomicAtomicReference *JavaxJmdnsNetworkTopologyDiscovery_Factory__databaseClassDelegate;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaxJmdnsNetworkTopologyDiscovery_Factory, _databaseClassDelegate, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void JavaxJmdnsNetworkTopologyDiscovery_Factory_init(JavaxJmdnsNetworkTopologyDiscovery_Factory *self);

__attribute__((unused)) static JavaxJmdnsNetworkTopologyDiscovery_Factory *new_JavaxJmdnsNetworkTopologyDiscovery_Factory_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static JavaxJmdnsNetworkTopologyDiscovery_Factory *create_JavaxJmdnsNetworkTopologyDiscovery_Factory_init();

@interface JavaxJmdnsNetworkTopologyDiscovery_Factory_ClassDelegate : NSObject

@end

@implementation JavaxJmdnsNetworkTopologyDiscovery

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LJavaNetInetAddress;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 4, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getInetAddresses);
  methods[1].selector = @selector(useInetAddressWithJavaNetNetworkInterface:withJavaNetInetAddress:);
  methods[2].selector = @selector(lockInetAddressWithJavaNetInetAddress:);
  methods[3].selector = @selector(unlockInetAddressWithJavaNetInetAddress:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "useInetAddress", "LJavaNetNetworkInterface;LJavaNetInetAddress;", "lockInetAddress", "LJavaNetInetAddress;", "unlockInetAddress", "LJavaxJmdnsNetworkTopologyDiscovery_Factory;" };
  static const J2ObjcClassInfo _JavaxJmdnsNetworkTopologyDiscovery = { "NetworkTopologyDiscovery", "javax.jmdns", ptrTable, methods, NULL, 7, 0x609, 4, 0, -1, 5, -1, -1, -1 };
  return &_JavaxJmdnsNetworkTopologyDiscovery;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxJmdnsNetworkTopologyDiscovery)

J2OBJC_INITIALIZED_DEFN(JavaxJmdnsNetworkTopologyDiscovery_Factory)

@implementation JavaxJmdnsNetworkTopologyDiscovery_Factory

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  JavaxJmdnsNetworkTopologyDiscovery_Factory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)setClassDelegateWithJavaxJmdnsNetworkTopologyDiscovery_Factory_ClassDelegate:(id<JavaxJmdnsNetworkTopologyDiscovery_Factory_ClassDelegate>)delegate {
  JavaxJmdnsNetworkTopologyDiscovery_Factory_setClassDelegateWithJavaxJmdnsNetworkTopologyDiscovery_Factory_ClassDelegate_(delegate);
}

+ (id<JavaxJmdnsNetworkTopologyDiscovery_Factory_ClassDelegate>)classDelegate {
  return JavaxJmdnsNetworkTopologyDiscovery_Factory_classDelegate();
}

+ (id<JavaxJmdnsNetworkTopologyDiscovery>)newNetworkTopologyDiscovery {
  return JavaxJmdnsNetworkTopologyDiscovery_Factory_newNetworkTopologyDiscovery();
}

+ (id<JavaxJmdnsNetworkTopologyDiscovery>)getInstance {
  return JavaxJmdnsNetworkTopologyDiscovery_Factory_getInstance();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsNetworkTopologyDiscovery_Factory_ClassDelegate;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsNetworkTopologyDiscovery;", 0xc, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsNetworkTopologyDiscovery;", 0x9, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setClassDelegateWithJavaxJmdnsNetworkTopologyDiscovery_Factory_ClassDelegate:);
  methods[2].selector = @selector(classDelegate);
  methods[3].selector = @selector(newNetworkTopologyDiscovery);
  methods[4].selector = @selector(getInstance);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_instance", "LJavaxJmdnsNetworkTopologyDiscovery;", .constantValue.asLong = 0, 0x4a, -1, 2, -1, -1 },
    { "_databaseClassDelegate", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1a, -1, 3, 4, -1 },
  };
  static const void *ptrTable[] = { "setClassDelegate", "LJavaxJmdnsNetworkTopologyDiscovery_Factory_ClassDelegate;", &JavaxJmdnsNetworkTopologyDiscovery_Factory__instance, &JavaxJmdnsNetworkTopologyDiscovery_Factory__databaseClassDelegate, "Ljava/util/concurrent/atomic/AtomicReference<Ljavax/jmdns/NetworkTopologyDiscovery$Factory$ClassDelegate;>;", "LJavaxJmdnsNetworkTopologyDiscovery;" };
  static const J2ObjcClassInfo _JavaxJmdnsNetworkTopologyDiscovery_Factory = { "Factory", "javax.jmdns", ptrTable, methods, fields, 7, 0x19, 5, 2, 5, 1, -1, -1, -1 };
  return &_JavaxJmdnsNetworkTopologyDiscovery_Factory;
}

+ (void)initialize {
  if (self == [JavaxJmdnsNetworkTopologyDiscovery_Factory class]) {
    JavaxJmdnsNetworkTopologyDiscovery_Factory__databaseClassDelegate = new_JavaUtilConcurrentAtomicAtomicReference_init();
    J2OBJC_SET_INITIALIZED(JavaxJmdnsNetworkTopologyDiscovery_Factory)
  }
}

@end

void JavaxJmdnsNetworkTopologyDiscovery_Factory_init(JavaxJmdnsNetworkTopologyDiscovery_Factory *self) {
  NSObject_init(self);
}

JavaxJmdnsNetworkTopologyDiscovery_Factory *new_JavaxJmdnsNetworkTopologyDiscovery_Factory_init() {
  J2OBJC_NEW_IMPL(JavaxJmdnsNetworkTopologyDiscovery_Factory, init)
}

JavaxJmdnsNetworkTopologyDiscovery_Factory *create_JavaxJmdnsNetworkTopologyDiscovery_Factory_init() {
  J2OBJC_CREATE_IMPL(JavaxJmdnsNetworkTopologyDiscovery_Factory, init)
}

void JavaxJmdnsNetworkTopologyDiscovery_Factory_setClassDelegateWithJavaxJmdnsNetworkTopologyDiscovery_Factory_ClassDelegate_(id<JavaxJmdnsNetworkTopologyDiscovery_Factory_ClassDelegate> delegate) {
  JavaxJmdnsNetworkTopologyDiscovery_Factory_initialize();
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(JavaxJmdnsNetworkTopologyDiscovery_Factory__databaseClassDelegate)) setWithId:delegate];
}

id<JavaxJmdnsNetworkTopologyDiscovery_Factory_ClassDelegate> JavaxJmdnsNetworkTopologyDiscovery_Factory_classDelegate() {
  JavaxJmdnsNetworkTopologyDiscovery_Factory_initialize();
  return [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(JavaxJmdnsNetworkTopologyDiscovery_Factory__databaseClassDelegate)) get];
}

id<JavaxJmdnsNetworkTopologyDiscovery> JavaxJmdnsNetworkTopologyDiscovery_Factory_newNetworkTopologyDiscovery() {
  JavaxJmdnsNetworkTopologyDiscovery_Factory_initialize();
  id<JavaxJmdnsNetworkTopologyDiscovery> instance = nil;
  id<JavaxJmdnsNetworkTopologyDiscovery_Factory_ClassDelegate> delegate = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(JavaxJmdnsNetworkTopologyDiscovery_Factory__databaseClassDelegate)) get];
  if (delegate != nil) {
    instance = [delegate newNetworkTopologyDiscovery];
  }
  return (instance != nil ? instance : new_JavaxJmdnsImplNetworkTopologyDiscoveryImpl_init());
}

id<JavaxJmdnsNetworkTopologyDiscovery> JavaxJmdnsNetworkTopologyDiscovery_Factory_getInstance() {
  JavaxJmdnsNetworkTopologyDiscovery_Factory_initialize();
  if (JreLoadVolatileId(&JavaxJmdnsNetworkTopologyDiscovery_Factory__instance) == nil) {
    @synchronized(JavaxJmdnsNetworkTopologyDiscovery_Factory_class_()) {
      if (JreLoadVolatileId(&JavaxJmdnsNetworkTopologyDiscovery_Factory__instance) == nil) {
        (void) JreVolatileStrongAssign(&JavaxJmdnsNetworkTopologyDiscovery_Factory__instance, JavaxJmdnsNetworkTopologyDiscovery_Factory_newNetworkTopologyDiscovery());
      }
    }
  }
  return JreLoadVolatileId(&JavaxJmdnsNetworkTopologyDiscovery_Factory__instance);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsNetworkTopologyDiscovery_Factory)

@implementation JavaxJmdnsNetworkTopologyDiscovery_Factory_ClassDelegate

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaxJmdnsNetworkTopologyDiscovery;", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(newNetworkTopologyDiscovery);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaxJmdnsNetworkTopologyDiscovery_Factory;" };
  static const J2ObjcClassInfo _JavaxJmdnsNetworkTopologyDiscovery_Factory_ClassDelegate = { "ClassDelegate", "javax.jmdns", ptrTable, methods, NULL, 7, 0x609, 1, 0, 0, -1, -1, -1, -1 };
  return &_JavaxJmdnsNetworkTopologyDiscovery_Factory_ClassDelegate;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxJmdnsNetworkTopologyDiscovery_Factory_ClassDelegate)
