//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/jmdns/ServiceEvent.java
//

#include "J2ObjC_source.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/util/EventObject.h"
#include "javax/jmdns/JmDNS.h"
#include "javax/jmdns/ServiceEvent.h"
#include "javax/jmdns/ServiceInfo.h"

inline jlong JavaxJmdnsServiceEvent_get_serialVersionUID();
#define JavaxJmdnsServiceEvent_serialVersionUID -8558445644541006271LL
J2OBJC_STATIC_FIELD_CONSTANT(JavaxJmdnsServiceEvent, serialVersionUID, jlong)

@implementation JavaxJmdnsServiceEvent

- (instancetype)initWithId:(id)eventSource {
  JavaxJmdnsServiceEvent_initWithId_(self, eventSource);
  return self;
}

- (JavaxJmdnsJmDNS *)getDNS {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getType {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getName {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaxJmdnsServiceInfo *)getInfo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaxJmdnsServiceEvent *)java_clone {
  @try {
    return (JavaxJmdnsServiceEvent *) cast_chk([super java_clone], [JavaxJmdnsServiceEvent class]);
  }
  @catch (JavaLangCloneNotSupportedException *exception) {
    return nil;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsJmDNS;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsServiceInfo;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsServiceEvent;", 0x1, 1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithId:);
  methods[1].selector = @selector(getDNS);
  methods[2].selector = @selector(getType);
  methods[3].selector = @selector(getName);
  methods[4].selector = @selector(getInfo);
  methods[5].selector = @selector(java_clone);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = JavaxJmdnsServiceEvent_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;", "clone" };
  static const J2ObjcClassInfo _JavaxJmdnsServiceEvent = { "ServiceEvent", "javax.jmdns", ptrTable, methods, fields, 7, 0x401, 6, 1, -1, -1, -1, -1, -1 };
  return &_JavaxJmdnsServiceEvent;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self java_clone];
}

@end

void JavaxJmdnsServiceEvent_initWithId_(JavaxJmdnsServiceEvent *self, id eventSource) {
  JavaUtilEventObject_initWithId_(self, eventSource);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsServiceEvent)
