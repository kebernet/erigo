//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/jmdns/ServiceInfo.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/net/Inet4Address.h"
#include "java/net/Inet6Address.h"
#include "java/net/InetAddress.h"
#include "java/util/Enumeration.h"
#include "java/util/Map.h"
#include "javax/jmdns/ServiceInfo.h"
#include "javax/jmdns/impl/ServiceInfoImpl.h"

__attribute__((unused)) static IOSObjectArray *JavaxJmdnsServiceInfo__Annotations$0();

__attribute__((unused)) static IOSObjectArray *JavaxJmdnsServiceInfo__Annotations$1();

__attribute__((unused)) static IOSObjectArray *JavaxJmdnsServiceInfo__Annotations$2();

__attribute__((unused)) static IOSObjectArray *JavaxJmdnsServiceInfo__Annotations$3();

__attribute__((unused)) static IOSObjectArray *JavaxJmdnsServiceInfo__Annotations$4();

__attribute__((unused)) static IOSObjectArray *JavaxJmdnsServiceInfo__Annotations$5();

__attribute__((unused)) static IOSObjectArray *JavaxJmdnsServiceInfo__Annotations$6();

__attribute__((unused)) static IOSObjectArray *JavaxJmdnsServiceInfo__Annotations$7();

__attribute__((unused)) static void JavaxJmdnsServiceInfo_Fields_initWithNSString_withInt_(JavaxJmdnsServiceInfo_Fields *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static JavaxJmdnsServiceInfo_Fields *new_JavaxJmdnsServiceInfo_Fields_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

J2OBJC_INITIALIZED_DEFN(JavaxJmdnsServiceInfo)

IOSByteArray *JavaxJmdnsServiceInfo_NO_VALUE;

@implementation JavaxJmdnsServiceInfo

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  JavaxJmdnsServiceInfo_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (JavaxJmdnsServiceInfo *)createWithNSString:(NSString *)type
                                 withNSString:(NSString *)name
                                      withInt:(jint)port
                                 withNSString:(NSString *)text {
  return JavaxJmdnsServiceInfo_createWithNSString_withNSString_withInt_withNSString_(type, name, port, text);
}

+ (JavaxJmdnsServiceInfo *)createWithNSString:(NSString *)type
                                 withNSString:(NSString *)name
                                 withNSString:(NSString *)subtype
                                      withInt:(jint)port
                                 withNSString:(NSString *)text {
  return JavaxJmdnsServiceInfo_createWithNSString_withNSString_withNSString_withInt_withNSString_(type, name, subtype, port, text);
}

+ (JavaxJmdnsServiceInfo *)createWithNSString:(NSString *)type
                                 withNSString:(NSString *)name
                                      withInt:(jint)port
                                      withInt:(jint)weight
                                      withInt:(jint)priority
                                 withNSString:(NSString *)text {
  return JavaxJmdnsServiceInfo_createWithNSString_withNSString_withInt_withInt_withInt_withNSString_(type, name, port, weight, priority, text);
}

+ (JavaxJmdnsServiceInfo *)createWithNSString:(NSString *)type
                                 withNSString:(NSString *)name
                                 withNSString:(NSString *)subtype
                                      withInt:(jint)port
                                      withInt:(jint)weight
                                      withInt:(jint)priority
                                 withNSString:(NSString *)text {
  return JavaxJmdnsServiceInfo_createWithNSString_withNSString_withNSString_withInt_withInt_withInt_withNSString_(type, name, subtype, port, weight, priority, text);
}

+ (JavaxJmdnsServiceInfo *)createWithNSString:(NSString *)type
                                 withNSString:(NSString *)name
                                      withInt:(jint)port
                                      withInt:(jint)weight
                                      withInt:(jint)priority
                              withJavaUtilMap:(id<JavaUtilMap>)props {
  return JavaxJmdnsServiceInfo_createWithNSString_withNSString_withInt_withInt_withInt_withJavaUtilMap_(type, name, port, weight, priority, props);
}

+ (JavaxJmdnsServiceInfo *)createWithNSString:(NSString *)type
                                 withNSString:(NSString *)name
                                 withNSString:(NSString *)subtype
                                      withInt:(jint)port
                                      withInt:(jint)weight
                                      withInt:(jint)priority
                              withJavaUtilMap:(id<JavaUtilMap>)props {
  return JavaxJmdnsServiceInfo_createWithNSString_withNSString_withNSString_withInt_withInt_withInt_withJavaUtilMap_(type, name, subtype, port, weight, priority, props);
}

+ (JavaxJmdnsServiceInfo *)createWithNSString:(NSString *)type
                                 withNSString:(NSString *)name
                                      withInt:(jint)port
                                      withInt:(jint)weight
                                      withInt:(jint)priority
                                withByteArray:(IOSByteArray *)text {
  return JavaxJmdnsServiceInfo_createWithNSString_withNSString_withInt_withInt_withInt_withByteArray_(type, name, port, weight, priority, text);
}

+ (JavaxJmdnsServiceInfo *)createWithNSString:(NSString *)type
                                 withNSString:(NSString *)name
                                 withNSString:(NSString *)subtype
                                      withInt:(jint)port
                                      withInt:(jint)weight
                                      withInt:(jint)priority
                                withByteArray:(IOSByteArray *)text {
  return JavaxJmdnsServiceInfo_createWithNSString_withNSString_withNSString_withInt_withInt_withInt_withByteArray_(type, name, subtype, port, weight, priority, text);
}

+ (JavaxJmdnsServiceInfo *)createWithNSString:(NSString *)type
                                 withNSString:(NSString *)name
                                      withInt:(jint)port
                                      withInt:(jint)weight
                                      withInt:(jint)priority
                                  withBoolean:(jboolean)persistent
                                 withNSString:(NSString *)text {
  return JavaxJmdnsServiceInfo_createWithNSString_withNSString_withInt_withInt_withInt_withBoolean_withNSString_(type, name, port, weight, priority, persistent, text);
}

+ (JavaxJmdnsServiceInfo *)createWithNSString:(NSString *)type
                                 withNSString:(NSString *)name
                                 withNSString:(NSString *)subtype
                                      withInt:(jint)port
                                      withInt:(jint)weight
                                      withInt:(jint)priority
                                  withBoolean:(jboolean)persistent
                                 withNSString:(NSString *)text {
  return JavaxJmdnsServiceInfo_createWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withNSString_(type, name, subtype, port, weight, priority, persistent, text);
}

+ (JavaxJmdnsServiceInfo *)createWithNSString:(NSString *)type
                                 withNSString:(NSString *)name
                                      withInt:(jint)port
                                      withInt:(jint)weight
                                      withInt:(jint)priority
                                  withBoolean:(jboolean)persistent
                              withJavaUtilMap:(id<JavaUtilMap>)props {
  return JavaxJmdnsServiceInfo_createWithNSString_withNSString_withInt_withInt_withInt_withBoolean_withJavaUtilMap_(type, name, port, weight, priority, persistent, props);
}

+ (JavaxJmdnsServiceInfo *)createWithNSString:(NSString *)type
                                 withNSString:(NSString *)name
                                 withNSString:(NSString *)subtype
                                      withInt:(jint)port
                                      withInt:(jint)weight
                                      withInt:(jint)priority
                                  withBoolean:(jboolean)persistent
                              withJavaUtilMap:(id<JavaUtilMap>)props {
  return JavaxJmdnsServiceInfo_createWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withJavaUtilMap_(type, name, subtype, port, weight, priority, persistent, props);
}

+ (JavaxJmdnsServiceInfo *)createWithNSString:(NSString *)type
                                 withNSString:(NSString *)name
                                      withInt:(jint)port
                                      withInt:(jint)weight
                                      withInt:(jint)priority
                                  withBoolean:(jboolean)persistent
                                withByteArray:(IOSByteArray *)text {
  return JavaxJmdnsServiceInfo_createWithNSString_withNSString_withInt_withInt_withInt_withBoolean_withByteArray_(type, name, port, weight, priority, persistent, text);
}

+ (JavaxJmdnsServiceInfo *)createWithNSString:(NSString *)type
                                 withNSString:(NSString *)name
                                 withNSString:(NSString *)subtype
                                      withInt:(jint)port
                                      withInt:(jint)weight
                                      withInt:(jint)priority
                                  withBoolean:(jboolean)persistent
                                withByteArray:(IOSByteArray *)text {
  return JavaxJmdnsServiceInfo_createWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withByteArray_(type, name, subtype, port, weight, priority, persistent, text);
}

+ (JavaxJmdnsServiceInfo *)createWithJavaUtilMap:(id<JavaUtilMap>)qualifiedNameMap
                                         withInt:(jint)port
                                         withInt:(jint)weight
                                         withInt:(jint)priority
                                     withBoolean:(jboolean)persistent
                                 withJavaUtilMap:(id<JavaUtilMap>)props {
  return JavaxJmdnsServiceInfo_createWithJavaUtilMap_withInt_withInt_withInt_withBoolean_withJavaUtilMap_(qualifiedNameMap, port, weight, priority, persistent, props);
}

- (jboolean)hasData {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getType {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getTypeWithSubtype {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getName {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getKey {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getQualifiedName {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getServer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getHostAddress {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSObjectArray *)getHostAddresses {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaNetInetAddress *)getAddress {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaNetInetAddress *)getInetAddress {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaNetInet4Address *)getInet4Address {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaNetInet6Address *)getInet6Address {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSObjectArray *)getInetAddresses {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSObjectArray *)getInet4Addresses {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSObjectArray *)getInet6Addresses {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getPort {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getPriority {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getWeight {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSByteArray *)getTextBytes {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getTextString {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getURL {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSObjectArray *)getURLs {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getURLWithNSString:(NSString *)protocol {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSObjectArray *)getURLsWithNSString:(NSString *)protocol {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSByteArray *)getPropertyBytesWithNSString:(NSString *)name {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getPropertyStringWithNSString:(NSString *)name {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<JavaUtilEnumeration>)getPropertyNames {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getNiceTextString {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setTextWithByteArray:(IOSByteArray *)text {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setTextWithJavaUtilMap:(id<JavaUtilMap>)props {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)isPersistent {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getDomain {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getProtocol {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getApplication {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getSubtype {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<JavaUtilMap>)getQualifiedNameMap {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaxJmdnsServiceInfo *)java_clone {
  @try {
    return (JavaxJmdnsServiceInfo *) cast_chk([super java_clone], [JavaxJmdnsServiceInfo class]);
  }
  @catch (JavaLangCloneNotSupportedException *exception) {
    return nil;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsServiceInfo;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsServiceInfo;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsServiceInfo;", 0x9, 0, 3, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsServiceInfo;", 0x9, 0, 4, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsServiceInfo;", 0x9, 0, 5, -1, 6, -1, -1 },
    { NULL, "LJavaxJmdnsServiceInfo;", 0x9, 0, 7, -1, 8, -1, -1 },
    { NULL, "LJavaxJmdnsServiceInfo;", 0x9, 0, 9, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsServiceInfo;", 0x9, 0, 10, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsServiceInfo;", 0x9, 0, 11, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsServiceInfo;", 0x9, 0, 12, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsServiceInfo;", 0x9, 0, 13, -1, 14, -1, -1 },
    { NULL, "LJavaxJmdnsServiceInfo;", 0x9, 0, 15, -1, 16, -1, -1 },
    { NULL, "LJavaxJmdnsServiceInfo;", 0x9, 0, 17, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsServiceInfo;", 0x9, 0, 18, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsServiceInfo;", 0x9, 0, 19, -1, 20, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, 21, -1 },
    { NULL, "[LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x401, -1, -1, -1, -1, 22, -1 },
    { NULL, "LJavaNetInetAddress;", 0x401, -1, -1, -1, -1, 23, -1 },
    { NULL, "LJavaNetInet4Address;", 0x401, -1, -1, -1, -1, 24, -1 },
    { NULL, "LJavaNetInet6Address;", 0x401, -1, -1, -1, -1, 25, -1 },
    { NULL, "[LJavaNetInetAddress;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LJavaNetInet4Address;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LJavaNetInet6Address;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, 26, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, 27, -1 },
    { NULL, "[LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, 28, 29, -1, -1, 30, -1 },
    { NULL, "[LNSString;", 0x401, 31, 29, -1, -1, -1, -1 },
    { NULL, "[B", 0x401, 32, 29, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, 33, 29, -1, -1, -1, -1 },
    { NULL, "LJavaUtilEnumeration;", 0x401, -1, -1, -1, 34, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 35, 36, 37, -1, -1, -1 },
    { NULL, "V", 0x401, 35, 38, 37, 39, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x401, -1, -1, -1, 40, -1, -1 },
    { NULL, "LJavaxJmdnsServiceInfo;", 0x1, 41, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(createWithNSString:withNSString:withInt:withNSString:);
  methods[2].selector = @selector(createWithNSString:withNSString:withNSString:withInt:withNSString:);
  methods[3].selector = @selector(createWithNSString:withNSString:withInt:withInt:withInt:withNSString:);
  methods[4].selector = @selector(createWithNSString:withNSString:withNSString:withInt:withInt:withInt:withNSString:);
  methods[5].selector = @selector(createWithNSString:withNSString:withInt:withInt:withInt:withJavaUtilMap:);
  methods[6].selector = @selector(createWithNSString:withNSString:withNSString:withInt:withInt:withInt:withJavaUtilMap:);
  methods[7].selector = @selector(createWithNSString:withNSString:withInt:withInt:withInt:withByteArray:);
  methods[8].selector = @selector(createWithNSString:withNSString:withNSString:withInt:withInt:withInt:withByteArray:);
  methods[9].selector = @selector(createWithNSString:withNSString:withInt:withInt:withInt:withBoolean:withNSString:);
  methods[10].selector = @selector(createWithNSString:withNSString:withNSString:withInt:withInt:withInt:withBoolean:withNSString:);
  methods[11].selector = @selector(createWithNSString:withNSString:withInt:withInt:withInt:withBoolean:withJavaUtilMap:);
  methods[12].selector = @selector(createWithNSString:withNSString:withNSString:withInt:withInt:withInt:withBoolean:withJavaUtilMap:);
  methods[13].selector = @selector(createWithNSString:withNSString:withInt:withInt:withInt:withBoolean:withByteArray:);
  methods[14].selector = @selector(createWithNSString:withNSString:withNSString:withInt:withInt:withInt:withBoolean:withByteArray:);
  methods[15].selector = @selector(createWithJavaUtilMap:withInt:withInt:withInt:withBoolean:withJavaUtilMap:);
  methods[16].selector = @selector(hasData);
  methods[17].selector = @selector(getType);
  methods[18].selector = @selector(getTypeWithSubtype);
  methods[19].selector = @selector(getName);
  methods[20].selector = @selector(getKey);
  methods[21].selector = @selector(getQualifiedName);
  methods[22].selector = @selector(getServer);
  methods[23].selector = @selector(getHostAddress);
  methods[24].selector = @selector(getHostAddresses);
  methods[25].selector = @selector(getAddress);
  methods[26].selector = @selector(getInetAddress);
  methods[27].selector = @selector(getInet4Address);
  methods[28].selector = @selector(getInet6Address);
  methods[29].selector = @selector(getInetAddresses);
  methods[30].selector = @selector(getInet4Addresses);
  methods[31].selector = @selector(getInet6Addresses);
  methods[32].selector = @selector(getPort);
  methods[33].selector = @selector(getPriority);
  methods[34].selector = @selector(getWeight);
  methods[35].selector = @selector(getTextBytes);
  methods[36].selector = @selector(getTextString);
  methods[37].selector = @selector(getURL);
  methods[38].selector = @selector(getURLs);
  methods[39].selector = @selector(getURLWithNSString:);
  methods[40].selector = @selector(getURLsWithNSString:);
  methods[41].selector = @selector(getPropertyBytesWithNSString:);
  methods[42].selector = @selector(getPropertyStringWithNSString:);
  methods[43].selector = @selector(getPropertyNames);
  methods[44].selector = @selector(getNiceTextString);
  methods[45].selector = @selector(setTextWithByteArray:);
  methods[46].selector = @selector(setTextWithJavaUtilMap:);
  methods[47].selector = @selector(isPersistent);
  methods[48].selector = @selector(getDomain);
  methods[49].selector = @selector(getProtocol);
  methods[50].selector = @selector(getApplication);
  methods[51].selector = @selector(getSubtype);
  methods[52].selector = @selector(getQualifiedNameMap);
  methods[53].selector = @selector(java_clone);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NO_VALUE", "[B", .constantValue.asLong = 0, 0x19, -1, 42, -1, -1 },
  };
  static const void *ptrTable[] = { "create", "LNSString;LNSString;ILNSString;", "LNSString;LNSString;LNSString;ILNSString;", "LNSString;LNSString;IIILNSString;", "LNSString;LNSString;LNSString;IIILNSString;", "LNSString;LNSString;IIILJavaUtilMap;", "(Ljava/lang/String;Ljava/lang/String;IIILjava/util/Map<Ljava/lang/String;*>;)Ljavax/jmdns/ServiceInfo;", "LNSString;LNSString;LNSString;IIILJavaUtilMap;", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIILjava/util/Map<Ljava/lang/String;*>;)Ljavax/jmdns/ServiceInfo;", "LNSString;LNSString;III[B", "LNSString;LNSString;LNSString;III[B", "LNSString;LNSString;IIIZLNSString;", "LNSString;LNSString;LNSString;IIIZLNSString;", "LNSString;LNSString;IIIZLJavaUtilMap;", "(Ljava/lang/String;Ljava/lang/String;IIIZLjava/util/Map<Ljava/lang/String;*>;)Ljavax/jmdns/ServiceInfo;", "LNSString;LNSString;LNSString;IIIZLJavaUtilMap;", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIIZLjava/util/Map<Ljava/lang/String;*>;)Ljavax/jmdns/ServiceInfo;", "LNSString;LNSString;IIIZ[B", "LNSString;LNSString;LNSString;IIIZ[B", "LJavaUtilMap;IIIZLJavaUtilMap;", "(Ljava/util/Map<Ljavax/jmdns/ServiceInfo$Fields;Ljava/lang/String;>;IIIZLjava/util/Map<Ljava/lang/String;*>;)Ljavax/jmdns/ServiceInfo;", (void *)&JavaxJmdnsServiceInfo__Annotations$0, (void *)&JavaxJmdnsServiceInfo__Annotations$1, (void *)&JavaxJmdnsServiceInfo__Annotations$2, (void *)&JavaxJmdnsServiceInfo__Annotations$3, (void *)&JavaxJmdnsServiceInfo__Annotations$4, (void *)&JavaxJmdnsServiceInfo__Annotations$5, (void *)&JavaxJmdnsServiceInfo__Annotations$6, "getURL", "LNSString;", (void *)&JavaxJmdnsServiceInfo__Annotations$7, "getURLs", "getPropertyBytes", "getPropertyString", "()Ljava/util/Enumeration<Ljava/lang/String;>;", "setText", "[B", "LJavaLangIllegalStateException;", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;*>;)V", "()Ljava/util/Map<Ljavax/jmdns/ServiceInfo$Fields;Ljava/lang/String;>;", "clone", &JavaxJmdnsServiceInfo_NO_VALUE, "LJavaxJmdnsServiceInfo_Fields;" };
  static const J2ObjcClassInfo _JavaxJmdnsServiceInfo = { "ServiceInfo", "javax.jmdns", ptrTable, methods, fields, 7, 0x401, 54, 1, -1, 43, -1, -1, -1 };
  return &_JavaxJmdnsServiceInfo;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self java_clone];
}

+ (void)initialize {
  if (self == [JavaxJmdnsServiceInfo class]) {
    JavaxJmdnsServiceInfo_NO_VALUE = [IOSByteArray newArrayWithLength:0];
    J2OBJC_SET_INITIALIZED(JavaxJmdnsServiceInfo)
  }
}

@end

void JavaxJmdnsServiceInfo_init(JavaxJmdnsServiceInfo *self) {
  NSObject_init(self);
}

JavaxJmdnsServiceInfo *JavaxJmdnsServiceInfo_createWithNSString_withNSString_withInt_withNSString_(NSString *type, NSString *name, jint port, NSString *text) {
  JavaxJmdnsServiceInfo_initialize();
  return new_JavaxJmdnsImplServiceInfoImpl_initWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withNSString_(type, name, @"", port, 0, 0, false, text);
}

JavaxJmdnsServiceInfo *JavaxJmdnsServiceInfo_createWithNSString_withNSString_withNSString_withInt_withNSString_(NSString *type, NSString *name, NSString *subtype, jint port, NSString *text) {
  JavaxJmdnsServiceInfo_initialize();
  return new_JavaxJmdnsImplServiceInfoImpl_initWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withNSString_(type, name, subtype, port, 0, 0, false, text);
}

JavaxJmdnsServiceInfo *JavaxJmdnsServiceInfo_createWithNSString_withNSString_withInt_withInt_withInt_withNSString_(NSString *type, NSString *name, jint port, jint weight, jint priority, NSString *text) {
  JavaxJmdnsServiceInfo_initialize();
  return new_JavaxJmdnsImplServiceInfoImpl_initWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withNSString_(type, name, @"", port, weight, priority, false, text);
}

JavaxJmdnsServiceInfo *JavaxJmdnsServiceInfo_createWithNSString_withNSString_withNSString_withInt_withInt_withInt_withNSString_(NSString *type, NSString *name, NSString *subtype, jint port, jint weight, jint priority, NSString *text) {
  JavaxJmdnsServiceInfo_initialize();
  return new_JavaxJmdnsImplServiceInfoImpl_initWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withNSString_(type, name, subtype, port, weight, priority, false, text);
}

JavaxJmdnsServiceInfo *JavaxJmdnsServiceInfo_createWithNSString_withNSString_withInt_withInt_withInt_withJavaUtilMap_(NSString *type, NSString *name, jint port, jint weight, jint priority, id<JavaUtilMap> props) {
  JavaxJmdnsServiceInfo_initialize();
  return new_JavaxJmdnsImplServiceInfoImpl_initWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withJavaUtilMap_(type, name, @"", port, weight, priority, false, props);
}

JavaxJmdnsServiceInfo *JavaxJmdnsServiceInfo_createWithNSString_withNSString_withNSString_withInt_withInt_withInt_withJavaUtilMap_(NSString *type, NSString *name, NSString *subtype, jint port, jint weight, jint priority, id<JavaUtilMap> props) {
  JavaxJmdnsServiceInfo_initialize();
  return new_JavaxJmdnsImplServiceInfoImpl_initWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withJavaUtilMap_(type, name, subtype, port, weight, priority, false, props);
}

JavaxJmdnsServiceInfo *JavaxJmdnsServiceInfo_createWithNSString_withNSString_withInt_withInt_withInt_withByteArray_(NSString *type, NSString *name, jint port, jint weight, jint priority, IOSByteArray *text) {
  JavaxJmdnsServiceInfo_initialize();
  return new_JavaxJmdnsImplServiceInfoImpl_initWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withByteArray_(type, name, @"", port, weight, priority, false, text);
}

JavaxJmdnsServiceInfo *JavaxJmdnsServiceInfo_createWithNSString_withNSString_withNSString_withInt_withInt_withInt_withByteArray_(NSString *type, NSString *name, NSString *subtype, jint port, jint weight, jint priority, IOSByteArray *text) {
  JavaxJmdnsServiceInfo_initialize();
  return new_JavaxJmdnsImplServiceInfoImpl_initWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withByteArray_(type, name, subtype, port, weight, priority, false, text);
}

JavaxJmdnsServiceInfo *JavaxJmdnsServiceInfo_createWithNSString_withNSString_withInt_withInt_withInt_withBoolean_withNSString_(NSString *type, NSString *name, jint port, jint weight, jint priority, jboolean persistent, NSString *text) {
  JavaxJmdnsServiceInfo_initialize();
  return new_JavaxJmdnsImplServiceInfoImpl_initWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withNSString_(type, name, @"", port, weight, priority, persistent, text);
}

JavaxJmdnsServiceInfo *JavaxJmdnsServiceInfo_createWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withNSString_(NSString *type, NSString *name, NSString *subtype, jint port, jint weight, jint priority, jboolean persistent, NSString *text) {
  JavaxJmdnsServiceInfo_initialize();
  return new_JavaxJmdnsImplServiceInfoImpl_initWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withNSString_(type, name, subtype, port, weight, priority, persistent, text);
}

JavaxJmdnsServiceInfo *JavaxJmdnsServiceInfo_createWithNSString_withNSString_withInt_withInt_withInt_withBoolean_withJavaUtilMap_(NSString *type, NSString *name, jint port, jint weight, jint priority, jboolean persistent, id<JavaUtilMap> props) {
  JavaxJmdnsServiceInfo_initialize();
  return new_JavaxJmdnsImplServiceInfoImpl_initWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withJavaUtilMap_(type, name, @"", port, weight, priority, persistent, props);
}

JavaxJmdnsServiceInfo *JavaxJmdnsServiceInfo_createWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withJavaUtilMap_(NSString *type, NSString *name, NSString *subtype, jint port, jint weight, jint priority, jboolean persistent, id<JavaUtilMap> props) {
  JavaxJmdnsServiceInfo_initialize();
  return new_JavaxJmdnsImplServiceInfoImpl_initWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withJavaUtilMap_(type, name, subtype, port, weight, priority, persistent, props);
}

JavaxJmdnsServiceInfo *JavaxJmdnsServiceInfo_createWithNSString_withNSString_withInt_withInt_withInt_withBoolean_withByteArray_(NSString *type, NSString *name, jint port, jint weight, jint priority, jboolean persistent, IOSByteArray *text) {
  JavaxJmdnsServiceInfo_initialize();
  return new_JavaxJmdnsImplServiceInfoImpl_initWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withByteArray_(type, name, @"", port, weight, priority, persistent, text);
}

JavaxJmdnsServiceInfo *JavaxJmdnsServiceInfo_createWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withByteArray_(NSString *type, NSString *name, NSString *subtype, jint port, jint weight, jint priority, jboolean persistent, IOSByteArray *text) {
  JavaxJmdnsServiceInfo_initialize();
  return new_JavaxJmdnsImplServiceInfoImpl_initWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withByteArray_(type, name, subtype, port, weight, priority, persistent, text);
}

JavaxJmdnsServiceInfo *JavaxJmdnsServiceInfo_createWithJavaUtilMap_withInt_withInt_withInt_withBoolean_withJavaUtilMap_(id<JavaUtilMap> qualifiedNameMap, jint port, jint weight, jint priority, jboolean persistent, id<JavaUtilMap> props) {
  JavaxJmdnsServiceInfo_initialize();
  return new_JavaxJmdnsImplServiceInfoImpl_initWithJavaUtilMap_withInt_withInt_withInt_withBoolean_withJavaUtilMap_(qualifiedNameMap, port, weight, priority, persistent, props);
}

IOSObjectArray *JavaxJmdnsServiceInfo__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *JavaxJmdnsServiceInfo__Annotations$1() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *JavaxJmdnsServiceInfo__Annotations$2() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *JavaxJmdnsServiceInfo__Annotations$3() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *JavaxJmdnsServiceInfo__Annotations$4() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *JavaxJmdnsServiceInfo__Annotations$5() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *JavaxJmdnsServiceInfo__Annotations$6() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *JavaxJmdnsServiceInfo__Annotations$7() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsServiceInfo)

J2OBJC_INITIALIZED_DEFN(JavaxJmdnsServiceInfo_Fields)

JavaxJmdnsServiceInfo_Fields *JavaxJmdnsServiceInfo_Fields_values_[5];

@implementation JavaxJmdnsServiceInfo_Fields

+ (IOSObjectArray *)values {
  return JavaxJmdnsServiceInfo_Fields_values();
}

+ (JavaxJmdnsServiceInfo_Fields *)valueOfWithNSString:(NSString *)name {
  return JavaxJmdnsServiceInfo_Fields_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LJavaxJmdnsServiceInfo_Fields;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsServiceInfo_Fields;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "Domain", "LJavaxJmdnsServiceInfo_Fields;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "Protocol", "LJavaxJmdnsServiceInfo_Fields;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "Application", "LJavaxJmdnsServiceInfo_Fields;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "Instance", "LJavaxJmdnsServiceInfo_Fields;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "Subtype", "LJavaxJmdnsServiceInfo_Fields;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(JavaxJmdnsServiceInfo_Fields, Domain), &JreEnum(JavaxJmdnsServiceInfo_Fields, Protocol), &JreEnum(JavaxJmdnsServiceInfo_Fields, Application), &JreEnum(JavaxJmdnsServiceInfo_Fields, Instance), &JreEnum(JavaxJmdnsServiceInfo_Fields, Subtype), "LJavaxJmdnsServiceInfo;", "Ljava/lang/Enum<Ljavax/jmdns/ServiceInfo$Fields;>;" };
  static const J2ObjcClassInfo _JavaxJmdnsServiceInfo_Fields = { "Fields", "javax.jmdns", ptrTable, methods, fields, 7, 0x4019, 2, 5, 7, -1, -1, 8, -1 };
  return &_JavaxJmdnsServiceInfo_Fields;
}

+ (void)initialize {
  if (self == [JavaxJmdnsServiceInfo_Fields class]) {
    JreEnum(JavaxJmdnsServiceInfo_Fields, Domain) = new_JavaxJmdnsServiceInfo_Fields_initWithNSString_withInt_(@"Domain", 0);
    JreEnum(JavaxJmdnsServiceInfo_Fields, Protocol) = new_JavaxJmdnsServiceInfo_Fields_initWithNSString_withInt_(@"Protocol", 1);
    JreEnum(JavaxJmdnsServiceInfo_Fields, Application) = new_JavaxJmdnsServiceInfo_Fields_initWithNSString_withInt_(@"Application", 2);
    JreEnum(JavaxJmdnsServiceInfo_Fields, Instance) = new_JavaxJmdnsServiceInfo_Fields_initWithNSString_withInt_(@"Instance", 3);
    JreEnum(JavaxJmdnsServiceInfo_Fields, Subtype) = new_JavaxJmdnsServiceInfo_Fields_initWithNSString_withInt_(@"Subtype", 4);
    J2OBJC_SET_INITIALIZED(JavaxJmdnsServiceInfo_Fields)
  }
}

@end

void JavaxJmdnsServiceInfo_Fields_initWithNSString_withInt_(JavaxJmdnsServiceInfo_Fields *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

JavaxJmdnsServiceInfo_Fields *new_JavaxJmdnsServiceInfo_Fields_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(JavaxJmdnsServiceInfo_Fields, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *JavaxJmdnsServiceInfo_Fields_values() {
  JavaxJmdnsServiceInfo_Fields_initialize();
  return [IOSObjectArray arrayWithObjects:JavaxJmdnsServiceInfo_Fields_values_ count:5 type:JavaxJmdnsServiceInfo_Fields_class_()];
}

JavaxJmdnsServiceInfo_Fields *JavaxJmdnsServiceInfo_Fields_valueOfWithNSString_(NSString *name) {
  JavaxJmdnsServiceInfo_Fields_initialize();
  for (int i = 0; i < 5; i++) {
    JavaxJmdnsServiceInfo_Fields *e = JavaxJmdnsServiceInfo_Fields_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

JavaxJmdnsServiceInfo_Fields *JavaxJmdnsServiceInfo_Fields_fromOrdinal(NSUInteger ordinal) {
  JavaxJmdnsServiceInfo_Fields_initialize();
  if (ordinal >= 5) {
    return nil;
  }
  return JavaxJmdnsServiceInfo_Fields_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsServiceInfo_Fields)
