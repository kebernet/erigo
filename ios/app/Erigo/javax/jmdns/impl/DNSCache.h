//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/jmdns/impl/DNSCache.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxJmdnsImplDNSCache")
#ifdef RESTRICT_JavaxJmdnsImplDNSCache
#define INCLUDE_ALL_JavaxJmdnsImplDNSCache 0
#else
#define INCLUDE_ALL_JavaxJmdnsImplDNSCache 1
#endif
#undef RESTRICT_JavaxJmdnsImplDNSCache
#ifdef INCLUDE_JavaxJmdnsImplDNSCache__EmptyCache
#define INCLUDE_JavaxJmdnsImplDNSCache 1
#endif

#if !defined (JavaxJmdnsImplDNSCache_) && (INCLUDE_ALL_JavaxJmdnsImplDNSCache || defined(INCLUDE_JavaxJmdnsImplDNSCache))
#define JavaxJmdnsImplDNSCache_

#define RESTRICT_JavaUtilAbstractMap 1
#define INCLUDE_JavaUtilAbstractMap 1
#include "java/util/AbstractMap.h"

@class JavaxJmdnsImplConstantsDNSRecordClass;
@class JavaxJmdnsImplConstantsDNSRecordType;
@class JavaxJmdnsImplDNSEntry;
@protocol JavaUtilCollection;
@protocol JavaUtilFunctionBiFunction;
@protocol JavaUtilFunctionFunction;
@protocol JavaUtilList;
@protocol JavaUtilMap_Entry;
@protocol JavaUtilSet;

@interface JavaxJmdnsImplDNSCache : JavaUtilAbstractMap

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithJavaxJmdnsImplDNSCache:(JavaxJmdnsImplDNSCache *)map;

- (instancetype)initWithInt:(jint)initialCapacity;

- (jboolean)addDNSEntryWithJavaxJmdnsImplDNSEntry:(JavaxJmdnsImplDNSEntry *)dnsEntry;

- (id<JavaUtilCollection>)allValues;

- (id<JavaUtilList>)computeIfAbsentWithId:(NSString *)arg0
             withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg1;

- (id<JavaUtilList>)computeIfPresentWithId:(NSString *)arg0
            withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg1;

- (id<JavaUtilList>)computeWithId:(NSString *)arg0
   withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg1;

- (id<JavaUtilSet>)entrySet;

- (JavaxJmdnsImplDNSEntry *)getDNSEntryWithJavaxJmdnsImplDNSEntry:(JavaxJmdnsImplDNSEntry *)dnsEntry;

- (JavaxJmdnsImplDNSEntry *)getDNSEntryWithNSString:(NSString *)name
           withJavaxJmdnsImplConstantsDNSRecordType:(JavaxJmdnsImplConstantsDNSRecordType *)type
          withJavaxJmdnsImplConstantsDNSRecordClass:(JavaxJmdnsImplConstantsDNSRecordClass *)recordClass;

- (id<JavaUtilCollection>)getDNSEntryListWithNSString:(NSString *)name;

- (id<JavaUtilCollection>)getDNSEntryListWithNSString:(NSString *)name
             withJavaxJmdnsImplConstantsDNSRecordType:(JavaxJmdnsImplConstantsDNSRecordType *)type
            withJavaxJmdnsImplConstantsDNSRecordClass:(JavaxJmdnsImplConstantsDNSRecordClass *)recordClass;

- (id<JavaUtilList>)getOrDefaultWithId:(id)arg0
                                withId:(id<JavaUtilList>)arg1;

- (id<JavaUtilList>)getWithId:(id)arg0;

- (id<JavaUtilList>)mergeWithId:(NSString *)arg0
                         withId:(id<JavaUtilList>)arg1
 withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg2;

- (id<JavaUtilList>)putWithId:(NSString *)key
                       withId:(id<JavaUtilList>)value;

- (id<JavaUtilList>)putIfAbsentWithId:(NSString *)arg0
                               withId:(id<JavaUtilList>)arg1;

- (jboolean)removeDNSEntryWithJavaxJmdnsImplDNSEntry:(JavaxJmdnsImplDNSEntry *)dnsEntry;

- (id<JavaUtilList>)removeWithId:(id)arg0;

- (jboolean)replaceDNSEntryWithJavaxJmdnsImplDNSEntry:(JavaxJmdnsImplDNSEntry *)newDNSEntry
                           withJavaxJmdnsImplDNSEntry:(JavaxJmdnsImplDNSEntry *)existingDNSEntry;

- (id<JavaUtilList>)replaceWithId:(NSString *)arg0
                           withId:(id<JavaUtilList>)arg1;

- (NSString *)description;

#pragma mark Protected

- (id)java_clone;

- (id<JavaUtilMap_Entry>)getEntryWithNSString:(NSString *)key;

@end

J2OBJC_STATIC_INIT(JavaxJmdnsImplDNSCache)

inline JavaxJmdnsImplDNSCache *JavaxJmdnsImplDNSCache_get_EmptyCache();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaxJmdnsImplDNSCache *JavaxJmdnsImplDNSCache_EmptyCache;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaxJmdnsImplDNSCache, EmptyCache, JavaxJmdnsImplDNSCache *)

FOUNDATION_EXPORT void JavaxJmdnsImplDNSCache_init(JavaxJmdnsImplDNSCache *self);

FOUNDATION_EXPORT JavaxJmdnsImplDNSCache *new_JavaxJmdnsImplDNSCache_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxJmdnsImplDNSCache *create_JavaxJmdnsImplDNSCache_init();

FOUNDATION_EXPORT void JavaxJmdnsImplDNSCache_initWithJavaxJmdnsImplDNSCache_(JavaxJmdnsImplDNSCache *self, JavaxJmdnsImplDNSCache *map);

FOUNDATION_EXPORT JavaxJmdnsImplDNSCache *new_JavaxJmdnsImplDNSCache_initWithJavaxJmdnsImplDNSCache_(JavaxJmdnsImplDNSCache *map) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxJmdnsImplDNSCache *create_JavaxJmdnsImplDNSCache_initWithJavaxJmdnsImplDNSCache_(JavaxJmdnsImplDNSCache *map);

FOUNDATION_EXPORT void JavaxJmdnsImplDNSCache_initWithInt_(JavaxJmdnsImplDNSCache *self, jint initialCapacity);

FOUNDATION_EXPORT JavaxJmdnsImplDNSCache *new_JavaxJmdnsImplDNSCache_initWithInt_(jint initialCapacity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxJmdnsImplDNSCache *create_JavaxJmdnsImplDNSCache_initWithInt_(jint initialCapacity);

J2OBJC_TYPE_LITERAL_HEADER(JavaxJmdnsImplDNSCache)

#endif

#if !defined (JavaxJmdnsImplDNSCache__EmptyCache_) && (INCLUDE_ALL_JavaxJmdnsImplDNSCache || defined(INCLUDE_JavaxJmdnsImplDNSCache__EmptyCache))
#define JavaxJmdnsImplDNSCache__EmptyCache_

@protocol JavaUtilCollection;
@protocol JavaUtilFunctionBiFunction;
@protocol JavaUtilFunctionFunction;
@protocol JavaUtilList;
@protocol JavaUtilSet;

@interface JavaxJmdnsImplDNSCache__EmptyCache : JavaxJmdnsImplDNSCache

#pragma mark Public

- (id<JavaUtilList>)computeIfAbsentWithId:(NSString *)arg0
             withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg1;

- (id<JavaUtilList>)computeIfPresentWithId:(NSString *)arg0
            withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg1;

- (id<JavaUtilList>)computeWithId:(NSString *)arg0
   withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg1;

- (jboolean)containsKeyWithId:(id)key;

- (jboolean)containsValueWithId:(id)value;

- (id<JavaUtilSet>)entrySet;

- (jboolean)isEqual:(id)o;

- (id<JavaUtilList>)getWithId:(id)key;

- (id<JavaUtilList>)getOrDefaultWithId:(id)arg0
                                withId:(id<JavaUtilList>)arg1;

- (NSUInteger)hash;

- (jboolean)isEmpty;

- (id<JavaUtilSet>)keySet;

- (id<JavaUtilList>)mergeWithId:(NSString *)arg0
                         withId:(id<JavaUtilList>)arg1
 withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg2;

- (id<JavaUtilList>)putWithId:(NSString *)key
                       withId:(id<JavaUtilList>)value;

- (id<JavaUtilList>)putIfAbsentWithId:(NSString *)arg0
                               withId:(id<JavaUtilList>)arg1;

- (id<JavaUtilList>)removeWithId:(id)arg0;

- (id<JavaUtilList>)replaceWithId:(NSString *)arg0
                           withId:(id<JavaUtilList>)arg1;

- (jint)size;

- (id<JavaUtilCollection>)values;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxJmdnsImplDNSCache__EmptyCache)

FOUNDATION_EXPORT void JavaxJmdnsImplDNSCache__EmptyCache_init(JavaxJmdnsImplDNSCache__EmptyCache *self);

FOUNDATION_EXPORT JavaxJmdnsImplDNSCache__EmptyCache *new_JavaxJmdnsImplDNSCache__EmptyCache_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxJmdnsImplDNSCache__EmptyCache *create_JavaxJmdnsImplDNSCache__EmptyCache_init();

J2OBJC_TYPE_LITERAL_HEADER(JavaxJmdnsImplDNSCache__EmptyCache)

#endif

#if !defined (JavaxJmdnsImplDNSCache__CacheEntry_) && (INCLUDE_ALL_JavaxJmdnsImplDNSCache || defined(INCLUDE_JavaxJmdnsImplDNSCache__CacheEntry))
#define JavaxJmdnsImplDNSCache__CacheEntry_

#define RESTRICT_JavaUtilMap 1
#define INCLUDE_JavaUtilMap_Entry 1
#include "java/util/Map.h"

@protocol JavaUtilList;

@interface JavaxJmdnsImplDNSCache__CacheEntry : NSObject < JavaUtilMap_Entry >

#pragma mark Public

- (jboolean)isEqual:(id)entry_;

- (NSString *)getKey;

- (id<JavaUtilList>)getValue;

- (NSUInteger)hash;

- (jboolean)isEmpty;

- (id<JavaUtilList>)setValueWithId:(id<JavaUtilList>)value;

- (NSString *)description;

#pragma mark Protected

- (instancetype)initWithJavaUtilMap_Entry:(id<JavaUtilMap_Entry>)entry_;

- (instancetype)initWithNSString:(NSString *)key
                withJavaUtilList:(id<JavaUtilList>)value;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxJmdnsImplDNSCache__CacheEntry)

FOUNDATION_EXPORT void JavaxJmdnsImplDNSCache__CacheEntry_initWithNSString_withJavaUtilList_(JavaxJmdnsImplDNSCache__CacheEntry *self, NSString *key, id<JavaUtilList> value);

FOUNDATION_EXPORT JavaxJmdnsImplDNSCache__CacheEntry *new_JavaxJmdnsImplDNSCache__CacheEntry_initWithNSString_withJavaUtilList_(NSString *key, id<JavaUtilList> value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxJmdnsImplDNSCache__CacheEntry *create_JavaxJmdnsImplDNSCache__CacheEntry_initWithNSString_withJavaUtilList_(NSString *key, id<JavaUtilList> value);

FOUNDATION_EXPORT void JavaxJmdnsImplDNSCache__CacheEntry_initWithJavaUtilMap_Entry_(JavaxJmdnsImplDNSCache__CacheEntry *self, id<JavaUtilMap_Entry> entry_);

FOUNDATION_EXPORT JavaxJmdnsImplDNSCache__CacheEntry *new_JavaxJmdnsImplDNSCache__CacheEntry_initWithJavaUtilMap_Entry_(id<JavaUtilMap_Entry> entry_) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxJmdnsImplDNSCache__CacheEntry *create_JavaxJmdnsImplDNSCache__CacheEntry_initWithJavaUtilMap_Entry_(id<JavaUtilMap_Entry> entry_);

J2OBJC_TYPE_LITERAL_HEADER(JavaxJmdnsImplDNSCache__CacheEntry)

#endif

#pragma pop_macro("INCLUDE_ALL_JavaxJmdnsImplDNSCache")
