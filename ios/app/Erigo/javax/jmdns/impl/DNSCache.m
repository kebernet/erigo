//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/jmdns/impl/DNSCache.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/StringBuffer.h"
#include "java/util/AbstractMap.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "javax/jmdns/impl/DNSCache.h"
#include "javax/jmdns/impl/DNSEntry.h"
#include "javax/jmdns/impl/constants/DNSRecordClass.h"
#include "javax/jmdns/impl/constants/DNSRecordType.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface JavaxJmdnsImplDNSCache () {
 @public
  id<JavaUtilSet> _entrySet_;
}

- (id<JavaUtilCollection>)_getDNSEntryListWithNSString:(NSString *)name;

@end

J2OBJC_FIELD_SETTER(JavaxJmdnsImplDNSCache, _entrySet_, id<JavaUtilSet>)

__attribute__((unused)) static id<JavaUtilCollection> JavaxJmdnsImplDNSCache__getDNSEntryListWithNSString_(JavaxJmdnsImplDNSCache *self, NSString *name);

@interface JavaxJmdnsImplDNSCache__CacheEntry () {
 @public
  id<JavaUtilList> _value_;
  NSString *_key_;
}

@end

J2OBJC_FIELD_SETTER(JavaxJmdnsImplDNSCache__CacheEntry, _value_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplDNSCache__CacheEntry, _key_, NSString *)

J2OBJC_INITIALIZED_DEFN(JavaxJmdnsImplDNSCache)

JavaxJmdnsImplDNSCache *JavaxJmdnsImplDNSCache_EmptyCache;

@implementation JavaxJmdnsImplDNSCache

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  JavaxJmdnsImplDNSCache_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithJavaxJmdnsImplDNSCache:(JavaxJmdnsImplDNSCache *)map {
  JavaxJmdnsImplDNSCache_initWithJavaxJmdnsImplDNSCache_(self, map);
  return self;
}

- (instancetype)initWithInt:(jint)initialCapacity {
  JavaxJmdnsImplDNSCache_initWithInt_(self, initialCapacity);
  return self;
}

- (id<JavaUtilSet>)entrySet {
  if (_entrySet_ == nil) {
    _entrySet_ = new_JavaUtilHashSet_init();
  }
  return _entrySet_;
}

- (id<JavaUtilMap_Entry>)getEntryWithNSString:(NSString *)key {
  NSString *stringKey = (key != nil ? [((NSString *) nil_chk([key java_trim])) lowercaseString] : nil);
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([self entrySet])) {
    if (stringKey != nil) {
      if ([stringKey isEqual:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey]]) {
        return entry_;
      }
    }
    else {
      if ([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey] == nil) {
        return entry_;
      }
    }
  }
  return nil;
}

- (id<JavaUtilList>)putWithId:(NSString *)key
                       withId:(id<JavaUtilList>)value {
  @synchronized(self) {
    id<JavaUtilList> oldValue = nil;
    id<JavaUtilMap_Entry> oldEntry = [self getEntryWithNSString:key];
    if (oldEntry != nil) {
      oldValue = [oldEntry setValueWithId:value];
    }
    else {
      [((id<JavaUtilSet>) nil_chk([self entrySet])) addWithId:new_JavaxJmdnsImplDNSCache__CacheEntry_initWithNSString_withJavaUtilList_(key, value)];
    }
    return oldValue;
  }
}

- (id)java_clone {
  return new_JavaxJmdnsImplDNSCache_initWithJavaxJmdnsImplDNSCache_(self);
}

- (id<JavaUtilCollection>)allValues {
  @synchronized(self) {
    id<JavaUtilList> allValues = new_JavaUtilArrayList_init();
    for (id<JavaUtilList> __strong entry_ in nil_chk([self values])) {
      if (entry_ != nil) {
        [allValues addAllWithJavaUtilCollection:entry_];
      }
    }
    return allValues;
  }
}

- (id<JavaUtilCollection>)getDNSEntryListWithNSString:(NSString *)name {
  @synchronized(self) {
    id<JavaUtilCollection> entryList = JavaxJmdnsImplDNSCache__getDNSEntryListWithNSString_(self, name);
    if (entryList != nil) {
      entryList = new_JavaUtilArrayList_initWithJavaUtilCollection_(entryList);
    }
    else {
      entryList = JavaUtilCollections_emptyList();
    }
    return entryList;
  }
}

- (id<JavaUtilCollection>)_getDNSEntryListWithNSString:(NSString *)name {
  return JavaxJmdnsImplDNSCache__getDNSEntryListWithNSString_(self, name);
}

- (JavaxJmdnsImplDNSEntry *)getDNSEntryWithJavaxJmdnsImplDNSEntry:(JavaxJmdnsImplDNSEntry *)dnsEntry {
  @synchronized(self) {
    JavaxJmdnsImplDNSEntry *result = nil;
    if (dnsEntry != nil) {
      id<JavaUtilCollection> entryList = JavaxJmdnsImplDNSCache__getDNSEntryListWithNSString_(self, [dnsEntry getKey]);
      if (entryList != nil) {
        for (JavaxJmdnsImplDNSEntry * __strong testDNSEntry in entryList) {
          if ([((JavaxJmdnsImplDNSEntry *) nil_chk(testDNSEntry)) isSameEntryWithJavaxJmdnsImplDNSEntry:dnsEntry]) {
            result = testDNSEntry;
            break;
          }
        }
      }
    }
    return result;
  }
}

- (JavaxJmdnsImplDNSEntry *)getDNSEntryWithNSString:(NSString *)name
           withJavaxJmdnsImplConstantsDNSRecordType:(JavaxJmdnsImplConstantsDNSRecordType *)type
          withJavaxJmdnsImplConstantsDNSRecordClass:(JavaxJmdnsImplConstantsDNSRecordClass *)recordClass {
  @synchronized(self) {
    JavaxJmdnsImplDNSEntry *result = nil;
    id<JavaUtilCollection> entryList = JavaxJmdnsImplDNSCache__getDNSEntryListWithNSString_(self, name);
    if (entryList != nil) {
      for (JavaxJmdnsImplDNSEntry * __strong testDNSEntry in entryList) {
        if ([((JavaxJmdnsImplConstantsDNSRecordType *) nil_chk([((JavaxJmdnsImplDNSEntry *) nil_chk(testDNSEntry)) getRecordType])) isEqual:type] && ((JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordClass, CLASS_ANY) == recordClass) || [((JavaxJmdnsImplConstantsDNSRecordClass *) nil_chk([testDNSEntry getRecordClass])) isEqual:recordClass])) {
          result = testDNSEntry;
          break;
        }
      }
    }
    return result;
  }
}

- (id<JavaUtilCollection>)getDNSEntryListWithNSString:(NSString *)name
             withJavaxJmdnsImplConstantsDNSRecordType:(JavaxJmdnsImplConstantsDNSRecordType *)type
            withJavaxJmdnsImplConstantsDNSRecordClass:(JavaxJmdnsImplConstantsDNSRecordClass *)recordClass {
  @synchronized(self) {
    id<JavaUtilCollection> entryList = JavaxJmdnsImplDNSCache__getDNSEntryListWithNSString_(self, name);
    if (entryList != nil) {
      entryList = new_JavaUtilArrayList_initWithJavaUtilCollection_(entryList);
      for (id<JavaUtilIterator> i = [entryList iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
        JavaxJmdnsImplDNSEntry *testDNSEntry = [i next];
        if (![((JavaxJmdnsImplConstantsDNSRecordType *) nil_chk([((JavaxJmdnsImplDNSEntry *) nil_chk(testDNSEntry)) getRecordType])) isEqual:type] || ((JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordClass, CLASS_ANY) != recordClass) && ![((JavaxJmdnsImplConstantsDNSRecordClass *) nil_chk([testDNSEntry getRecordClass])) isEqual:recordClass])) {
          [i remove];
        }
      }
    }
    else {
      entryList = JavaUtilCollections_emptyList();
    }
    return entryList;
  }
}

- (jboolean)addDNSEntryWithJavaxJmdnsImplDNSEntry:(JavaxJmdnsImplDNSEntry *)dnsEntry {
  @synchronized(self) {
    jboolean result = false;
    if (dnsEntry != nil) {
      id<JavaUtilMap_Entry> oldEntry = [self getEntryWithNSString:[dnsEntry getKey]];
      id<JavaUtilList> aNewValue = nil;
      if (oldEntry != nil) {
        aNewValue = new_JavaUtilArrayList_initWithJavaUtilCollection_([oldEntry getValue]);
      }
      else {
        aNewValue = new_JavaUtilArrayList_init();
      }
      [aNewValue addWithId:dnsEntry];
      if (oldEntry != nil) {
        (void) [oldEntry setValueWithId:aNewValue];
      }
      else {
        [((id<JavaUtilSet>) nil_chk([self entrySet])) addWithId:new_JavaxJmdnsImplDNSCache__CacheEntry_initWithNSString_withJavaUtilList_([dnsEntry getKey], aNewValue)];
      }
      result = true;
    }
    return result;
  }
}

- (jboolean)removeDNSEntryWithJavaxJmdnsImplDNSEntry:(JavaxJmdnsImplDNSEntry *)dnsEntry {
  @synchronized(self) {
    jboolean result = false;
    if (dnsEntry != nil) {
      id<JavaUtilMap_Entry> existingEntry = [self getEntryWithNSString:[dnsEntry getKey]];
      if (existingEntry != nil) {
        result = [((id<JavaUtilList>) nil_chk([existingEntry getValue])) removeWithId:dnsEntry];
        if ([((id<JavaUtilList>) nil_chk([existingEntry getValue])) isEmpty]) {
          [((id<JavaUtilSet>) nil_chk([self entrySet])) removeWithId:existingEntry];
        }
      }
    }
    return result;
  }
}

- (jboolean)replaceDNSEntryWithJavaxJmdnsImplDNSEntry:(JavaxJmdnsImplDNSEntry *)newDNSEntry
                           withJavaxJmdnsImplDNSEntry:(JavaxJmdnsImplDNSEntry *)existingDNSEntry {
  @synchronized(self) {
    jboolean result = false;
    if ((newDNSEntry != nil) && (existingDNSEntry != nil) && ([((NSString *) nil_chk([((JavaxJmdnsImplDNSEntry *) nil_chk(newDNSEntry)) getKey])) isEqual:[((JavaxJmdnsImplDNSEntry *) nil_chk(existingDNSEntry)) getKey]])) {
      id<JavaUtilMap_Entry> oldEntry = [self getEntryWithNSString:[((JavaxJmdnsImplDNSEntry *) nil_chk(newDNSEntry)) getKey]];
      id<JavaUtilList> aNewValue = nil;
      if (oldEntry != nil) {
        aNewValue = new_JavaUtilArrayList_initWithJavaUtilCollection_([oldEntry getValue]);
      }
      else {
        aNewValue = new_JavaUtilArrayList_init();
      }
      [aNewValue removeWithId:existingDNSEntry];
      [aNewValue addWithId:newDNSEntry];
      if (oldEntry != nil) {
        (void) [oldEntry setValueWithId:aNewValue];
      }
      else {
        [((id<JavaUtilSet>) nil_chk([self entrySet])) addWithId:new_JavaxJmdnsImplDNSCache__CacheEntry_initWithNSString_withJavaUtilList_([newDNSEntry getKey], aNewValue)];
      }
      result = true;
    }
    return result;
  }
}

- (NSString *)description {
  @synchronized(self) {
    JavaLangStringBuffer *aLog = new_JavaLangStringBuffer_initWithInt_(2000);
    (void) [aLog appendWithNSString:@"\t---- cache ----"];
    for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([self entrySet])) {
      (void) [aLog appendWithNSString:@"\n\t\t"];
      (void) [aLog appendWithNSString:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) description]];
    }
    return [aLog description];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LJavaUtilMap_Entry;", 0x4, 3, 4, -1, 5, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 6, 7, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x4, 9, -1, 10, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x21, -1, -1, -1, 11, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x21, 12, 4, -1, 13, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x2, 14, 4, -1, 13, -1, -1 },
    { NULL, "LJavaxJmdnsImplDNSEntry;", 0x21, 15, 16, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplDNSEntry;", 0x21, 15, 17, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x21, 12, 17, -1, 18, -1, -1 },
    { NULL, "Z", 0x21, 19, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, 20, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, 21, 22, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x21, 23, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithJavaxJmdnsImplDNSCache:);
  methods[2].selector = @selector(initWithInt:);
  methods[3].selector = @selector(entrySet);
  methods[4].selector = @selector(getEntryWithNSString:);
  methods[5].selector = @selector(putWithId:withId:);
  methods[6].selector = @selector(java_clone);
  methods[7].selector = @selector(allValues);
  methods[8].selector = @selector(getDNSEntryListWithNSString:);
  methods[9].selector = @selector(_getDNSEntryListWithNSString:);
  methods[10].selector = @selector(getDNSEntryWithJavaxJmdnsImplDNSEntry:);
  methods[11].selector = @selector(getDNSEntryWithNSString:withJavaxJmdnsImplConstantsDNSRecordType:withJavaxJmdnsImplConstantsDNSRecordClass:);
  methods[12].selector = @selector(getDNSEntryListWithNSString:withJavaxJmdnsImplConstantsDNSRecordType:withJavaxJmdnsImplConstantsDNSRecordClass:);
  methods[13].selector = @selector(addDNSEntryWithJavaxJmdnsImplDNSEntry:);
  methods[14].selector = @selector(removeDNSEntryWithJavaxJmdnsImplDNSEntry:);
  methods[15].selector = @selector(replaceDNSEntryWithJavaxJmdnsImplDNSEntry:withJavaxJmdnsImplDNSEntry:);
  methods[16].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_entrySet_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x82, -1, -1, 24, -1 },
    { "EmptyCache", "LJavaxJmdnsImplDNSCache;", .constantValue.asLong = 0, 0x19, -1, 25, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaxJmdnsImplDNSCache;", "I", "()Ljava/util/Set<Ljava/util/Map$Entry<Ljava/lang/String;Ljava/util/List<+Ljavax/jmdns/impl/DNSEntry;>;>;>;", "getEntry", "LNSString;", "(Ljava/lang/String;)Ljava/util/Map$Entry<Ljava/lang/String;Ljava/util/List<+Ljavax/jmdns/impl/DNSEntry;>;>;", "put", "LNSString;LJavaUtilList;", "(Ljava/lang/String;Ljava/util/List<+Ljavax/jmdns/impl/DNSEntry;>;)Ljava/util/List<+Ljavax/jmdns/impl/DNSEntry;>;", "clone", "LJavaLangCloneNotSupportedException;", "()Ljava/util/Collection<Ljavax/jmdns/impl/DNSEntry;>;", "getDNSEntryList", "(Ljava/lang/String;)Ljava/util/Collection<+Ljavax/jmdns/impl/DNSEntry;>;", "_getDNSEntryList", "getDNSEntry", "LJavaxJmdnsImplDNSEntry;", "LNSString;LJavaxJmdnsImplConstantsDNSRecordType;LJavaxJmdnsImplConstantsDNSRecordClass;", "(Ljava/lang/String;Ljavax/jmdns/impl/constants/DNSRecordType;Ljavax/jmdns/impl/constants/DNSRecordClass;)Ljava/util/Collection<+Ljavax/jmdns/impl/DNSEntry;>;", "addDNSEntry", "removeDNSEntry", "replaceDNSEntry", "LJavaxJmdnsImplDNSEntry;LJavaxJmdnsImplDNSEntry;", "toString", "Ljava/util/Set<Ljava/util/Map$Entry<Ljava/lang/String;Ljava/util/List<+Ljavax/jmdns/impl/DNSEntry;>;>;>;", &JavaxJmdnsImplDNSCache_EmptyCache, "LJavaxJmdnsImplDNSCache__EmptyCache;LJavaxJmdnsImplDNSCache__CacheEntry;", "Ljava/util/AbstractMap<Ljava/lang/String;Ljava/util/List<+Ljavax/jmdns/impl/DNSEntry;>;>;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplDNSCache = { "DNSCache", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x1, 17, 2, -1, 26, -1, 27, -1 };
  return &_JavaxJmdnsImplDNSCache;
}

+ (void)initialize {
  if (self == [JavaxJmdnsImplDNSCache class]) {
    JavaxJmdnsImplDNSCache_EmptyCache = new_JavaxJmdnsImplDNSCache__EmptyCache_init();
    J2OBJC_SET_INITIALIZED(JavaxJmdnsImplDNSCache)
  }
}

@end

void JavaxJmdnsImplDNSCache_init(JavaxJmdnsImplDNSCache *self) {
  JavaxJmdnsImplDNSCache_initWithInt_(self, 1024);
}

JavaxJmdnsImplDNSCache *new_JavaxJmdnsImplDNSCache_init() {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplDNSCache, init)
}

JavaxJmdnsImplDNSCache *create_JavaxJmdnsImplDNSCache_init() {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplDNSCache, init)
}

void JavaxJmdnsImplDNSCache_initWithJavaxJmdnsImplDNSCache_(JavaxJmdnsImplDNSCache *self, JavaxJmdnsImplDNSCache *map) {
  JavaxJmdnsImplDNSCache_initWithInt_(self, map != nil ? [map size] : 1024);
  if (map != nil) {
    [self putAllWithJavaUtilMap:map];
  }
}

JavaxJmdnsImplDNSCache *new_JavaxJmdnsImplDNSCache_initWithJavaxJmdnsImplDNSCache_(JavaxJmdnsImplDNSCache *map) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplDNSCache, initWithJavaxJmdnsImplDNSCache_, map)
}

JavaxJmdnsImplDNSCache *create_JavaxJmdnsImplDNSCache_initWithJavaxJmdnsImplDNSCache_(JavaxJmdnsImplDNSCache *map) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplDNSCache, initWithJavaxJmdnsImplDNSCache_, map)
}

void JavaxJmdnsImplDNSCache_initWithInt_(JavaxJmdnsImplDNSCache *self, jint initialCapacity) {
  JavaUtilAbstractMap_init(self);
  self->_entrySet_ = nil;
  self->_entrySet_ = new_JavaUtilHashSet_initWithInt_(initialCapacity);
}

JavaxJmdnsImplDNSCache *new_JavaxJmdnsImplDNSCache_initWithInt_(jint initialCapacity) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplDNSCache, initWithInt_, initialCapacity)
}

JavaxJmdnsImplDNSCache *create_JavaxJmdnsImplDNSCache_initWithInt_(jint initialCapacity) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplDNSCache, initWithInt_, initialCapacity)
}

id<JavaUtilCollection> JavaxJmdnsImplDNSCache__getDNSEntryListWithNSString_(JavaxJmdnsImplDNSCache *self, NSString *name) {
  return [self getWithId:name != nil ? [name lowercaseString] : nil];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplDNSCache)

@implementation JavaxJmdnsImplDNSCache__EmptyCache

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  JavaxJmdnsImplDNSCache__EmptyCache_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)size {
  return 0;
}

- (jboolean)isEmpty {
  return true;
}

- (jboolean)containsKeyWithId:(id)key {
  return false;
}

- (jboolean)containsValueWithId:(id)value {
  return false;
}

- (id<JavaUtilList>)getWithId:(id)key {
  return nil;
}

- (id<JavaUtilSet>)keySet {
  return JavaUtilCollections_emptySet();
}

- (id<JavaUtilCollection>)values {
  return JavaUtilCollections_emptySet();
}

- (id<JavaUtilSet>)entrySet {
  return JavaUtilCollections_emptySet();
}

- (jboolean)isEqual:(id)o {
  return ([JavaUtilMap_class_() isInstance:o]) && [((id<JavaUtilMap>) nil_chk(((id<JavaUtilMap>) cast_check(o, JavaUtilMap_class_())))) size] == 0;
}

- (id<JavaUtilList>)putWithId:(NSString *)key
                       withId:(id<JavaUtilList>)value {
  return nil;
}

- (NSUInteger)hash {
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 3, 1, -1, 4, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 7, -1, -1 },
    { NULL, "Z", 0x1, 8, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 9, 10, -1, 11, -1, -1 },
    { NULL, "I", 0x1, 12, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(size);
  methods[2].selector = @selector(isEmpty);
  methods[3].selector = @selector(containsKeyWithId:);
  methods[4].selector = @selector(containsValueWithId:);
  methods[5].selector = @selector(getWithId:);
  methods[6].selector = @selector(keySet);
  methods[7].selector = @selector(values);
  methods[8].selector = @selector(entrySet);
  methods[9].selector = @selector(isEqual:);
  methods[10].selector = @selector(putWithId:withId:);
  methods[11].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "containsKey", "LNSObject;", "containsValue", "get", "(Ljava/lang/Object;)Ljava/util/List<Ljavax/jmdns/impl/DNSEntry;>;", "()Ljava/util/Set<Ljava/lang/String;>;", "()Ljava/util/Collection<Ljava/util/List<+Ljavax/jmdns/impl/DNSEntry;>;>;", "()Ljava/util/Set<Ljava/util/Map$Entry<Ljava/lang/String;Ljava/util/List<+Ljavax/jmdns/impl/DNSEntry;>;>;>;", "equals", "put", "LNSString;LJavaUtilList;", "(Ljava/lang/String;Ljava/util/List<+Ljavax/jmdns/impl/DNSEntry;>;)Ljava/util/List<+Ljavax/jmdns/impl/DNSEntry;>;", "hashCode", "LJavaxJmdnsImplDNSCache;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplDNSCache__EmptyCache = { "_EmptyCache", "javax.jmdns.impl", ptrTable, methods, NULL, 7, 0x18, 12, 0, 13, -1, -1, -1, -1 };
  return &_JavaxJmdnsImplDNSCache__EmptyCache;
}

@end

void JavaxJmdnsImplDNSCache__EmptyCache_init(JavaxJmdnsImplDNSCache__EmptyCache *self) {
  JavaxJmdnsImplDNSCache_init(self);
}

JavaxJmdnsImplDNSCache__EmptyCache *new_JavaxJmdnsImplDNSCache__EmptyCache_init() {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplDNSCache__EmptyCache, init)
}

JavaxJmdnsImplDNSCache__EmptyCache *create_JavaxJmdnsImplDNSCache__EmptyCache_init() {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplDNSCache__EmptyCache, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplDNSCache__EmptyCache)

@implementation JavaxJmdnsImplDNSCache__CacheEntry

- (instancetype)initWithNSString:(NSString *)key
                withJavaUtilList:(id<JavaUtilList>)value {
  JavaxJmdnsImplDNSCache__CacheEntry_initWithNSString_withJavaUtilList_(self, key, value);
  return self;
}

- (instancetype)initWithJavaUtilMap_Entry:(id<JavaUtilMap_Entry>)entry_ {
  JavaxJmdnsImplDNSCache__CacheEntry_initWithJavaUtilMap_Entry_(self, entry_);
  return self;
}

- (NSString *)getKey {
  return (_key_ != nil ? _key_ : @"");
}

- (id<JavaUtilList>)getValue {
  return _value_;
}

- (id<JavaUtilList>)setValueWithId:(id<JavaUtilList>)value {
  id<JavaUtilList> oldValue = _value_;
  _value_ = value;
  return oldValue;
}

- (jboolean)isEmpty {
  return [((id<JavaUtilList>) nil_chk([self getValue])) isEmpty];
}

- (jboolean)isEqual:(id)entry_ {
  if (!([JavaUtilMap_Entry_class_() isInstance:entry_])) {
    return false;
  }
  return [((NSString *) nil_chk([self getKey])) isEqual:[((id<JavaUtilMap_Entry>) nil_chk(((id<JavaUtilMap_Entry>) cast_check(entry_, JavaUtilMap_Entry_class_())))) getKey]] && [((id<JavaUtilList>) nil_chk([self getValue])) isEqual:[((id<JavaUtilMap_Entry>) nil_chk(((id<JavaUtilMap_Entry>) cast_check(entry_, JavaUtilMap_Entry_class_())))) getValue]];
}

- (NSUInteger)hash {
  return (_key_ == nil ? 0 : ((jint) [_key_ hash]));
}

- (NSString *)description {
  @synchronized(self) {
    JavaLangStringBuffer *aLog = new_JavaLangStringBuffer_initWithInt_(200);
    (void) [aLog appendWithNSString:@"\n\t\tname '"];
    (void) [aLog appendWithNSString:_key_];
    (void) [aLog appendWithNSString:@"' "];
    if ((_value_ != nil) && (![((id<JavaUtilList>) nil_chk(_value_)) isEmpty])) {
      for (JavaxJmdnsImplDNSEntry * __strong entry_ in nil_chk(_value_)) {
        (void) [aLog appendWithNSString:@"\n\t\t\t"];
        (void) [aLog appendWithNSString:[((JavaxJmdnsImplDNSEntry *) nil_chk(entry_)) description]];
      }
    }
    else {
      (void) [aLog appendWithNSString:@" no entries"];
    }
    return [aLog description];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x4, -1, 2, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 4, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 5, 6, -1, 7, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 10, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x21, 11, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withJavaUtilList:);
  methods[1].selector = @selector(initWithJavaUtilMap_Entry:);
  methods[2].selector = @selector(getKey);
  methods[3].selector = @selector(getValue);
  methods[4].selector = @selector(setValueWithId:);
  methods[5].selector = @selector(isEmpty);
  methods[6].selector = @selector(isEqual:);
  methods[7].selector = @selector(hash);
  methods[8].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_value_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 12, -1 },
    { "_key_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LJavaUtilList;", "(Ljava/lang/String;Ljava/util/List<+Ljavax/jmdns/impl/DNSEntry;>;)V", "LJavaUtilMap_Entry;", "(Ljava/util/Map$Entry<Ljava/lang/String;Ljava/util/List<+Ljavax/jmdns/impl/DNSEntry;>;>;)V", "()Ljava/util/List<+Ljavax/jmdns/impl/DNSEntry;>;", "setValue", "LJavaUtilList;", "(Ljava/util/List<+Ljavax/jmdns/impl/DNSEntry;>;)Ljava/util/List<+Ljavax/jmdns/impl/DNSEntry;>;", "equals", "LNSObject;", "hashCode", "toString", "Ljava/util/List<+Ljavax/jmdns/impl/DNSEntry;>;", "LJavaxJmdnsImplDNSCache;", "Ljava/lang/Object;Ljava/util/Map$Entry<Ljava/lang/String;Ljava/util/List<+Ljavax/jmdns/impl/DNSEntry;>;>;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplDNSCache__CacheEntry = { "_CacheEntry", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0xc, 9, 2, 13, -1, -1, 14, -1 };
  return &_JavaxJmdnsImplDNSCache__CacheEntry;
}

@end

void JavaxJmdnsImplDNSCache__CacheEntry_initWithNSString_withJavaUtilList_(JavaxJmdnsImplDNSCache__CacheEntry *self, NSString *key, id<JavaUtilList> value) {
  NSObject_init(self);
  self->_key_ = (key != nil ? [((NSString *) nil_chk([key java_trim])) lowercaseString] : nil);
  self->_value_ = value;
}

JavaxJmdnsImplDNSCache__CacheEntry *new_JavaxJmdnsImplDNSCache__CacheEntry_initWithNSString_withJavaUtilList_(NSString *key, id<JavaUtilList> value) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplDNSCache__CacheEntry, initWithNSString_withJavaUtilList_, key, value)
}

JavaxJmdnsImplDNSCache__CacheEntry *create_JavaxJmdnsImplDNSCache__CacheEntry_initWithNSString_withJavaUtilList_(NSString *key, id<JavaUtilList> value) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplDNSCache__CacheEntry, initWithNSString_withJavaUtilList_, key, value)
}

void JavaxJmdnsImplDNSCache__CacheEntry_initWithJavaUtilMap_Entry_(JavaxJmdnsImplDNSCache__CacheEntry *self, id<JavaUtilMap_Entry> entry_) {
  NSObject_init(self);
  if ([entry_ isKindOfClass:[JavaxJmdnsImplDNSCache__CacheEntry class]]) {
    self->_key_ = [((JavaxJmdnsImplDNSCache__CacheEntry *) nil_chk(((JavaxJmdnsImplDNSCache__CacheEntry *) cast_chk(entry_, [JavaxJmdnsImplDNSCache__CacheEntry class])))) getKey];
    self->_value_ = [((JavaxJmdnsImplDNSCache__CacheEntry *) nil_chk(((JavaxJmdnsImplDNSCache__CacheEntry *) cast_chk(entry_, [JavaxJmdnsImplDNSCache__CacheEntry class])))) getValue];
  }
}

JavaxJmdnsImplDNSCache__CacheEntry *new_JavaxJmdnsImplDNSCache__CacheEntry_initWithJavaUtilMap_Entry_(id<JavaUtilMap_Entry> entry_) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplDNSCache__CacheEntry, initWithJavaUtilMap_Entry_, entry_)
}

JavaxJmdnsImplDNSCache__CacheEntry *create_JavaxJmdnsImplDNSCache__CacheEntry_initWithJavaUtilMap_Entry_(id<JavaUtilMap_Entry> entry_) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplDNSCache__CacheEntry, initWithJavaUtilMap_Entry_, entry_)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplDNSCache__CacheEntry)
