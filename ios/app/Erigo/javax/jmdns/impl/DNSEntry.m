//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/jmdns/impl/DNSEntry.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/DataOutputStream.h"
#include "java/io/IOException.h"
#include "java/lang/InternalError.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/Collections.h"
#include "java/util/Map.h"
#include "javax/jmdns/ServiceInfo.h"
#include "javax/jmdns/impl/DNSEntry.h"
#include "javax/jmdns/impl/ServiceInfoImpl.h"
#include "javax/jmdns/impl/constants/DNSRecordClass.h"
#include "javax/jmdns/impl/constants/DNSRecordType.h"

@interface JavaxJmdnsImplDNSEntry () {
 @public
  NSString *_key_;
  NSString *_name_;
  NSString *_type_;
  JavaxJmdnsImplConstantsDNSRecordType *_recordType_;
  JavaxJmdnsImplConstantsDNSRecordClass *_dnsClass_;
  jboolean _unique_;
}

@end

J2OBJC_FIELD_SETTER(JavaxJmdnsImplDNSEntry, _key_, NSString *)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplDNSEntry, _name_, NSString *)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplDNSEntry, _type_, NSString *)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplDNSEntry, _recordType_, JavaxJmdnsImplConstantsDNSRecordType *)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplDNSEntry, _dnsClass_, JavaxJmdnsImplConstantsDNSRecordClass *)

@implementation JavaxJmdnsImplDNSEntry

- (instancetype)initWithNSString:(NSString *)name
withJavaxJmdnsImplConstantsDNSRecordType:(JavaxJmdnsImplConstantsDNSRecordType *)type
withJavaxJmdnsImplConstantsDNSRecordClass:(JavaxJmdnsImplConstantsDNSRecordClass *)recordClass
                     withBoolean:(jboolean)unique {
  JavaxJmdnsImplDNSEntry_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(self, name, type, recordClass, unique);
  return self;
}

- (jboolean)isEqual:(id)obj {
  jboolean result = false;
  if ([obj isKindOfClass:[JavaxJmdnsImplDNSEntry class]]) {
    JavaxJmdnsImplDNSEntry *other = (JavaxJmdnsImplDNSEntry *) cast_chk(obj, [JavaxJmdnsImplDNSEntry class]);
    result = ([((NSString *) nil_chk([self getKey])) isEqual:[((JavaxJmdnsImplDNSEntry *) nil_chk(other)) getKey]] && [((JavaxJmdnsImplConstantsDNSRecordType *) nil_chk([self getRecordType])) isEqual:[other getRecordType]] && [self getRecordClass] == [other getRecordClass]);
  }
  return result;
}

- (jboolean)isSameEntryWithJavaxJmdnsImplDNSEntry:(JavaxJmdnsImplDNSEntry *)entry_ {
  return [((NSString *) nil_chk([self getKey])) isEqual:[((JavaxJmdnsImplDNSEntry *) nil_chk(entry_)) getKey]] && [((JavaxJmdnsImplConstantsDNSRecordType *) nil_chk([self getRecordType])) isEqual:[entry_ getRecordType]] && ((JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordClass, CLASS_ANY) == [entry_ getRecordClass]) || [((JavaxJmdnsImplConstantsDNSRecordClass *) nil_chk([self getRecordClass])) isEqual:[entry_ getRecordClass]]);
}

- (jboolean)sameSubtypeWithJavaxJmdnsImplDNSEntry:(JavaxJmdnsImplDNSEntry *)other {
  return [((NSString *) nil_chk([self getSubtype])) isEqual:[((JavaxJmdnsImplDNSEntry *) nil_chk(other)) getSubtype]];
}

- (NSString *)getSubtype {
  NSString *subtype = [((id<JavaUtilMap>) nil_chk([self getQualifiedNameMap])) getWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Subtype)];
  return (subtype != nil ? subtype : @"");
}

- (NSString *)getName {
  return (_name_ != nil ? _name_ : @"");
}

- (NSString *)getType {
  return (_type_ != nil ? _type_ : @"");
}

- (NSString *)getKey {
  return (_key_ != nil ? _key_ : @"");
}

- (JavaxJmdnsImplConstantsDNSRecordType *)getRecordType {
  return (_recordType_ != nil ? _recordType_ : JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordType, TYPE_IGNORE));
}

- (JavaxJmdnsImplConstantsDNSRecordClass *)getRecordClass {
  return (_dnsClass_ != nil ? _dnsClass_ : JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordClass, CLASS_UNKNOWN));
}

- (jboolean)isUnique {
  return _unique_;
}

- (id<JavaUtilMap>)getQualifiedNameMap {
  return JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(_qualifiedNameMap_);
}

- (jboolean)isServicesDiscoveryMetaQuery {
  return [((NSString *) nil_chk([((id<JavaUtilMap>) nil_chk(_qualifiedNameMap_)) getWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Application)])) isEqual:@"dns-sd"] && [((NSString *) nil_chk([_qualifiedNameMap_ getWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Instance)])) isEqual:@"_services"];
}

- (jboolean)isDomainDiscoveryQuery {
  if ([((NSString *) nil_chk([((id<JavaUtilMap>) nil_chk(_qualifiedNameMap_)) getWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Application)])) isEqual:@"dns-sd"]) {
    NSString *name = [_qualifiedNameMap_ getWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Instance)];
    return [@"b" isEqual:name] || [@"db" isEqual:name] || [@"r" isEqual:name] || [@"dr" isEqual:name] || [@"lb" isEqual:name];
  }
  return false;
}

- (jboolean)isReverseLookup {
  return [self isV4ReverseLookup] || [self isV6ReverseLookup];
}

- (jboolean)isV4ReverseLookup {
  return [((NSString *) nil_chk([((id<JavaUtilMap>) nil_chk(_qualifiedNameMap_)) getWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Domain)])) java_hasSuffix:@"in-addr.arpa"];
}

- (jboolean)isV6ReverseLookup {
  return [((NSString *) nil_chk([((id<JavaUtilMap>) nil_chk(_qualifiedNameMap_)) getWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Domain)])) java_hasSuffix:@"ip6.arpa"];
}

- (jboolean)isStaleWithLong:(jlong)now {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isExpiredWithLong:(jlong)now {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isSameRecordClassWithJavaxJmdnsImplDNSEntry:(JavaxJmdnsImplDNSEntry *)entry_ {
  return (entry_ != nil) && ([((JavaxJmdnsImplDNSEntry *) nil_chk(entry_)) getRecordClass] == [self getRecordClass]);
}

- (jboolean)isSameTypeWithJavaxJmdnsImplDNSEntry:(JavaxJmdnsImplDNSEntry *)entry_ {
  return (entry_ != nil) && ([((JavaxJmdnsImplDNSEntry *) nil_chk(entry_)) getRecordType] == [self getRecordType]);
}

- (void)toByteArrayWithJavaIoDataOutputStream:(JavaIoDataOutputStream *)dout {
  [((JavaIoDataOutputStream *) nil_chk(dout)) writeWithByteArray:[((NSString *) nil_chk([self getName])) java_getBytesWithCharsetName:@"UTF8"]];
  [dout writeShortWithInt:[((JavaxJmdnsImplConstantsDNSRecordType *) nil_chk([self getRecordType])) indexValue]];
  [dout writeShortWithInt:[((JavaxJmdnsImplConstantsDNSRecordClass *) nil_chk([self getRecordClass])) indexValue]];
}

- (IOSByteArray *)toByteArray {
  @try {
    JavaIoByteArrayOutputStream *bout = new_JavaIoByteArrayOutputStream_init();
    JavaIoDataOutputStream *dout = new_JavaIoDataOutputStream_initWithJavaIoOutputStream_(bout);
    [self toByteArrayWithJavaIoDataOutputStream:dout];
    [dout close];
    return [bout toByteArray];
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaLangInternalError_init();
  }
}

- (jint)compareToWithJavaxJmdnsImplDNSEntry:(JavaxJmdnsImplDNSEntry *)that {
  IOSByteArray *thisBytes = [self toByteArray];
  IOSByteArray *thatBytes = [((JavaxJmdnsImplDNSEntry *) nil_chk(that)) toByteArray];
  for (jint i = 0, n = JavaLangMath_minWithInt_withInt_(((IOSByteArray *) nil_chk(thisBytes))->size_, ((IOSByteArray *) nil_chk(thatBytes))->size_); i < n; i++) {
    if (IOSByteArray_Get(thisBytes, i) > IOSByteArray_Get(thatBytes, i)) {
      return 1;
    }
    else if (IOSByteArray_Get(thisBytes, i) < IOSByteArray_Get(thatBytes, i)) {
      return -1;
    }
  }
  return thisBytes->size_ - thatBytes->size_;
}

- (NSUInteger)hash {
  return ((jint) [((NSString *) nil_chk([self getKey])) hash]) + [((JavaxJmdnsImplConstantsDNSRecordType *) nil_chk([self getRecordType])) indexValue] + [((JavaxJmdnsImplConstantsDNSRecordClass *) nil_chk([self getRecordClass])) indexValue];
}

- (NSString *)description {
  JavaLangStringBuilder *aLog = new_JavaLangStringBuilder_initWithInt_(200);
  (void) [aLog appendWithNSString:JreStrcat("C$CI", '[', [[self java_getClass] getSimpleName], '@', JavaLangSystem_identityHashCodeWithId_(self))];
  (void) [aLog appendWithNSString:JreStrcat("$@", @" type: ", [self getRecordType])];
  (void) [aLog appendWithNSString:JreStrcat("$@", @", class: ", [self getRecordClass])];
  (void) [aLog appendWithNSString:(_unique_ ? @"-unique," : @",")];
  (void) [aLog appendWithNSString:JreStrcat("$$", @" name: ", _name_)];
  [self toStringWithJavaLangStringBuilder:aLog];
  (void) [aLog appendWithNSString:@"]"];
  return [aLog description];
}

- (void)toStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)aLog {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplConstantsDNSRecordType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplConstantsDNSRecordClass;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 9, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 10, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 12, 13, 14, -1, -1, -1 },
    { NULL, "[B", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 15, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 16, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 17, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 17, 18, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withJavaxJmdnsImplConstantsDNSRecordType:withJavaxJmdnsImplConstantsDNSRecordClass:withBoolean:);
  methods[1].selector = @selector(isEqual:);
  methods[2].selector = @selector(isSameEntryWithJavaxJmdnsImplDNSEntry:);
  methods[3].selector = @selector(sameSubtypeWithJavaxJmdnsImplDNSEntry:);
  methods[4].selector = @selector(getSubtype);
  methods[5].selector = @selector(getName);
  methods[6].selector = @selector(getType);
  methods[7].selector = @selector(getKey);
  methods[8].selector = @selector(getRecordType);
  methods[9].selector = @selector(getRecordClass);
  methods[10].selector = @selector(isUnique);
  methods[11].selector = @selector(getQualifiedNameMap);
  methods[12].selector = @selector(isServicesDiscoveryMetaQuery);
  methods[13].selector = @selector(isDomainDiscoveryQuery);
  methods[14].selector = @selector(isReverseLookup);
  methods[15].selector = @selector(isV4ReverseLookup);
  methods[16].selector = @selector(isV6ReverseLookup);
  methods[17].selector = @selector(isStaleWithLong:);
  methods[18].selector = @selector(isExpiredWithLong:);
  methods[19].selector = @selector(isSameRecordClassWithJavaxJmdnsImplDNSEntry:);
  methods[20].selector = @selector(isSameTypeWithJavaxJmdnsImplDNSEntry:);
  methods[21].selector = @selector(toByteArrayWithJavaIoDataOutputStream:);
  methods[22].selector = @selector(toByteArray);
  methods[23].selector = @selector(compareToWithJavaxJmdnsImplDNSEntry:);
  methods[24].selector = @selector(hash);
  methods[25].selector = @selector(description);
  methods[26].selector = @selector(toStringWithJavaLangStringBuilder:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_key_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_name_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_type_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_recordType_", "LJavaxJmdnsImplConstantsDNSRecordType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_dnsClass_", "LJavaxJmdnsImplConstantsDNSRecordClass;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_unique_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_qualifiedNameMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x10, -1, -1, 19, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LJavaxJmdnsImplConstantsDNSRecordType;LJavaxJmdnsImplConstantsDNSRecordClass;Z", "equals", "LNSObject;", "isSameEntry", "LJavaxJmdnsImplDNSEntry;", "sameSubtype", "()Ljava/util/Map<Ljavax/jmdns/ServiceInfo$Fields;Ljava/lang/String;>;", "isStale", "J", "isExpired", "isSameRecordClass", "isSameType", "toByteArray", "LJavaIoDataOutputStream;", "LJavaIoIOException;", "compareTo", "hashCode", "toString", "LJavaLangStringBuilder;", "Ljava/util/Map<Ljavax/jmdns/ServiceInfo$Fields;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplDNSEntry = { "DNSEntry", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x401, 27, 7, -1, -1, -1, -1, -1 };
  return &_JavaxJmdnsImplDNSEntry;
}

@end

void JavaxJmdnsImplDNSEntry_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(JavaxJmdnsImplDNSEntry *self, NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique) {
  NSObject_init(self);
  self->_name_ = name;
  self->_recordType_ = type;
  self->_dnsClass_ = recordClass;
  self->_unique_ = unique;
  self->_qualifiedNameMap_ = JavaxJmdnsImplServiceInfoImpl_decodeQualifiedNameMapForTypeWithNSString_([self getName]);
  NSString *domain = [((id<JavaUtilMap>) nil_chk(self->_qualifiedNameMap_)) getWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Domain)];
  NSString *protocol = [self->_qualifiedNameMap_ getWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Protocol)];
  NSString *application = [self->_qualifiedNameMap_ getWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Application)];
  NSString *instance = [((NSString *) nil_chk([self->_qualifiedNameMap_ getWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Instance)])) lowercaseString];
  self->_type_ = JreStrcat("$$$C", ([((NSString *) nil_chk(application)) java_length] > 0 ? JreStrcat("C$C", '_', application, '.') : @""), ([((NSString *) nil_chk(protocol)) java_length] > 0 ? JreStrcat("C$C", '_', protocol, '.') : @""), domain, '.');
  self->_key_ = [(JreStrcat("$$", ([((NSString *) nil_chk(instance)) java_length] > 0 ? JreStrcat("$C", instance, '.') : @""), self->_type_)) lowercaseString];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplDNSEntry)
