//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/jmdns/impl/DNSIncoming.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/net/DatagramPacket.h"
#include "java/net/InetAddress.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "javax/jmdns/impl/DNSIncoming.h"
#include "javax/jmdns/impl/DNSMessage.h"
#include "javax/jmdns/impl/DNSQuestion.h"
#include "javax/jmdns/impl/DNSRecord.h"
#include "javax/jmdns/impl/constants/DNSConstants.h"
#include "javax/jmdns/impl/constants/DNSLabel.h"
#include "javax/jmdns/impl/constants/DNSOptionCode.h"
#include "javax/jmdns/impl/constants/DNSRecordClass.h"
#include "javax/jmdns/impl/constants/DNSRecordType.h"
#include "javax/jmdns/impl/constants/DNSResultCode.h"

@interface JavaxJmdnsImplDNSIncoming () {
 @public
  JavaNetDatagramPacket *_packet_;
  jlong _receivedTime_;
  JavaxJmdnsImplDNSIncoming_MessageInputStream *_messageInputStream_;
  jint _senderUDPPayload_;
}

- (instancetype)initWithInt:(jint)flags
                    withInt:(jint)id_
                withBoolean:(jboolean)multicast
  withJavaNetDatagramPacket:(JavaNetDatagramPacket *)packet
                   withLong:(jlong)receivedTime;

- (JavaxJmdnsImplDNSQuestion *)readQuestion;

- (JavaxJmdnsImplDNSRecord *)readAnswerWithJavaNetInetAddress:(JavaNetInetAddress *)source;

- (NSString *)_hexStringWithByteArray:(IOSByteArray *)bytes;

@end

J2OBJC_FIELD_SETTER(JavaxJmdnsImplDNSIncoming, _packet_, JavaNetDatagramPacket *)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplDNSIncoming, _messageInputStream_, JavaxJmdnsImplDNSIncoming_MessageInputStream *)

inline JavaUtilLoggingLogger *JavaxJmdnsImplDNSIncoming_get_logger();
inline JavaUtilLoggingLogger *JavaxJmdnsImplDNSIncoming_set_logger(JavaUtilLoggingLogger *value);
static JavaUtilLoggingLogger *JavaxJmdnsImplDNSIncoming_logger;
J2OBJC_STATIC_FIELD_OBJ(JavaxJmdnsImplDNSIncoming, logger, JavaUtilLoggingLogger *)

inline IOSCharArray *JavaxJmdnsImplDNSIncoming_get__nibbleToHex();
static IOSCharArray *JavaxJmdnsImplDNSIncoming__nibbleToHex;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaxJmdnsImplDNSIncoming, _nibbleToHex, IOSCharArray *)

__attribute__((unused)) static void JavaxJmdnsImplDNSIncoming_initWithInt_withInt_withBoolean_withJavaNetDatagramPacket_withLong_(JavaxJmdnsImplDNSIncoming *self, jint flags, jint id_, jboolean multicast, JavaNetDatagramPacket *packet, jlong receivedTime);

__attribute__((unused)) static JavaxJmdnsImplDNSIncoming *new_JavaxJmdnsImplDNSIncoming_initWithInt_withInt_withBoolean_withJavaNetDatagramPacket_withLong_(jint flags, jint id_, jboolean multicast, JavaNetDatagramPacket *packet, jlong receivedTime) NS_RETURNS_RETAINED;

__attribute__((unused)) static JavaxJmdnsImplDNSIncoming *create_JavaxJmdnsImplDNSIncoming_initWithInt_withInt_withBoolean_withJavaNetDatagramPacket_withLong_(jint flags, jint id_, jboolean multicast, JavaNetDatagramPacket *packet, jlong receivedTime);

__attribute__((unused)) static JavaxJmdnsImplDNSQuestion *JavaxJmdnsImplDNSIncoming_readQuestion(JavaxJmdnsImplDNSIncoming *self);

__attribute__((unused)) static JavaxJmdnsImplDNSRecord *JavaxJmdnsImplDNSIncoming_readAnswerWithJavaNetInetAddress_(JavaxJmdnsImplDNSIncoming *self, JavaNetInetAddress *source);

__attribute__((unused)) static NSString *JavaxJmdnsImplDNSIncoming__hexStringWithByteArray_(JavaxJmdnsImplDNSIncoming *self, IOSByteArray *bytes);

inline JavaUtilLoggingLogger *JavaxJmdnsImplDNSIncoming_MessageInputStream_get_logger1();
inline JavaUtilLoggingLogger *JavaxJmdnsImplDNSIncoming_MessageInputStream_set_logger1(JavaUtilLoggingLogger *value);
static JavaUtilLoggingLogger *JavaxJmdnsImplDNSIncoming_MessageInputStream_logger1;
J2OBJC_STATIC_FIELD_OBJ(JavaxJmdnsImplDNSIncoming_MessageInputStream, logger1, JavaUtilLoggingLogger *)

J2OBJC_INITIALIZED_DEFN(JavaxJmdnsImplDNSIncoming)

jboolean JavaxJmdnsImplDNSIncoming_USE_DOMAIN_NAME_FORMAT_FOR_SRV_TARGET = true;

@implementation JavaxJmdnsImplDNSIncoming

- (instancetype)initWithJavaNetDatagramPacket:(JavaNetDatagramPacket *)packet {
  JavaxJmdnsImplDNSIncoming_initWithJavaNetDatagramPacket_(self, packet);
  return self;
}

- (instancetype)initWithInt:(jint)flags
                    withInt:(jint)id_
                withBoolean:(jboolean)multicast
  withJavaNetDatagramPacket:(JavaNetDatagramPacket *)packet
                   withLong:(jlong)receivedTime {
  JavaxJmdnsImplDNSIncoming_initWithInt_withInt_withBoolean_withJavaNetDatagramPacket_withLong_(self, flags, id_, multicast, packet, receivedTime);
  return self;
}

- (JavaxJmdnsImplDNSIncoming *)java_clone {
  JavaxJmdnsImplDNSIncoming *in = new_JavaxJmdnsImplDNSIncoming_initWithInt_withInt_withBoolean_withJavaNetDatagramPacket_withLong_([self getFlags], [self getId], [self isMulticast], self->_packet_, self->_receivedTime_);
  in->_senderUDPPayload_ = self->_senderUDPPayload_;
  [((id<JavaUtilList>) nil_chk(in->_questions_)) addAllWithJavaUtilCollection:self->_questions_];
  [((id<JavaUtilList>) nil_chk(in->_answers_)) addAllWithJavaUtilCollection:self->_answers_];
  [((id<JavaUtilList>) nil_chk(in->_authoritativeAnswers_)) addAllWithJavaUtilCollection:self->_authoritativeAnswers_];
  [((id<JavaUtilList>) nil_chk(in->_additionals_)) addAllWithJavaUtilCollection:self->_additionals_];
  return in;
}

- (JavaxJmdnsImplDNSQuestion *)readQuestion {
  return JavaxJmdnsImplDNSIncoming_readQuestion(self);
}

- (JavaxJmdnsImplDNSRecord *)readAnswerWithJavaNetInetAddress:(JavaNetInetAddress *)source {
  return JavaxJmdnsImplDNSIncoming_readAnswerWithJavaNetInetAddress_(self, source);
}

- (NSString *)printWithBoolean:(jboolean)dump {
  JavaLangStringBuilder *buf = new_JavaLangStringBuilder_init();
  (void) [buf appendWithNSString:[self print]];
  if (dump) {
    IOSByteArray *data = [IOSByteArray newArrayWithLength:[((JavaNetDatagramPacket *) nil_chk(_packet_)) getLength]];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([_packet_ getData], 0, data, 0, data->size_);
    (void) [buf appendWithNSString:[self printWithByteArray:data]];
  }
  return [buf description];
}

- (NSString *)description {
  JavaLangStringBuilder *buf = new_JavaLangStringBuilder_init();
  (void) [buf appendWithNSString:[self isQuery] ? @"dns[query," : @"dns[response,"];
  if ([((JavaNetDatagramPacket *) nil_chk(_packet_)) getAddress] != nil) {
    (void) [buf appendWithNSString:[((JavaNetInetAddress *) nil_chk([_packet_ getAddress])) getHostAddress]];
  }
  (void) [buf appendWithChar:':'];
  (void) [buf appendWithInt:[_packet_ getPort]];
  (void) [buf appendWithNSString:@", length="];
  (void) [buf appendWithInt:[_packet_ getLength]];
  (void) [buf appendWithNSString:@", id=0x"];
  (void) [buf appendWithNSString:JavaLangInteger_toHexStringWithInt_([self getId])];
  if ([self getFlags] != 0) {
    (void) [buf appendWithNSString:@", flags=0x"];
    (void) [buf appendWithNSString:JavaLangInteger_toHexStringWithInt_([self getFlags])];
    if (([self getFlags] & JavaxJmdnsImplConstantsDNSConstants_FLAGS_QR_RESPONSE) != 0) {
      (void) [buf appendWithNSString:@":r"];
    }
    if (([self getFlags] & JavaxJmdnsImplConstantsDNSConstants_FLAGS_AA) != 0) {
      (void) [buf appendWithNSString:@":aa"];
    }
    if (([self getFlags] & JavaxJmdnsImplConstantsDNSConstants_FLAGS_TC) != 0) {
      (void) [buf appendWithNSString:@":tc"];
    }
  }
  if ([self getNumberOfQuestions] > 0) {
    (void) [buf appendWithNSString:@", questions="];
    (void) [buf appendWithInt:[self getNumberOfQuestions]];
  }
  if ([self getNumberOfAnswers] > 0) {
    (void) [buf appendWithNSString:@", answers="];
    (void) [buf appendWithInt:[self getNumberOfAnswers]];
  }
  if ([self getNumberOfAuthorities] > 0) {
    (void) [buf appendWithNSString:@", authorities="];
    (void) [buf appendWithInt:[self getNumberOfAuthorities]];
  }
  if ([self getNumberOfAdditionals] > 0) {
    (void) [buf appendWithNSString:@", additionals="];
    (void) [buf appendWithInt:[self getNumberOfAdditionals]];
  }
  if ([self getNumberOfQuestions] > 0) {
    (void) [buf appendWithNSString:@"\nquestions:"];
    for (JavaxJmdnsImplDNSQuestion * __strong question in nil_chk(_questions_)) {
      (void) [buf appendWithNSString:@"\n\t"];
      (void) [buf appendWithId:question];
    }
  }
  if ([self getNumberOfAnswers] > 0) {
    (void) [buf appendWithNSString:@"\nanswers:"];
    for (JavaxJmdnsImplDNSRecord * __strong record in nil_chk(_answers_)) {
      (void) [buf appendWithNSString:@"\n\t"];
      (void) [buf appendWithId:record];
    }
  }
  if ([self getNumberOfAuthorities] > 0) {
    (void) [buf appendWithNSString:@"\nauthorities:"];
    for (JavaxJmdnsImplDNSRecord * __strong record in nil_chk(_authoritativeAnswers_)) {
      (void) [buf appendWithNSString:@"\n\t"];
      (void) [buf appendWithId:record];
    }
  }
  if ([self getNumberOfAdditionals] > 0) {
    (void) [buf appendWithNSString:@"\nadditionals:"];
    for (JavaxJmdnsImplDNSRecord * __strong record in nil_chk(_additionals_)) {
      (void) [buf appendWithNSString:@"\n\t"];
      (void) [buf appendWithId:record];
    }
  }
  (void) [buf appendWithNSString:@"]"];
  return [buf description];
}

- (void)appendWithJavaxJmdnsImplDNSIncoming:(JavaxJmdnsImplDNSIncoming *)that {
  if ([self isQuery] && [self isTruncated] && [((JavaxJmdnsImplDNSIncoming *) nil_chk(that)) isQuery]) {
    [((id<JavaUtilList>) nil_chk(self->_questions_)) addAllWithJavaUtilCollection:[((JavaxJmdnsImplDNSIncoming *) nil_chk(that)) getQuestions]];
    [((id<JavaUtilList>) nil_chk(self->_answers_)) addAllWithJavaUtilCollection:[that getAnswers]];
    [((id<JavaUtilList>) nil_chk(self->_authoritativeAnswers_)) addAllWithJavaUtilCollection:[that getAuthorities]];
    [((id<JavaUtilList>) nil_chk(self->_additionals_)) addAllWithJavaUtilCollection:[that getAdditionals]];
  }
  else {
    @throw new_JavaLangIllegalArgumentException_init();
  }
}

- (jint)elapseSinceArrival {
  return (jint) (JavaLangSystem_currentTimeMillis() - _receivedTime_);
}

- (jint)getSenderUDPPayload {
  return self->_senderUDPPayload_;
}

- (NSString *)_hexStringWithByteArray:(IOSByteArray *)bytes {
  return JavaxJmdnsImplDNSIncoming__hexStringWithByteArray_(self, bytes);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 2, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplDNSIncoming;", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplDNSQuestion;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplDNSRecord;", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 11, 12, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaNetDatagramPacket:);
  methods[1].selector = @selector(initWithInt:withInt:withBoolean:withJavaNetDatagramPacket:withLong:);
  methods[2].selector = @selector(java_clone);
  methods[3].selector = @selector(readQuestion);
  methods[4].selector = @selector(readAnswerWithJavaNetInetAddress:);
  methods[5].selector = @selector(printWithBoolean:);
  methods[6].selector = @selector(description);
  methods[7].selector = @selector(appendWithJavaxJmdnsImplDNSIncoming:);
  methods[8].selector = @selector(elapseSinceArrival);
  methods[9].selector = @selector(getSenderUDPPayload);
  methods[10].selector = @selector(_hexStringWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0xa, -1, 13, -1, -1 },
    { "USE_DOMAIN_NAME_FORMAT_FOR_SRV_TARGET", "Z", .constantValue.asLong = 0, 0x9, -1, 14, -1, -1 },
    { "_packet_", "LJavaNetDatagramPacket;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_receivedTime_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_messageInputStream_", "LJavaxJmdnsImplDNSIncoming_MessageInputStream;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_senderUDPPayload_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_nibbleToHex", "[C", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaNetDatagramPacket;", "LJavaIoIOException;", "IIZLJavaNetDatagramPacket;J", "clone", "readAnswer", "LJavaNetInetAddress;", "print", "Z", "toString", "append", "LJavaxJmdnsImplDNSIncoming;", "_hexString", "[B", &JavaxJmdnsImplDNSIncoming_logger, &JavaxJmdnsImplDNSIncoming_USE_DOMAIN_NAME_FORMAT_FOR_SRV_TARGET, &JavaxJmdnsImplDNSIncoming__nibbleToHex, "LJavaxJmdnsImplDNSIncoming_MessageInputStream;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplDNSIncoming = { "DNSIncoming", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x11, 11, 7, -1, 16, -1, -1, -1 };
  return &_JavaxJmdnsImplDNSIncoming;
}

+ (void)initialize {
  if (self == [JavaxJmdnsImplDNSIncoming class]) {
    JavaxJmdnsImplDNSIncoming_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([JavaxJmdnsImplDNSIncoming_class_() getName]);
    JavaxJmdnsImplDNSIncoming__nibbleToHex = [IOSCharArray newArrayWithChars:(jchar[]){ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' } count:16];
    J2OBJC_SET_INITIALIZED(JavaxJmdnsImplDNSIncoming)
  }
}

@end

void JavaxJmdnsImplDNSIncoming_initWithJavaNetDatagramPacket_(JavaxJmdnsImplDNSIncoming *self, JavaNetDatagramPacket *packet) {
  JavaxJmdnsImplDNSMessage_initWithInt_withInt_withBoolean_(self, 0, 0, [((JavaNetDatagramPacket *) nil_chk(packet)) getPort] == JreLoadStatic(JavaxJmdnsImplConstantsDNSConstants, MDNS_PORT));
  self->_packet_ = packet;
  JavaNetInetAddress *source = [packet getAddress];
  self->_messageInputStream_ = new_JavaxJmdnsImplDNSIncoming_MessageInputStream_initWithByteArray_withInt_([packet getData], [packet getLength]);
  self->_receivedTime_ = JavaLangSystem_currentTimeMillis();
  self->_senderUDPPayload_ = JavaxJmdnsImplConstantsDNSConstants_MAX_MSG_TYPICAL;
  @try {
    [self setIdWithInt:[self->_messageInputStream_ readUnsignedShort]];
    [self setFlagsWithInt:[self->_messageInputStream_ readUnsignedShort]];
    jint numQuestions = [self->_messageInputStream_ readUnsignedShort];
    jint numAnswers = [self->_messageInputStream_ readUnsignedShort];
    jint numAuthorities = [self->_messageInputStream_ readUnsignedShort];
    jint numAdditionals = [self->_messageInputStream_ readUnsignedShort];
    if (numQuestions > 0) {
      for (jint i = 0; i < numQuestions; i++) {
        [((id<JavaUtilList>) nil_chk(self->_questions_)) addWithId:JavaxJmdnsImplDNSIncoming_readQuestion(self)];
      }
    }
    if (numAnswers > 0) {
      for (jint i = 0; i < numAnswers; i++) {
        JavaxJmdnsImplDNSRecord *rec = JavaxJmdnsImplDNSIncoming_readAnswerWithJavaNetInetAddress_(self, source);
        if (rec != nil) {
          [((id<JavaUtilList>) nil_chk(self->_answers_)) addWithId:rec];
        }
      }
    }
    if (numAuthorities > 0) {
      for (jint i = 0; i < numAuthorities; i++) {
        JavaxJmdnsImplDNSRecord *rec = JavaxJmdnsImplDNSIncoming_readAnswerWithJavaNetInetAddress_(self, source);
        if (rec != nil) {
          [((id<JavaUtilList>) nil_chk(self->_authoritativeAnswers_)) addWithId:rec];
        }
      }
    }
    if (numAdditionals > 0) {
      for (jint i = 0; i < numAdditionals; i++) {
        JavaxJmdnsImplDNSRecord *rec = JavaxJmdnsImplDNSIncoming_readAnswerWithJavaNetInetAddress_(self, source);
        if (rec != nil) {
          [((id<JavaUtilList>) nil_chk(self->_additionals_)) addWithId:rec];
        }
      }
    }
  }
  @catch (JavaLangException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplDNSIncoming_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$$$", @"DNSIncoming() dump ", [self printWithBoolean:true], @"\n exception ") withNSException:e];
    JavaIoIOException *ioe = new_JavaIoIOException_initWithNSString_(@"DNSIncoming corrupted message");
    (void) [ioe initCauseWithNSException:e];
    @throw ioe;
  }
}

JavaxJmdnsImplDNSIncoming *new_JavaxJmdnsImplDNSIncoming_initWithJavaNetDatagramPacket_(JavaNetDatagramPacket *packet) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplDNSIncoming, initWithJavaNetDatagramPacket_, packet)
}

JavaxJmdnsImplDNSIncoming *create_JavaxJmdnsImplDNSIncoming_initWithJavaNetDatagramPacket_(JavaNetDatagramPacket *packet) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplDNSIncoming, initWithJavaNetDatagramPacket_, packet)
}

void JavaxJmdnsImplDNSIncoming_initWithInt_withInt_withBoolean_withJavaNetDatagramPacket_withLong_(JavaxJmdnsImplDNSIncoming *self, jint flags, jint id_, jboolean multicast, JavaNetDatagramPacket *packet, jlong receivedTime) {
  JavaxJmdnsImplDNSMessage_initWithInt_withInt_withBoolean_(self, flags, id_, multicast);
  self->_packet_ = packet;
  self->_messageInputStream_ = new_JavaxJmdnsImplDNSIncoming_MessageInputStream_initWithByteArray_withInt_([((JavaNetDatagramPacket *) nil_chk(packet)) getData], [packet getLength]);
  self->_receivedTime_ = receivedTime;
}

JavaxJmdnsImplDNSIncoming *new_JavaxJmdnsImplDNSIncoming_initWithInt_withInt_withBoolean_withJavaNetDatagramPacket_withLong_(jint flags, jint id_, jboolean multicast, JavaNetDatagramPacket *packet, jlong receivedTime) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplDNSIncoming, initWithInt_withInt_withBoolean_withJavaNetDatagramPacket_withLong_, flags, id_, multicast, packet, receivedTime)
}

JavaxJmdnsImplDNSIncoming *create_JavaxJmdnsImplDNSIncoming_initWithInt_withInt_withBoolean_withJavaNetDatagramPacket_withLong_(jint flags, jint id_, jboolean multicast, JavaNetDatagramPacket *packet, jlong receivedTime) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplDNSIncoming, initWithInt_withInt_withBoolean_withJavaNetDatagramPacket_withLong_, flags, id_, multicast, packet, receivedTime)
}

JavaxJmdnsImplDNSQuestion *JavaxJmdnsImplDNSIncoming_readQuestion(JavaxJmdnsImplDNSIncoming *self) {
  NSString *domain = [((JavaxJmdnsImplDNSIncoming_MessageInputStream *) nil_chk(self->_messageInputStream_)) readName];
  JavaxJmdnsImplConstantsDNSRecordType *type = JavaxJmdnsImplConstantsDNSRecordType_typeForIndexWithInt_([self->_messageInputStream_ readUnsignedShort]);
  if (type == JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordType, TYPE_IGNORE)) {
    [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplDNSIncoming_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:JreStrcat("$$", @"Could not find record type: ", [self printWithBoolean:true])];
  }
  jint recordClassIndex = [self->_messageInputStream_ readUnsignedShort];
  JavaxJmdnsImplConstantsDNSRecordClass *recordClass = JavaxJmdnsImplConstantsDNSRecordClass_classForIndexWithInt_(recordClassIndex);
  jboolean unique = [((JavaxJmdnsImplConstantsDNSRecordClass *) nil_chk(recordClass)) isUniqueWithInt:recordClassIndex];
  return JavaxJmdnsImplDNSQuestion_newQuestionWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(domain, type, recordClass, unique);
}

JavaxJmdnsImplDNSRecord *JavaxJmdnsImplDNSIncoming_readAnswerWithJavaNetInetAddress_(JavaxJmdnsImplDNSIncoming *self, JavaNetInetAddress *source) {
  NSString *domain = [((JavaxJmdnsImplDNSIncoming_MessageInputStream *) nil_chk(self->_messageInputStream_)) readName];
  JavaxJmdnsImplConstantsDNSRecordType *type = JavaxJmdnsImplConstantsDNSRecordType_typeForIndexWithInt_([self->_messageInputStream_ readUnsignedShort]);
  if (type == JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordType, TYPE_IGNORE)) {
    [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplDNSIncoming_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:JreStrcat("$$C$", @"Could not find record type. domain: ", domain, 0x000a, [self printWithBoolean:true])];
  }
  jint recordClassIndex = [self->_messageInputStream_ readUnsignedShort];
  JavaxJmdnsImplConstantsDNSRecordClass *recordClass = (type == JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordType, TYPE_OPT) ? JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordClass, CLASS_UNKNOWN) : JavaxJmdnsImplConstantsDNSRecordClass_classForIndexWithInt_(recordClassIndex));
  if ((recordClass == JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordClass, CLASS_UNKNOWN)) && (type != JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordType, TYPE_OPT))) {
    [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplDNSIncoming_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:JreStrcat("$$$@C$", @"Could not find record class. domain: ", domain, @" type: ", type, 0x000a, [self printWithBoolean:true])];
  }
  jboolean unique = [recordClass isUniqueWithInt:recordClassIndex];
  jint ttl = [self->_messageInputStream_ readInt];
  jint len = [self->_messageInputStream_ readUnsignedShort];
  JavaxJmdnsImplDNSRecord *rec = nil;
  {
    NSString *service;
    jint priority;
    jint weight;
    jint port;
    NSString *target;
    JavaLangStringBuilder *buf;
    jint index;
    NSString *cpu;
    NSString *os;
    JavaxJmdnsImplConstantsDNSResultCode *extendedResultCode;
    jint version_;
    switch ([type ordinal]) {
      case JavaxJmdnsImplConstantsDNSRecordType_Enum_TYPE_A:
      rec = new_JavaxJmdnsImplDNSRecord_IPv4Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withByteArray_(domain, recordClass, unique, ttl, [self->_messageInputStream_ readBytesWithInt:len]);
      break;
      case JavaxJmdnsImplConstantsDNSRecordType_Enum_TYPE_AAAA:
      rec = new_JavaxJmdnsImplDNSRecord_IPv6Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withByteArray_(domain, recordClass, unique, ttl, [self->_messageInputStream_ readBytesWithInt:len]);
      break;
      case JavaxJmdnsImplConstantsDNSRecordType_Enum_TYPE_CNAME:
      case JavaxJmdnsImplConstantsDNSRecordType_Enum_TYPE_PTR:
      service = @"";
      service = [self->_messageInputStream_ readName];
      if ([((NSString *) nil_chk(service)) java_length] > 0) {
        rec = new_JavaxJmdnsImplDNSRecord_Pointer_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withNSString_(domain, recordClass, unique, ttl, service);
      }
      else {
        [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplDNSIncoming_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$@$$", @"PTR record of class: ", recordClass, @", there was a problem reading the service name of the answer for domain:", domain)];
      }
      break;
      case JavaxJmdnsImplConstantsDNSRecordType_Enum_TYPE_TXT:
      rec = new_JavaxJmdnsImplDNSRecord_Text_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withByteArray_(domain, recordClass, unique, ttl, [self->_messageInputStream_ readBytesWithInt:len]);
      break;
      case JavaxJmdnsImplConstantsDNSRecordType_Enum_TYPE_SRV:
      priority = [self->_messageInputStream_ readUnsignedShort];
      weight = [self->_messageInputStream_ readUnsignedShort];
      port = [self->_messageInputStream_ readUnsignedShort];
      target = @"";
      if (JavaxJmdnsImplDNSIncoming_USE_DOMAIN_NAME_FORMAT_FOR_SRV_TARGET) {
        target = [self->_messageInputStream_ readName];
      }
      else {
        target = [self->_messageInputStream_ readNonNameString];
      }
      rec = new_JavaxJmdnsImplDNSRecord_Service_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withInt_withInt_withInt_withNSString_(domain, recordClass, unique, ttl, priority, weight, port, target);
      break;
      case JavaxJmdnsImplConstantsDNSRecordType_Enum_TYPE_HINFO:
      buf = new_JavaLangStringBuilder_init();
      (void) [buf appendWithNSString:[self->_messageInputStream_ readUTFWithInt:len]];
      index = [buf indexOfWithNSString:@" "];
      cpu = [(index > 0 ? [buf substringWithInt:0 withInt:index] : [buf description]) java_trim];
      os = [(index > 0 ? [buf substringWithInt:index + 1] : @"") java_trim];
      rec = new_JavaxJmdnsImplDNSRecord_HostInformation_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withNSString_withNSString_(domain, recordClass, unique, ttl, cpu, os);
      break;
      case JavaxJmdnsImplConstantsDNSRecordType_Enum_TYPE_OPT:
      extendedResultCode = JavaxJmdnsImplConstantsDNSResultCode_resultCodeForFlagsWithInt_withInt_([self getFlags], ttl);
      version_ = JreRShift32((ttl & (jint) 0x00ff0000), 16);
      if (version_ == 0) {
        self->_senderUDPPayload_ = recordClassIndex;
        while ([self->_messageInputStream_ available] > 0) {
          jint optionCodeInt = 0;
          JavaxJmdnsImplConstantsDNSOptionCode *optionCode = nil;
          if ([self->_messageInputStream_ available] >= 2) {
            optionCodeInt = [self->_messageInputStream_ readUnsignedShort];
            optionCode = JavaxJmdnsImplConstantsDNSOptionCode_resultCodeForFlagsWithInt_(optionCodeInt);
          }
          else {
            [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplDNSIncoming_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:@"There was a problem reading the OPT record. Ignoring."];
            break;
          }
          jint optionLength = 0;
          if ([self->_messageInputStream_ available] >= 2) {
            optionLength = [self->_messageInputStream_ readUnsignedShort];
          }
          else {
            [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplDNSIncoming_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:@"There was a problem reading the OPT record. Ignoring."];
            break;
          }
          IOSByteArray *optiondata = [IOSByteArray newArrayWithLength:0];
          if ([self->_messageInputStream_ available] >= optionLength) {
            optiondata = [self->_messageInputStream_ readBytesWithInt:optionLength];
          }
          {
            jint ownerVersion;
            jint ownerSequence;
            IOSByteArray *ownerPrimaryMacAddress;
            IOSByteArray *ownerWakeupMacAddress;
            IOSByteArray *ownerPassword;
            switch ([optionCode ordinal]) {
              case JavaxJmdnsImplConstantsDNSOptionCode_Enum_Owner:
              ownerVersion = 0;
              ownerSequence = 0;
              ownerPrimaryMacAddress = nil;
              ownerWakeupMacAddress = nil;
              ownerPassword = nil;
              @try {
                ownerVersion = IOSByteArray_Get(nil_chk(optiondata), 0);
                ownerSequence = IOSByteArray_Get(optiondata, 1);
                ownerPrimaryMacAddress = [IOSByteArray newArrayWithBytes:(jbyte[]){ IOSByteArray_Get(optiondata, 2), IOSByteArray_Get(optiondata, 3), IOSByteArray_Get(optiondata, 4), IOSByteArray_Get(optiondata, 5), IOSByteArray_Get(optiondata, 6), IOSByteArray_Get(optiondata, 7) } count:6];
                ownerWakeupMacAddress = ownerPrimaryMacAddress;
                if (optiondata->size_ > 8) {
                  ownerWakeupMacAddress = [IOSByteArray newArrayWithBytes:(jbyte[]){ IOSByteArray_Get(optiondata, 8), IOSByteArray_Get(optiondata, 9), IOSByteArray_Get(optiondata, 10), IOSByteArray_Get(optiondata, 11), IOSByteArray_Get(optiondata, 12), IOSByteArray_Get(optiondata, 13) } count:6];
                }
                if (optiondata->size_ == 18) {
                  ownerPassword = [IOSByteArray newArrayWithBytes:(jbyte[]){ IOSByteArray_Get(optiondata, 14), IOSByteArray_Get(optiondata, 15), IOSByteArray_Get(optiondata, 16), IOSByteArray_Get(optiondata, 17) } count:4];
                }
                if (optiondata->size_ == 22) {
                  ownerPassword = [IOSByteArray newArrayWithBytes:(jbyte[]){ IOSByteArray_Get(optiondata, 14), IOSByteArray_Get(optiondata, 15), IOSByteArray_Get(optiondata, 16), IOSByteArray_Get(optiondata, 17), IOSByteArray_Get(optiondata, 18), IOSByteArray_Get(optiondata, 19), IOSByteArray_Get(optiondata, 20), IOSByteArray_Get(optiondata, 21) } count:8];
                }
              }
              @catch (JavaLangException *exception) {
                [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplDNSIncoming_logger)) warningWithNSString:JreStrcat("$$", @"Malformed OPT answer. Option code: Owner data: ", JavaxJmdnsImplDNSIncoming__hexStringWithByteArray_(self, optiondata))];
              }
              if ([((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplDNSIncoming_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE)]) {
                [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplDNSIncoming_logger)) fineWithNSString:JreStrcat("$I$I$$$$", @"Unhandled Owner OPT version: ", ownerVersion, @" sequence: ", ownerSequence, @" MAC address: ", JavaxJmdnsImplDNSIncoming__hexStringWithByteArray_(self, ownerPrimaryMacAddress), (ownerWakeupMacAddress != ownerPrimaryMacAddress ? JreStrcat("$$", @" wakeup MAC address: ", JavaxJmdnsImplDNSIncoming__hexStringWithByteArray_(self, ownerWakeupMacAddress)) : @""), (ownerPassword != nil ? JreStrcat("$$", @" password: ", JavaxJmdnsImplDNSIncoming__hexStringWithByteArray_(self, ownerPassword)) : @""))];
              }
              break;
              case JavaxJmdnsImplConstantsDNSOptionCode_Enum_LLQ:
              case JavaxJmdnsImplConstantsDNSOptionCode_Enum_NSID:
              case JavaxJmdnsImplConstantsDNSOptionCode_Enum_UL:
              if ([((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplDNSIncoming_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE)]) {
                [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplDNSIncoming_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE) withNSString:JreStrcat("$@$$", @"There was an OPT answer. Option code: ", optionCode, @" data: ", JavaxJmdnsImplDNSIncoming__hexStringWithByteArray_(self, optiondata))];
              }
              break;
              case JavaxJmdnsImplConstantsDNSOptionCode_Enum_Unknown:
              [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplDNSIncoming_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$I$$", @"There was an OPT answer. Not currently handled. Option code: ", optionCodeInt, @" data: ", JavaxJmdnsImplDNSIncoming__hexStringWithByteArray_(self, optiondata))];
              break;
              default:
              break;
            }
          }
        }
      }
      else {
        [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplDNSIncoming_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$I$@", @"There was an OPT answer. Wrong version number: ", version_, @" result code: ", extendedResultCode)];
      }
      break;
      default:
      if ([((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplDNSIncoming_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINER)]) {
        [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplDNSIncoming_logger)) finerWithNSString:JreStrcat("$@", @"DNSIncoming() unknown type:", type)];
      }
      [self->_messageInputStream_ skipWithLong:len];
      break;
    }
  }
  if (rec != nil) {
    [rec setRecordSourceWithJavaNetInetAddress:source];
  }
  return rec;
}

NSString *JavaxJmdnsImplDNSIncoming__hexStringWithByteArray_(JavaxJmdnsImplDNSIncoming *self, IOSByteArray *bytes) {
  JavaLangStringBuilder *result = new_JavaLangStringBuilder_initWithInt_(2 * ((IOSByteArray *) nil_chk(bytes))->size_);
  for (jint i = 0; i < bytes->size_; i++) {
    jint b = IOSByteArray_Get(bytes, i) & (jint) 0xFF;
    (void) [result appendWithChar:IOSCharArray_Get(nil_chk(JavaxJmdnsImplDNSIncoming__nibbleToHex), b / 16)];
    (void) [result appendWithChar:IOSCharArray_Get(JavaxJmdnsImplDNSIncoming__nibbleToHex, b % 16)];
  }
  return [result description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplDNSIncoming)

J2OBJC_INITIALIZED_DEFN(JavaxJmdnsImplDNSIncoming_MessageInputStream)

@implementation JavaxJmdnsImplDNSIncoming_MessageInputStream

- (instancetype)initWithByteArray:(IOSByteArray *)buffer
                          withInt:(jint)length {
  JavaxJmdnsImplDNSIncoming_MessageInputStream_initWithByteArray_withInt_(self, buffer, length);
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)buffer
                          withInt:(jint)offset
                          withInt:(jint)length {
  JavaxJmdnsImplDNSIncoming_MessageInputStream_initWithByteArray_withInt_withInt_(self, buffer, offset, length);
  return self;
}

- (jint)readByte {
  return [self read];
}

- (jint)readUnsignedShort {
  return (JreLShift32([self read], 8)) | [self read];
}

- (jint)readInt {
  return (JreLShift32([self readUnsignedShort], 16)) | [self readUnsignedShort];
}

- (IOSByteArray *)readBytesWithInt:(jint)len {
  IOSByteArray *bytes = [IOSByteArray newArrayWithLength:len];
  [self readWithByteArray:bytes withInt:0 withInt:len];
  return bytes;
}

- (NSString *)readUTFWithInt:(jint)len {
  JavaLangStringBuilder *buffer = new_JavaLangStringBuilder_initWithInt_(len);
  for (jint index = 0; index < len; index++) {
    jint ch = [self read];
    switch (JreRShift32(ch, 4)) {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      break;
      case 12:
      case 13:
      ch = (JreLShift32((ch & (jint) 0x1F), 6)) | ([self read] & (jint) 0x3F);
      index++;
      break;
      case 14:
      ch = (JreLShift32((ch & (jint) 0x0f), 12)) | (JreLShift32(([self read] & (jint) 0x3F), 6)) | ([self read] & (jint) 0x3F);
      index++;
      index++;
      break;
      default:
      ch = (JreLShift32((ch & (jint) 0x3F), 4)) | ([self read] & (jint) 0x0f);
      index++;
      break;
    }
    (void) [buffer appendWithChar:(jchar) ch];
  }
  return [buffer description];
}

- (jint)peek {
  @synchronized(self) {
    return (pos_ < count_) ? (IOSByteArray_Get(nil_chk(buf_), pos_) & (jint) 0xff) : -1;
  }
}

- (NSString *)readName {
  id<JavaUtilMap> names = new_JavaUtilHashMap_init();
  JavaLangStringBuilder *buffer = new_JavaLangStringBuilder_init();
  jboolean finished = false;
  while (!finished) {
    jint len = [self read];
    if (len == 0) {
      finished = true;
      break;
    }
    {
      jint offset;
      NSString *label;
      jint index;
      NSString *compressedLabel;
      switch ([JavaxJmdnsImplConstantsDNSLabel_labelForByteWithInt_(len) ordinal]) {
        case JavaxJmdnsImplConstantsDNSLabel_Enum_Standard:
        offset = pos_ - 1;
        label = JreStrcat("$C", [self readUTFWithInt:len], '.');
        (void) [buffer appendWithNSString:label];
        for (JavaLangStringBuilder * __strong previousLabel in nil_chk([names values])) {
          (void) [((JavaLangStringBuilder *) nil_chk(previousLabel)) appendWithNSString:label];
        }
        (void) [names putWithId:JavaLangInteger_valueOfWithInt_(offset) withId:new_JavaLangStringBuilder_initWithNSString_(label)];
        break;
        case JavaxJmdnsImplConstantsDNSLabel_Enum_Compressed:
        index = (JreLShift32(JavaxJmdnsImplConstantsDNSLabel_labelValueWithInt_(len), 8)) | [self read];
        compressedLabel = [((id<JavaUtilMap>) nil_chk(_names_)) getWithId:JavaLangInteger_valueOfWithInt_(index)];
        if (compressedLabel == nil) {
          [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplDNSIncoming_MessageInputStream_logger1)) severeWithNSString:JreStrcat("$$$$", @"bad domain name: possible circular name detected. Bad offset: 0x", JavaLangInteger_toHexStringWithInt_(index), @" at 0x", JavaLangInteger_toHexStringWithInt_(pos_ - 2))];
          compressedLabel = @"";
        }
        (void) [buffer appendWithNSString:compressedLabel];
        for (JavaLangStringBuilder * __strong previousLabel in nil_chk([names values])) {
          (void) [((JavaLangStringBuilder *) nil_chk(previousLabel)) appendWithNSString:compressedLabel];
        }
        finished = true;
        break;
        case JavaxJmdnsImplConstantsDNSLabel_Enum_Extended:
        [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplDNSIncoming_MessageInputStream_logger1)) severeWithNSString:@"Extended label are not currently supported."];
        break;
        case JavaxJmdnsImplConstantsDNSLabel_Enum_Unknown:
        default:
        [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplDNSIncoming_MessageInputStream_logger1)) severeWithNSString:JreStrcat("$$C", @"unsupported dns label type: '", JavaLangInteger_toHexStringWithInt_(len & (jint) 0xC0), '\'')];
      }
    }
  }
  for (JavaLangInteger * __strong index in nil_chk([names keySet])) {
    (void) [((id<JavaUtilMap>) nil_chk(_names_)) putWithId:index withId:[((JavaLangStringBuilder *) nil_chk([names getWithId:index])) description]];
  }
  return [buffer description];
}

- (NSString *)readNonNameString {
  jint len = [self read];
  return [self readUTFWithInt:len];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x24, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithByteArray:withInt:);
  methods[1].selector = @selector(initWithByteArray:withInt:withInt:);
  methods[2].selector = @selector(readByte);
  methods[3].selector = @selector(readUnsignedShort);
  methods[4].selector = @selector(readInt);
  methods[5].selector = @selector(readBytesWithInt:);
  methods[6].selector = @selector(readUTFWithInt:);
  methods[7].selector = @selector(peek);
  methods[8].selector = @selector(readName);
  methods[9].selector = @selector(readNonNameString);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger1", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0xa, -1, 5, -1, -1 },
    { "_names_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "[BI", "[BII", "readBytes", "I", "readUTF", &JavaxJmdnsImplDNSIncoming_MessageInputStream_logger1, "Ljava/util/Map<Ljava/lang/Integer;Ljava/lang/String;>;", "LJavaxJmdnsImplDNSIncoming;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplDNSIncoming_MessageInputStream = { "MessageInputStream", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x9, 10, 2, 7, -1, -1, -1, -1 };
  return &_JavaxJmdnsImplDNSIncoming_MessageInputStream;
}

+ (void)initialize {
  if (self == [JavaxJmdnsImplDNSIncoming_MessageInputStream class]) {
    JavaxJmdnsImplDNSIncoming_MessageInputStream_logger1 = JavaUtilLoggingLogger_getLoggerWithNSString_([JavaxJmdnsImplDNSIncoming_MessageInputStream_class_() getName]);
    J2OBJC_SET_INITIALIZED(JavaxJmdnsImplDNSIncoming_MessageInputStream)
  }
}

@end

void JavaxJmdnsImplDNSIncoming_MessageInputStream_initWithByteArray_withInt_(JavaxJmdnsImplDNSIncoming_MessageInputStream *self, IOSByteArray *buffer, jint length) {
  JavaxJmdnsImplDNSIncoming_MessageInputStream_initWithByteArray_withInt_withInt_(self, buffer, 0, length);
}

JavaxJmdnsImplDNSIncoming_MessageInputStream *new_JavaxJmdnsImplDNSIncoming_MessageInputStream_initWithByteArray_withInt_(IOSByteArray *buffer, jint length) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplDNSIncoming_MessageInputStream, initWithByteArray_withInt_, buffer, length)
}

JavaxJmdnsImplDNSIncoming_MessageInputStream *create_JavaxJmdnsImplDNSIncoming_MessageInputStream_initWithByteArray_withInt_(IOSByteArray *buffer, jint length) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplDNSIncoming_MessageInputStream, initWithByteArray_withInt_, buffer, length)
}

void JavaxJmdnsImplDNSIncoming_MessageInputStream_initWithByteArray_withInt_withInt_(JavaxJmdnsImplDNSIncoming_MessageInputStream *self, IOSByteArray *buffer, jint offset, jint length) {
  JavaIoByteArrayInputStream_initWithByteArray_withInt_withInt_(self, buffer, offset, length);
  self->_names_ = new_JavaUtilHashMap_init();
}

JavaxJmdnsImplDNSIncoming_MessageInputStream *new_JavaxJmdnsImplDNSIncoming_MessageInputStream_initWithByteArray_withInt_withInt_(IOSByteArray *buffer, jint offset, jint length) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplDNSIncoming_MessageInputStream, initWithByteArray_withInt_withInt_, buffer, offset, length)
}

JavaxJmdnsImplDNSIncoming_MessageInputStream *create_JavaxJmdnsImplDNSIncoming_MessageInputStream_initWithByteArray_withInt_withInt_(IOSByteArray *buffer, jint offset, jint length) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplDNSIncoming_MessageInputStream, initWithByteArray_withInt_withInt_, buffer, offset, length)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplDNSIncoming_MessageInputStream)
