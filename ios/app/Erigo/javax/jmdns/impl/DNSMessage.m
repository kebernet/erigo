//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/jmdns/impl/DNSMessage.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "javax/jmdns/impl/DNSMessage.h"
#include "javax/jmdns/impl/DNSQuestion.h"
#include "javax/jmdns/impl/DNSRecord.h"
#include "javax/jmdns/impl/constants/DNSConstants.h"

@interface JavaxJmdnsImplDNSMessage () {
 @public
  jint _id_;
  jint _flags_;
}

@end

@implementation JavaxJmdnsImplDNSMessage

- (instancetype)initWithInt:(jint)flags
                    withInt:(jint)id_
                withBoolean:(jboolean)multicast {
  JavaxJmdnsImplDNSMessage_initWithInt_withInt_withBoolean_(self, flags, id_, multicast);
  return self;
}

- (jint)getId {
  return (_multicast_ ? 0 : _id_);
}

- (void)setIdWithInt:(jint)id_ {
  self->_id_ = id_;
}

- (jint)getFlags {
  return _flags_;
}

- (void)setFlagsWithInt:(jint)flags {
  self->_flags_ = flags;
}

- (jboolean)isMulticast {
  return _multicast_;
}

- (id<JavaUtilCollection>)getQuestions {
  return _questions_;
}

- (jint)getNumberOfQuestions {
  return [((id<JavaUtilCollection>) nil_chk([self getQuestions])) size];
}

- (id<JavaUtilCollection>)getAllAnswers {
  id<JavaUtilList> aList = new_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(_answers_)) size] + [((id<JavaUtilList>) nil_chk(_authoritativeAnswers_)) size] + [((id<JavaUtilList>) nil_chk(_additionals_)) size]);
  [aList addAllWithJavaUtilCollection:_answers_];
  [aList addAllWithJavaUtilCollection:_authoritativeAnswers_];
  [aList addAllWithJavaUtilCollection:_additionals_];
  return aList;
}

- (id<JavaUtilCollection>)getAnswers {
  return _answers_;
}

- (jint)getNumberOfAnswers {
  return [((id<JavaUtilCollection>) nil_chk([self getAnswers])) size];
}

- (id<JavaUtilCollection>)getAuthorities {
  return _authoritativeAnswers_;
}

- (jint)getNumberOfAuthorities {
  return [((id<JavaUtilCollection>) nil_chk([self getAuthorities])) size];
}

- (id<JavaUtilCollection>)getAdditionals {
  return _additionals_;
}

- (jint)getNumberOfAdditionals {
  return [((id<JavaUtilCollection>) nil_chk([self getAdditionals])) size];
}

- (jboolean)isTruncated {
  return (_flags_ & JavaxJmdnsImplConstantsDNSConstants_FLAGS_TC) != 0;
}

- (jboolean)isQuery {
  return (_flags_ & JavaxJmdnsImplConstantsDNSConstants_FLAGS_QR_MASK) == JavaxJmdnsImplConstantsDNSConstants_FLAGS_QR_QUERY;
}

- (jboolean)isResponse {
  return (_flags_ & JavaxJmdnsImplConstantsDNSConstants_FLAGS_QR_MASK) == JavaxJmdnsImplConstantsDNSConstants_FLAGS_QR_RESPONSE;
}

- (jboolean)isEmpty {
  return ([self getNumberOfQuestions] + [self getNumberOfAnswers] + [self getNumberOfAuthorities] + [self getNumberOfAdditionals]) == 0;
}

- (NSString *)print {
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_initWithInt_(200);
  (void) [buf appendWithNSString:[self description]];
  (void) [buf appendWithNSString:@"\n"];
  for (JavaxJmdnsImplDNSQuestion * __strong question in nil_chk(_questions_)) {
    (void) [buf appendWithNSString:@"\tquestion:      "];
    (void) [buf appendWithId:question];
    (void) [buf appendWithNSString:@"\n"];
  }
  for (JavaxJmdnsImplDNSRecord * __strong answer in nil_chk(_answers_)) {
    (void) [buf appendWithNSString:@"\tanswer:        "];
    (void) [buf appendWithId:answer];
    (void) [buf appendWithNSString:@"\n"];
  }
  for (JavaxJmdnsImplDNSRecord * __strong answer in nil_chk(_authoritativeAnswers_)) {
    (void) [buf appendWithNSString:@"\tauthoritative: "];
    (void) [buf appendWithId:answer];
    (void) [buf appendWithNSString:@"\n"];
  }
  for (JavaxJmdnsImplDNSRecord * __strong answer in nil_chk(_additionals_)) {
    (void) [buf appendWithNSString:@"\tadditional:    "];
    (void) [buf appendWithId:answer];
    (void) [buf appendWithNSString:@"\n"];
  }
  return [buf description];
}

- (NSString *)printWithByteArray:(IOSByteArray *)data {
  JavaLangStringBuilder *buf = new_JavaLangStringBuilder_initWithInt_(4000);
  for (jint off = 0, len = ((IOSByteArray *) nil_chk(data))->size_; off < len; off += 32) {
    jint n = JavaLangMath_minWithInt_withInt_(32, len - off);
    if (off < (jint) 0x10) {
      (void) [buf appendWithChar:' '];
    }
    if (off < (jint) 0x100) {
      (void) [buf appendWithChar:' '];
    }
    if (off < (jint) 0x1000) {
      (void) [buf appendWithChar:' '];
    }
    (void) [buf appendWithNSString:JavaLangInteger_toHexStringWithInt_(off)];
    (void) [buf appendWithChar:':'];
    jint index = 0;
    for (index = 0; index < n; index++) {
      if ((index % 8) == 0) {
        (void) [buf appendWithChar:' '];
      }
      (void) [buf appendWithNSString:JavaLangInteger_toHexStringWithInt_(JreRShift32((IOSByteArray_Get(data, off + index) & (jint) 0xF0), 4))];
      (void) [buf appendWithNSString:JavaLangInteger_toHexStringWithInt_(JreRShift32((IOSByteArray_Get(data, off + index) & (jint) 0x0F), 0))];
    }
    if (index < 32) {
      for (jint i = index; i < 32; i++) {
        if ((i % 8) == 0) {
          (void) [buf appendWithChar:' '];
        }
        (void) [buf appendWithNSString:@"  "];
      }
    }
    (void) [buf appendWithNSString:@"    "];
    for (index = 0; index < n; index++) {
      if ((index % 8) == 0) {
        (void) [buf appendWithChar:' '];
      }
      jint ch = IOSByteArray_Get(data, off + index) & (jint) 0xFF;
      (void) [buf appendWithChar:((ch > ' ') && (ch < 127)) ? (jchar) ch : '.'];
    }
    (void) [buf appendWithNSString:@"\n"];
    if (off + 32 >= 2048) {
      (void) [buf appendWithNSString:@"....\n"];
      break;
    }
  }
  return [buf description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 4, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withInt:withBoolean:);
  methods[1].selector = @selector(getId);
  methods[2].selector = @selector(setIdWithInt:);
  methods[3].selector = @selector(getFlags);
  methods[4].selector = @selector(setFlagsWithInt:);
  methods[5].selector = @selector(isMulticast);
  methods[6].selector = @selector(getQuestions);
  methods[7].selector = @selector(getNumberOfQuestions);
  methods[8].selector = @selector(getAllAnswers);
  methods[9].selector = @selector(getAnswers);
  methods[10].selector = @selector(getNumberOfAnswers);
  methods[11].selector = @selector(getAuthorities);
  methods[12].selector = @selector(getNumberOfAuthorities);
  methods[13].selector = @selector(getAdditionals);
  methods[14].selector = @selector(getNumberOfAdditionals);
  methods[15].selector = @selector(isTruncated);
  methods[16].selector = @selector(isQuery);
  methods[17].selector = @selector(isResponse);
  methods[18].selector = @selector(isEmpty);
  methods[19].selector = @selector(print);
  methods[20].selector = @selector(printWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MULTICAST", "Z", .constantValue.asBOOL = JavaxJmdnsImplDNSMessage_MULTICAST, 0x19, -1, -1, -1, -1 },
    { "UNICAST", "Z", .constantValue.asBOOL = JavaxJmdnsImplDNSMessage_UNICAST, 0x19, -1, -1, -1, -1 },
    { "_id_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_multicast_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "_flags_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_questions_", "LJavaUtilList;", .constantValue.asLong = 0, 0x14, -1, -1, 8, -1 },
    { "_answers_", "LJavaUtilList;", .constantValue.asLong = 0, 0x14, -1, -1, 9, -1 },
    { "_authoritativeAnswers_", "LJavaUtilList;", .constantValue.asLong = 0, 0x14, -1, -1, 9, -1 },
    { "_additionals_", "LJavaUtilList;", .constantValue.asLong = 0, 0x14, -1, -1, 9, -1 },
  };
  static const void *ptrTable[] = { "IIZ", "setId", "I", "setFlags", "()Ljava/util/Collection<+Ljavax/jmdns/impl/DNSQuestion;>;", "()Ljava/util/Collection<+Ljavax/jmdns/impl/DNSRecord;>;", "print", "[B", "Ljava/util/List<Ljavax/jmdns/impl/DNSQuestion;>;", "Ljava/util/List<Ljavax/jmdns/impl/DNSRecord;>;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplDNSMessage = { "DNSMessage", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x401, 21, 9, -1, -1, -1, -1, -1 };
  return &_JavaxJmdnsImplDNSMessage;
}

@end

void JavaxJmdnsImplDNSMessage_initWithInt_withInt_withBoolean_(JavaxJmdnsImplDNSMessage *self, jint flags, jint id_, jboolean multicast) {
  NSObject_init(self);
  self->_flags_ = flags;
  self->_id_ = id_;
  self->_multicast_ = multicast;
  self->_questions_ = JavaUtilCollections_synchronizedListWithJavaUtilList_(new_JavaUtilLinkedList_init());
  self->_answers_ = JavaUtilCollections_synchronizedListWithJavaUtilList_(new_JavaUtilLinkedList_init());
  self->_authoritativeAnswers_ = JavaUtilCollections_synchronizedListWithJavaUtilList_(new_JavaUtilLinkedList_init());
  self->_additionals_ = JavaUtilCollections_synchronizedListWithJavaUtilList_(new_JavaUtilLinkedList_init());
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplDNSMessage)
