//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/jmdns/impl/DNSOutgoing.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxJmdnsImplDNSOutgoing")
#ifdef RESTRICT_JavaxJmdnsImplDNSOutgoing
#define INCLUDE_ALL_JavaxJmdnsImplDNSOutgoing 0
#else
#define INCLUDE_ALL_JavaxJmdnsImplDNSOutgoing 1
#endif
#undef RESTRICT_JavaxJmdnsImplDNSOutgoing

#if !defined (JavaxJmdnsImplDNSOutgoing_) && (INCLUDE_ALL_JavaxJmdnsImplDNSOutgoing || defined(INCLUDE_JavaxJmdnsImplDNSOutgoing))
#define JavaxJmdnsImplDNSOutgoing_

#define RESTRICT_JavaxJmdnsImplDNSMessage 1
#define INCLUDE_JavaxJmdnsImplDNSMessage 1
#include "javax/jmdns/impl/DNSMessage.h"

@class IOSByteArray;
@class JavaxJmdnsImplDNSIncoming;
@class JavaxJmdnsImplDNSQuestion;
@class JavaxJmdnsImplDNSRecord;
@protocol JavaUtilMap;

@interface JavaxJmdnsImplDNSOutgoing : JavaxJmdnsImplDNSMessage {
 @public
  id<JavaUtilMap> _names_;
}

#pragma mark Public

- (instancetype)initWithInt:(jint)flags;

- (instancetype)initWithInt:(jint)flags
                withBoolean:(jboolean)multicast;

- (instancetype)initWithInt:(jint)flags
                withBoolean:(jboolean)multicast
                    withInt:(jint)senderUDPPayload;

- (void)addAdditionalAnswerWithJavaxJmdnsImplDNSIncoming:(JavaxJmdnsImplDNSIncoming *)inArg
                             withJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *)rec;

- (void)addAnswerWithJavaxJmdnsImplDNSIncoming:(JavaxJmdnsImplDNSIncoming *)inArg
                   withJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *)rec;

- (void)addAnswerWithJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *)rec
                                    withLong:(jlong)now;

- (void)addAuthorativeAnswerWithJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *)rec;

- (void)addQuestionWithJavaxJmdnsImplDNSQuestion:(JavaxJmdnsImplDNSQuestion *)rec;

- (jint)availableSpace;

- (IOSByteArray *)data;

- (jint)getMaxUDPPayload;

- (jboolean)isQuery;

- (NSString *)description;

#pragma mark Package-Private

- (NSString *)printWithBoolean:(jboolean)dump;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxJmdnsImplDNSOutgoing)

J2OBJC_FIELD_SETTER(JavaxJmdnsImplDNSOutgoing, _names_, id<JavaUtilMap>)

inline jboolean JavaxJmdnsImplDNSOutgoing_get_USE_DOMAIN_NAME_COMPRESSION();
inline jboolean JavaxJmdnsImplDNSOutgoing_set_USE_DOMAIN_NAME_COMPRESSION(jboolean value);
inline jboolean *JavaxJmdnsImplDNSOutgoing_getRef_USE_DOMAIN_NAME_COMPRESSION();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jboolean JavaxJmdnsImplDNSOutgoing_USE_DOMAIN_NAME_COMPRESSION;
J2OBJC_STATIC_FIELD_PRIMITIVE(JavaxJmdnsImplDNSOutgoing, USE_DOMAIN_NAME_COMPRESSION, jboolean)

FOUNDATION_EXPORT void JavaxJmdnsImplDNSOutgoing_initWithInt_(JavaxJmdnsImplDNSOutgoing *self, jint flags);

FOUNDATION_EXPORT JavaxJmdnsImplDNSOutgoing *new_JavaxJmdnsImplDNSOutgoing_initWithInt_(jint flags) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxJmdnsImplDNSOutgoing *create_JavaxJmdnsImplDNSOutgoing_initWithInt_(jint flags);

FOUNDATION_EXPORT void JavaxJmdnsImplDNSOutgoing_initWithInt_withBoolean_(JavaxJmdnsImplDNSOutgoing *self, jint flags, jboolean multicast);

FOUNDATION_EXPORT JavaxJmdnsImplDNSOutgoing *new_JavaxJmdnsImplDNSOutgoing_initWithInt_withBoolean_(jint flags, jboolean multicast) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxJmdnsImplDNSOutgoing *create_JavaxJmdnsImplDNSOutgoing_initWithInt_withBoolean_(jint flags, jboolean multicast);

FOUNDATION_EXPORT void JavaxJmdnsImplDNSOutgoing_initWithInt_withBoolean_withInt_(JavaxJmdnsImplDNSOutgoing *self, jint flags, jboolean multicast, jint senderUDPPayload);

FOUNDATION_EXPORT JavaxJmdnsImplDNSOutgoing *new_JavaxJmdnsImplDNSOutgoing_initWithInt_withBoolean_withInt_(jint flags, jboolean multicast, jint senderUDPPayload) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxJmdnsImplDNSOutgoing *create_JavaxJmdnsImplDNSOutgoing_initWithInt_withBoolean_withInt_(jint flags, jboolean multicast, jint senderUDPPayload);

J2OBJC_TYPE_LITERAL_HEADER(JavaxJmdnsImplDNSOutgoing)

#endif

#if !defined (JavaxJmdnsImplDNSOutgoing_MessageOutputStream_) && (INCLUDE_ALL_JavaxJmdnsImplDNSOutgoing || defined(INCLUDE_JavaxJmdnsImplDNSOutgoing_MessageOutputStream))
#define JavaxJmdnsImplDNSOutgoing_MessageOutputStream_

#define RESTRICT_JavaIoByteArrayOutputStream 1
#define INCLUDE_JavaIoByteArrayOutputStream 1
#include "java/io/ByteArrayOutputStream.h"

@class IOSByteArray;
@class JavaxJmdnsImplDNSOutgoing;
@class JavaxJmdnsImplDNSQuestion;
@class JavaxJmdnsImplDNSRecord;

@interface JavaxJmdnsImplDNSOutgoing_MessageOutputStream : JavaIoByteArrayOutputStream

#pragma mark Package-Private

- (instancetype)initWithInt:(jint)size
withJavaxJmdnsImplDNSOutgoing:(JavaxJmdnsImplDNSOutgoing *)outArg;

- (instancetype)initWithInt:(jint)size
withJavaxJmdnsImplDNSOutgoing:(JavaxJmdnsImplDNSOutgoing *)outArg
                    withInt:(jint)offset;

- (void)writeByteWithInt:(jint)value;

- (void)writeBytesWithByteArray:(IOSByteArray *)data;

- (void)writeBytesWithByteArray:(IOSByteArray *)data
                        withInt:(jint)off
                        withInt:(jint)len;

- (void)writeBytesWithNSString:(NSString *)str
                       withInt:(jint)off
                       withInt:(jint)len;

- (void)writeIntWithInt:(jint)value;

- (void)writeNameWithNSString:(NSString *)name;

- (void)writeNameWithNSString:(NSString *)name
                  withBoolean:(jboolean)useCompression;

- (void)writeQuestionWithJavaxJmdnsImplDNSQuestion:(JavaxJmdnsImplDNSQuestion *)question;

- (void)writeRecordWithJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *)rec
                                      withLong:(jlong)now;

- (void)writeShortWithInt:(jint)value;

- (void)writeUTFWithNSString:(NSString *)str
                     withInt:(jint)off
                     withInt:(jint)len;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxJmdnsImplDNSOutgoing_MessageOutputStream)

FOUNDATION_EXPORT void JavaxJmdnsImplDNSOutgoing_MessageOutputStream_initWithInt_withJavaxJmdnsImplDNSOutgoing_(JavaxJmdnsImplDNSOutgoing_MessageOutputStream *self, jint size, JavaxJmdnsImplDNSOutgoing *outArg);

FOUNDATION_EXPORT JavaxJmdnsImplDNSOutgoing_MessageOutputStream *new_JavaxJmdnsImplDNSOutgoing_MessageOutputStream_initWithInt_withJavaxJmdnsImplDNSOutgoing_(jint size, JavaxJmdnsImplDNSOutgoing *outArg) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxJmdnsImplDNSOutgoing_MessageOutputStream *create_JavaxJmdnsImplDNSOutgoing_MessageOutputStream_initWithInt_withJavaxJmdnsImplDNSOutgoing_(jint size, JavaxJmdnsImplDNSOutgoing *outArg);

FOUNDATION_EXPORT void JavaxJmdnsImplDNSOutgoing_MessageOutputStream_initWithInt_withJavaxJmdnsImplDNSOutgoing_withInt_(JavaxJmdnsImplDNSOutgoing_MessageOutputStream *self, jint size, JavaxJmdnsImplDNSOutgoing *outArg, jint offset);

FOUNDATION_EXPORT JavaxJmdnsImplDNSOutgoing_MessageOutputStream *new_JavaxJmdnsImplDNSOutgoing_MessageOutputStream_initWithInt_withJavaxJmdnsImplDNSOutgoing_withInt_(jint size, JavaxJmdnsImplDNSOutgoing *outArg, jint offset) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxJmdnsImplDNSOutgoing_MessageOutputStream *create_JavaxJmdnsImplDNSOutgoing_MessageOutputStream_initWithInt_withJavaxJmdnsImplDNSOutgoing_withInt_(jint size, JavaxJmdnsImplDNSOutgoing *outArg, jint offset);

J2OBJC_TYPE_LITERAL_HEADER(JavaxJmdnsImplDNSOutgoing_MessageOutputStream)

#endif

#pragma pop_macro("INCLUDE_ALL_JavaxJmdnsImplDNSOutgoing")
