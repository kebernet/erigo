//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/jmdns/impl/DNSOutgoing.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "javax/jmdns/impl/DNSIncoming.h"
#include "javax/jmdns/impl/DNSMessage.h"
#include "javax/jmdns/impl/DNSOutgoing.h"
#include "javax/jmdns/impl/DNSQuestion.h"
#include "javax/jmdns/impl/DNSRecord.h"
#include "javax/jmdns/impl/constants/DNSConstants.h"
#include "javax/jmdns/impl/constants/DNSRecordClass.h"
#include "javax/jmdns/impl/constants/DNSRecordType.h"

@interface JavaxJmdnsImplDNSOutgoing () {
 @public
  jint _maxUDPPayload_;
  JavaxJmdnsImplDNSOutgoing_MessageOutputStream *_questionsBytes_;
  JavaxJmdnsImplDNSOutgoing_MessageOutputStream *_answersBytes_;
  JavaxJmdnsImplDNSOutgoing_MessageOutputStream *_authoritativeAnswersBytes_;
  JavaxJmdnsImplDNSOutgoing_MessageOutputStream *_additionalsAnswersBytes_;
}

@end

J2OBJC_FIELD_SETTER(JavaxJmdnsImplDNSOutgoing, _questionsBytes_, JavaxJmdnsImplDNSOutgoing_MessageOutputStream *)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplDNSOutgoing, _answersBytes_, JavaxJmdnsImplDNSOutgoing_MessageOutputStream *)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplDNSOutgoing, _authoritativeAnswersBytes_, JavaxJmdnsImplDNSOutgoing_MessageOutputStream *)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplDNSOutgoing, _additionalsAnswersBytes_, JavaxJmdnsImplDNSOutgoing_MessageOutputStream *)

inline jint JavaxJmdnsImplDNSOutgoing_get_HEADER_SIZE();
#define JavaxJmdnsImplDNSOutgoing_HEADER_SIZE 12
J2OBJC_STATIC_FIELD_CONSTANT(JavaxJmdnsImplDNSOutgoing, HEADER_SIZE, jint)

@interface JavaxJmdnsImplDNSOutgoing_MessageOutputStream () {
 @public
  JavaxJmdnsImplDNSOutgoing *_out_;
  jint _offset_;
}

@end

J2OBJC_FIELD_SETTER(JavaxJmdnsImplDNSOutgoing_MessageOutputStream, _out_, JavaxJmdnsImplDNSOutgoing *)

jboolean JavaxJmdnsImplDNSOutgoing_USE_DOMAIN_NAME_COMPRESSION = true;

@implementation JavaxJmdnsImplDNSOutgoing

- (instancetype)initWithInt:(jint)flags {
  JavaxJmdnsImplDNSOutgoing_initWithInt_(self, flags);
  return self;
}

- (instancetype)initWithInt:(jint)flags
                withBoolean:(jboolean)multicast {
  JavaxJmdnsImplDNSOutgoing_initWithInt_withBoolean_(self, flags, multicast);
  return self;
}

- (instancetype)initWithInt:(jint)flags
                withBoolean:(jboolean)multicast
                    withInt:(jint)senderUDPPayload {
  JavaxJmdnsImplDNSOutgoing_initWithInt_withBoolean_withInt_(self, flags, multicast, senderUDPPayload);
  return self;
}

- (jint)availableSpace {
  return _maxUDPPayload_ - JavaxJmdnsImplDNSOutgoing_HEADER_SIZE - [((JavaxJmdnsImplDNSOutgoing_MessageOutputStream *) nil_chk(_questionsBytes_)) size] - [((JavaxJmdnsImplDNSOutgoing_MessageOutputStream *) nil_chk(_answersBytes_)) size] - [((JavaxJmdnsImplDNSOutgoing_MessageOutputStream *) nil_chk(_authoritativeAnswersBytes_)) size] - [((JavaxJmdnsImplDNSOutgoing_MessageOutputStream *) nil_chk(_additionalsAnswersBytes_)) size];
}

- (void)addQuestionWithJavaxJmdnsImplDNSQuestion:(JavaxJmdnsImplDNSQuestion *)rec {
  JavaxJmdnsImplDNSOutgoing_MessageOutputStream *record = new_JavaxJmdnsImplDNSOutgoing_MessageOutputStream_initWithInt_withJavaxJmdnsImplDNSOutgoing_(512, self);
  [record writeQuestionWithJavaxJmdnsImplDNSQuestion:rec];
  IOSByteArray *byteArray = [record toByteArray];
  if (((IOSByteArray *) nil_chk(byteArray))->size_ < [self availableSpace]) {
    [((id<JavaUtilList>) nil_chk(_questions_)) addWithId:rec];
    [((JavaxJmdnsImplDNSOutgoing_MessageOutputStream *) nil_chk(_questionsBytes_)) writeWithByteArray:byteArray withInt:0 withInt:byteArray->size_];
  }
  else {
    @throw new_JavaIoIOException_initWithNSString_(@"message full");
  }
}

- (void)addAnswerWithJavaxJmdnsImplDNSIncoming:(JavaxJmdnsImplDNSIncoming *)inArg
                   withJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *)rec {
  if ((inArg == nil) || ![((JavaxJmdnsImplDNSRecord *) nil_chk(rec)) suppressedByWithJavaxJmdnsImplDNSIncoming:inArg]) {
    [self addAnswerWithJavaxJmdnsImplDNSRecord:rec withLong:0];
  }
}

- (void)addAnswerWithJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *)rec
                                    withLong:(jlong)now {
  if (rec != nil) {
    if ((now == 0) || ![rec isExpiredWithLong:now]) {
      JavaxJmdnsImplDNSOutgoing_MessageOutputStream *record = new_JavaxJmdnsImplDNSOutgoing_MessageOutputStream_initWithInt_withJavaxJmdnsImplDNSOutgoing_(512, self);
      [record writeRecordWithJavaxJmdnsImplDNSRecord:rec withLong:now];
      IOSByteArray *byteArray = [record toByteArray];
      if (((IOSByteArray *) nil_chk(byteArray))->size_ < [self availableSpace]) {
        [((id<JavaUtilList>) nil_chk(_answers_)) addWithId:rec];
        [((JavaxJmdnsImplDNSOutgoing_MessageOutputStream *) nil_chk(_answersBytes_)) writeWithByteArray:byteArray withInt:0 withInt:byteArray->size_];
      }
      else {
        @throw new_JavaIoIOException_initWithNSString_(@"message full");
      }
    }
  }
}

- (void)addAuthorativeAnswerWithJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *)rec {
  JavaxJmdnsImplDNSOutgoing_MessageOutputStream *record = new_JavaxJmdnsImplDNSOutgoing_MessageOutputStream_initWithInt_withJavaxJmdnsImplDNSOutgoing_(512, self);
  [record writeRecordWithJavaxJmdnsImplDNSRecord:rec withLong:0];
  IOSByteArray *byteArray = [record toByteArray];
  if (((IOSByteArray *) nil_chk(byteArray))->size_ < [self availableSpace]) {
    [((id<JavaUtilList>) nil_chk(_authoritativeAnswers_)) addWithId:rec];
    [((JavaxJmdnsImplDNSOutgoing_MessageOutputStream *) nil_chk(_authoritativeAnswersBytes_)) writeWithByteArray:byteArray withInt:0 withInt:byteArray->size_];
  }
  else {
    @throw new_JavaIoIOException_initWithNSString_(@"message full");
  }
}

- (void)addAdditionalAnswerWithJavaxJmdnsImplDNSIncoming:(JavaxJmdnsImplDNSIncoming *)inArg
                             withJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *)rec {
  JavaxJmdnsImplDNSOutgoing_MessageOutputStream *record = new_JavaxJmdnsImplDNSOutgoing_MessageOutputStream_initWithInt_withJavaxJmdnsImplDNSOutgoing_(512, self);
  [record writeRecordWithJavaxJmdnsImplDNSRecord:rec withLong:0];
  IOSByteArray *byteArray = [record toByteArray];
  if (((IOSByteArray *) nil_chk(byteArray))->size_ < [self availableSpace]) {
    [((id<JavaUtilList>) nil_chk(_additionals_)) addWithId:rec];
    [((JavaxJmdnsImplDNSOutgoing_MessageOutputStream *) nil_chk(_additionalsAnswersBytes_)) writeWithByteArray:byteArray withInt:0 withInt:byteArray->size_];
  }
  else {
    @throw new_JavaIoIOException_initWithNSString_(@"message full");
  }
}

- (IOSByteArray *)data {
  jlong now = JavaLangSystem_currentTimeMillis();
  [((id<JavaUtilMap>) nil_chk(_names_)) clear];
  JavaxJmdnsImplDNSOutgoing_MessageOutputStream *message = new_JavaxJmdnsImplDNSOutgoing_MessageOutputStream_initWithInt_withJavaxJmdnsImplDNSOutgoing_(_maxUDPPayload_, self);
  [message writeShortWithInt:_multicast_ ? 0 : [self getId]];
  [message writeShortWithInt:[self getFlags]];
  [message writeShortWithInt:[self getNumberOfQuestions]];
  [message writeShortWithInt:[self getNumberOfAnswers]];
  [message writeShortWithInt:[self getNumberOfAuthorities]];
  [message writeShortWithInt:[self getNumberOfAdditionals]];
  for (JavaxJmdnsImplDNSQuestion * __strong question in nil_chk(_questions_)) {
    [message writeQuestionWithJavaxJmdnsImplDNSQuestion:question];
  }
  for (JavaxJmdnsImplDNSRecord * __strong record in nil_chk(_answers_)) {
    [message writeRecordWithJavaxJmdnsImplDNSRecord:record withLong:now];
  }
  for (JavaxJmdnsImplDNSRecord * __strong record in nil_chk(_authoritativeAnswers_)) {
    [message writeRecordWithJavaxJmdnsImplDNSRecord:record withLong:now];
  }
  for (JavaxJmdnsImplDNSRecord * __strong record in nil_chk(_additionals_)) {
    [message writeRecordWithJavaxJmdnsImplDNSRecord:record withLong:now];
  }
  return [message toByteArray];
}

- (jboolean)isQuery {
  return ([self getFlags] & JavaxJmdnsImplConstantsDNSConstants_FLAGS_QR_MASK) == JavaxJmdnsImplConstantsDNSConstants_FLAGS_QR_QUERY;
}

- (NSString *)printWithBoolean:(jboolean)dump {
  JavaLangStringBuilder *buf = new_JavaLangStringBuilder_init();
  (void) [buf appendWithNSString:[self print]];
  if (dump) {
    (void) [buf appendWithNSString:[self printWithByteArray:[self data]]];
  }
  return [buf description];
}

- (NSString *)description {
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  (void) [buf appendWithNSString:[self isQuery] ? @"dns[query:" : @"dns[response:"];
  (void) [buf appendWithNSString:@" id=0x"];
  (void) [buf appendWithNSString:JavaLangInteger_toHexStringWithInt_([self getId])];
  if ([self getFlags] != 0) {
    (void) [buf appendWithNSString:@", flags=0x"];
    (void) [buf appendWithNSString:JavaLangInteger_toHexStringWithInt_([self getFlags])];
    if (([self getFlags] & JavaxJmdnsImplConstantsDNSConstants_FLAGS_QR_RESPONSE) != 0) {
      (void) [buf appendWithNSString:@":r"];
    }
    if (([self getFlags] & JavaxJmdnsImplConstantsDNSConstants_FLAGS_AA) != 0) {
      (void) [buf appendWithNSString:@":aa"];
    }
    if (([self getFlags] & JavaxJmdnsImplConstantsDNSConstants_FLAGS_TC) != 0) {
      (void) [buf appendWithNSString:@":tc"];
    }
  }
  if ([self getNumberOfQuestions] > 0) {
    (void) [buf appendWithNSString:@", questions="];
    (void) [buf appendWithInt:[self getNumberOfQuestions]];
  }
  if ([self getNumberOfAnswers] > 0) {
    (void) [buf appendWithNSString:@", answers="];
    (void) [buf appendWithInt:[self getNumberOfAnswers]];
  }
  if ([self getNumberOfAuthorities] > 0) {
    (void) [buf appendWithNSString:@", authorities="];
    (void) [buf appendWithInt:[self getNumberOfAuthorities]];
  }
  if ([self getNumberOfAdditionals] > 0) {
    (void) [buf appendWithNSString:@", additionals="];
    (void) [buf appendWithInt:[self getNumberOfAdditionals]];
  }
  if ([self getNumberOfQuestions] > 0) {
    (void) [buf appendWithNSString:@"\nquestions:"];
    for (JavaxJmdnsImplDNSQuestion * __strong question in nil_chk(_questions_)) {
      (void) [buf appendWithNSString:@"\n\t"];
      (void) [buf appendWithId:question];
    }
  }
  if ([self getNumberOfAnswers] > 0) {
    (void) [buf appendWithNSString:@"\nanswers:"];
    for (JavaxJmdnsImplDNSRecord * __strong record in nil_chk(_answers_)) {
      (void) [buf appendWithNSString:@"\n\t"];
      (void) [buf appendWithId:record];
    }
  }
  if ([self getNumberOfAuthorities] > 0) {
    (void) [buf appendWithNSString:@"\nauthorities:"];
    for (JavaxJmdnsImplDNSRecord * __strong record in nil_chk(_authoritativeAnswers_)) {
      (void) [buf appendWithNSString:@"\n\t"];
      (void) [buf appendWithId:record];
    }
  }
  if ([self getNumberOfAdditionals] > 0) {
    (void) [buf appendWithNSString:@"\nadditionals:"];
    for (JavaxJmdnsImplDNSRecord * __strong record in nil_chk(_additionals_)) {
      (void) [buf appendWithNSString:@"\n\t"];
      (void) [buf appendWithId:record];
    }
  }
  (void) [buf appendWithNSString:@"\nnames="];
  (void) [buf appendWithId:_names_];
  (void) [buf appendWithNSString:@"]"];
  return [buf description];
}

- (jint)getMaxUDPPayload {
  return self->_maxUDPPayload_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 5, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 5, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 8, 5, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, 5, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 7, 5, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 12, 13, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 14, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(initWithInt:withBoolean:);
  methods[2].selector = @selector(initWithInt:withBoolean:withInt:);
  methods[3].selector = @selector(availableSpace);
  methods[4].selector = @selector(addQuestionWithJavaxJmdnsImplDNSQuestion:);
  methods[5].selector = @selector(addAnswerWithJavaxJmdnsImplDNSIncoming:withJavaxJmdnsImplDNSRecord:);
  methods[6].selector = @selector(addAnswerWithJavaxJmdnsImplDNSRecord:withLong:);
  methods[7].selector = @selector(addAuthorativeAnswerWithJavaxJmdnsImplDNSRecord:);
  methods[8].selector = @selector(addAdditionalAnswerWithJavaxJmdnsImplDNSIncoming:withJavaxJmdnsImplDNSRecord:);
  methods[9].selector = @selector(data);
  methods[10].selector = @selector(isQuery);
  methods[11].selector = @selector(printWithBoolean:);
  methods[12].selector = @selector(description);
  methods[13].selector = @selector(getMaxUDPPayload);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "USE_DOMAIN_NAME_COMPRESSION", "Z", .constantValue.asLong = 0, 0x9, -1, 15, -1, -1 },
    { "_names_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x0, -1, -1, 16, -1 },
    { "_maxUDPPayload_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_questionsBytes_", "LJavaxJmdnsImplDNSOutgoing_MessageOutputStream;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_answersBytes_", "LJavaxJmdnsImplDNSOutgoing_MessageOutputStream;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_authoritativeAnswersBytes_", "LJavaxJmdnsImplDNSOutgoing_MessageOutputStream;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_additionalsAnswersBytes_", "LJavaxJmdnsImplDNSOutgoing_MessageOutputStream;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "HEADER_SIZE", "I", .constantValue.asInt = JavaxJmdnsImplDNSOutgoing_HEADER_SIZE, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "IZ", "IZI", "addQuestion", "LJavaxJmdnsImplDNSQuestion;", "LJavaIoIOException;", "addAnswer", "LJavaxJmdnsImplDNSIncoming;LJavaxJmdnsImplDNSRecord;", "LJavaxJmdnsImplDNSRecord;J", "addAuthorativeAnswer", "LJavaxJmdnsImplDNSRecord;", "addAdditionalAnswer", "print", "Z", "toString", &JavaxJmdnsImplDNSOutgoing_USE_DOMAIN_NAME_COMPRESSION, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LJavaxJmdnsImplDNSOutgoing_MessageOutputStream;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplDNSOutgoing = { "DNSOutgoing", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x11, 14, 8, -1, 17, -1, -1, -1 };
  return &_JavaxJmdnsImplDNSOutgoing;
}

@end

void JavaxJmdnsImplDNSOutgoing_initWithInt_(JavaxJmdnsImplDNSOutgoing *self, jint flags) {
  JavaxJmdnsImplDNSOutgoing_initWithInt_withBoolean_withInt_(self, flags, true, JavaxJmdnsImplConstantsDNSConstants_MAX_MSG_TYPICAL);
}

JavaxJmdnsImplDNSOutgoing *new_JavaxJmdnsImplDNSOutgoing_initWithInt_(jint flags) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplDNSOutgoing, initWithInt_, flags)
}

JavaxJmdnsImplDNSOutgoing *create_JavaxJmdnsImplDNSOutgoing_initWithInt_(jint flags) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplDNSOutgoing, initWithInt_, flags)
}

void JavaxJmdnsImplDNSOutgoing_initWithInt_withBoolean_(JavaxJmdnsImplDNSOutgoing *self, jint flags, jboolean multicast) {
  JavaxJmdnsImplDNSOutgoing_initWithInt_withBoolean_withInt_(self, flags, multicast, JavaxJmdnsImplConstantsDNSConstants_MAX_MSG_TYPICAL);
}

JavaxJmdnsImplDNSOutgoing *new_JavaxJmdnsImplDNSOutgoing_initWithInt_withBoolean_(jint flags, jboolean multicast) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplDNSOutgoing, initWithInt_withBoolean_, flags, multicast)
}

JavaxJmdnsImplDNSOutgoing *create_JavaxJmdnsImplDNSOutgoing_initWithInt_withBoolean_(jint flags, jboolean multicast) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplDNSOutgoing, initWithInt_withBoolean_, flags, multicast)
}

void JavaxJmdnsImplDNSOutgoing_initWithInt_withBoolean_withInt_(JavaxJmdnsImplDNSOutgoing *self, jint flags, jboolean multicast, jint senderUDPPayload) {
  JavaxJmdnsImplDNSMessage_initWithInt_withInt_withBoolean_(self, flags, 0, multicast);
  self->_names_ = new_JavaUtilHashMap_init();
  self->_maxUDPPayload_ = (senderUDPPayload > 0 ? senderUDPPayload : JavaxJmdnsImplConstantsDNSConstants_MAX_MSG_TYPICAL);
  self->_questionsBytes_ = new_JavaxJmdnsImplDNSOutgoing_MessageOutputStream_initWithInt_withJavaxJmdnsImplDNSOutgoing_(senderUDPPayload, self);
  self->_answersBytes_ = new_JavaxJmdnsImplDNSOutgoing_MessageOutputStream_initWithInt_withJavaxJmdnsImplDNSOutgoing_(senderUDPPayload, self);
  self->_authoritativeAnswersBytes_ = new_JavaxJmdnsImplDNSOutgoing_MessageOutputStream_initWithInt_withJavaxJmdnsImplDNSOutgoing_(senderUDPPayload, self);
  self->_additionalsAnswersBytes_ = new_JavaxJmdnsImplDNSOutgoing_MessageOutputStream_initWithInt_withJavaxJmdnsImplDNSOutgoing_(senderUDPPayload, self);
}

JavaxJmdnsImplDNSOutgoing *new_JavaxJmdnsImplDNSOutgoing_initWithInt_withBoolean_withInt_(jint flags, jboolean multicast, jint senderUDPPayload) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplDNSOutgoing, initWithInt_withBoolean_withInt_, flags, multicast, senderUDPPayload)
}

JavaxJmdnsImplDNSOutgoing *create_JavaxJmdnsImplDNSOutgoing_initWithInt_withBoolean_withInt_(jint flags, jboolean multicast, jint senderUDPPayload) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplDNSOutgoing, initWithInt_withBoolean_withInt_, flags, multicast, senderUDPPayload)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplDNSOutgoing)

@implementation JavaxJmdnsImplDNSOutgoing_MessageOutputStream

- (instancetype)initWithInt:(jint)size
withJavaxJmdnsImplDNSOutgoing:(JavaxJmdnsImplDNSOutgoing *)outArg {
  JavaxJmdnsImplDNSOutgoing_MessageOutputStream_initWithInt_withJavaxJmdnsImplDNSOutgoing_(self, size, outArg);
  return self;
}

- (instancetype)initWithInt:(jint)size
withJavaxJmdnsImplDNSOutgoing:(JavaxJmdnsImplDNSOutgoing *)outArg
                    withInt:(jint)offset {
  JavaxJmdnsImplDNSOutgoing_MessageOutputStream_initWithInt_withJavaxJmdnsImplDNSOutgoing_withInt_(self, size, outArg, offset);
  return self;
}

- (void)writeByteWithInt:(jint)value {
  [self writeWithInt:value & (jint) 0xFF];
}

- (void)writeBytesWithNSString:(NSString *)str
                       withInt:(jint)off
                       withInt:(jint)len {
  for (jint i = 0; i < len; i++) {
    [self writeByteWithInt:[((NSString *) nil_chk(str)) charAtWithInt:off + i]];
  }
}

- (void)writeBytesWithByteArray:(IOSByteArray *)data {
  if (data != nil) {
    [self writeBytesWithByteArray:data withInt:0 withInt:data->size_];
  }
}

- (void)writeBytesWithByteArray:(IOSByteArray *)data
                        withInt:(jint)off
                        withInt:(jint)len {
  for (jint i = 0; i < len; i++) {
    [self writeByteWithInt:IOSByteArray_Get(nil_chk(data), off + i)];
  }
}

- (void)writeShortWithInt:(jint)value {
  [self writeByteWithInt:JreRShift32(value, 8)];
  [self writeByteWithInt:value];
}

- (void)writeIntWithInt:(jint)value {
  [self writeShortWithInt:JreRShift32(value, 16)];
  [self writeShortWithInt:value];
}

- (void)writeUTFWithNSString:(NSString *)str
                     withInt:(jint)off
                     withInt:(jint)len {
  jint utflen = 0;
  for (jint i = 0; i < len; i++) {
    jint ch = [((NSString *) nil_chk(str)) charAtWithInt:off + i];
    if ((ch >= (jint) 0x0001) && (ch <= (jint) 0x007F)) {
      utflen += 1;
    }
    else {
      if (ch > (jint) 0x07FF) {
        utflen += 3;
      }
      else {
        utflen += 2;
      }
    }
  }
  [self writeByteWithInt:utflen];
  for (jint i = 0; i < len; i++) {
    jint ch = [((NSString *) nil_chk(str)) charAtWithInt:off + i];
    if ((ch >= (jint) 0x0001) && (ch <= (jint) 0x007F)) {
      [self writeByteWithInt:ch];
    }
    else {
      if (ch > (jint) 0x07FF) {
        [self writeByteWithInt:(jint) 0xE0 | ((JreRShift32(ch, 12)) & (jint) 0x0F)];
        [self writeByteWithInt:(jint) 0x80 | ((JreRShift32(ch, 6)) & (jint) 0x3F)];
        [self writeByteWithInt:(jint) 0x80 | ((JreRShift32(ch, 0)) & (jint) 0x3F)];
      }
      else {
        [self writeByteWithInt:(jint) 0xC0 | ((JreRShift32(ch, 6)) & (jint) 0x1F)];
        [self writeByteWithInt:(jint) 0x80 | ((JreRShift32(ch, 0)) & (jint) 0x3F)];
      }
    }
  }
}

- (void)writeNameWithNSString:(NSString *)name {
  [self writeNameWithNSString:name withBoolean:true];
}

- (void)writeNameWithNSString:(NSString *)name
                  withBoolean:(jboolean)useCompression {
  NSString *aName = name;
  while (true) {
    jint n = [((NSString *) nil_chk(aName)) java_indexOf:'.'];
    if (n < 0) {
      n = [aName java_length];
    }
    if (n <= 0) {
      [self writeByteWithInt:0];
      return;
    }
    NSString *label = [aName java_substring:0 endIndex:n];
    if (useCompression && JreLoadStatic(JavaxJmdnsImplDNSOutgoing, USE_DOMAIN_NAME_COMPRESSION)) {
      JavaLangInteger *offset = [((id<JavaUtilMap>) nil_chk(((JavaxJmdnsImplDNSOutgoing *) nil_chk(_out_))->_names_)) getWithId:aName];
      if (offset != nil) {
        jint val = [offset intValue];
        [self writeByteWithInt:(JreRShift32(val, 8)) | (jint) 0xC0];
        [self writeByteWithInt:val & (jint) 0xFF];
        return;
      }
      (void) [((id<JavaUtilMap>) nil_chk(_out_->_names_)) putWithId:aName withId:JavaLangInteger_valueOfWithInt_([self size] + _offset_)];
      [self writeUTFWithNSString:label withInt:0 withInt:[((NSString *) nil_chk(label)) java_length]];
    }
    else {
      [self writeUTFWithNSString:label withInt:0 withInt:[((NSString *) nil_chk(label)) java_length]];
    }
    aName = [aName java_substring:n];
    if ([((NSString *) nil_chk(aName)) java_hasPrefix:@"."]) {
      aName = [aName java_substring:1];
    }
  }
}

- (void)writeQuestionWithJavaxJmdnsImplDNSQuestion:(JavaxJmdnsImplDNSQuestion *)question {
  [self writeNameWithNSString:[((JavaxJmdnsImplDNSQuestion *) nil_chk(question)) getName]];
  [self writeShortWithInt:[((JavaxJmdnsImplConstantsDNSRecordType *) nil_chk([question getRecordType])) indexValue]];
  [self writeShortWithInt:[((JavaxJmdnsImplConstantsDNSRecordClass *) nil_chk([question getRecordClass])) indexValue]];
}

- (void)writeRecordWithJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *)rec
                                      withLong:(jlong)now {
  [self writeNameWithNSString:[((JavaxJmdnsImplDNSRecord *) nil_chk(rec)) getName]];
  [self writeShortWithInt:[((JavaxJmdnsImplConstantsDNSRecordType *) nil_chk([rec getRecordType])) indexValue]];
  [self writeShortWithInt:[((JavaxJmdnsImplConstantsDNSRecordClass *) nil_chk([rec getRecordClass])) indexValue] | (([rec isUnique] && [((JavaxJmdnsImplDNSOutgoing *) nil_chk(_out_)) isMulticast]) ? JavaxJmdnsImplConstantsDNSRecordClass_CLASS_UNIQUE : 0)];
  [self writeIntWithInt:(now == 0) ? [rec getTTL] : [rec getRemainingTTLWithLong:now]];
  JavaxJmdnsImplDNSOutgoing_MessageOutputStream *record = new_JavaxJmdnsImplDNSOutgoing_MessageOutputStream_initWithInt_withJavaxJmdnsImplDNSOutgoing_withInt_(512, _out_, _offset_ + [self size] + 2);
  [rec writeWithJavaxJmdnsImplDNSOutgoing_MessageOutputStream:record];
  IOSByteArray *byteArray = [record toByteArray];
  [self writeShortWithInt:((IOSByteArray *) nil_chk(byteArray))->size_];
  [self writeWithByteArray:byteArray withInt:0 withInt:byteArray->size_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 8, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 10, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 11, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 16, 17, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withJavaxJmdnsImplDNSOutgoing:);
  methods[1].selector = @selector(initWithInt:withJavaxJmdnsImplDNSOutgoing:withInt:);
  methods[2].selector = @selector(writeByteWithInt:);
  methods[3].selector = @selector(writeBytesWithNSString:withInt:withInt:);
  methods[4].selector = @selector(writeBytesWithByteArray:);
  methods[5].selector = @selector(writeBytesWithByteArray:withInt:withInt:);
  methods[6].selector = @selector(writeShortWithInt:);
  methods[7].selector = @selector(writeIntWithInt:);
  methods[8].selector = @selector(writeUTFWithNSString:withInt:withInt:);
  methods[9].selector = @selector(writeNameWithNSString:);
  methods[10].selector = @selector(writeNameWithNSString:withBoolean:);
  methods[11].selector = @selector(writeQuestionWithJavaxJmdnsImplDNSQuestion:);
  methods[12].selector = @selector(writeRecordWithJavaxJmdnsImplDNSRecord:withLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_out_", "LJavaxJmdnsImplDNSOutgoing;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_offset_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILJavaxJmdnsImplDNSOutgoing;", "ILJavaxJmdnsImplDNSOutgoing;I", "writeByte", "I", "writeBytes", "LNSString;II", "[B", "[BII", "writeShort", "writeInt", "writeUTF", "writeName", "LNSString;", "LNSString;Z", "writeQuestion", "LJavaxJmdnsImplDNSQuestion;", "writeRecord", "LJavaxJmdnsImplDNSRecord;J", "LJavaxJmdnsImplDNSOutgoing;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplDNSOutgoing_MessageOutputStream = { "MessageOutputStream", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x9, 13, 2, 18, -1, -1, -1, -1 };
  return &_JavaxJmdnsImplDNSOutgoing_MessageOutputStream;
}

@end

void JavaxJmdnsImplDNSOutgoing_MessageOutputStream_initWithInt_withJavaxJmdnsImplDNSOutgoing_(JavaxJmdnsImplDNSOutgoing_MessageOutputStream *self, jint size, JavaxJmdnsImplDNSOutgoing *outArg) {
  JavaxJmdnsImplDNSOutgoing_MessageOutputStream_initWithInt_withJavaxJmdnsImplDNSOutgoing_withInt_(self, size, outArg, 0);
}

JavaxJmdnsImplDNSOutgoing_MessageOutputStream *new_JavaxJmdnsImplDNSOutgoing_MessageOutputStream_initWithInt_withJavaxJmdnsImplDNSOutgoing_(jint size, JavaxJmdnsImplDNSOutgoing *outArg) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplDNSOutgoing_MessageOutputStream, initWithInt_withJavaxJmdnsImplDNSOutgoing_, size, outArg)
}

JavaxJmdnsImplDNSOutgoing_MessageOutputStream *create_JavaxJmdnsImplDNSOutgoing_MessageOutputStream_initWithInt_withJavaxJmdnsImplDNSOutgoing_(jint size, JavaxJmdnsImplDNSOutgoing *outArg) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplDNSOutgoing_MessageOutputStream, initWithInt_withJavaxJmdnsImplDNSOutgoing_, size, outArg)
}

void JavaxJmdnsImplDNSOutgoing_MessageOutputStream_initWithInt_withJavaxJmdnsImplDNSOutgoing_withInt_(JavaxJmdnsImplDNSOutgoing_MessageOutputStream *self, jint size, JavaxJmdnsImplDNSOutgoing *outArg, jint offset) {
  JavaIoByteArrayOutputStream_initWithInt_(self, size);
  self->_out_ = outArg;
  self->_offset_ = offset;
}

JavaxJmdnsImplDNSOutgoing_MessageOutputStream *new_JavaxJmdnsImplDNSOutgoing_MessageOutputStream_initWithInt_withJavaxJmdnsImplDNSOutgoing_withInt_(jint size, JavaxJmdnsImplDNSOutgoing *outArg, jint offset) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplDNSOutgoing_MessageOutputStream, initWithInt_withJavaxJmdnsImplDNSOutgoing_withInt_, size, outArg, offset)
}

JavaxJmdnsImplDNSOutgoing_MessageOutputStream *create_JavaxJmdnsImplDNSOutgoing_MessageOutputStream_initWithInt_withJavaxJmdnsImplDNSOutgoing_withInt_(jint size, JavaxJmdnsImplDNSOutgoing *outArg, jint offset) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplDNSOutgoing_MessageOutputStream, initWithInt_withJavaxJmdnsImplDNSOutgoing_withInt_, size, outArg, offset)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplDNSOutgoing_MessageOutputStream)
