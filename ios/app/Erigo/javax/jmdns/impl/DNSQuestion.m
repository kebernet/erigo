//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/jmdns/impl/DNSQuestion.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/StringBuilder.h"
#include "java/net/InetAddress.h"
#include "java/util/Collection.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "javax/jmdns/ServiceInfo.h"
#include "javax/jmdns/impl/DNSEntry.h"
#include "javax/jmdns/impl/DNSQuestion.h"
#include "javax/jmdns/impl/DNSRecord.h"
#include "javax/jmdns/impl/HostInfo.h"
#include "javax/jmdns/impl/JmDNSImpl.h"
#include "javax/jmdns/impl/ServiceInfoImpl.h"
#include "javax/jmdns/impl/constants/DNSConstants.h"
#include "javax/jmdns/impl/constants/DNSRecordClass.h"
#include "javax/jmdns/impl/constants/DNSRecordType.h"

inline JavaUtilLoggingLogger *JavaxJmdnsImplDNSQuestion_get_logger();
inline JavaUtilLoggingLogger *JavaxJmdnsImplDNSQuestion_set_logger(JavaUtilLoggingLogger *value);
static JavaUtilLoggingLogger *JavaxJmdnsImplDNSQuestion_logger;
J2OBJC_STATIC_FIELD_OBJ(JavaxJmdnsImplDNSQuestion, logger, JavaUtilLoggingLogger *)

@interface JavaxJmdnsImplDNSQuestion_DNS4Address : JavaxJmdnsImplDNSQuestion

- (instancetype)initWithNSString:(NSString *)name
withJavaxJmdnsImplConstantsDNSRecordType:(JavaxJmdnsImplConstantsDNSRecordType *)type
withJavaxJmdnsImplConstantsDNSRecordClass:(JavaxJmdnsImplConstantsDNSRecordClass *)recordClass
                     withBoolean:(jboolean)unique;

- (void)addAnswersWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)jmDNSImpl
                              withJavaUtilSet:(id<JavaUtilSet>)answers;

- (jboolean)iAmTheOnlyOneWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)jmDNSImpl;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxJmdnsImplDNSQuestion_DNS4Address)

__attribute__((unused)) static void JavaxJmdnsImplDNSQuestion_DNS4Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(JavaxJmdnsImplDNSQuestion_DNS4Address *self, NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique);

__attribute__((unused)) static JavaxJmdnsImplDNSQuestion_DNS4Address *new_JavaxJmdnsImplDNSQuestion_DNS4Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique) NS_RETURNS_RETAINED;

__attribute__((unused)) static JavaxJmdnsImplDNSQuestion_DNS4Address *create_JavaxJmdnsImplDNSQuestion_DNS4Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique);

J2OBJC_TYPE_LITERAL_HEADER(JavaxJmdnsImplDNSQuestion_DNS4Address)

@interface JavaxJmdnsImplDNSQuestion_DNS6Address : JavaxJmdnsImplDNSQuestion

- (instancetype)initWithNSString:(NSString *)name
withJavaxJmdnsImplConstantsDNSRecordType:(JavaxJmdnsImplConstantsDNSRecordType *)type
withJavaxJmdnsImplConstantsDNSRecordClass:(JavaxJmdnsImplConstantsDNSRecordClass *)recordClass
                     withBoolean:(jboolean)unique;

- (void)addAnswersWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)jmDNSImpl
                              withJavaUtilSet:(id<JavaUtilSet>)answers;

- (jboolean)iAmTheOnlyOneWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)jmDNSImpl;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxJmdnsImplDNSQuestion_DNS6Address)

__attribute__((unused)) static void JavaxJmdnsImplDNSQuestion_DNS6Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(JavaxJmdnsImplDNSQuestion_DNS6Address *self, NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique);

__attribute__((unused)) static JavaxJmdnsImplDNSQuestion_DNS6Address *new_JavaxJmdnsImplDNSQuestion_DNS6Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique) NS_RETURNS_RETAINED;

__attribute__((unused)) static JavaxJmdnsImplDNSQuestion_DNS6Address *create_JavaxJmdnsImplDNSQuestion_DNS6Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique);

J2OBJC_TYPE_LITERAL_HEADER(JavaxJmdnsImplDNSQuestion_DNS6Address)

@interface JavaxJmdnsImplDNSQuestion_HostInformation : JavaxJmdnsImplDNSQuestion

- (instancetype)initWithNSString:(NSString *)name
withJavaxJmdnsImplConstantsDNSRecordType:(JavaxJmdnsImplConstantsDNSRecordType *)type
withJavaxJmdnsImplConstantsDNSRecordClass:(JavaxJmdnsImplConstantsDNSRecordClass *)recordClass
                     withBoolean:(jboolean)unique;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxJmdnsImplDNSQuestion_HostInformation)

__attribute__((unused)) static void JavaxJmdnsImplDNSQuestion_HostInformation_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(JavaxJmdnsImplDNSQuestion_HostInformation *self, NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique);

__attribute__((unused)) static JavaxJmdnsImplDNSQuestion_HostInformation *new_JavaxJmdnsImplDNSQuestion_HostInformation_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique) NS_RETURNS_RETAINED;

__attribute__((unused)) static JavaxJmdnsImplDNSQuestion_HostInformation *create_JavaxJmdnsImplDNSQuestion_HostInformation_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique);

J2OBJC_TYPE_LITERAL_HEADER(JavaxJmdnsImplDNSQuestion_HostInformation)

@interface JavaxJmdnsImplDNSQuestion_Pointer : JavaxJmdnsImplDNSQuestion

- (instancetype)initWithNSString:(NSString *)name
withJavaxJmdnsImplConstantsDNSRecordType:(JavaxJmdnsImplConstantsDNSRecordType *)type
withJavaxJmdnsImplConstantsDNSRecordClass:(JavaxJmdnsImplConstantsDNSRecordClass *)recordClass
                     withBoolean:(jboolean)unique;

- (void)addAnswersWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)jmDNSImpl
                              withJavaUtilSet:(id<JavaUtilSet>)answers;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxJmdnsImplDNSQuestion_Pointer)

__attribute__((unused)) static void JavaxJmdnsImplDNSQuestion_Pointer_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(JavaxJmdnsImplDNSQuestion_Pointer *self, NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique);

__attribute__((unused)) static JavaxJmdnsImplDNSQuestion_Pointer *new_JavaxJmdnsImplDNSQuestion_Pointer_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique) NS_RETURNS_RETAINED;

__attribute__((unused)) static JavaxJmdnsImplDNSQuestion_Pointer *create_JavaxJmdnsImplDNSQuestion_Pointer_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique);

J2OBJC_TYPE_LITERAL_HEADER(JavaxJmdnsImplDNSQuestion_Pointer)

@interface JavaxJmdnsImplDNSQuestion_Service : JavaxJmdnsImplDNSQuestion

- (instancetype)initWithNSString:(NSString *)name
withJavaxJmdnsImplConstantsDNSRecordType:(JavaxJmdnsImplConstantsDNSRecordType *)type
withJavaxJmdnsImplConstantsDNSRecordClass:(JavaxJmdnsImplConstantsDNSRecordClass *)recordClass
                     withBoolean:(jboolean)unique;

- (void)addAnswersWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)jmDNSImpl
                              withJavaUtilSet:(id<JavaUtilSet>)answers;

- (jboolean)iAmTheOnlyOneWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)jmDNSImpl;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxJmdnsImplDNSQuestion_Service)

__attribute__((unused)) static void JavaxJmdnsImplDNSQuestion_Service_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(JavaxJmdnsImplDNSQuestion_Service *self, NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique);

__attribute__((unused)) static JavaxJmdnsImplDNSQuestion_Service *new_JavaxJmdnsImplDNSQuestion_Service_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique) NS_RETURNS_RETAINED;

__attribute__((unused)) static JavaxJmdnsImplDNSQuestion_Service *create_JavaxJmdnsImplDNSQuestion_Service_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique);

J2OBJC_TYPE_LITERAL_HEADER(JavaxJmdnsImplDNSQuestion_Service)

@interface JavaxJmdnsImplDNSQuestion_Text : JavaxJmdnsImplDNSQuestion

- (instancetype)initWithNSString:(NSString *)name
withJavaxJmdnsImplConstantsDNSRecordType:(JavaxJmdnsImplConstantsDNSRecordType *)type
withJavaxJmdnsImplConstantsDNSRecordClass:(JavaxJmdnsImplConstantsDNSRecordClass *)recordClass
                     withBoolean:(jboolean)unique;

- (void)addAnswersWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)jmDNSImpl
                              withJavaUtilSet:(id<JavaUtilSet>)answers;

- (jboolean)iAmTheOnlyOneWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)jmDNSImpl;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxJmdnsImplDNSQuestion_Text)

__attribute__((unused)) static void JavaxJmdnsImplDNSQuestion_Text_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(JavaxJmdnsImplDNSQuestion_Text *self, NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique);

__attribute__((unused)) static JavaxJmdnsImplDNSQuestion_Text *new_JavaxJmdnsImplDNSQuestion_Text_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique) NS_RETURNS_RETAINED;

__attribute__((unused)) static JavaxJmdnsImplDNSQuestion_Text *create_JavaxJmdnsImplDNSQuestion_Text_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique);

J2OBJC_TYPE_LITERAL_HEADER(JavaxJmdnsImplDNSQuestion_Text)

@interface JavaxJmdnsImplDNSQuestion_AllRecords : JavaxJmdnsImplDNSQuestion

- (instancetype)initWithNSString:(NSString *)name
withJavaxJmdnsImplConstantsDNSRecordType:(JavaxJmdnsImplConstantsDNSRecordType *)type
withJavaxJmdnsImplConstantsDNSRecordClass:(JavaxJmdnsImplConstantsDNSRecordClass *)recordClass
                     withBoolean:(jboolean)unique;

- (jboolean)isSameTypeWithJavaxJmdnsImplDNSEntry:(JavaxJmdnsImplDNSEntry *)entry_;

- (void)addAnswersWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)jmDNSImpl
                              withJavaUtilSet:(id<JavaUtilSet>)answers;

- (jboolean)iAmTheOnlyOneWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)jmDNSImpl;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxJmdnsImplDNSQuestion_AllRecords)

__attribute__((unused)) static void JavaxJmdnsImplDNSQuestion_AllRecords_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(JavaxJmdnsImplDNSQuestion_AllRecords *self, NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique);

__attribute__((unused)) static JavaxJmdnsImplDNSQuestion_AllRecords *new_JavaxJmdnsImplDNSQuestion_AllRecords_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique) NS_RETURNS_RETAINED;

__attribute__((unused)) static JavaxJmdnsImplDNSQuestion_AllRecords *create_JavaxJmdnsImplDNSQuestion_AllRecords_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique);

J2OBJC_TYPE_LITERAL_HEADER(JavaxJmdnsImplDNSQuestion_AllRecords)

J2OBJC_INITIALIZED_DEFN(JavaxJmdnsImplDNSQuestion)

@implementation JavaxJmdnsImplDNSQuestion

- (instancetype)initWithNSString:(NSString *)name
withJavaxJmdnsImplConstantsDNSRecordType:(JavaxJmdnsImplConstantsDNSRecordType *)type
withJavaxJmdnsImplConstantsDNSRecordClass:(JavaxJmdnsImplConstantsDNSRecordClass *)recordClass
                     withBoolean:(jboolean)unique {
  JavaxJmdnsImplDNSQuestion_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(self, name, type, recordClass, unique);
  return self;
}

+ (JavaxJmdnsImplDNSQuestion *)newQuestionWithNSString:(NSString *)name
              withJavaxJmdnsImplConstantsDNSRecordType:(JavaxJmdnsImplConstantsDNSRecordType *)type
             withJavaxJmdnsImplConstantsDNSRecordClass:(JavaxJmdnsImplConstantsDNSRecordClass *)recordClass
                                           withBoolean:(jboolean)unique {
  return JavaxJmdnsImplDNSQuestion_newQuestionWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(name, type, recordClass, unique);
}

- (jboolean)answeredByWithJavaxJmdnsImplDNSEntry:(JavaxJmdnsImplDNSEntry *)rec {
  return [self isSameRecordClassWithJavaxJmdnsImplDNSEntry:rec] && [self isSameTypeWithJavaxJmdnsImplDNSEntry:rec] && [((NSString *) nil_chk([self getName])) isEqual:[((JavaxJmdnsImplDNSEntry *) nil_chk(rec)) getName]];
}

- (void)addAnswersWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)jmDNSImpl
                              withJavaUtilSet:(id<JavaUtilSet>)answers {
}

- (void)addAnswersForServiceInfoWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)jmDNSImpl
                                            withJavaUtilSet:(id<JavaUtilSet>)answers
                          withJavaxJmdnsImplServiceInfoImpl:(JavaxJmdnsImplServiceInfoImpl *)info {
  if ((info != nil) && [((JavaxJmdnsImplServiceInfoImpl *) nil_chk(info)) isAnnounced]) {
    if ([((NSString *) nil_chk([self getName])) java_equalsIgnoreCase:[((JavaxJmdnsImplServiceInfoImpl *) nil_chk(info)) getQualifiedName]] || [((NSString *) nil_chk([self getName])) java_equalsIgnoreCase:[info getType]]) {
      [((id<JavaUtilSet>) nil_chk(answers)) addAllWithJavaUtilCollection:[((JavaxJmdnsImplHostInfo *) nil_chk([((JavaxJmdnsImplJmDNSImpl *) nil_chk(jmDNSImpl)) getLocalHost])) answersWithBoolean:JavaxJmdnsImplConstantsDNSRecordClass_UNIQUE withInt:JavaxJmdnsImplConstantsDNSConstants_DNS_TTL]];
      [answers addAllWithJavaUtilCollection:[info answersWithBoolean:JavaxJmdnsImplConstantsDNSRecordClass_UNIQUE withInt:JavaxJmdnsImplConstantsDNSConstants_DNS_TTL withJavaxJmdnsImplHostInfo:[jmDNSImpl getLocalHost]]];
    }
    if ([((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplDNSQuestion_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINER)]) {
      [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplDNSQuestion_logger)) finerWithNSString:JreStrcat("$$$$@C@", [((JavaxJmdnsImplJmDNSImpl *) nil_chk(jmDNSImpl)) getName], @" DNSQuestion(", [self getName], @").addAnswersForServiceInfo(): info: ", info, 0x000a, answers)];
    }
  }
}

- (jboolean)isStaleWithLong:(jlong)now {
  return false;
}

- (jboolean)isExpiredWithLong:(jlong)now {
  return false;
}

- (jboolean)iAmTheOnlyOneWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)jmDNSImpl {
  return false;
}

- (void)toStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)aLog {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplDNSQuestion;", 0x9, 1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x4, 7, 8, -1, 9, -1, -1 },
    { NULL, "Z", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withJavaxJmdnsImplConstantsDNSRecordType:withJavaxJmdnsImplConstantsDNSRecordClass:withBoolean:);
  methods[1].selector = @selector(newQuestionWithNSString:withJavaxJmdnsImplConstantsDNSRecordType:withJavaxJmdnsImplConstantsDNSRecordClass:withBoolean:);
  methods[2].selector = @selector(answeredByWithJavaxJmdnsImplDNSEntry:);
  methods[3].selector = @selector(addAnswersWithJavaxJmdnsImplJmDNSImpl:withJavaUtilSet:);
  methods[4].selector = @selector(addAnswersForServiceInfoWithJavaxJmdnsImplJmDNSImpl:withJavaUtilSet:withJavaxJmdnsImplServiceInfoImpl:);
  methods[5].selector = @selector(isStaleWithLong:);
  methods[6].selector = @selector(isExpiredWithLong:);
  methods[7].selector = @selector(iAmTheOnlyOneWithJavaxJmdnsImplJmDNSImpl:);
  methods[8].selector = @selector(toStringWithJavaLangStringBuilder:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0xa, -1, 17, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LJavaxJmdnsImplConstantsDNSRecordType;LJavaxJmdnsImplConstantsDNSRecordClass;Z", "newQuestion", "answeredBy", "LJavaxJmdnsImplDNSEntry;", "addAnswers", "LJavaxJmdnsImplJmDNSImpl;LJavaUtilSet;", "(Ljavax/jmdns/impl/JmDNSImpl;Ljava/util/Set<Ljavax/jmdns/impl/DNSRecord;>;)V", "addAnswersForServiceInfo", "LJavaxJmdnsImplJmDNSImpl;LJavaUtilSet;LJavaxJmdnsImplServiceInfoImpl;", "(Ljavax/jmdns/impl/JmDNSImpl;Ljava/util/Set<Ljavax/jmdns/impl/DNSRecord;>;Ljavax/jmdns/impl/ServiceInfoImpl;)V", "isStale", "J", "isExpired", "iAmTheOnlyOne", "LJavaxJmdnsImplJmDNSImpl;", "toString", "LJavaLangStringBuilder;", &JavaxJmdnsImplDNSQuestion_logger, "LJavaxJmdnsImplDNSQuestion_DNS4Address;LJavaxJmdnsImplDNSQuestion_DNS6Address;LJavaxJmdnsImplDNSQuestion_HostInformation;LJavaxJmdnsImplDNSQuestion_Pointer;LJavaxJmdnsImplDNSQuestion_Service;LJavaxJmdnsImplDNSQuestion_Text;LJavaxJmdnsImplDNSQuestion_AllRecords;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplDNSQuestion = { "DNSQuestion", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x1, 9, 1, -1, 18, -1, -1, -1 };
  return &_JavaxJmdnsImplDNSQuestion;
}

+ (void)initialize {
  if (self == [JavaxJmdnsImplDNSQuestion class]) {
    JavaxJmdnsImplDNSQuestion_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([JavaxJmdnsImplDNSQuestion_class_() getName]);
    J2OBJC_SET_INITIALIZED(JavaxJmdnsImplDNSQuestion)
  }
}

@end

void JavaxJmdnsImplDNSQuestion_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(JavaxJmdnsImplDNSQuestion *self, NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique) {
  JavaxJmdnsImplDNSEntry_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(self, name, type, recordClass, unique);
}

JavaxJmdnsImplDNSQuestion *new_JavaxJmdnsImplDNSQuestion_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplDNSQuestion, initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_, name, type, recordClass, unique)
}

JavaxJmdnsImplDNSQuestion *create_JavaxJmdnsImplDNSQuestion_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplDNSQuestion, initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_, name, type, recordClass, unique)
}

JavaxJmdnsImplDNSQuestion *JavaxJmdnsImplDNSQuestion_newQuestionWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique) {
  JavaxJmdnsImplDNSQuestion_initialize();
  switch ([type ordinal]) {
    case JavaxJmdnsImplConstantsDNSRecordType_Enum_TYPE_A:
    return new_JavaxJmdnsImplDNSQuestion_DNS4Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(name, type, recordClass, unique);
    case JavaxJmdnsImplConstantsDNSRecordType_Enum_TYPE_A6:
    return new_JavaxJmdnsImplDNSQuestion_DNS6Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(name, type, recordClass, unique);
    case JavaxJmdnsImplConstantsDNSRecordType_Enum_TYPE_AAAA:
    return new_JavaxJmdnsImplDNSQuestion_DNS6Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(name, type, recordClass, unique);
    case JavaxJmdnsImplConstantsDNSRecordType_Enum_TYPE_ANY:
    return new_JavaxJmdnsImplDNSQuestion_AllRecords_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(name, type, recordClass, unique);
    case JavaxJmdnsImplConstantsDNSRecordType_Enum_TYPE_HINFO:
    return new_JavaxJmdnsImplDNSQuestion_HostInformation_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(name, type, recordClass, unique);
    case JavaxJmdnsImplConstantsDNSRecordType_Enum_TYPE_PTR:
    return new_JavaxJmdnsImplDNSQuestion_Pointer_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(name, type, recordClass, unique);
    case JavaxJmdnsImplConstantsDNSRecordType_Enum_TYPE_SRV:
    return new_JavaxJmdnsImplDNSQuestion_Service_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(name, type, recordClass, unique);
    case JavaxJmdnsImplConstantsDNSRecordType_Enum_TYPE_TXT:
    return new_JavaxJmdnsImplDNSQuestion_Text_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(name, type, recordClass, unique);
    default:
    return new_JavaxJmdnsImplDNSQuestion_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(name, type, recordClass, unique);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplDNSQuestion)

@implementation JavaxJmdnsImplDNSQuestion_DNS4Address

- (instancetype)initWithNSString:(NSString *)name
withJavaxJmdnsImplConstantsDNSRecordType:(JavaxJmdnsImplConstantsDNSRecordType *)type
withJavaxJmdnsImplConstantsDNSRecordClass:(JavaxJmdnsImplConstantsDNSRecordClass *)recordClass
                     withBoolean:(jboolean)unique {
  JavaxJmdnsImplDNSQuestion_DNS4Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(self, name, type, recordClass, unique);
  return self;
}

- (void)addAnswersWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)jmDNSImpl
                              withJavaUtilSet:(id<JavaUtilSet>)answers {
  JavaxJmdnsImplDNSRecord *answer = [((JavaxJmdnsImplHostInfo *) nil_chk([((JavaxJmdnsImplJmDNSImpl *) nil_chk(jmDNSImpl)) getLocalHost])) getDNSAddressRecordWithJavaxJmdnsImplConstantsDNSRecordType:[self getRecordType] withBoolean:JavaxJmdnsImplConstantsDNSRecordClass_UNIQUE withInt:JavaxJmdnsImplConstantsDNSConstants_DNS_TTL];
  if (answer != nil) {
    [((id<JavaUtilSet>) nil_chk(answers)) addWithId:answer];
  }
}

- (jboolean)iAmTheOnlyOneWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)jmDNSImpl {
  NSString *name = [((NSString *) nil_chk([self getName])) lowercaseString];
  return [((NSString *) nil_chk([((JavaxJmdnsImplHostInfo *) nil_chk([((JavaxJmdnsImplJmDNSImpl *) nil_chk(jmDNSImpl)) getLocalHost])) getName])) isEqual:name] || [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk([jmDNSImpl getServices])) keySet])) containsWithId:name];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withJavaxJmdnsImplConstantsDNSRecordType:withJavaxJmdnsImplConstantsDNSRecordClass:withBoolean:);
  methods[1].selector = @selector(addAnswersWithJavaxJmdnsImplJmDNSImpl:withJavaUtilSet:);
  methods[2].selector = @selector(iAmTheOnlyOneWithJavaxJmdnsImplJmDNSImpl:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;LJavaxJmdnsImplConstantsDNSRecordType;LJavaxJmdnsImplConstantsDNSRecordClass;Z", "addAnswers", "LJavaxJmdnsImplJmDNSImpl;LJavaUtilSet;", "(Ljavax/jmdns/impl/JmDNSImpl;Ljava/util/Set<Ljavax/jmdns/impl/DNSRecord;>;)V", "iAmTheOnlyOne", "LJavaxJmdnsImplJmDNSImpl;", "LJavaxJmdnsImplDNSQuestion;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplDNSQuestion_DNS4Address = { "DNS4Address", "javax.jmdns.impl", ptrTable, methods, NULL, 7, 0xa, 3, 0, 6, -1, -1, -1, -1 };
  return &_JavaxJmdnsImplDNSQuestion_DNS4Address;
}

@end

void JavaxJmdnsImplDNSQuestion_DNS4Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(JavaxJmdnsImplDNSQuestion_DNS4Address *self, NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique) {
  JavaxJmdnsImplDNSQuestion_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(self, name, type, recordClass, unique);
}

JavaxJmdnsImplDNSQuestion_DNS4Address *new_JavaxJmdnsImplDNSQuestion_DNS4Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplDNSQuestion_DNS4Address, initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_, name, type, recordClass, unique)
}

JavaxJmdnsImplDNSQuestion_DNS4Address *create_JavaxJmdnsImplDNSQuestion_DNS4Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplDNSQuestion_DNS4Address, initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_, name, type, recordClass, unique)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplDNSQuestion_DNS4Address)

@implementation JavaxJmdnsImplDNSQuestion_DNS6Address

- (instancetype)initWithNSString:(NSString *)name
withJavaxJmdnsImplConstantsDNSRecordType:(JavaxJmdnsImplConstantsDNSRecordType *)type
withJavaxJmdnsImplConstantsDNSRecordClass:(JavaxJmdnsImplConstantsDNSRecordClass *)recordClass
                     withBoolean:(jboolean)unique {
  JavaxJmdnsImplDNSQuestion_DNS6Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(self, name, type, recordClass, unique);
  return self;
}

- (void)addAnswersWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)jmDNSImpl
                              withJavaUtilSet:(id<JavaUtilSet>)answers {
  JavaxJmdnsImplDNSRecord *answer = [((JavaxJmdnsImplHostInfo *) nil_chk([((JavaxJmdnsImplJmDNSImpl *) nil_chk(jmDNSImpl)) getLocalHost])) getDNSAddressRecordWithJavaxJmdnsImplConstantsDNSRecordType:[self getRecordType] withBoolean:JavaxJmdnsImplConstantsDNSRecordClass_UNIQUE withInt:JavaxJmdnsImplConstantsDNSConstants_DNS_TTL];
  if (answer != nil) {
    [((id<JavaUtilSet>) nil_chk(answers)) addWithId:answer];
  }
}

- (jboolean)iAmTheOnlyOneWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)jmDNSImpl {
  NSString *name = [((NSString *) nil_chk([self getName])) lowercaseString];
  return [((NSString *) nil_chk([((JavaxJmdnsImplHostInfo *) nil_chk([((JavaxJmdnsImplJmDNSImpl *) nil_chk(jmDNSImpl)) getLocalHost])) getName])) isEqual:name] || [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk([jmDNSImpl getServices])) keySet])) containsWithId:name];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withJavaxJmdnsImplConstantsDNSRecordType:withJavaxJmdnsImplConstantsDNSRecordClass:withBoolean:);
  methods[1].selector = @selector(addAnswersWithJavaxJmdnsImplJmDNSImpl:withJavaUtilSet:);
  methods[2].selector = @selector(iAmTheOnlyOneWithJavaxJmdnsImplJmDNSImpl:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;LJavaxJmdnsImplConstantsDNSRecordType;LJavaxJmdnsImplConstantsDNSRecordClass;Z", "addAnswers", "LJavaxJmdnsImplJmDNSImpl;LJavaUtilSet;", "(Ljavax/jmdns/impl/JmDNSImpl;Ljava/util/Set<Ljavax/jmdns/impl/DNSRecord;>;)V", "iAmTheOnlyOne", "LJavaxJmdnsImplJmDNSImpl;", "LJavaxJmdnsImplDNSQuestion;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplDNSQuestion_DNS6Address = { "DNS6Address", "javax.jmdns.impl", ptrTable, methods, NULL, 7, 0xa, 3, 0, 6, -1, -1, -1, -1 };
  return &_JavaxJmdnsImplDNSQuestion_DNS6Address;
}

@end

void JavaxJmdnsImplDNSQuestion_DNS6Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(JavaxJmdnsImplDNSQuestion_DNS6Address *self, NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique) {
  JavaxJmdnsImplDNSQuestion_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(self, name, type, recordClass, unique);
}

JavaxJmdnsImplDNSQuestion_DNS6Address *new_JavaxJmdnsImplDNSQuestion_DNS6Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplDNSQuestion_DNS6Address, initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_, name, type, recordClass, unique)
}

JavaxJmdnsImplDNSQuestion_DNS6Address *create_JavaxJmdnsImplDNSQuestion_DNS6Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplDNSQuestion_DNS6Address, initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_, name, type, recordClass, unique)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplDNSQuestion_DNS6Address)

@implementation JavaxJmdnsImplDNSQuestion_HostInformation

- (instancetype)initWithNSString:(NSString *)name
withJavaxJmdnsImplConstantsDNSRecordType:(JavaxJmdnsImplConstantsDNSRecordType *)type
withJavaxJmdnsImplConstantsDNSRecordClass:(JavaxJmdnsImplConstantsDNSRecordClass *)recordClass
                     withBoolean:(jboolean)unique {
  JavaxJmdnsImplDNSQuestion_HostInformation_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(self, name, type, recordClass, unique);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withJavaxJmdnsImplConstantsDNSRecordType:withJavaxJmdnsImplConstantsDNSRecordClass:withBoolean:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;LJavaxJmdnsImplConstantsDNSRecordType;LJavaxJmdnsImplConstantsDNSRecordClass;Z", "LJavaxJmdnsImplDNSQuestion;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplDNSQuestion_HostInformation = { "HostInformation", "javax.jmdns.impl", ptrTable, methods, NULL, 7, 0xa, 1, 0, 1, -1, -1, -1, -1 };
  return &_JavaxJmdnsImplDNSQuestion_HostInformation;
}

@end

void JavaxJmdnsImplDNSQuestion_HostInformation_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(JavaxJmdnsImplDNSQuestion_HostInformation *self, NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique) {
  JavaxJmdnsImplDNSQuestion_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(self, name, type, recordClass, unique);
}

JavaxJmdnsImplDNSQuestion_HostInformation *new_JavaxJmdnsImplDNSQuestion_HostInformation_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplDNSQuestion_HostInformation, initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_, name, type, recordClass, unique)
}

JavaxJmdnsImplDNSQuestion_HostInformation *create_JavaxJmdnsImplDNSQuestion_HostInformation_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplDNSQuestion_HostInformation, initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_, name, type, recordClass, unique)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplDNSQuestion_HostInformation)

@implementation JavaxJmdnsImplDNSQuestion_Pointer

- (instancetype)initWithNSString:(NSString *)name
withJavaxJmdnsImplConstantsDNSRecordType:(JavaxJmdnsImplConstantsDNSRecordType *)type
withJavaxJmdnsImplConstantsDNSRecordClass:(JavaxJmdnsImplConstantsDNSRecordClass *)recordClass
                     withBoolean:(jboolean)unique {
  JavaxJmdnsImplDNSQuestion_Pointer_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(self, name, type, recordClass, unique);
  return self;
}

- (void)addAnswersWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)jmDNSImpl
                              withJavaUtilSet:(id<JavaUtilSet>)answers {
  for (JavaxJmdnsServiceInfo * __strong serviceInfo in nil_chk([((id<JavaUtilMap>) nil_chk([((JavaxJmdnsImplJmDNSImpl *) nil_chk(jmDNSImpl)) getServices])) values])) {
    [self addAnswersForServiceInfoWithJavaxJmdnsImplJmDNSImpl:jmDNSImpl withJavaUtilSet:answers withJavaxJmdnsImplServiceInfoImpl:(JavaxJmdnsImplServiceInfoImpl *) cast_chk(serviceInfo, [JavaxJmdnsImplServiceInfoImpl class])];
  }
  if ([self isServicesDiscoveryMetaQuery]) {
    for (NSString * __strong serviceType in nil_chk([((id<JavaUtilMap>) nil_chk([jmDNSImpl getServiceTypes])) keySet])) {
      JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry *typeEntry = [((id<JavaUtilMap>) nil_chk([jmDNSImpl getServiceTypes])) getWithId:serviceType];
      [((id<JavaUtilSet>) nil_chk(answers)) addWithId:new_JavaxJmdnsImplDNSRecord_Pointer_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withNSString_(@"_services._dns-sd._udp.local.", JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordClass, CLASS_IN), JavaxJmdnsImplConstantsDNSRecordClass_NOT_UNIQUE, JavaxJmdnsImplConstantsDNSConstants_DNS_TTL, [((JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry *) nil_chk(typeEntry)) getType])];
    }
  }
  else if ([self isReverseLookup]) {
    NSString *ipValue = [((id<JavaUtilMap>) nil_chk([self getQualifiedNameMap])) getWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Instance)];
    if ((ipValue != nil) && ([((NSString *) nil_chk(ipValue)) java_length] > 0)) {
      JavaNetInetAddress *address = [((JavaxJmdnsImplHostInfo *) nil_chk([jmDNSImpl getLocalHost])) getInetAddress];
      NSString *hostIPAddress = (address != nil ? [address getHostAddress] : @"");
      if ([((NSString *) nil_chk(ipValue)) java_equalsIgnoreCase:hostIPAddress]) {
        if ([self isV4ReverseLookup]) {
          [((id<JavaUtilSet>) nil_chk(answers)) addWithId:[((JavaxJmdnsImplHostInfo *) nil_chk([jmDNSImpl getLocalHost])) getDNSReverseAddressRecordWithJavaxJmdnsImplConstantsDNSRecordType:JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordType, TYPE_A) withBoolean:JavaxJmdnsImplConstantsDNSRecordClass_NOT_UNIQUE withInt:JavaxJmdnsImplConstantsDNSConstants_DNS_TTL]];
        }
        if ([self isV6ReverseLookup]) {
          [((id<JavaUtilSet>) nil_chk(answers)) addWithId:[((JavaxJmdnsImplHostInfo *) nil_chk([jmDNSImpl getLocalHost])) getDNSReverseAddressRecordWithJavaxJmdnsImplConstantsDNSRecordType:JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordType, TYPE_AAAA) withBoolean:JavaxJmdnsImplConstantsDNSRecordClass_NOT_UNIQUE withInt:JavaxJmdnsImplConstantsDNSConstants_DNS_TTL]];
        }
      }
    }
  }
  else if ([self isDomainDiscoveryQuery]) {
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withJavaxJmdnsImplConstantsDNSRecordType:withJavaxJmdnsImplConstantsDNSRecordClass:withBoolean:);
  methods[1].selector = @selector(addAnswersWithJavaxJmdnsImplJmDNSImpl:withJavaUtilSet:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;LJavaxJmdnsImplConstantsDNSRecordType;LJavaxJmdnsImplConstantsDNSRecordClass;Z", "addAnswers", "LJavaxJmdnsImplJmDNSImpl;LJavaUtilSet;", "(Ljavax/jmdns/impl/JmDNSImpl;Ljava/util/Set<Ljavax/jmdns/impl/DNSRecord;>;)V", "LJavaxJmdnsImplDNSQuestion;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplDNSQuestion_Pointer = { "Pointer", "javax.jmdns.impl", ptrTable, methods, NULL, 7, 0xa, 2, 0, 4, -1, -1, -1, -1 };
  return &_JavaxJmdnsImplDNSQuestion_Pointer;
}

@end

void JavaxJmdnsImplDNSQuestion_Pointer_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(JavaxJmdnsImplDNSQuestion_Pointer *self, NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique) {
  JavaxJmdnsImplDNSQuestion_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(self, name, type, recordClass, unique);
}

JavaxJmdnsImplDNSQuestion_Pointer *new_JavaxJmdnsImplDNSQuestion_Pointer_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplDNSQuestion_Pointer, initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_, name, type, recordClass, unique)
}

JavaxJmdnsImplDNSQuestion_Pointer *create_JavaxJmdnsImplDNSQuestion_Pointer_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplDNSQuestion_Pointer, initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_, name, type, recordClass, unique)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplDNSQuestion_Pointer)

@implementation JavaxJmdnsImplDNSQuestion_Service

- (instancetype)initWithNSString:(NSString *)name
withJavaxJmdnsImplConstantsDNSRecordType:(JavaxJmdnsImplConstantsDNSRecordType *)type
withJavaxJmdnsImplConstantsDNSRecordClass:(JavaxJmdnsImplConstantsDNSRecordClass *)recordClass
                     withBoolean:(jboolean)unique {
  JavaxJmdnsImplDNSQuestion_Service_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(self, name, type, recordClass, unique);
  return self;
}

- (void)addAnswersWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)jmDNSImpl
                              withJavaUtilSet:(id<JavaUtilSet>)answers {
  NSString *loname = [((NSString *) nil_chk([self getName])) lowercaseString];
  if ([((NSString *) nil_chk([((JavaxJmdnsImplHostInfo *) nil_chk([((JavaxJmdnsImplJmDNSImpl *) nil_chk(jmDNSImpl)) getLocalHost])) getName])) java_equalsIgnoreCase:loname]) {
    [((id<JavaUtilSet>) nil_chk(answers)) addAllWithJavaUtilCollection:[((JavaxJmdnsImplHostInfo *) nil_chk([jmDNSImpl getLocalHost])) answersWithBoolean:[self isUnique] withInt:JavaxJmdnsImplConstantsDNSConstants_DNS_TTL]];
    return;
  }
  if ([((id<JavaUtilMap>) nil_chk([jmDNSImpl getServiceTypes])) containsKeyWithId:loname]) {
    JavaxJmdnsImplDNSQuestion *question = new_JavaxJmdnsImplDNSQuestion_Pointer_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_([self getName], JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordType, TYPE_PTR), [self getRecordClass], [self isUnique]);
    [question addAnswersWithJavaxJmdnsImplJmDNSImpl:jmDNSImpl withJavaUtilSet:answers];
    return;
  }
  [self addAnswersForServiceInfoWithJavaxJmdnsImplJmDNSImpl:jmDNSImpl withJavaUtilSet:answers withJavaxJmdnsImplServiceInfoImpl:(JavaxJmdnsImplServiceInfoImpl *) cast_chk([((id<JavaUtilMap>) nil_chk([jmDNSImpl getServices])) getWithId:loname], [JavaxJmdnsImplServiceInfoImpl class])];
}

- (jboolean)iAmTheOnlyOneWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)jmDNSImpl {
  NSString *name = [((NSString *) nil_chk([self getName])) lowercaseString];
  return [((NSString *) nil_chk([((JavaxJmdnsImplHostInfo *) nil_chk([((JavaxJmdnsImplJmDNSImpl *) nil_chk(jmDNSImpl)) getLocalHost])) getName])) isEqual:name] || [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk([jmDNSImpl getServices])) keySet])) containsWithId:name];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withJavaxJmdnsImplConstantsDNSRecordType:withJavaxJmdnsImplConstantsDNSRecordClass:withBoolean:);
  methods[1].selector = @selector(addAnswersWithJavaxJmdnsImplJmDNSImpl:withJavaUtilSet:);
  methods[2].selector = @selector(iAmTheOnlyOneWithJavaxJmdnsImplJmDNSImpl:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;LJavaxJmdnsImplConstantsDNSRecordType;LJavaxJmdnsImplConstantsDNSRecordClass;Z", "addAnswers", "LJavaxJmdnsImplJmDNSImpl;LJavaUtilSet;", "(Ljavax/jmdns/impl/JmDNSImpl;Ljava/util/Set<Ljavax/jmdns/impl/DNSRecord;>;)V", "iAmTheOnlyOne", "LJavaxJmdnsImplJmDNSImpl;", "LJavaxJmdnsImplDNSQuestion;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplDNSQuestion_Service = { "Service", "javax.jmdns.impl", ptrTable, methods, NULL, 7, 0xa, 3, 0, 6, -1, -1, -1, -1 };
  return &_JavaxJmdnsImplDNSQuestion_Service;
}

@end

void JavaxJmdnsImplDNSQuestion_Service_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(JavaxJmdnsImplDNSQuestion_Service *self, NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique) {
  JavaxJmdnsImplDNSQuestion_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(self, name, type, recordClass, unique);
}

JavaxJmdnsImplDNSQuestion_Service *new_JavaxJmdnsImplDNSQuestion_Service_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplDNSQuestion_Service, initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_, name, type, recordClass, unique)
}

JavaxJmdnsImplDNSQuestion_Service *create_JavaxJmdnsImplDNSQuestion_Service_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplDNSQuestion_Service, initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_, name, type, recordClass, unique)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplDNSQuestion_Service)

@implementation JavaxJmdnsImplDNSQuestion_Text

- (instancetype)initWithNSString:(NSString *)name
withJavaxJmdnsImplConstantsDNSRecordType:(JavaxJmdnsImplConstantsDNSRecordType *)type
withJavaxJmdnsImplConstantsDNSRecordClass:(JavaxJmdnsImplConstantsDNSRecordClass *)recordClass
                     withBoolean:(jboolean)unique {
  JavaxJmdnsImplDNSQuestion_Text_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(self, name, type, recordClass, unique);
  return self;
}

- (void)addAnswersWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)jmDNSImpl
                              withJavaUtilSet:(id<JavaUtilSet>)answers {
  [self addAnswersForServiceInfoWithJavaxJmdnsImplJmDNSImpl:jmDNSImpl withJavaUtilSet:answers withJavaxJmdnsImplServiceInfoImpl:(JavaxJmdnsImplServiceInfoImpl *) cast_chk([((id<JavaUtilMap>) nil_chk([((JavaxJmdnsImplJmDNSImpl *) nil_chk(jmDNSImpl)) getServices])) getWithId:[((NSString *) nil_chk([self getName])) lowercaseString]], [JavaxJmdnsImplServiceInfoImpl class])];
}

- (jboolean)iAmTheOnlyOneWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)jmDNSImpl {
  NSString *name = [((NSString *) nil_chk([self getName])) lowercaseString];
  return [((NSString *) nil_chk([((JavaxJmdnsImplHostInfo *) nil_chk([((JavaxJmdnsImplJmDNSImpl *) nil_chk(jmDNSImpl)) getLocalHost])) getName])) isEqual:name] || [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk([jmDNSImpl getServices])) keySet])) containsWithId:name];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withJavaxJmdnsImplConstantsDNSRecordType:withJavaxJmdnsImplConstantsDNSRecordClass:withBoolean:);
  methods[1].selector = @selector(addAnswersWithJavaxJmdnsImplJmDNSImpl:withJavaUtilSet:);
  methods[2].selector = @selector(iAmTheOnlyOneWithJavaxJmdnsImplJmDNSImpl:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;LJavaxJmdnsImplConstantsDNSRecordType;LJavaxJmdnsImplConstantsDNSRecordClass;Z", "addAnswers", "LJavaxJmdnsImplJmDNSImpl;LJavaUtilSet;", "(Ljavax/jmdns/impl/JmDNSImpl;Ljava/util/Set<Ljavax/jmdns/impl/DNSRecord;>;)V", "iAmTheOnlyOne", "LJavaxJmdnsImplJmDNSImpl;", "LJavaxJmdnsImplDNSQuestion;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplDNSQuestion_Text = { "Text", "javax.jmdns.impl", ptrTable, methods, NULL, 7, 0xa, 3, 0, 6, -1, -1, -1, -1 };
  return &_JavaxJmdnsImplDNSQuestion_Text;
}

@end

void JavaxJmdnsImplDNSQuestion_Text_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(JavaxJmdnsImplDNSQuestion_Text *self, NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique) {
  JavaxJmdnsImplDNSQuestion_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(self, name, type, recordClass, unique);
}

JavaxJmdnsImplDNSQuestion_Text *new_JavaxJmdnsImplDNSQuestion_Text_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplDNSQuestion_Text, initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_, name, type, recordClass, unique)
}

JavaxJmdnsImplDNSQuestion_Text *create_JavaxJmdnsImplDNSQuestion_Text_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplDNSQuestion_Text, initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_, name, type, recordClass, unique)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplDNSQuestion_Text)

@implementation JavaxJmdnsImplDNSQuestion_AllRecords

- (instancetype)initWithNSString:(NSString *)name
withJavaxJmdnsImplConstantsDNSRecordType:(JavaxJmdnsImplConstantsDNSRecordType *)type
withJavaxJmdnsImplConstantsDNSRecordClass:(JavaxJmdnsImplConstantsDNSRecordClass *)recordClass
                     withBoolean:(jboolean)unique {
  JavaxJmdnsImplDNSQuestion_AllRecords_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(self, name, type, recordClass, unique);
  return self;
}

- (jboolean)isSameTypeWithJavaxJmdnsImplDNSEntry:(JavaxJmdnsImplDNSEntry *)entry_ {
  return (entry_ != nil);
}

- (void)addAnswersWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)jmDNSImpl
                              withJavaUtilSet:(id<JavaUtilSet>)answers {
  NSString *loname = [((NSString *) nil_chk([self getName])) lowercaseString];
  if ([((NSString *) nil_chk([((JavaxJmdnsImplHostInfo *) nil_chk([((JavaxJmdnsImplJmDNSImpl *) nil_chk(jmDNSImpl)) getLocalHost])) getName])) java_equalsIgnoreCase:loname]) {
    [((id<JavaUtilSet>) nil_chk(answers)) addAllWithJavaUtilCollection:[((JavaxJmdnsImplHostInfo *) nil_chk([jmDNSImpl getLocalHost])) answersWithBoolean:[self isUnique] withInt:JavaxJmdnsImplConstantsDNSConstants_DNS_TTL]];
    return;
  }
  if ([((id<JavaUtilMap>) nil_chk([jmDNSImpl getServiceTypes])) containsKeyWithId:loname]) {
    JavaxJmdnsImplDNSQuestion *question = new_JavaxJmdnsImplDNSQuestion_Pointer_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_([self getName], JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordType, TYPE_PTR), [self getRecordClass], [self isUnique]);
    [question addAnswersWithJavaxJmdnsImplJmDNSImpl:jmDNSImpl withJavaUtilSet:answers];
    return;
  }
  [self addAnswersForServiceInfoWithJavaxJmdnsImplJmDNSImpl:jmDNSImpl withJavaUtilSet:answers withJavaxJmdnsImplServiceInfoImpl:(JavaxJmdnsImplServiceInfoImpl *) cast_chk([((id<JavaUtilMap>) nil_chk([jmDNSImpl getServices])) getWithId:loname], [JavaxJmdnsImplServiceInfoImpl class])];
}

- (jboolean)iAmTheOnlyOneWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)jmDNSImpl {
  NSString *name = [((NSString *) nil_chk([self getName])) lowercaseString];
  return [((NSString *) nil_chk([((JavaxJmdnsImplHostInfo *) nil_chk([((JavaxJmdnsImplJmDNSImpl *) nil_chk(jmDNSImpl)) getLocalHost])) getName])) isEqual:name] || [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk([jmDNSImpl getServices])) keySet])) containsWithId:name];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withJavaxJmdnsImplConstantsDNSRecordType:withJavaxJmdnsImplConstantsDNSRecordClass:withBoolean:);
  methods[1].selector = @selector(isSameTypeWithJavaxJmdnsImplDNSEntry:);
  methods[2].selector = @selector(addAnswersWithJavaxJmdnsImplJmDNSImpl:withJavaUtilSet:);
  methods[3].selector = @selector(iAmTheOnlyOneWithJavaxJmdnsImplJmDNSImpl:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;LJavaxJmdnsImplConstantsDNSRecordType;LJavaxJmdnsImplConstantsDNSRecordClass;Z", "isSameType", "LJavaxJmdnsImplDNSEntry;", "addAnswers", "LJavaxJmdnsImplJmDNSImpl;LJavaUtilSet;", "(Ljavax/jmdns/impl/JmDNSImpl;Ljava/util/Set<Ljavax/jmdns/impl/DNSRecord;>;)V", "iAmTheOnlyOne", "LJavaxJmdnsImplJmDNSImpl;", "LJavaxJmdnsImplDNSQuestion;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplDNSQuestion_AllRecords = { "AllRecords", "javax.jmdns.impl", ptrTable, methods, NULL, 7, 0xa, 4, 0, 8, -1, -1, -1, -1 };
  return &_JavaxJmdnsImplDNSQuestion_AllRecords;
}

@end

void JavaxJmdnsImplDNSQuestion_AllRecords_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(JavaxJmdnsImplDNSQuestion_AllRecords *self, NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique) {
  JavaxJmdnsImplDNSQuestion_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(self, name, type, recordClass, unique);
}

JavaxJmdnsImplDNSQuestion_AllRecords *new_JavaxJmdnsImplDNSQuestion_AllRecords_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplDNSQuestion_AllRecords, initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_, name, type, recordClass, unique)
}

JavaxJmdnsImplDNSQuestion_AllRecords *create_JavaxJmdnsImplDNSQuestion_AllRecords_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplDNSQuestion_AllRecords, initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_, name, type, recordClass, unique)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplDNSQuestion_AllRecords)
