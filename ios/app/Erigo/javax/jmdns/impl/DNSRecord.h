//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/jmdns/impl/DNSRecord.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxJmdnsImplDNSRecord")
#ifdef RESTRICT_JavaxJmdnsImplDNSRecord
#define INCLUDE_ALL_JavaxJmdnsImplDNSRecord 0
#else
#define INCLUDE_ALL_JavaxJmdnsImplDNSRecord 1
#endif
#undef RESTRICT_JavaxJmdnsImplDNSRecord
#ifdef INCLUDE_JavaxJmdnsImplDNSRecord_HostInformation
#define INCLUDE_JavaxJmdnsImplDNSRecord 1
#endif
#ifdef INCLUDE_JavaxJmdnsImplDNSRecord_Service
#define INCLUDE_JavaxJmdnsImplDNSRecord 1
#endif
#ifdef INCLUDE_JavaxJmdnsImplDNSRecord_Text
#define INCLUDE_JavaxJmdnsImplDNSRecord 1
#endif
#ifdef INCLUDE_JavaxJmdnsImplDNSRecord_Pointer
#define INCLUDE_JavaxJmdnsImplDNSRecord 1
#endif
#ifdef INCLUDE_JavaxJmdnsImplDNSRecord_IPv6Address
#define INCLUDE_JavaxJmdnsImplDNSRecord_Address 1
#endif
#ifdef INCLUDE_JavaxJmdnsImplDNSRecord_IPv4Address
#define INCLUDE_JavaxJmdnsImplDNSRecord_Address 1
#endif
#ifdef INCLUDE_JavaxJmdnsImplDNSRecord_Address
#define INCLUDE_JavaxJmdnsImplDNSRecord 1
#endif

#if !defined (JavaxJmdnsImplDNSRecord_) && (INCLUDE_ALL_JavaxJmdnsImplDNSRecord || defined(INCLUDE_JavaxJmdnsImplDNSRecord))
#define JavaxJmdnsImplDNSRecord_

#define RESTRICT_JavaxJmdnsImplDNSEntry 1
#define INCLUDE_JavaxJmdnsImplDNSEntry 1
#include "javax/jmdns/impl/DNSEntry.h"

@class IOSByteArray;
@class JavaLangStringBuilder;
@class JavaNetInetAddress;
@class JavaxJmdnsImplConstantsDNSRecordClass;
@class JavaxJmdnsImplConstantsDNSRecordType;
@class JavaxJmdnsImplDNSIncoming;
@class JavaxJmdnsImplDNSOutgoing;
@class JavaxJmdnsImplDNSOutgoing_MessageOutputStream;
@class JavaxJmdnsImplJmDNSImpl;
@class JavaxJmdnsServiceEvent;
@class JavaxJmdnsServiceInfo;

@interface JavaxJmdnsImplDNSRecord : JavaxJmdnsImplDNSEntry

#pragma mark Public

- (jboolean)isEqual:(id)other;

- (JavaNetInetAddress *)getRecordSource;

- (JavaxJmdnsServiceEvent *)getServiceEventWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns;

- (JavaxJmdnsServiceInfo *)getServiceInfo;

- (JavaxJmdnsServiceInfo *)getServiceInfoWithBoolean:(jboolean)persistent;

- (jint)getTTL;

- (jboolean)isExpiredWithLong:(jlong)now;

- (jboolean)isSingleValued;

- (jboolean)isStaleWithLong:(jlong)now;

- (void)setRecordSourceWithJavaNetInetAddress:(JavaNetInetAddress *)source;

- (void)setTTLWithInt:(jint)ttl;

#pragma mark Protected

- (void)toStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)aLog;

#pragma mark Package-Private

- (instancetype)initWithNSString:(NSString *)name
withJavaxJmdnsImplConstantsDNSRecordType:(JavaxJmdnsImplConstantsDNSRecordType *)type
withJavaxJmdnsImplConstantsDNSRecordClass:(JavaxJmdnsImplConstantsDNSRecordClass *)recordClass
                     withBoolean:(jboolean)unique
                         withInt:(jint)ttl;

- (JavaxJmdnsImplDNSOutgoing *)addAnswerWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns
                                      withJavaxJmdnsImplDNSIncoming:(JavaxJmdnsImplDNSIncoming *)inArg
                                             withJavaNetInetAddress:(JavaNetInetAddress *)addr
                                                            withInt:(jint)port
                                      withJavaxJmdnsImplDNSOutgoing:(JavaxJmdnsImplDNSOutgoing *)outArg;

- (jlong)getExpirationTimeWithInt:(jint)percent;

- (jint)getRemainingTTLWithLong:(jlong)now;

- (jboolean)handleQueryWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns
                                          withLong:(jlong)expirationTime;

- (jboolean)handleResponseWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns;

- (void)resetTTLWithJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *)other;

- (jboolean)sameTypeWithJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *)other;

- (jboolean)sameValueWithJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *)other;

- (void)setWillExpireSoonWithLong:(jlong)now;

- (jboolean)suppressedByWithJavaxJmdnsImplDNSIncoming:(JavaxJmdnsImplDNSIncoming *)msg;

- (jboolean)suppressedByWithJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *)other;

- (void)writeWithJavaxJmdnsImplDNSOutgoing_MessageOutputStream:(JavaxJmdnsImplDNSOutgoing_MessageOutputStream *)outArg;

@end

J2OBJC_STATIC_INIT(JavaxJmdnsImplDNSRecord)

inline IOSByteArray *JavaxJmdnsImplDNSRecord_get_EMPTY_TXT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSByteArray *JavaxJmdnsImplDNSRecord_EMPTY_TXT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaxJmdnsImplDNSRecord, EMPTY_TXT, IOSByteArray *)

FOUNDATION_EXPORT void JavaxJmdnsImplDNSRecord_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_(JavaxJmdnsImplDNSRecord *self, NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl);

J2OBJC_TYPE_LITERAL_HEADER(JavaxJmdnsImplDNSRecord)

#endif

#if !defined (JavaxJmdnsImplDNSRecord_Address_) && (INCLUDE_ALL_JavaxJmdnsImplDNSRecord || defined(INCLUDE_JavaxJmdnsImplDNSRecord_Address))
#define JavaxJmdnsImplDNSRecord_Address_

@class IOSByteArray;
@class JavaIoDataOutputStream;
@class JavaLangStringBuilder;
@class JavaNetInetAddress;
@class JavaxJmdnsImplConstantsDNSRecordClass;
@class JavaxJmdnsImplConstantsDNSRecordType;
@class JavaxJmdnsImplDNSIncoming;
@class JavaxJmdnsImplDNSOutgoing;
@class JavaxJmdnsImplDNSRecord;
@class JavaxJmdnsImplJmDNSImpl;
@class JavaxJmdnsServiceEvent;
@class JavaxJmdnsServiceInfo;

@interface JavaxJmdnsImplDNSRecord_Address : JavaxJmdnsImplDNSRecord {
 @public
  JavaNetInetAddress *_addr_;
}

#pragma mark Public

- (JavaxJmdnsServiceEvent *)getServiceEventWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns;

- (JavaxJmdnsServiceInfo *)getServiceInfoWithBoolean:(jboolean)persistent;

- (jboolean)isSingleValued;

#pragma mark Protected

- (instancetype)initWithNSString:(NSString *)name
withJavaxJmdnsImplConstantsDNSRecordType:(JavaxJmdnsImplConstantsDNSRecordType *)type
withJavaxJmdnsImplConstantsDNSRecordClass:(JavaxJmdnsImplConstantsDNSRecordClass *)recordClass
                     withBoolean:(jboolean)unique
                         withInt:(jint)ttl
                   withByteArray:(IOSByteArray *)rawAddress;

- (instancetype)initWithNSString:(NSString *)name
withJavaxJmdnsImplConstantsDNSRecordType:(JavaxJmdnsImplConstantsDNSRecordType *)type
withJavaxJmdnsImplConstantsDNSRecordClass:(JavaxJmdnsImplConstantsDNSRecordClass *)recordClass
                     withBoolean:(jboolean)unique
                         withInt:(jint)ttl
          withJavaNetInetAddress:(JavaNetInetAddress *)addr;

- (void)toByteArrayWithJavaIoDataOutputStream:(JavaIoDataOutputStream *)dout;

- (void)toStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)aLog;

#pragma mark Package-Private

- (JavaxJmdnsImplDNSOutgoing *)addAnswerWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns
                                      withJavaxJmdnsImplDNSIncoming:(JavaxJmdnsImplDNSIncoming *)inArg
                                             withJavaNetInetAddress:(JavaNetInetAddress *)addr
                                                            withInt:(jint)port
                                      withJavaxJmdnsImplDNSOutgoing:(JavaxJmdnsImplDNSOutgoing *)outArg;

- (JavaNetInetAddress *)getAddress;

- (jboolean)handleQueryWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns
                                          withLong:(jlong)expirationTime;

- (jboolean)handleResponseWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns;

- (jboolean)sameWithJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *)other;

- (jboolean)sameNameWithJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *)other;

- (jboolean)sameValueWithJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *)other;

@end

J2OBJC_STATIC_INIT(JavaxJmdnsImplDNSRecord_Address)

J2OBJC_FIELD_SETTER(JavaxJmdnsImplDNSRecord_Address, _addr_, JavaNetInetAddress *)

FOUNDATION_EXPORT void JavaxJmdnsImplDNSRecord_Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withJavaNetInetAddress_(JavaxJmdnsImplDNSRecord_Address *self, NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, JavaNetInetAddress *addr);

FOUNDATION_EXPORT void JavaxJmdnsImplDNSRecord_Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withByteArray_(JavaxJmdnsImplDNSRecord_Address *self, NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, IOSByteArray *rawAddress);

J2OBJC_TYPE_LITERAL_HEADER(JavaxJmdnsImplDNSRecord_Address)

#endif

#if !defined (JavaxJmdnsImplDNSRecord_IPv4Address_) && (INCLUDE_ALL_JavaxJmdnsImplDNSRecord || defined(INCLUDE_JavaxJmdnsImplDNSRecord_IPv4Address))
#define JavaxJmdnsImplDNSRecord_IPv4Address_

@class IOSByteArray;
@class JavaNetInetAddress;
@class JavaxJmdnsImplConstantsDNSRecordClass;
@class JavaxJmdnsImplDNSOutgoing_MessageOutputStream;
@class JavaxJmdnsServiceInfo;

@interface JavaxJmdnsImplDNSRecord_IPv4Address : JavaxJmdnsImplDNSRecord_Address

#pragma mark Public

- (JavaxJmdnsServiceInfo *)getServiceInfoWithBoolean:(jboolean)persistent;

#pragma mark Package-Private

- (instancetype)initWithNSString:(NSString *)name
withJavaxJmdnsImplConstantsDNSRecordClass:(JavaxJmdnsImplConstantsDNSRecordClass *)recordClass
                     withBoolean:(jboolean)unique
                         withInt:(jint)ttl
                   withByteArray:(IOSByteArray *)rawAddress;

- (instancetype)initWithNSString:(NSString *)name
withJavaxJmdnsImplConstantsDNSRecordClass:(JavaxJmdnsImplConstantsDNSRecordClass *)recordClass
                     withBoolean:(jboolean)unique
                         withInt:(jint)ttl
          withJavaNetInetAddress:(JavaNetInetAddress *)addr;

- (void)writeWithJavaxJmdnsImplDNSOutgoing_MessageOutputStream:(JavaxJmdnsImplDNSOutgoing_MessageOutputStream *)outArg;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxJmdnsImplDNSRecord_IPv4Address)

FOUNDATION_EXPORT void JavaxJmdnsImplDNSRecord_IPv4Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withJavaNetInetAddress_(JavaxJmdnsImplDNSRecord_IPv4Address *self, NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, JavaNetInetAddress *addr);

FOUNDATION_EXPORT JavaxJmdnsImplDNSRecord_IPv4Address *new_JavaxJmdnsImplDNSRecord_IPv4Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withJavaNetInetAddress_(NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, JavaNetInetAddress *addr) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxJmdnsImplDNSRecord_IPv4Address *create_JavaxJmdnsImplDNSRecord_IPv4Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withJavaNetInetAddress_(NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, JavaNetInetAddress *addr);

FOUNDATION_EXPORT void JavaxJmdnsImplDNSRecord_IPv4Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withByteArray_(JavaxJmdnsImplDNSRecord_IPv4Address *self, NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, IOSByteArray *rawAddress);

FOUNDATION_EXPORT JavaxJmdnsImplDNSRecord_IPv4Address *new_JavaxJmdnsImplDNSRecord_IPv4Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withByteArray_(NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, IOSByteArray *rawAddress) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxJmdnsImplDNSRecord_IPv4Address *create_JavaxJmdnsImplDNSRecord_IPv4Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withByteArray_(NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, IOSByteArray *rawAddress);

J2OBJC_TYPE_LITERAL_HEADER(JavaxJmdnsImplDNSRecord_IPv4Address)

#endif

#if !defined (JavaxJmdnsImplDNSRecord_IPv6Address_) && (INCLUDE_ALL_JavaxJmdnsImplDNSRecord || defined(INCLUDE_JavaxJmdnsImplDNSRecord_IPv6Address))
#define JavaxJmdnsImplDNSRecord_IPv6Address_

@class IOSByteArray;
@class JavaNetInetAddress;
@class JavaxJmdnsImplConstantsDNSRecordClass;
@class JavaxJmdnsImplDNSOutgoing_MessageOutputStream;
@class JavaxJmdnsServiceInfo;

@interface JavaxJmdnsImplDNSRecord_IPv6Address : JavaxJmdnsImplDNSRecord_Address

#pragma mark Public

- (JavaxJmdnsServiceInfo *)getServiceInfoWithBoolean:(jboolean)persistent;

#pragma mark Package-Private

- (instancetype)initWithNSString:(NSString *)name
withJavaxJmdnsImplConstantsDNSRecordClass:(JavaxJmdnsImplConstantsDNSRecordClass *)recordClass
                     withBoolean:(jboolean)unique
                         withInt:(jint)ttl
                   withByteArray:(IOSByteArray *)rawAddress;

- (instancetype)initWithNSString:(NSString *)name
withJavaxJmdnsImplConstantsDNSRecordClass:(JavaxJmdnsImplConstantsDNSRecordClass *)recordClass
                     withBoolean:(jboolean)unique
                         withInt:(jint)ttl
          withJavaNetInetAddress:(JavaNetInetAddress *)addr;

- (void)writeWithJavaxJmdnsImplDNSOutgoing_MessageOutputStream:(JavaxJmdnsImplDNSOutgoing_MessageOutputStream *)outArg;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxJmdnsImplDNSRecord_IPv6Address)

FOUNDATION_EXPORT void JavaxJmdnsImplDNSRecord_IPv6Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withJavaNetInetAddress_(JavaxJmdnsImplDNSRecord_IPv6Address *self, NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, JavaNetInetAddress *addr);

FOUNDATION_EXPORT JavaxJmdnsImplDNSRecord_IPv6Address *new_JavaxJmdnsImplDNSRecord_IPv6Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withJavaNetInetAddress_(NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, JavaNetInetAddress *addr) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxJmdnsImplDNSRecord_IPv6Address *create_JavaxJmdnsImplDNSRecord_IPv6Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withJavaNetInetAddress_(NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, JavaNetInetAddress *addr);

FOUNDATION_EXPORT void JavaxJmdnsImplDNSRecord_IPv6Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withByteArray_(JavaxJmdnsImplDNSRecord_IPv6Address *self, NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, IOSByteArray *rawAddress);

FOUNDATION_EXPORT JavaxJmdnsImplDNSRecord_IPv6Address *new_JavaxJmdnsImplDNSRecord_IPv6Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withByteArray_(NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, IOSByteArray *rawAddress) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxJmdnsImplDNSRecord_IPv6Address *create_JavaxJmdnsImplDNSRecord_IPv6Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withByteArray_(NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, IOSByteArray *rawAddress);

J2OBJC_TYPE_LITERAL_HEADER(JavaxJmdnsImplDNSRecord_IPv6Address)

#endif

#if !defined (JavaxJmdnsImplDNSRecord_Pointer_) && (INCLUDE_ALL_JavaxJmdnsImplDNSRecord || defined(INCLUDE_JavaxJmdnsImplDNSRecord_Pointer))
#define JavaxJmdnsImplDNSRecord_Pointer_

@class JavaLangStringBuilder;
@class JavaNetInetAddress;
@class JavaxJmdnsImplConstantsDNSRecordClass;
@class JavaxJmdnsImplDNSEntry;
@class JavaxJmdnsImplDNSIncoming;
@class JavaxJmdnsImplDNSOutgoing;
@class JavaxJmdnsImplDNSOutgoing_MessageOutputStream;
@class JavaxJmdnsImplDNSRecord;
@class JavaxJmdnsImplJmDNSImpl;
@class JavaxJmdnsServiceEvent;
@class JavaxJmdnsServiceInfo;

@interface JavaxJmdnsImplDNSRecord_Pointer : JavaxJmdnsImplDNSRecord

#pragma mark Public

- (instancetype)initWithNSString:(NSString *)name
withJavaxJmdnsImplConstantsDNSRecordClass:(JavaxJmdnsImplConstantsDNSRecordClass *)recordClass
                     withBoolean:(jboolean)unique
                         withInt:(jint)ttl
                    withNSString:(NSString *)alias;

- (JavaxJmdnsServiceEvent *)getServiceEventWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns;

- (JavaxJmdnsServiceInfo *)getServiceInfoWithBoolean:(jboolean)persistent;

- (jboolean)isSameEntryWithJavaxJmdnsImplDNSEntry:(JavaxJmdnsImplDNSEntry *)entry_;

- (jboolean)isSingleValued;

#pragma mark Protected

- (void)toStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)aLog;

#pragma mark Package-Private

- (JavaxJmdnsImplDNSOutgoing *)addAnswerWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns
                                      withJavaxJmdnsImplDNSIncoming:(JavaxJmdnsImplDNSIncoming *)inArg
                                             withJavaNetInetAddress:(JavaNetInetAddress *)addr
                                                            withInt:(jint)port
                                      withJavaxJmdnsImplDNSOutgoing:(JavaxJmdnsImplDNSOutgoing *)outArg;

- (NSString *)getAlias;

- (jboolean)handleQueryWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns
                                          withLong:(jlong)expirationTime;

- (jboolean)handleResponseWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns;

- (jboolean)sameValueWithJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *)other;

- (void)writeWithJavaxJmdnsImplDNSOutgoing_MessageOutputStream:(JavaxJmdnsImplDNSOutgoing_MessageOutputStream *)outArg;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxJmdnsImplDNSRecord_Pointer)

FOUNDATION_EXPORT void JavaxJmdnsImplDNSRecord_Pointer_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withNSString_(JavaxJmdnsImplDNSRecord_Pointer *self, NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, NSString *alias);

FOUNDATION_EXPORT JavaxJmdnsImplDNSRecord_Pointer *new_JavaxJmdnsImplDNSRecord_Pointer_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withNSString_(NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, NSString *alias) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxJmdnsImplDNSRecord_Pointer *create_JavaxJmdnsImplDNSRecord_Pointer_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withNSString_(NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, NSString *alias);

J2OBJC_TYPE_LITERAL_HEADER(JavaxJmdnsImplDNSRecord_Pointer)

#endif

#if !defined (JavaxJmdnsImplDNSRecord_Text_) && (INCLUDE_ALL_JavaxJmdnsImplDNSRecord || defined(INCLUDE_JavaxJmdnsImplDNSRecord_Text))
#define JavaxJmdnsImplDNSRecord_Text_

@class IOSByteArray;
@class JavaLangStringBuilder;
@class JavaNetInetAddress;
@class JavaxJmdnsImplConstantsDNSRecordClass;
@class JavaxJmdnsImplDNSIncoming;
@class JavaxJmdnsImplDNSOutgoing;
@class JavaxJmdnsImplDNSOutgoing_MessageOutputStream;
@class JavaxJmdnsImplDNSRecord;
@class JavaxJmdnsImplJmDNSImpl;
@class JavaxJmdnsServiceEvent;
@class JavaxJmdnsServiceInfo;

@interface JavaxJmdnsImplDNSRecord_Text : JavaxJmdnsImplDNSRecord

#pragma mark Public

- (instancetype)initWithNSString:(NSString *)name
withJavaxJmdnsImplConstantsDNSRecordClass:(JavaxJmdnsImplConstantsDNSRecordClass *)recordClass
                     withBoolean:(jboolean)unique
                         withInt:(jint)ttl
                   withByteArray:(IOSByteArray *)text;

- (JavaxJmdnsServiceEvent *)getServiceEventWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns;

- (JavaxJmdnsServiceInfo *)getServiceInfoWithBoolean:(jboolean)persistent;

- (jboolean)isSingleValued;

#pragma mark Protected

- (void)toStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)aLog;

#pragma mark Package-Private

- (JavaxJmdnsImplDNSOutgoing *)addAnswerWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns
                                      withJavaxJmdnsImplDNSIncoming:(JavaxJmdnsImplDNSIncoming *)inArg
                                             withJavaNetInetAddress:(JavaNetInetAddress *)addr
                                                            withInt:(jint)port
                                      withJavaxJmdnsImplDNSOutgoing:(JavaxJmdnsImplDNSOutgoing *)outArg;

- (IOSByteArray *)getText;

- (jboolean)handleQueryWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns
                                          withLong:(jlong)expirationTime;

- (jboolean)handleResponseWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns;

- (jboolean)sameValueWithJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *)other;

- (void)writeWithJavaxJmdnsImplDNSOutgoing_MessageOutputStream:(JavaxJmdnsImplDNSOutgoing_MessageOutputStream *)outArg;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxJmdnsImplDNSRecord_Text)

FOUNDATION_EXPORT void JavaxJmdnsImplDNSRecord_Text_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withByteArray_(JavaxJmdnsImplDNSRecord_Text *self, NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, IOSByteArray *text);

FOUNDATION_EXPORT JavaxJmdnsImplDNSRecord_Text *new_JavaxJmdnsImplDNSRecord_Text_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withByteArray_(NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, IOSByteArray *text) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxJmdnsImplDNSRecord_Text *create_JavaxJmdnsImplDNSRecord_Text_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withByteArray_(NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, IOSByteArray *text);

J2OBJC_TYPE_LITERAL_HEADER(JavaxJmdnsImplDNSRecord_Text)

#endif

#if !defined (JavaxJmdnsImplDNSRecord_Service_) && (INCLUDE_ALL_JavaxJmdnsImplDNSRecord || defined(INCLUDE_JavaxJmdnsImplDNSRecord_Service))
#define JavaxJmdnsImplDNSRecord_Service_

@class JavaIoDataOutputStream;
@class JavaLangStringBuilder;
@class JavaNetInetAddress;
@class JavaxJmdnsImplConstantsDNSRecordClass;
@class JavaxJmdnsImplDNSIncoming;
@class JavaxJmdnsImplDNSOutgoing;
@class JavaxJmdnsImplDNSOutgoing_MessageOutputStream;
@class JavaxJmdnsImplDNSRecord;
@class JavaxJmdnsImplJmDNSImpl;
@class JavaxJmdnsServiceEvent;
@class JavaxJmdnsServiceInfo;

@interface JavaxJmdnsImplDNSRecord_Service : JavaxJmdnsImplDNSRecord

#pragma mark Public

- (instancetype)initWithNSString:(NSString *)name
withJavaxJmdnsImplConstantsDNSRecordClass:(JavaxJmdnsImplConstantsDNSRecordClass *)recordClass
                     withBoolean:(jboolean)unique
                         withInt:(jint)ttl
                         withInt:(jint)priority
                         withInt:(jint)weight
                         withInt:(jint)port
                    withNSString:(NSString *)server;

- (jint)getPort;

- (jint)getPriority;

- (JavaxJmdnsServiceEvent *)getServiceEventWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns;

- (JavaxJmdnsServiceInfo *)getServiceInfoWithBoolean:(jboolean)persistent;

- (jint)getWeight;

- (jboolean)isSingleValued;

#pragma mark Protected

- (void)toByteArrayWithJavaIoDataOutputStream:(JavaIoDataOutputStream *)dout;

- (void)toStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)aLog;

#pragma mark Package-Private

- (JavaxJmdnsImplDNSOutgoing *)addAnswerWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns
                                      withJavaxJmdnsImplDNSIncoming:(JavaxJmdnsImplDNSIncoming *)inArg
                                             withJavaNetInetAddress:(JavaNetInetAddress *)addr
                                                            withInt:(jint)port
                                      withJavaxJmdnsImplDNSOutgoing:(JavaxJmdnsImplDNSOutgoing *)outArg;

- (NSString *)getServer;

- (jboolean)handleQueryWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns
                                          withLong:(jlong)expirationTime;

- (jboolean)handleResponseWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns;

- (jboolean)sameValueWithJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *)other;

- (void)writeWithJavaxJmdnsImplDNSOutgoing_MessageOutputStream:(JavaxJmdnsImplDNSOutgoing_MessageOutputStream *)outArg;

@end

J2OBJC_STATIC_INIT(JavaxJmdnsImplDNSRecord_Service)

FOUNDATION_EXPORT void JavaxJmdnsImplDNSRecord_Service_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withInt_withInt_withInt_withNSString_(JavaxJmdnsImplDNSRecord_Service *self, NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, jint priority, jint weight, jint port, NSString *server);

FOUNDATION_EXPORT JavaxJmdnsImplDNSRecord_Service *new_JavaxJmdnsImplDNSRecord_Service_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withInt_withInt_withInt_withNSString_(NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, jint priority, jint weight, jint port, NSString *server) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxJmdnsImplDNSRecord_Service *create_JavaxJmdnsImplDNSRecord_Service_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withInt_withInt_withInt_withNSString_(NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, jint priority, jint weight, jint port, NSString *server);

J2OBJC_TYPE_LITERAL_HEADER(JavaxJmdnsImplDNSRecord_Service)

#endif

#if !defined (JavaxJmdnsImplDNSRecord_HostInformation_) && (INCLUDE_ALL_JavaxJmdnsImplDNSRecord || defined(INCLUDE_JavaxJmdnsImplDNSRecord_HostInformation))
#define JavaxJmdnsImplDNSRecord_HostInformation_

@class JavaLangStringBuilder;
@class JavaNetInetAddress;
@class JavaxJmdnsImplConstantsDNSRecordClass;
@class JavaxJmdnsImplDNSIncoming;
@class JavaxJmdnsImplDNSOutgoing;
@class JavaxJmdnsImplDNSOutgoing_MessageOutputStream;
@class JavaxJmdnsImplDNSRecord;
@class JavaxJmdnsImplJmDNSImpl;
@class JavaxJmdnsServiceEvent;
@class JavaxJmdnsServiceInfo;

@interface JavaxJmdnsImplDNSRecord_HostInformation : JavaxJmdnsImplDNSRecord {
 @public
  NSString *_os_;
  NSString *_cpu_;
}

#pragma mark Public

- (instancetype)initWithNSString:(NSString *)name
withJavaxJmdnsImplConstantsDNSRecordClass:(JavaxJmdnsImplConstantsDNSRecordClass *)recordClass
                     withBoolean:(jboolean)unique
                         withInt:(jint)ttl
                    withNSString:(NSString *)cpu
                    withNSString:(NSString *)os;

- (JavaxJmdnsServiceEvent *)getServiceEventWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns;

- (JavaxJmdnsServiceInfo *)getServiceInfoWithBoolean:(jboolean)persistent;

- (jboolean)isSingleValued;

#pragma mark Protected

- (void)toStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)aLog;

#pragma mark Package-Private

- (JavaxJmdnsImplDNSOutgoing *)addAnswerWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns
                                      withJavaxJmdnsImplDNSIncoming:(JavaxJmdnsImplDNSIncoming *)inArg
                                             withJavaNetInetAddress:(JavaNetInetAddress *)addr
                                                            withInt:(jint)port
                                      withJavaxJmdnsImplDNSOutgoing:(JavaxJmdnsImplDNSOutgoing *)outArg;

- (jboolean)handleQueryWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns
                                          withLong:(jlong)expirationTime;

- (jboolean)handleResponseWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns;

- (jboolean)sameValueWithJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *)other;

- (void)writeWithJavaxJmdnsImplDNSOutgoing_MessageOutputStream:(JavaxJmdnsImplDNSOutgoing_MessageOutputStream *)outArg;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxJmdnsImplDNSRecord_HostInformation)

J2OBJC_FIELD_SETTER(JavaxJmdnsImplDNSRecord_HostInformation, _os_, NSString *)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplDNSRecord_HostInformation, _cpu_, NSString *)

FOUNDATION_EXPORT void JavaxJmdnsImplDNSRecord_HostInformation_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withNSString_withNSString_(JavaxJmdnsImplDNSRecord_HostInformation *self, NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, NSString *cpu, NSString *os);

FOUNDATION_EXPORT JavaxJmdnsImplDNSRecord_HostInformation *new_JavaxJmdnsImplDNSRecord_HostInformation_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withNSString_withNSString_(NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, NSString *cpu, NSString *os) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxJmdnsImplDNSRecord_HostInformation *create_JavaxJmdnsImplDNSRecord_HostInformation_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withNSString_withNSString_(NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, NSString *cpu, NSString *os);

J2OBJC_TYPE_LITERAL_HEADER(JavaxJmdnsImplDNSRecord_HostInformation)

#endif

#pragma pop_macro("INCLUDE_ALL_JavaxJmdnsImplDNSRecord")
