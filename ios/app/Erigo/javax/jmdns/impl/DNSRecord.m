//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/jmdns/impl/DNSRecord.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/DataOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/net/Inet4Address.h"
#include "java/net/Inet6Address.h"
#include "java/net/InetAddress.h"
#include "java/net/UnknownHostException.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "javax/jmdns/ServiceEvent.h"
#include "javax/jmdns/ServiceInfo.h"
#include "javax/jmdns/impl/DNSCache.h"
#include "javax/jmdns/impl/DNSEntry.h"
#include "javax/jmdns/impl/DNSIncoming.h"
#include "javax/jmdns/impl/DNSOutgoing.h"
#include "javax/jmdns/impl/DNSRecord.h"
#include "javax/jmdns/impl/HostInfo.h"
#include "javax/jmdns/impl/JmDNSImpl.h"
#include "javax/jmdns/impl/ServiceEventImpl.h"
#include "javax/jmdns/impl/ServiceInfoImpl.h"
#include "javax/jmdns/impl/constants/DNSConstants.h"
#include "javax/jmdns/impl/constants/DNSRecordClass.h"
#include "javax/jmdns/impl/constants/DNSRecordType.h"

@interface JavaxJmdnsImplDNSRecord () {
 @public
  jint _ttl_;
  jlong _created_;
  JavaNetInetAddress *_source_;
}

@end

J2OBJC_FIELD_SETTER(JavaxJmdnsImplDNSRecord, _source_, JavaNetInetAddress *)

inline JavaUtilLoggingLogger *JavaxJmdnsImplDNSRecord_get_logger();
inline JavaUtilLoggingLogger *JavaxJmdnsImplDNSRecord_set_logger(JavaUtilLoggingLogger *value);
static JavaUtilLoggingLogger *JavaxJmdnsImplDNSRecord_logger;
J2OBJC_STATIC_FIELD_OBJ(JavaxJmdnsImplDNSRecord, logger, JavaUtilLoggingLogger *)

inline JavaUtilLoggingLogger *JavaxJmdnsImplDNSRecord_Address_get_logger1();
inline JavaUtilLoggingLogger *JavaxJmdnsImplDNSRecord_Address_set_logger1(JavaUtilLoggingLogger *value);
static JavaUtilLoggingLogger *JavaxJmdnsImplDNSRecord_Address_logger1;
J2OBJC_STATIC_FIELD_OBJ(JavaxJmdnsImplDNSRecord_Address, logger1, JavaUtilLoggingLogger *)

@interface JavaxJmdnsImplDNSRecord_Pointer () {
 @public
  NSString *_alias_;
}

@end

J2OBJC_FIELD_SETTER(JavaxJmdnsImplDNSRecord_Pointer, _alias_, NSString *)

@interface JavaxJmdnsImplDNSRecord_Text () {
 @public
  IOSByteArray *_text_;
}

@end

J2OBJC_FIELD_SETTER(JavaxJmdnsImplDNSRecord_Text, _text_, IOSByteArray *)

@interface JavaxJmdnsImplDNSRecord_Service () {
 @public
  jint _priority_;
  jint _weight_;
  jint _port_;
  NSString *_server_;
}

@end

J2OBJC_FIELD_SETTER(JavaxJmdnsImplDNSRecord_Service, _server_, NSString *)

inline JavaUtilLoggingLogger *JavaxJmdnsImplDNSRecord_Service_get_logger1();
inline JavaUtilLoggingLogger *JavaxJmdnsImplDNSRecord_Service_set_logger1(JavaUtilLoggingLogger *value);
static JavaUtilLoggingLogger *JavaxJmdnsImplDNSRecord_Service_logger1;
J2OBJC_STATIC_FIELD_OBJ(JavaxJmdnsImplDNSRecord_Service, logger1, JavaUtilLoggingLogger *)

J2OBJC_INITIALIZED_DEFN(JavaxJmdnsImplDNSRecord)

IOSByteArray *JavaxJmdnsImplDNSRecord_EMPTY_TXT;

@implementation JavaxJmdnsImplDNSRecord

- (instancetype)initWithNSString:(NSString *)name
withJavaxJmdnsImplConstantsDNSRecordType:(JavaxJmdnsImplConstantsDNSRecordType *)type
withJavaxJmdnsImplConstantsDNSRecordClass:(JavaxJmdnsImplConstantsDNSRecordClass *)recordClass
                     withBoolean:(jboolean)unique
                         withInt:(jint)ttl {
  JavaxJmdnsImplDNSRecord_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_(self, name, type, recordClass, unique, ttl);
  return self;
}

- (jboolean)isEqual:(id)other {
  return ([other isKindOfClass:[JavaxJmdnsImplDNSRecord class]]) && [super isEqual:other] && [self sameValueWithJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *) cast_chk(other, [JavaxJmdnsImplDNSRecord class])];
}

- (jboolean)sameValueWithJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *)other {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)sameTypeWithJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *)other {
  return [self getRecordType] == [((JavaxJmdnsImplDNSRecord *) nil_chk(other)) getRecordType];
}

- (jboolean)handleQueryWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns
                                          withLong:(jlong)expirationTime {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)handleResponseWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaxJmdnsImplDNSOutgoing *)addAnswerWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns
                                      withJavaxJmdnsImplDNSIncoming:(JavaxJmdnsImplDNSIncoming *)inArg
                                             withJavaNetInetAddress:(JavaNetInetAddress *)addr
                                                            withInt:(jint)port
                                      withJavaxJmdnsImplDNSOutgoing:(JavaxJmdnsImplDNSOutgoing *)outArg {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)suppressedByWithJavaxJmdnsImplDNSIncoming:(JavaxJmdnsImplDNSIncoming *)msg {
  @try {
    for (JavaxJmdnsImplDNSRecord * __strong answer in nil_chk([((JavaxJmdnsImplDNSIncoming *) nil_chk(msg)) getAllAnswers])) {
      if ([self suppressedByWithJavaxJmdnsImplDNSRecord:answer]) {
        return true;
      }
    }
    return false;
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplDNSRecord_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$@$", @"suppressedBy() message ", msg, @" exception ") withNSException:e];
    return false;
  }
}

- (jboolean)suppressedByWithJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *)other {
  if ([self isEqual:other] && (((JavaxJmdnsImplDNSRecord *) nil_chk(other))->_ttl_ > _ttl_ / 2)) {
    return true;
  }
  return false;
}

- (jlong)getExpirationTimeWithInt:(jint)percent {
  return _created_ + (percent * _ttl_ * 10LL);
}

- (jint)getRemainingTTLWithLong:(jlong)now {
  return (jint) JavaLangMath_maxWithLong_withLong_(0, ([self getExpirationTimeWithInt:100] - now) / 1000);
}

- (jboolean)isExpiredWithLong:(jlong)now {
  return [self getExpirationTimeWithInt:100] <= now;
}

- (jboolean)isStaleWithLong:(jlong)now {
  return [self getExpirationTimeWithInt:50] <= now;
}

- (void)resetTTLWithJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *)other {
  _created_ = ((JavaxJmdnsImplDNSRecord *) nil_chk(other))->_created_;
  _ttl_ = other->_ttl_;
}

- (void)setWillExpireSoonWithLong:(jlong)now {
  _created_ = now;
  _ttl_ = JavaxJmdnsImplConstantsDNSConstants_RECORD_EXPIRY_DELAY;
}

- (void)writeWithJavaxJmdnsImplDNSOutgoing_MessageOutputStream:(JavaxJmdnsImplDNSOutgoing_MessageOutputStream *)outArg {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)isSingleValued {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaxJmdnsServiceInfo *)getServiceInfo {
  return [self getServiceInfoWithBoolean:false];
}

- (JavaxJmdnsServiceInfo *)getServiceInfoWithBoolean:(jboolean)persistent {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaxJmdnsServiceEvent *)getServiceEventWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setRecordSourceWithJavaNetInetAddress:(JavaNetInetAddress *)source {
  self->_source_ = source;
}

- (JavaNetInetAddress *)getRecordSource {
  return _source_;
}

- (void)toStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)aLog {
  [super toStringWithJavaLangStringBuilder:aLog];
  (void) [((JavaLangStringBuilder *) nil_chk(aLog)) appendWithNSString:JreStrcat("$ICIC", @" ttl: '", [self getRemainingTTLWithLong:JavaLangSystem_currentTimeMillis()], '/', _ttl_, '\'')];
}

- (void)setTTLWithInt:(jint)ttl {
  self->_ttl_ = ttl;
}

- (jint)getTTL {
  return _ttl_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x400, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 5, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x400, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x400, 8, 9, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplDNSOutgoing;", 0x400, 10, 11, 12, -1, -1, -1 },
    { NULL, "Z", 0x0, 13, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 13, 4, -1, -1, -1, -1 },
    { NULL, "J", 0x0, 15, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 17, 18, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 19, 18, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 20, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 21, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 22, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x400, 23, 24, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsServiceInfo;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsServiceInfo;", 0x401, 25, 26, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsServiceEvent;", 0x401, 27, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 29, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 30, 31, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withJavaxJmdnsImplConstantsDNSRecordType:withJavaxJmdnsImplConstantsDNSRecordClass:withBoolean:withInt:);
  methods[1].selector = @selector(isEqual:);
  methods[2].selector = @selector(sameValueWithJavaxJmdnsImplDNSRecord:);
  methods[3].selector = @selector(sameTypeWithJavaxJmdnsImplDNSRecord:);
  methods[4].selector = @selector(handleQueryWithJavaxJmdnsImplJmDNSImpl:withLong:);
  methods[5].selector = @selector(handleResponseWithJavaxJmdnsImplJmDNSImpl:);
  methods[6].selector = @selector(addAnswerWithJavaxJmdnsImplJmDNSImpl:withJavaxJmdnsImplDNSIncoming:withJavaNetInetAddress:withInt:withJavaxJmdnsImplDNSOutgoing:);
  methods[7].selector = @selector(suppressedByWithJavaxJmdnsImplDNSIncoming:);
  methods[8].selector = @selector(suppressedByWithJavaxJmdnsImplDNSRecord:);
  methods[9].selector = @selector(getExpirationTimeWithInt:);
  methods[10].selector = @selector(getRemainingTTLWithLong:);
  methods[11].selector = @selector(isExpiredWithLong:);
  methods[12].selector = @selector(isStaleWithLong:);
  methods[13].selector = @selector(resetTTLWithJavaxJmdnsImplDNSRecord:);
  methods[14].selector = @selector(setWillExpireSoonWithLong:);
  methods[15].selector = @selector(writeWithJavaxJmdnsImplDNSOutgoing_MessageOutputStream:);
  methods[16].selector = @selector(isSingleValued);
  methods[17].selector = @selector(getServiceInfo);
  methods[18].selector = @selector(getServiceInfoWithBoolean:);
  methods[19].selector = @selector(getServiceEventWithJavaxJmdnsImplJmDNSImpl:);
  methods[20].selector = @selector(setRecordSourceWithJavaNetInetAddress:);
  methods[21].selector = @selector(getRecordSource);
  methods[22].selector = @selector(toStringWithJavaLangStringBuilder:);
  methods[23].selector = @selector(setTTLWithInt:);
  methods[24].selector = @selector(getTTL);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0xa, -1, 33, -1, -1 },
    { "_ttl_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_created_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_source_", "LJavaNetInetAddress;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "EMPTY_TXT", "[B", .constantValue.asLong = 0, 0x19, -1, 34, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LJavaxJmdnsImplConstantsDNSRecordType;LJavaxJmdnsImplConstantsDNSRecordClass;ZI", "equals", "LNSObject;", "sameValue", "LJavaxJmdnsImplDNSRecord;", "sameType", "handleQuery", "LJavaxJmdnsImplJmDNSImpl;J", "handleResponse", "LJavaxJmdnsImplJmDNSImpl;", "addAnswer", "LJavaxJmdnsImplJmDNSImpl;LJavaxJmdnsImplDNSIncoming;LJavaNetInetAddress;ILJavaxJmdnsImplDNSOutgoing;", "LJavaIoIOException;", "suppressedBy", "LJavaxJmdnsImplDNSIncoming;", "getExpirationTime", "I", "getRemainingTTL", "J", "isExpired", "isStale", "resetTTL", "setWillExpireSoon", "write", "LJavaxJmdnsImplDNSOutgoing_MessageOutputStream;", "getServiceInfo", "Z", "getServiceEvent", "setRecordSource", "LJavaNetInetAddress;", "toString", "LJavaLangStringBuilder;", "setTTL", &JavaxJmdnsImplDNSRecord_logger, &JavaxJmdnsImplDNSRecord_EMPTY_TXT, "LJavaxJmdnsImplDNSRecord_IPv4Address;LJavaxJmdnsImplDNSRecord_IPv6Address;LJavaxJmdnsImplDNSRecord_Address;LJavaxJmdnsImplDNSRecord_Pointer;LJavaxJmdnsImplDNSRecord_Text;LJavaxJmdnsImplDNSRecord_Service;LJavaxJmdnsImplDNSRecord_HostInformation;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplDNSRecord = { "DNSRecord", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x401, 25, 5, -1, 35, -1, -1, -1 };
  return &_JavaxJmdnsImplDNSRecord;
}

+ (void)initialize {
  if (self == [JavaxJmdnsImplDNSRecord class]) {
    JavaxJmdnsImplDNSRecord_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([JavaxJmdnsImplDNSRecord_class_() getName]);
    JavaxJmdnsImplDNSRecord_EMPTY_TXT = [IOSByteArray newArrayWithBytes:(jbyte[]){ 0 } count:1];
    J2OBJC_SET_INITIALIZED(JavaxJmdnsImplDNSRecord)
  }
}

@end

void JavaxJmdnsImplDNSRecord_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_(JavaxJmdnsImplDNSRecord *self, NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl) {
  JavaxJmdnsImplDNSEntry_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(self, name, type, recordClass, unique);
  self->_ttl_ = ttl;
  self->_created_ = JavaLangSystem_currentTimeMillis();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplDNSRecord)

J2OBJC_INITIALIZED_DEFN(JavaxJmdnsImplDNSRecord_Address)

@implementation JavaxJmdnsImplDNSRecord_Address

- (instancetype)initWithNSString:(NSString *)name
withJavaxJmdnsImplConstantsDNSRecordType:(JavaxJmdnsImplConstantsDNSRecordType *)type
withJavaxJmdnsImplConstantsDNSRecordClass:(JavaxJmdnsImplConstantsDNSRecordClass *)recordClass
                     withBoolean:(jboolean)unique
                         withInt:(jint)ttl
          withJavaNetInetAddress:(JavaNetInetAddress *)addr {
  JavaxJmdnsImplDNSRecord_Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withJavaNetInetAddress_(self, name, type, recordClass, unique, ttl, addr);
  return self;
}

- (instancetype)initWithNSString:(NSString *)name
withJavaxJmdnsImplConstantsDNSRecordType:(JavaxJmdnsImplConstantsDNSRecordType *)type
withJavaxJmdnsImplConstantsDNSRecordClass:(JavaxJmdnsImplConstantsDNSRecordClass *)recordClass
                     withBoolean:(jboolean)unique
                         withInt:(jint)ttl
                   withByteArray:(IOSByteArray *)rawAddress {
  JavaxJmdnsImplDNSRecord_Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withByteArray_(self, name, type, recordClass, unique, ttl, rawAddress);
  return self;
}

- (jboolean)sameWithJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *)other {
  if (!([other isKindOfClass:[JavaxJmdnsImplDNSRecord_Address class]])) {
    return false;
  }
  return (([self sameNameWithJavaxJmdnsImplDNSRecord:other]) && (([self sameValueWithJavaxJmdnsImplDNSRecord:other])));
}

- (jboolean)sameNameWithJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *)other {
  return [((NSString *) nil_chk([self getName])) java_equalsIgnoreCase:[((JavaxJmdnsImplDNSRecord *) nil_chk(other)) getName]];
}

- (jboolean)sameValueWithJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *)other {
  if (!([other isKindOfClass:[JavaxJmdnsImplDNSRecord_Address class]])) {
    return false;
  }
  JavaxJmdnsImplDNSRecord_Address *address = (JavaxJmdnsImplDNSRecord_Address *) cast_chk(other, [JavaxJmdnsImplDNSRecord_Address class]);
  if (([self getAddress] == nil) && ([((JavaxJmdnsImplDNSRecord_Address *) nil_chk(address)) getAddress] != nil)) {
    return false;
  }
  return [((JavaNetInetAddress *) nil_chk([self getAddress])) isEqual:[((JavaxJmdnsImplDNSRecord_Address *) nil_chk(address)) getAddress]];
}

- (jboolean)isSingleValued {
  return false;
}

- (JavaNetInetAddress *)getAddress {
  return _addr_;
}

- (void)toByteArrayWithJavaIoDataOutputStream:(JavaIoDataOutputStream *)dout {
  [super toByteArrayWithJavaIoDataOutputStream:dout];
  IOSByteArray *buffer = [((JavaNetInetAddress *) nil_chk([self getAddress])) getAddress];
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(buffer))->size_; i++) {
    [((JavaIoDataOutputStream *) nil_chk(dout)) writeByteWithInt:IOSByteArray_Get(buffer, i)];
  }
}

- (jboolean)handleQueryWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns
                                          withLong:(jlong)expirationTime {
  if ([((JavaxJmdnsImplHostInfo *) nil_chk([((JavaxJmdnsImplJmDNSImpl *) nil_chk(dns)) getLocalHost])) conflictWithRecordWithJavaxJmdnsImplDNSRecord_Address:self]) {
    JavaxJmdnsImplDNSRecord_Address *localAddress = [((JavaxJmdnsImplHostInfo *) nil_chk([dns getLocalHost])) getDNSAddressRecordWithJavaxJmdnsImplConstantsDNSRecordType:[self getRecordType] withBoolean:[self isUnique] withInt:JavaxJmdnsImplConstantsDNSConstants_DNS_TTL];
    jint comparison = [self compareToWithJavaxJmdnsImplDNSEntry:localAddress];
    if (comparison == 0) {
      [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplDNSRecord_Address_logger1)) finerWithNSString:@"handleQuery() Ignoring an identical address query"];
      return false;
    }
    [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplDNSRecord_Address_logger1)) finerWithNSString:@"handleQuery() Conflicting query detected."];
    if ([dns isProbing] && comparison > 0) {
      (void) [((JavaxJmdnsImplHostInfo *) nil_chk([dns getLocalHost])) incrementHostName];
      [((JavaxJmdnsImplDNSCache *) nil_chk([dns getCache])) clear];
      for (JavaxJmdnsServiceInfo * __strong serviceInfo in nil_chk([((id<JavaUtilMap>) nil_chk([dns getServices])) values])) {
        JavaxJmdnsImplServiceInfoImpl *info = (JavaxJmdnsImplServiceInfoImpl *) cast_chk(serviceInfo, [JavaxJmdnsImplServiceInfoImpl class]);
        [((JavaxJmdnsImplServiceInfoImpl *) nil_chk(info)) revertState];
      }
    }
    [dns revertState];
    return true;
  }
  return false;
}

- (jboolean)handleResponseWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns {
  if ([((JavaxJmdnsImplHostInfo *) nil_chk([((JavaxJmdnsImplJmDNSImpl *) nil_chk(dns)) getLocalHost])) conflictWithRecordWithJavaxJmdnsImplDNSRecord_Address:self]) {
    [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplDNSRecord_Address_logger1)) finerWithNSString:@"handleResponse() Denial detected"];
    if ([dns isProbing]) {
      (void) [((JavaxJmdnsImplHostInfo *) nil_chk([dns getLocalHost])) incrementHostName];
      [((JavaxJmdnsImplDNSCache *) nil_chk([dns getCache])) clear];
      for (JavaxJmdnsServiceInfo * __strong serviceInfo in nil_chk([((id<JavaUtilMap>) nil_chk([dns getServices])) values])) {
        JavaxJmdnsImplServiceInfoImpl *info = (JavaxJmdnsImplServiceInfoImpl *) cast_chk(serviceInfo, [JavaxJmdnsImplServiceInfoImpl class]);
        [((JavaxJmdnsImplServiceInfoImpl *) nil_chk(info)) revertState];
      }
    }
    [dns revertState];
    return true;
  }
  return false;
}

- (JavaxJmdnsImplDNSOutgoing *)addAnswerWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns
                                      withJavaxJmdnsImplDNSIncoming:(JavaxJmdnsImplDNSIncoming *)inArg
                                             withJavaNetInetAddress:(JavaNetInetAddress *)addr
                                                            withInt:(jint)port
                                      withJavaxJmdnsImplDNSOutgoing:(JavaxJmdnsImplDNSOutgoing *)outArg {
  return outArg;
}

- (JavaxJmdnsServiceInfo *)getServiceInfoWithBoolean:(jboolean)persistent {
  JavaxJmdnsImplServiceInfoImpl *info = new_JavaxJmdnsImplServiceInfoImpl_initWithJavaUtilMap_withInt_withInt_withInt_withBoolean_withByteArray_([self getQualifiedNameMap], 0, 0, 0, persistent, nil);
  return info;
}

- (JavaxJmdnsServiceEvent *)getServiceEventWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns {
  JavaxJmdnsServiceInfo *info = [self getServiceInfoWithBoolean:false];
  [((JavaxJmdnsImplServiceInfoImpl *) nil_chk(((JavaxJmdnsImplServiceInfoImpl *) cast_chk(info, [JavaxJmdnsImplServiceInfoImpl class])))) setDnsWithJavaxJmdnsImplJmDNSImpl:dns];
  return new_JavaxJmdnsImplServiceEventImpl_initWithJavaxJmdnsImplJmDNSImpl_withNSString_withNSString_withJavaxJmdnsServiceInfo_(dns, [((JavaxJmdnsServiceInfo *) nil_chk(info)) getType], [info getName], info);
}

- (void)toStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)aLog {
  [super toStringWithJavaLangStringBuilder:aLog];
  (void) [((JavaLangStringBuilder *) nil_chk(aLog)) appendWithNSString:JreStrcat("$$C", @" address: '", ([self getAddress] != nil ? [((JavaNetInetAddress *) nil_chk([self getAddress])) getHostAddress] : @"null"), '\'')];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 4, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 5, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, 8, -1, -1, -1 },
    { NULL, "Z", 0x0, 9, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 11, 12, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplDNSOutgoing;", 0x0, 13, 14, 8, -1, -1, -1 },
    { NULL, "LJavaxJmdnsServiceInfo;", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsServiceEvent;", 0x1, 17, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 18, 19, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withJavaxJmdnsImplConstantsDNSRecordType:withJavaxJmdnsImplConstantsDNSRecordClass:withBoolean:withInt:withJavaNetInetAddress:);
  methods[1].selector = @selector(initWithNSString:withJavaxJmdnsImplConstantsDNSRecordType:withJavaxJmdnsImplConstantsDNSRecordClass:withBoolean:withInt:withByteArray:);
  methods[2].selector = @selector(sameWithJavaxJmdnsImplDNSRecord:);
  methods[3].selector = @selector(sameNameWithJavaxJmdnsImplDNSRecord:);
  methods[4].selector = @selector(sameValueWithJavaxJmdnsImplDNSRecord:);
  methods[5].selector = @selector(isSingleValued);
  methods[6].selector = @selector(getAddress);
  methods[7].selector = @selector(toByteArrayWithJavaIoDataOutputStream:);
  methods[8].selector = @selector(handleQueryWithJavaxJmdnsImplJmDNSImpl:withLong:);
  methods[9].selector = @selector(handleResponseWithJavaxJmdnsImplJmDNSImpl:);
  methods[10].selector = @selector(addAnswerWithJavaxJmdnsImplJmDNSImpl:withJavaxJmdnsImplDNSIncoming:withJavaNetInetAddress:withInt:withJavaxJmdnsImplDNSOutgoing:);
  methods[11].selector = @selector(getServiceInfoWithBoolean:);
  methods[12].selector = @selector(getServiceEventWithJavaxJmdnsImplJmDNSImpl:);
  methods[13].selector = @selector(toStringWithJavaLangStringBuilder:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger1", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0xa, -1, 20, -1, -1 },
    { "_addr_", "LJavaNetInetAddress;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LJavaxJmdnsImplConstantsDNSRecordType;LJavaxJmdnsImplConstantsDNSRecordClass;ZILJavaNetInetAddress;", "LNSString;LJavaxJmdnsImplConstantsDNSRecordType;LJavaxJmdnsImplConstantsDNSRecordClass;ZI[B", "same", "LJavaxJmdnsImplDNSRecord;", "sameName", "sameValue", "toByteArray", "LJavaIoDataOutputStream;", "LJavaIoIOException;", "handleQuery", "LJavaxJmdnsImplJmDNSImpl;J", "handleResponse", "LJavaxJmdnsImplJmDNSImpl;", "addAnswer", "LJavaxJmdnsImplJmDNSImpl;LJavaxJmdnsImplDNSIncoming;LJavaNetInetAddress;ILJavaxJmdnsImplDNSOutgoing;", "getServiceInfo", "Z", "getServiceEvent", "toString", "LJavaLangStringBuilder;", &JavaxJmdnsImplDNSRecord_Address_logger1 };
  static const J2ObjcClassInfo _JavaxJmdnsImplDNSRecord_Address = { "Address", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x409, 14, 2, 3, -1, -1, -1, -1 };
  return &_JavaxJmdnsImplDNSRecord_Address;
}

+ (void)initialize {
  if (self == [JavaxJmdnsImplDNSRecord_Address class]) {
    JavaxJmdnsImplDNSRecord_Address_logger1 = JavaUtilLoggingLogger_getLoggerWithNSString_([JavaxJmdnsImplDNSRecord_Address_class_() getName]);
    J2OBJC_SET_INITIALIZED(JavaxJmdnsImplDNSRecord_Address)
  }
}

@end

void JavaxJmdnsImplDNSRecord_Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withJavaNetInetAddress_(JavaxJmdnsImplDNSRecord_Address *self, NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, JavaNetInetAddress *addr) {
  JavaxJmdnsImplDNSRecord_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_(self, name, type, recordClass, unique, ttl);
  self->_addr_ = addr;
}

void JavaxJmdnsImplDNSRecord_Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withByteArray_(JavaxJmdnsImplDNSRecord_Address *self, NSString *name, JavaxJmdnsImplConstantsDNSRecordType *type, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, IOSByteArray *rawAddress) {
  JavaxJmdnsImplDNSRecord_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_(self, name, type, recordClass, unique, ttl);
  @try {
    self->_addr_ = JavaNetInetAddress_getByAddressWithByteArray_(rawAddress);
  }
  @catch (JavaNetUnknownHostException *exception) {
    [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplDNSRecord_Address_logger1)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:@"Address() exception " withNSException:exception];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplDNSRecord_Address)

@implementation JavaxJmdnsImplDNSRecord_IPv4Address

- (instancetype)initWithNSString:(NSString *)name
withJavaxJmdnsImplConstantsDNSRecordClass:(JavaxJmdnsImplConstantsDNSRecordClass *)recordClass
                     withBoolean:(jboolean)unique
                         withInt:(jint)ttl
          withJavaNetInetAddress:(JavaNetInetAddress *)addr {
  JavaxJmdnsImplDNSRecord_IPv4Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withJavaNetInetAddress_(self, name, recordClass, unique, ttl, addr);
  return self;
}

- (instancetype)initWithNSString:(NSString *)name
withJavaxJmdnsImplConstantsDNSRecordClass:(JavaxJmdnsImplConstantsDNSRecordClass *)recordClass
                     withBoolean:(jboolean)unique
                         withInt:(jint)ttl
                   withByteArray:(IOSByteArray *)rawAddress {
  JavaxJmdnsImplDNSRecord_IPv4Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withByteArray_(self, name, recordClass, unique, ttl, rawAddress);
  return self;
}

- (void)writeWithJavaxJmdnsImplDNSOutgoing_MessageOutputStream:(JavaxJmdnsImplDNSOutgoing_MessageOutputStream *)outArg {
  if (_addr_ != nil) {
    IOSByteArray *buffer = [_addr_ getAddress];
    if ([_addr_ isKindOfClass:[JavaNetInet4Address class]]) {
    }
    else {
      IOSByteArray *tempbuffer = buffer;
      buffer = [IOSByteArray newArrayWithLength:4];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(tempbuffer, 12, buffer, 0, 4);
    }
    jint length = ((IOSByteArray *) nil_chk(buffer))->size_;
    [((JavaxJmdnsImplDNSOutgoing_MessageOutputStream *) nil_chk(outArg)) writeBytesWithByteArray:buffer withInt:0 withInt:length];
  }
}

- (JavaxJmdnsServiceInfo *)getServiceInfoWithBoolean:(jboolean)persistent {
  JavaxJmdnsImplServiceInfoImpl *info = (JavaxJmdnsImplServiceInfoImpl *) cast_chk([super getServiceInfoWithBoolean:persistent], [JavaxJmdnsImplServiceInfoImpl class]);
  [((JavaxJmdnsImplServiceInfoImpl *) nil_chk(info)) addAddressWithJavaNetInet4Address:(JavaNetInet4Address *) cast_chk(_addr_, [JavaNetInet4Address class])];
  return info;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsServiceInfo;", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withJavaxJmdnsImplConstantsDNSRecordClass:withBoolean:withInt:withJavaNetInetAddress:);
  methods[1].selector = @selector(initWithNSString:withJavaxJmdnsImplConstantsDNSRecordClass:withBoolean:withInt:withByteArray:);
  methods[2].selector = @selector(writeWithJavaxJmdnsImplDNSOutgoing_MessageOutputStream:);
  methods[3].selector = @selector(getServiceInfoWithBoolean:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;LJavaxJmdnsImplConstantsDNSRecordClass;ZILJavaNetInetAddress;", "LNSString;LJavaxJmdnsImplConstantsDNSRecordClass;ZI[B", "write", "LJavaxJmdnsImplDNSOutgoing_MessageOutputStream;", "getServiceInfo", "Z", "LJavaxJmdnsImplDNSRecord;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplDNSRecord_IPv4Address = { "IPv4Address", "javax.jmdns.impl", ptrTable, methods, NULL, 7, 0x9, 4, 0, 6, -1, -1, -1, -1 };
  return &_JavaxJmdnsImplDNSRecord_IPv4Address;
}

@end

void JavaxJmdnsImplDNSRecord_IPv4Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withJavaNetInetAddress_(JavaxJmdnsImplDNSRecord_IPv4Address *self, NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, JavaNetInetAddress *addr) {
  JavaxJmdnsImplDNSRecord_Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withJavaNetInetAddress_(self, name, JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordType, TYPE_A), recordClass, unique, ttl, addr);
}

JavaxJmdnsImplDNSRecord_IPv4Address *new_JavaxJmdnsImplDNSRecord_IPv4Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withJavaNetInetAddress_(NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, JavaNetInetAddress *addr) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplDNSRecord_IPv4Address, initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withJavaNetInetAddress_, name, recordClass, unique, ttl, addr)
}

JavaxJmdnsImplDNSRecord_IPv4Address *create_JavaxJmdnsImplDNSRecord_IPv4Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withJavaNetInetAddress_(NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, JavaNetInetAddress *addr) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplDNSRecord_IPv4Address, initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withJavaNetInetAddress_, name, recordClass, unique, ttl, addr)
}

void JavaxJmdnsImplDNSRecord_IPv4Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withByteArray_(JavaxJmdnsImplDNSRecord_IPv4Address *self, NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, IOSByteArray *rawAddress) {
  JavaxJmdnsImplDNSRecord_Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withByteArray_(self, name, JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordType, TYPE_A), recordClass, unique, ttl, rawAddress);
}

JavaxJmdnsImplDNSRecord_IPv4Address *new_JavaxJmdnsImplDNSRecord_IPv4Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withByteArray_(NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, IOSByteArray *rawAddress) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplDNSRecord_IPv4Address, initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withByteArray_, name, recordClass, unique, ttl, rawAddress)
}

JavaxJmdnsImplDNSRecord_IPv4Address *create_JavaxJmdnsImplDNSRecord_IPv4Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withByteArray_(NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, IOSByteArray *rawAddress) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplDNSRecord_IPv4Address, initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withByteArray_, name, recordClass, unique, ttl, rawAddress)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplDNSRecord_IPv4Address)

@implementation JavaxJmdnsImplDNSRecord_IPv6Address

- (instancetype)initWithNSString:(NSString *)name
withJavaxJmdnsImplConstantsDNSRecordClass:(JavaxJmdnsImplConstantsDNSRecordClass *)recordClass
                     withBoolean:(jboolean)unique
                         withInt:(jint)ttl
          withJavaNetInetAddress:(JavaNetInetAddress *)addr {
  JavaxJmdnsImplDNSRecord_IPv6Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withJavaNetInetAddress_(self, name, recordClass, unique, ttl, addr);
  return self;
}

- (instancetype)initWithNSString:(NSString *)name
withJavaxJmdnsImplConstantsDNSRecordClass:(JavaxJmdnsImplConstantsDNSRecordClass *)recordClass
                     withBoolean:(jboolean)unique
                         withInt:(jint)ttl
                   withByteArray:(IOSByteArray *)rawAddress {
  JavaxJmdnsImplDNSRecord_IPv6Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withByteArray_(self, name, recordClass, unique, ttl, rawAddress);
  return self;
}

- (void)writeWithJavaxJmdnsImplDNSOutgoing_MessageOutputStream:(JavaxJmdnsImplDNSOutgoing_MessageOutputStream *)outArg {
  if (_addr_ != nil) {
    IOSByteArray *buffer = [_addr_ getAddress];
    if ([_addr_ isKindOfClass:[JavaNetInet4Address class]]) {
      IOSByteArray *tempbuffer = buffer;
      buffer = [IOSByteArray newArrayWithLength:16];
      for (jint i = 0; i < 16; i++) {
        if (i < 11) {
          *IOSByteArray_GetRef(buffer, i) = IOSByteArray_Get(nil_chk(tempbuffer), i - 12);
        }
        else {
          *IOSByteArray_GetRef(buffer, i) = 0;
        }
      }
    }
    jint length = ((IOSByteArray *) nil_chk(buffer))->size_;
    [((JavaxJmdnsImplDNSOutgoing_MessageOutputStream *) nil_chk(outArg)) writeBytesWithByteArray:buffer withInt:0 withInt:length];
  }
}

- (JavaxJmdnsServiceInfo *)getServiceInfoWithBoolean:(jboolean)persistent {
  JavaxJmdnsImplServiceInfoImpl *info = (JavaxJmdnsImplServiceInfoImpl *) cast_chk([super getServiceInfoWithBoolean:persistent], [JavaxJmdnsImplServiceInfoImpl class]);
  [((JavaxJmdnsImplServiceInfoImpl *) nil_chk(info)) addAddressWithJavaNetInet6Address:(JavaNetInet6Address *) cast_chk(_addr_, [JavaNetInet6Address class])];
  return info;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsServiceInfo;", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withJavaxJmdnsImplConstantsDNSRecordClass:withBoolean:withInt:withJavaNetInetAddress:);
  methods[1].selector = @selector(initWithNSString:withJavaxJmdnsImplConstantsDNSRecordClass:withBoolean:withInt:withByteArray:);
  methods[2].selector = @selector(writeWithJavaxJmdnsImplDNSOutgoing_MessageOutputStream:);
  methods[3].selector = @selector(getServiceInfoWithBoolean:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;LJavaxJmdnsImplConstantsDNSRecordClass;ZILJavaNetInetAddress;", "LNSString;LJavaxJmdnsImplConstantsDNSRecordClass;ZI[B", "write", "LJavaxJmdnsImplDNSOutgoing_MessageOutputStream;", "getServiceInfo", "Z", "LJavaxJmdnsImplDNSRecord;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplDNSRecord_IPv6Address = { "IPv6Address", "javax.jmdns.impl", ptrTable, methods, NULL, 7, 0x9, 4, 0, 6, -1, -1, -1, -1 };
  return &_JavaxJmdnsImplDNSRecord_IPv6Address;
}

@end

void JavaxJmdnsImplDNSRecord_IPv6Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withJavaNetInetAddress_(JavaxJmdnsImplDNSRecord_IPv6Address *self, NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, JavaNetInetAddress *addr) {
  JavaxJmdnsImplDNSRecord_Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withJavaNetInetAddress_(self, name, JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordType, TYPE_AAAA), recordClass, unique, ttl, addr);
}

JavaxJmdnsImplDNSRecord_IPv6Address *new_JavaxJmdnsImplDNSRecord_IPv6Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withJavaNetInetAddress_(NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, JavaNetInetAddress *addr) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplDNSRecord_IPv6Address, initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withJavaNetInetAddress_, name, recordClass, unique, ttl, addr)
}

JavaxJmdnsImplDNSRecord_IPv6Address *create_JavaxJmdnsImplDNSRecord_IPv6Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withJavaNetInetAddress_(NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, JavaNetInetAddress *addr) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplDNSRecord_IPv6Address, initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withJavaNetInetAddress_, name, recordClass, unique, ttl, addr)
}

void JavaxJmdnsImplDNSRecord_IPv6Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withByteArray_(JavaxJmdnsImplDNSRecord_IPv6Address *self, NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, IOSByteArray *rawAddress) {
  JavaxJmdnsImplDNSRecord_Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withByteArray_(self, name, JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordType, TYPE_AAAA), recordClass, unique, ttl, rawAddress);
}

JavaxJmdnsImplDNSRecord_IPv6Address *new_JavaxJmdnsImplDNSRecord_IPv6Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withByteArray_(NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, IOSByteArray *rawAddress) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplDNSRecord_IPv6Address, initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withByteArray_, name, recordClass, unique, ttl, rawAddress)
}

JavaxJmdnsImplDNSRecord_IPv6Address *create_JavaxJmdnsImplDNSRecord_IPv6Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withByteArray_(NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, IOSByteArray *rawAddress) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplDNSRecord_IPv6Address, initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withByteArray_, name, recordClass, unique, ttl, rawAddress)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplDNSRecord_IPv6Address)

@implementation JavaxJmdnsImplDNSRecord_Pointer

- (instancetype)initWithNSString:(NSString *)name
withJavaxJmdnsImplConstantsDNSRecordClass:(JavaxJmdnsImplConstantsDNSRecordClass *)recordClass
                     withBoolean:(jboolean)unique
                         withInt:(jint)ttl
                    withNSString:(NSString *)alias {
  JavaxJmdnsImplDNSRecord_Pointer_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withNSString_(self, name, recordClass, unique, ttl, alias);
  return self;
}

- (jboolean)isSameEntryWithJavaxJmdnsImplDNSEntry:(JavaxJmdnsImplDNSEntry *)entry_ {
  return [super isSameEntryWithJavaxJmdnsImplDNSEntry:entry_] && ([entry_ isKindOfClass:[JavaxJmdnsImplDNSRecord_Pointer class]]) && [self sameValueWithJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord_Pointer *) cast_chk(entry_, [JavaxJmdnsImplDNSRecord_Pointer class])];
}

- (void)writeWithJavaxJmdnsImplDNSOutgoing_MessageOutputStream:(JavaxJmdnsImplDNSOutgoing_MessageOutputStream *)outArg {
  [((JavaxJmdnsImplDNSOutgoing_MessageOutputStream *) nil_chk(outArg)) writeNameWithNSString:_alias_];
}

- (jboolean)sameValueWithJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *)other {
  if (!([other isKindOfClass:[JavaxJmdnsImplDNSRecord_Pointer class]])) {
    return false;
  }
  JavaxJmdnsImplDNSRecord_Pointer *pointer = (JavaxJmdnsImplDNSRecord_Pointer *) cast_chk(other, [JavaxJmdnsImplDNSRecord_Pointer class]);
  if ((_alias_ == nil) && (((JavaxJmdnsImplDNSRecord_Pointer *) nil_chk(pointer))->_alias_ != nil)) {
    return false;
  }
  return [((NSString *) nil_chk(_alias_)) isEqual:((JavaxJmdnsImplDNSRecord_Pointer *) nil_chk(pointer))->_alias_];
}

- (jboolean)isSingleValued {
  return false;
}

- (jboolean)handleQueryWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns
                                          withLong:(jlong)expirationTime {
  return false;
}

- (jboolean)handleResponseWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns {
  return false;
}

- (NSString *)getAlias {
  return _alias_;
}

- (JavaxJmdnsImplDNSOutgoing *)addAnswerWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns
                                      withJavaxJmdnsImplDNSIncoming:(JavaxJmdnsImplDNSIncoming *)inArg
                                             withJavaNetInetAddress:(JavaNetInetAddress *)addr
                                                            withInt:(jint)port
                                      withJavaxJmdnsImplDNSOutgoing:(JavaxJmdnsImplDNSOutgoing *)outArg {
  return outArg;
}

- (JavaxJmdnsServiceInfo *)getServiceInfoWithBoolean:(jboolean)persistent {
  if ([self isServicesDiscoveryMetaQuery]) {
    id<JavaUtilMap> map = JavaxJmdnsImplServiceInfoImpl_decodeQualifiedNameMapForTypeWithNSString_([self getAlias]);
    return new_JavaxJmdnsImplServiceInfoImpl_initWithJavaUtilMap_withInt_withInt_withInt_withBoolean_withByteArray_(map, 0, 0, 0, persistent, nil);
  }
  else if ([self isReverseLookup]) {
    return new_JavaxJmdnsImplServiceInfoImpl_initWithJavaUtilMap_withInt_withInt_withInt_withBoolean_withByteArray_([self getQualifiedNameMap], 0, 0, 0, persistent, nil);
  }
  else if ([self isDomainDiscoveryQuery]) {
    return new_JavaxJmdnsImplServiceInfoImpl_initWithJavaUtilMap_withInt_withInt_withInt_withBoolean_withByteArray_([self getQualifiedNameMap], 0, 0, 0, persistent, nil);
  }
  id<JavaUtilMap> map = JavaxJmdnsImplServiceInfoImpl_decodeQualifiedNameMapForTypeWithNSString_([self getAlias]);
  (void) [((id<JavaUtilMap>) nil_chk(map)) putWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Subtype) withId:[((id<JavaUtilMap>) nil_chk([self getQualifiedNameMap])) getWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Subtype)]];
  return new_JavaxJmdnsImplServiceInfoImpl_initWithJavaUtilMap_withInt_withInt_withInt_withBoolean_withNSString_(map, 0, 0, 0, persistent, [self getAlias]);
}

- (JavaxJmdnsServiceEvent *)getServiceEventWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns {
  JavaxJmdnsServiceInfo *info = [self getServiceInfoWithBoolean:false];
  [((JavaxJmdnsImplServiceInfoImpl *) nil_chk(((JavaxJmdnsImplServiceInfoImpl *) cast_chk(info, [JavaxJmdnsImplServiceInfoImpl class])))) setDnsWithJavaxJmdnsImplJmDNSImpl:dns];
  NSString *domainName = [((JavaxJmdnsServiceInfo *) nil_chk(info)) getType];
  NSString *serviceName = JavaxJmdnsImplJmDNSImpl_toUnqualifiedNameWithNSString_withNSString_(domainName, [self getAlias]);
  return new_JavaxJmdnsImplServiceEventImpl_initWithJavaxJmdnsImplJmDNSImpl_withNSString_withNSString_withJavaxJmdnsServiceInfo_(dns, domainName, serviceName, info);
}

- (void)toStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)aLog {
  [super toStringWithJavaLangStringBuilder:aLog];
  (void) [((JavaLangStringBuilder *) nil_chk(aLog)) appendWithNSString:JreStrcat("$$C", @" alias: '", (_alias_ != nil ? [_alias_ description] : @"null"), '\'')];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplDNSOutgoing;", 0x0, 11, 12, 13, -1, -1, -1 },
    { NULL, "LJavaxJmdnsServiceInfo;", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsServiceEvent;", 0x1, 16, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 17, 18, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withJavaxJmdnsImplConstantsDNSRecordClass:withBoolean:withInt:withNSString:);
  methods[1].selector = @selector(isSameEntryWithJavaxJmdnsImplDNSEntry:);
  methods[2].selector = @selector(writeWithJavaxJmdnsImplDNSOutgoing_MessageOutputStream:);
  methods[3].selector = @selector(sameValueWithJavaxJmdnsImplDNSRecord:);
  methods[4].selector = @selector(isSingleValued);
  methods[5].selector = @selector(handleQueryWithJavaxJmdnsImplJmDNSImpl:withLong:);
  methods[6].selector = @selector(handleResponseWithJavaxJmdnsImplJmDNSImpl:);
  methods[7].selector = @selector(getAlias);
  methods[8].selector = @selector(addAnswerWithJavaxJmdnsImplJmDNSImpl:withJavaxJmdnsImplDNSIncoming:withJavaNetInetAddress:withInt:withJavaxJmdnsImplDNSOutgoing:);
  methods[9].selector = @selector(getServiceInfoWithBoolean:);
  methods[10].selector = @selector(getServiceEventWithJavaxJmdnsImplJmDNSImpl:);
  methods[11].selector = @selector(toStringWithJavaLangStringBuilder:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_alias_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LJavaxJmdnsImplConstantsDNSRecordClass;ZILNSString;", "isSameEntry", "LJavaxJmdnsImplDNSEntry;", "write", "LJavaxJmdnsImplDNSOutgoing_MessageOutputStream;", "sameValue", "LJavaxJmdnsImplDNSRecord;", "handleQuery", "LJavaxJmdnsImplJmDNSImpl;J", "handleResponse", "LJavaxJmdnsImplJmDNSImpl;", "addAnswer", "LJavaxJmdnsImplJmDNSImpl;LJavaxJmdnsImplDNSIncoming;LJavaNetInetAddress;ILJavaxJmdnsImplDNSOutgoing;", "LJavaIoIOException;", "getServiceInfo", "Z", "getServiceEvent", "toString", "LJavaLangStringBuilder;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplDNSRecord_Pointer = { "Pointer", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x9, 12, 1, 6, -1, -1, -1, -1 };
  return &_JavaxJmdnsImplDNSRecord_Pointer;
}

@end

void JavaxJmdnsImplDNSRecord_Pointer_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withNSString_(JavaxJmdnsImplDNSRecord_Pointer *self, NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, NSString *alias) {
  JavaxJmdnsImplDNSRecord_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_(self, name, JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordType, TYPE_PTR), recordClass, unique, ttl);
  self->_alias_ = alias;
}

JavaxJmdnsImplDNSRecord_Pointer *new_JavaxJmdnsImplDNSRecord_Pointer_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withNSString_(NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, NSString *alias) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplDNSRecord_Pointer, initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withNSString_, name, recordClass, unique, ttl, alias)
}

JavaxJmdnsImplDNSRecord_Pointer *create_JavaxJmdnsImplDNSRecord_Pointer_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withNSString_(NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, NSString *alias) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplDNSRecord_Pointer, initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withNSString_, name, recordClass, unique, ttl, alias)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplDNSRecord_Pointer)

@implementation JavaxJmdnsImplDNSRecord_Text

- (instancetype)initWithNSString:(NSString *)name
withJavaxJmdnsImplConstantsDNSRecordClass:(JavaxJmdnsImplConstantsDNSRecordClass *)recordClass
                     withBoolean:(jboolean)unique
                         withInt:(jint)ttl
                   withByteArray:(IOSByteArray *)text {
  JavaxJmdnsImplDNSRecord_Text_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withByteArray_(self, name, recordClass, unique, ttl, text);
  return self;
}

- (IOSByteArray *)getText {
  return self->_text_;
}

- (void)writeWithJavaxJmdnsImplDNSOutgoing_MessageOutputStream:(JavaxJmdnsImplDNSOutgoing_MessageOutputStream *)outArg {
  [((JavaxJmdnsImplDNSOutgoing_MessageOutputStream *) nil_chk(outArg)) writeBytesWithByteArray:_text_ withInt:0 withInt:((IOSByteArray *) nil_chk(_text_))->size_];
}

- (jboolean)sameValueWithJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *)other {
  if (!([other isKindOfClass:[JavaxJmdnsImplDNSRecord_Text class]])) {
    return false;
  }
  JavaxJmdnsImplDNSRecord_Text *txt = (JavaxJmdnsImplDNSRecord_Text *) cast_chk(other, [JavaxJmdnsImplDNSRecord_Text class]);
  if ((_text_ == nil) && (((JavaxJmdnsImplDNSRecord_Text *) nil_chk(txt))->_text_ != nil)) {
    return false;
  }
  if (((IOSByteArray *) nil_chk(((JavaxJmdnsImplDNSRecord_Text *) nil_chk(txt))->_text_))->size_ != _text_->size_) {
    return false;
  }
  for (jint i = _text_->size_; i-- > 0; ) {
    if (IOSByteArray_Get(txt->_text_, i) != IOSByteArray_Get(_text_, i)) {
      return false;
    }
  }
  return true;
}

- (jboolean)isSingleValued {
  return true;
}

- (jboolean)handleQueryWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns
                                          withLong:(jlong)expirationTime {
  return false;
}

- (jboolean)handleResponseWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns {
  return false;
}

- (JavaxJmdnsImplDNSOutgoing *)addAnswerWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns
                                      withJavaxJmdnsImplDNSIncoming:(JavaxJmdnsImplDNSIncoming *)inArg
                                             withJavaNetInetAddress:(JavaNetInetAddress *)addr
                                                            withInt:(jint)port
                                      withJavaxJmdnsImplDNSOutgoing:(JavaxJmdnsImplDNSOutgoing *)outArg {
  return outArg;
}

- (JavaxJmdnsServiceInfo *)getServiceInfoWithBoolean:(jboolean)persistent {
  return new_JavaxJmdnsImplServiceInfoImpl_initWithJavaUtilMap_withInt_withInt_withInt_withBoolean_withByteArray_([self getQualifiedNameMap], 0, 0, 0, persistent, _text_);
}

- (JavaxJmdnsServiceEvent *)getServiceEventWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns {
  JavaxJmdnsServiceInfo *info = [self getServiceInfoWithBoolean:false];
  [((JavaxJmdnsImplServiceInfoImpl *) nil_chk(((JavaxJmdnsImplServiceInfoImpl *) cast_chk(info, [JavaxJmdnsImplServiceInfoImpl class])))) setDnsWithJavaxJmdnsImplJmDNSImpl:dns];
  return new_JavaxJmdnsImplServiceEventImpl_initWithJavaxJmdnsImplJmDNSImpl_withNSString_withNSString_withJavaxJmdnsServiceInfo_(dns, [((JavaxJmdnsServiceInfo *) nil_chk(info)) getType], [info getName], info);
}

- (void)toStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)aLog {
  [super toStringWithJavaLangStringBuilder:aLog];
  (void) [((JavaLangStringBuilder *) nil_chk(aLog)) appendWithNSString:JreStrcat("$$C", @" text: '", ((((IOSByteArray *) nil_chk(_text_))->size_ > 20) ? JreStrcat("$$", [NSString java_stringWithBytes:_text_ offset:0 length:17], @"...") : [NSString java_stringWithBytes:_text_]), '\'')];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[B", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 7, 8, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplDNSOutgoing;", 0x0, 9, 10, 11, -1, -1, -1 },
    { NULL, "LJavaxJmdnsServiceInfo;", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsServiceEvent;", 0x1, 14, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 15, 16, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withJavaxJmdnsImplConstantsDNSRecordClass:withBoolean:withInt:withByteArray:);
  methods[1].selector = @selector(getText);
  methods[2].selector = @selector(writeWithJavaxJmdnsImplDNSOutgoing_MessageOutputStream:);
  methods[3].selector = @selector(sameValueWithJavaxJmdnsImplDNSRecord:);
  methods[4].selector = @selector(isSingleValued);
  methods[5].selector = @selector(handleQueryWithJavaxJmdnsImplJmDNSImpl:withLong:);
  methods[6].selector = @selector(handleResponseWithJavaxJmdnsImplJmDNSImpl:);
  methods[7].selector = @selector(addAnswerWithJavaxJmdnsImplJmDNSImpl:withJavaxJmdnsImplDNSIncoming:withJavaNetInetAddress:withInt:withJavaxJmdnsImplDNSOutgoing:);
  methods[8].selector = @selector(getServiceInfoWithBoolean:);
  methods[9].selector = @selector(getServiceEventWithJavaxJmdnsImplJmDNSImpl:);
  methods[10].selector = @selector(toStringWithJavaLangStringBuilder:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_text_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LJavaxJmdnsImplConstantsDNSRecordClass;ZI[B", "write", "LJavaxJmdnsImplDNSOutgoing_MessageOutputStream;", "sameValue", "LJavaxJmdnsImplDNSRecord;", "handleQuery", "LJavaxJmdnsImplJmDNSImpl;J", "handleResponse", "LJavaxJmdnsImplJmDNSImpl;", "addAnswer", "LJavaxJmdnsImplJmDNSImpl;LJavaxJmdnsImplDNSIncoming;LJavaNetInetAddress;ILJavaxJmdnsImplDNSOutgoing;", "LJavaIoIOException;", "getServiceInfo", "Z", "getServiceEvent", "toString", "LJavaLangStringBuilder;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplDNSRecord_Text = { "Text", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x9, 11, 1, 4, -1, -1, -1, -1 };
  return &_JavaxJmdnsImplDNSRecord_Text;
}

@end

void JavaxJmdnsImplDNSRecord_Text_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withByteArray_(JavaxJmdnsImplDNSRecord_Text *self, NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, IOSByteArray *text) {
  JavaxJmdnsImplDNSRecord_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_(self, name, JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordType, TYPE_TXT), recordClass, unique, ttl);
  self->_text_ = (text != nil && text->size_ > 0 ? text : JreLoadStatic(JavaxJmdnsImplDNSRecord, EMPTY_TXT));
}

JavaxJmdnsImplDNSRecord_Text *new_JavaxJmdnsImplDNSRecord_Text_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withByteArray_(NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, IOSByteArray *text) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplDNSRecord_Text, initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withByteArray_, name, recordClass, unique, ttl, text)
}

JavaxJmdnsImplDNSRecord_Text *create_JavaxJmdnsImplDNSRecord_Text_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withByteArray_(NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, IOSByteArray *text) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplDNSRecord_Text, initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withByteArray_, name, recordClass, unique, ttl, text)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplDNSRecord_Text)

J2OBJC_INITIALIZED_DEFN(JavaxJmdnsImplDNSRecord_Service)

@implementation JavaxJmdnsImplDNSRecord_Service

- (instancetype)initWithNSString:(NSString *)name
withJavaxJmdnsImplConstantsDNSRecordClass:(JavaxJmdnsImplConstantsDNSRecordClass *)recordClass
                     withBoolean:(jboolean)unique
                         withInt:(jint)ttl
                         withInt:(jint)priority
                         withInt:(jint)weight
                         withInt:(jint)port
                    withNSString:(NSString *)server {
  JavaxJmdnsImplDNSRecord_Service_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withInt_withInt_withInt_withNSString_(self, name, recordClass, unique, ttl, priority, weight, port, server);
  return self;
}

- (void)writeWithJavaxJmdnsImplDNSOutgoing_MessageOutputStream:(JavaxJmdnsImplDNSOutgoing_MessageOutputStream *)outArg {
  [((JavaxJmdnsImplDNSOutgoing_MessageOutputStream *) nil_chk(outArg)) writeShortWithInt:_priority_];
  [outArg writeShortWithInt:_weight_];
  [outArg writeShortWithInt:_port_];
  if (JreLoadStatic(JavaxJmdnsImplDNSIncoming, USE_DOMAIN_NAME_FORMAT_FOR_SRV_TARGET)) {
    [outArg writeNameWithNSString:_server_];
  }
  else {
    [outArg writeUTFWithNSString:_server_ withInt:0 withInt:[((NSString *) nil_chk(_server_)) java_length]];
    [outArg writeByteWithInt:0];
  }
}

- (void)toByteArrayWithJavaIoDataOutputStream:(JavaIoDataOutputStream *)dout {
  [super toByteArrayWithJavaIoDataOutputStream:dout];
  [((JavaIoDataOutputStream *) nil_chk(dout)) writeShortWithInt:_priority_];
  [dout writeShortWithInt:_weight_];
  [dout writeShortWithInt:_port_];
  @try {
    [dout writeWithByteArray:[((NSString *) nil_chk(_server_)) java_getBytesWithCharsetName:@"UTF-8"]];
  }
  @catch (JavaIoUnsupportedEncodingException *exception) {
  }
}

- (NSString *)getServer {
  return _server_;
}

- (jint)getPriority {
  return self->_priority_;
}

- (jint)getWeight {
  return self->_weight_;
}

- (jint)getPort {
  return self->_port_;
}

- (jboolean)sameValueWithJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *)other {
  if (!([other isKindOfClass:[JavaxJmdnsImplDNSRecord_Service class]])) {
    return false;
  }
  JavaxJmdnsImplDNSRecord_Service *s = (JavaxJmdnsImplDNSRecord_Service *) cast_chk(other, [JavaxJmdnsImplDNSRecord_Service class]);
  return (_priority_ == ((JavaxJmdnsImplDNSRecord_Service *) nil_chk(s))->_priority_) && (_weight_ == s->_weight_) && (_port_ == s->_port_) && [((NSString *) nil_chk(_server_)) isEqual:s->_server_];
}

- (jboolean)isSingleValued {
  return true;
}

- (jboolean)handleQueryWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns
                                          withLong:(jlong)expirationTime {
  JavaxJmdnsImplServiceInfoImpl *info = (JavaxJmdnsImplServiceInfoImpl *) cast_chk([((id<JavaUtilMap>) nil_chk([((JavaxJmdnsImplJmDNSImpl *) nil_chk(dns)) getServices])) getWithId:[self getKey]], [JavaxJmdnsImplServiceInfoImpl class]);
  if (info != nil && ([info isAnnouncing] || [info isAnnounced]) && (_port_ != [info getPort] || ![((NSString *) nil_chk(_server_)) java_equalsIgnoreCase:[((JavaxJmdnsImplHostInfo *) nil_chk([dns getLocalHost])) getName]])) {
    [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplDNSRecord_Service_logger1)) finerWithNSString:JreStrcat("$@", @"handleQuery() Conflicting probe detected from: ", [self getRecordSource])];
    JavaxJmdnsImplDNSRecord_Service *localService = new_JavaxJmdnsImplDNSRecord_Service_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withInt_withInt_withInt_withNSString_([info getQualifiedName], JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordClass, CLASS_IN), JavaxJmdnsImplConstantsDNSRecordClass_UNIQUE, JavaxJmdnsImplConstantsDNSConstants_DNS_TTL, [info getPriority], [info getWeight], [info getPort], [((JavaxJmdnsImplHostInfo *) nil_chk([dns getLocalHost])) getName]);
    @try {
      if ([((JavaNetInetAddress *) nil_chk([dns getInterface])) isEqual:[self getRecordSource]]) {
        [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplDNSRecord_Service_logger1)) warningWithNSString:JreStrcat("$$$$", @"Got conflicting probe from ourselves\nincoming: ", [self description], @"\nlocal   : ", [localService description])];
      }
    }
    @catch (JavaIoIOException *e) {
      [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplDNSRecord_Service_logger1)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:@"IOException" withNSException:e];
    }
    jint comparison = [self compareToWithJavaxJmdnsImplDNSEntry:localService];
    if (comparison == 0) {
      [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplDNSRecord_Service_logger1)) finerWithNSString:@"handleQuery() Ignoring a identical service query"];
      return false;
    }
    if ([info isProbing] && comparison > 0) {
      NSString *oldName = [((NSString *) nil_chk([info getQualifiedName])) lowercaseString];
      [info setNameWithNSString:[dns incrementNameWithNSString:[info getName]]];
      (void) [((id<JavaUtilMap>) nil_chk([dns getServices])) removeWithId:oldName];
      (void) [((id<JavaUtilMap>) nil_chk([dns getServices])) putWithId:[((NSString *) nil_chk([info getQualifiedName])) lowercaseString] withId:info];
      [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplDNSRecord_Service_logger1)) finerWithNSString:JreStrcat("$$", @"handleQuery() Lost tie break: new unique name chosen:", [info getName])];
      [info revertState];
    }
    else {
      return false;
    }
    return true;
  }
  return false;
}

- (jboolean)handleResponseWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns {
  JavaxJmdnsImplServiceInfoImpl *info = (JavaxJmdnsImplServiceInfoImpl *) cast_chk([((id<JavaUtilMap>) nil_chk([((JavaxJmdnsImplJmDNSImpl *) nil_chk(dns)) getServices])) getWithId:[self getKey]], [JavaxJmdnsImplServiceInfoImpl class]);
  if (info != nil && (_port_ != [info getPort] || ![((NSString *) nil_chk(_server_)) java_equalsIgnoreCase:[((JavaxJmdnsImplHostInfo *) nil_chk([dns getLocalHost])) getName]])) {
    [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplDNSRecord_Service_logger1)) finerWithNSString:@"handleResponse() Denial detected"];
    if ([info isProbing]) {
      NSString *oldName = [((NSString *) nil_chk([info getQualifiedName])) lowercaseString];
      [info setNameWithNSString:[dns incrementNameWithNSString:[info getName]]];
      (void) [((id<JavaUtilMap>) nil_chk([dns getServices])) removeWithId:oldName];
      (void) [((id<JavaUtilMap>) nil_chk([dns getServices])) putWithId:[((NSString *) nil_chk([info getQualifiedName])) lowercaseString] withId:info];
      [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplDNSRecord_Service_logger1)) finerWithNSString:JreStrcat("$$", @"handleResponse() New unique name chose:", [info getName])];
    }
    [info revertState];
    return true;
  }
  return false;
}

- (JavaxJmdnsImplDNSOutgoing *)addAnswerWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns
                                      withJavaxJmdnsImplDNSIncoming:(JavaxJmdnsImplDNSIncoming *)inArg
                                             withJavaNetInetAddress:(JavaNetInetAddress *)addr
                                                            withInt:(jint)port
                                      withJavaxJmdnsImplDNSOutgoing:(JavaxJmdnsImplDNSOutgoing *)outArg {
  JavaxJmdnsImplServiceInfoImpl *info = (JavaxJmdnsImplServiceInfoImpl *) cast_chk([((id<JavaUtilMap>) nil_chk([((JavaxJmdnsImplJmDNSImpl *) nil_chk(dns)) getServices])) getWithId:[self getKey]], [JavaxJmdnsImplServiceInfoImpl class]);
  if (info != nil) {
    if (self->_port_ == [info getPort] != [((NSString *) nil_chk(_server_)) isEqual:[((JavaxJmdnsImplHostInfo *) nil_chk([dns getLocalHost])) getName]]) {
      return [dns addAnswerWithJavaxJmdnsImplDNSIncoming:inArg withJavaNetInetAddress:addr withInt:port withJavaxJmdnsImplDNSOutgoing:outArg withJavaxJmdnsImplDNSRecord:new_JavaxJmdnsImplDNSRecord_Service_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withInt_withInt_withInt_withNSString_([info getQualifiedName], JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordClass, CLASS_IN), JavaxJmdnsImplConstantsDNSRecordClass_UNIQUE, JavaxJmdnsImplConstantsDNSConstants_DNS_TTL, [info getPriority], [info getWeight], [info getPort], [((JavaxJmdnsImplHostInfo *) nil_chk([dns getLocalHost])) getName])];
    }
  }
  return outArg;
}

- (JavaxJmdnsServiceInfo *)getServiceInfoWithBoolean:(jboolean)persistent {
  return new_JavaxJmdnsImplServiceInfoImpl_initWithJavaUtilMap_withInt_withInt_withInt_withBoolean_withNSString_([self getQualifiedNameMap], _port_, _weight_, _priority_, persistent, _server_);
}

- (JavaxJmdnsServiceEvent *)getServiceEventWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns {
  JavaxJmdnsServiceInfo *info = [self getServiceInfoWithBoolean:false];
  [((JavaxJmdnsImplServiceInfoImpl *) nil_chk(((JavaxJmdnsImplServiceInfoImpl *) cast_chk(info, [JavaxJmdnsImplServiceInfoImpl class])))) setDnsWithJavaxJmdnsImplJmDNSImpl:dns];
  return new_JavaxJmdnsImplServiceEventImpl_initWithJavaxJmdnsImplJmDNSImpl_withNSString_withNSString_withJavaxJmdnsServiceInfo_(dns, [((JavaxJmdnsServiceInfo *) nil_chk(info)) getType], [info getName], info);
}

- (void)toStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)aLog {
  [super toStringWithJavaLangStringBuilder:aLog];
  (void) [((JavaLangStringBuilder *) nil_chk(aLog)) appendWithNSString:JreStrcat("$$CIC", @" server: '", _server_, ':', _port_, '\'')];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 4, 5, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 10, 11, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplDNSOutgoing;", 0x0, 12, 13, 5, -1, -1, -1 },
    { NULL, "LJavaxJmdnsServiceInfo;", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsServiceEvent;", 0x1, 16, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 17, 18, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withJavaxJmdnsImplConstantsDNSRecordClass:withBoolean:withInt:withInt:withInt:withInt:withNSString:);
  methods[1].selector = @selector(writeWithJavaxJmdnsImplDNSOutgoing_MessageOutputStream:);
  methods[2].selector = @selector(toByteArrayWithJavaIoDataOutputStream:);
  methods[3].selector = @selector(getServer);
  methods[4].selector = @selector(getPriority);
  methods[5].selector = @selector(getWeight);
  methods[6].selector = @selector(getPort);
  methods[7].selector = @selector(sameValueWithJavaxJmdnsImplDNSRecord:);
  methods[8].selector = @selector(isSingleValued);
  methods[9].selector = @selector(handleQueryWithJavaxJmdnsImplJmDNSImpl:withLong:);
  methods[10].selector = @selector(handleResponseWithJavaxJmdnsImplJmDNSImpl:);
  methods[11].selector = @selector(addAnswerWithJavaxJmdnsImplJmDNSImpl:withJavaxJmdnsImplDNSIncoming:withJavaNetInetAddress:withInt:withJavaxJmdnsImplDNSOutgoing:);
  methods[12].selector = @selector(getServiceInfoWithBoolean:);
  methods[13].selector = @selector(getServiceEventWithJavaxJmdnsImplJmDNSImpl:);
  methods[14].selector = @selector(toStringWithJavaLangStringBuilder:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger1", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0xa, -1, 19, -1, -1 },
    { "_priority_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_weight_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_port_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_server_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LJavaxJmdnsImplConstantsDNSRecordClass;ZIIIILNSString;", "write", "LJavaxJmdnsImplDNSOutgoing_MessageOutputStream;", "toByteArray", "LJavaIoDataOutputStream;", "LJavaIoIOException;", "sameValue", "LJavaxJmdnsImplDNSRecord;", "handleQuery", "LJavaxJmdnsImplJmDNSImpl;J", "handleResponse", "LJavaxJmdnsImplJmDNSImpl;", "addAnswer", "LJavaxJmdnsImplJmDNSImpl;LJavaxJmdnsImplDNSIncoming;LJavaNetInetAddress;ILJavaxJmdnsImplDNSOutgoing;", "getServiceInfo", "Z", "getServiceEvent", "toString", "LJavaLangStringBuilder;", &JavaxJmdnsImplDNSRecord_Service_logger1 };
  static const J2ObjcClassInfo _JavaxJmdnsImplDNSRecord_Service = { "Service", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x9, 15, 5, 7, -1, -1, -1, -1 };
  return &_JavaxJmdnsImplDNSRecord_Service;
}

+ (void)initialize {
  if (self == [JavaxJmdnsImplDNSRecord_Service class]) {
    JavaxJmdnsImplDNSRecord_Service_logger1 = JavaUtilLoggingLogger_getLoggerWithNSString_([JavaxJmdnsImplDNSRecord_Service_class_() getName]);
    J2OBJC_SET_INITIALIZED(JavaxJmdnsImplDNSRecord_Service)
  }
}

@end

void JavaxJmdnsImplDNSRecord_Service_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withInt_withInt_withInt_withNSString_(JavaxJmdnsImplDNSRecord_Service *self, NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, jint priority, jint weight, jint port, NSString *server) {
  JavaxJmdnsImplDNSRecord_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_(self, name, JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordType, TYPE_SRV), recordClass, unique, ttl);
  self->_priority_ = priority;
  self->_weight_ = weight;
  self->_port_ = port;
  self->_server_ = server;
}

JavaxJmdnsImplDNSRecord_Service *new_JavaxJmdnsImplDNSRecord_Service_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withInt_withInt_withInt_withNSString_(NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, jint priority, jint weight, jint port, NSString *server) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplDNSRecord_Service, initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withInt_withInt_withInt_withNSString_, name, recordClass, unique, ttl, priority, weight, port, server)
}

JavaxJmdnsImplDNSRecord_Service *create_JavaxJmdnsImplDNSRecord_Service_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withInt_withInt_withInt_withNSString_(NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, jint priority, jint weight, jint port, NSString *server) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplDNSRecord_Service, initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withInt_withInt_withInt_withNSString_, name, recordClass, unique, ttl, priority, weight, port, server)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplDNSRecord_Service)

@implementation JavaxJmdnsImplDNSRecord_HostInformation

- (instancetype)initWithNSString:(NSString *)name
withJavaxJmdnsImplConstantsDNSRecordClass:(JavaxJmdnsImplConstantsDNSRecordClass *)recordClass
                     withBoolean:(jboolean)unique
                         withInt:(jint)ttl
                    withNSString:(NSString *)cpu
                    withNSString:(NSString *)os {
  JavaxJmdnsImplDNSRecord_HostInformation_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withNSString_withNSString_(self, name, recordClass, unique, ttl, cpu, os);
  return self;
}

- (JavaxJmdnsImplDNSOutgoing *)addAnswerWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns
                                      withJavaxJmdnsImplDNSIncoming:(JavaxJmdnsImplDNSIncoming *)inArg
                                             withJavaNetInetAddress:(JavaNetInetAddress *)addr
                                                            withInt:(jint)port
                                      withJavaxJmdnsImplDNSOutgoing:(JavaxJmdnsImplDNSOutgoing *)outArg {
  return outArg;
}

- (jboolean)handleQueryWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns
                                          withLong:(jlong)expirationTime {
  return false;
}

- (jboolean)handleResponseWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns {
  return false;
}

- (jboolean)sameValueWithJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *)other {
  if (!([other isKindOfClass:[JavaxJmdnsImplDNSRecord_HostInformation class]])) {
    return false;
  }
  JavaxJmdnsImplDNSRecord_HostInformation *hinfo = (JavaxJmdnsImplDNSRecord_HostInformation *) cast_chk(other, [JavaxJmdnsImplDNSRecord_HostInformation class]);
  if ((_cpu_ == nil) && (((JavaxJmdnsImplDNSRecord_HostInformation *) nil_chk(hinfo))->_cpu_ != nil)) {
    return false;
  }
  if ((_os_ == nil) && (((JavaxJmdnsImplDNSRecord_HostInformation *) nil_chk(hinfo))->_os_ != nil)) {
    return false;
  }
  return [((NSString *) nil_chk(_cpu_)) isEqual:((JavaxJmdnsImplDNSRecord_HostInformation *) nil_chk(hinfo))->_cpu_] && [((NSString *) nil_chk(_os_)) isEqual:hinfo->_os_];
}

- (jboolean)isSingleValued {
  return true;
}

- (void)writeWithJavaxJmdnsImplDNSOutgoing_MessageOutputStream:(JavaxJmdnsImplDNSOutgoing_MessageOutputStream *)outArg {
  NSString *hostInfo = JreStrcat("$C$", _cpu_, ' ', _os_);
  [((JavaxJmdnsImplDNSOutgoing_MessageOutputStream *) nil_chk(outArg)) writeUTFWithNSString:hostInfo withInt:0 withInt:[hostInfo java_length]];
}

- (JavaxJmdnsServiceInfo *)getServiceInfoWithBoolean:(jboolean)persistent {
  id<JavaUtilMap> hinfo = new_JavaUtilHashMap_initWithInt_(2);
  (void) [hinfo putWithId:@"cpu" withId:_cpu_];
  (void) [hinfo putWithId:@"os" withId:_os_];
  return new_JavaxJmdnsImplServiceInfoImpl_initWithJavaUtilMap_withInt_withInt_withInt_withBoolean_withJavaUtilMap_([self getQualifiedNameMap], 0, 0, 0, persistent, hinfo);
}

- (JavaxJmdnsServiceEvent *)getServiceEventWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns {
  JavaxJmdnsServiceInfo *info = [self getServiceInfoWithBoolean:false];
  [((JavaxJmdnsImplServiceInfoImpl *) nil_chk(((JavaxJmdnsImplServiceInfoImpl *) cast_chk(info, [JavaxJmdnsImplServiceInfoImpl class])))) setDnsWithJavaxJmdnsImplJmDNSImpl:dns];
  return new_JavaxJmdnsImplServiceEventImpl_initWithJavaxJmdnsImplJmDNSImpl_withNSString_withNSString_withJavaxJmdnsServiceInfo_(dns, [((JavaxJmdnsServiceInfo *) nil_chk(info)) getType], [info getName], info);
}

- (void)toStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)aLog {
  [super toStringWithJavaLangStringBuilder:aLog];
  (void) [((JavaLangStringBuilder *) nil_chk(aLog)) appendWithNSString:JreStrcat("$$$$C", @" cpu: '", _cpu_, @"' os: '", _os_, '\'')];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplDNSOutgoing;", 0x0, 1, 2, 3, -1, -1, -1 },
    { NULL, "Z", 0x0, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 10, 11, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsServiceInfo;", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsServiceEvent;", 0x1, 14, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 15, 16, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withJavaxJmdnsImplConstantsDNSRecordClass:withBoolean:withInt:withNSString:withNSString:);
  methods[1].selector = @selector(addAnswerWithJavaxJmdnsImplJmDNSImpl:withJavaxJmdnsImplDNSIncoming:withJavaNetInetAddress:withInt:withJavaxJmdnsImplDNSOutgoing:);
  methods[2].selector = @selector(handleQueryWithJavaxJmdnsImplJmDNSImpl:withLong:);
  methods[3].selector = @selector(handleResponseWithJavaxJmdnsImplJmDNSImpl:);
  methods[4].selector = @selector(sameValueWithJavaxJmdnsImplDNSRecord:);
  methods[5].selector = @selector(isSingleValued);
  methods[6].selector = @selector(writeWithJavaxJmdnsImplDNSOutgoing_MessageOutputStream:);
  methods[7].selector = @selector(getServiceInfoWithBoolean:);
  methods[8].selector = @selector(getServiceEventWithJavaxJmdnsImplJmDNSImpl:);
  methods[9].selector = @selector(toStringWithJavaLangStringBuilder:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_os_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "_cpu_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LJavaxJmdnsImplConstantsDNSRecordClass;ZILNSString;LNSString;", "addAnswer", "LJavaxJmdnsImplJmDNSImpl;LJavaxJmdnsImplDNSIncoming;LJavaNetInetAddress;ILJavaxJmdnsImplDNSOutgoing;", "LJavaIoIOException;", "handleQuery", "LJavaxJmdnsImplJmDNSImpl;J", "handleResponse", "LJavaxJmdnsImplJmDNSImpl;", "sameValue", "LJavaxJmdnsImplDNSRecord;", "write", "LJavaxJmdnsImplDNSOutgoing_MessageOutputStream;", "getServiceInfo", "Z", "getServiceEvent", "toString", "LJavaLangStringBuilder;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplDNSRecord_HostInformation = { "HostInformation", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x9, 10, 2, 9, -1, -1, -1, -1 };
  return &_JavaxJmdnsImplDNSRecord_HostInformation;
}

@end

void JavaxJmdnsImplDNSRecord_HostInformation_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withNSString_withNSString_(JavaxJmdnsImplDNSRecord_HostInformation *self, NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, NSString *cpu, NSString *os) {
  JavaxJmdnsImplDNSRecord_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_(self, name, JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordType, TYPE_HINFO), recordClass, unique, ttl);
  self->_cpu_ = cpu;
  self->_os_ = os;
}

JavaxJmdnsImplDNSRecord_HostInformation *new_JavaxJmdnsImplDNSRecord_HostInformation_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withNSString_withNSString_(NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, NSString *cpu, NSString *os) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplDNSRecord_HostInformation, initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withNSString_withNSString_, name, recordClass, unique, ttl, cpu, os)
}

JavaxJmdnsImplDNSRecord_HostInformation *create_JavaxJmdnsImplDNSRecord_HostInformation_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withNSString_withNSString_(NSString *name, JavaxJmdnsImplConstantsDNSRecordClass *recordClass, jboolean unique, jint ttl, NSString *cpu, NSString *os) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplDNSRecord_HostInformation, initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withNSString_withNSString_, name, recordClass, unique, ttl, cpu, os)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplDNSRecord_HostInformation)
