//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/jmdns/impl/DNSTaskStarter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxJmdnsImplDNSTaskStarter")
#ifdef RESTRICT_JavaxJmdnsImplDNSTaskStarter
#define INCLUDE_ALL_JavaxJmdnsImplDNSTaskStarter 0
#else
#define INCLUDE_ALL_JavaxJmdnsImplDNSTaskStarter 1
#endif
#undef RESTRICT_JavaxJmdnsImplDNSTaskStarter
#ifdef INCLUDE_JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl
#define INCLUDE_JavaxJmdnsImplDNSTaskStarter 1
#endif

#if !defined (JavaxJmdnsImplDNSTaskStarter_) && (INCLUDE_ALL_JavaxJmdnsImplDNSTaskStarter || defined(INCLUDE_JavaxJmdnsImplDNSTaskStarter))
#define JavaxJmdnsImplDNSTaskStarter_

@class JavaxJmdnsImplDNSIncoming;
@class JavaxJmdnsImplServiceInfoImpl;

@protocol JavaxJmdnsImplDNSTaskStarter < JavaObject >

- (void)purgeTimer;

- (void)purgeStateTimer;

- (void)cancelTimer;

- (void)cancelStateTimer;

- (void)startProber;

- (void)startAnnouncer;

- (void)startRenewer;

- (void)startCanceler;

- (void)startReaper;

- (void)startServiceInfoResolverWithJavaxJmdnsImplServiceInfoImpl:(JavaxJmdnsImplServiceInfoImpl *)info;

- (void)startTypeResolver;

- (void)startServiceResolverWithNSString:(NSString *)type;

- (void)startResponderWithJavaxJmdnsImplDNSIncoming:(JavaxJmdnsImplDNSIncoming *)inArg
                                            withInt:(jint)port;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxJmdnsImplDNSTaskStarter)

J2OBJC_TYPE_LITERAL_HEADER(JavaxJmdnsImplDNSTaskStarter)

#endif

#if !defined (JavaxJmdnsImplDNSTaskStarter_Factory_) && (INCLUDE_ALL_JavaxJmdnsImplDNSTaskStarter || defined(INCLUDE_JavaxJmdnsImplDNSTaskStarter_Factory))
#define JavaxJmdnsImplDNSTaskStarter_Factory_

@class JavaxJmdnsImplJmDNSImpl;
@protocol JavaxJmdnsImplDNSTaskStarter;
@protocol JavaxJmdnsImplDNSTaskStarter_Factory_ClassDelegate;

@interface JavaxJmdnsImplDNSTaskStarter_Factory : NSObject

#pragma mark Public

+ (id<JavaxJmdnsImplDNSTaskStarter_Factory_ClassDelegate>)classDelegate;

+ (JavaxJmdnsImplDNSTaskStarter_Factory *)getInstance;

- (id<JavaxJmdnsImplDNSTaskStarter>)getStarterWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)jmDNSImpl;

+ (void)setClassDelegateWithJavaxJmdnsImplDNSTaskStarter_Factory_ClassDelegate:(id<JavaxJmdnsImplDNSTaskStarter_Factory_ClassDelegate>)delegate;

#pragma mark Protected

+ (id<JavaxJmdnsImplDNSTaskStarter>)newDNSTaskStarterWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)jmDNSImpl OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_STATIC_INIT(JavaxJmdnsImplDNSTaskStarter_Factory)

FOUNDATION_EXPORT void JavaxJmdnsImplDNSTaskStarter_Factory_setClassDelegateWithJavaxJmdnsImplDNSTaskStarter_Factory_ClassDelegate_(id<JavaxJmdnsImplDNSTaskStarter_Factory_ClassDelegate> delegate);

FOUNDATION_EXPORT id<JavaxJmdnsImplDNSTaskStarter_Factory_ClassDelegate> JavaxJmdnsImplDNSTaskStarter_Factory_classDelegate();

FOUNDATION_EXPORT id<JavaxJmdnsImplDNSTaskStarter> JavaxJmdnsImplDNSTaskStarter_Factory_newDNSTaskStarterWithJavaxJmdnsImplJmDNSImpl_(JavaxJmdnsImplJmDNSImpl *jmDNSImpl);

FOUNDATION_EXPORT JavaxJmdnsImplDNSTaskStarter_Factory *JavaxJmdnsImplDNSTaskStarter_Factory_getInstance();

J2OBJC_TYPE_LITERAL_HEADER(JavaxJmdnsImplDNSTaskStarter_Factory)

#endif

#if !defined (JavaxJmdnsImplDNSTaskStarter_Factory_ClassDelegate_) && (INCLUDE_ALL_JavaxJmdnsImplDNSTaskStarter || defined(INCLUDE_JavaxJmdnsImplDNSTaskStarter_Factory_ClassDelegate))
#define JavaxJmdnsImplDNSTaskStarter_Factory_ClassDelegate_

@class JavaxJmdnsImplJmDNSImpl;
@protocol JavaxJmdnsImplDNSTaskStarter;

@protocol JavaxJmdnsImplDNSTaskStarter_Factory_ClassDelegate < JavaObject >

- (id<JavaxJmdnsImplDNSTaskStarter>)newDNSTaskStarterWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)jmDNSImpl OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxJmdnsImplDNSTaskStarter_Factory_ClassDelegate)

J2OBJC_TYPE_LITERAL_HEADER(JavaxJmdnsImplDNSTaskStarter_Factory_ClassDelegate)

#endif

#if !defined (JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_) && (INCLUDE_ALL_JavaxJmdnsImplDNSTaskStarter || defined(INCLUDE_JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl))
#define JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_

@class JavaxJmdnsImplDNSIncoming;
@class JavaxJmdnsImplJmDNSImpl;
@class JavaxJmdnsImplServiceInfoImpl;

@interface JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl : NSObject < JavaxJmdnsImplDNSTaskStarter >

#pragma mark Public

- (instancetype)initWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)jmDNSImpl;

- (void)cancelStateTimer;

- (void)cancelTimer;

- (void)purgeStateTimer;

- (void)purgeTimer;

- (void)startAnnouncer;

- (void)startCanceler;

- (void)startProber;

- (void)startReaper;

- (void)startRenewer;

- (void)startResponderWithJavaxJmdnsImplDNSIncoming:(JavaxJmdnsImplDNSIncoming *)inArg
                                            withInt:(jint)port;

- (void)startServiceInfoResolverWithJavaxJmdnsImplServiceInfoImpl:(JavaxJmdnsImplServiceInfoImpl *)info;

- (void)startServiceResolverWithNSString:(NSString *)type;

- (void)startTypeResolver;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl)

FOUNDATION_EXPORT void JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_initWithJavaxJmdnsImplJmDNSImpl_(JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl *self, JavaxJmdnsImplJmDNSImpl *jmDNSImpl);

FOUNDATION_EXPORT JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl *new_JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_initWithJavaxJmdnsImplJmDNSImpl_(JavaxJmdnsImplJmDNSImpl *jmDNSImpl) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl *create_JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_initWithJavaxJmdnsImplJmDNSImpl_(JavaxJmdnsImplJmDNSImpl *jmDNSImpl);

J2OBJC_TYPE_LITERAL_HEADER(JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl)

#endif

#if !defined (JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer_) && (INCLUDE_ALL_JavaxJmdnsImplDNSTaskStarter || defined(INCLUDE_JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer))
#define JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer_

#define RESTRICT_JavaUtilTimer 1
#define INCLUDE_JavaUtilTimer 1
#include "java/util/Timer.h"

@class JavaUtilDate;
@class JavaUtilTimerTask;

@interface JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer : JavaUtilTimer

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithBoolean:(jboolean)isDaemon;

- (instancetype)initWithNSString:(NSString *)name;

- (instancetype)initWithNSString:(NSString *)name
                     withBoolean:(jboolean)isDaemon;

- (void)cancel;

- (void)scheduleWithJavaUtilTimerTask:(JavaUtilTimerTask *)task
                     withJavaUtilDate:(JavaUtilDate *)time;

- (void)scheduleWithJavaUtilTimerTask:(JavaUtilTimerTask *)task
                     withJavaUtilDate:(JavaUtilDate *)firstTime
                             withLong:(jlong)period;

- (void)scheduleWithJavaUtilTimerTask:(JavaUtilTimerTask *)task
                             withLong:(jlong)delay;

- (void)scheduleWithJavaUtilTimerTask:(JavaUtilTimerTask *)task
                             withLong:(jlong)delay
                             withLong:(jlong)period;

- (void)scheduleAtFixedRateWithJavaUtilTimerTask:(JavaUtilTimerTask *)task
                                withJavaUtilDate:(JavaUtilDate *)firstTime
                                        withLong:(jlong)period;

- (void)scheduleAtFixedRateWithJavaUtilTimerTask:(JavaUtilTimerTask *)task
                                        withLong:(jlong)delay
                                        withLong:(jlong)period;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer)

FOUNDATION_EXPORT void JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer_init(JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer *self);

FOUNDATION_EXPORT JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer *new_JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer *create_JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer_init();

FOUNDATION_EXPORT void JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer_initWithBoolean_(JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer *self, jboolean isDaemon);

FOUNDATION_EXPORT JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer *new_JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer_initWithBoolean_(jboolean isDaemon) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer *create_JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer_initWithBoolean_(jboolean isDaemon);

FOUNDATION_EXPORT void JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer_initWithNSString_withBoolean_(JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer *self, NSString *name, jboolean isDaemon);

FOUNDATION_EXPORT JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer *new_JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer_initWithNSString_withBoolean_(NSString *name, jboolean isDaemon) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer *create_JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer_initWithNSString_withBoolean_(NSString *name, jboolean isDaemon);

FOUNDATION_EXPORT void JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer_initWithNSString_(JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer *self, NSString *name);

FOUNDATION_EXPORT JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer *new_JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer_initWithNSString_(NSString *name) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer *create_JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer_initWithNSString_(NSString *name);

J2OBJC_TYPE_LITERAL_HEADER(JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer)

#endif

#pragma pop_macro("INCLUDE_ALL_JavaxJmdnsImplDNSTaskStarter")
