//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/jmdns/impl/DNSTaskStarter.java
//

#include "J2ObjC_source.h"
#include "java/util/Date.h"
#include "java/util/Timer.h"
#include "java/util/TimerTask.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/ConcurrentMap.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "javax/jmdns/impl/DNSIncoming.h"
#include "javax/jmdns/impl/DNSTaskStarter.h"
#include "javax/jmdns/impl/JmDNSImpl.h"
#include "javax/jmdns/impl/ServiceInfoImpl.h"
#include "javax/jmdns/impl/tasks/RecordReaper.h"
#include "javax/jmdns/impl/tasks/Responder.h"
#include "javax/jmdns/impl/tasks/resolver/ServiceInfoResolver.h"
#include "javax/jmdns/impl/tasks/resolver/ServiceResolver.h"
#include "javax/jmdns/impl/tasks/resolver/TypeResolver.h"
#include "javax/jmdns/impl/tasks/state/Announcer.h"
#include "javax/jmdns/impl/tasks/state/Canceler.h"
#include "javax/jmdns/impl/tasks/state/Prober.h"
#include "javax/jmdns/impl/tasks/state/Renewer.h"

@interface JavaxJmdnsImplDNSTaskStarter : NSObject

@end

@interface JavaxJmdnsImplDNSTaskStarter_Factory () {
 @public
  id<JavaUtilConcurrentConcurrentMap> _instances_;
}

- (instancetype)init;

@end

J2OBJC_FIELD_SETTER(JavaxJmdnsImplDNSTaskStarter_Factory, _instances_, id<JavaUtilConcurrentConcurrentMap>)

inline JavaxJmdnsImplDNSTaskStarter_Factory *JavaxJmdnsImplDNSTaskStarter_Factory_get__instance();
inline JavaxJmdnsImplDNSTaskStarter_Factory *JavaxJmdnsImplDNSTaskStarter_Factory_set__instance(JavaxJmdnsImplDNSTaskStarter_Factory *value);
static volatile_id JavaxJmdnsImplDNSTaskStarter_Factory__instance;
J2OBJC_STATIC_FIELD_OBJ_VOLATILE(JavaxJmdnsImplDNSTaskStarter_Factory, _instance, JavaxJmdnsImplDNSTaskStarter_Factory *)

inline JavaUtilConcurrentAtomicAtomicReference *JavaxJmdnsImplDNSTaskStarter_Factory_get__databaseClassDelegate();
static JavaUtilConcurrentAtomicAtomicReference *JavaxJmdnsImplDNSTaskStarter_Factory__databaseClassDelegate;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaxJmdnsImplDNSTaskStarter_Factory, _databaseClassDelegate, JavaUtilConcurrentAtomicAtomicReference *)

__attribute__((unused)) static void JavaxJmdnsImplDNSTaskStarter_Factory_init(JavaxJmdnsImplDNSTaskStarter_Factory *self);

__attribute__((unused)) static JavaxJmdnsImplDNSTaskStarter_Factory *new_JavaxJmdnsImplDNSTaskStarter_Factory_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static JavaxJmdnsImplDNSTaskStarter_Factory *create_JavaxJmdnsImplDNSTaskStarter_Factory_init();

@interface JavaxJmdnsImplDNSTaskStarter_Factory_ClassDelegate : NSObject

@end

@interface JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl () {
 @public
  JavaxJmdnsImplJmDNSImpl *_jmDNSImpl_;
  JavaUtilTimer *_timer_;
  JavaUtilTimer *_stateTimer_;
}

@end

J2OBJC_FIELD_SETTER(JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl, _jmDNSImpl_, JavaxJmdnsImplJmDNSImpl *)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl, _timer_, JavaUtilTimer *)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl, _stateTimer_, JavaUtilTimer *)

@interface JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer () {
 @public
  volatile_jboolean _cancelled_;
}

@end

@implementation JavaxJmdnsImplDNSTaskStarter

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(purgeTimer);
  methods[1].selector = @selector(purgeStateTimer);
  methods[2].selector = @selector(cancelTimer);
  methods[3].selector = @selector(cancelStateTimer);
  methods[4].selector = @selector(startProber);
  methods[5].selector = @selector(startAnnouncer);
  methods[6].selector = @selector(startRenewer);
  methods[7].selector = @selector(startCanceler);
  methods[8].selector = @selector(startReaper);
  methods[9].selector = @selector(startServiceInfoResolverWithJavaxJmdnsImplServiceInfoImpl:);
  methods[10].selector = @selector(startTypeResolver);
  methods[11].selector = @selector(startServiceResolverWithNSString:);
  methods[12].selector = @selector(startResponderWithJavaxJmdnsImplDNSIncoming:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "startServiceInfoResolver", "LJavaxJmdnsImplServiceInfoImpl;", "startServiceResolver", "LNSString;", "startResponder", "LJavaxJmdnsImplDNSIncoming;I", "LJavaxJmdnsImplDNSTaskStarter_Factory;LJavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplDNSTaskStarter = { "DNSTaskStarter", "javax.jmdns.impl", ptrTable, methods, NULL, 7, 0x609, 13, 0, -1, 6, -1, -1, -1 };
  return &_JavaxJmdnsImplDNSTaskStarter;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxJmdnsImplDNSTaskStarter)

J2OBJC_INITIALIZED_DEFN(JavaxJmdnsImplDNSTaskStarter_Factory)

@implementation JavaxJmdnsImplDNSTaskStarter_Factory

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  JavaxJmdnsImplDNSTaskStarter_Factory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)setClassDelegateWithJavaxJmdnsImplDNSTaskStarter_Factory_ClassDelegate:(id<JavaxJmdnsImplDNSTaskStarter_Factory_ClassDelegate>)delegate {
  JavaxJmdnsImplDNSTaskStarter_Factory_setClassDelegateWithJavaxJmdnsImplDNSTaskStarter_Factory_ClassDelegate_(delegate);
}

+ (id<JavaxJmdnsImplDNSTaskStarter_Factory_ClassDelegate>)classDelegate {
  return JavaxJmdnsImplDNSTaskStarter_Factory_classDelegate();
}

+ (id<JavaxJmdnsImplDNSTaskStarter>)newDNSTaskStarterWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)jmDNSImpl {
  return JavaxJmdnsImplDNSTaskStarter_Factory_newDNSTaskStarterWithJavaxJmdnsImplJmDNSImpl_(jmDNSImpl);
}

+ (JavaxJmdnsImplDNSTaskStarter_Factory *)getInstance {
  return JavaxJmdnsImplDNSTaskStarter_Factory_getInstance();
}

- (id<JavaxJmdnsImplDNSTaskStarter>)getStarterWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)jmDNSImpl {
  id<JavaxJmdnsImplDNSTaskStarter> starter = [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_instances_)) getWithId:jmDNSImpl];
  if (starter == nil) {
    (void) [_instances_ putIfAbsentWithId:jmDNSImpl withId:JavaxJmdnsImplDNSTaskStarter_Factory_newDNSTaskStarterWithJavaxJmdnsImplJmDNSImpl_(jmDNSImpl)];
    starter = [_instances_ getWithId:jmDNSImpl];
  }
  return starter;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplDNSTaskStarter_Factory_ClassDelegate;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplDNSTaskStarter;", 0xc, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplDNSTaskStarter_Factory;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplDNSTaskStarter;", 0x1, 4, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setClassDelegateWithJavaxJmdnsImplDNSTaskStarter_Factory_ClassDelegate:);
  methods[2].selector = @selector(classDelegate);
  methods[3].selector = @selector(newDNSTaskStarterWithJavaxJmdnsImplJmDNSImpl:);
  methods[4].selector = @selector(getInstance);
  methods[5].selector = @selector(getStarterWithJavaxJmdnsImplJmDNSImpl:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_instance", "LJavaxJmdnsImplDNSTaskStarter_Factory;", .constantValue.asLong = 0, 0x4a, -1, 5, -1, -1 },
    { "_instances_", "LJavaUtilConcurrentConcurrentMap;", .constantValue.asLong = 0, 0x12, -1, -1, 6, -1 },
    { "_databaseClassDelegate", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1a, -1, 7, 8, -1 },
  };
  static const void *ptrTable[] = { "setClassDelegate", "LJavaxJmdnsImplDNSTaskStarter_Factory_ClassDelegate;", "newDNSTaskStarter", "LJavaxJmdnsImplJmDNSImpl;", "getStarter", &JavaxJmdnsImplDNSTaskStarter_Factory__instance, "Ljava/util/concurrent/ConcurrentMap<Ljavax/jmdns/impl/JmDNSImpl;Ljavax/jmdns/impl/DNSTaskStarter;>;", &JavaxJmdnsImplDNSTaskStarter_Factory__databaseClassDelegate, "Ljava/util/concurrent/atomic/AtomicReference<Ljavax/jmdns/impl/DNSTaskStarter$Factory$ClassDelegate;>;", "LJavaxJmdnsImplDNSTaskStarter;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplDNSTaskStarter_Factory = { "Factory", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x19, 6, 3, 9, 1, -1, -1, -1 };
  return &_JavaxJmdnsImplDNSTaskStarter_Factory;
}

+ (void)initialize {
  if (self == [JavaxJmdnsImplDNSTaskStarter_Factory class]) {
    JavaxJmdnsImplDNSTaskStarter_Factory__databaseClassDelegate = new_JavaUtilConcurrentAtomicAtomicReference_init();
    J2OBJC_SET_INITIALIZED(JavaxJmdnsImplDNSTaskStarter_Factory)
  }
}

@end

void JavaxJmdnsImplDNSTaskStarter_Factory_init(JavaxJmdnsImplDNSTaskStarter_Factory *self) {
  NSObject_init(self);
  self->_instances_ = new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(20);
}

JavaxJmdnsImplDNSTaskStarter_Factory *new_JavaxJmdnsImplDNSTaskStarter_Factory_init() {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplDNSTaskStarter_Factory, init)
}

JavaxJmdnsImplDNSTaskStarter_Factory *create_JavaxJmdnsImplDNSTaskStarter_Factory_init() {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplDNSTaskStarter_Factory, init)
}

void JavaxJmdnsImplDNSTaskStarter_Factory_setClassDelegateWithJavaxJmdnsImplDNSTaskStarter_Factory_ClassDelegate_(id<JavaxJmdnsImplDNSTaskStarter_Factory_ClassDelegate> delegate) {
  JavaxJmdnsImplDNSTaskStarter_Factory_initialize();
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(JavaxJmdnsImplDNSTaskStarter_Factory__databaseClassDelegate)) setWithId:delegate];
}

id<JavaxJmdnsImplDNSTaskStarter_Factory_ClassDelegate> JavaxJmdnsImplDNSTaskStarter_Factory_classDelegate() {
  JavaxJmdnsImplDNSTaskStarter_Factory_initialize();
  return [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(JavaxJmdnsImplDNSTaskStarter_Factory__databaseClassDelegate)) get];
}

id<JavaxJmdnsImplDNSTaskStarter> JavaxJmdnsImplDNSTaskStarter_Factory_newDNSTaskStarterWithJavaxJmdnsImplJmDNSImpl_(JavaxJmdnsImplJmDNSImpl *jmDNSImpl) {
  JavaxJmdnsImplDNSTaskStarter_Factory_initialize();
  id<JavaxJmdnsImplDNSTaskStarter> instance = nil;
  id<JavaxJmdnsImplDNSTaskStarter_Factory_ClassDelegate> delegate = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(JavaxJmdnsImplDNSTaskStarter_Factory__databaseClassDelegate)) get];
  if (delegate != nil) {
    instance = [delegate newDNSTaskStarterWithJavaxJmdnsImplJmDNSImpl:jmDNSImpl];
  }
  return (instance != nil ? instance : new_JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_initWithJavaxJmdnsImplJmDNSImpl_(jmDNSImpl));
}

JavaxJmdnsImplDNSTaskStarter_Factory *JavaxJmdnsImplDNSTaskStarter_Factory_getInstance() {
  JavaxJmdnsImplDNSTaskStarter_Factory_initialize();
  if (JreLoadVolatileId(&JavaxJmdnsImplDNSTaskStarter_Factory__instance) == nil) {
    @synchronized(JavaxJmdnsImplDNSTaskStarter_Factory_class_()) {
      if (JreLoadVolatileId(&JavaxJmdnsImplDNSTaskStarter_Factory__instance) == nil) {
        (void) JreVolatileStrongAssign(&JavaxJmdnsImplDNSTaskStarter_Factory__instance, new_JavaxJmdnsImplDNSTaskStarter_Factory_init());
      }
    }
  }
  return JreLoadVolatileId(&JavaxJmdnsImplDNSTaskStarter_Factory__instance);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplDNSTaskStarter_Factory)

@implementation JavaxJmdnsImplDNSTaskStarter_Factory_ClassDelegate

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaxJmdnsImplDNSTaskStarter;", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(newDNSTaskStarterWithJavaxJmdnsImplJmDNSImpl:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "newDNSTaskStarter", "LJavaxJmdnsImplJmDNSImpl;", "LJavaxJmdnsImplDNSTaskStarter_Factory;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplDNSTaskStarter_Factory_ClassDelegate = { "ClassDelegate", "javax.jmdns.impl", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_JavaxJmdnsImplDNSTaskStarter_Factory_ClassDelegate;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxJmdnsImplDNSTaskStarter_Factory_ClassDelegate)

@implementation JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl

- (instancetype)initWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)jmDNSImpl {
  JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_initWithJavaxJmdnsImplJmDNSImpl_(self, jmDNSImpl);
  return self;
}

- (void)purgeTimer {
  [((JavaUtilTimer *) nil_chk(_timer_)) purge];
}

- (void)purgeStateTimer {
  [((JavaUtilTimer *) nil_chk(_stateTimer_)) purge];
}

- (void)cancelTimer {
  [((JavaUtilTimer *) nil_chk(_timer_)) cancel];
}

- (void)cancelStateTimer {
  [((JavaUtilTimer *) nil_chk(_stateTimer_)) cancel];
}

- (void)startProber {
  [new_JavaxJmdnsImplTasksStateProber_initWithJavaxJmdnsImplJmDNSImpl_(_jmDNSImpl_) startWithJavaUtilTimer:_stateTimer_];
}

- (void)startAnnouncer {
  [new_JavaxJmdnsImplTasksStateAnnouncer_initWithJavaxJmdnsImplJmDNSImpl_(_jmDNSImpl_) startWithJavaUtilTimer:_stateTimer_];
}

- (void)startRenewer {
  [new_JavaxJmdnsImplTasksStateRenewer_initWithJavaxJmdnsImplJmDNSImpl_(_jmDNSImpl_) startWithJavaUtilTimer:_stateTimer_];
}

- (void)startCanceler {
  [new_JavaxJmdnsImplTasksStateCanceler_initWithJavaxJmdnsImplJmDNSImpl_(_jmDNSImpl_) startWithJavaUtilTimer:_stateTimer_];
}

- (void)startReaper {
  [new_JavaxJmdnsImplTasksRecordReaper_initWithJavaxJmdnsImplJmDNSImpl_(_jmDNSImpl_) startWithJavaUtilTimer:_timer_];
}

- (void)startServiceInfoResolverWithJavaxJmdnsImplServiceInfoImpl:(JavaxJmdnsImplServiceInfoImpl *)info {
  [new_JavaxJmdnsImplTasksResolverServiceInfoResolver_initWithJavaxJmdnsImplJmDNSImpl_withJavaxJmdnsImplServiceInfoImpl_(_jmDNSImpl_, info) startWithJavaUtilTimer:_timer_];
}

- (void)startTypeResolver {
  [new_JavaxJmdnsImplTasksResolverTypeResolver_initWithJavaxJmdnsImplJmDNSImpl_(_jmDNSImpl_) startWithJavaUtilTimer:_timer_];
}

- (void)startServiceResolverWithNSString:(NSString *)type {
  [new_JavaxJmdnsImplTasksResolverServiceResolver_initWithJavaxJmdnsImplJmDNSImpl_withNSString_(_jmDNSImpl_, type) startWithJavaUtilTimer:_timer_];
}

- (void)startResponderWithJavaxJmdnsImplDNSIncoming:(JavaxJmdnsImplDNSIncoming *)inArg
                                            withInt:(jint)port {
  [new_JavaxJmdnsImplTasksResponder_initWithJavaxJmdnsImplJmDNSImpl_withJavaxJmdnsImplDNSIncoming_withInt_(_jmDNSImpl_, inArg, port) startWithJavaUtilTimer:_timer_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaxJmdnsImplJmDNSImpl:);
  methods[1].selector = @selector(purgeTimer);
  methods[2].selector = @selector(purgeStateTimer);
  methods[3].selector = @selector(cancelTimer);
  methods[4].selector = @selector(cancelStateTimer);
  methods[5].selector = @selector(startProber);
  methods[6].selector = @selector(startAnnouncer);
  methods[7].selector = @selector(startRenewer);
  methods[8].selector = @selector(startCanceler);
  methods[9].selector = @selector(startReaper);
  methods[10].selector = @selector(startServiceInfoResolverWithJavaxJmdnsImplServiceInfoImpl:);
  methods[11].selector = @selector(startTypeResolver);
  methods[12].selector = @selector(startServiceResolverWithNSString:);
  methods[13].selector = @selector(startResponderWithJavaxJmdnsImplDNSIncoming:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_jmDNSImpl_", "LJavaxJmdnsImplJmDNSImpl;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_timer_", "LJavaUtilTimer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_stateTimer_", "LJavaUtilTimer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaxJmdnsImplJmDNSImpl;", "startServiceInfoResolver", "LJavaxJmdnsImplServiceInfoImpl;", "startServiceResolver", "LNSString;", "startResponder", "LJavaxJmdnsImplDNSIncoming;I", "LJavaxJmdnsImplDNSTaskStarter;", "LJavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl = { "DNSTaskStarterImpl", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x19, 14, 3, 7, 8, -1, -1, -1 };
  return &_JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl;
}

@end

void JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_initWithJavaxJmdnsImplJmDNSImpl_(JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl *self, JavaxJmdnsImplJmDNSImpl *jmDNSImpl) {
  NSObject_init(self);
  self->_jmDNSImpl_ = jmDNSImpl;
  self->_timer_ = new_JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer_initWithNSString_withBoolean_(JreStrcat("$$$", @"JmDNS(", [((JavaxJmdnsImplJmDNSImpl *) nil_chk(self->_jmDNSImpl_)) getName], @").Timer"), true);
  self->_stateTimer_ = new_JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer_initWithNSString_withBoolean_(JreStrcat("$$$", @"JmDNS(", [self->_jmDNSImpl_ getName], @").State.Timer"), false);
}

JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl *new_JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_initWithJavaxJmdnsImplJmDNSImpl_(JavaxJmdnsImplJmDNSImpl *jmDNSImpl) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl, initWithJavaxJmdnsImplJmDNSImpl_, jmDNSImpl)
}

JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl *create_JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_initWithJavaxJmdnsImplJmDNSImpl_(JavaxJmdnsImplJmDNSImpl *jmDNSImpl) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl, initWithJavaxJmdnsImplJmDNSImpl_, jmDNSImpl)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl)

@implementation JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithBoolean:(jboolean)isDaemon {
  JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer_initWithBoolean_(self, isDaemon);
  return self;
}

- (instancetype)initWithNSString:(NSString *)name
                     withBoolean:(jboolean)isDaemon {
  JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer_initWithNSString_withBoolean_(self, name, isDaemon);
  return self;
}

- (instancetype)initWithNSString:(NSString *)name {
  JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer_initWithNSString_(self, name);
  return self;
}

- (void)cancel {
  @synchronized(self) {
    if (JreLoadVolatileBoolean(&_cancelled_)) return;
    JreAssignVolatileBoolean(&_cancelled_, true);
    [super cancel];
  }
}

- (void)scheduleWithJavaUtilTimerTask:(JavaUtilTimerTask *)task
                             withLong:(jlong)delay {
  @synchronized(self) {
    if (JreLoadVolatileBoolean(&_cancelled_)) return;
    [super scheduleWithJavaUtilTimerTask:task withLong:delay];
  }
}

- (void)scheduleWithJavaUtilTimerTask:(JavaUtilTimerTask *)task
                     withJavaUtilDate:(JavaUtilDate *)time {
  @synchronized(self) {
    if (JreLoadVolatileBoolean(&_cancelled_)) return;
    [super scheduleWithJavaUtilTimerTask:task withJavaUtilDate:time];
  }
}

- (void)scheduleWithJavaUtilTimerTask:(JavaUtilTimerTask *)task
                             withLong:(jlong)delay
                             withLong:(jlong)period {
  @synchronized(self) {
    if (JreLoadVolatileBoolean(&_cancelled_)) return;
    [super scheduleWithJavaUtilTimerTask:task withLong:delay withLong:period];
  }
}

- (void)scheduleWithJavaUtilTimerTask:(JavaUtilTimerTask *)task
                     withJavaUtilDate:(JavaUtilDate *)firstTime
                             withLong:(jlong)period {
  @synchronized(self) {
    if (JreLoadVolatileBoolean(&_cancelled_)) return;
    [super scheduleWithJavaUtilTimerTask:task withJavaUtilDate:firstTime withLong:period];
  }
}

- (void)scheduleAtFixedRateWithJavaUtilTimerTask:(JavaUtilTimerTask *)task
                                        withLong:(jlong)delay
                                        withLong:(jlong)period {
  @synchronized(self) {
    if (JreLoadVolatileBoolean(&_cancelled_)) return;
    [super scheduleAtFixedRateWithJavaUtilTimerTask:task withLong:delay withLong:period];
  }
}

- (void)scheduleAtFixedRateWithJavaUtilTimerTask:(JavaUtilTimerTask *)task
                                withJavaUtilDate:(JavaUtilDate *)firstTime
                                        withLong:(jlong)period {
  @synchronized(self) {
    if (JreLoadVolatileBoolean(&_cancelled_)) return;
    [super scheduleAtFixedRateWithJavaUtilTimerTask:task withJavaUtilDate:firstTime withLong:period];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 3, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 3, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 3, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 8, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 8, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithBoolean:);
  methods[2].selector = @selector(initWithNSString:withBoolean:);
  methods[3].selector = @selector(initWithNSString:);
  methods[4].selector = @selector(cancel);
  methods[5].selector = @selector(scheduleWithJavaUtilTimerTask:withLong:);
  methods[6].selector = @selector(scheduleWithJavaUtilTimerTask:withJavaUtilDate:);
  methods[7].selector = @selector(scheduleWithJavaUtilTimerTask:withLong:withLong:);
  methods[8].selector = @selector(scheduleWithJavaUtilTimerTask:withJavaUtilDate:withLong:);
  methods[9].selector = @selector(scheduleAtFixedRateWithJavaUtilTimerTask:withLong:withLong:);
  methods[10].selector = @selector(scheduleAtFixedRateWithJavaUtilTimerTask:withJavaUtilDate:withLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_cancelled_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "Z", "LNSString;Z", "LNSString;", "schedule", "LJavaUtilTimerTask;J", "LJavaUtilTimerTask;LJavaUtilDate;", "LJavaUtilTimerTask;JJ", "LJavaUtilTimerTask;LJavaUtilDate;J", "scheduleAtFixedRate", "LJavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer = { "StarterTimer", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x9, 11, 1, 9, -1, -1, -1, -1 };
  return &_JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer;
}

@end

void JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer_init(JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer *self) {
  JavaUtilTimer_init(self);
  JreAssignVolatileBoolean(&self->_cancelled_, false);
}

JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer *new_JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer_init() {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer, init)
}

JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer *create_JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer_init() {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer, init)
}

void JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer_initWithBoolean_(JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer *self, jboolean isDaemon) {
  JavaUtilTimer_initWithBoolean_(self, isDaemon);
  JreAssignVolatileBoolean(&self->_cancelled_, false);
}

JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer *new_JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer_initWithBoolean_(jboolean isDaemon) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer, initWithBoolean_, isDaemon)
}

JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer *create_JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer_initWithBoolean_(jboolean isDaemon) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer, initWithBoolean_, isDaemon)
}

void JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer_initWithNSString_withBoolean_(JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer *self, NSString *name, jboolean isDaemon) {
  JavaUtilTimer_initWithNSString_withBoolean_(self, name, isDaemon);
  JreAssignVolatileBoolean(&self->_cancelled_, false);
}

JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer *new_JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer_initWithNSString_withBoolean_(NSString *name, jboolean isDaemon) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer, initWithNSString_withBoolean_, name, isDaemon)
}

JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer *create_JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer_initWithNSString_withBoolean_(NSString *name, jboolean isDaemon) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer, initWithNSString_withBoolean_, name, isDaemon)
}

void JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer_initWithNSString_(JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer *self, NSString *name) {
  JavaUtilTimer_initWithNSString_(self, name);
  JreAssignVolatileBoolean(&self->_cancelled_, false);
}

JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer *new_JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer_initWithNSString_(NSString *name) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer, initWithNSString_, name)
}

JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer *create_JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer_initWithNSString_(NSString *name) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer, initWithNSString_, name)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplDNSTaskStarter_DNSTaskStarterImpl_StarterTimer)
