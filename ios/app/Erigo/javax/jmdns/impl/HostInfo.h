//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/jmdns/impl/HostInfo.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxJmdnsImplHostInfo")
#ifdef RESTRICT_JavaxJmdnsImplHostInfo
#define INCLUDE_ALL_JavaxJmdnsImplHostInfo 0
#else
#define INCLUDE_ALL_JavaxJmdnsImplHostInfo 1
#endif
#undef RESTRICT_JavaxJmdnsImplHostInfo

#if !defined (JavaxJmdnsImplHostInfo_) && (INCLUDE_ALL_JavaxJmdnsImplHostInfo || defined(INCLUDE_JavaxJmdnsImplHostInfo))
#define JavaxJmdnsImplHostInfo_

#define RESTRICT_JavaxJmdnsImplDNSStatefulObject 1
#define INCLUDE_JavaxJmdnsImplDNSStatefulObject 1
#include "javax/jmdns/impl/DNSStatefulObject.h"

@class JavaNetDatagramPacket;
@class JavaNetInet4Address;
@class JavaNetInet6Address;
@class JavaNetInetAddress;
@class JavaNetNetworkInterface;
@class JavaxJmdnsImplConstantsDNSRecordType;
@class JavaxJmdnsImplConstantsDNSState;
@class JavaxJmdnsImplDNSRecord_Address;
@class JavaxJmdnsImplDNSRecord_Pointer;
@class JavaxJmdnsImplJmDNSImpl;
@class JavaxJmdnsImplTasksDNSTask;
@protocol JavaUtilCollection;

@interface JavaxJmdnsImplHostInfo : NSObject < JavaxJmdnsImplDNSStatefulObject > {
 @public
  NSString *_name_;
  JavaNetInetAddress *_address_;
  JavaNetNetworkInterface *_interfaze_;
}

#pragma mark Public

- (jboolean)advanceStateWithJavaxJmdnsImplTasksDNSTask:(JavaxJmdnsImplTasksDNSTask *)task;

- (id<JavaUtilCollection>)answersWithBoolean:(jboolean)unique
                                     withInt:(jint)ttl;

- (void)associateWithTaskWithJavaxJmdnsImplTasksDNSTask:(JavaxJmdnsImplTasksDNSTask *)task
                    withJavaxJmdnsImplConstantsDNSState:(JavaxJmdnsImplConstantsDNSState *)state;

- (jboolean)cancelState;

- (jboolean)closeState;

- (jboolean)conflictWithRecordWithJavaxJmdnsImplDNSRecord_Address:(JavaxJmdnsImplDNSRecord_Address *)record;

- (JavaxJmdnsImplJmDNSImpl *)getDns;

- (JavaNetInetAddress *)getInetAddress;

- (JavaNetNetworkInterface *)getInterface;

- (NSString *)getName;

- (jboolean)isAnnounced;

- (jboolean)isAnnouncing;

- (jboolean)isAssociatedWithTaskWithJavaxJmdnsImplTasksDNSTask:(JavaxJmdnsImplTasksDNSTask *)task
                           withJavaxJmdnsImplConstantsDNSState:(JavaxJmdnsImplConstantsDNSState *)state;

- (jboolean)isCanceled;

- (jboolean)isCanceling;

- (jboolean)isClosed;

- (jboolean)isClosing;

- (jboolean)isProbing;

+ (JavaxJmdnsImplHostInfo *)newHostInfoWithJavaNetInetAddress:(JavaNetInetAddress *)address
                                  withJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns
                                                 withNSString:(NSString *)jmdnsName OBJC_METHOD_FAMILY_NONE;

- (jboolean)recoverState;

- (void)removeAssociationWithTaskWithJavaxJmdnsImplTasksDNSTask:(JavaxJmdnsImplTasksDNSTask *)task;

- (jboolean)revertState;

- (NSString *)description;

- (jboolean)waitForAnnouncedWithLong:(jlong)timeout;

- (jboolean)waitForCanceledWithLong:(jlong)timeout;

#pragma mark Package-Private

- (JavaxJmdnsImplDNSRecord_Address *)getDNSAddressRecordWithJavaxJmdnsImplConstantsDNSRecordType:(JavaxJmdnsImplConstantsDNSRecordType *)type
                                                                                     withBoolean:(jboolean)unique
                                                                                         withInt:(jint)ttl;

- (JavaxJmdnsImplDNSRecord_Pointer *)getDNSReverseAddressRecordWithJavaxJmdnsImplConstantsDNSRecordType:(JavaxJmdnsImplConstantsDNSRecordType *)type
                                                                                            withBoolean:(jboolean)unique
                                                                                                withInt:(jint)ttl;

- (JavaNetInet4Address *)getInet4Address;

- (JavaNetInet6Address *)getInet6Address;

- (NSString *)incrementHostName;

- (jboolean)shouldIgnorePacketWithJavaNetDatagramPacket:(JavaNetDatagramPacket *)packet;

@end

J2OBJC_STATIC_INIT(JavaxJmdnsImplHostInfo)

J2OBJC_FIELD_SETTER(JavaxJmdnsImplHostInfo, _name_, NSString *)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplHostInfo, _address_, JavaNetInetAddress *)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplHostInfo, _interfaze_, JavaNetNetworkInterface *)

FOUNDATION_EXPORT JavaxJmdnsImplHostInfo *JavaxJmdnsImplHostInfo_newHostInfoWithJavaNetInetAddress_withJavaxJmdnsImplJmDNSImpl_withNSString_(JavaNetInetAddress *address, JavaxJmdnsImplJmDNSImpl *dns, NSString *jmdnsName);

J2OBJC_TYPE_LITERAL_HEADER(JavaxJmdnsImplHostInfo)

#endif

#pragma pop_macro("INCLUDE_ALL_JavaxJmdnsImplHostInfo")
