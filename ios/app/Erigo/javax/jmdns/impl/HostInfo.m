//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/jmdns/impl/HostInfo.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/net/DatagramPacket.h"
#include "java/net/Inet4Address.h"
#include "java/net/Inet6Address.h"
#include "java/net/InetAddress.h"
#include "java/net/NetworkInterface.h"
#include "java/net/UnknownHostException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/List.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "javax/jmdns/NetworkTopologyDiscovery.h"
#include "javax/jmdns/impl/DNSRecord.h"
#include "javax/jmdns/impl/DNSStatefulObject.h"
#include "javax/jmdns/impl/HostInfo.h"
#include "javax/jmdns/impl/JmDNSImpl.h"
#include "javax/jmdns/impl/constants/DNSConstants.h"
#include "javax/jmdns/impl/constants/DNSRecordClass.h"
#include "javax/jmdns/impl/constants/DNSRecordType.h"
#include "javax/jmdns/impl/constants/DNSState.h"
#include "javax/jmdns/impl/tasks/DNSTask.h"

@class JavaxJmdnsImplHostInfo_HostInfoState;

@interface JavaxJmdnsImplHostInfo () {
 @public
  JavaxJmdnsImplHostInfo_HostInfoState *_state_;
  jint hostNameCount_;
}

+ (JavaNetInetAddress *)loopbackAddress;

- (instancetype)initWithJavaNetInetAddress:(JavaNetInetAddress *)address
                              withNSString:(NSString *)name
               withJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns;

- (JavaxJmdnsImplDNSRecord_Address *)getDNS4AddressRecordWithBoolean:(jboolean)unique
                                                             withInt:(jint)ttl;

- (JavaxJmdnsImplDNSRecord_Address *)getDNS6AddressRecordWithBoolean:(jboolean)unique
                                                             withInt:(jint)ttl;

- (JavaxJmdnsImplDNSRecord_Pointer *)getDNS4ReverseAddressRecordWithBoolean:(jboolean)unique
                                                                    withInt:(jint)ttl;

- (JavaxJmdnsImplDNSRecord_Pointer *)getDNS6ReverseAddressRecordWithBoolean:(jboolean)unique
                                                                    withInt:(jint)ttl;

@end

J2OBJC_FIELD_SETTER(JavaxJmdnsImplHostInfo, _state_, JavaxJmdnsImplHostInfo_HostInfoState *)

inline JavaUtilLoggingLogger *JavaxJmdnsImplHostInfo_get_logger();
inline JavaUtilLoggingLogger *JavaxJmdnsImplHostInfo_set_logger(JavaUtilLoggingLogger *value);
static JavaUtilLoggingLogger *JavaxJmdnsImplHostInfo_logger;
J2OBJC_STATIC_FIELD_OBJ(JavaxJmdnsImplHostInfo, logger, JavaUtilLoggingLogger *)

__attribute__((unused)) static JavaNetInetAddress *JavaxJmdnsImplHostInfo_loopbackAddress();

__attribute__((unused)) static void JavaxJmdnsImplHostInfo_initWithJavaNetInetAddress_withNSString_withJavaxJmdnsImplJmDNSImpl_(JavaxJmdnsImplHostInfo *self, JavaNetInetAddress *address, NSString *name, JavaxJmdnsImplJmDNSImpl *dns);

__attribute__((unused)) static JavaxJmdnsImplHostInfo *new_JavaxJmdnsImplHostInfo_initWithJavaNetInetAddress_withNSString_withJavaxJmdnsImplJmDNSImpl_(JavaNetInetAddress *address, NSString *name, JavaxJmdnsImplJmDNSImpl *dns) NS_RETURNS_RETAINED;

__attribute__((unused)) static JavaxJmdnsImplHostInfo *create_JavaxJmdnsImplHostInfo_initWithJavaNetInetAddress_withNSString_withJavaxJmdnsImplJmDNSImpl_(JavaNetInetAddress *address, NSString *name, JavaxJmdnsImplJmDNSImpl *dns);

__attribute__((unused)) static JavaxJmdnsImplDNSRecord_Address *JavaxJmdnsImplHostInfo_getDNS4AddressRecordWithBoolean_withInt_(JavaxJmdnsImplHostInfo *self, jboolean unique, jint ttl);

__attribute__((unused)) static JavaxJmdnsImplDNSRecord_Address *JavaxJmdnsImplHostInfo_getDNS6AddressRecordWithBoolean_withInt_(JavaxJmdnsImplHostInfo *self, jboolean unique, jint ttl);

__attribute__((unused)) static JavaxJmdnsImplDNSRecord_Pointer *JavaxJmdnsImplHostInfo_getDNS4ReverseAddressRecordWithBoolean_withInt_(JavaxJmdnsImplHostInfo *self, jboolean unique, jint ttl);

__attribute__((unused)) static JavaxJmdnsImplDNSRecord_Pointer *JavaxJmdnsImplHostInfo_getDNS6ReverseAddressRecordWithBoolean_withInt_(JavaxJmdnsImplHostInfo *self, jboolean unique, jint ttl);

@interface JavaxJmdnsImplHostInfo_HostInfoState : JavaxJmdnsImplDNSStatefulObject_DefaultImplementation

- (instancetype)initWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxJmdnsImplHostInfo_HostInfoState)

inline jlong JavaxJmdnsImplHostInfo_HostInfoState_get_serialVersionUID();
#define JavaxJmdnsImplHostInfo_HostInfoState_serialVersionUID -8191476803620402088LL
J2OBJC_STATIC_FIELD_CONSTANT(JavaxJmdnsImplHostInfo_HostInfoState, serialVersionUID, jlong)

__attribute__((unused)) static void JavaxJmdnsImplHostInfo_HostInfoState_initWithJavaxJmdnsImplJmDNSImpl_(JavaxJmdnsImplHostInfo_HostInfoState *self, JavaxJmdnsImplJmDNSImpl *dns);

__attribute__((unused)) static JavaxJmdnsImplHostInfo_HostInfoState *new_JavaxJmdnsImplHostInfo_HostInfoState_initWithJavaxJmdnsImplJmDNSImpl_(JavaxJmdnsImplJmDNSImpl *dns) NS_RETURNS_RETAINED;

__attribute__((unused)) static JavaxJmdnsImplHostInfo_HostInfoState *create_JavaxJmdnsImplHostInfo_HostInfoState_initWithJavaxJmdnsImplJmDNSImpl_(JavaxJmdnsImplJmDNSImpl *dns);

J2OBJC_TYPE_LITERAL_HEADER(JavaxJmdnsImplHostInfo_HostInfoState)

J2OBJC_INITIALIZED_DEFN(JavaxJmdnsImplHostInfo)

@implementation JavaxJmdnsImplHostInfo

+ (JavaxJmdnsImplHostInfo *)newHostInfoWithJavaNetInetAddress:(JavaNetInetAddress *)address
                                  withJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns
                                                 withNSString:(NSString *)jmdnsName {
  return JavaxJmdnsImplHostInfo_newHostInfoWithJavaNetInetAddress_withJavaxJmdnsImplJmDNSImpl_withNSString_(address, dns, jmdnsName);
}

+ (JavaNetInetAddress *)loopbackAddress {
  return JavaxJmdnsImplHostInfo_loopbackAddress();
}

- (instancetype)initWithJavaNetInetAddress:(JavaNetInetAddress *)address
                              withNSString:(NSString *)name
               withJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns {
  JavaxJmdnsImplHostInfo_initWithJavaNetInetAddress_withNSString_withJavaxJmdnsImplJmDNSImpl_(self, address, name, dns);
  return self;
}

- (NSString *)getName {
  return _name_;
}

- (JavaNetInetAddress *)getInetAddress {
  return _address_;
}

- (JavaNetInet4Address *)getInet4Address {
  if ([[self getInetAddress] isKindOfClass:[JavaNetInet4Address class]]) {
    return (JavaNetInet4Address *) cast_chk(_address_, [JavaNetInet4Address class]);
  }
  return nil;
}

- (JavaNetInet6Address *)getInet6Address {
  if ([[self getInetAddress] isKindOfClass:[JavaNetInet6Address class]]) {
    return (JavaNetInet6Address *) cast_chk(_address_, [JavaNetInet6Address class]);
  }
  return nil;
}

- (JavaNetNetworkInterface *)getInterface {
  return _interfaze_;
}

- (jboolean)conflictWithRecordWithJavaxJmdnsImplDNSRecord_Address:(JavaxJmdnsImplDNSRecord_Address *)record {
  JavaxJmdnsImplDNSRecord_Address *hostAddress = [self getDNSAddressRecordWithJavaxJmdnsImplConstantsDNSRecordType:[((JavaxJmdnsImplDNSRecord_Address *) nil_chk(record)) getRecordType] withBoolean:[record isUnique] withInt:JavaxJmdnsImplConstantsDNSConstants_DNS_TTL];
  if (hostAddress != nil) {
    return [hostAddress sameTypeWithJavaxJmdnsImplDNSRecord:record] && [hostAddress sameNameWithJavaxJmdnsImplDNSRecord:record] && (![hostAddress sameValueWithJavaxJmdnsImplDNSRecord:record]);
  }
  return false;
}

- (NSString *)incrementHostName {
  @synchronized(self) {
    hostNameCount_++;
    jint plocal = [((NSString *) nil_chk(_name_)) java_indexOfString:@".local."];
    jint punder = [((NSString *) nil_chk(_name_)) java_lastIndexOf:'-'];
    _name_ = JreStrcat("$CI$", [((NSString *) nil_chk(_name_)) java_substring:0 endIndex:(punder == -1 ? plocal : punder)], '-', hostNameCount_, @".local.");
    return _name_;
  }
}

- (jboolean)shouldIgnorePacketWithJavaNetDatagramPacket:(JavaNetDatagramPacket *)packet {
  jboolean result = false;
  if ([self getInetAddress] != nil) {
    JavaNetInetAddress *from = [((JavaNetDatagramPacket *) nil_chk(packet)) getAddress];
    if (from != nil) {
      if ([from isLinkLocalAddress] && (![((JavaNetInetAddress *) nil_chk([self getInetAddress])) isLinkLocalAddress])) {
        result = true;
      }
      if ([from isLoopbackAddress] && (![((JavaNetInetAddress *) nil_chk([self getInetAddress])) isLoopbackAddress])) {
        result = true;
      }
    }
  }
  return result;
}

- (JavaxJmdnsImplDNSRecord_Address *)getDNSAddressRecordWithJavaxJmdnsImplConstantsDNSRecordType:(JavaxJmdnsImplConstantsDNSRecordType *)type
                                                                                     withBoolean:(jboolean)unique
                                                                                         withInt:(jint)ttl {
  switch ([type ordinal]) {
    case JavaxJmdnsImplConstantsDNSRecordType_Enum_TYPE_A:
    return JavaxJmdnsImplHostInfo_getDNS4AddressRecordWithBoolean_withInt_(self, unique, ttl);
    case JavaxJmdnsImplConstantsDNSRecordType_Enum_TYPE_A6:
    case JavaxJmdnsImplConstantsDNSRecordType_Enum_TYPE_AAAA:
    return JavaxJmdnsImplHostInfo_getDNS6AddressRecordWithBoolean_withInt_(self, unique, ttl);
    default:
    ;
  }
  return nil;
}

- (JavaxJmdnsImplDNSRecord_Address *)getDNS4AddressRecordWithBoolean:(jboolean)unique
                                                             withInt:(jint)ttl {
  return JavaxJmdnsImplHostInfo_getDNS4AddressRecordWithBoolean_withInt_(self, unique, ttl);
}

- (JavaxJmdnsImplDNSRecord_Address *)getDNS6AddressRecordWithBoolean:(jboolean)unique
                                                             withInt:(jint)ttl {
  return JavaxJmdnsImplHostInfo_getDNS6AddressRecordWithBoolean_withInt_(self, unique, ttl);
}

- (JavaxJmdnsImplDNSRecord_Pointer *)getDNSReverseAddressRecordWithJavaxJmdnsImplConstantsDNSRecordType:(JavaxJmdnsImplConstantsDNSRecordType *)type
                                                                                            withBoolean:(jboolean)unique
                                                                                                withInt:(jint)ttl {
  switch ([type ordinal]) {
    case JavaxJmdnsImplConstantsDNSRecordType_Enum_TYPE_A:
    return JavaxJmdnsImplHostInfo_getDNS4ReverseAddressRecordWithBoolean_withInt_(self, unique, ttl);
    case JavaxJmdnsImplConstantsDNSRecordType_Enum_TYPE_A6:
    case JavaxJmdnsImplConstantsDNSRecordType_Enum_TYPE_AAAA:
    return JavaxJmdnsImplHostInfo_getDNS6ReverseAddressRecordWithBoolean_withInt_(self, unique, ttl);
    default:
    ;
  }
  return nil;
}

- (JavaxJmdnsImplDNSRecord_Pointer *)getDNS4ReverseAddressRecordWithBoolean:(jboolean)unique
                                                                    withInt:(jint)ttl {
  return JavaxJmdnsImplHostInfo_getDNS4ReverseAddressRecordWithBoolean_withInt_(self, unique, ttl);
}

- (JavaxJmdnsImplDNSRecord_Pointer *)getDNS6ReverseAddressRecordWithBoolean:(jboolean)unique
                                                                    withInt:(jint)ttl {
  return JavaxJmdnsImplHostInfo_getDNS6ReverseAddressRecordWithBoolean_withInt_(self, unique, ttl);
}

- (NSString *)description {
  JavaLangStringBuilder *buf = new_JavaLangStringBuilder_initWithInt_(1024);
  (void) [buf appendWithNSString:@"local host info["];
  (void) [buf appendWithNSString:[self getName] != nil ? [self getName] : @"no name"];
  (void) [buf appendWithNSString:@", "];
  (void) [buf appendWithNSString:[self getInterface] != nil ? [((JavaNetNetworkInterface *) nil_chk([self getInterface])) getDisplayName] : @"???"];
  (void) [buf appendWithNSString:@":"];
  (void) [buf appendWithNSString:[self getInetAddress] != nil ? [((JavaNetInetAddress *) nil_chk([self getInetAddress])) getHostAddress] : @"no address"];
  (void) [buf appendWithNSString:@", "];
  (void) [buf appendWithId:_state_];
  (void) [buf appendWithNSString:@"]"];
  return [buf description];
}

- (id<JavaUtilCollection>)answersWithBoolean:(jboolean)unique
                                     withInt:(jint)ttl {
  id<JavaUtilList> list = new_JavaUtilArrayList_init();
  JavaxJmdnsImplDNSRecord *answer = JavaxJmdnsImplHostInfo_getDNS4AddressRecordWithBoolean_withInt_(self, unique, ttl);
  if (answer != nil) {
    [list addWithId:answer];
  }
  answer = JavaxJmdnsImplHostInfo_getDNS6AddressRecordWithBoolean_withInt_(self, unique, ttl);
  if (answer != nil) {
    [list addWithId:answer];
  }
  return list;
}

- (JavaxJmdnsImplJmDNSImpl *)getDns {
  return [((JavaxJmdnsImplHostInfo_HostInfoState *) nil_chk(self->_state_)) getDns];
}

- (jboolean)advanceStateWithJavaxJmdnsImplTasksDNSTask:(JavaxJmdnsImplTasksDNSTask *)task {
  return [((JavaxJmdnsImplHostInfo_HostInfoState *) nil_chk(self->_state_)) advanceStateWithJavaxJmdnsImplTasksDNSTask:task];
}

- (void)removeAssociationWithTaskWithJavaxJmdnsImplTasksDNSTask:(JavaxJmdnsImplTasksDNSTask *)task {
  [((JavaxJmdnsImplHostInfo_HostInfoState *) nil_chk(self->_state_)) removeAssociationWithTaskWithJavaxJmdnsImplTasksDNSTask:task];
}

- (jboolean)revertState {
  return [((JavaxJmdnsImplHostInfo_HostInfoState *) nil_chk(self->_state_)) revertState];
}

- (void)associateWithTaskWithJavaxJmdnsImplTasksDNSTask:(JavaxJmdnsImplTasksDNSTask *)task
                    withJavaxJmdnsImplConstantsDNSState:(JavaxJmdnsImplConstantsDNSState *)state {
  [((JavaxJmdnsImplHostInfo_HostInfoState *) nil_chk(self->_state_)) associateWithTaskWithJavaxJmdnsImplTasksDNSTask:task withJavaxJmdnsImplConstantsDNSState:state];
}

- (jboolean)isAssociatedWithTaskWithJavaxJmdnsImplTasksDNSTask:(JavaxJmdnsImplTasksDNSTask *)task
                           withJavaxJmdnsImplConstantsDNSState:(JavaxJmdnsImplConstantsDNSState *)state {
  return [((JavaxJmdnsImplHostInfo_HostInfoState *) nil_chk(self->_state_)) isAssociatedWithTaskWithJavaxJmdnsImplTasksDNSTask:task withJavaxJmdnsImplConstantsDNSState:state];
}

- (jboolean)cancelState {
  return [((JavaxJmdnsImplHostInfo_HostInfoState *) nil_chk(self->_state_)) cancelState];
}

- (jboolean)closeState {
  return [((JavaxJmdnsImplHostInfo_HostInfoState *) nil_chk(self->_state_)) closeState];
}

- (jboolean)recoverState {
  return [((JavaxJmdnsImplHostInfo_HostInfoState *) nil_chk(self->_state_)) recoverState];
}

- (jboolean)isProbing {
  return [((JavaxJmdnsImplHostInfo_HostInfoState *) nil_chk(self->_state_)) isProbing];
}

- (jboolean)isAnnouncing {
  return [((JavaxJmdnsImplHostInfo_HostInfoState *) nil_chk(self->_state_)) isAnnouncing];
}

- (jboolean)isAnnounced {
  return [((JavaxJmdnsImplHostInfo_HostInfoState *) nil_chk(self->_state_)) isAnnounced];
}

- (jboolean)isCanceling {
  return [((JavaxJmdnsImplHostInfo_HostInfoState *) nil_chk(self->_state_)) isCanceling];
}

- (jboolean)isCanceled {
  return [((JavaxJmdnsImplHostInfo_HostInfoState *) nil_chk(self->_state_)) isCanceled];
}

- (jboolean)isClosing {
  return [((JavaxJmdnsImplHostInfo_HostInfoState *) nil_chk(self->_state_)) isClosing];
}

- (jboolean)isClosed {
  return [((JavaxJmdnsImplHostInfo_HostInfoState *) nil_chk(self->_state_)) isClosed];
}

- (jboolean)waitForAnnouncedWithLong:(jlong)timeout {
  return [((JavaxJmdnsImplHostInfo_HostInfoState *) nil_chk(_state_)) waitForAnnouncedWithLong:timeout];
}

- (jboolean)waitForCanceledWithLong:(jlong)timeout {
  if (_address_ == nil) {
    return true;
  }
  return [((JavaxJmdnsImplHostInfo_HostInfoState *) nil_chk(_state_)) waitForCanceledWithLong:timeout];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaxJmdnsImplHostInfo;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetInet4Address;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetInet6Address;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetNetworkInterface;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 5, 6, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplDNSRecord_Address;", 0x0, 7, 8, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplDNSRecord_Address;", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplDNSRecord_Address;", 0x2, 11, 10, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplDNSRecord_Pointer;", 0x0, 12, 8, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplDNSRecord_Pointer;", 0x2, 13, 10, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplDNSRecord_Pointer;", 0x2, 14, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 15, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, 16, 10, -1, 17, -1, -1 },
    { NULL, "LJavaxJmdnsImplJmDNSImpl;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 19, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 23, 22, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 26, 25, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(newHostInfoWithJavaNetInetAddress:withJavaxJmdnsImplJmDNSImpl:withNSString:);
  methods[1].selector = @selector(loopbackAddress);
  methods[2].selector = @selector(initWithJavaNetInetAddress:withNSString:withJavaxJmdnsImplJmDNSImpl:);
  methods[3].selector = @selector(getName);
  methods[4].selector = @selector(getInetAddress);
  methods[5].selector = @selector(getInet4Address);
  methods[6].selector = @selector(getInet6Address);
  methods[7].selector = @selector(getInterface);
  methods[8].selector = @selector(conflictWithRecordWithJavaxJmdnsImplDNSRecord_Address:);
  methods[9].selector = @selector(incrementHostName);
  methods[10].selector = @selector(shouldIgnorePacketWithJavaNetDatagramPacket:);
  methods[11].selector = @selector(getDNSAddressRecordWithJavaxJmdnsImplConstantsDNSRecordType:withBoolean:withInt:);
  methods[12].selector = @selector(getDNS4AddressRecordWithBoolean:withInt:);
  methods[13].selector = @selector(getDNS6AddressRecordWithBoolean:withInt:);
  methods[14].selector = @selector(getDNSReverseAddressRecordWithJavaxJmdnsImplConstantsDNSRecordType:withBoolean:withInt:);
  methods[15].selector = @selector(getDNS4ReverseAddressRecordWithBoolean:withInt:);
  methods[16].selector = @selector(getDNS6ReverseAddressRecordWithBoolean:withInt:);
  methods[17].selector = @selector(description);
  methods[18].selector = @selector(answersWithBoolean:withInt:);
  methods[19].selector = @selector(getDns);
  methods[20].selector = @selector(advanceStateWithJavaxJmdnsImplTasksDNSTask:);
  methods[21].selector = @selector(removeAssociationWithTaskWithJavaxJmdnsImplTasksDNSTask:);
  methods[22].selector = @selector(revertState);
  methods[23].selector = @selector(associateWithTaskWithJavaxJmdnsImplTasksDNSTask:withJavaxJmdnsImplConstantsDNSState:);
  methods[24].selector = @selector(isAssociatedWithTaskWithJavaxJmdnsImplTasksDNSTask:withJavaxJmdnsImplConstantsDNSState:);
  methods[25].selector = @selector(cancelState);
  methods[26].selector = @selector(closeState);
  methods[27].selector = @selector(recoverState);
  methods[28].selector = @selector(isProbing);
  methods[29].selector = @selector(isAnnouncing);
  methods[30].selector = @selector(isAnnounced);
  methods[31].selector = @selector(isCanceling);
  methods[32].selector = @selector(isCanceled);
  methods[33].selector = @selector(isClosing);
  methods[34].selector = @selector(isClosed);
  methods[35].selector = @selector(waitForAnnouncedWithLong:);
  methods[36].selector = @selector(waitForCanceledWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0xa, -1, 27, -1, -1 },
    { "_name_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_address_", "LJavaNetInetAddress;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_interfaze_", "LJavaNetNetworkInterface;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_state_", "LJavaxJmdnsImplHostInfo_HostInfoState;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "hostNameCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "newHostInfo", "LJavaNetInetAddress;LJavaxJmdnsImplJmDNSImpl;LNSString;", "LJavaNetInetAddress;LNSString;LJavaxJmdnsImplJmDNSImpl;", "conflictWithRecord", "LJavaxJmdnsImplDNSRecord_Address;", "shouldIgnorePacket", "LJavaNetDatagramPacket;", "getDNSAddressRecord", "LJavaxJmdnsImplConstantsDNSRecordType;ZI", "getDNS4AddressRecord", "ZI", "getDNS6AddressRecord", "getDNSReverseAddressRecord", "getDNS4ReverseAddressRecord", "getDNS6ReverseAddressRecord", "toString", "answers", "(ZI)Ljava/util/Collection<Ljavax/jmdns/impl/DNSRecord;>;", "advanceState", "LJavaxJmdnsImplTasksDNSTask;", "removeAssociationWithTask", "associateWithTask", "LJavaxJmdnsImplTasksDNSTask;LJavaxJmdnsImplConstantsDNSState;", "isAssociatedWithTask", "waitForAnnounced", "J", "waitForCanceled", &JavaxJmdnsImplHostInfo_logger, "LJavaxJmdnsImplHostInfo_HostInfoState;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplHostInfo = { "HostInfo", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x1, 37, 6, -1, 28, -1, -1, -1 };
  return &_JavaxJmdnsImplHostInfo;
}

+ (void)initialize {
  if (self == [JavaxJmdnsImplHostInfo class]) {
    JavaxJmdnsImplHostInfo_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([JavaxJmdnsImplHostInfo_class_() getName]);
    J2OBJC_SET_INITIALIZED(JavaxJmdnsImplHostInfo)
  }
}

@end

JavaxJmdnsImplHostInfo *JavaxJmdnsImplHostInfo_newHostInfoWithJavaNetInetAddress_withJavaxJmdnsImplJmDNSImpl_withNSString_(JavaNetInetAddress *address, JavaxJmdnsImplJmDNSImpl *dns, NSString *jmdnsName) {
  JavaxJmdnsImplHostInfo_initialize();
  JavaxJmdnsImplHostInfo *localhost = nil;
  NSString *aName = @"";
  JavaNetInetAddress *addr = address;
  @try {
    if (addr == nil) {
      NSString *ip = JavaLangSystem_getPropertyWithNSString_(@"net.mdns.interface");
      if (ip != nil) {
        addr = JavaNetInetAddress_getByNameWithNSString_(ip);
      }
      else {
        addr = JavaNetInetAddress_getLocalHost();
        if ([((JavaNetInetAddress *) nil_chk(addr)) isLoopbackAddress]) {
          IOSObjectArray *addresses = [((id<JavaxJmdnsNetworkTopologyDiscovery>) nil_chk(JavaxJmdnsNetworkTopologyDiscovery_Factory_getInstance())) getInetAddresses];
          if (((IOSObjectArray *) nil_chk(addresses))->size_ > 0) {
            addr = IOSObjectArray_Get(addresses, 0);
          }
        }
      }
      aName = [((JavaNetInetAddress *) nil_chk(addr)) getHostName];
      if ([addr isLoopbackAddress]) {
        [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplHostInfo_logger)) warningWithNSString:@"Could not find any address beside the loopback."];
      }
    }
    else {
      aName = [addr getHostName];
    }
    if ([((NSString *) nil_chk(aName)) java_contains:@"in-addr.arpa"] || ([aName isEqual:[addr getHostAddress]])) {
      aName = ((jmdnsName != nil) && ([((NSString *) nil_chk(jmdnsName)) java_length] > 0) ? jmdnsName : [addr getHostAddress]);
    }
  }
  @catch (JavaIoIOException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplHostInfo_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$@$$", @"Could not intialize the host network interface on ", address, @"because of an error: ", [e getMessage]) withNSException:e];
    addr = JavaxJmdnsImplHostInfo_loopbackAddress();
    aName = ((jmdnsName != nil) && ([((NSString *) nil_chk(jmdnsName)) java_length] > 0) ? jmdnsName : @"computer");
  }
  aName = [((NSString *) nil_chk(aName)) java_replace:'.' withChar:'-'];
  (void) JreStrAppendStrong(&aName, "$", @".local.");
  localhost = new_JavaxJmdnsImplHostInfo_initWithJavaNetInetAddress_withNSString_withJavaxJmdnsImplJmDNSImpl_(addr, aName, dns);
  return localhost;
}

JavaNetInetAddress *JavaxJmdnsImplHostInfo_loopbackAddress() {
  JavaxJmdnsImplHostInfo_initialize();
  @try {
    return JavaNetInetAddress_getByNameWithNSString_(nil);
  }
  @catch (JavaNetUnknownHostException *exception) {
    return nil;
  }
}

void JavaxJmdnsImplHostInfo_initWithJavaNetInetAddress_withNSString_withJavaxJmdnsImplJmDNSImpl_(JavaxJmdnsImplHostInfo *self, JavaNetInetAddress *address, NSString *name, JavaxJmdnsImplJmDNSImpl *dns) {
  NSObject_init(self);
  self->_state_ = new_JavaxJmdnsImplHostInfo_HostInfoState_initWithJavaxJmdnsImplJmDNSImpl_(dns);
  self->_address_ = address;
  self->_name_ = name;
  if (address != nil) {
    @try {
      self->_interfaze_ = JavaNetNetworkInterface_getByInetAddressWithJavaNetInetAddress_(address);
    }
    @catch (JavaLangException *exception) {
      [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplHostInfo_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:@"LocalHostInfo() exception " withNSException:exception];
    }
  }
}

JavaxJmdnsImplHostInfo *new_JavaxJmdnsImplHostInfo_initWithJavaNetInetAddress_withNSString_withJavaxJmdnsImplJmDNSImpl_(JavaNetInetAddress *address, NSString *name, JavaxJmdnsImplJmDNSImpl *dns) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplHostInfo, initWithJavaNetInetAddress_withNSString_withJavaxJmdnsImplJmDNSImpl_, address, name, dns)
}

JavaxJmdnsImplHostInfo *create_JavaxJmdnsImplHostInfo_initWithJavaNetInetAddress_withNSString_withJavaxJmdnsImplJmDNSImpl_(JavaNetInetAddress *address, NSString *name, JavaxJmdnsImplJmDNSImpl *dns) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplHostInfo, initWithJavaNetInetAddress_withNSString_withJavaxJmdnsImplJmDNSImpl_, address, name, dns)
}

JavaxJmdnsImplDNSRecord_Address *JavaxJmdnsImplHostInfo_getDNS4AddressRecordWithBoolean_withInt_(JavaxJmdnsImplHostInfo *self, jboolean unique, jint ttl) {
  if (([[self getInetAddress] isKindOfClass:[JavaNetInet4Address class]]) || (([[self getInetAddress] isKindOfClass:[JavaNetInet6Address class]]) && ([((JavaNetInet6Address *) nil_chk(((JavaNetInet6Address *) cast_chk([self getInetAddress], [JavaNetInet6Address class])))) isIPv4CompatibleAddress]))) {
    return new_JavaxJmdnsImplDNSRecord_IPv4Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withJavaNetInetAddress_([self getName], JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordClass, CLASS_IN), unique, ttl, [self getInetAddress]);
  }
  return nil;
}

JavaxJmdnsImplDNSRecord_Address *JavaxJmdnsImplHostInfo_getDNS6AddressRecordWithBoolean_withInt_(JavaxJmdnsImplHostInfo *self, jboolean unique, jint ttl) {
  if ([[self getInetAddress] isKindOfClass:[JavaNetInet6Address class]]) {
    return new_JavaxJmdnsImplDNSRecord_IPv6Address_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withJavaNetInetAddress_([self getName], JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordClass, CLASS_IN), unique, ttl, [self getInetAddress]);
  }
  return nil;
}

JavaxJmdnsImplDNSRecord_Pointer *JavaxJmdnsImplHostInfo_getDNS4ReverseAddressRecordWithBoolean_withInt_(JavaxJmdnsImplHostInfo *self, jboolean unique, jint ttl) {
  if ([[self getInetAddress] isKindOfClass:[JavaNetInet4Address class]]) {
    return new_JavaxJmdnsImplDNSRecord_Pointer_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withNSString_(JreStrcat("$$", [((JavaNetInetAddress *) nil_chk([self getInetAddress])) getHostAddress], @".in-addr.arpa."), JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordClass, CLASS_IN), unique, ttl, [self getName]);
  }
  if (([[self getInetAddress] isKindOfClass:[JavaNetInet6Address class]]) && ([((JavaNetInet6Address *) nil_chk(((JavaNetInet6Address *) cast_chk([self getInetAddress], [JavaNetInet6Address class])))) isIPv4CompatibleAddress])) {
    IOSByteArray *rawAddress = [((JavaNetInetAddress *) nil_chk([self getInetAddress])) getAddress];
    NSString *address = JreStrcat("ICICICI", (IOSByteArray_Get(nil_chk(rawAddress), 12) & (jint) 0xff), '.', (IOSByteArray_Get(rawAddress, 13) & (jint) 0xff), '.', (IOSByteArray_Get(rawAddress, 14) & (jint) 0xff), '.', (IOSByteArray_Get(rawAddress, 15) & (jint) 0xff));
    return new_JavaxJmdnsImplDNSRecord_Pointer_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withNSString_(JreStrcat("$$", address, @".in-addr.arpa."), JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordClass, CLASS_IN), unique, ttl, [self getName]);
  }
  return nil;
}

JavaxJmdnsImplDNSRecord_Pointer *JavaxJmdnsImplHostInfo_getDNS6ReverseAddressRecordWithBoolean_withInt_(JavaxJmdnsImplHostInfo *self, jboolean unique, jint ttl) {
  if ([[self getInetAddress] isKindOfClass:[JavaNetInet6Address class]]) {
    return new_JavaxJmdnsImplDNSRecord_Pointer_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withNSString_(JreStrcat("$$", [((JavaNetInetAddress *) nil_chk([self getInetAddress])) getHostAddress], @".ip6.arpa."), JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordClass, CLASS_IN), unique, ttl, [self getName]);
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplHostInfo)

@implementation JavaxJmdnsImplHostInfo_HostInfoState

- (instancetype)initWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns {
  JavaxJmdnsImplHostInfo_HostInfoState_initWithJavaxJmdnsImplJmDNSImpl_(self, dns);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaxJmdnsImplJmDNSImpl:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = JavaxJmdnsImplHostInfo_HostInfoState_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaxJmdnsImplJmDNSImpl;", "LJavaxJmdnsImplHostInfo;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplHostInfo_HostInfoState = { "HostInfoState", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x1a, 1, 1, 1, -1, -1, -1, -1 };
  return &_JavaxJmdnsImplHostInfo_HostInfoState;
}

@end

void JavaxJmdnsImplHostInfo_HostInfoState_initWithJavaxJmdnsImplJmDNSImpl_(JavaxJmdnsImplHostInfo_HostInfoState *self, JavaxJmdnsImplJmDNSImpl *dns) {
  JavaxJmdnsImplDNSStatefulObject_DefaultImplementation_init(self);
  [self setDnsWithJavaxJmdnsImplJmDNSImpl:dns];
}

JavaxJmdnsImplHostInfo_HostInfoState *new_JavaxJmdnsImplHostInfo_HostInfoState_initWithJavaxJmdnsImplJmDNSImpl_(JavaxJmdnsImplJmDNSImpl *dns) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplHostInfo_HostInfoState, initWithJavaxJmdnsImplJmDNSImpl_, dns)
}

JavaxJmdnsImplHostInfo_HostInfoState *create_JavaxJmdnsImplHostInfo_HostInfoState_initWithJavaxJmdnsImplJmDNSImpl_(JavaxJmdnsImplJmDNSImpl *dns) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplHostInfo_HostInfoState, initWithJavaxJmdnsImplJmDNSImpl_, dns)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplHostInfo_HostInfoState)
