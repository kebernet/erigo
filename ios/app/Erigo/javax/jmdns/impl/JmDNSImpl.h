//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/jmdns/impl/JmDNSImpl.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxJmdnsImplJmDNSImpl")
#ifdef RESTRICT_JavaxJmdnsImplJmDNSImpl
#define INCLUDE_ALL_JavaxJmdnsImplJmDNSImpl 0
#else
#define INCLUDE_ALL_JavaxJmdnsImplJmDNSImpl 1
#endif
#undef RESTRICT_JavaxJmdnsImplJmDNSImpl

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxJmdnsImplJmDNSImpl_) && (INCLUDE_ALL_JavaxJmdnsImplJmDNSImpl || defined(INCLUDE_JavaxJmdnsImplJmDNSImpl))
#define JavaxJmdnsImplJmDNSImpl_

#define RESTRICT_JavaxJmdnsJmDNS 1
#define INCLUDE_JavaxJmdnsJmDNS 1
#include "javax/jmdns/JmDNS.h"

#define RESTRICT_JavaxJmdnsImplDNSStatefulObject 1
#define INCLUDE_JavaxJmdnsImplDNSStatefulObject 1
#include "javax/jmdns/impl/DNSStatefulObject.h"

#define RESTRICT_JavaxJmdnsImplDNSTaskStarter 1
#define INCLUDE_JavaxJmdnsImplDNSTaskStarter 1
#include "javax/jmdns/impl/DNSTaskStarter.h"

@class IOSObjectArray;
@class JavaLangThread;
@class JavaNetInetAddress;
@class JavaNetMulticastSocket;
@class JavaUtilRandom;
@class JavaxJmdnsImplConstantsDNSState;
@class JavaxJmdnsImplDNSCache;
@class JavaxJmdnsImplDNSIncoming;
@class JavaxJmdnsImplDNSOutgoing;
@class JavaxJmdnsImplDNSQuestion;
@class JavaxJmdnsImplDNSRecord;
@class JavaxJmdnsImplHostInfo;
@class JavaxJmdnsImplJmDNSImpl_Operation;
@class JavaxJmdnsImplServiceInfoImpl;
@class JavaxJmdnsImplTasksDNSTask;
@class JavaxJmdnsServiceEvent;
@class JavaxJmdnsServiceInfo;
@protocol JavaUtilMap;
@protocol JavaxJmdnsImplDNSListener;
@protocol JavaxJmdnsJmDNS_Delegate;
@protocol JavaxJmdnsServiceListener;
@protocol JavaxJmdnsServiceTypeListener;

@interface JavaxJmdnsImplJmDNSImpl : JavaxJmdnsJmDNS < JavaxJmdnsImplDNSStatefulObject, JavaxJmdnsImplDNSTaskStarter > {
 @public
  JavaLangThread *_shutdown_;
}

#pragma mark Public

- (instancetype)initWithJavaNetInetAddress:(JavaNetInetAddress *)address
                              withNSString:(NSString *)name;

- (JavaxJmdnsImplDNSOutgoing *)addAnswerWithJavaxJmdnsImplDNSIncoming:(JavaxJmdnsImplDNSIncoming *)inArg
                                               withJavaNetInetAddress:(JavaNetInetAddress *)addr
                                                              withInt:(jint)port
                                        withJavaxJmdnsImplDNSOutgoing:(JavaxJmdnsImplDNSOutgoing *)outArg
                                          withJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *)rec;

- (void)addListenerWithJavaxJmdnsImplDNSListener:(id<JavaxJmdnsImplDNSListener>)listener
                   withJavaxJmdnsImplDNSQuestion:(JavaxJmdnsImplDNSQuestion *)question;

- (void)addServiceListenerWithNSString:(NSString *)type
         withJavaxJmdnsServiceListener:(id<JavaxJmdnsServiceListener>)listener;

- (void)addServiceTypeListenerWithJavaxJmdnsServiceTypeListener:(id<JavaxJmdnsServiceTypeListener>)listener;

- (jboolean)advanceStateWithJavaxJmdnsImplTasksDNSTask:(JavaxJmdnsImplTasksDNSTask *)task;

- (void)associateWithTaskWithJavaxJmdnsImplTasksDNSTask:(JavaxJmdnsImplTasksDNSTask *)task
                    withJavaxJmdnsImplConstantsDNSState:(JavaxJmdnsImplConstantsDNSState *)state;

- (jboolean)cancelState;

- (void)cancelStateTimer;

- (void)cancelTimer;

- (void)cleanCache;

- (void)close;

- (jboolean)closeState;

- (JavaxJmdnsImplDNSCache *)getCache;

- (id<JavaxJmdnsJmDNS_Delegate>)getDelegate;

- (JavaxJmdnsImplJmDNSImpl *)getDns;

- (JavaNetInetAddress *)getGroup;

- (NSString *)getHostName;

- (JavaNetInetAddress *)getInterface;

- (jlong)getLastThrottleIncrement;

- (JavaxJmdnsImplHostInfo *)getLocalHost;

- (NSString *)getName;

- (JavaxJmdnsImplDNSIncoming *)getPlannedAnswer;

+ (JavaUtilRandom *)getRandom;

- (JavaxJmdnsServiceInfo *)getServiceInfoWithNSString:(NSString *)type
                                         withNSString:(NSString *)name;

- (JavaxJmdnsServiceInfo *)getServiceInfoWithNSString:(NSString *)type
                                         withNSString:(NSString *)name
                                          withBoolean:(jboolean)persistent;

- (JavaxJmdnsServiceInfo *)getServiceInfoWithNSString:(NSString *)type
                                         withNSString:(NSString *)name
                                          withBoolean:(jboolean)persistent
                                             withLong:(jlong)timeout;

- (JavaxJmdnsServiceInfo *)getServiceInfoWithNSString:(NSString *)type
                                         withNSString:(NSString *)name
                                             withLong:(jlong)timeout;

- (id<JavaUtilMap>)getServices;

- (id<JavaUtilMap>)getServiceTypes;

- (JavaNetMulticastSocket *)getSocket;

- (jint)getThrottle;

- (void)ioLock;

- (void)ioUnlock;

- (jboolean)isAnnounced;

- (jboolean)isAnnouncing;

- (jboolean)isAssociatedWithTaskWithJavaxJmdnsImplTasksDNSTask:(JavaxJmdnsImplTasksDNSTask *)task
                           withJavaxJmdnsImplConstantsDNSState:(JavaxJmdnsImplConstantsDNSState *)state;

- (jboolean)isCanceled;

- (jboolean)isCanceling;

- (jboolean)isClosed;

- (jboolean)isClosing;

- (jboolean)isProbing;

- (IOSObjectArray *)listWithNSString:(NSString *)type;

- (IOSObjectArray *)listWithNSString:(NSString *)type
                            withLong:(jlong)timeout;

- (id<JavaUtilMap>)listBySubtypeWithNSString:(NSString *)type;

- (id<JavaUtilMap>)listBySubtypeWithNSString:(NSString *)type
                                    withLong:(jlong)timeout;

+ (void)mainWithNSStringArray:(IOSObjectArray *)argv;

- (void)printServices;

- (void)purgeStateTimer;

- (void)purgeTimer;

- (void)recover;

- (jboolean)recoverState;

- (void)registerServiceWithJavaxJmdnsServiceInfo:(JavaxJmdnsServiceInfo *)infoAbstract;

- (jboolean)registerServiceTypeWithNSString:(NSString *)type;

- (void)removeAssociationWithTaskWithJavaxJmdnsImplTasksDNSTask:(JavaxJmdnsImplTasksDNSTask *)task;

- (void)removeListenerWithJavaxJmdnsImplDNSListener:(id<JavaxJmdnsImplDNSListener>)listener;

- (void)removeServiceListenerWithNSString:(NSString *)type
            withJavaxJmdnsServiceListener:(id<JavaxJmdnsServiceListener>)listener;

- (void)removeServiceTypeListenerWithJavaxJmdnsServiceTypeListener:(id<JavaxJmdnsServiceTypeListener>)listener;

- (void)renewServiceCollectorWithJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *)record;

- (void)requestServiceInfoWithNSString:(NSString *)type
                          withNSString:(NSString *)name;

- (void)requestServiceInfoWithNSString:(NSString *)type
                          withNSString:(NSString *)name
                           withBoolean:(jboolean)persistent;

- (void)requestServiceInfoWithNSString:(NSString *)type
                          withNSString:(NSString *)name
                           withBoolean:(jboolean)persistent
                              withLong:(jlong)timeout;

- (void)requestServiceInfoWithNSString:(NSString *)type
                          withNSString:(NSString *)name
                              withLong:(jlong)timeout;

- (void)respondToQueryWithJavaxJmdnsImplDNSIncoming:(JavaxJmdnsImplDNSIncoming *)inArg;

- (jboolean)revertState;

- (void)sendWithJavaxJmdnsImplDNSOutgoing:(JavaxJmdnsImplDNSOutgoing *)outArg;

- (id<JavaxJmdnsJmDNS_Delegate>)setDelegateWithJavaxJmdnsJmDNS_Delegate:(id<JavaxJmdnsJmDNS_Delegate>)delegate;

- (void)setLastThrottleIncrementWithLong:(jlong)lastThrottleIncrement;

- (void)setPlannedAnswerWithJavaxJmdnsImplDNSIncoming:(JavaxJmdnsImplDNSIncoming *)plannedAnswer;

- (void)setThrottleWithInt:(jint)throttle;

- (void)startAnnouncer;

- (void)startCanceler;

- (void)startProber;

- (void)startReaper;

- (void)startRenewer;

- (void)startResponderWithJavaxJmdnsImplDNSIncoming:(JavaxJmdnsImplDNSIncoming *)inArg
                                            withInt:(jint)port;

- (void)startServiceInfoResolverWithJavaxJmdnsImplServiceInfoImpl:(JavaxJmdnsImplServiceInfoImpl *)info;

- (void)startServiceResolverWithNSString:(NSString *)type;

- (void)startTypeResolver;

- (NSString *)description;

- (void)unregisterAllServices;

- (void)unregisterServiceWithJavaxJmdnsServiceInfo:(JavaxJmdnsServiceInfo *)infoAbstract;

- (void)updateRecordWithLong:(jlong)now
 withJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *)rec
withJavaxJmdnsImplJmDNSImpl_Operation:(JavaxJmdnsImplJmDNSImpl_Operation *)operation;

- (jboolean)waitForAnnouncedWithLong:(jlong)timeout;

- (jboolean)waitForCanceledWithLong:(jlong)timeout;

#pragma mark Package-Private

- (void)__recover;

- (JavaxJmdnsImplServiceInfoImpl *)getServiceInfoFromCacheWithNSString:(NSString *)type
                                                          withNSString:(NSString *)name
                                                          withNSString:(NSString *)subtype
                                                           withBoolean:(jboolean)persistent;

- (void)handleQueryWithJavaxJmdnsImplDNSIncoming:(JavaxJmdnsImplDNSIncoming *)inArg
                          withJavaNetInetAddress:(JavaNetInetAddress *)addr
                                         withInt:(jint)port;

- (void)handleRecordWithJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *)record
                                       withLong:(jlong)now;

- (void)handleResponseWithJavaxJmdnsImplDNSIncoming:(JavaxJmdnsImplDNSIncoming *)msg;

- (void)handleServiceResolvedWithJavaxJmdnsServiceEvent:(JavaxJmdnsServiceEvent *)event;

- (NSString *)incrementNameWithNSString:(NSString *)name;

- (JavaxJmdnsImplServiceInfoImpl *)resolveServiceInfoWithNSString:(NSString *)type
                                                     withNSString:(NSString *)name
                                                     withNSString:(NSString *)subtype
                                                      withBoolean:(jboolean)persistent;

- (void)setLocalHostWithJavaxJmdnsImplHostInfo:(JavaxJmdnsImplHostInfo *)localHost;

+ (NSString *)toUnqualifiedNameWithNSString:(NSString *)type
                               withNSString:(NSString *)qualifiedName;

@end

J2OBJC_STATIC_INIT(JavaxJmdnsImplJmDNSImpl)

J2OBJC_FIELD_SETTER(JavaxJmdnsImplJmDNSImpl, _shutdown_, JavaLangThread *)

FOUNDATION_EXPORT void JavaxJmdnsImplJmDNSImpl_mainWithNSStringArray_(IOSObjectArray *argv);

FOUNDATION_EXPORT void JavaxJmdnsImplJmDNSImpl_initWithJavaNetInetAddress_withNSString_(JavaxJmdnsImplJmDNSImpl *self, JavaNetInetAddress *address, NSString *name);

FOUNDATION_EXPORT JavaxJmdnsImplJmDNSImpl *new_JavaxJmdnsImplJmDNSImpl_initWithJavaNetInetAddress_withNSString_(JavaNetInetAddress *address, NSString *name) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxJmdnsImplJmDNSImpl *create_JavaxJmdnsImplJmDNSImpl_initWithJavaNetInetAddress_withNSString_(JavaNetInetAddress *address, NSString *name);

FOUNDATION_EXPORT NSString *JavaxJmdnsImplJmDNSImpl_toUnqualifiedNameWithNSString_withNSString_(NSString *type, NSString *qualifiedName);

FOUNDATION_EXPORT JavaUtilRandom *JavaxJmdnsImplJmDNSImpl_getRandom();

J2OBJC_TYPE_LITERAL_HEADER(JavaxJmdnsImplJmDNSImpl)

#endif

#if !defined (JavaxJmdnsImplJmDNSImpl_Operation_) && (INCLUDE_ALL_JavaxJmdnsImplJmDNSImpl || defined(INCLUDE_JavaxJmdnsImplJmDNSImpl_Operation))
#define JavaxJmdnsImplJmDNSImpl_Operation_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, JavaxJmdnsImplJmDNSImpl_Operation_Enum) {
  JavaxJmdnsImplJmDNSImpl_Operation_Enum_Remove = 0,
  JavaxJmdnsImplJmDNSImpl_Operation_Enum_Update = 1,
  JavaxJmdnsImplJmDNSImpl_Operation_Enum_Add = 2,
  JavaxJmdnsImplJmDNSImpl_Operation_Enum_RegisterServiceType = 3,
  JavaxJmdnsImplJmDNSImpl_Operation_Enum_Noop = 4,
};

@interface JavaxJmdnsImplJmDNSImpl_Operation : JavaLangEnum < NSCopying >

#pragma mark Public

+ (JavaxJmdnsImplJmDNSImpl_Operation *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(JavaxJmdnsImplJmDNSImpl_Operation)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT JavaxJmdnsImplJmDNSImpl_Operation *JavaxJmdnsImplJmDNSImpl_Operation_values_[];

inline JavaxJmdnsImplJmDNSImpl_Operation *JavaxJmdnsImplJmDNSImpl_Operation_get_Remove();
J2OBJC_ENUM_CONSTANT(JavaxJmdnsImplJmDNSImpl_Operation, Remove)

inline JavaxJmdnsImplJmDNSImpl_Operation *JavaxJmdnsImplJmDNSImpl_Operation_get_Update();
J2OBJC_ENUM_CONSTANT(JavaxJmdnsImplJmDNSImpl_Operation, Update)

inline JavaxJmdnsImplJmDNSImpl_Operation *JavaxJmdnsImplJmDNSImpl_Operation_get_Add();
J2OBJC_ENUM_CONSTANT(JavaxJmdnsImplJmDNSImpl_Operation, Add)

inline JavaxJmdnsImplJmDNSImpl_Operation *JavaxJmdnsImplJmDNSImpl_Operation_get_RegisterServiceType();
J2OBJC_ENUM_CONSTANT(JavaxJmdnsImplJmDNSImpl_Operation, RegisterServiceType)

inline JavaxJmdnsImplJmDNSImpl_Operation *JavaxJmdnsImplJmDNSImpl_Operation_get_Noop();
J2OBJC_ENUM_CONSTANT(JavaxJmdnsImplJmDNSImpl_Operation, Noop)

FOUNDATION_EXPORT IOSObjectArray *JavaxJmdnsImplJmDNSImpl_Operation_values();

FOUNDATION_EXPORT JavaxJmdnsImplJmDNSImpl_Operation *JavaxJmdnsImplJmDNSImpl_Operation_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT JavaxJmdnsImplJmDNSImpl_Operation *JavaxJmdnsImplJmDNSImpl_Operation_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(JavaxJmdnsImplJmDNSImpl_Operation)

#endif

#if !defined (JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry_) && (INCLUDE_ALL_JavaxJmdnsImplJmDNSImpl || defined(INCLUDE_JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry))
#define JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry_

#define RESTRICT_JavaUtilAbstractMap 1
#define INCLUDE_JavaUtilAbstractMap 1
#include "java/util/AbstractMap.h"

@protocol JavaUtilFunctionBiFunction;
@protocol JavaUtilFunctionFunction;
@protocol JavaUtilIterator;
@protocol JavaUtilSet;

@interface JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry : JavaUtilAbstractMap < NSCopying >

#pragma mark Public

- (instancetype)initWithNSString:(NSString *)type;

- (jboolean)addWithNSString:(NSString *)subtype;

- (JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry *)java_clone;

- (NSString *)computeIfAbsentWithId:(NSString *)arg0
       withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg1;

- (NSString *)computeIfPresentWithId:(NSString *)arg0
      withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg1;

- (NSString *)computeWithId:(NSString *)arg0
withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg1;

- (jboolean)containsWithNSString:(NSString *)subtype;

- (id<JavaUtilSet>)entrySet;

- (NSString *)getOrDefaultWithId:(id)arg0
                          withId:(NSString *)arg1;

- (NSString *)getType;

- (NSString *)getWithId:(id)arg0;

- (id<JavaUtilIterator>)iterator;

- (NSString *)mergeWithId:(NSString *)arg0
                   withId:(NSString *)arg1
withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg2;

- (NSString *)putIfAbsentWithId:(NSString *)arg0
                         withId:(NSString *)arg1;

- (NSString *)putWithId:(NSString *)arg0
                 withId:(NSString *)arg1;

- (NSString *)removeWithId:(id)arg0;

- (NSString *)replaceWithId:(NSString *)arg0
                     withId:(NSString *)arg1;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry)

FOUNDATION_EXPORT void JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry_initWithNSString_(JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry *self, NSString *type);

FOUNDATION_EXPORT JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry *new_JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry_initWithNSString_(NSString *type) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry *create_JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry_initWithNSString_(NSString *type);

J2OBJC_TYPE_LITERAL_HEADER(JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry)

#endif

#if !defined (JavaxJmdnsImplJmDNSImpl_Shutdown_) && (INCLUDE_ALL_JavaxJmdnsImplJmDNSImpl || defined(INCLUDE_JavaxJmdnsImplJmDNSImpl_Shutdown))
#define JavaxJmdnsImplJmDNSImpl_Shutdown_

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class JavaxJmdnsImplJmDNSImpl;

@interface JavaxJmdnsImplJmDNSImpl_Shutdown : NSObject < JavaLangRunnable >

#pragma mark Public

- (void)run;

#pragma mark Protected

- (instancetype)initWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxJmdnsImplJmDNSImpl_Shutdown)

FOUNDATION_EXPORT void JavaxJmdnsImplJmDNSImpl_Shutdown_initWithJavaxJmdnsImplJmDNSImpl_(JavaxJmdnsImplJmDNSImpl_Shutdown *self, JavaxJmdnsImplJmDNSImpl *outer$);

FOUNDATION_EXPORT JavaxJmdnsImplJmDNSImpl_Shutdown *new_JavaxJmdnsImplJmDNSImpl_Shutdown_initWithJavaxJmdnsImplJmDNSImpl_(JavaxJmdnsImplJmDNSImpl *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxJmdnsImplJmDNSImpl_Shutdown *create_JavaxJmdnsImplJmDNSImpl_Shutdown_initWithJavaxJmdnsImplJmDNSImpl_(JavaxJmdnsImplJmDNSImpl *outer$);

J2OBJC_TYPE_LITERAL_HEADER(JavaxJmdnsImplJmDNSImpl_Shutdown)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaxJmdnsImplJmDNSImpl")
