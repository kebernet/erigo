//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/jmdns/impl/JmDNSImpl.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/PrintStream.h"
#include "java/io/Serializable.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Enum.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Runnable.h"
#include "java/lang/Runtime.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/net/DatagramPacket.h"
#include "java/net/Inet4Address.h"
#include "java/net/Inet6Address.h"
#include "java/net/InetAddress.h"
#include "java/net/MulticastSocket.h"
#include "java/net/NetworkInterface.h"
#include "java/net/SocketException.h"
#include "java/util/AbstractMap.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/util/Random.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/ConcurrentMap.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/locks/ReentrantLock.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "javax/jmdns/JmDNS.h"
#include "javax/jmdns/ServiceEvent.h"
#include "javax/jmdns/ServiceInfo.h"
#include "javax/jmdns/ServiceListener.h"
#include "javax/jmdns/ServiceTypeListener.h"
#include "javax/jmdns/impl/DNSCache.h"
#include "javax/jmdns/impl/DNSEntry.h"
#include "javax/jmdns/impl/DNSIncoming.h"
#include "javax/jmdns/impl/DNSListener.h"
#include "javax/jmdns/impl/DNSOutgoing.h"
#include "javax/jmdns/impl/DNSQuestion.h"
#include "javax/jmdns/impl/DNSRecord.h"
#include "javax/jmdns/impl/DNSTaskStarter.h"
#include "javax/jmdns/impl/HostInfo.h"
#include "javax/jmdns/impl/JmDNSImpl.h"
#include "javax/jmdns/impl/ListenerStatus.h"
#include "javax/jmdns/impl/ServiceEventImpl.h"
#include "javax/jmdns/impl/ServiceInfoImpl.h"
#include "javax/jmdns/impl/SocketListener.h"
#include "javax/jmdns/impl/constants/DNSConstants.h"
#include "javax/jmdns/impl/constants/DNSRecordClass.h"
#include "javax/jmdns/impl/constants/DNSRecordType.h"
#include "javax/jmdns/impl/constants/DNSState.h"
#include "javax/jmdns/impl/tasks/DNSTask.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface JavaxJmdnsImplJmDNSImpl () {
 @public
  volatile_id _group_;
  volatile_id _socket_;
  id<JavaUtilList> _listeners_;
  id<JavaUtilConcurrentConcurrentMap> _serviceListeners_;
  id<JavaUtilSet> _typeListeners_;
  JavaxJmdnsImplDNSCache *_cache_;
  id<JavaUtilConcurrentConcurrentMap> _services_;
  id<JavaUtilConcurrentConcurrentMap> _serviceTypes_;
  volatile_id _delegate_;
  JavaxJmdnsImplHostInfo *_localHost_;
  JavaLangThread *_incomingListener_;
  jint _throttle_;
  jlong _lastThrottleIncrement_;
  id<JavaUtilConcurrentExecutorService> _executor_;
  JavaUtilConcurrentLocksReentrantLock *_ioLock_;
  JavaxJmdnsImplDNSIncoming *_plannedAnswer_;
  id<JavaUtilConcurrentConcurrentMap> _serviceCollectors_;
  NSString *_name_;
  id _recoverLock_;
}

- (void)startWithJavaUtilCollection:(id<JavaUtilCollection>)serviceInfos;

- (void)openMulticastSocketWithJavaxJmdnsImplHostInfo:(JavaxJmdnsImplHostInfo *)hostInfo;

- (void)closeMulticastSocket;

- (void)waitForInfoDataWithJavaxJmdnsServiceInfo:(JavaxJmdnsServiceInfo *)info
                                        withLong:(jlong)timeout;

- (void)addServiceListenerWithNSString:(NSString *)type
         withJavaxJmdnsServiceListener:(id<JavaxJmdnsServiceListener>)listener
                           withBoolean:(jboolean)synch;

- (jboolean)makeServiceNameUniqueWithJavaxJmdnsImplServiceInfoImpl:(JavaxJmdnsImplServiceInfoImpl *)info;

- (void)disposeServiceCollectors;

@end

J2OBJC_VOLATILE_FIELD_SETTER(JavaxJmdnsImplJmDNSImpl, _group_, JavaNetInetAddress *)
J2OBJC_VOLATILE_FIELD_SETTER(JavaxJmdnsImplJmDNSImpl, _socket_, JavaNetMulticastSocket *)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplJmDNSImpl, _listeners_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplJmDNSImpl, _serviceListeners_, id<JavaUtilConcurrentConcurrentMap>)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplJmDNSImpl, _typeListeners_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplJmDNSImpl, _cache_, JavaxJmdnsImplDNSCache *)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplJmDNSImpl, _services_, id<JavaUtilConcurrentConcurrentMap>)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplJmDNSImpl, _serviceTypes_, id<JavaUtilConcurrentConcurrentMap>)
J2OBJC_VOLATILE_FIELD_SETTER(JavaxJmdnsImplJmDNSImpl, _delegate_, id<JavaxJmdnsJmDNS_Delegate>)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplJmDNSImpl, _localHost_, JavaxJmdnsImplHostInfo *)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplJmDNSImpl, _incomingListener_, JavaLangThread *)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplJmDNSImpl, _executor_, id<JavaUtilConcurrentExecutorService>)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplJmDNSImpl, _ioLock_, JavaUtilConcurrentLocksReentrantLock *)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplJmDNSImpl, _plannedAnswer_, JavaxJmdnsImplDNSIncoming *)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplJmDNSImpl, _serviceCollectors_, id<JavaUtilConcurrentConcurrentMap>)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplJmDNSImpl, _name_, NSString *)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplJmDNSImpl, _recoverLock_, id)

inline JavaUtilLoggingLogger *JavaxJmdnsImplJmDNSImpl_get_logger();
inline JavaUtilLoggingLogger *JavaxJmdnsImplJmDNSImpl_set_logger(JavaUtilLoggingLogger *value);
static JavaUtilLoggingLogger *JavaxJmdnsImplJmDNSImpl_logger;
J2OBJC_STATIC_FIELD_OBJ(JavaxJmdnsImplJmDNSImpl, logger, JavaUtilLoggingLogger *)

inline JavaUtilRandom *JavaxJmdnsImplJmDNSImpl_get__random();
static JavaUtilRandom *JavaxJmdnsImplJmDNSImpl__random;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaxJmdnsImplJmDNSImpl, _random, JavaUtilRandom *)

__attribute__((unused)) static void JavaxJmdnsImplJmDNSImpl_startWithJavaUtilCollection_(JavaxJmdnsImplJmDNSImpl *self, id<JavaUtilCollection> serviceInfos);

__attribute__((unused)) static void JavaxJmdnsImplJmDNSImpl_openMulticastSocketWithJavaxJmdnsImplHostInfo_(JavaxJmdnsImplJmDNSImpl *self, JavaxJmdnsImplHostInfo *hostInfo);

__attribute__((unused)) static void JavaxJmdnsImplJmDNSImpl_closeMulticastSocket(JavaxJmdnsImplJmDNSImpl *self);

__attribute__((unused)) static void JavaxJmdnsImplJmDNSImpl_waitForInfoDataWithJavaxJmdnsServiceInfo_withLong_(JavaxJmdnsImplJmDNSImpl *self, JavaxJmdnsServiceInfo *info, jlong timeout);

__attribute__((unused)) static void JavaxJmdnsImplJmDNSImpl_addServiceListenerWithNSString_withJavaxJmdnsServiceListener_withBoolean_(JavaxJmdnsImplJmDNSImpl *self, NSString *type, id<JavaxJmdnsServiceListener> listener, jboolean synch);

__attribute__((unused)) static jboolean JavaxJmdnsImplJmDNSImpl_makeServiceNameUniqueWithJavaxJmdnsImplServiceInfoImpl_(JavaxJmdnsImplJmDNSImpl *self, JavaxJmdnsImplServiceInfoImpl *info);

__attribute__((unused)) static void JavaxJmdnsImplJmDNSImpl_disposeServiceCollectors(JavaxJmdnsImplJmDNSImpl *self);

__attribute__((unused)) static IOSObjectArray *JavaxJmdnsImplJmDNSImpl__Annotations$0();

__attribute__((unused)) static void JavaxJmdnsImplJmDNSImpl_Operation_initWithNSString_withInt_(JavaxJmdnsImplJmDNSImpl_Operation *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static JavaxJmdnsImplJmDNSImpl_Operation *new_JavaxJmdnsImplJmDNSImpl_Operation_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry () {
 @public
  id<JavaUtilSet> _entrySet_;
  NSString *_type_;
}

@end

J2OBJC_FIELD_SETTER(JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry, _entrySet_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry, _type_, NSString *)

@interface JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry_SubTypeEntry : NSObject < JavaUtilMap_Entry, JavaIoSerializable, NSCopying > {
 @public
  NSString *_key_;
  NSString *_value_;
}

- (instancetype)initWithNSString:(NSString *)subtype;

- (NSString *)getKey;

- (NSString *)getValue;

- (NSString *)setValueWithId:(NSString *)value;

- (jboolean)isEqual:(id)entry_;

- (NSUInteger)hash;

- (JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry_SubTypeEntry *)java_clone;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry_SubTypeEntry)

J2OBJC_FIELD_SETTER(JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry_SubTypeEntry, _key_, NSString *)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry_SubTypeEntry, _value_, NSString *)

inline jlong JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry_SubTypeEntry_get_serialVersionUID();
#define JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry_SubTypeEntry_serialVersionUID 9188503522395855322LL
J2OBJC_STATIC_FIELD_CONSTANT(JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry_SubTypeEntry, serialVersionUID, jlong)

__attribute__((unused)) static void JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry_SubTypeEntry_initWithNSString_(JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry_SubTypeEntry *self, NSString *subtype);

__attribute__((unused)) static JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry_SubTypeEntry *new_JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry_SubTypeEntry_initWithNSString_(NSString *subtype) NS_RETURNS_RETAINED;

__attribute__((unused)) static JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry_SubTypeEntry *create_JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry_SubTypeEntry_initWithNSString_(NSString *subtype);

J2OBJC_TYPE_LITERAL_HEADER(JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry_SubTypeEntry)

@interface JavaxJmdnsImplJmDNSImpl_1 : NSObject < JavaLangRunnable > {
 @public
  JavaxJmdnsImplListenerStatus_ServiceListenerStatus *val$listener_;
  JavaxJmdnsServiceEvent *val$localEvent_;
}

- (instancetype)initWithJavaxJmdnsImplListenerStatus_ServiceListenerStatus:(JavaxJmdnsImplListenerStatus_ServiceListenerStatus *)capture$0
                                                withJavaxJmdnsServiceEvent:(JavaxJmdnsServiceEvent *)capture$1;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxJmdnsImplJmDNSImpl_1)

__attribute__((unused)) static void JavaxJmdnsImplJmDNSImpl_1_initWithJavaxJmdnsImplListenerStatus_ServiceListenerStatus_withJavaxJmdnsServiceEvent_(JavaxJmdnsImplJmDNSImpl_1 *self, JavaxJmdnsImplListenerStatus_ServiceListenerStatus *capture$0, JavaxJmdnsServiceEvent *capture$1);

__attribute__((unused)) static JavaxJmdnsImplJmDNSImpl_1 *new_JavaxJmdnsImplJmDNSImpl_1_initWithJavaxJmdnsImplListenerStatus_ServiceListenerStatus_withJavaxJmdnsServiceEvent_(JavaxJmdnsImplListenerStatus_ServiceListenerStatus *capture$0, JavaxJmdnsServiceEvent *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static JavaxJmdnsImplJmDNSImpl_1 *create_JavaxJmdnsImplJmDNSImpl_1_initWithJavaxJmdnsImplListenerStatus_ServiceListenerStatus_withJavaxJmdnsServiceEvent_(JavaxJmdnsImplListenerStatus_ServiceListenerStatus *capture$0, JavaxJmdnsServiceEvent *capture$1);

@interface JavaxJmdnsImplJmDNSImpl_2 : NSObject < JavaLangRunnable > {
 @public
  JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus *val$status_;
  JavaxJmdnsServiceEvent *val$event_;
}

- (instancetype)initWithJavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus:(JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus *)capture$0
                                                    withJavaxJmdnsServiceEvent:(JavaxJmdnsServiceEvent *)capture$1;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxJmdnsImplJmDNSImpl_2)

__attribute__((unused)) static void JavaxJmdnsImplJmDNSImpl_2_initWithJavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus_withJavaxJmdnsServiceEvent_(JavaxJmdnsImplJmDNSImpl_2 *self, JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus *capture$0, JavaxJmdnsServiceEvent *capture$1);

__attribute__((unused)) static JavaxJmdnsImplJmDNSImpl_2 *new_JavaxJmdnsImplJmDNSImpl_2_initWithJavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus_withJavaxJmdnsServiceEvent_(JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus *capture$0, JavaxJmdnsServiceEvent *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static JavaxJmdnsImplJmDNSImpl_2 *create_JavaxJmdnsImplJmDNSImpl_2_initWithJavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus_withJavaxJmdnsServiceEvent_(JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus *capture$0, JavaxJmdnsServiceEvent *capture$1);

@interface JavaxJmdnsImplJmDNSImpl_3 : NSObject < JavaLangRunnable > {
 @public
  JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus *val$status_;
  JavaxJmdnsServiceEvent *val$event_;
}

- (instancetype)initWithJavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus:(JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus *)capture$0
                                                    withJavaxJmdnsServiceEvent:(JavaxJmdnsServiceEvent *)capture$1;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxJmdnsImplJmDNSImpl_3)

__attribute__((unused)) static void JavaxJmdnsImplJmDNSImpl_3_initWithJavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus_withJavaxJmdnsServiceEvent_(JavaxJmdnsImplJmDNSImpl_3 *self, JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus *capture$0, JavaxJmdnsServiceEvent *capture$1);

__attribute__((unused)) static JavaxJmdnsImplJmDNSImpl_3 *new_JavaxJmdnsImplJmDNSImpl_3_initWithJavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus_withJavaxJmdnsServiceEvent_(JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus *capture$0, JavaxJmdnsServiceEvent *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static JavaxJmdnsImplJmDNSImpl_3 *create_JavaxJmdnsImplJmDNSImpl_3_initWithJavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus_withJavaxJmdnsServiceEvent_(JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus *capture$0, JavaxJmdnsServiceEvent *capture$1);

@interface JavaxJmdnsImplJmDNSImpl_4 : NSObject < JavaLangRunnable > {
 @public
  JavaxJmdnsImplListenerStatus_ServiceListenerStatus *val$listener_;
  JavaxJmdnsServiceEvent *val$localEvent_;
}

- (instancetype)initWithJavaxJmdnsImplListenerStatus_ServiceListenerStatus:(JavaxJmdnsImplListenerStatus_ServiceListenerStatus *)capture$0
                                                withJavaxJmdnsServiceEvent:(JavaxJmdnsServiceEvent *)capture$1;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxJmdnsImplJmDNSImpl_4)

__attribute__((unused)) static void JavaxJmdnsImplJmDNSImpl_4_initWithJavaxJmdnsImplListenerStatus_ServiceListenerStatus_withJavaxJmdnsServiceEvent_(JavaxJmdnsImplJmDNSImpl_4 *self, JavaxJmdnsImplListenerStatus_ServiceListenerStatus *capture$0, JavaxJmdnsServiceEvent *capture$1);

__attribute__((unused)) static JavaxJmdnsImplJmDNSImpl_4 *new_JavaxJmdnsImplJmDNSImpl_4_initWithJavaxJmdnsImplListenerStatus_ServiceListenerStatus_withJavaxJmdnsServiceEvent_(JavaxJmdnsImplListenerStatus_ServiceListenerStatus *capture$0, JavaxJmdnsServiceEvent *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static JavaxJmdnsImplJmDNSImpl_4 *create_JavaxJmdnsImplJmDNSImpl_4_initWithJavaxJmdnsImplListenerStatus_ServiceListenerStatus_withJavaxJmdnsServiceEvent_(JavaxJmdnsImplListenerStatus_ServiceListenerStatus *capture$0, JavaxJmdnsServiceEvent *capture$1);

@interface JavaxJmdnsImplJmDNSImpl_5 : NSObject < JavaLangRunnable > {
 @public
  JavaxJmdnsImplListenerStatus_ServiceListenerStatus *val$listener_;
  JavaxJmdnsServiceEvent *val$localEvent_;
}

- (instancetype)initWithJavaxJmdnsImplListenerStatus_ServiceListenerStatus:(JavaxJmdnsImplListenerStatus_ServiceListenerStatus *)capture$0
                                                withJavaxJmdnsServiceEvent:(JavaxJmdnsServiceEvent *)capture$1;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxJmdnsImplJmDNSImpl_5)

__attribute__((unused)) static void JavaxJmdnsImplJmDNSImpl_5_initWithJavaxJmdnsImplListenerStatus_ServiceListenerStatus_withJavaxJmdnsServiceEvent_(JavaxJmdnsImplJmDNSImpl_5 *self, JavaxJmdnsImplListenerStatus_ServiceListenerStatus *capture$0, JavaxJmdnsServiceEvent *capture$1);

__attribute__((unused)) static JavaxJmdnsImplJmDNSImpl_5 *new_JavaxJmdnsImplJmDNSImpl_5_initWithJavaxJmdnsImplListenerStatus_ServiceListenerStatus_withJavaxJmdnsServiceEvent_(JavaxJmdnsImplListenerStatus_ServiceListenerStatus *capture$0, JavaxJmdnsServiceEvent *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static JavaxJmdnsImplJmDNSImpl_5 *create_JavaxJmdnsImplJmDNSImpl_5_initWithJavaxJmdnsImplListenerStatus_ServiceListenerStatus_withJavaxJmdnsServiceEvent_(JavaxJmdnsImplListenerStatus_ServiceListenerStatus *capture$0, JavaxJmdnsServiceEvent *capture$1);

@interface JavaxJmdnsImplJmDNSImpl_Shutdown () {
 @public
  JavaxJmdnsImplJmDNSImpl *this$0_;
}

@end

@interface JavaxJmdnsImplJmDNSImpl_6 : JavaLangThread {
 @public
  JavaxJmdnsImplJmDNSImpl *this$0_;
}

- (instancetype)initWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)outer$
                                   withNSString:(NSString *)x0;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxJmdnsImplJmDNSImpl_6)

__attribute__((unused)) static void JavaxJmdnsImplJmDNSImpl_6_initWithJavaxJmdnsImplJmDNSImpl_withNSString_(JavaxJmdnsImplJmDNSImpl_6 *self, JavaxJmdnsImplJmDNSImpl *outer$, NSString *x0);

__attribute__((unused)) static JavaxJmdnsImplJmDNSImpl_6 *new_JavaxJmdnsImplJmDNSImpl_6_initWithJavaxJmdnsImplJmDNSImpl_withNSString_(JavaxJmdnsImplJmDNSImpl *outer$, NSString *x0) NS_RETURNS_RETAINED;

__attribute__((unused)) static JavaxJmdnsImplJmDNSImpl_6 *create_JavaxJmdnsImplJmDNSImpl_6_initWithJavaxJmdnsImplJmDNSImpl_withNSString_(JavaxJmdnsImplJmDNSImpl *outer$, NSString *x0);

@interface JavaxJmdnsImplJmDNSImpl_ServiceCollector : NSObject < JavaxJmdnsServiceListener > {
 @public
  id<JavaUtilConcurrentConcurrentMap> _infos_;
  id<JavaUtilConcurrentConcurrentMap> _events_;
  NSString *_type_;
  volatile_jboolean _needToWaitForInfos_;
}

- (instancetype)initWithNSString:(NSString *)type;

- (void)serviceAddedWithJavaxJmdnsServiceEvent:(JavaxJmdnsServiceEvent *)event;

- (void)serviceRemovedWithJavaxJmdnsServiceEvent:(JavaxJmdnsServiceEvent *)event;

- (void)serviceResolvedWithJavaxJmdnsServiceEvent:(JavaxJmdnsServiceEvent *)event;

- (IOSObjectArray *)listWithLong:(jlong)timeout;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxJmdnsImplJmDNSImpl_ServiceCollector)

J2OBJC_FIELD_SETTER(JavaxJmdnsImplJmDNSImpl_ServiceCollector, _infos_, id<JavaUtilConcurrentConcurrentMap>)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplJmDNSImpl_ServiceCollector, _events_, id<JavaUtilConcurrentConcurrentMap>)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplJmDNSImpl_ServiceCollector, _type_, NSString *)

__attribute__((unused)) static void JavaxJmdnsImplJmDNSImpl_ServiceCollector_initWithNSString_(JavaxJmdnsImplJmDNSImpl_ServiceCollector *self, NSString *type);

__attribute__((unused)) static JavaxJmdnsImplJmDNSImpl_ServiceCollector *new_JavaxJmdnsImplJmDNSImpl_ServiceCollector_initWithNSString_(NSString *type) NS_RETURNS_RETAINED;

__attribute__((unused)) static JavaxJmdnsImplJmDNSImpl_ServiceCollector *create_JavaxJmdnsImplJmDNSImpl_ServiceCollector_initWithNSString_(NSString *type);

J2OBJC_TYPE_LITERAL_HEADER(JavaxJmdnsImplJmDNSImpl_ServiceCollector)

J2OBJC_INITIALIZED_DEFN(JavaxJmdnsImplJmDNSImpl)

@implementation JavaxJmdnsImplJmDNSImpl

+ (void)mainWithNSStringArray:(IOSObjectArray *)argv {
  JavaxJmdnsImplJmDNSImpl_mainWithNSStringArray_(argv);
}

- (instancetype)initWithJavaNetInetAddress:(JavaNetInetAddress *)address
                              withNSString:(NSString *)name {
  JavaxJmdnsImplJmDNSImpl_initWithJavaNetInetAddress_withNSString_(self, address, name);
  return self;
}

- (void)startWithJavaUtilCollection:(id<JavaUtilCollection>)serviceInfos {
  JavaxJmdnsImplJmDNSImpl_startWithJavaUtilCollection_(self, serviceInfos);
}

- (void)openMulticastSocketWithJavaxJmdnsImplHostInfo:(JavaxJmdnsImplHostInfo *)hostInfo {
  JavaxJmdnsImplJmDNSImpl_openMulticastSocketWithJavaxJmdnsImplHostInfo_(self, hostInfo);
}

- (void)closeMulticastSocket {
  JavaxJmdnsImplJmDNSImpl_closeMulticastSocket(self);
}

- (jboolean)advanceStateWithJavaxJmdnsImplTasksDNSTask:(JavaxJmdnsImplTasksDNSTask *)task {
  return [((JavaxJmdnsImplHostInfo *) nil_chk(self->_localHost_)) advanceStateWithJavaxJmdnsImplTasksDNSTask:task];
}

- (jboolean)revertState {
  return [((JavaxJmdnsImplHostInfo *) nil_chk(self->_localHost_)) revertState];
}

- (jboolean)cancelState {
  return [((JavaxJmdnsImplHostInfo *) nil_chk(self->_localHost_)) cancelState];
}

- (jboolean)closeState {
  return [((JavaxJmdnsImplHostInfo *) nil_chk(self->_localHost_)) closeState];
}

- (jboolean)recoverState {
  return [((JavaxJmdnsImplHostInfo *) nil_chk(self->_localHost_)) recoverState];
}

- (JavaxJmdnsImplJmDNSImpl *)getDns {
  return self;
}

- (void)associateWithTaskWithJavaxJmdnsImplTasksDNSTask:(JavaxJmdnsImplTasksDNSTask *)task
                    withJavaxJmdnsImplConstantsDNSState:(JavaxJmdnsImplConstantsDNSState *)state {
  [((JavaxJmdnsImplHostInfo *) nil_chk(self->_localHost_)) associateWithTaskWithJavaxJmdnsImplTasksDNSTask:task withJavaxJmdnsImplConstantsDNSState:state];
}

- (void)removeAssociationWithTaskWithJavaxJmdnsImplTasksDNSTask:(JavaxJmdnsImplTasksDNSTask *)task {
  [((JavaxJmdnsImplHostInfo *) nil_chk(self->_localHost_)) removeAssociationWithTaskWithJavaxJmdnsImplTasksDNSTask:task];
}

- (jboolean)isAssociatedWithTaskWithJavaxJmdnsImplTasksDNSTask:(JavaxJmdnsImplTasksDNSTask *)task
                           withJavaxJmdnsImplConstantsDNSState:(JavaxJmdnsImplConstantsDNSState *)state {
  return [((JavaxJmdnsImplHostInfo *) nil_chk(self->_localHost_)) isAssociatedWithTaskWithJavaxJmdnsImplTasksDNSTask:task withJavaxJmdnsImplConstantsDNSState:state];
}

- (jboolean)isProbing {
  return [((JavaxJmdnsImplHostInfo *) nil_chk(self->_localHost_)) isProbing];
}

- (jboolean)isAnnouncing {
  return [((JavaxJmdnsImplHostInfo *) nil_chk(self->_localHost_)) isAnnouncing];
}

- (jboolean)isAnnounced {
  return [((JavaxJmdnsImplHostInfo *) nil_chk(self->_localHost_)) isAnnounced];
}

- (jboolean)isCanceling {
  return [((JavaxJmdnsImplHostInfo *) nil_chk(self->_localHost_)) isCanceling];
}

- (jboolean)isCanceled {
  return [((JavaxJmdnsImplHostInfo *) nil_chk(self->_localHost_)) isCanceled];
}

- (jboolean)isClosing {
  return [((JavaxJmdnsImplHostInfo *) nil_chk(self->_localHost_)) isClosing];
}

- (jboolean)isClosed {
  return [((JavaxJmdnsImplHostInfo *) nil_chk(self->_localHost_)) isClosed];
}

- (jboolean)waitForAnnouncedWithLong:(jlong)timeout {
  return [((JavaxJmdnsImplHostInfo *) nil_chk(self->_localHost_)) waitForAnnouncedWithLong:timeout];
}

- (jboolean)waitForCanceledWithLong:(jlong)timeout {
  return [((JavaxJmdnsImplHostInfo *) nil_chk(self->_localHost_)) waitForCanceledWithLong:timeout];
}

- (JavaxJmdnsImplDNSCache *)getCache {
  return _cache_;
}

- (NSString *)getName {
  return _name_;
}

- (NSString *)getHostName {
  return [((JavaxJmdnsImplHostInfo *) nil_chk(_localHost_)) getName];
}

- (JavaxJmdnsImplHostInfo *)getLocalHost {
  return _localHost_;
}

- (JavaNetInetAddress *)getInterface {
  return [((JavaNetMulticastSocket *) nil_chk(JreLoadVolatileId(&_socket_))) getInterface];
}

- (JavaxJmdnsServiceInfo *)getServiceInfoWithNSString:(NSString *)type
                                         withNSString:(NSString *)name {
  return [self getServiceInfoWithNSString:type withNSString:name withBoolean:false withLong:JavaxJmdnsImplConstantsDNSConstants_SERVICE_INFO_TIMEOUT];
}

- (JavaxJmdnsServiceInfo *)getServiceInfoWithNSString:(NSString *)type
                                         withNSString:(NSString *)name
                                             withLong:(jlong)timeout {
  return [self getServiceInfoWithNSString:type withNSString:name withBoolean:false withLong:timeout];
}

- (JavaxJmdnsServiceInfo *)getServiceInfoWithNSString:(NSString *)type
                                         withNSString:(NSString *)name
                                          withBoolean:(jboolean)persistent {
  return [self getServiceInfoWithNSString:type withNSString:name withBoolean:persistent withLong:JavaxJmdnsImplConstantsDNSConstants_SERVICE_INFO_TIMEOUT];
}

- (JavaxJmdnsServiceInfo *)getServiceInfoWithNSString:(NSString *)type
                                         withNSString:(NSString *)name
                                          withBoolean:(jboolean)persistent
                                             withLong:(jlong)timeout {
  JavaxJmdnsImplServiceInfoImpl *info = [self resolveServiceInfoWithNSString:type withNSString:name withNSString:@"" withBoolean:persistent];
  JavaxJmdnsImplJmDNSImpl_waitForInfoDataWithJavaxJmdnsServiceInfo_withLong_(self, info, timeout);
  return ([((JavaxJmdnsImplServiceInfoImpl *) nil_chk(info)) hasData] ? info : nil);
}

- (JavaxJmdnsImplServiceInfoImpl *)resolveServiceInfoWithNSString:(NSString *)type
                                                     withNSString:(NSString *)name
                                                     withNSString:(NSString *)subtype
                                                      withBoolean:(jboolean)persistent {
  [self cleanCache];
  NSString *loType = [((NSString *) nil_chk(type)) lowercaseString];
  [self registerServiceTypeWithNSString:type];
  if ([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_serviceCollectors_)) putIfAbsentWithId:loType withId:new_JavaxJmdnsImplJmDNSImpl_ServiceCollector_initWithNSString_(type)] == nil) {
    JavaxJmdnsImplJmDNSImpl_addServiceListenerWithNSString_withJavaxJmdnsServiceListener_withBoolean_(self, loType, [_serviceCollectors_ getWithId:loType], JavaxJmdnsImplListenerStatus_SYNCHONEOUS);
  }
  JavaxJmdnsImplServiceInfoImpl *info = [self getServiceInfoFromCacheWithNSString:type withNSString:name withNSString:subtype withBoolean:persistent];
  [self startServiceInfoResolverWithJavaxJmdnsImplServiceInfoImpl:info];
  return info;
}

- (JavaxJmdnsImplServiceInfoImpl *)getServiceInfoFromCacheWithNSString:(NSString *)type
                                                          withNSString:(NSString *)name
                                                          withNSString:(NSString *)subtype
                                                           withBoolean:(jboolean)persistent {
  JavaxJmdnsImplServiceInfoImpl *info = new_JavaxJmdnsImplServiceInfoImpl_initWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withByteArray_(type, name, subtype, 0, 0, 0, persistent, nil);
  JavaxJmdnsImplDNSEntry *pointerEntry = [((JavaxJmdnsImplDNSCache *) nil_chk([self getCache])) getDNSEntryWithJavaxJmdnsImplDNSEntry:new_JavaxJmdnsImplDNSRecord_Pointer_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withNSString_(type, JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordClass, CLASS_ANY), false, 0, [info getQualifiedName])];
  if ([pointerEntry isKindOfClass:[JavaxJmdnsImplDNSRecord class]]) {
    JavaxJmdnsImplServiceInfoImpl *cachedInfo = (JavaxJmdnsImplServiceInfoImpl *) cast_chk([((JavaxJmdnsImplDNSRecord *) nil_chk(((JavaxJmdnsImplDNSRecord *) cast_chk(pointerEntry, [JavaxJmdnsImplDNSRecord class])))) getServiceInfoWithBoolean:persistent], [JavaxJmdnsImplServiceInfoImpl class]);
    if (cachedInfo != nil) {
      id<JavaUtilMap> map = [cachedInfo getQualifiedNameMap];
      IOSByteArray *srvBytes = nil;
      NSString *server = @"";
      JavaxJmdnsImplDNSEntry *serviceEntry = [((JavaxJmdnsImplDNSCache *) nil_chk([self getCache])) getDNSEntryWithNSString:[info getQualifiedName] withJavaxJmdnsImplConstantsDNSRecordType:JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordType, TYPE_SRV) withJavaxJmdnsImplConstantsDNSRecordClass:JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordClass, CLASS_ANY)];
      if ([serviceEntry isKindOfClass:[JavaxJmdnsImplDNSRecord class]]) {
        JavaxJmdnsServiceInfo *cachedServiceEntryInfo = [((JavaxJmdnsImplDNSRecord *) nil_chk(((JavaxJmdnsImplDNSRecord *) cast_chk(serviceEntry, [JavaxJmdnsImplDNSRecord class])))) getServiceInfoWithBoolean:persistent];
        if (cachedServiceEntryInfo != nil) {
          cachedInfo = new_JavaxJmdnsImplServiceInfoImpl_initWithJavaUtilMap_withInt_withInt_withInt_withBoolean_withByteArray_(map, [cachedServiceEntryInfo getPort], [cachedServiceEntryInfo getWeight], [cachedServiceEntryInfo getPriority], persistent, nil);
          srvBytes = [cachedServiceEntryInfo getTextBytes];
          server = [cachedServiceEntryInfo getServer];
        }
      }
      JavaxJmdnsImplDNSEntry *addressEntry = [((JavaxJmdnsImplDNSCache *) nil_chk([self getCache])) getDNSEntryWithNSString:server withJavaxJmdnsImplConstantsDNSRecordType:JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordType, TYPE_A) withJavaxJmdnsImplConstantsDNSRecordClass:JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordClass, CLASS_ANY)];
      if ([addressEntry isKindOfClass:[JavaxJmdnsImplDNSRecord class]]) {
        JavaxJmdnsServiceInfo *cachedAddressInfo = [((JavaxJmdnsImplDNSRecord *) nil_chk(((JavaxJmdnsImplDNSRecord *) cast_chk(addressEntry, [JavaxJmdnsImplDNSRecord class])))) getServiceInfoWithBoolean:persistent];
        if (cachedAddressInfo != nil) {
          {
            IOSObjectArray *a__ = [cachedAddressInfo getInet4Addresses];
            JavaNetInet4Address * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
            JavaNetInet4Address * const *e__ = b__ + a__->size_;
            while (b__ < e__) {
              JavaNetInet4Address *address = *b__++;
              [cachedInfo addAddressWithJavaNetInet4Address:address];
            }
          }
          [cachedInfo _setTextWithByteArray:[cachedAddressInfo getTextBytes]];
        }
      }
      addressEntry = [((JavaxJmdnsImplDNSCache *) nil_chk([self getCache])) getDNSEntryWithNSString:server withJavaxJmdnsImplConstantsDNSRecordType:JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordType, TYPE_AAAA) withJavaxJmdnsImplConstantsDNSRecordClass:JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordClass, CLASS_ANY)];
      if ([addressEntry isKindOfClass:[JavaxJmdnsImplDNSRecord class]]) {
        JavaxJmdnsServiceInfo *cachedAddressInfo = [((JavaxJmdnsImplDNSRecord *) nil_chk(((JavaxJmdnsImplDNSRecord *) cast_chk(addressEntry, [JavaxJmdnsImplDNSRecord class])))) getServiceInfoWithBoolean:persistent];
        if (cachedAddressInfo != nil) {
          {
            IOSObjectArray *a__ = [cachedAddressInfo getInet6Addresses];
            JavaNetInet6Address * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
            JavaNetInet6Address * const *e__ = b__ + a__->size_;
            while (b__ < e__) {
              JavaNetInet6Address *address = *b__++;
              [cachedInfo addAddressWithJavaNetInet6Address:address];
            }
          }
          [cachedInfo _setTextWithByteArray:[cachedAddressInfo getTextBytes]];
        }
      }
      JavaxJmdnsImplDNSEntry *textEntry = [((JavaxJmdnsImplDNSCache *) nil_chk([self getCache])) getDNSEntryWithNSString:[cachedInfo getQualifiedName] withJavaxJmdnsImplConstantsDNSRecordType:JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordType, TYPE_TXT) withJavaxJmdnsImplConstantsDNSRecordClass:JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordClass, CLASS_ANY)];
      if ([textEntry isKindOfClass:[JavaxJmdnsImplDNSRecord class]]) {
        JavaxJmdnsServiceInfo *cachedTextInfo = [((JavaxJmdnsImplDNSRecord *) nil_chk(((JavaxJmdnsImplDNSRecord *) cast_chk(textEntry, [JavaxJmdnsImplDNSRecord class])))) getServiceInfoWithBoolean:persistent];
        if (cachedTextInfo != nil) {
          [cachedInfo _setTextWithByteArray:[cachedTextInfo getTextBytes]];
        }
      }
      if (((IOSByteArray *) nil_chk([cachedInfo getTextBytes]))->size_ == 0) {
        [cachedInfo _setTextWithByteArray:srvBytes];
      }
      if ([cachedInfo hasData]) {
        info = cachedInfo;
      }
    }
  }
  return info;
}

- (void)waitForInfoDataWithJavaxJmdnsServiceInfo:(JavaxJmdnsServiceInfo *)info
                                        withLong:(jlong)timeout {
  JavaxJmdnsImplJmDNSImpl_waitForInfoDataWithJavaxJmdnsServiceInfo_withLong_(self, info, timeout);
}

- (void)requestServiceInfoWithNSString:(NSString *)type
                          withNSString:(NSString *)name {
  [self requestServiceInfoWithNSString:type withNSString:name withBoolean:false withLong:JavaxJmdnsImplConstantsDNSConstants_SERVICE_INFO_TIMEOUT];
}

- (void)requestServiceInfoWithNSString:(NSString *)type
                          withNSString:(NSString *)name
                           withBoolean:(jboolean)persistent {
  [self requestServiceInfoWithNSString:type withNSString:name withBoolean:persistent withLong:JavaxJmdnsImplConstantsDNSConstants_SERVICE_INFO_TIMEOUT];
}

- (void)requestServiceInfoWithNSString:(NSString *)type
                          withNSString:(NSString *)name
                              withLong:(jlong)timeout {
  [self requestServiceInfoWithNSString:type withNSString:name withBoolean:false withLong:JavaxJmdnsImplConstantsDNSConstants_SERVICE_INFO_TIMEOUT];
}

- (void)requestServiceInfoWithNSString:(NSString *)type
                          withNSString:(NSString *)name
                           withBoolean:(jboolean)persistent
                              withLong:(jlong)timeout {
  JavaxJmdnsImplServiceInfoImpl *info = [self resolveServiceInfoWithNSString:type withNSString:name withNSString:@"" withBoolean:persistent];
  JavaxJmdnsImplJmDNSImpl_waitForInfoDataWithJavaxJmdnsServiceInfo_withLong_(self, info, timeout);
}

- (void)handleServiceResolvedWithJavaxJmdnsServiceEvent:(JavaxJmdnsServiceEvent *)event {
  id<JavaUtilList> list = [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_serviceListeners_)) getWithId:[((NSString *) nil_chk([((JavaxJmdnsServiceEvent *) nil_chk(event)) getType])) lowercaseString]];
  id<JavaUtilList> listCopy;
  if ((list != nil) && (![((id<JavaUtilList>) nil_chk(list)) isEmpty])) {
    if (([event getInfo] != nil) && [((JavaxJmdnsServiceInfo *) nil_chk([event getInfo])) hasData]) {
      JavaxJmdnsServiceEvent *localEvent = event;
      @synchronized(list) {
        listCopy = new_JavaUtilArrayList_initWithJavaUtilCollection_(list);
      }
      for (JavaxJmdnsImplListenerStatus_ServiceListenerStatus * __strong listener in listCopy) {
        (void) [((id<JavaUtilConcurrentExecutorService>) nil_chk(_executor_)) submitWithJavaLangRunnable:new_JavaxJmdnsImplJmDNSImpl_1_initWithJavaxJmdnsImplListenerStatus_ServiceListenerStatus_withJavaxJmdnsServiceEvent_(listener, localEvent)];
      }
    }
  }
}

- (void)addServiceTypeListenerWithJavaxJmdnsServiceTypeListener:(id<JavaxJmdnsServiceTypeListener>)listener {
  JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus *status = new_JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus_initWithJavaxJmdnsServiceTypeListener_withBoolean_(listener, JavaxJmdnsImplListenerStatus_ASYNCHONEOUS);
  [((id<JavaUtilSet>) nil_chk(_typeListeners_)) addWithId:status];
  for (NSString * __strong type in nil_chk([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_serviceTypes_)) keySet])) {
    [status serviceTypeAddedWithJavaxJmdnsServiceEvent:new_JavaxJmdnsImplServiceEventImpl_initWithJavaxJmdnsImplJmDNSImpl_withNSString_withNSString_withJavaxJmdnsServiceInfo_(self, type, @"", nil)];
  }
  [self startTypeResolver];
}

- (void)removeServiceTypeListenerWithJavaxJmdnsServiceTypeListener:(id<JavaxJmdnsServiceTypeListener>)listener {
  JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus *status = new_JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus_initWithJavaxJmdnsServiceTypeListener_withBoolean_(listener, JavaxJmdnsImplListenerStatus_ASYNCHONEOUS);
  [((id<JavaUtilSet>) nil_chk(_typeListeners_)) removeWithId:status];
}

- (void)addServiceListenerWithNSString:(NSString *)type
         withJavaxJmdnsServiceListener:(id<JavaxJmdnsServiceListener>)listener {
  JavaxJmdnsImplJmDNSImpl_addServiceListenerWithNSString_withJavaxJmdnsServiceListener_withBoolean_(self, type, listener, JavaxJmdnsImplListenerStatus_ASYNCHONEOUS);
}

- (void)addServiceListenerWithNSString:(NSString *)type
         withJavaxJmdnsServiceListener:(id<JavaxJmdnsServiceListener>)listener
                           withBoolean:(jboolean)synch {
  JavaxJmdnsImplJmDNSImpl_addServiceListenerWithNSString_withJavaxJmdnsServiceListener_withBoolean_(self, type, listener, synch);
}

- (void)removeServiceListenerWithNSString:(NSString *)type
            withJavaxJmdnsServiceListener:(id<JavaxJmdnsServiceListener>)listener {
  NSString *loType = [((NSString *) nil_chk(type)) lowercaseString];
  id<JavaUtilList> list = [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_serviceListeners_)) getWithId:loType];
  if (list != nil) {
    @synchronized(list) {
      JavaxJmdnsImplListenerStatus_ServiceListenerStatus *status = new_JavaxJmdnsImplListenerStatus_ServiceListenerStatus_initWithJavaxJmdnsServiceListener_withBoolean_(listener, JavaxJmdnsImplListenerStatus_ASYNCHONEOUS);
      [list removeWithId:status];
      if ([list isEmpty]) {
        [_serviceListeners_ removeWithId:loType withId:list];
      }
    }
  }
}

- (void)registerServiceWithJavaxJmdnsServiceInfo:(JavaxJmdnsServiceInfo *)infoAbstract {
  if ([self isClosing] || [self isClosed]) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"This DNS is closed.");
  }
  JavaxJmdnsImplServiceInfoImpl *info = (JavaxJmdnsImplServiceInfoImpl *) cast_chk(infoAbstract, [JavaxJmdnsImplServiceInfoImpl class]);
  if ([((JavaxJmdnsImplServiceInfoImpl *) nil_chk(info)) getDns] != nil) {
    if ([info getDns] != self) {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"A service information can only be registered with a single instamce of JmDNS.");
    }
    else if ([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_services_)) getWithId:[info getKey]] != nil) {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"A service information can only be registered once.");
    }
  }
  [info setDnsWithJavaxJmdnsImplJmDNSImpl:self];
  [self registerServiceTypeWithNSString:[info getTypeWithSubtype]];
  [info recoverState];
  [info setServerWithNSString:[((JavaxJmdnsImplHostInfo *) nil_chk(_localHost_)) getName]];
  [info addAddressWithJavaNetInet4Address:[((JavaxJmdnsImplHostInfo *) nil_chk(_localHost_)) getInet4Address]];
  [info addAddressWithJavaNetInet6Address:[((JavaxJmdnsImplHostInfo *) nil_chk(_localHost_)) getInet6Address]];
  [self waitForAnnouncedWithLong:JavaxJmdnsImplConstantsDNSConstants_SERVICE_INFO_TIMEOUT];
  JavaxJmdnsImplJmDNSImpl_makeServiceNameUniqueWithJavaxJmdnsImplServiceInfoImpl_(self, info);
  while ([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_services_)) putIfAbsentWithId:[info getKey] withId:info] != nil) {
    JavaxJmdnsImplJmDNSImpl_makeServiceNameUniqueWithJavaxJmdnsImplServiceInfoImpl_(self, info);
  }
  [self startProber];
  [info waitForAnnouncedWithLong:JavaxJmdnsImplConstantsDNSConstants_SERVICE_INFO_TIMEOUT];
  if ([((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE)]) {
    [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) fineWithNSString:JreStrcat("$@", @"registerService() JmDNS registered service as ", info)];
  }
}

- (void)unregisterServiceWithJavaxJmdnsServiceInfo:(JavaxJmdnsServiceInfo *)infoAbstract {
  JavaxJmdnsImplServiceInfoImpl *info = (JavaxJmdnsImplServiceInfoImpl *) cast_chk([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_services_)) getWithId:[((JavaxJmdnsServiceInfo *) nil_chk(infoAbstract)) getKey]], [JavaxJmdnsImplServiceInfoImpl class]);
  if (info != nil) {
    [info cancelState];
    [self startCanceler];
    [info waitForCanceledWithLong:JavaxJmdnsImplConstantsDNSConstants_CLOSE_TIMEOUT];
    [_services_ removeWithId:[info getKey] withId:info];
    if ([((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE)]) {
      [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) fineWithNSString:JreStrcat("$@", @"unregisterService() JmDNS unregistered service as ", info)];
    }
  }
  else {
    [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) warningWithNSString:JreStrcat("$$", @"Removing unregistered service info: ", [infoAbstract getKey])];
  }
}

- (void)unregisterAllServices {
  if ([((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINER)]) {
    [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) finerWithNSString:@"unregisterAllServices()"];
  }
  for (NSString * __strong name in nil_chk([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_services_)) keySet])) {
    JavaxJmdnsImplServiceInfoImpl *info = (JavaxJmdnsImplServiceInfoImpl *) cast_chk([_services_ getWithId:name], [JavaxJmdnsImplServiceInfoImpl class]);
    if (info != nil) {
      if ([((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINER)]) {
        [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) finerWithNSString:JreStrcat("$@", @"Cancelling service info: ", info)];
      }
      [info cancelState];
    }
  }
  [self startCanceler];
  for (NSString * __strong name in nil_chk([_services_ keySet])) {
    JavaxJmdnsImplServiceInfoImpl *info = (JavaxJmdnsImplServiceInfoImpl *) cast_chk([_services_ getWithId:name], [JavaxJmdnsImplServiceInfoImpl class]);
    if (info != nil) {
      if ([((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINER)]) {
        [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) finerWithNSString:JreStrcat("$@", @"Wait for service info cancel: ", info)];
      }
      [info waitForCanceledWithLong:JavaxJmdnsImplConstantsDNSConstants_CLOSE_TIMEOUT];
      [_services_ removeWithId:name withId:info];
    }
  }
}

- (jboolean)registerServiceTypeWithNSString:(NSString *)type {
  jboolean typeAdded = false;
  id<JavaUtilMap> map = JavaxJmdnsImplServiceInfoImpl_decodeQualifiedNameMapForTypeWithNSString_(type);
  NSString *domain = [((id<JavaUtilMap>) nil_chk(map)) getWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Domain)];
  NSString *protocol = [map getWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Protocol)];
  NSString *application = [map getWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Application)];
  NSString *subtype = [map getWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Subtype)];
  NSString *name = JreStrcat("$$$C", ([((NSString *) nil_chk(application)) java_length] > 0 ? JreStrcat("C$C", '_', application, '.') : @""), ([((NSString *) nil_chk(protocol)) java_length] > 0 ? JreStrcat("C$C", '_', protocol, '.') : @""), domain, '.');
  NSString *loname = [name lowercaseString];
  if ([((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE)]) {
    [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) fineWithNSString:JreStrcat("$$$$$$", [self getName], @".registering service type: ", type, @" as: ", name, ([((NSString *) nil_chk(subtype)) java_length] > 0 ? JreStrcat("$$", @" subtype: ", subtype) : @""))];
  }
  if (![((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_serviceTypes_)) containsKeyWithId:loname] && ![((NSString *) nil_chk([application lowercaseString])) isEqual:@"dns-sd"] && ![((NSString *) nil_chk([((NSString *) nil_chk(domain)) lowercaseString])) java_hasSuffix:@"in-addr.arpa"] && ![((NSString *) nil_chk([domain lowercaseString])) java_hasSuffix:@"ip6.arpa"]) {
    typeAdded = ([_serviceTypes_ putIfAbsentWithId:loname withId:new_JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry_initWithNSString_(name)] == nil);
    if (typeAdded) {
      IOSObjectArray *list = [((id<JavaUtilSet>) nil_chk(_typeListeners_)) toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[_typeListeners_ size] type:JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus_class_()]];
      JavaxJmdnsServiceEvent *event = new_JavaxJmdnsImplServiceEventImpl_initWithJavaxJmdnsImplJmDNSImpl_withNSString_withNSString_withJavaxJmdnsServiceInfo_(self, name, @"", nil);
      {
        IOSObjectArray *a__ = list;
        JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus *status = *b__++;
          (void) [((id<JavaUtilConcurrentExecutorService>) nil_chk(_executor_)) submitWithJavaLangRunnable:new_JavaxJmdnsImplJmDNSImpl_2_initWithJavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus_withJavaxJmdnsServiceEvent_(status, event)];
        }
      }
    }
  }
  if ([((NSString *) nil_chk(subtype)) java_length] > 0) {
    JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry *subtypes = [_serviceTypes_ getWithId:loname];
    if ((subtypes != nil) && (![((JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry *) nil_chk(subtypes)) containsWithNSString:subtype])) {
      @synchronized(subtypes) {
        if (![((JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry *) nil_chk(subtypes)) containsWithNSString:subtype]) {
          typeAdded = true;
          [subtypes addWithNSString:subtype];
          IOSObjectArray *list = [((id<JavaUtilSet>) nil_chk(_typeListeners_)) toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[_typeListeners_ size] type:JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus_class_()]];
          JavaxJmdnsServiceEvent *event = new_JavaxJmdnsImplServiceEventImpl_initWithJavaxJmdnsImplJmDNSImpl_withNSString_withNSString_withJavaxJmdnsServiceInfo_(self, JreStrcat("C$$$", '_', subtype, @"._sub.", name), @"", nil);
          {
            IOSObjectArray *a__ = list;
            JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
            JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus * const *e__ = b__ + a__->size_;
            while (b__ < e__) {
              JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus *status = *b__++;
              (void) [((id<JavaUtilConcurrentExecutorService>) nil_chk(_executor_)) submitWithJavaLangRunnable:new_JavaxJmdnsImplJmDNSImpl_3_initWithJavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus_withJavaxJmdnsServiceEvent_(status, event)];
            }
          }
        }
      }
    }
  }
  return typeAdded;
}

- (jboolean)makeServiceNameUniqueWithJavaxJmdnsImplServiceInfoImpl:(JavaxJmdnsImplServiceInfoImpl *)info {
  return JavaxJmdnsImplJmDNSImpl_makeServiceNameUniqueWithJavaxJmdnsImplServiceInfoImpl_(self, info);
}

- (NSString *)incrementNameWithNSString:(NSString *)name {
  NSString *aName = name;
  @try {
    jint l = [((NSString *) nil_chk(aName)) java_lastIndexOf:'('];
    jint r = [aName java_lastIndexOf:')'];
    if ((l >= 0) && (l < r)) {
      aName = JreStrcat("$CIC", [aName java_substring:0 endIndex:l], '(', (JavaLangInteger_parseIntWithNSString_([aName java_substring:l + 1 endIndex:r]) + 1), ')');
    }
    else {
      (void) JreStrAppendStrong(&aName, "$", @" (2)");
    }
  }
  @catch (JavaLangNumberFormatException *e) {
    (void) JreStrAppendStrong(&aName, "$", @" (2)");
  }
  return aName;
}

- (void)addListenerWithJavaxJmdnsImplDNSListener:(id<JavaxJmdnsImplDNSListener>)listener
                   withJavaxJmdnsImplDNSQuestion:(JavaxJmdnsImplDNSQuestion *)question {
  jlong now = JavaLangSystem_currentTimeMillis();
  [((id<JavaUtilList>) nil_chk(_listeners_)) addWithId:listener];
  if (question != nil) {
    for (JavaxJmdnsImplDNSEntry * __strong dnsEntry in nil_chk([((JavaxJmdnsImplDNSCache *) nil_chk([self getCache])) getDNSEntryListWithNSString:[((NSString *) nil_chk([question getName])) lowercaseString]])) {
      if ([question answeredByWithJavaxJmdnsImplDNSEntry:dnsEntry] && ![((JavaxJmdnsImplDNSEntry *) nil_chk(dnsEntry)) isExpiredWithLong:now]) {
        [((id<JavaxJmdnsImplDNSListener>) nil_chk(listener)) updateRecordWithJavaxJmdnsImplDNSCache:[self getCache] withLong:now withJavaxJmdnsImplDNSEntry:dnsEntry];
      }
    }
  }
}

- (void)removeListenerWithJavaxJmdnsImplDNSListener:(id<JavaxJmdnsImplDNSListener>)listener {
  [((id<JavaUtilList>) nil_chk(_listeners_)) removeWithId:listener];
}

- (void)renewServiceCollectorWithJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *)record {
  JavaxJmdnsServiceInfo *info = [((JavaxJmdnsImplDNSRecord *) nil_chk(record)) getServiceInfo];
  if ([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_serviceCollectors_)) containsKeyWithId:[((NSString *) nil_chk([((JavaxJmdnsServiceInfo *) nil_chk(info)) getType])) lowercaseString]]) {
    [self startServiceResolverWithNSString:[info getType]];
  }
}

- (void)updateRecordWithLong:(jlong)now
 withJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *)rec
withJavaxJmdnsImplJmDNSImpl_Operation:(JavaxJmdnsImplJmDNSImpl_Operation *)operation {
  {
    id<JavaUtilList> listenerList = nil;
    @synchronized(_listeners_) {
      listenerList = new_JavaUtilArrayList_initWithJavaUtilCollection_(_listeners_);
    }
    for (id<JavaxJmdnsImplDNSListener> __strong listener in listenerList) {
      [((id<JavaxJmdnsImplDNSListener>) nil_chk(listener)) updateRecordWithJavaxJmdnsImplDNSCache:[self getCache] withLong:now withJavaxJmdnsImplDNSEntry:rec];
    }
  }
  if ([((JavaxJmdnsImplConstantsDNSRecordType *) nil_chk(JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordType, TYPE_PTR))) isEqual:[((JavaxJmdnsImplDNSRecord *) nil_chk(rec)) getRecordType]]) {
    JavaxJmdnsServiceEvent *event = [rec getServiceEventWithJavaxJmdnsImplJmDNSImpl:self];
    if (([((JavaxJmdnsServiceEvent *) nil_chk(event)) getInfo] == nil) || ![((JavaxJmdnsServiceInfo *) nil_chk([event getInfo])) hasData]) {
      JavaxJmdnsServiceInfo *info = [self getServiceInfoFromCacheWithNSString:[event getType] withNSString:[event getName] withNSString:@"" withBoolean:false];
      if ([((JavaxJmdnsServiceInfo *) nil_chk(info)) hasData]) {
        event = new_JavaxJmdnsImplServiceEventImpl_initWithJavaxJmdnsImplJmDNSImpl_withNSString_withNSString_withJavaxJmdnsServiceInfo_(self, [event getType], [event getName], info);
      }
    }
    id<JavaUtilList> list = [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_serviceListeners_)) getWithId:[((NSString *) nil_chk([event getType])) lowercaseString]];
    id<JavaUtilList> serviceListenerList;
    if (list != nil) {
      @synchronized(list) {
        serviceListenerList = new_JavaUtilArrayList_initWithJavaUtilCollection_(list);
      }
    }
    else {
      serviceListenerList = JavaUtilCollections_emptyList();
    }
    if ([((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINEST)]) {
      [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) finestWithNSString:JreStrcat("$$@$@$@", [self getName], @".updating record for event: ", event, @" list ", serviceListenerList, @" operation: ", operation)];
    }
    if (![((id<JavaUtilList>) nil_chk(serviceListenerList)) isEmpty]) {
      JavaxJmdnsServiceEvent *localEvent = event;
      switch ([operation ordinal]) {
        case JavaxJmdnsImplJmDNSImpl_Operation_Enum_Add:
        for (JavaxJmdnsImplListenerStatus_ServiceListenerStatus * __strong listener in serviceListenerList) {
          if ([((JavaxJmdnsImplListenerStatus_ServiceListenerStatus *) nil_chk(listener)) isSynchronous]) {
            [listener serviceAddedWithJavaxJmdnsServiceEvent:localEvent];
          }
          else {
            (void) [((id<JavaUtilConcurrentExecutorService>) nil_chk(_executor_)) submitWithJavaLangRunnable:new_JavaxJmdnsImplJmDNSImpl_4_initWithJavaxJmdnsImplListenerStatus_ServiceListenerStatus_withJavaxJmdnsServiceEvent_(listener, localEvent)];
          }
        }
        break;
        case JavaxJmdnsImplJmDNSImpl_Operation_Enum_Remove:
        for (JavaxJmdnsImplListenerStatus_ServiceListenerStatus * __strong listener in serviceListenerList) {
          if ([((JavaxJmdnsImplListenerStatus_ServiceListenerStatus *) nil_chk(listener)) isSynchronous]) {
            [listener serviceRemovedWithJavaxJmdnsServiceEvent:localEvent];
          }
          else {
            (void) [((id<JavaUtilConcurrentExecutorService>) nil_chk(_executor_)) submitWithJavaLangRunnable:new_JavaxJmdnsImplJmDNSImpl_5_initWithJavaxJmdnsImplListenerStatus_ServiceListenerStatus_withJavaxJmdnsServiceEvent_(listener, localEvent)];
          }
        }
        break;
        default:
        break;
      }
    }
  }
}

- (void)handleRecordWithJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *)record
                                       withLong:(jlong)now {
  JavaxJmdnsImplDNSRecord *newRecord = record;
  JavaxJmdnsImplJmDNSImpl_Operation *cacheOperation = JreLoadEnum(JavaxJmdnsImplJmDNSImpl_Operation, Noop);
  jboolean expired = [((JavaxJmdnsImplDNSRecord *) nil_chk(newRecord)) isExpiredWithLong:now];
  if ([((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE)]) {
    [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) fineWithNSString:JreStrcat("$$@", [self getName], @" handle response: ", newRecord)];
  }
  if (![newRecord isServicesDiscoveryMetaQuery] && ![newRecord isDomainDiscoveryQuery]) {
    jboolean unique = [newRecord isUnique];
    JavaxJmdnsImplDNSRecord *cachedRecord = (JavaxJmdnsImplDNSRecord *) cast_chk([((JavaxJmdnsImplDNSCache *) nil_chk([self getCache])) getDNSEntryWithJavaxJmdnsImplDNSEntry:newRecord], [JavaxJmdnsImplDNSRecord class]);
    if ([((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE)]) {
      [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) fineWithNSString:JreStrcat("$$@", [self getName], @" handle response cached record: ", cachedRecord)];
    }
    if (unique) {
      for (JavaxJmdnsImplDNSEntry * __strong entry_ in nil_chk([((JavaxJmdnsImplDNSCache *) nil_chk([self getCache])) getDNSEntryListWithNSString:[newRecord getKey]])) {
        if ([((JavaxJmdnsImplConstantsDNSRecordType *) nil_chk([newRecord getRecordType])) isEqual:[((JavaxJmdnsImplDNSEntry *) nil_chk(entry_)) getRecordType]] && [((JavaxJmdnsImplConstantsDNSRecordClass *) nil_chk([newRecord getRecordClass])) isEqual:[entry_ getRecordClass]] && (entry_ != cachedRecord)) {
          [((JavaxJmdnsImplDNSRecord *) cast_chk(entry_, [JavaxJmdnsImplDNSRecord class])) setWillExpireSoonWithLong:now];
        }
      }
    }
    if (cachedRecord != nil) {
      if (expired) {
        if ([newRecord getTTL] == 0) {
          cacheOperation = JreLoadEnum(JavaxJmdnsImplJmDNSImpl_Operation, Noop);
          [cachedRecord setWillExpireSoonWithLong:now];
        }
        else {
          cacheOperation = JreLoadEnum(JavaxJmdnsImplJmDNSImpl_Operation, Remove);
          [((JavaxJmdnsImplDNSCache *) nil_chk([self getCache])) removeDNSEntryWithJavaxJmdnsImplDNSEntry:cachedRecord];
        }
      }
      else {
        if (![newRecord sameValueWithJavaxJmdnsImplDNSRecord:cachedRecord] || (![newRecord sameSubtypeWithJavaxJmdnsImplDNSEntry:cachedRecord] && ([((NSString *) nil_chk([newRecord getSubtype])) java_length] > 0))) {
          if ([newRecord isSingleValued]) {
            cacheOperation = JreLoadEnum(JavaxJmdnsImplJmDNSImpl_Operation, Update);
            [((JavaxJmdnsImplDNSCache *) nil_chk([self getCache])) replaceDNSEntryWithJavaxJmdnsImplDNSEntry:newRecord withJavaxJmdnsImplDNSEntry:cachedRecord];
          }
          else {
            cacheOperation = JreLoadEnum(JavaxJmdnsImplJmDNSImpl_Operation, Add);
            [((JavaxJmdnsImplDNSCache *) nil_chk([self getCache])) addDNSEntryWithJavaxJmdnsImplDNSEntry:newRecord];
          }
        }
        else {
          [cachedRecord resetTTLWithJavaxJmdnsImplDNSRecord:newRecord];
          newRecord = cachedRecord;
        }
      }
    }
    else {
      if (!expired) {
        cacheOperation = JreLoadEnum(JavaxJmdnsImplJmDNSImpl_Operation, Add);
        [((JavaxJmdnsImplDNSCache *) nil_chk([self getCache])) addDNSEntryWithJavaxJmdnsImplDNSEntry:newRecord];
      }
    }
  }
  if ([newRecord getRecordType] == JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordType, TYPE_PTR)) {
    jboolean typeAdded = false;
    if ([newRecord isServicesDiscoveryMetaQuery]) {
      if (!expired) {
        typeAdded = [self registerServiceTypeWithNSString:[((JavaxJmdnsImplDNSRecord_Pointer *) cast_chk(newRecord, [JavaxJmdnsImplDNSRecord_Pointer class])) getAlias]];
      }
      return;
    }
    typeAdded |= [self registerServiceTypeWithNSString:[newRecord getName]];
    if (typeAdded && (cacheOperation == JreLoadEnum(JavaxJmdnsImplJmDNSImpl_Operation, Noop))) {
      cacheOperation = JreLoadEnum(JavaxJmdnsImplJmDNSImpl_Operation, RegisterServiceType);
    }
  }
  if (cacheOperation != JreLoadEnum(JavaxJmdnsImplJmDNSImpl_Operation, Noop)) {
    [self updateRecordWithLong:now withJavaxJmdnsImplDNSRecord:newRecord withJavaxJmdnsImplJmDNSImpl_Operation:cacheOperation];
  }
}

- (void)handleResponseWithJavaxJmdnsImplDNSIncoming:(JavaxJmdnsImplDNSIncoming *)msg {
  jlong now = JavaLangSystem_currentTimeMillis();
  jboolean hostConflictDetected = false;
  jboolean serviceConflictDetected = false;
  for (JavaxJmdnsImplDNSRecord * __strong newRecord in nil_chk([((JavaxJmdnsImplDNSIncoming *) nil_chk(msg)) getAllAnswers])) {
    [self handleRecordWithJavaxJmdnsImplDNSRecord:newRecord withLong:now];
    if ([((JavaxJmdnsImplConstantsDNSRecordType *) nil_chk(JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordType, TYPE_A))) isEqual:[((JavaxJmdnsImplDNSRecord *) nil_chk(newRecord)) getRecordType]] || [((JavaxJmdnsImplConstantsDNSRecordType *) nil_chk(JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordType, TYPE_AAAA))) isEqual:[newRecord getRecordType]]) {
      hostConflictDetected |= [newRecord handleResponseWithJavaxJmdnsImplJmDNSImpl:self];
    }
    else {
      serviceConflictDetected |= [newRecord handleResponseWithJavaxJmdnsImplJmDNSImpl:self];
    }
  }
  if (hostConflictDetected || serviceConflictDetected) {
    [self startProber];
  }
}

- (void)handleQueryWithJavaxJmdnsImplDNSIncoming:(JavaxJmdnsImplDNSIncoming *)inArg
                          withJavaNetInetAddress:(JavaNetInetAddress *)addr
                                         withInt:(jint)port {
  if ([((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE)]) {
    [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) fineWithNSString:JreStrcat("$$@", [self getName], @".handle query: ", inArg)];
  }
  jboolean conflictDetected = false;
  jlong expirationTime = JavaLangSystem_currentTimeMillis() + JavaxJmdnsImplConstantsDNSConstants_KNOWN_ANSWER_TTL;
  for (JavaxJmdnsImplDNSRecord * __strong answer in nil_chk([((JavaxJmdnsImplDNSIncoming *) nil_chk(inArg)) getAllAnswers])) {
    conflictDetected |= [((JavaxJmdnsImplDNSRecord *) nil_chk(answer)) handleQueryWithJavaxJmdnsImplJmDNSImpl:self withLong:expirationTime];
  }
  [self ioLock];
  @try {
    if (_plannedAnswer_ != nil) {
      [_plannedAnswer_ appendWithJavaxJmdnsImplDNSIncoming:inArg];
    }
    else {
      JavaxJmdnsImplDNSIncoming *plannedAnswer = [inArg java_clone];
      if ([inArg isTruncated]) {
        _plannedAnswer_ = plannedAnswer;
      }
      [self startResponderWithJavaxJmdnsImplDNSIncoming:plannedAnswer withInt:port];
    }
  }
  @finally {
    [self ioUnlock];
  }
  jlong now = JavaLangSystem_currentTimeMillis();
  for (JavaxJmdnsImplDNSRecord * __strong answer in nil_chk([inArg getAnswers])) {
    [self handleRecordWithJavaxJmdnsImplDNSRecord:answer withLong:now];
  }
  if (conflictDetected) {
    [self startProber];
  }
}

- (void)respondToQueryWithJavaxJmdnsImplDNSIncoming:(JavaxJmdnsImplDNSIncoming *)inArg {
  [self ioLock];
  @try {
    if (_plannedAnswer_ == inArg) {
      _plannedAnswer_ = nil;
    }
  }
  @finally {
    [self ioUnlock];
  }
}

- (JavaxJmdnsImplDNSOutgoing *)addAnswerWithJavaxJmdnsImplDNSIncoming:(JavaxJmdnsImplDNSIncoming *)inArg
                                               withJavaNetInetAddress:(JavaNetInetAddress *)addr
                                                              withInt:(jint)port
                                        withJavaxJmdnsImplDNSOutgoing:(JavaxJmdnsImplDNSOutgoing *)outArg
                                          withJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *)rec {
  JavaxJmdnsImplDNSOutgoing *newOut = outArg;
  if (newOut == nil) {
    newOut = new_JavaxJmdnsImplDNSOutgoing_initWithInt_withBoolean_withInt_(JavaxJmdnsImplConstantsDNSConstants_FLAGS_QR_RESPONSE | JavaxJmdnsImplConstantsDNSConstants_FLAGS_AA, false, [((JavaxJmdnsImplDNSIncoming *) nil_chk(inArg)) getSenderUDPPayload]);
  }
  @try {
    [newOut addAnswerWithJavaxJmdnsImplDNSIncoming:inArg withJavaxJmdnsImplDNSRecord:rec];
  }
  @catch (JavaIoIOException *e) {
    [newOut setFlagsWithInt:[newOut getFlags] | JavaxJmdnsImplConstantsDNSConstants_FLAGS_TC];
    [newOut setIdWithInt:[((JavaxJmdnsImplDNSIncoming *) nil_chk(inArg)) getId]];
    [self sendWithJavaxJmdnsImplDNSOutgoing:newOut];
    newOut = new_JavaxJmdnsImplDNSOutgoing_initWithInt_withBoolean_withInt_(JavaxJmdnsImplConstantsDNSConstants_FLAGS_QR_RESPONSE | JavaxJmdnsImplConstantsDNSConstants_FLAGS_AA, false, [inArg getSenderUDPPayload]);
    [newOut addAnswerWithJavaxJmdnsImplDNSIncoming:inArg withJavaxJmdnsImplDNSRecord:rec];
  }
  return newOut;
}

- (void)sendWithJavaxJmdnsImplDNSOutgoing:(JavaxJmdnsImplDNSOutgoing *)outArg {
  if (![((JavaxJmdnsImplDNSOutgoing *) nil_chk(outArg)) isEmpty]) {
    IOSByteArray *message = [outArg data];
    JavaNetDatagramPacket *packet = new_JavaNetDatagramPacket_initWithByteArray_withInt_withJavaNetInetAddress_withInt_(message, ((IOSByteArray *) nil_chk(message))->size_, JreLoadVolatileId(&_group_), JreLoadStatic(JavaxJmdnsImplConstantsDNSConstants, MDNS_PORT));
    if ([((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINEST)]) {
      @try {
        JavaxJmdnsImplDNSIncoming *msg = new_JavaxJmdnsImplDNSIncoming_initWithJavaNetDatagramPacket_(packet);
        if ([((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINEST)]) {
          [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) finestWithNSString:JreStrcat("$$$$", @"send(", [self getName], @") JmDNS out:", [msg printWithBoolean:true])];
        }
      }
      @catch (JavaIoIOException *e) {
        [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) throwingWithNSString:[[self java_getClass] description] withNSString:JreStrcat("$$$", @"send(", [self getName], @") - JmDNS can not parse what it sends!!!") withNSException:e];
      }
    }
    JavaNetMulticastSocket *ms = JreLoadVolatileId(&_socket_);
    if (ms != nil && ![ms isClosed]) {
      [ms sendWithJavaNetDatagramPacket:packet];
    }
  }
}

- (void)purgeTimer {
  [((id<JavaxJmdnsImplDNSTaskStarter>) nil_chk([((JavaxJmdnsImplDNSTaskStarter_Factory *) nil_chk(JavaxJmdnsImplDNSTaskStarter_Factory_getInstance())) getStarterWithJavaxJmdnsImplJmDNSImpl:[self getDns]])) purgeTimer];
}

- (void)purgeStateTimer {
  [((id<JavaxJmdnsImplDNSTaskStarter>) nil_chk([((JavaxJmdnsImplDNSTaskStarter_Factory *) nil_chk(JavaxJmdnsImplDNSTaskStarter_Factory_getInstance())) getStarterWithJavaxJmdnsImplJmDNSImpl:[self getDns]])) purgeStateTimer];
}

- (void)cancelTimer {
  [((id<JavaxJmdnsImplDNSTaskStarter>) nil_chk([((JavaxJmdnsImplDNSTaskStarter_Factory *) nil_chk(JavaxJmdnsImplDNSTaskStarter_Factory_getInstance())) getStarterWithJavaxJmdnsImplJmDNSImpl:[self getDns]])) cancelTimer];
}

- (void)cancelStateTimer {
  [((id<JavaxJmdnsImplDNSTaskStarter>) nil_chk([((JavaxJmdnsImplDNSTaskStarter_Factory *) nil_chk(JavaxJmdnsImplDNSTaskStarter_Factory_getInstance())) getStarterWithJavaxJmdnsImplJmDNSImpl:[self getDns]])) cancelStateTimer];
}

- (void)startProber {
  [((id<JavaxJmdnsImplDNSTaskStarter>) nil_chk([((JavaxJmdnsImplDNSTaskStarter_Factory *) nil_chk(JavaxJmdnsImplDNSTaskStarter_Factory_getInstance())) getStarterWithJavaxJmdnsImplJmDNSImpl:[self getDns]])) startProber];
}

- (void)startAnnouncer {
  [((id<JavaxJmdnsImplDNSTaskStarter>) nil_chk([((JavaxJmdnsImplDNSTaskStarter_Factory *) nil_chk(JavaxJmdnsImplDNSTaskStarter_Factory_getInstance())) getStarterWithJavaxJmdnsImplJmDNSImpl:[self getDns]])) startAnnouncer];
}

- (void)startRenewer {
  [((id<JavaxJmdnsImplDNSTaskStarter>) nil_chk([((JavaxJmdnsImplDNSTaskStarter_Factory *) nil_chk(JavaxJmdnsImplDNSTaskStarter_Factory_getInstance())) getStarterWithJavaxJmdnsImplJmDNSImpl:[self getDns]])) startRenewer];
}

- (void)startCanceler {
  [((id<JavaxJmdnsImplDNSTaskStarter>) nil_chk([((JavaxJmdnsImplDNSTaskStarter_Factory *) nil_chk(JavaxJmdnsImplDNSTaskStarter_Factory_getInstance())) getStarterWithJavaxJmdnsImplJmDNSImpl:[self getDns]])) startCanceler];
}

- (void)startReaper {
  [((id<JavaxJmdnsImplDNSTaskStarter>) nil_chk([((JavaxJmdnsImplDNSTaskStarter_Factory *) nil_chk(JavaxJmdnsImplDNSTaskStarter_Factory_getInstance())) getStarterWithJavaxJmdnsImplJmDNSImpl:[self getDns]])) startReaper];
}

- (void)startServiceInfoResolverWithJavaxJmdnsImplServiceInfoImpl:(JavaxJmdnsImplServiceInfoImpl *)info {
  [((id<JavaxJmdnsImplDNSTaskStarter>) nil_chk([((JavaxJmdnsImplDNSTaskStarter_Factory *) nil_chk(JavaxJmdnsImplDNSTaskStarter_Factory_getInstance())) getStarterWithJavaxJmdnsImplJmDNSImpl:[self getDns]])) startServiceInfoResolverWithJavaxJmdnsImplServiceInfoImpl:info];
}

- (void)startTypeResolver {
  [((id<JavaxJmdnsImplDNSTaskStarter>) nil_chk([((JavaxJmdnsImplDNSTaskStarter_Factory *) nil_chk(JavaxJmdnsImplDNSTaskStarter_Factory_getInstance())) getStarterWithJavaxJmdnsImplJmDNSImpl:[self getDns]])) startTypeResolver];
}

- (void)startServiceResolverWithNSString:(NSString *)type {
  [((id<JavaxJmdnsImplDNSTaskStarter>) nil_chk([((JavaxJmdnsImplDNSTaskStarter_Factory *) nil_chk(JavaxJmdnsImplDNSTaskStarter_Factory_getInstance())) getStarterWithJavaxJmdnsImplJmDNSImpl:[self getDns]])) startServiceResolverWithNSString:type];
}

- (void)startResponderWithJavaxJmdnsImplDNSIncoming:(JavaxJmdnsImplDNSIncoming *)inArg
                                            withInt:(jint)port {
  [((id<JavaxJmdnsImplDNSTaskStarter>) nil_chk([((JavaxJmdnsImplDNSTaskStarter_Factory *) nil_chk(JavaxJmdnsImplDNSTaskStarter_Factory_getInstance())) getStarterWithJavaxJmdnsImplJmDNSImpl:[self getDns]])) startResponderWithJavaxJmdnsImplDNSIncoming:inArg withInt:port];
}

- (void)recover {
  [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) finerWithNSString:JreStrcat("$$", [self getName], @"recover()")];
  if ([self isClosing] || [self isClosed] || [self isCanceling] || [self isCanceled]) {
    return;
  }
  @synchronized(_recoverLock_) {
    if ([self cancelState]) {
      [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) finerWithNSString:JreStrcat("$$$", [self getName], @"recover() thread ", [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName])];
      JavaLangThread *recover = new_JavaxJmdnsImplJmDNSImpl_6_initWithJavaxJmdnsImplJmDNSImpl_withNSString_(self, JreStrcat("$$", [self getName], @".recover()"));
      [recover start];
    }
  }
}

- (void)__recover {
  if ([((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINER)]) {
    [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) finerWithNSString:JreStrcat("$$", [self getName], @"recover() Cleanning up")];
  }
  [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) warningWithNSString:@"RECOVERING"];
  [self purgeTimer];
  id<JavaUtilCollection> oldServiceInfos = new_JavaUtilArrayList_initWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk([self getServices])) values]);
  [self unregisterAllServices];
  JavaxJmdnsImplJmDNSImpl_disposeServiceCollectors(self);
  [self waitForCanceledWithLong:JavaxJmdnsImplConstantsDNSConstants_CLOSE_TIMEOUT];
  [self purgeStateTimer];
  JavaxJmdnsImplJmDNSImpl_closeMulticastSocket(self);
  [((JavaxJmdnsImplDNSCache *) nil_chk([self getCache])) clear];
  if ([((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINER)]) {
    [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) finerWithNSString:JreStrcat("$$", [self getName], @"recover() All is clean")];
  }
  if ([self isCanceled]) {
    for (JavaxJmdnsServiceInfo * __strong info in oldServiceInfos) {
      [((JavaxJmdnsImplServiceInfoImpl *) nil_chk(((JavaxJmdnsImplServiceInfoImpl *) cast_chk(info, [JavaxJmdnsImplServiceInfoImpl class])))) recoverState];
    }
    [self recoverState];
    @try {
      JavaxJmdnsImplJmDNSImpl_openMulticastSocketWithJavaxJmdnsImplHostInfo_(self, [self getLocalHost]);
      JavaxJmdnsImplJmDNSImpl_startWithJavaUtilCollection_(self, oldServiceInfos);
    }
    @catch (JavaLangException *exception) {
      [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$$", [self getName], @"recover() Start services exception ") withNSException:exception];
    }
    [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$$", [self getName], @"recover() We are back!")];
  }
  else {
    [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$$", [self getName], @"recover() Could not recover we are Down!")];
    if ([self getDelegate] != nil) {
      [((id<JavaxJmdnsJmDNS_Delegate>) nil_chk([self getDelegate])) cannotRecoverFromIOErrorWithJavaxJmdnsJmDNS:[self getDns] withJavaUtilCollection:oldServiceInfos];
    }
  }
}

- (void)cleanCache {
  jlong now = JavaLangSystem_currentTimeMillis();
  for (JavaxJmdnsImplDNSEntry * __strong entry_ in nil_chk([((JavaxJmdnsImplDNSCache *) nil_chk([self getCache])) allValues])) {
    @try {
      JavaxJmdnsImplDNSRecord *record = (JavaxJmdnsImplDNSRecord *) cast_chk(entry_, [JavaxJmdnsImplDNSRecord class]);
      if ([((JavaxJmdnsImplDNSRecord *) nil_chk(record)) isExpiredWithLong:now]) {
        [self updateRecordWithLong:now withJavaxJmdnsImplDNSRecord:record withJavaxJmdnsImplJmDNSImpl_Operation:JreLoadEnum(JavaxJmdnsImplJmDNSImpl_Operation, Remove)];
        [((JavaxJmdnsImplDNSCache *) nil_chk([self getCache])) removeDNSEntryWithJavaxJmdnsImplDNSEntry:record];
      }
      else if ([record isStaleWithLong:now]) {
        [self renewServiceCollectorWithJavaxJmdnsImplDNSRecord:record];
      }
    }
    @catch (JavaLangException *exception) {
      [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:JreStrcat("$$@", [self getName], @".Error while reaping records: ", entry_) withNSException:exception];
      [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) severeWithNSString:[self description]];
    }
  }
}

- (void)close {
  if ([self isClosing]) {
    return;
  }
  if ([((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINER)]) {
    [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) finerWithNSString:JreStrcat("$@", @"Cancelling JmDNS: ", self)];
  }
  if ([self closeState]) {
    [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) finerWithNSString:@"Canceling the timer"];
    [self cancelTimer];
    [self unregisterAllServices];
    JavaxJmdnsImplJmDNSImpl_disposeServiceCollectors(self);
    if ([((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINER)]) {
      [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) finerWithNSString:JreStrcat("$@", @"Wait for JmDNS cancel: ", self)];
    }
    [self waitForCanceledWithLong:JavaxJmdnsImplConstantsDNSConstants_CLOSE_TIMEOUT];
    [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) finerWithNSString:@"Canceling the state timer"];
    [self cancelStateTimer];
    [((id<JavaUtilConcurrentExecutorService>) nil_chk(_executor_)) shutdown];
    JavaxJmdnsImplJmDNSImpl_closeMulticastSocket(self);
    if (_shutdown_ != nil) {
      [((JavaLangRuntime *) nil_chk(JavaLangRuntime_getRuntime())) removeShutdownHookWithJavaLangThread:_shutdown_];
    }
    if ([((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINER)]) {
      [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) finerWithNSString:@"JmDNS closed."];
    }
  }
  [self advanceStateWithJavaxJmdnsImplTasksDNSTask:nil];
}

- (void)printServices {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:[self description]];
}

- (NSString *)description {
  JavaLangStringBuilder *aLog = new_JavaLangStringBuilder_initWithInt_(2048);
  (void) [aLog appendWithNSString:@"\t---- Local Host -----"];
  (void) [aLog appendWithNSString:@"\n\t"];
  (void) [aLog appendWithId:_localHost_];
  (void) [aLog appendWithNSString:@"\n\t---- Services -----"];
  for (NSString * __strong key in nil_chk([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_services_)) keySet])) {
    (void) [aLog appendWithNSString:@"\n\t\tService: "];
    (void) [aLog appendWithNSString:key];
    (void) [aLog appendWithNSString:@": "];
    (void) [aLog appendWithId:[_services_ getWithId:key]];
  }
  (void) [aLog appendWithNSString:@"\n"];
  (void) [aLog appendWithNSString:@"\t---- Types ----"];
  for (NSString * __strong key in nil_chk([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_serviceTypes_)) keySet])) {
    JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry *subtypes = [_serviceTypes_ getWithId:key];
    (void) [aLog appendWithNSString:@"\n\t\tType: "];
    (void) [aLog appendWithNSString:[((JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry *) nil_chk(subtypes)) getType]];
    (void) [aLog appendWithNSString:@": "];
    (void) [aLog appendWithId:[subtypes isEmpty] ? @"no subtypes" : (id) subtypes];
  }
  (void) [aLog appendWithNSString:@"\n"];
  (void) [aLog appendWithNSString:[((JavaxJmdnsImplDNSCache *) nil_chk(_cache_)) description]];
  (void) [aLog appendWithNSString:@"\n"];
  (void) [aLog appendWithNSString:@"\t---- Service Collectors ----"];
  for (NSString * __strong key in nil_chk([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_serviceCollectors_)) keySet])) {
    (void) [aLog appendWithNSString:@"\n\t\tService Collector: "];
    (void) [aLog appendWithNSString:key];
    (void) [aLog appendWithNSString:@": "];
    (void) [aLog appendWithId:[_serviceCollectors_ getWithId:key]];
  }
  (void) [aLog appendWithNSString:@"\n"];
  (void) [aLog appendWithNSString:@"\t---- Service Listeners ----"];
  for (NSString * __strong key in nil_chk([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_serviceListeners_)) keySet])) {
    (void) [aLog appendWithNSString:@"\n\t\tService Listener: "];
    (void) [aLog appendWithNSString:key];
    (void) [aLog appendWithNSString:@": "];
    (void) [aLog appendWithId:[_serviceListeners_ getWithId:key]];
  }
  return [aLog description];
}

- (IOSObjectArray *)listWithNSString:(NSString *)type {
  return [self listWithNSString:type withLong:JavaxJmdnsImplConstantsDNSConstants_SERVICE_INFO_TIMEOUT];
}

- (IOSObjectArray *)listWithNSString:(NSString *)type
                            withLong:(jlong)timeout {
  [self cleanCache];
  NSString *loType = [((NSString *) nil_chk(type)) lowercaseString];
  jboolean newCollectorCreated = false;
  if ([self isCanceling] || [self isCanceled]) {
    return [IOSObjectArray newArrayWithLength:0 type:JavaxJmdnsServiceInfo_class_()];
  }
  JavaxJmdnsImplJmDNSImpl_ServiceCollector *collector = [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_serviceCollectors_)) getWithId:loType];
  if (collector == nil) {
    newCollectorCreated = ([_serviceCollectors_ putIfAbsentWithId:loType withId:new_JavaxJmdnsImplJmDNSImpl_ServiceCollector_initWithNSString_(type)] == nil);
    collector = [_serviceCollectors_ getWithId:loType];
    if (newCollectorCreated) {
      JavaxJmdnsImplJmDNSImpl_addServiceListenerWithNSString_withJavaxJmdnsServiceListener_withBoolean_(self, type, collector, JavaxJmdnsImplListenerStatus_SYNCHONEOUS);
    }
  }
  if ([((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINER)]) {
    [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) finerWithNSString:JreStrcat("$$@", [self getName], @".collector: ", collector)];
  }
  return (collector != nil ? [collector listWithLong:timeout] : [IOSObjectArray newArrayWithLength:0 type:JavaxJmdnsServiceInfo_class_()]);
}

- (id<JavaUtilMap>)listBySubtypeWithNSString:(NSString *)type {
  return [self listBySubtypeWithNSString:type withLong:JavaxJmdnsImplConstantsDNSConstants_SERVICE_INFO_TIMEOUT];
}

- (id<JavaUtilMap>)listBySubtypeWithNSString:(NSString *)type
                                    withLong:(jlong)timeout {
  id<JavaUtilMap> map = new_JavaUtilHashMap_initWithInt_(5);
  {
    IOSObjectArray *a__ = [self listWithNSString:type withLong:timeout];
    JavaxJmdnsServiceInfo * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaxJmdnsServiceInfo * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaxJmdnsServiceInfo *info = *b__++;
      NSString *subtype = [((NSString *) nil_chk([((JavaxJmdnsServiceInfo *) nil_chk(info)) getSubtype])) lowercaseString];
      if (![map containsKeyWithId:subtype]) {
        (void) [map putWithId:subtype withId:new_JavaUtilArrayList_initWithInt_(10)];
      }
      [((id<JavaUtilList>) nil_chk([map getWithId:subtype])) addWithId:info];
    }
  }
  id<JavaUtilMap> result = new_JavaUtilHashMap_initWithInt_([map size]);
  for (NSString * __strong subtype in nil_chk([map keySet])) {
    id<JavaUtilList> infoForSubType = [map getWithId:subtype];
    (void) [result putWithId:subtype withId:[((id<JavaUtilList>) nil_chk(infoForSubType)) toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[infoForSubType size] type:JavaxJmdnsServiceInfo_class_()]]];
  }
  return result;
}

- (void)disposeServiceCollectors {
  JavaxJmdnsImplJmDNSImpl_disposeServiceCollectors(self);
}

+ (NSString *)toUnqualifiedNameWithNSString:(NSString *)type
                               withNSString:(NSString *)qualifiedName {
  return JavaxJmdnsImplJmDNSImpl_toUnqualifiedNameWithNSString_withNSString_(type, qualifiedName);
}

- (id<JavaUtilMap>)getServices {
  return _services_;
}

- (void)setLastThrottleIncrementWithLong:(jlong)lastThrottleIncrement {
  self->_lastThrottleIncrement_ = lastThrottleIncrement;
}

- (jlong)getLastThrottleIncrement {
  return _lastThrottleIncrement_;
}

- (void)setThrottleWithInt:(jint)throttle {
  self->_throttle_ = throttle;
}

- (jint)getThrottle {
  return _throttle_;
}

+ (JavaUtilRandom *)getRandom {
  return JavaxJmdnsImplJmDNSImpl_getRandom();
}

- (void)ioLock {
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(_ioLock_)) lock];
}

- (void)ioUnlock {
  [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(_ioLock_)) unlock];
}

- (void)setPlannedAnswerWithJavaxJmdnsImplDNSIncoming:(JavaxJmdnsImplDNSIncoming *)plannedAnswer {
  self->_plannedAnswer_ = plannedAnswer;
}

- (JavaxJmdnsImplDNSIncoming *)getPlannedAnswer {
  return _plannedAnswer_;
}

- (void)setLocalHostWithJavaxJmdnsImplHostInfo:(JavaxJmdnsImplHostInfo *)localHost {
  self->_localHost_ = localHost;
}

- (id<JavaUtilMap>)getServiceTypes {
  return _serviceTypes_;
}

- (JavaNetMulticastSocket *)getSocket {
  return JreLoadVolatileId(&_socket_);
}

- (JavaNetInetAddress *)getGroup {
  return JreLoadVolatileId(&_group_);
}

- (id<JavaxJmdnsJmDNS_Delegate>)getDelegate {
  return JreLoadVolatileId(&self->_delegate_);
}

- (id<JavaxJmdnsJmDNS_Delegate>)setDelegateWithJavaxJmdnsJmDNS_Delegate:(id<JavaxJmdnsJmDNS_Delegate>)delegate {
  id<JavaxJmdnsJmDNS_Delegate> previous = JreLoadVolatileId(&self->_delegate_);
  (void) JreVolatileStrongAssign(&self->_delegate_, delegate);
  return previous;
}

- (void)__javaClone:(JavaxJmdnsImplJmDNSImpl *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&_group_, &original->_group_);
  JreCloneVolatileStrong(&_socket_, &original->_socket_);
  JreCloneVolatileStrong(&_delegate_, &original->_delegate_);
}

- (void)dealloc {
  JreReleaseVolatile(&_group_);
  JreReleaseVolatile(&_socket_);
  JreReleaseVolatile(&_delegate_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x2, 7, 8, 3, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplJmDNSImpl;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 14, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 17, 16, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplDNSCache;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplHostInfo;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "LJavaxJmdnsServiceInfo;", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsServiceInfo;", 0x1, 18, 20, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsServiceInfo;", 0x1, 18, 21, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsServiceInfo;", 0x1, 18, 22, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplServiceInfoImpl;", 0x0, 23, 24, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplServiceInfoImpl;", 0x0, 25, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 29, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 32, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 34, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 38, 39, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 40, 39, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 41, 42, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 43, 44, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 45, 42, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 46, 47, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 48, 49, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 50, 51, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 52, 53, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 54, 55, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 56, 57, 3, -1, -1, -1 },
    { NULL, "V", 0x0, 58, 59, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 60, 57, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplDNSOutgoing;", 0x1, 61, 62, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 63, 64, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 65, 44, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 66, 42, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 67, 68, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 69, -1 },
    { NULL, "LNSString;", 0x1, 70, -1, -1, -1, -1, -1 },
    { NULL, "[LJavaxJmdnsServiceInfo;", 0x1, 71, 42, -1, -1, -1, -1 },
    { NULL, "[LJavaxJmdnsServiceInfo;", 0x1, 71, 72, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 73, 42, -1, 74, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 73, 72, -1, 75, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 76, 19, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 77, -1, -1 },
    { NULL, "V", 0x1, 78, 16, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 79, 80, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilRandom;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 81, 57, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplDNSIncoming;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 82, 8, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 83, -1, -1 },
    { NULL, "LJavaNetMulticastSocket;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsJmDNS_Delegate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsJmDNS_Delegate;", 0x1, 84, 85, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(mainWithNSStringArray:);
  methods[1].selector = @selector(initWithJavaNetInetAddress:withNSString:);
  methods[2].selector = @selector(startWithJavaUtilCollection:);
  methods[3].selector = @selector(openMulticastSocketWithJavaxJmdnsImplHostInfo:);
  methods[4].selector = @selector(closeMulticastSocket);
  methods[5].selector = @selector(advanceStateWithJavaxJmdnsImplTasksDNSTask:);
  methods[6].selector = @selector(revertState);
  methods[7].selector = @selector(cancelState);
  methods[8].selector = @selector(closeState);
  methods[9].selector = @selector(recoverState);
  methods[10].selector = @selector(getDns);
  methods[11].selector = @selector(associateWithTaskWithJavaxJmdnsImplTasksDNSTask:withJavaxJmdnsImplConstantsDNSState:);
  methods[12].selector = @selector(removeAssociationWithTaskWithJavaxJmdnsImplTasksDNSTask:);
  methods[13].selector = @selector(isAssociatedWithTaskWithJavaxJmdnsImplTasksDNSTask:withJavaxJmdnsImplConstantsDNSState:);
  methods[14].selector = @selector(isProbing);
  methods[15].selector = @selector(isAnnouncing);
  methods[16].selector = @selector(isAnnounced);
  methods[17].selector = @selector(isCanceling);
  methods[18].selector = @selector(isCanceled);
  methods[19].selector = @selector(isClosing);
  methods[20].selector = @selector(isClosed);
  methods[21].selector = @selector(waitForAnnouncedWithLong:);
  methods[22].selector = @selector(waitForCanceledWithLong:);
  methods[23].selector = @selector(getCache);
  methods[24].selector = @selector(getName);
  methods[25].selector = @selector(getHostName);
  methods[26].selector = @selector(getLocalHost);
  methods[27].selector = @selector(getInterface);
  methods[28].selector = @selector(getServiceInfoWithNSString:withNSString:);
  methods[29].selector = @selector(getServiceInfoWithNSString:withNSString:withLong:);
  methods[30].selector = @selector(getServiceInfoWithNSString:withNSString:withBoolean:);
  methods[31].selector = @selector(getServiceInfoWithNSString:withNSString:withBoolean:withLong:);
  methods[32].selector = @selector(resolveServiceInfoWithNSString:withNSString:withNSString:withBoolean:);
  methods[33].selector = @selector(getServiceInfoFromCacheWithNSString:withNSString:withNSString:withBoolean:);
  methods[34].selector = @selector(waitForInfoDataWithJavaxJmdnsServiceInfo:withLong:);
  methods[35].selector = @selector(requestServiceInfoWithNSString:withNSString:);
  methods[36].selector = @selector(requestServiceInfoWithNSString:withNSString:withBoolean:);
  methods[37].selector = @selector(requestServiceInfoWithNSString:withNSString:withLong:);
  methods[38].selector = @selector(requestServiceInfoWithNSString:withNSString:withBoolean:withLong:);
  methods[39].selector = @selector(handleServiceResolvedWithJavaxJmdnsServiceEvent:);
  methods[40].selector = @selector(addServiceTypeListenerWithJavaxJmdnsServiceTypeListener:);
  methods[41].selector = @selector(removeServiceTypeListenerWithJavaxJmdnsServiceTypeListener:);
  methods[42].selector = @selector(addServiceListenerWithNSString:withJavaxJmdnsServiceListener:);
  methods[43].selector = @selector(addServiceListenerWithNSString:withJavaxJmdnsServiceListener:withBoolean:);
  methods[44].selector = @selector(removeServiceListenerWithNSString:withJavaxJmdnsServiceListener:);
  methods[45].selector = @selector(registerServiceWithJavaxJmdnsServiceInfo:);
  methods[46].selector = @selector(unregisterServiceWithJavaxJmdnsServiceInfo:);
  methods[47].selector = @selector(unregisterAllServices);
  methods[48].selector = @selector(registerServiceTypeWithNSString:);
  methods[49].selector = @selector(makeServiceNameUniqueWithJavaxJmdnsImplServiceInfoImpl:);
  methods[50].selector = @selector(incrementNameWithNSString:);
  methods[51].selector = @selector(addListenerWithJavaxJmdnsImplDNSListener:withJavaxJmdnsImplDNSQuestion:);
  methods[52].selector = @selector(removeListenerWithJavaxJmdnsImplDNSListener:);
  methods[53].selector = @selector(renewServiceCollectorWithJavaxJmdnsImplDNSRecord:);
  methods[54].selector = @selector(updateRecordWithLong:withJavaxJmdnsImplDNSRecord:withJavaxJmdnsImplJmDNSImpl_Operation:);
  methods[55].selector = @selector(handleRecordWithJavaxJmdnsImplDNSRecord:withLong:);
  methods[56].selector = @selector(handleResponseWithJavaxJmdnsImplDNSIncoming:);
  methods[57].selector = @selector(handleQueryWithJavaxJmdnsImplDNSIncoming:withJavaNetInetAddress:withInt:);
  methods[58].selector = @selector(respondToQueryWithJavaxJmdnsImplDNSIncoming:);
  methods[59].selector = @selector(addAnswerWithJavaxJmdnsImplDNSIncoming:withJavaNetInetAddress:withInt:withJavaxJmdnsImplDNSOutgoing:withJavaxJmdnsImplDNSRecord:);
  methods[60].selector = @selector(sendWithJavaxJmdnsImplDNSOutgoing:);
  methods[61].selector = @selector(purgeTimer);
  methods[62].selector = @selector(purgeStateTimer);
  methods[63].selector = @selector(cancelTimer);
  methods[64].selector = @selector(cancelStateTimer);
  methods[65].selector = @selector(startProber);
  methods[66].selector = @selector(startAnnouncer);
  methods[67].selector = @selector(startRenewer);
  methods[68].selector = @selector(startCanceler);
  methods[69].selector = @selector(startReaper);
  methods[70].selector = @selector(startServiceInfoResolverWithJavaxJmdnsImplServiceInfoImpl:);
  methods[71].selector = @selector(startTypeResolver);
  methods[72].selector = @selector(startServiceResolverWithNSString:);
  methods[73].selector = @selector(startResponderWithJavaxJmdnsImplDNSIncoming:withInt:);
  methods[74].selector = @selector(recover);
  methods[75].selector = @selector(__recover);
  methods[76].selector = @selector(cleanCache);
  methods[77].selector = @selector(close);
  methods[78].selector = @selector(printServices);
  methods[79].selector = @selector(description);
  methods[80].selector = @selector(listWithNSString:);
  methods[81].selector = @selector(listWithNSString:withLong:);
  methods[82].selector = @selector(listBySubtypeWithNSString:);
  methods[83].selector = @selector(listBySubtypeWithNSString:withLong:);
  methods[84].selector = @selector(disposeServiceCollectors);
  methods[85].selector = @selector(toUnqualifiedNameWithNSString:withNSString:);
  methods[86].selector = @selector(getServices);
  methods[87].selector = @selector(setLastThrottleIncrementWithLong:);
  methods[88].selector = @selector(getLastThrottleIncrement);
  methods[89].selector = @selector(setThrottleWithInt:);
  methods[90].selector = @selector(getThrottle);
  methods[91].selector = @selector(getRandom);
  methods[92].selector = @selector(ioLock);
  methods[93].selector = @selector(ioUnlock);
  methods[94].selector = @selector(setPlannedAnswerWithJavaxJmdnsImplDNSIncoming:);
  methods[95].selector = @selector(getPlannedAnswer);
  methods[96].selector = @selector(setLocalHostWithJavaxJmdnsImplHostInfo:);
  methods[97].selector = @selector(getServiceTypes);
  methods[98].selector = @selector(getSocket);
  methods[99].selector = @selector(getGroup);
  methods[100].selector = @selector(getDelegate);
  methods[101].selector = @selector(setDelegateWithJavaxJmdnsJmDNS_Delegate:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0xa, -1, 86, -1, -1 },
    { "_group_", "LJavaNetInetAddress;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_socket_", "LJavaNetMulticastSocket;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_listeners_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 87, -1 },
    { "_serviceListeners_", "LJavaUtilConcurrentConcurrentMap;", .constantValue.asLong = 0, 0x12, -1, -1, 88, -1 },
    { "_typeListeners_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 89, -1 },
    { "_cache_", "LJavaxJmdnsImplDNSCache;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_services_", "LJavaUtilConcurrentConcurrentMap;", .constantValue.asLong = 0, 0x12, -1, -1, 90, -1 },
    { "_serviceTypes_", "LJavaUtilConcurrentConcurrentMap;", .constantValue.asLong = 0, 0x12, -1, -1, 91, -1 },
    { "_delegate_", "LJavaxJmdnsJmDNS_Delegate;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "_shutdown_", "LJavaLangThread;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_localHost_", "LJavaxJmdnsImplHostInfo;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_incomingListener_", "LJavaLangThread;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_throttle_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_lastThrottleIncrement_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_executor_", "LJavaUtilConcurrentExecutorService;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_random", "LJavaUtilRandom;", .constantValue.asLong = 0, 0x1a, -1, 92, -1, -1 },
    { "_ioLock_", "LJavaUtilConcurrentLocksReentrantLock;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_plannedAnswer_", "LJavaxJmdnsImplDNSIncoming;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_serviceCollectors_", "LJavaUtilConcurrentConcurrentMap;", .constantValue.asLong = 0, 0x12, -1, -1, 93, -1 },
    { "_name_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_recoverLock_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "main", "[LNSString;", "LJavaNetInetAddress;LNSString;", "LJavaIoIOException;", "start", "LJavaUtilCollection;", "(Ljava/util/Collection<+Ljavax/jmdns/ServiceInfo;>;)V", "openMulticastSocket", "LJavaxJmdnsImplHostInfo;", "advanceState", "LJavaxJmdnsImplTasksDNSTask;", "associateWithTask", "LJavaxJmdnsImplTasksDNSTask;LJavaxJmdnsImplConstantsDNSState;", "removeAssociationWithTask", "isAssociatedWithTask", "waitForAnnounced", "J", "waitForCanceled", "getServiceInfo", "LNSString;LNSString;", "LNSString;LNSString;J", "LNSString;LNSString;Z", "LNSString;LNSString;ZJ", "resolveServiceInfo", "LNSString;LNSString;LNSString;Z", "getServiceInfoFromCache", "waitForInfoData", "LJavaxJmdnsServiceInfo;J", "requestServiceInfo", "handleServiceResolved", "LJavaxJmdnsServiceEvent;", "addServiceTypeListener", "LJavaxJmdnsServiceTypeListener;", "removeServiceTypeListener", "addServiceListener", "LNSString;LJavaxJmdnsServiceListener;", "LNSString;LJavaxJmdnsServiceListener;Z", "removeServiceListener", "registerService", "LJavaxJmdnsServiceInfo;", "unregisterService", "registerServiceType", "LNSString;", "makeServiceNameUnique", "LJavaxJmdnsImplServiceInfoImpl;", "incrementName", "addListener", "LJavaxJmdnsImplDNSListener;LJavaxJmdnsImplDNSQuestion;", "removeListener", "LJavaxJmdnsImplDNSListener;", "renewServiceCollector", "LJavaxJmdnsImplDNSRecord;", "updateRecord", "JLJavaxJmdnsImplDNSRecord;LJavaxJmdnsImplJmDNSImpl_Operation;", "handleRecord", "LJavaxJmdnsImplDNSRecord;J", "handleResponse", "LJavaxJmdnsImplDNSIncoming;", "handleQuery", "LJavaxJmdnsImplDNSIncoming;LJavaNetInetAddress;I", "respondToQuery", "addAnswer", "LJavaxJmdnsImplDNSIncoming;LJavaNetInetAddress;ILJavaxJmdnsImplDNSOutgoing;LJavaxJmdnsImplDNSRecord;", "send", "LJavaxJmdnsImplDNSOutgoing;", "startServiceInfoResolver", "startServiceResolver", "startResponder", "LJavaxJmdnsImplDNSIncoming;I", (void *)&JavaxJmdnsImplJmDNSImpl__Annotations$0, "toString", "list", "LNSString;J", "listBySubtype", "(Ljava/lang/String;)Ljava/util/Map<Ljava/lang/String;[Ljavax/jmdns/ServiceInfo;>;", "(Ljava/lang/String;J)Ljava/util/Map<Ljava/lang/String;[Ljavax/jmdns/ServiceInfo;>;", "toUnqualifiedName", "()Ljava/util/Map<Ljava/lang/String;Ljavax/jmdns/ServiceInfo;>;", "setLastThrottleIncrement", "setThrottle", "I", "setPlannedAnswer", "setLocalHost", "()Ljava/util/Map<Ljava/lang/String;Ljavax/jmdns/impl/JmDNSImpl$ServiceTypeEntry;>;", "setDelegate", "LJavaxJmdnsJmDNS_Delegate;", &JavaxJmdnsImplJmDNSImpl_logger, "Ljava/util/List<Ljavax/jmdns/impl/DNSListener;>;", "Ljava/util/concurrent/ConcurrentMap<Ljava/lang/String;Ljava/util/List<Ljavax/jmdns/impl/ListenerStatus$ServiceListenerStatus;>;>;", "Ljava/util/Set<Ljavax/jmdns/impl/ListenerStatus$ServiceTypeListenerStatus;>;", "Ljava/util/concurrent/ConcurrentMap<Ljava/lang/String;Ljavax/jmdns/ServiceInfo;>;", "Ljava/util/concurrent/ConcurrentMap<Ljava/lang/String;Ljavax/jmdns/impl/JmDNSImpl$ServiceTypeEntry;>;", &JavaxJmdnsImplJmDNSImpl__random, "Ljava/util/concurrent/ConcurrentMap<Ljava/lang/String;Ljavax/jmdns/impl/JmDNSImpl$ServiceCollector;>;", "LJavaxJmdnsImplJmDNSImpl_Operation;LJavaxJmdnsImplJmDNSImpl_ServiceTypeEntry;LJavaxJmdnsImplJmDNSImpl_Shutdown;LJavaxJmdnsImplJmDNSImpl_ServiceCollector;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplJmDNSImpl = { "JmDNSImpl", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x1, 102, 22, -1, 94, -1, -1, -1 };
  return &_JavaxJmdnsImplJmDNSImpl;
}

+ (void)initialize {
  if (self == [JavaxJmdnsImplJmDNSImpl class]) {
    JavaxJmdnsImplJmDNSImpl_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([JavaxJmdnsImplJmDNSImpl_class_() getName]);
    JavaxJmdnsImplJmDNSImpl__random = new_JavaUtilRandom_init();
    J2OBJC_SET_INITIALIZED(JavaxJmdnsImplJmDNSImpl)
  }
}

@end

void JavaxJmdnsImplJmDNSImpl_mainWithNSStringArray_(IOSObjectArray *argv) {
  JavaxJmdnsImplJmDNSImpl_initialize();
  NSString *version_ = nil;
  @try {
    JavaUtilProperties *pomProperties = new_JavaUtilProperties_init();
    [pomProperties load__WithJavaIoInputStream:[JavaxJmdnsImplJmDNSImpl_class_() getResourceAsStream:@"/META-INF/maven/javax.jmdns/jmdns/pom.properties"]];
    version_ = [pomProperties getPropertyWithNSString:@"version"];
  }
  @catch (JavaLangException *e) {
    version_ = @"RUNNING.IN.IDE.FULL";
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$C", @"JmDNS version \"", version_, '"')];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@" "];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$$$$$", @"Running on java version \"", JavaLangSystem_getPropertyWithNSString_(@"java.version"), @"\" (build ", JavaLangSystem_getPropertyWithNSString_(@"java.runtime.version"), @") from ", JavaLangSystem_getPropertyWithNSString_(@"java.vendor"))];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$$$$$", @"Operating environment \"", JavaLangSystem_getPropertyWithNSString_(@"os.name"), @"\" version ", JavaLangSystem_getPropertyWithNSString_(@"os.version"), @" on ", JavaLangSystem_getPropertyWithNSString_(@"os.arch"))];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"For more information on JmDNS please visit https://sourceforge.net/projects/jmdns/"];
}

void JavaxJmdnsImplJmDNSImpl_initWithJavaNetInetAddress_withNSString_(JavaxJmdnsImplJmDNSImpl *self, JavaNetInetAddress *address, NSString *name) {
  JavaxJmdnsJmDNS_init(self);
  self->_executor_ = JavaUtilConcurrentExecutors_newSingleThreadExecutor();
  self->_ioLock_ = new_JavaUtilConcurrentLocksReentrantLock_init();
  self->_recoverLock_ = new_NSObject_init();
  if ([((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINER)]) {
    [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) finerWithNSString:@"JmDNS instance created"];
  }
  self->_cache_ = new_JavaxJmdnsImplDNSCache_initWithInt_(100);
  self->_listeners_ = JavaUtilCollections_synchronizedListWithJavaUtilList_(new_JavaUtilArrayList_init());
  self->_serviceListeners_ = new_JavaUtilConcurrentConcurrentHashMap_init();
  self->_typeListeners_ = JavaUtilCollections_synchronizedSetWithJavaUtilSet_(new_JavaUtilHashSet_init());
  self->_serviceCollectors_ = new_JavaUtilConcurrentConcurrentHashMap_init();
  self->_services_ = new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(20);
  self->_serviceTypes_ = new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(20);
  self->_localHost_ = JavaxJmdnsImplHostInfo_newHostInfoWithJavaNetInetAddress_withJavaxJmdnsImplJmDNSImpl_withNSString_(address, self, name);
  self->_name_ = (name != nil ? name : [((JavaxJmdnsImplHostInfo *) nil_chk(self->_localHost_)) getName]);
  JavaxJmdnsImplJmDNSImpl_openMulticastSocketWithJavaxJmdnsImplHostInfo_(self, [self getLocalHost]);
  JavaxJmdnsImplJmDNSImpl_startWithJavaUtilCollection_(self, [((id<JavaUtilMap>) nil_chk([self getServices])) values]);
  [self startReaper];
}

JavaxJmdnsImplJmDNSImpl *new_JavaxJmdnsImplJmDNSImpl_initWithJavaNetInetAddress_withNSString_(JavaNetInetAddress *address, NSString *name) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplJmDNSImpl, initWithJavaNetInetAddress_withNSString_, address, name)
}

JavaxJmdnsImplJmDNSImpl *create_JavaxJmdnsImplJmDNSImpl_initWithJavaNetInetAddress_withNSString_(JavaNetInetAddress *address, NSString *name) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplJmDNSImpl, initWithJavaNetInetAddress_withNSString_, address, name)
}

void JavaxJmdnsImplJmDNSImpl_startWithJavaUtilCollection_(JavaxJmdnsImplJmDNSImpl *self, id<JavaUtilCollection> serviceInfos) {
  if (self->_incomingListener_ == nil) {
    self->_incomingListener_ = new_JavaxJmdnsImplSocketListener_initWithJavaxJmdnsImplJmDNSImpl_(self);
    [self->_incomingListener_ start];
  }
  [self startProber];
  for (JavaxJmdnsServiceInfo * __strong info in nil_chk(serviceInfos)) {
    @try {
      [self registerServiceWithJavaxJmdnsServiceInfo:new_JavaxJmdnsImplServiceInfoImpl_initWithJavaxJmdnsServiceInfo_(info)];
    }
    @catch (JavaLangException *exception) {
      [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:@"start() Registration exception " withNSException:exception];
    }
  }
}

void JavaxJmdnsImplJmDNSImpl_openMulticastSocketWithJavaxJmdnsImplHostInfo_(JavaxJmdnsImplJmDNSImpl *self, JavaxJmdnsImplHostInfo *hostInfo) {
  if (JreLoadVolatileId(&self->_group_) == nil) {
    if ([[((JavaxJmdnsImplHostInfo *) nil_chk(hostInfo)) getInetAddress] isKindOfClass:[JavaNetInet6Address class]]) {
      (void) JreVolatileStrongAssign(&self->_group_, JavaNetInetAddress_getByNameWithNSString_(JavaxJmdnsImplConstantsDNSConstants_MDNS_GROUP_IPV6));
    }
    else {
      (void) JreVolatileStrongAssign(&self->_group_, JavaNetInetAddress_getByNameWithNSString_(JavaxJmdnsImplConstantsDNSConstants_MDNS_GROUP));
    }
  }
  if (JreLoadVolatileId(&self->_socket_) != nil) {
    JavaxJmdnsImplJmDNSImpl_closeMulticastSocket(self);
  }
  (void) JreVolatileStrongAssign(&self->_socket_, new_JavaNetMulticastSocket_initWithInt_(JreLoadStatic(JavaxJmdnsImplConstantsDNSConstants, MDNS_PORT)));
  if ((hostInfo != nil) && ([((JavaxJmdnsImplHostInfo *) nil_chk(hostInfo)) getInterface] != nil)) {
    @try {
      [((JavaNetMulticastSocket *) nil_chk(JreLoadVolatileId(&self->_socket_))) setNetworkInterfaceWithJavaNetNetworkInterface:[((JavaxJmdnsImplHostInfo *) nil_chk(hostInfo)) getInterface]];
    }
    @catch (JavaNetSocketException *e) {
      if ([((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE)]) {
        [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) fineWithNSString:JreStrcat("$$", @"openMulticastSocket() Set network interface exception: ", [e getMessage])];
      }
    }
  }
  [((JavaNetMulticastSocket *) nil_chk(JreLoadVolatileId(&self->_socket_))) setTimeToLiveWithInt:255];
  [((JavaNetMulticastSocket *) nil_chk(JreLoadVolatileId(&self->_socket_))) joinGroupWithJavaNetInetAddress:JreLoadVolatileId(&self->_group_)];
}

void JavaxJmdnsImplJmDNSImpl_closeMulticastSocket(JavaxJmdnsImplJmDNSImpl *self) {
  if ([((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINER)]) {
    [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) finerWithNSString:@"closeMulticastSocket()"];
  }
  if (JreLoadVolatileId(&self->_socket_) != nil) {
    @try {
      @try {
        [((JavaNetMulticastSocket *) nil_chk(JreLoadVolatileId(&self->_socket_))) leaveGroupWithJavaNetInetAddress:JreLoadVolatileId(&self->_group_)];
      }
      @catch (JavaNetSocketException *exception) {
      }
      [((JavaNetMulticastSocket *) nil_chk(JreLoadVolatileId(&self->_socket_))) close];
      while (self->_incomingListener_ != nil && [self->_incomingListener_ isAlive]) {
        @synchronized(self) {
          @try {
            if (self->_incomingListener_ != nil && [self->_incomingListener_ isAlive]) {
              if ([((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINER)]) {
                [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) finerWithNSString:@"closeMulticastSocket(): waiting for jmDNS monitor"];
              }
              [self java_waitWithLong:1000];
            }
          }
          @catch (JavaLangInterruptedException *ignored) {
          }
        }
      }
      self->_incomingListener_ = nil;
    }
    @catch (JavaLangException *exception) {
      [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:@"closeMulticastSocket() Close socket exception " withNSException:exception];
    }
    (void) JreVolatileStrongAssign(&self->_socket_, nil);
  }
}

void JavaxJmdnsImplJmDNSImpl_waitForInfoDataWithJavaxJmdnsServiceInfo_withLong_(JavaxJmdnsImplJmDNSImpl *self, JavaxJmdnsServiceInfo *info, jlong timeout) {
  @synchronized(info) {
    jlong loops = (timeout / 200LL);
    if (loops < 1) {
      loops = 1;
    }
    for (jint i = 0; i < loops; i++) {
      if ([((JavaxJmdnsServiceInfo *) nil_chk(info)) hasData]) {
        break;
      }
      @try {
        [info java_waitWithLong:200];
      }
      @catch (JavaLangInterruptedException *e) {
      }
    }
  }
}

void JavaxJmdnsImplJmDNSImpl_addServiceListenerWithNSString_withJavaxJmdnsServiceListener_withBoolean_(JavaxJmdnsImplJmDNSImpl *self, NSString *type, id<JavaxJmdnsServiceListener> listener, jboolean synch) {
  JavaxJmdnsImplListenerStatus_ServiceListenerStatus *status = new_JavaxJmdnsImplListenerStatus_ServiceListenerStatus_initWithJavaxJmdnsServiceListener_withBoolean_(listener, synch);
  NSString *loType = [((NSString *) nil_chk(type)) lowercaseString];
  id<JavaUtilList> list = [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(self->_serviceListeners_)) getWithId:loType];
  if (list == nil) {
    if ([self->_serviceListeners_ putIfAbsentWithId:loType withId:new_JavaUtilLinkedList_init()] == nil) {
      if ([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(self->_serviceCollectors_)) putIfAbsentWithId:loType withId:new_JavaxJmdnsImplJmDNSImpl_ServiceCollector_initWithNSString_(type)] == nil) {
        JavaxJmdnsImplJmDNSImpl_addServiceListenerWithNSString_withJavaxJmdnsServiceListener_withBoolean_(self, loType, [self->_serviceCollectors_ getWithId:loType], JavaxJmdnsImplListenerStatus_SYNCHONEOUS);
      }
    }
    list = [self->_serviceListeners_ getWithId:loType];
  }
  if (list != nil) {
    @synchronized(list) {
      if (![list containsWithId:listener]) {
        [list addWithId:status];
      }
    }
  }
  id<JavaUtilList> serviceEvents = new_JavaUtilArrayList_init();
  id<JavaUtilCollection> dnsEntryLits = [((JavaxJmdnsImplDNSCache *) nil_chk([self getCache])) allValues];
  for (JavaxJmdnsImplDNSEntry * __strong entry_ in nil_chk(dnsEntryLits)) {
    JavaxJmdnsImplDNSRecord *record = (JavaxJmdnsImplDNSRecord *) cast_chk(entry_, [JavaxJmdnsImplDNSRecord class]);
    if ([((JavaxJmdnsImplDNSRecord *) nil_chk(record)) getRecordType] == JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordType, TYPE_SRV)) {
      if ([((NSString *) nil_chk([record getKey])) java_hasSuffix:loType]) {
        [serviceEvents addWithId:new_JavaxJmdnsImplServiceEventImpl_initWithJavaxJmdnsImplJmDNSImpl_withNSString_withNSString_withJavaxJmdnsServiceInfo_(self, [record getType], JavaxJmdnsImplJmDNSImpl_toUnqualifiedNameWithNSString_withNSString_([record getType], [record getName]), [record getServiceInfo])];
      }
    }
  }
  for (JavaxJmdnsServiceEvent * __strong serviceEvent in serviceEvents) {
    [status serviceAddedWithJavaxJmdnsServiceEvent:serviceEvent];
  }
  [self startServiceResolverWithNSString:type];
}

jboolean JavaxJmdnsImplJmDNSImpl_makeServiceNameUniqueWithJavaxJmdnsImplServiceInfoImpl_(JavaxJmdnsImplJmDNSImpl *self, JavaxJmdnsImplServiceInfoImpl *info) {
  NSString *originalQualifiedName = [((JavaxJmdnsImplServiceInfoImpl *) nil_chk(info)) getKey];
  jlong now = JavaLangSystem_currentTimeMillis();
  jboolean collision;
  do {
    collision = false;
    for (JavaxJmdnsImplDNSEntry * __strong dnsEntry in nil_chk([((JavaxJmdnsImplDNSCache *) nil_chk([self getCache])) getDNSEntryListWithNSString:[info getKey]])) {
      if ([((JavaxJmdnsImplConstantsDNSRecordType *) nil_chk(JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordType, TYPE_SRV))) isEqual:[((JavaxJmdnsImplDNSEntry *) nil_chk(dnsEntry)) getRecordType]] && ![dnsEntry isExpiredWithLong:now]) {
        JavaxJmdnsImplDNSRecord_Service *s = (JavaxJmdnsImplDNSRecord_Service *) cast_chk(dnsEntry, [JavaxJmdnsImplDNSRecord_Service class]);
        if ([s getPort] != [info getPort] || ![((NSString *) nil_chk([s getServer])) isEqual:[((JavaxJmdnsImplHostInfo *) nil_chk(self->_localHost_)) getName]]) {
          if ([((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINER)]) {
            [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) finerWithNSString:JreStrcat("$@$$C$$Z", @"makeServiceNameUnique() JmDNS.makeServiceNameUnique srv collision:", dnsEntry, @" s.server=", [s getServer], ' ', [((JavaxJmdnsImplHostInfo *) nil_chk(self->_localHost_)) getName], @" equals:", ([((NSString *) nil_chk([s getServer])) isEqual:[((JavaxJmdnsImplHostInfo *) nil_chk(self->_localHost_)) getName]]))];
          }
          [info setNameWithNSString:[self incrementNameWithNSString:[info getName]]];
          collision = true;
          break;
        }
      }
    }
    JavaxJmdnsServiceInfo *selfService = [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(self->_services_)) getWithId:[info getKey]];
    if (selfService != nil && selfService != info) {
      [info setNameWithNSString:[self incrementNameWithNSString:[info getName]]];
      collision = true;
    }
  }
  while (collision);
  return !([((NSString *) nil_chk(originalQualifiedName)) isEqual:[info getKey]]);
}

void JavaxJmdnsImplJmDNSImpl_disposeServiceCollectors(JavaxJmdnsImplJmDNSImpl *self) {
  if ([((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINER)]) {
    [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmDNSImpl_logger)) finerWithNSString:@"disposeServiceCollectors()"];
  }
  for (NSString * __strong type in nil_chk([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(self->_serviceCollectors_)) keySet])) {
    JavaxJmdnsImplJmDNSImpl_ServiceCollector *collector = [self->_serviceCollectors_ getWithId:type];
    if (collector != nil) {
      [self removeServiceListenerWithNSString:type withJavaxJmdnsServiceListener:collector];
      [self->_serviceCollectors_ removeWithId:type withId:collector];
    }
  }
}

NSString *JavaxJmdnsImplJmDNSImpl_toUnqualifiedNameWithNSString_withNSString_(NSString *type, NSString *qualifiedName) {
  JavaxJmdnsImplJmDNSImpl_initialize();
  NSString *loType = [((NSString *) nil_chk(type)) lowercaseString];
  NSString *loQualifiedName = [((NSString *) nil_chk(qualifiedName)) lowercaseString];
  if ([((NSString *) nil_chk(loQualifiedName)) java_hasSuffix:loType] && !([loQualifiedName isEqual:loType])) {
    return [qualifiedName java_substring:0 endIndex:[qualifiedName java_length] - [type java_length] - 1];
  }
  return qualifiedName;
}

JavaUtilRandom *JavaxJmdnsImplJmDNSImpl_getRandom() {
  JavaxJmdnsImplJmDNSImpl_initialize();
  return JavaxJmdnsImplJmDNSImpl__random;
}

IOSObjectArray *JavaxJmdnsImplJmDNSImpl__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplJmDNSImpl)

J2OBJC_INITIALIZED_DEFN(JavaxJmdnsImplJmDNSImpl_Operation)

JavaxJmdnsImplJmDNSImpl_Operation *JavaxJmdnsImplJmDNSImpl_Operation_values_[5];

@implementation JavaxJmdnsImplJmDNSImpl_Operation

+ (IOSObjectArray *)values {
  return JavaxJmdnsImplJmDNSImpl_Operation_values();
}

+ (JavaxJmdnsImplJmDNSImpl_Operation *)valueOfWithNSString:(NSString *)name {
  return JavaxJmdnsImplJmDNSImpl_Operation_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LJavaxJmdnsImplJmDNSImpl_Operation;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplJmDNSImpl_Operation;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "Remove", "LJavaxJmdnsImplJmDNSImpl_Operation;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "Update", "LJavaxJmdnsImplJmDNSImpl_Operation;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "Add", "LJavaxJmdnsImplJmDNSImpl_Operation;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "RegisterServiceType", "LJavaxJmdnsImplJmDNSImpl_Operation;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "Noop", "LJavaxJmdnsImplJmDNSImpl_Operation;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(JavaxJmdnsImplJmDNSImpl_Operation, Remove), &JreEnum(JavaxJmdnsImplJmDNSImpl_Operation, Update), &JreEnum(JavaxJmdnsImplJmDNSImpl_Operation, Add), &JreEnum(JavaxJmdnsImplJmDNSImpl_Operation, RegisterServiceType), &JreEnum(JavaxJmdnsImplJmDNSImpl_Operation, Noop), "LJavaxJmdnsImplJmDNSImpl;", "Ljava/lang/Enum<Ljavax/jmdns/impl/JmDNSImpl$Operation;>;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplJmDNSImpl_Operation = { "Operation", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x4019, 2, 5, 7, -1, -1, 8, -1 };
  return &_JavaxJmdnsImplJmDNSImpl_Operation;
}

+ (void)initialize {
  if (self == [JavaxJmdnsImplJmDNSImpl_Operation class]) {
    JreEnum(JavaxJmdnsImplJmDNSImpl_Operation, Remove) = new_JavaxJmdnsImplJmDNSImpl_Operation_initWithNSString_withInt_(@"Remove", 0);
    JreEnum(JavaxJmdnsImplJmDNSImpl_Operation, Update) = new_JavaxJmdnsImplJmDNSImpl_Operation_initWithNSString_withInt_(@"Update", 1);
    JreEnum(JavaxJmdnsImplJmDNSImpl_Operation, Add) = new_JavaxJmdnsImplJmDNSImpl_Operation_initWithNSString_withInt_(@"Add", 2);
    JreEnum(JavaxJmdnsImplJmDNSImpl_Operation, RegisterServiceType) = new_JavaxJmdnsImplJmDNSImpl_Operation_initWithNSString_withInt_(@"RegisterServiceType", 3);
    JreEnum(JavaxJmdnsImplJmDNSImpl_Operation, Noop) = new_JavaxJmdnsImplJmDNSImpl_Operation_initWithNSString_withInt_(@"Noop", 4);
    J2OBJC_SET_INITIALIZED(JavaxJmdnsImplJmDNSImpl_Operation)
  }
}

@end

void JavaxJmdnsImplJmDNSImpl_Operation_initWithNSString_withInt_(JavaxJmdnsImplJmDNSImpl_Operation *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

JavaxJmdnsImplJmDNSImpl_Operation *new_JavaxJmdnsImplJmDNSImpl_Operation_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplJmDNSImpl_Operation, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *JavaxJmdnsImplJmDNSImpl_Operation_values() {
  JavaxJmdnsImplJmDNSImpl_Operation_initialize();
  return [IOSObjectArray arrayWithObjects:JavaxJmdnsImplJmDNSImpl_Operation_values_ count:5 type:JavaxJmdnsImplJmDNSImpl_Operation_class_()];
}

JavaxJmdnsImplJmDNSImpl_Operation *JavaxJmdnsImplJmDNSImpl_Operation_valueOfWithNSString_(NSString *name) {
  JavaxJmdnsImplJmDNSImpl_Operation_initialize();
  for (int i = 0; i < 5; i++) {
    JavaxJmdnsImplJmDNSImpl_Operation *e = JavaxJmdnsImplJmDNSImpl_Operation_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

JavaxJmdnsImplJmDNSImpl_Operation *JavaxJmdnsImplJmDNSImpl_Operation_fromOrdinal(NSUInteger ordinal) {
  JavaxJmdnsImplJmDNSImpl_Operation_initialize();
  if (ordinal >= 5) {
    return nil;
  }
  return JavaxJmdnsImplJmDNSImpl_Operation_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplJmDNSImpl_Operation)

@implementation JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry

- (instancetype)initWithNSString:(NSString *)type {
  JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry_initWithNSString_(self, type);
  return self;
}

- (NSString *)getType {
  return _type_;
}

- (id<JavaUtilSet>)entrySet {
  return _entrySet_;
}

- (jboolean)containsWithNSString:(NSString *)subtype {
  return subtype != nil && [self containsKeyWithId:[subtype lowercaseString]];
}

- (jboolean)addWithNSString:(NSString *)subtype {
  if (subtype == nil || [self containsWithNSString:subtype]) {
    return false;
  }
  [((id<JavaUtilSet>) nil_chk(_entrySet_)) addWithId:new_JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry_SubTypeEntry_initWithNSString_(subtype)];
  return true;
}

- (id<JavaUtilIterator>)iterator {
  return [((id<JavaUtilSet>) nil_chk([self keySet])) iterator];
}

- (JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry *)java_clone {
  JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry *entry_ = new_JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry_initWithNSString_([self getType]);
  for (id<JavaUtilMap_Entry> __strong subTypeEntry in nil_chk([self entrySet])) {
    [entry_ addWithNSString:[((id<JavaUtilMap_Entry>) nil_chk(subTypeEntry)) getValue]];
  }
  return entry_;
}

- (NSString *)description {
  JavaLangStringBuilder *aLog = new_JavaLangStringBuilder_initWithInt_(200);
  if ([self isEmpty]) {
    (void) [aLog appendWithNSString:@"empty"];
  }
  else {
    for (NSString * __strong value in nil_chk([self values])) {
      (void) [aLog appendWithNSString:value];
      (void) [aLog appendWithNSString:@", "];
    }
    [aLog setLengthWithInt:[aLog java_length] - 2];
  }
  return [aLog description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "Z", 0x1, 2, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 4, -1, -1 },
    { NULL, "LJavaxJmdnsImplJmDNSImpl_ServiceTypeEntry;", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(getType);
  methods[2].selector = @selector(entrySet);
  methods[3].selector = @selector(containsWithNSString:);
  methods[4].selector = @selector(addWithNSString:);
  methods[5].selector = @selector(iterator);
  methods[6].selector = @selector(java_clone);
  methods[7].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_entrySet_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 7, -1 },
    { "_type_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "()Ljava/util/Set<Ljava/util/Map$Entry<Ljava/lang/String;Ljava/lang/String;>;>;", "contains", "add", "()Ljava/util/Iterator<Ljava/lang/String;>;", "clone", "toString", "Ljava/util/Set<Ljava/util/Map$Entry<Ljava/lang/String;Ljava/lang/String;>;>;", "LJavaxJmdnsImplJmDNSImpl;", "LJavaxJmdnsImplJmDNSImpl_ServiceTypeEntry_SubTypeEntry;", "Ljava/util/AbstractMap<Ljava/lang/String;Ljava/lang/String;>;Ljava/lang/Cloneable;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry = { "ServiceTypeEntry", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x9, 8, 2, 8, 9, -1, 10, -1 };
  return &_JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self java_clone];
}

@end

void JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry_initWithNSString_(JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry *self, NSString *type) {
  JavaUtilAbstractMap_init(self);
  self->_type_ = type;
  self->_entrySet_ = new_JavaUtilHashSet_init();
}

JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry *new_JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry_initWithNSString_(NSString *type) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry, initWithNSString_, type)
}

JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry *create_JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry_initWithNSString_(NSString *type) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry, initWithNSString_, type)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry)

@implementation JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry_SubTypeEntry

- (instancetype)initWithNSString:(NSString *)subtype {
  JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry_SubTypeEntry_initWithNSString_(self, subtype);
  return self;
}

- (NSString *)getKey {
  return _key_;
}

- (NSString *)getValue {
  return _value_;
}

- (NSString *)setValueWithId:(NSString *)value {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (jboolean)isEqual:(id)entry_ {
  if (!([JavaUtilMap_Entry_class_() isInstance:entry_])) {
    return false;
  }
  return [((NSString *) nil_chk([self getKey])) isEqual:[((id<JavaUtilMap_Entry>) nil_chk(((id<JavaUtilMap_Entry>) cast_check(entry_, JavaUtilMap_Entry_class_())))) getKey]] && [((NSString *) nil_chk([self getValue])) isEqual:[((id<JavaUtilMap_Entry>) nil_chk(((id<JavaUtilMap_Entry>) cast_check(entry_, JavaUtilMap_Entry_class_())))) getValue]];
}

- (NSUInteger)hash {
  return (_key_ == nil ? 0 : ((jint) [_key_ hash])) ^ (_value_ == nil ? 0 : ((jint) [_value_ hash]));
}

- (JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry_SubTypeEntry *)java_clone {
  return self;
}

- (NSString *)description {
  return JreStrcat("$C$", _key_, '=', _value_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplJmDNSImpl_ServiceTypeEntry_SubTypeEntry;", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(getKey);
  methods[2].selector = @selector(getValue);
  methods[3].selector = @selector(setValueWithId:);
  methods[4].selector = @selector(isEqual:);
  methods[5].selector = @selector(hash);
  methods[6].selector = @selector(java_clone);
  methods[7].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry_SubTypeEntry_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "_key_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_value_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "setValue", "equals", "LNSObject;", "hashCode", "clone", "toString", "LJavaxJmdnsImplJmDNSImpl_ServiceTypeEntry;", "Ljava/lang/Object;Ljava/util/Map$Entry<Ljava/lang/String;Ljava/lang/String;>;Ljava/io/Serializable;Ljava/lang/Cloneable;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry_SubTypeEntry = { "SubTypeEntry", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0xa, 8, 3, 7, -1, -1, 8, -1 };
  return &_JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry_SubTypeEntry;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self java_clone];
}

@end

void JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry_SubTypeEntry_initWithNSString_(JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry_SubTypeEntry *self, NSString *subtype) {
  NSObject_init(self);
  self->_value_ = (subtype != nil ? subtype : @"");
  self->_key_ = [self->_value_ lowercaseString];
}

JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry_SubTypeEntry *new_JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry_SubTypeEntry_initWithNSString_(NSString *subtype) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry_SubTypeEntry, initWithNSString_, subtype)
}

JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry_SubTypeEntry *create_JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry_SubTypeEntry_initWithNSString_(NSString *subtype) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry_SubTypeEntry, initWithNSString_, subtype)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry_SubTypeEntry)

@implementation JavaxJmdnsImplJmDNSImpl_1

- (instancetype)initWithJavaxJmdnsImplListenerStatus_ServiceListenerStatus:(JavaxJmdnsImplListenerStatus_ServiceListenerStatus *)capture$0
                                                withJavaxJmdnsServiceEvent:(JavaxJmdnsServiceEvent *)capture$1 {
  JavaxJmdnsImplJmDNSImpl_1_initWithJavaxJmdnsImplListenerStatus_ServiceListenerStatus_withJavaxJmdnsServiceEvent_(self, capture$0, capture$1);
  return self;
}

- (void)run {
  [((JavaxJmdnsImplListenerStatus_ServiceListenerStatus *) nil_chk(val$listener_)) serviceResolvedWithJavaxJmdnsServiceEvent:val$localEvent_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaxJmdnsImplListenerStatus_ServiceListenerStatus:withJavaxJmdnsServiceEvent:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$listener_", "LJavaxJmdnsImplListenerStatus_ServiceListenerStatus;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$localEvent_", "LJavaxJmdnsServiceEvent;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaxJmdnsImplJmDNSImpl;", "handleServiceResolvedWithJavaxJmdnsServiceEvent:" };
  static const J2ObjcClassInfo _JavaxJmdnsImplJmDNSImpl_1 = { "", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x8018, 2, 2, 0, -1, 1, -1, -1 };
  return &_JavaxJmdnsImplJmDNSImpl_1;
}

@end

void JavaxJmdnsImplJmDNSImpl_1_initWithJavaxJmdnsImplListenerStatus_ServiceListenerStatus_withJavaxJmdnsServiceEvent_(JavaxJmdnsImplJmDNSImpl_1 *self, JavaxJmdnsImplListenerStatus_ServiceListenerStatus *capture$0, JavaxJmdnsServiceEvent *capture$1) {
  self->val$listener_ = capture$0;
  self->val$localEvent_ = capture$1;
  NSObject_init(self);
}

JavaxJmdnsImplJmDNSImpl_1 *new_JavaxJmdnsImplJmDNSImpl_1_initWithJavaxJmdnsImplListenerStatus_ServiceListenerStatus_withJavaxJmdnsServiceEvent_(JavaxJmdnsImplListenerStatus_ServiceListenerStatus *capture$0, JavaxJmdnsServiceEvent *capture$1) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplJmDNSImpl_1, initWithJavaxJmdnsImplListenerStatus_ServiceListenerStatus_withJavaxJmdnsServiceEvent_, capture$0, capture$1)
}

JavaxJmdnsImplJmDNSImpl_1 *create_JavaxJmdnsImplJmDNSImpl_1_initWithJavaxJmdnsImplListenerStatus_ServiceListenerStatus_withJavaxJmdnsServiceEvent_(JavaxJmdnsImplListenerStatus_ServiceListenerStatus *capture$0, JavaxJmdnsServiceEvent *capture$1) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplJmDNSImpl_1, initWithJavaxJmdnsImplListenerStatus_ServiceListenerStatus_withJavaxJmdnsServiceEvent_, capture$0, capture$1)
}

@implementation JavaxJmdnsImplJmDNSImpl_2

- (instancetype)initWithJavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus:(JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus *)capture$0
                                                    withJavaxJmdnsServiceEvent:(JavaxJmdnsServiceEvent *)capture$1 {
  JavaxJmdnsImplJmDNSImpl_2_initWithJavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus_withJavaxJmdnsServiceEvent_(self, capture$0, capture$1);
  return self;
}

- (void)run {
  [((JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus *) nil_chk(val$status_)) serviceTypeAddedWithJavaxJmdnsServiceEvent:val$event_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus:withJavaxJmdnsServiceEvent:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$status_", "LJavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$event_", "LJavaxJmdnsServiceEvent;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaxJmdnsImplJmDNSImpl;", "registerServiceTypeWithNSString:" };
  static const J2ObjcClassInfo _JavaxJmdnsImplJmDNSImpl_2 = { "", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x8018, 2, 2, 0, -1, 1, -1, -1 };
  return &_JavaxJmdnsImplJmDNSImpl_2;
}

@end

void JavaxJmdnsImplJmDNSImpl_2_initWithJavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus_withJavaxJmdnsServiceEvent_(JavaxJmdnsImplJmDNSImpl_2 *self, JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus *capture$0, JavaxJmdnsServiceEvent *capture$1) {
  self->val$status_ = capture$0;
  self->val$event_ = capture$1;
  NSObject_init(self);
}

JavaxJmdnsImplJmDNSImpl_2 *new_JavaxJmdnsImplJmDNSImpl_2_initWithJavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus_withJavaxJmdnsServiceEvent_(JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus *capture$0, JavaxJmdnsServiceEvent *capture$1) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplJmDNSImpl_2, initWithJavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus_withJavaxJmdnsServiceEvent_, capture$0, capture$1)
}

JavaxJmdnsImplJmDNSImpl_2 *create_JavaxJmdnsImplJmDNSImpl_2_initWithJavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus_withJavaxJmdnsServiceEvent_(JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus *capture$0, JavaxJmdnsServiceEvent *capture$1) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplJmDNSImpl_2, initWithJavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus_withJavaxJmdnsServiceEvent_, capture$0, capture$1)
}

@implementation JavaxJmdnsImplJmDNSImpl_3

- (instancetype)initWithJavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus:(JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus *)capture$0
                                                    withJavaxJmdnsServiceEvent:(JavaxJmdnsServiceEvent *)capture$1 {
  JavaxJmdnsImplJmDNSImpl_3_initWithJavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus_withJavaxJmdnsServiceEvent_(self, capture$0, capture$1);
  return self;
}

- (void)run {
  [((JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus *) nil_chk(val$status_)) subTypeForServiceTypeAddedWithJavaxJmdnsServiceEvent:val$event_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus:withJavaxJmdnsServiceEvent:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$status_", "LJavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$event_", "LJavaxJmdnsServiceEvent;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaxJmdnsImplJmDNSImpl;", "registerServiceTypeWithNSString:" };
  static const J2ObjcClassInfo _JavaxJmdnsImplJmDNSImpl_3 = { "", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x8018, 2, 2, 0, -1, 1, -1, -1 };
  return &_JavaxJmdnsImplJmDNSImpl_3;
}

@end

void JavaxJmdnsImplJmDNSImpl_3_initWithJavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus_withJavaxJmdnsServiceEvent_(JavaxJmdnsImplJmDNSImpl_3 *self, JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus *capture$0, JavaxJmdnsServiceEvent *capture$1) {
  self->val$status_ = capture$0;
  self->val$event_ = capture$1;
  NSObject_init(self);
}

JavaxJmdnsImplJmDNSImpl_3 *new_JavaxJmdnsImplJmDNSImpl_3_initWithJavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus_withJavaxJmdnsServiceEvent_(JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus *capture$0, JavaxJmdnsServiceEvent *capture$1) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplJmDNSImpl_3, initWithJavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus_withJavaxJmdnsServiceEvent_, capture$0, capture$1)
}

JavaxJmdnsImplJmDNSImpl_3 *create_JavaxJmdnsImplJmDNSImpl_3_initWithJavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus_withJavaxJmdnsServiceEvent_(JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus *capture$0, JavaxJmdnsServiceEvent *capture$1) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplJmDNSImpl_3, initWithJavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus_withJavaxJmdnsServiceEvent_, capture$0, capture$1)
}

@implementation JavaxJmdnsImplJmDNSImpl_4

- (instancetype)initWithJavaxJmdnsImplListenerStatus_ServiceListenerStatus:(JavaxJmdnsImplListenerStatus_ServiceListenerStatus *)capture$0
                                                withJavaxJmdnsServiceEvent:(JavaxJmdnsServiceEvent *)capture$1 {
  JavaxJmdnsImplJmDNSImpl_4_initWithJavaxJmdnsImplListenerStatus_ServiceListenerStatus_withJavaxJmdnsServiceEvent_(self, capture$0, capture$1);
  return self;
}

- (void)run {
  [((JavaxJmdnsImplListenerStatus_ServiceListenerStatus *) nil_chk(val$listener_)) serviceAddedWithJavaxJmdnsServiceEvent:val$localEvent_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaxJmdnsImplListenerStatus_ServiceListenerStatus:withJavaxJmdnsServiceEvent:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$listener_", "LJavaxJmdnsImplListenerStatus_ServiceListenerStatus;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$localEvent_", "LJavaxJmdnsServiceEvent;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaxJmdnsImplJmDNSImpl;", "updateRecordWithLong:withJavaxJmdnsImplDNSRecord:withJavaxJmdnsImplJmDNSImpl_Operation:" };
  static const J2ObjcClassInfo _JavaxJmdnsImplJmDNSImpl_4 = { "", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x8018, 2, 2, 0, -1, 1, -1, -1 };
  return &_JavaxJmdnsImplJmDNSImpl_4;
}

@end

void JavaxJmdnsImplJmDNSImpl_4_initWithJavaxJmdnsImplListenerStatus_ServiceListenerStatus_withJavaxJmdnsServiceEvent_(JavaxJmdnsImplJmDNSImpl_4 *self, JavaxJmdnsImplListenerStatus_ServiceListenerStatus *capture$0, JavaxJmdnsServiceEvent *capture$1) {
  self->val$listener_ = capture$0;
  self->val$localEvent_ = capture$1;
  NSObject_init(self);
}

JavaxJmdnsImplJmDNSImpl_4 *new_JavaxJmdnsImplJmDNSImpl_4_initWithJavaxJmdnsImplListenerStatus_ServiceListenerStatus_withJavaxJmdnsServiceEvent_(JavaxJmdnsImplListenerStatus_ServiceListenerStatus *capture$0, JavaxJmdnsServiceEvent *capture$1) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplJmDNSImpl_4, initWithJavaxJmdnsImplListenerStatus_ServiceListenerStatus_withJavaxJmdnsServiceEvent_, capture$0, capture$1)
}

JavaxJmdnsImplJmDNSImpl_4 *create_JavaxJmdnsImplJmDNSImpl_4_initWithJavaxJmdnsImplListenerStatus_ServiceListenerStatus_withJavaxJmdnsServiceEvent_(JavaxJmdnsImplListenerStatus_ServiceListenerStatus *capture$0, JavaxJmdnsServiceEvent *capture$1) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplJmDNSImpl_4, initWithJavaxJmdnsImplListenerStatus_ServiceListenerStatus_withJavaxJmdnsServiceEvent_, capture$0, capture$1)
}

@implementation JavaxJmdnsImplJmDNSImpl_5

- (instancetype)initWithJavaxJmdnsImplListenerStatus_ServiceListenerStatus:(JavaxJmdnsImplListenerStatus_ServiceListenerStatus *)capture$0
                                                withJavaxJmdnsServiceEvent:(JavaxJmdnsServiceEvent *)capture$1 {
  JavaxJmdnsImplJmDNSImpl_5_initWithJavaxJmdnsImplListenerStatus_ServiceListenerStatus_withJavaxJmdnsServiceEvent_(self, capture$0, capture$1);
  return self;
}

- (void)run {
  [((JavaxJmdnsImplListenerStatus_ServiceListenerStatus *) nil_chk(val$listener_)) serviceRemovedWithJavaxJmdnsServiceEvent:val$localEvent_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaxJmdnsImplListenerStatus_ServiceListenerStatus:withJavaxJmdnsServiceEvent:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$listener_", "LJavaxJmdnsImplListenerStatus_ServiceListenerStatus;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$localEvent_", "LJavaxJmdnsServiceEvent;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaxJmdnsImplJmDNSImpl;", "updateRecordWithLong:withJavaxJmdnsImplDNSRecord:withJavaxJmdnsImplJmDNSImpl_Operation:" };
  static const J2ObjcClassInfo _JavaxJmdnsImplJmDNSImpl_5 = { "", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x8018, 2, 2, 0, -1, 1, -1, -1 };
  return &_JavaxJmdnsImplJmDNSImpl_5;
}

@end

void JavaxJmdnsImplJmDNSImpl_5_initWithJavaxJmdnsImplListenerStatus_ServiceListenerStatus_withJavaxJmdnsServiceEvent_(JavaxJmdnsImplJmDNSImpl_5 *self, JavaxJmdnsImplListenerStatus_ServiceListenerStatus *capture$0, JavaxJmdnsServiceEvent *capture$1) {
  self->val$listener_ = capture$0;
  self->val$localEvent_ = capture$1;
  NSObject_init(self);
}

JavaxJmdnsImplJmDNSImpl_5 *new_JavaxJmdnsImplJmDNSImpl_5_initWithJavaxJmdnsImplListenerStatus_ServiceListenerStatus_withJavaxJmdnsServiceEvent_(JavaxJmdnsImplListenerStatus_ServiceListenerStatus *capture$0, JavaxJmdnsServiceEvent *capture$1) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplJmDNSImpl_5, initWithJavaxJmdnsImplListenerStatus_ServiceListenerStatus_withJavaxJmdnsServiceEvent_, capture$0, capture$1)
}

JavaxJmdnsImplJmDNSImpl_5 *create_JavaxJmdnsImplJmDNSImpl_5_initWithJavaxJmdnsImplListenerStatus_ServiceListenerStatus_withJavaxJmdnsServiceEvent_(JavaxJmdnsImplListenerStatus_ServiceListenerStatus *capture$0, JavaxJmdnsServiceEvent *capture$1) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplJmDNSImpl_5, initWithJavaxJmdnsImplListenerStatus_ServiceListenerStatus_withJavaxJmdnsServiceEvent_, capture$0, capture$1)
}

@implementation JavaxJmdnsImplJmDNSImpl_Shutdown

- (instancetype)initWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)outer$ {
  JavaxJmdnsImplJmDNSImpl_Shutdown_initWithJavaxJmdnsImplJmDNSImpl_(self, outer$);
  return self;
}

- (void)run {
  @try {
    this$0_->_shutdown_ = nil;
    [this$0_ close];
  }
  @catch (NSException *exception) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@", @"Error while shuting down. ", exception)];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaxJmdnsImplJmDNSImpl:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LJavaxJmdnsImplJmDNSImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaxJmdnsImplJmDNSImpl;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplJmDNSImpl_Shutdown = { "Shutdown", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x4, 2, 1, 0, -1, -1, -1, -1 };
  return &_JavaxJmdnsImplJmDNSImpl_Shutdown;
}

@end

void JavaxJmdnsImplJmDNSImpl_Shutdown_initWithJavaxJmdnsImplJmDNSImpl_(JavaxJmdnsImplJmDNSImpl_Shutdown *self, JavaxJmdnsImplJmDNSImpl *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

JavaxJmdnsImplJmDNSImpl_Shutdown *new_JavaxJmdnsImplJmDNSImpl_Shutdown_initWithJavaxJmdnsImplJmDNSImpl_(JavaxJmdnsImplJmDNSImpl *outer$) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplJmDNSImpl_Shutdown, initWithJavaxJmdnsImplJmDNSImpl_, outer$)
}

JavaxJmdnsImplJmDNSImpl_Shutdown *create_JavaxJmdnsImplJmDNSImpl_Shutdown_initWithJavaxJmdnsImplJmDNSImpl_(JavaxJmdnsImplJmDNSImpl *outer$) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplJmDNSImpl_Shutdown, initWithJavaxJmdnsImplJmDNSImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplJmDNSImpl_Shutdown)

@implementation JavaxJmdnsImplJmDNSImpl_6

- (instancetype)initWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)outer$
                                   withNSString:(NSString *)x0 {
  JavaxJmdnsImplJmDNSImpl_6_initWithJavaxJmdnsImplJmDNSImpl_withNSString_(self, outer$, x0);
  return self;
}

- (void)run {
  [this$0_ __recover];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaxJmdnsImplJmDNSImpl:withNSString:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LJavaxJmdnsImplJmDNSImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LJavaxJmdnsImplJmDNSImpl;", "recover" };
  static const J2ObjcClassInfo _JavaxJmdnsImplJmDNSImpl_6 = { "", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x8018, 2, 1, 1, -1, 2, -1, -1 };
  return &_JavaxJmdnsImplJmDNSImpl_6;
}

@end

void JavaxJmdnsImplJmDNSImpl_6_initWithJavaxJmdnsImplJmDNSImpl_withNSString_(JavaxJmdnsImplJmDNSImpl_6 *self, JavaxJmdnsImplJmDNSImpl *outer$, NSString *x0) {
  self->this$0_ = outer$;
  JavaLangThread_initWithNSString_(self, x0);
}

JavaxJmdnsImplJmDNSImpl_6 *new_JavaxJmdnsImplJmDNSImpl_6_initWithJavaxJmdnsImplJmDNSImpl_withNSString_(JavaxJmdnsImplJmDNSImpl *outer$, NSString *x0) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplJmDNSImpl_6, initWithJavaxJmdnsImplJmDNSImpl_withNSString_, outer$, x0)
}

JavaxJmdnsImplJmDNSImpl_6 *create_JavaxJmdnsImplJmDNSImpl_6_initWithJavaxJmdnsImplJmDNSImpl_withNSString_(JavaxJmdnsImplJmDNSImpl *outer$, NSString *x0) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplJmDNSImpl_6, initWithJavaxJmdnsImplJmDNSImpl_withNSString_, outer$, x0)
}

@implementation JavaxJmdnsImplJmDNSImpl_ServiceCollector

- (instancetype)initWithNSString:(NSString *)type {
  JavaxJmdnsImplJmDNSImpl_ServiceCollector_initWithNSString_(self, type);
  return self;
}

- (void)serviceAddedWithJavaxJmdnsServiceEvent:(JavaxJmdnsServiceEvent *)event {
  @synchronized(self) {
    JavaxJmdnsServiceInfo *info = [((JavaxJmdnsServiceEvent *) nil_chk(event)) getInfo];
    if ((info != nil) && ([((JavaxJmdnsServiceInfo *) nil_chk(info)) hasData])) {
      (void) [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_infos_)) putWithId:[event getName] withId:info];
    }
    else {
      NSString *subtype = (info != nil ? [info getSubtype] : @"");
      info = [((JavaxJmdnsImplJmDNSImpl *) nil_chk(((JavaxJmdnsImplJmDNSImpl *) cast_chk([event getDNS], [JavaxJmdnsImplJmDNSImpl class])))) resolveServiceInfoWithNSString:[event getType] withNSString:[event getName] withNSString:subtype withBoolean:true];
      if (info != nil) {
        (void) [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_infos_)) putWithId:[event getName] withId:info];
      }
      else {
        (void) [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_events_)) putWithId:[event getName] withId:event];
      }
    }
  }
}

- (void)serviceRemovedWithJavaxJmdnsServiceEvent:(JavaxJmdnsServiceEvent *)event {
  @synchronized(self) {
    (void) [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_infos_)) removeWithId:[((JavaxJmdnsServiceEvent *) nil_chk(event)) getName]];
    (void) [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_events_)) removeWithId:[event getName]];
  }
}

- (void)serviceResolvedWithJavaxJmdnsServiceEvent:(JavaxJmdnsServiceEvent *)event {
  @synchronized(self) {
    (void) [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_infos_)) putWithId:[((JavaxJmdnsServiceEvent *) nil_chk(event)) getName] withId:[event getInfo]];
    (void) [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_events_)) removeWithId:[event getName]];
  }
}

- (IOSObjectArray *)listWithLong:(jlong)timeout {
  if ([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_infos_)) isEmpty] || ![((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_events_)) isEmpty] || JreLoadVolatileBoolean(&_needToWaitForInfos_)) {
    jlong loops = (timeout / 200LL);
    if (loops < 1) {
      loops = 1;
    }
    for (jint i = 0; i < loops; i++) {
      @try {
        JavaLangThread_sleepWithLong_(200);
      }
      @catch (JavaLangInterruptedException *e) {
      }
      if ([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_events_)) isEmpty] && ![_infos_ isEmpty] && !JreLoadVolatileBoolean(&_needToWaitForInfos_)) {
        break;
      }
    }
  }
  JreAssignVolatileBoolean(&_needToWaitForInfos_, false);
  return [((id<JavaUtilCollection>) nil_chk([_infos_ values])) toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[_infos_ size] type:JavaxJmdnsServiceInfo_class_()]];
}

- (NSString *)description {
  JavaLangStringBuffer *aLog = new_JavaLangStringBuffer_init();
  (void) [aLog appendWithNSString:@"\n\tType: "];
  (void) [aLog appendWithNSString:_type_];
  if ([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_infos_)) isEmpty]) {
    (void) [aLog appendWithNSString:@"\n\tNo services collected."];
  }
  else {
    (void) [aLog appendWithNSString:@"\n\tServices"];
    for (NSString * __strong key in nil_chk([_infos_ keySet])) {
      (void) [aLog appendWithNSString:@"\n\t\tService: "];
      (void) [aLog appendWithNSString:key];
      (void) [aLog appendWithNSString:@": "];
      (void) [aLog appendWithId:[_infos_ getWithId:key]];
    }
  }
  if ([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_events_)) isEmpty]) {
    (void) [aLog appendWithNSString:@"\n\tNo event queued."];
  }
  else {
    (void) [aLog appendWithNSString:@"\n\tEvents"];
    for (NSString * __strong key in nil_chk([_events_ keySet])) {
      (void) [aLog appendWithNSString:@"\n\t\tEvent: "];
      (void) [aLog appendWithNSString:key];
      (void) [aLog appendWithNSString:@": "];
      (void) [aLog appendWithId:[_events_ getWithId:key]];
    }
  }
  return [aLog description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "[LJavaxJmdnsServiceInfo;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(serviceAddedWithJavaxJmdnsServiceEvent:);
  methods[2].selector = @selector(serviceRemovedWithJavaxJmdnsServiceEvent:);
  methods[3].selector = @selector(serviceResolvedWithJavaxJmdnsServiceEvent:);
  methods[4].selector = @selector(listWithLong:);
  methods[5].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_infos_", "LJavaUtilConcurrentConcurrentMap;", .constantValue.asLong = 0, 0x12, -1, -1, 8, -1 },
    { "_events_", "LJavaUtilConcurrentConcurrentMap;", .constantValue.asLong = 0, 0x12, -1, -1, 9, -1 },
    { "_type_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_needToWaitForInfos_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "serviceAdded", "LJavaxJmdnsServiceEvent;", "serviceRemoved", "serviceResolved", "list", "J", "toString", "Ljava/util/concurrent/ConcurrentMap<Ljava/lang/String;Ljavax/jmdns/ServiceInfo;>;", "Ljava/util/concurrent/ConcurrentMap<Ljava/lang/String;Ljavax/jmdns/ServiceEvent;>;", "LJavaxJmdnsImplJmDNSImpl;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplJmDNSImpl_ServiceCollector = { "ServiceCollector", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0xa, 6, 4, 10, -1, -1, -1, -1 };
  return &_JavaxJmdnsImplJmDNSImpl_ServiceCollector;
}

@end

void JavaxJmdnsImplJmDNSImpl_ServiceCollector_initWithNSString_(JavaxJmdnsImplJmDNSImpl_ServiceCollector *self, NSString *type) {
  NSObject_init(self);
  self->_infos_ = new_JavaUtilConcurrentConcurrentHashMap_init();
  self->_events_ = new_JavaUtilConcurrentConcurrentHashMap_init();
  self->_type_ = type;
  JreAssignVolatileBoolean(&self->_needToWaitForInfos_, true);
}

JavaxJmdnsImplJmDNSImpl_ServiceCollector *new_JavaxJmdnsImplJmDNSImpl_ServiceCollector_initWithNSString_(NSString *type) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplJmDNSImpl_ServiceCollector, initWithNSString_, type)
}

JavaxJmdnsImplJmDNSImpl_ServiceCollector *create_JavaxJmdnsImplJmDNSImpl_ServiceCollector_initWithNSString_(NSString *type) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplJmDNSImpl_ServiceCollector, initWithNSString_, type)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplJmDNSImpl_ServiceCollector)
