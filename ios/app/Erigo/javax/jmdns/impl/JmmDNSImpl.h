//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/jmdns/impl/JmmDNSImpl.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxJmdnsImplJmmDNSImpl")
#ifdef RESTRICT_JavaxJmdnsImplJmmDNSImpl
#define INCLUDE_ALL_JavaxJmdnsImplJmmDNSImpl 0
#else
#define INCLUDE_ALL_JavaxJmdnsImplJmmDNSImpl 1
#endif
#undef RESTRICT_JavaxJmdnsImplJmmDNSImpl

#if !defined (JavaxJmdnsImplJmmDNSImpl_) && (INCLUDE_ALL_JavaxJmdnsImplJmmDNSImpl || defined(INCLUDE_JavaxJmdnsImplJmmDNSImpl))
#define JavaxJmdnsImplJmmDNSImpl_

#define RESTRICT_JavaxJmdnsJmmDNS 1
#define INCLUDE_JavaxJmdnsJmmDNS 1
#include "javax/jmdns/JmmDNS.h"

#define RESTRICT_JavaxJmdnsNetworkTopologyListener 1
#define INCLUDE_JavaxJmdnsNetworkTopologyListener 1
#include "javax/jmdns/NetworkTopologyListener.h"

#define RESTRICT_JavaxJmdnsImplServiceInfoImpl 1
#define INCLUDE_JavaxJmdnsImplServiceInfoImpl_Delegate 1
#include "javax/jmdns/impl/ServiceInfoImpl.h"

@class IOSByteArray;
@class IOSObjectArray;
@class JavaxJmdnsNetworkTopologyEvent;
@class JavaxJmdnsServiceInfo;
@protocol JavaUtilMap;
@protocol JavaxJmdnsServiceListener;
@protocol JavaxJmdnsServiceTypeListener;

@interface JavaxJmdnsImplJmmDNSImpl : NSObject < JavaxJmdnsJmmDNS, JavaxJmdnsNetworkTopologyListener, JavaxJmdnsImplServiceInfoImpl_Delegate >

#pragma mark Public

- (instancetype)init;

- (void)addNetworkTopologyListenerWithJavaxJmdnsNetworkTopologyListener:(id<JavaxJmdnsNetworkTopologyListener>)listener;

- (void)addServiceListenerWithNSString:(NSString *)type
         withJavaxJmdnsServiceListener:(id<JavaxJmdnsServiceListener>)listener;

- (void)addServiceTypeListenerWithJavaxJmdnsServiceTypeListener:(id<JavaxJmdnsServiceTypeListener>)listener;

- (void)close;

- (IOSObjectArray *)getHostNames;

- (IOSObjectArray *)getInterfaces;

- (IOSObjectArray *)getNames;

- (IOSObjectArray *)getServiceInfosWithNSString:(NSString *)type
                                   withNSString:(NSString *)name;

- (IOSObjectArray *)getServiceInfosWithNSString:(NSString *)type
                                   withNSString:(NSString *)name
                                    withBoolean:(jboolean)persistent;

- (IOSObjectArray *)getServiceInfosWithNSString:(NSString *)type
                                   withNSString:(NSString *)name
                                    withBoolean:(jboolean)persistent
                                       withLong:(jlong)timeout;

- (IOSObjectArray *)getServiceInfosWithNSString:(NSString *)type
                                   withNSString:(NSString *)name
                                       withLong:(jlong)timeout;

- (void)inetAddressAddedWithJavaxJmdnsNetworkTopologyEvent:(JavaxJmdnsNetworkTopologyEvent *)event;

- (void)inetAddressRemovedWithJavaxJmdnsNetworkTopologyEvent:(JavaxJmdnsNetworkTopologyEvent *)event;

- (IOSObjectArray *)listWithNSString:(NSString *)type;

- (IOSObjectArray *)listWithNSString:(NSString *)type
                            withLong:(jlong)timeout;

- (id<JavaUtilMap>)listBySubtypeWithNSString:(NSString *)type;

- (id<JavaUtilMap>)listBySubtypeWithNSString:(NSString *)type
                                    withLong:(jlong)timeout;

- (IOSObjectArray *)networkListeners;

- (void)registerServiceWithJavaxJmdnsServiceInfo:(JavaxJmdnsServiceInfo *)info;

- (void)registerServiceTypeWithNSString:(NSString *)type;

- (void)removeNetworkTopologyListenerWithJavaxJmdnsNetworkTopologyListener:(id<JavaxJmdnsNetworkTopologyListener>)listener;

- (void)removeServiceListenerWithNSString:(NSString *)type
            withJavaxJmdnsServiceListener:(id<JavaxJmdnsServiceListener>)listener;

- (void)removeServiceTypeListenerWithJavaxJmdnsServiceTypeListener:(id<JavaxJmdnsServiceTypeListener>)listener;

- (void)requestServiceInfoWithNSString:(NSString *)type
                          withNSString:(NSString *)name;

- (void)requestServiceInfoWithNSString:(NSString *)type
                          withNSString:(NSString *)name
                           withBoolean:(jboolean)persistent;

- (void)requestServiceInfoWithNSString:(NSString *)type
                          withNSString:(NSString *)name
                           withBoolean:(jboolean)persistent
                              withLong:(jlong)timeout;

- (void)requestServiceInfoWithNSString:(NSString *)type
                          withNSString:(NSString *)name
                              withLong:(jlong)timeout;

- (void)textValueUpdatedWithJavaxJmdnsServiceInfo:(JavaxJmdnsServiceInfo *)target
                                    withByteArray:(IOSByteArray *)value;

- (void)unregisterAllServices;

- (void)unregisterServiceWithJavaxJmdnsServiceInfo:(JavaxJmdnsServiceInfo *)info;

@end

J2OBJC_STATIC_INIT(JavaxJmdnsImplJmmDNSImpl)

FOUNDATION_EXPORT void JavaxJmdnsImplJmmDNSImpl_init(JavaxJmdnsImplJmmDNSImpl *self);

FOUNDATION_EXPORT JavaxJmdnsImplJmmDNSImpl *new_JavaxJmdnsImplJmmDNSImpl_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxJmdnsImplJmmDNSImpl *create_JavaxJmdnsImplJmmDNSImpl_init();

J2OBJC_TYPE_LITERAL_HEADER(JavaxJmdnsImplJmmDNSImpl)

#endif

#if !defined (JavaxJmdnsImplJmmDNSImpl_NetworkChecker_) && (INCLUDE_ALL_JavaxJmdnsImplJmmDNSImpl || defined(INCLUDE_JavaxJmdnsImplJmmDNSImpl_NetworkChecker))
#define JavaxJmdnsImplJmmDNSImpl_NetworkChecker_

#define RESTRICT_JavaUtilTimerTask 1
#define INCLUDE_JavaUtilTimerTask 1
#include "java/util/TimerTask.h"

@class JavaUtilTimer;
@protocol JavaxJmdnsNetworkTopologyDiscovery;
@protocol JavaxJmdnsNetworkTopologyListener;

@interface JavaxJmdnsImplJmmDNSImpl_NetworkChecker : JavaUtilTimerTask

#pragma mark Public

- (instancetype)initWithJavaxJmdnsNetworkTopologyListener:(id<JavaxJmdnsNetworkTopologyListener>)mmDNS
                   withJavaxJmdnsNetworkTopologyDiscovery:(id<JavaxJmdnsNetworkTopologyDiscovery>)topology;

- (void)run;

- (void)startWithJavaUtilTimer:(JavaUtilTimer *)timer;

@end

J2OBJC_STATIC_INIT(JavaxJmdnsImplJmmDNSImpl_NetworkChecker)

FOUNDATION_EXPORT void JavaxJmdnsImplJmmDNSImpl_NetworkChecker_initWithJavaxJmdnsNetworkTopologyListener_withJavaxJmdnsNetworkTopologyDiscovery_(JavaxJmdnsImplJmmDNSImpl_NetworkChecker *self, id<JavaxJmdnsNetworkTopologyListener> mmDNS, id<JavaxJmdnsNetworkTopologyDiscovery> topology);

FOUNDATION_EXPORT JavaxJmdnsImplJmmDNSImpl_NetworkChecker *new_JavaxJmdnsImplJmmDNSImpl_NetworkChecker_initWithJavaxJmdnsNetworkTopologyListener_withJavaxJmdnsNetworkTopologyDiscovery_(id<JavaxJmdnsNetworkTopologyListener> mmDNS, id<JavaxJmdnsNetworkTopologyDiscovery> topology) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxJmdnsImplJmmDNSImpl_NetworkChecker *create_JavaxJmdnsImplJmmDNSImpl_NetworkChecker_initWithJavaxJmdnsNetworkTopologyListener_withJavaxJmdnsNetworkTopologyDiscovery_(id<JavaxJmdnsNetworkTopologyListener> mmDNS, id<JavaxJmdnsNetworkTopologyDiscovery> topology);

J2OBJC_TYPE_LITERAL_HEADER(JavaxJmdnsImplJmmDNSImpl_NetworkChecker)

#endif

#pragma pop_macro("INCLUDE_ALL_JavaxJmdnsImplJmmDNSImpl")
