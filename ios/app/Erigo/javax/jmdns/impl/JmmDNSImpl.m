//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/jmdns/impl/JmmDNSImpl.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Runnable.h"
#include "java/net/InetAddress.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/Timer.h"
#include "java/util/TimerTask.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/ConcurrentMap.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "javax/jmdns/JmDNS.h"
#include "javax/jmdns/NetworkTopologyDiscovery.h"
#include "javax/jmdns/NetworkTopologyEvent.h"
#include "javax/jmdns/NetworkTopologyListener.h"
#include "javax/jmdns/ServiceInfo.h"
#include "javax/jmdns/ServiceListener.h"
#include "javax/jmdns/ServiceTypeListener.h"
#include "javax/jmdns/impl/JmDNSImpl.h"
#include "javax/jmdns/impl/JmmDNSImpl.h"
#include "javax/jmdns/impl/NetworkTopologyEventImpl.h"
#include "javax/jmdns/impl/ServiceInfoImpl.h"
#include "javax/jmdns/impl/constants/DNSConstants.h"

@interface JavaxJmdnsImplJmmDNSImpl () {
 @public
  id<JavaUtilSet> _networkListeners_;
  id<JavaUtilConcurrentConcurrentMap> _knownMDNS_;
  id<JavaUtilConcurrentConcurrentMap> _services_;
  id<JavaUtilConcurrentExecutorService> _ListenerExecutor_;
  id<JavaUtilConcurrentExecutorService> _jmDNSExecutor_;
  JavaUtilTimer *_timer_;
}

@end

J2OBJC_FIELD_SETTER(JavaxJmdnsImplJmmDNSImpl, _networkListeners_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplJmmDNSImpl, _knownMDNS_, id<JavaUtilConcurrentConcurrentMap>)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplJmmDNSImpl, _services_, id<JavaUtilConcurrentConcurrentMap>)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplJmmDNSImpl, _ListenerExecutor_, id<JavaUtilConcurrentExecutorService>)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplJmmDNSImpl, _jmDNSExecutor_, id<JavaUtilConcurrentExecutorService>)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplJmmDNSImpl, _timer_, JavaUtilTimer *)

inline JavaUtilLoggingLogger *JavaxJmdnsImplJmmDNSImpl_get_logger();
inline JavaUtilLoggingLogger *JavaxJmdnsImplJmmDNSImpl_set_logger(JavaUtilLoggingLogger *value);
static JavaUtilLoggingLogger *JavaxJmdnsImplJmmDNSImpl_logger;
J2OBJC_STATIC_FIELD_OBJ(JavaxJmdnsImplJmmDNSImpl, logger, JavaUtilLoggingLogger *)

@interface JavaxJmdnsImplJmmDNSImpl_1 : NSObject < JavaLangRunnable > {
 @public
  JavaxJmdnsJmDNS *val$mDNS_;
}

- (instancetype)initWithJavaxJmdnsJmDNS:(JavaxJmdnsJmDNS *)capture$0;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxJmdnsImplJmmDNSImpl_1)

__attribute__((unused)) static void JavaxJmdnsImplJmmDNSImpl_1_initWithJavaxJmdnsJmDNS_(JavaxJmdnsImplJmmDNSImpl_1 *self, JavaxJmdnsJmDNS *capture$0);

__attribute__((unused)) static JavaxJmdnsImplJmmDNSImpl_1 *new_JavaxJmdnsImplJmmDNSImpl_1_initWithJavaxJmdnsJmDNS_(JavaxJmdnsJmDNS *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static JavaxJmdnsImplJmmDNSImpl_1 *create_JavaxJmdnsImplJmmDNSImpl_1_initWithJavaxJmdnsJmDNS_(JavaxJmdnsJmDNS *capture$0);

@interface JavaxJmdnsImplJmmDNSImpl_2 : NSObject < JavaLangRunnable > {
 @public
  id<JavaUtilSet> val$result_;
  JavaxJmdnsJmDNS *val$mDNS_;
  NSString *val$type_;
  NSString *val$name_;
  jboolean val$persistent_;
  jlong val$timeout_;
}

- (instancetype)initWithJavaUtilSet:(id<JavaUtilSet>)capture$0
                withJavaxJmdnsJmDNS:(JavaxJmdnsJmDNS *)capture$1
                       withNSString:(NSString *)capture$2
                       withNSString:(NSString *)capture$3
                        withBoolean:(jboolean)capture$4
                           withLong:(jlong)capture$5;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxJmdnsImplJmmDNSImpl_2)

__attribute__((unused)) static void JavaxJmdnsImplJmmDNSImpl_2_initWithJavaUtilSet_withJavaxJmdnsJmDNS_withNSString_withNSString_withBoolean_withLong_(JavaxJmdnsImplJmmDNSImpl_2 *self, id<JavaUtilSet> capture$0, JavaxJmdnsJmDNS *capture$1, NSString *capture$2, NSString *capture$3, jboolean capture$4, jlong capture$5);

__attribute__((unused)) static JavaxJmdnsImplJmmDNSImpl_2 *new_JavaxJmdnsImplJmmDNSImpl_2_initWithJavaUtilSet_withJavaxJmdnsJmDNS_withNSString_withNSString_withBoolean_withLong_(id<JavaUtilSet> capture$0, JavaxJmdnsJmDNS *capture$1, NSString *capture$2, NSString *capture$3, jboolean capture$4, jlong capture$5) NS_RETURNS_RETAINED;

__attribute__((unused)) static JavaxJmdnsImplJmmDNSImpl_2 *create_JavaxJmdnsImplJmmDNSImpl_2_initWithJavaUtilSet_withJavaxJmdnsJmDNS_withNSString_withNSString_withBoolean_withLong_(id<JavaUtilSet> capture$0, JavaxJmdnsJmDNS *capture$1, NSString *capture$2, NSString *capture$3, jboolean capture$4, jlong capture$5);

@interface JavaxJmdnsImplJmmDNSImpl_3 : NSObject < JavaLangRunnable > {
 @public
  JavaxJmdnsJmDNS *val$mDNS_;
  NSString *val$type_;
  NSString *val$name_;
  jboolean val$persistent_;
  jlong val$timeout_;
}

- (instancetype)initWithJavaxJmdnsJmDNS:(JavaxJmdnsJmDNS *)capture$0
                           withNSString:(NSString *)capture$1
                           withNSString:(NSString *)capture$2
                            withBoolean:(jboolean)capture$3
                               withLong:(jlong)capture$4;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxJmdnsImplJmmDNSImpl_3)

__attribute__((unused)) static void JavaxJmdnsImplJmmDNSImpl_3_initWithJavaxJmdnsJmDNS_withNSString_withNSString_withBoolean_withLong_(JavaxJmdnsImplJmmDNSImpl_3 *self, JavaxJmdnsJmDNS *capture$0, NSString *capture$1, NSString *capture$2, jboolean capture$3, jlong capture$4);

__attribute__((unused)) static JavaxJmdnsImplJmmDNSImpl_3 *new_JavaxJmdnsImplJmmDNSImpl_3_initWithJavaxJmdnsJmDNS_withNSString_withNSString_withBoolean_withLong_(JavaxJmdnsJmDNS *capture$0, NSString *capture$1, NSString *capture$2, jboolean capture$3, jlong capture$4) NS_RETURNS_RETAINED;

__attribute__((unused)) static JavaxJmdnsImplJmmDNSImpl_3 *create_JavaxJmdnsImplJmmDNSImpl_3_initWithJavaxJmdnsJmDNS_withNSString_withNSString_withBoolean_withLong_(JavaxJmdnsJmDNS *capture$0, NSString *capture$1, NSString *capture$2, jboolean capture$3, jlong capture$4);

@interface JavaxJmdnsImplJmmDNSImpl_4 : NSObject < JavaLangRunnable > {
 @public
  id<JavaUtilSet> val$result_;
  JavaxJmdnsJmDNS *val$mDNS_;
  NSString *val$type_;
  jlong val$timeout_;
}

- (instancetype)initWithJavaUtilSet:(id<JavaUtilSet>)capture$0
                withJavaxJmdnsJmDNS:(JavaxJmdnsJmDNS *)capture$1
                       withNSString:(NSString *)capture$2
                           withLong:(jlong)capture$3;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxJmdnsImplJmmDNSImpl_4)

__attribute__((unused)) static void JavaxJmdnsImplJmmDNSImpl_4_initWithJavaUtilSet_withJavaxJmdnsJmDNS_withNSString_withLong_(JavaxJmdnsImplJmmDNSImpl_4 *self, id<JavaUtilSet> capture$0, JavaxJmdnsJmDNS *capture$1, NSString *capture$2, jlong capture$3);

__attribute__((unused)) static JavaxJmdnsImplJmmDNSImpl_4 *new_JavaxJmdnsImplJmmDNSImpl_4_initWithJavaUtilSet_withJavaxJmdnsJmDNS_withNSString_withLong_(id<JavaUtilSet> capture$0, JavaxJmdnsJmDNS *capture$1, NSString *capture$2, jlong capture$3) NS_RETURNS_RETAINED;

__attribute__((unused)) static JavaxJmdnsImplJmmDNSImpl_4 *create_JavaxJmdnsImplJmmDNSImpl_4_initWithJavaUtilSet_withJavaxJmdnsJmDNS_withNSString_withLong_(id<JavaUtilSet> capture$0, JavaxJmdnsJmDNS *capture$1, NSString *capture$2, jlong capture$3);

@interface JavaxJmdnsImplJmmDNSImpl_5 : NSObject < JavaLangRunnable > {
 @public
  id<JavaxJmdnsNetworkTopologyListener> val$listener_;
  JavaxJmdnsNetworkTopologyEvent *val$jmdnsEvent_;
}

- (instancetype)initWithJavaxJmdnsNetworkTopologyListener:(id<JavaxJmdnsNetworkTopologyListener>)capture$0
                       withJavaxJmdnsNetworkTopologyEvent:(JavaxJmdnsNetworkTopologyEvent *)capture$1;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxJmdnsImplJmmDNSImpl_5)

__attribute__((unused)) static void JavaxJmdnsImplJmmDNSImpl_5_initWithJavaxJmdnsNetworkTopologyListener_withJavaxJmdnsNetworkTopologyEvent_(JavaxJmdnsImplJmmDNSImpl_5 *self, id<JavaxJmdnsNetworkTopologyListener> capture$0, JavaxJmdnsNetworkTopologyEvent *capture$1);

__attribute__((unused)) static JavaxJmdnsImplJmmDNSImpl_5 *new_JavaxJmdnsImplJmmDNSImpl_5_initWithJavaxJmdnsNetworkTopologyListener_withJavaxJmdnsNetworkTopologyEvent_(id<JavaxJmdnsNetworkTopologyListener> capture$0, JavaxJmdnsNetworkTopologyEvent *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static JavaxJmdnsImplJmmDNSImpl_5 *create_JavaxJmdnsImplJmmDNSImpl_5_initWithJavaxJmdnsNetworkTopologyListener_withJavaxJmdnsNetworkTopologyEvent_(id<JavaxJmdnsNetworkTopologyListener> capture$0, JavaxJmdnsNetworkTopologyEvent *capture$1);

@interface JavaxJmdnsImplJmmDNSImpl_6 : NSObject < JavaLangRunnable > {
 @public
  id<JavaxJmdnsNetworkTopologyListener> val$listener_;
  JavaxJmdnsNetworkTopologyEvent *val$jmdnsEvent_;
}

- (instancetype)initWithJavaxJmdnsNetworkTopologyListener:(id<JavaxJmdnsNetworkTopologyListener>)capture$0
                       withJavaxJmdnsNetworkTopologyEvent:(JavaxJmdnsNetworkTopologyEvent *)capture$1;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxJmdnsImplJmmDNSImpl_6)

__attribute__((unused)) static void JavaxJmdnsImplJmmDNSImpl_6_initWithJavaxJmdnsNetworkTopologyListener_withJavaxJmdnsNetworkTopologyEvent_(JavaxJmdnsImplJmmDNSImpl_6 *self, id<JavaxJmdnsNetworkTopologyListener> capture$0, JavaxJmdnsNetworkTopologyEvent *capture$1);

__attribute__((unused)) static JavaxJmdnsImplJmmDNSImpl_6 *new_JavaxJmdnsImplJmmDNSImpl_6_initWithJavaxJmdnsNetworkTopologyListener_withJavaxJmdnsNetworkTopologyEvent_(id<JavaxJmdnsNetworkTopologyListener> capture$0, JavaxJmdnsNetworkTopologyEvent *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static JavaxJmdnsImplJmmDNSImpl_6 *create_JavaxJmdnsImplJmmDNSImpl_6_initWithJavaxJmdnsNetworkTopologyListener_withJavaxJmdnsNetworkTopologyEvent_(id<JavaxJmdnsNetworkTopologyListener> capture$0, JavaxJmdnsNetworkTopologyEvent *capture$1);

@interface JavaxJmdnsImplJmmDNSImpl_NetworkChecker () {
 @public
  id<JavaxJmdnsNetworkTopologyListener> _mmDNS_;
  id<JavaxJmdnsNetworkTopologyDiscovery> _topology_;
  id<JavaUtilSet> _knownAddresses_;
}

@end

J2OBJC_FIELD_SETTER(JavaxJmdnsImplJmmDNSImpl_NetworkChecker, _mmDNS_, id<JavaxJmdnsNetworkTopologyListener>)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplJmmDNSImpl_NetworkChecker, _topology_, id<JavaxJmdnsNetworkTopologyDiscovery>)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplJmmDNSImpl_NetworkChecker, _knownAddresses_, id<JavaUtilSet>)

inline JavaUtilLoggingLogger *JavaxJmdnsImplJmmDNSImpl_NetworkChecker_get_logger1();
inline JavaUtilLoggingLogger *JavaxJmdnsImplJmmDNSImpl_NetworkChecker_set_logger1(JavaUtilLoggingLogger *value);
static JavaUtilLoggingLogger *JavaxJmdnsImplJmmDNSImpl_NetworkChecker_logger1;
J2OBJC_STATIC_FIELD_OBJ(JavaxJmdnsImplJmmDNSImpl_NetworkChecker, logger1, JavaUtilLoggingLogger *)

J2OBJC_INITIALIZED_DEFN(JavaxJmdnsImplJmmDNSImpl)

@implementation JavaxJmdnsImplJmmDNSImpl

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  JavaxJmdnsImplJmmDNSImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)close {
  if ([((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmmDNSImpl_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINER)]) {
    [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmmDNSImpl_logger)) finerWithNSString:JreStrcat("$@", @"Cancelling JmmDNS: ", self)];
  }
  [((JavaUtilTimer *) nil_chk(_timer_)) cancel];
  [((id<JavaUtilConcurrentExecutorService>) nil_chk(_ListenerExecutor_)) shutdown];
  id<JavaUtilConcurrentExecutorService> executor = JavaUtilConcurrentExecutors_newCachedThreadPool();
  for (JavaxJmdnsJmDNS * __strong mDNS in nil_chk([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_knownMDNS_)) values])) {
    (void) [((id<JavaUtilConcurrentExecutorService>) nil_chk(executor)) submitWithJavaLangRunnable:new_JavaxJmdnsImplJmmDNSImpl_1_initWithJavaxJmdnsJmDNS_(mDNS)];
  }
  [((id<JavaUtilConcurrentExecutorService>) nil_chk(executor)) shutdown];
  @try {
    [executor awaitTerminationWithLong:JavaxJmdnsImplConstantsDNSConstants_CLOSE_TIMEOUT withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  }
  @catch (JavaLangInterruptedException *exception) {
    [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmmDNSImpl_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:@"Exception " withNSException:exception];
  }
  [_knownMDNS_ clear];
}

- (IOSObjectArray *)getNames {
  id<JavaUtilSet> result = new_JavaUtilHashSet_init();
  for (JavaxJmdnsJmDNS * __strong mDNS in nil_chk([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_knownMDNS_)) values])) {
    [result addWithId:[((JavaxJmdnsJmDNS *) nil_chk(mDNS)) getName]];
  }
  return [result toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[result size] type:NSString_class_()]];
}

- (IOSObjectArray *)getHostNames {
  id<JavaUtilSet> result = new_JavaUtilHashSet_init();
  for (JavaxJmdnsJmDNS * __strong mDNS in nil_chk([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_knownMDNS_)) values])) {
    [result addWithId:[((JavaxJmdnsJmDNS *) nil_chk(mDNS)) getHostName]];
  }
  return [result toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[result size] type:NSString_class_()]];
}

- (IOSObjectArray *)getInterfaces {
  id<JavaUtilSet> result = new_JavaUtilHashSet_init();
  for (JavaxJmdnsJmDNS * __strong mDNS in nil_chk([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_knownMDNS_)) values])) {
    [result addWithId:[((JavaxJmdnsJmDNS *) nil_chk(mDNS)) getInterface]];
  }
  return [result toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[result size] type:JavaNetInetAddress_class_()]];
}

- (IOSObjectArray *)getServiceInfosWithNSString:(NSString *)type
                                   withNSString:(NSString *)name {
  return [self getServiceInfosWithNSString:type withNSString:name withBoolean:false withLong:JavaxJmdnsImplConstantsDNSConstants_SERVICE_INFO_TIMEOUT];
}

- (IOSObjectArray *)getServiceInfosWithNSString:(NSString *)type
                                   withNSString:(NSString *)name
                                       withLong:(jlong)timeout {
  return [self getServiceInfosWithNSString:type withNSString:name withBoolean:false withLong:timeout];
}

- (IOSObjectArray *)getServiceInfosWithNSString:(NSString *)type
                                   withNSString:(NSString *)name
                                    withBoolean:(jboolean)persistent {
  return [self getServiceInfosWithNSString:type withNSString:name withBoolean:persistent withLong:JavaxJmdnsImplConstantsDNSConstants_SERVICE_INFO_TIMEOUT];
}

- (IOSObjectArray *)getServiceInfosWithNSString:(NSString *)type
                                   withNSString:(NSString *)name
                                    withBoolean:(jboolean)persistent
                                       withLong:(jlong)timeout {
  id<JavaUtilSet> result = JavaUtilCollections_synchronizedSetWithJavaUtilSet_(new_JavaUtilHashSet_initWithInt_([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_knownMDNS_)) size]));
  id<JavaUtilConcurrentExecutorService> executor = JavaUtilConcurrentExecutors_newCachedThreadPool();
  for (JavaxJmdnsJmDNS * __strong mDNS in nil_chk([_knownMDNS_ values])) {
    (void) [((id<JavaUtilConcurrentExecutorService>) nil_chk(executor)) submitWithJavaLangRunnable:new_JavaxJmdnsImplJmmDNSImpl_2_initWithJavaUtilSet_withJavaxJmdnsJmDNS_withNSString_withNSString_withBoolean_withLong_(result, mDNS, type, name, persistent, timeout)];
  }
  [((id<JavaUtilConcurrentExecutorService>) nil_chk(executor)) shutdown];
  @try {
    [executor awaitTerminationWithLong:timeout withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  }
  @catch (JavaLangInterruptedException *exception) {
    [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmmDNSImpl_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:@"Exception " withNSException:exception];
  }
  return [((id<JavaUtilSet>) nil_chk(result)) toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[result size] type:JavaxJmdnsServiceInfo_class_()]];
}

- (void)requestServiceInfoWithNSString:(NSString *)type
                          withNSString:(NSString *)name {
  [self requestServiceInfoWithNSString:type withNSString:name withBoolean:false withLong:JavaxJmdnsImplConstantsDNSConstants_SERVICE_INFO_TIMEOUT];
}

- (void)requestServiceInfoWithNSString:(NSString *)type
                          withNSString:(NSString *)name
                           withBoolean:(jboolean)persistent {
  [self requestServiceInfoWithNSString:type withNSString:name withBoolean:persistent withLong:JavaxJmdnsImplConstantsDNSConstants_SERVICE_INFO_TIMEOUT];
}

- (void)requestServiceInfoWithNSString:(NSString *)type
                          withNSString:(NSString *)name
                              withLong:(jlong)timeout {
  [self requestServiceInfoWithNSString:type withNSString:name withBoolean:false withLong:timeout];
}

- (void)requestServiceInfoWithNSString:(NSString *)type
                          withNSString:(NSString *)name
                           withBoolean:(jboolean)persistent
                              withLong:(jlong)timeout {
  for (JavaxJmdnsJmDNS * __strong mDNS in nil_chk([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_knownMDNS_)) values])) {
    (void) [((id<JavaUtilConcurrentExecutorService>) nil_chk(_jmDNSExecutor_)) submitWithJavaLangRunnable:new_JavaxJmdnsImplJmmDNSImpl_3_initWithJavaxJmdnsJmDNS_withNSString_withNSString_withBoolean_withLong_(mDNS, type, name, persistent, timeout)];
  }
}

- (void)addServiceTypeListenerWithJavaxJmdnsServiceTypeListener:(id<JavaxJmdnsServiceTypeListener>)listener {
  for (JavaxJmdnsJmDNS * __strong mDNS in nil_chk([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_knownMDNS_)) values])) {
    [((JavaxJmdnsJmDNS *) nil_chk(mDNS)) addServiceTypeListenerWithJavaxJmdnsServiceTypeListener:listener];
  }
}

- (void)removeServiceTypeListenerWithJavaxJmdnsServiceTypeListener:(id<JavaxJmdnsServiceTypeListener>)listener {
  for (JavaxJmdnsJmDNS * __strong mDNS in nil_chk([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_knownMDNS_)) values])) {
    [((JavaxJmdnsJmDNS *) nil_chk(mDNS)) removeServiceTypeListenerWithJavaxJmdnsServiceTypeListener:listener];
  }
}

- (void)addServiceListenerWithNSString:(NSString *)type
         withJavaxJmdnsServiceListener:(id<JavaxJmdnsServiceListener>)listener {
  for (JavaxJmdnsJmDNS * __strong mDNS in nil_chk([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_knownMDNS_)) values])) {
    [((JavaxJmdnsJmDNS *) nil_chk(mDNS)) addServiceListenerWithNSString:type withJavaxJmdnsServiceListener:listener];
  }
}

- (void)removeServiceListenerWithNSString:(NSString *)type
            withJavaxJmdnsServiceListener:(id<JavaxJmdnsServiceListener>)listener {
  for (JavaxJmdnsJmDNS * __strong mDNS in nil_chk([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_knownMDNS_)) values])) {
    [((JavaxJmdnsJmDNS *) nil_chk(mDNS)) removeServiceListenerWithNSString:type withJavaxJmdnsServiceListener:listener];
  }
}

- (void)textValueUpdatedWithJavaxJmdnsServiceInfo:(JavaxJmdnsServiceInfo *)target
                                    withByteArray:(IOSByteArray *)value {
  @synchronized(_services_) {
    for (JavaxJmdnsJmDNS * __strong mDNS in nil_chk([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_knownMDNS_)) values])) {
      JavaxJmdnsServiceInfo *info = [((id<JavaUtilMap>) nil_chk([((JavaxJmdnsImplJmDNSImpl *) nil_chk(((JavaxJmdnsImplJmDNSImpl *) cast_chk(mDNS, [JavaxJmdnsImplJmDNSImpl class])))) getServices])) getWithId:[((JavaxJmdnsServiceInfo *) nil_chk(target)) getQualifiedName]];
      if (info != nil) {
        [info setTextWithByteArray:value];
      }
      else {
        [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmmDNSImpl_logger)) warningWithNSString:@"We have a mDNS that does not know about the service info being updated."];
      }
    }
  }
}

- (void)registerServiceWithJavaxJmdnsServiceInfo:(JavaxJmdnsServiceInfo *)info {
  @synchronized(_services_) {
    for (JavaxJmdnsJmDNS * __strong mDNS in nil_chk([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_knownMDNS_)) values])) {
      [((JavaxJmdnsJmDNS *) nil_chk(mDNS)) registerServiceWithJavaxJmdnsServiceInfo:[((JavaxJmdnsServiceInfo *) nil_chk(info)) java_clone]];
    }
    [((JavaxJmdnsImplServiceInfoImpl *) nil_chk(((JavaxJmdnsImplServiceInfoImpl *) cast_chk(info, [JavaxJmdnsImplServiceInfoImpl class])))) setDelegateWithJavaxJmdnsImplServiceInfoImpl_Delegate:self];
    (void) [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_services_)) putWithId:[((JavaxJmdnsServiceInfo *) nil_chk(info)) getQualifiedName] withId:info];
  }
}

- (void)unregisterServiceWithJavaxJmdnsServiceInfo:(JavaxJmdnsServiceInfo *)info {
  @synchronized(_services_) {
    for (JavaxJmdnsJmDNS * __strong mDNS in nil_chk([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_knownMDNS_)) values])) {
      [((JavaxJmdnsJmDNS *) nil_chk(mDNS)) unregisterServiceWithJavaxJmdnsServiceInfo:info];
    }
    [((JavaxJmdnsImplServiceInfoImpl *) nil_chk(((JavaxJmdnsImplServiceInfoImpl *) cast_chk(info, [JavaxJmdnsImplServiceInfoImpl class])))) setDelegateWithJavaxJmdnsImplServiceInfoImpl_Delegate:nil];
    (void) [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_services_)) removeWithId:[((JavaxJmdnsServiceInfo *) nil_chk(info)) getQualifiedName]];
  }
}

- (void)unregisterAllServices {
  @synchronized(_services_) {
    for (JavaxJmdnsJmDNS * __strong mDNS in nil_chk([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_knownMDNS_)) values])) {
      [((JavaxJmdnsJmDNS *) nil_chk(mDNS)) unregisterAllServices];
    }
    [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_services_)) clear];
  }
}

- (void)registerServiceTypeWithNSString:(NSString *)type {
  for (JavaxJmdnsJmDNS * __strong mDNS in nil_chk([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_knownMDNS_)) values])) {
    [((JavaxJmdnsJmDNS *) nil_chk(mDNS)) registerServiceTypeWithNSString:type];
  }
}

- (IOSObjectArray *)listWithNSString:(NSString *)type {
  return [self listWithNSString:type withLong:JavaxJmdnsImplConstantsDNSConstants_SERVICE_INFO_TIMEOUT];
}

- (IOSObjectArray *)listWithNSString:(NSString *)type
                            withLong:(jlong)timeout {
  id<JavaUtilSet> result = JavaUtilCollections_synchronizedSetWithJavaUtilSet_(new_JavaUtilHashSet_initWithInt_([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_knownMDNS_)) size] * 5));
  id<JavaUtilConcurrentExecutorService> executor = JavaUtilConcurrentExecutors_newCachedThreadPool();
  for (JavaxJmdnsJmDNS * __strong mDNS in nil_chk([_knownMDNS_ values])) {
    (void) [((id<JavaUtilConcurrentExecutorService>) nil_chk(executor)) submitWithJavaLangRunnable:new_JavaxJmdnsImplJmmDNSImpl_4_initWithJavaUtilSet_withJavaxJmdnsJmDNS_withNSString_withLong_(result, mDNS, type, timeout)];
  }
  [((id<JavaUtilConcurrentExecutorService>) nil_chk(executor)) shutdown];
  @try {
    [executor awaitTerminationWithLong:timeout withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  }
  @catch (JavaLangInterruptedException *exception) {
    [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmmDNSImpl_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:@"Exception " withNSException:exception];
  }
  return [((id<JavaUtilSet>) nil_chk(result)) toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[result size] type:JavaxJmdnsServiceInfo_class_()]];
}

- (id<JavaUtilMap>)listBySubtypeWithNSString:(NSString *)type {
  return [self listBySubtypeWithNSString:type withLong:JavaxJmdnsImplConstantsDNSConstants_SERVICE_INFO_TIMEOUT];
}

- (id<JavaUtilMap>)listBySubtypeWithNSString:(NSString *)type
                                    withLong:(jlong)timeout {
  id<JavaUtilMap> map = new_JavaUtilHashMap_initWithInt_(5);
  {
    IOSObjectArray *a__ = [self listWithNSString:type withLong:timeout];
    JavaxJmdnsServiceInfo * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaxJmdnsServiceInfo * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaxJmdnsServiceInfo *info = *b__++;
      NSString *subtype = [((JavaxJmdnsServiceInfo *) nil_chk(info)) getSubtype];
      if (![map containsKeyWithId:subtype]) {
        (void) [map putWithId:subtype withId:new_JavaUtilArrayList_initWithInt_(10)];
      }
      [((id<JavaUtilList>) nil_chk([map getWithId:subtype])) addWithId:info];
    }
  }
  id<JavaUtilMap> result = new_JavaUtilHashMap_initWithInt_([map size]);
  for (NSString * __strong subtype in nil_chk([map keySet])) {
    id<JavaUtilList> infoForSubType = [map getWithId:subtype];
    (void) [result putWithId:subtype withId:[((id<JavaUtilList>) nil_chk(infoForSubType)) toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[infoForSubType size] type:JavaxJmdnsServiceInfo_class_()]]];
  }
  return result;
}

- (void)addNetworkTopologyListenerWithJavaxJmdnsNetworkTopologyListener:(id<JavaxJmdnsNetworkTopologyListener>)listener {
  [((id<JavaUtilSet>) nil_chk(_networkListeners_)) addWithId:listener];
}

- (void)removeNetworkTopologyListenerWithJavaxJmdnsNetworkTopologyListener:(id<JavaxJmdnsNetworkTopologyListener>)listener {
  [((id<JavaUtilSet>) nil_chk(_networkListeners_)) removeWithId:listener];
}

- (IOSObjectArray *)networkListeners {
  return [((id<JavaUtilSet>) nil_chk(_networkListeners_)) toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[_networkListeners_ size] type:JavaxJmdnsNetworkTopologyListener_class_()]];
}

- (void)inetAddressAddedWithJavaxJmdnsNetworkTopologyEvent:(JavaxJmdnsNetworkTopologyEvent *)event {
  JavaNetInetAddress *address = [((JavaxJmdnsNetworkTopologyEvent *) nil_chk(event)) getInetAddress];
  @try {
    @synchronized(self) {
      if (![((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_knownMDNS_)) containsKeyWithId:address]) {
        (void) [_knownMDNS_ putWithId:address withId:JavaxJmdnsJmDNS_createWithJavaNetInetAddress_(address)];
        JavaxJmdnsNetworkTopologyEvent *jmdnsEvent = new_JavaxJmdnsImplNetworkTopologyEventImpl_initWithJavaxJmdnsJmDNS_withJavaNetInetAddress_([_knownMDNS_ getWithId:address], address);
        {
          IOSObjectArray *a__ = [self networkListeners];
          id<JavaxJmdnsNetworkTopologyListener> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          id<JavaxJmdnsNetworkTopologyListener> const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            id<JavaxJmdnsNetworkTopologyListener> listener = *b__++;
            (void) [((id<JavaUtilConcurrentExecutorService>) nil_chk(_ListenerExecutor_)) submitWithJavaLangRunnable:new_JavaxJmdnsImplJmmDNSImpl_5_initWithJavaxJmdnsNetworkTopologyListener_withJavaxJmdnsNetworkTopologyEvent_(listener, jmdnsEvent)];
          }
        }
      }
    }
  }
  @catch (JavaLangException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmmDNSImpl_logger)) warningWithNSString:JreStrcat("$@", @"Unexpected unhandled exception: ", e)];
  }
}

- (void)inetAddressRemovedWithJavaxJmdnsNetworkTopologyEvent:(JavaxJmdnsNetworkTopologyEvent *)event {
  JavaNetInetAddress *address = [((JavaxJmdnsNetworkTopologyEvent *) nil_chk(event)) getInetAddress];
  @try {
    @synchronized(self) {
      if ([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_knownMDNS_)) containsKeyWithId:address]) {
        JavaxJmdnsJmDNS *mDNS = [_knownMDNS_ removeWithId:address];
        [((JavaxJmdnsJmDNS *) nil_chk(mDNS)) close];
        JavaxJmdnsNetworkTopologyEvent *jmdnsEvent = new_JavaxJmdnsImplNetworkTopologyEventImpl_initWithJavaxJmdnsJmDNS_withJavaNetInetAddress_(mDNS, address);
        {
          IOSObjectArray *a__ = [self networkListeners];
          id<JavaxJmdnsNetworkTopologyListener> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          id<JavaxJmdnsNetworkTopologyListener> const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            id<JavaxJmdnsNetworkTopologyListener> listener = *b__++;
            (void) [((id<JavaUtilConcurrentExecutorService>) nil_chk(_ListenerExecutor_)) submitWithJavaLangRunnable:new_JavaxJmdnsImplJmmDNSImpl_6_initWithJavaxJmdnsNetworkTopologyListener_withJavaxJmdnsNetworkTopologyEvent_(listener, jmdnsEvent)];
          }
        }
      }
    }
  }
  @catch (JavaLangException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmmDNSImpl_logger)) warningWithNSString:JreStrcat("$@", @"Unexpected unhandled exception: ", e)];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LJavaNetInetAddress;", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "[LJavaxJmdnsServiceInfo;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "[LJavaxJmdnsServiceInfo;", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "[LJavaxJmdnsServiceInfo;", 0x1, 1, 4, -1, -1, -1, -1 },
    { NULL, "[LJavaxJmdnsServiceInfo;", 0x1, 1, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, 0, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, 0, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "[LJavaxJmdnsServiceInfo;", 0x1, 20, 19, -1, -1, -1, -1 },
    { NULL, "[LJavaxJmdnsServiceInfo;", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 22, 19, -1, 23, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 22, 21, -1, 24, -1, -1 },
    { NULL, "V", 0x1, 25, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 26, -1, -1, -1, -1 },
    { NULL, "[LJavaxJmdnsNetworkTopologyListener;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 29, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(close);
  methods[2].selector = @selector(getNames);
  methods[3].selector = @selector(getHostNames);
  methods[4].selector = @selector(getInterfaces);
  methods[5].selector = @selector(getServiceInfosWithNSString:withNSString:);
  methods[6].selector = @selector(getServiceInfosWithNSString:withNSString:withLong:);
  methods[7].selector = @selector(getServiceInfosWithNSString:withNSString:withBoolean:);
  methods[8].selector = @selector(getServiceInfosWithNSString:withNSString:withBoolean:withLong:);
  methods[9].selector = @selector(requestServiceInfoWithNSString:withNSString:);
  methods[10].selector = @selector(requestServiceInfoWithNSString:withNSString:withBoolean:);
  methods[11].selector = @selector(requestServiceInfoWithNSString:withNSString:withLong:);
  methods[12].selector = @selector(requestServiceInfoWithNSString:withNSString:withBoolean:withLong:);
  methods[13].selector = @selector(addServiceTypeListenerWithJavaxJmdnsServiceTypeListener:);
  methods[14].selector = @selector(removeServiceTypeListenerWithJavaxJmdnsServiceTypeListener:);
  methods[15].selector = @selector(addServiceListenerWithNSString:withJavaxJmdnsServiceListener:);
  methods[16].selector = @selector(removeServiceListenerWithNSString:withJavaxJmdnsServiceListener:);
  methods[17].selector = @selector(textValueUpdatedWithJavaxJmdnsServiceInfo:withByteArray:);
  methods[18].selector = @selector(registerServiceWithJavaxJmdnsServiceInfo:);
  methods[19].selector = @selector(unregisterServiceWithJavaxJmdnsServiceInfo:);
  methods[20].selector = @selector(unregisterAllServices);
  methods[21].selector = @selector(registerServiceTypeWithNSString:);
  methods[22].selector = @selector(listWithNSString:);
  methods[23].selector = @selector(listWithNSString:withLong:);
  methods[24].selector = @selector(listBySubtypeWithNSString:);
  methods[25].selector = @selector(listBySubtypeWithNSString:withLong:);
  methods[26].selector = @selector(addNetworkTopologyListenerWithJavaxJmdnsNetworkTopologyListener:);
  methods[27].selector = @selector(removeNetworkTopologyListenerWithJavaxJmdnsNetworkTopologyListener:);
  methods[28].selector = @selector(networkListeners);
  methods[29].selector = @selector(inetAddressAddedWithJavaxJmdnsNetworkTopologyEvent:);
  methods[30].selector = @selector(inetAddressRemovedWithJavaxJmdnsNetworkTopologyEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0xa, -1, 31, -1, -1 },
    { "_networkListeners_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 32, -1 },
    { "_knownMDNS_", "LJavaUtilConcurrentConcurrentMap;", .constantValue.asLong = 0, 0x12, -1, -1, 33, -1 },
    { "_services_", "LJavaUtilConcurrentConcurrentMap;", .constantValue.asLong = 0, 0x12, -1, -1, 34, -1 },
    { "_ListenerExecutor_", "LJavaUtilConcurrentExecutorService;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_jmDNSExecutor_", "LJavaUtilConcurrentExecutorService;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_timer_", "LJavaUtilTimer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoIOException;", "getServiceInfos", "LNSString;LNSString;", "LNSString;LNSString;J", "LNSString;LNSString;Z", "LNSString;LNSString;ZJ", "requestServiceInfo", "addServiceTypeListener", "LJavaxJmdnsServiceTypeListener;", "removeServiceTypeListener", "addServiceListener", "LNSString;LJavaxJmdnsServiceListener;", "removeServiceListener", "textValueUpdated", "LJavaxJmdnsServiceInfo;[B", "registerService", "LJavaxJmdnsServiceInfo;", "unregisterService", "registerServiceType", "LNSString;", "list", "LNSString;J", "listBySubtype", "(Ljava/lang/String;)Ljava/util/Map<Ljava/lang/String;[Ljavax/jmdns/ServiceInfo;>;", "(Ljava/lang/String;J)Ljava/util/Map<Ljava/lang/String;[Ljavax/jmdns/ServiceInfo;>;", "addNetworkTopologyListener", "LJavaxJmdnsNetworkTopologyListener;", "removeNetworkTopologyListener", "inetAddressAdded", "LJavaxJmdnsNetworkTopologyEvent;", "inetAddressRemoved", &JavaxJmdnsImplJmmDNSImpl_logger, "Ljava/util/Set<Ljavax/jmdns/NetworkTopologyListener;>;", "Ljava/util/concurrent/ConcurrentMap<Ljava/net/InetAddress;Ljavax/jmdns/JmDNS;>;", "Ljava/util/concurrent/ConcurrentMap<Ljava/lang/String;Ljavax/jmdns/ServiceInfo;>;", "LJavaxJmdnsImplJmmDNSImpl_NetworkChecker;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplJmmDNSImpl = { "JmmDNSImpl", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x1, 31, 7, -1, 35, -1, -1, -1 };
  return &_JavaxJmdnsImplJmmDNSImpl;
}

+ (void)initialize {
  if (self == [JavaxJmdnsImplJmmDNSImpl class]) {
    JavaxJmdnsImplJmmDNSImpl_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([JavaxJmdnsImplJmmDNSImpl_class_() getName]);
    J2OBJC_SET_INITIALIZED(JavaxJmdnsImplJmmDNSImpl)
  }
}

@end

void JavaxJmdnsImplJmmDNSImpl_init(JavaxJmdnsImplJmmDNSImpl *self) {
  NSObject_init(self);
  self->_networkListeners_ = JavaUtilCollections_synchronizedSetWithJavaUtilSet_(new_JavaUtilHashSet_init());
  self->_knownMDNS_ = new_JavaUtilConcurrentConcurrentHashMap_init();
  self->_services_ = new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(20);
  self->_ListenerExecutor_ = JavaUtilConcurrentExecutors_newSingleThreadExecutor();
  self->_jmDNSExecutor_ = JavaUtilConcurrentExecutors_newCachedThreadPool();
  self->_timer_ = new_JavaUtilTimer_initWithNSString_withBoolean_(@"Multihommed mDNS.Timer", true);
  [(new_JavaxJmdnsImplJmmDNSImpl_NetworkChecker_initWithJavaxJmdnsNetworkTopologyListener_withJavaxJmdnsNetworkTopologyDiscovery_(self, JavaxJmdnsNetworkTopologyDiscovery_Factory_getInstance())) startWithJavaUtilTimer:self->_timer_];
}

JavaxJmdnsImplJmmDNSImpl *new_JavaxJmdnsImplJmmDNSImpl_init() {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplJmmDNSImpl, init)
}

JavaxJmdnsImplJmmDNSImpl *create_JavaxJmdnsImplJmmDNSImpl_init() {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplJmmDNSImpl, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplJmmDNSImpl)

@implementation JavaxJmdnsImplJmmDNSImpl_1

- (instancetype)initWithJavaxJmdnsJmDNS:(JavaxJmdnsJmDNS *)capture$0 {
  JavaxJmdnsImplJmmDNSImpl_1_initWithJavaxJmdnsJmDNS_(self, capture$0);
  return self;
}

- (void)run {
  @try {
    [((JavaxJmdnsJmDNS *) nil_chk(val$mDNS_)) close];
  }
  @catch (JavaIoIOException *exception) {
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaxJmdnsJmDNS:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$mDNS_", "LJavaxJmdnsJmDNS;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaxJmdnsImplJmmDNSImpl;", "close" };
  static const J2ObjcClassInfo _JavaxJmdnsImplJmmDNSImpl_1 = { "", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x8018, 2, 1, 0, -1, 1, -1, -1 };
  return &_JavaxJmdnsImplJmmDNSImpl_1;
}

@end

void JavaxJmdnsImplJmmDNSImpl_1_initWithJavaxJmdnsJmDNS_(JavaxJmdnsImplJmmDNSImpl_1 *self, JavaxJmdnsJmDNS *capture$0) {
  self->val$mDNS_ = capture$0;
  NSObject_init(self);
}

JavaxJmdnsImplJmmDNSImpl_1 *new_JavaxJmdnsImplJmmDNSImpl_1_initWithJavaxJmdnsJmDNS_(JavaxJmdnsJmDNS *capture$0) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplJmmDNSImpl_1, initWithJavaxJmdnsJmDNS_, capture$0)
}

JavaxJmdnsImplJmmDNSImpl_1 *create_JavaxJmdnsImplJmmDNSImpl_1_initWithJavaxJmdnsJmDNS_(JavaxJmdnsJmDNS *capture$0) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplJmmDNSImpl_1, initWithJavaxJmdnsJmDNS_, capture$0)
}

@implementation JavaxJmdnsImplJmmDNSImpl_2

- (instancetype)initWithJavaUtilSet:(id<JavaUtilSet>)capture$0
                withJavaxJmdnsJmDNS:(JavaxJmdnsJmDNS *)capture$1
                       withNSString:(NSString *)capture$2
                       withNSString:(NSString *)capture$3
                        withBoolean:(jboolean)capture$4
                           withLong:(jlong)capture$5 {
  JavaxJmdnsImplJmmDNSImpl_2_initWithJavaUtilSet_withJavaxJmdnsJmDNS_withNSString_withNSString_withBoolean_withLong_(self, capture$0, capture$1, capture$2, capture$3, capture$4, capture$5);
  return self;
}

- (void)run {
  [((id<JavaUtilSet>) nil_chk(val$result_)) addWithId:[((JavaxJmdnsJmDNS *) nil_chk(val$mDNS_)) getServiceInfoWithNSString:val$type_ withNSString:val$name_ withBoolean:val$persistent_ withLong:val$timeout_]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilSet:withJavaxJmdnsJmDNS:withNSString:withNSString:withBoolean:withLong:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$result_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x1012, -1, -1, 0, -1 },
    { "val$mDNS_", "LJavaxJmdnsJmDNS;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$type_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$name_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$persistent_", "Z", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$timeout_", "J", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "Ljava/util/Set<Ljavax/jmdns/ServiceInfo;>;", "LJavaxJmdnsImplJmmDNSImpl;", "getServiceInfosWithNSString:withNSString:withBoolean:withLong:" };
  static const J2ObjcClassInfo _JavaxJmdnsImplJmmDNSImpl_2 = { "", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x8018, 2, 6, 1, -1, 2, -1, -1 };
  return &_JavaxJmdnsImplJmmDNSImpl_2;
}

@end

void JavaxJmdnsImplJmmDNSImpl_2_initWithJavaUtilSet_withJavaxJmdnsJmDNS_withNSString_withNSString_withBoolean_withLong_(JavaxJmdnsImplJmmDNSImpl_2 *self, id<JavaUtilSet> capture$0, JavaxJmdnsJmDNS *capture$1, NSString *capture$2, NSString *capture$3, jboolean capture$4, jlong capture$5) {
  self->val$result_ = capture$0;
  self->val$mDNS_ = capture$1;
  self->val$type_ = capture$2;
  self->val$name_ = capture$3;
  self->val$persistent_ = capture$4;
  self->val$timeout_ = capture$5;
  NSObject_init(self);
}

JavaxJmdnsImplJmmDNSImpl_2 *new_JavaxJmdnsImplJmmDNSImpl_2_initWithJavaUtilSet_withJavaxJmdnsJmDNS_withNSString_withNSString_withBoolean_withLong_(id<JavaUtilSet> capture$0, JavaxJmdnsJmDNS *capture$1, NSString *capture$2, NSString *capture$3, jboolean capture$4, jlong capture$5) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplJmmDNSImpl_2, initWithJavaUtilSet_withJavaxJmdnsJmDNS_withNSString_withNSString_withBoolean_withLong_, capture$0, capture$1, capture$2, capture$3, capture$4, capture$5)
}

JavaxJmdnsImplJmmDNSImpl_2 *create_JavaxJmdnsImplJmmDNSImpl_2_initWithJavaUtilSet_withJavaxJmdnsJmDNS_withNSString_withNSString_withBoolean_withLong_(id<JavaUtilSet> capture$0, JavaxJmdnsJmDNS *capture$1, NSString *capture$2, NSString *capture$3, jboolean capture$4, jlong capture$5) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplJmmDNSImpl_2, initWithJavaUtilSet_withJavaxJmdnsJmDNS_withNSString_withNSString_withBoolean_withLong_, capture$0, capture$1, capture$2, capture$3, capture$4, capture$5)
}

@implementation JavaxJmdnsImplJmmDNSImpl_3

- (instancetype)initWithJavaxJmdnsJmDNS:(JavaxJmdnsJmDNS *)capture$0
                           withNSString:(NSString *)capture$1
                           withNSString:(NSString *)capture$2
                            withBoolean:(jboolean)capture$3
                               withLong:(jlong)capture$4 {
  JavaxJmdnsImplJmmDNSImpl_3_initWithJavaxJmdnsJmDNS_withNSString_withNSString_withBoolean_withLong_(self, capture$0, capture$1, capture$2, capture$3, capture$4);
  return self;
}

- (void)run {
  [((JavaxJmdnsJmDNS *) nil_chk(val$mDNS_)) requestServiceInfoWithNSString:val$type_ withNSString:val$name_ withBoolean:val$persistent_ withLong:val$timeout_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaxJmdnsJmDNS:withNSString:withNSString:withBoolean:withLong:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$mDNS_", "LJavaxJmdnsJmDNS;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$type_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$name_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$persistent_", "Z", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$timeout_", "J", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaxJmdnsImplJmmDNSImpl;", "requestServiceInfoWithNSString:withNSString:withBoolean:withLong:" };
  static const J2ObjcClassInfo _JavaxJmdnsImplJmmDNSImpl_3 = { "", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x8018, 2, 5, 0, -1, 1, -1, -1 };
  return &_JavaxJmdnsImplJmmDNSImpl_3;
}

@end

void JavaxJmdnsImplJmmDNSImpl_3_initWithJavaxJmdnsJmDNS_withNSString_withNSString_withBoolean_withLong_(JavaxJmdnsImplJmmDNSImpl_3 *self, JavaxJmdnsJmDNS *capture$0, NSString *capture$1, NSString *capture$2, jboolean capture$3, jlong capture$4) {
  self->val$mDNS_ = capture$0;
  self->val$type_ = capture$1;
  self->val$name_ = capture$2;
  self->val$persistent_ = capture$3;
  self->val$timeout_ = capture$4;
  NSObject_init(self);
}

JavaxJmdnsImplJmmDNSImpl_3 *new_JavaxJmdnsImplJmmDNSImpl_3_initWithJavaxJmdnsJmDNS_withNSString_withNSString_withBoolean_withLong_(JavaxJmdnsJmDNS *capture$0, NSString *capture$1, NSString *capture$2, jboolean capture$3, jlong capture$4) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplJmmDNSImpl_3, initWithJavaxJmdnsJmDNS_withNSString_withNSString_withBoolean_withLong_, capture$0, capture$1, capture$2, capture$3, capture$4)
}

JavaxJmdnsImplJmmDNSImpl_3 *create_JavaxJmdnsImplJmmDNSImpl_3_initWithJavaxJmdnsJmDNS_withNSString_withNSString_withBoolean_withLong_(JavaxJmdnsJmDNS *capture$0, NSString *capture$1, NSString *capture$2, jboolean capture$3, jlong capture$4) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplJmmDNSImpl_3, initWithJavaxJmdnsJmDNS_withNSString_withNSString_withBoolean_withLong_, capture$0, capture$1, capture$2, capture$3, capture$4)
}

@implementation JavaxJmdnsImplJmmDNSImpl_4

- (instancetype)initWithJavaUtilSet:(id<JavaUtilSet>)capture$0
                withJavaxJmdnsJmDNS:(JavaxJmdnsJmDNS *)capture$1
                       withNSString:(NSString *)capture$2
                           withLong:(jlong)capture$3 {
  JavaxJmdnsImplJmmDNSImpl_4_initWithJavaUtilSet_withJavaxJmdnsJmDNS_withNSString_withLong_(self, capture$0, capture$1, capture$2, capture$3);
  return self;
}

- (void)run {
  [((id<JavaUtilSet>) nil_chk(val$result_)) addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_([((JavaxJmdnsJmDNS *) nil_chk(val$mDNS_)) listWithNSString:val$type_ withLong:val$timeout_])];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilSet:withJavaxJmdnsJmDNS:withNSString:withLong:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$result_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x1012, -1, -1, 0, -1 },
    { "val$mDNS_", "LJavaxJmdnsJmDNS;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$type_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$timeout_", "J", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "Ljava/util/Set<Ljavax/jmdns/ServiceInfo;>;", "LJavaxJmdnsImplJmmDNSImpl;", "listWithNSString:withLong:" };
  static const J2ObjcClassInfo _JavaxJmdnsImplJmmDNSImpl_4 = { "", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x8018, 2, 4, 1, -1, 2, -1, -1 };
  return &_JavaxJmdnsImplJmmDNSImpl_4;
}

@end

void JavaxJmdnsImplJmmDNSImpl_4_initWithJavaUtilSet_withJavaxJmdnsJmDNS_withNSString_withLong_(JavaxJmdnsImplJmmDNSImpl_4 *self, id<JavaUtilSet> capture$0, JavaxJmdnsJmDNS *capture$1, NSString *capture$2, jlong capture$3) {
  self->val$result_ = capture$0;
  self->val$mDNS_ = capture$1;
  self->val$type_ = capture$2;
  self->val$timeout_ = capture$3;
  NSObject_init(self);
}

JavaxJmdnsImplJmmDNSImpl_4 *new_JavaxJmdnsImplJmmDNSImpl_4_initWithJavaUtilSet_withJavaxJmdnsJmDNS_withNSString_withLong_(id<JavaUtilSet> capture$0, JavaxJmdnsJmDNS *capture$1, NSString *capture$2, jlong capture$3) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplJmmDNSImpl_4, initWithJavaUtilSet_withJavaxJmdnsJmDNS_withNSString_withLong_, capture$0, capture$1, capture$2, capture$3)
}

JavaxJmdnsImplJmmDNSImpl_4 *create_JavaxJmdnsImplJmmDNSImpl_4_initWithJavaUtilSet_withJavaxJmdnsJmDNS_withNSString_withLong_(id<JavaUtilSet> capture$0, JavaxJmdnsJmDNS *capture$1, NSString *capture$2, jlong capture$3) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplJmmDNSImpl_4, initWithJavaUtilSet_withJavaxJmdnsJmDNS_withNSString_withLong_, capture$0, capture$1, capture$2, capture$3)
}

@implementation JavaxJmdnsImplJmmDNSImpl_5

- (instancetype)initWithJavaxJmdnsNetworkTopologyListener:(id<JavaxJmdnsNetworkTopologyListener>)capture$0
                       withJavaxJmdnsNetworkTopologyEvent:(JavaxJmdnsNetworkTopologyEvent *)capture$1 {
  JavaxJmdnsImplJmmDNSImpl_5_initWithJavaxJmdnsNetworkTopologyListener_withJavaxJmdnsNetworkTopologyEvent_(self, capture$0, capture$1);
  return self;
}

- (void)run {
  [((id<JavaxJmdnsNetworkTopologyListener>) nil_chk(val$listener_)) inetAddressAddedWithJavaxJmdnsNetworkTopologyEvent:val$jmdnsEvent_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaxJmdnsNetworkTopologyListener:withJavaxJmdnsNetworkTopologyEvent:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$listener_", "LJavaxJmdnsNetworkTopologyListener;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$jmdnsEvent_", "LJavaxJmdnsNetworkTopologyEvent;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaxJmdnsImplJmmDNSImpl;", "inetAddressAddedWithJavaxJmdnsNetworkTopologyEvent:" };
  static const J2ObjcClassInfo _JavaxJmdnsImplJmmDNSImpl_5 = { "", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x8018, 2, 2, 0, -1, 1, -1, -1 };
  return &_JavaxJmdnsImplJmmDNSImpl_5;
}

@end

void JavaxJmdnsImplJmmDNSImpl_5_initWithJavaxJmdnsNetworkTopologyListener_withJavaxJmdnsNetworkTopologyEvent_(JavaxJmdnsImplJmmDNSImpl_5 *self, id<JavaxJmdnsNetworkTopologyListener> capture$0, JavaxJmdnsNetworkTopologyEvent *capture$1) {
  self->val$listener_ = capture$0;
  self->val$jmdnsEvent_ = capture$1;
  NSObject_init(self);
}

JavaxJmdnsImplJmmDNSImpl_5 *new_JavaxJmdnsImplJmmDNSImpl_5_initWithJavaxJmdnsNetworkTopologyListener_withJavaxJmdnsNetworkTopologyEvent_(id<JavaxJmdnsNetworkTopologyListener> capture$0, JavaxJmdnsNetworkTopologyEvent *capture$1) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplJmmDNSImpl_5, initWithJavaxJmdnsNetworkTopologyListener_withJavaxJmdnsNetworkTopologyEvent_, capture$0, capture$1)
}

JavaxJmdnsImplJmmDNSImpl_5 *create_JavaxJmdnsImplJmmDNSImpl_5_initWithJavaxJmdnsNetworkTopologyListener_withJavaxJmdnsNetworkTopologyEvent_(id<JavaxJmdnsNetworkTopologyListener> capture$0, JavaxJmdnsNetworkTopologyEvent *capture$1) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplJmmDNSImpl_5, initWithJavaxJmdnsNetworkTopologyListener_withJavaxJmdnsNetworkTopologyEvent_, capture$0, capture$1)
}

@implementation JavaxJmdnsImplJmmDNSImpl_6

- (instancetype)initWithJavaxJmdnsNetworkTopologyListener:(id<JavaxJmdnsNetworkTopologyListener>)capture$0
                       withJavaxJmdnsNetworkTopologyEvent:(JavaxJmdnsNetworkTopologyEvent *)capture$1 {
  JavaxJmdnsImplJmmDNSImpl_6_initWithJavaxJmdnsNetworkTopologyListener_withJavaxJmdnsNetworkTopologyEvent_(self, capture$0, capture$1);
  return self;
}

- (void)run {
  [((id<JavaxJmdnsNetworkTopologyListener>) nil_chk(val$listener_)) inetAddressRemovedWithJavaxJmdnsNetworkTopologyEvent:val$jmdnsEvent_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaxJmdnsNetworkTopologyListener:withJavaxJmdnsNetworkTopologyEvent:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$listener_", "LJavaxJmdnsNetworkTopologyListener;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$jmdnsEvent_", "LJavaxJmdnsNetworkTopologyEvent;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaxJmdnsImplJmmDNSImpl;", "inetAddressRemovedWithJavaxJmdnsNetworkTopologyEvent:" };
  static const J2ObjcClassInfo _JavaxJmdnsImplJmmDNSImpl_6 = { "", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x8018, 2, 2, 0, -1, 1, -1, -1 };
  return &_JavaxJmdnsImplJmmDNSImpl_6;
}

@end

void JavaxJmdnsImplJmmDNSImpl_6_initWithJavaxJmdnsNetworkTopologyListener_withJavaxJmdnsNetworkTopologyEvent_(JavaxJmdnsImplJmmDNSImpl_6 *self, id<JavaxJmdnsNetworkTopologyListener> capture$0, JavaxJmdnsNetworkTopologyEvent *capture$1) {
  self->val$listener_ = capture$0;
  self->val$jmdnsEvent_ = capture$1;
  NSObject_init(self);
}

JavaxJmdnsImplJmmDNSImpl_6 *new_JavaxJmdnsImplJmmDNSImpl_6_initWithJavaxJmdnsNetworkTopologyListener_withJavaxJmdnsNetworkTopologyEvent_(id<JavaxJmdnsNetworkTopologyListener> capture$0, JavaxJmdnsNetworkTopologyEvent *capture$1) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplJmmDNSImpl_6, initWithJavaxJmdnsNetworkTopologyListener_withJavaxJmdnsNetworkTopologyEvent_, capture$0, capture$1)
}

JavaxJmdnsImplJmmDNSImpl_6 *create_JavaxJmdnsImplJmmDNSImpl_6_initWithJavaxJmdnsNetworkTopologyListener_withJavaxJmdnsNetworkTopologyEvent_(id<JavaxJmdnsNetworkTopologyListener> capture$0, JavaxJmdnsNetworkTopologyEvent *capture$1) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplJmmDNSImpl_6, initWithJavaxJmdnsNetworkTopologyListener_withJavaxJmdnsNetworkTopologyEvent_, capture$0, capture$1)
}

J2OBJC_INITIALIZED_DEFN(JavaxJmdnsImplJmmDNSImpl_NetworkChecker)

@implementation JavaxJmdnsImplJmmDNSImpl_NetworkChecker

- (instancetype)initWithJavaxJmdnsNetworkTopologyListener:(id<JavaxJmdnsNetworkTopologyListener>)mmDNS
                   withJavaxJmdnsNetworkTopologyDiscovery:(id<JavaxJmdnsNetworkTopologyDiscovery>)topology {
  JavaxJmdnsImplJmmDNSImpl_NetworkChecker_initWithJavaxJmdnsNetworkTopologyListener_withJavaxJmdnsNetworkTopologyDiscovery_(self, mmDNS, topology);
  return self;
}

- (void)startWithJavaUtilTimer:(JavaUtilTimer *)timer {
  [((JavaUtilTimer *) nil_chk(timer)) scheduleWithJavaUtilTimerTask:self withLong:0 withLong:JavaxJmdnsImplConstantsDNSConstants_NETWORK_CHECK_INTERVAL];
}

- (void)run {
  @try {
    IOSObjectArray *curentAddresses = [((id<JavaxJmdnsNetworkTopologyDiscovery>) nil_chk(_topology_)) getInetAddresses];
    id<JavaUtilSet> current = new_JavaUtilHashSet_initWithInt_(((IOSObjectArray *) nil_chk(curentAddresses))->size_);
    {
      IOSObjectArray *a__ = curentAddresses;
      JavaNetInetAddress * const *b__ = a__->buffer_;
      JavaNetInetAddress * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        JavaNetInetAddress *address = *b__++;
        [current addWithId:address];
        if (![((id<JavaUtilSet>) nil_chk(_knownAddresses_)) containsWithId:address]) {
          JavaxJmdnsNetworkTopologyEvent *event = new_JavaxJmdnsImplNetworkTopologyEventImpl_initWithJavaxJmdnsNetworkTopologyListener_withJavaNetInetAddress_(_mmDNS_, address);
          [((id<JavaxJmdnsNetworkTopologyListener>) nil_chk(_mmDNS_)) inetAddressAddedWithJavaxJmdnsNetworkTopologyEvent:event];
        }
      }
    }
    for (JavaNetInetAddress * __strong address in nil_chk(_knownAddresses_)) {
      if (![current containsWithId:address]) {
        JavaxJmdnsNetworkTopologyEvent *event = new_JavaxJmdnsImplNetworkTopologyEventImpl_initWithJavaxJmdnsNetworkTopologyListener_withJavaNetInetAddress_(_mmDNS_, address);
        [((id<JavaxJmdnsNetworkTopologyListener>) nil_chk(_mmDNS_)) inetAddressRemovedWithJavaxJmdnsNetworkTopologyEvent:event];
      }
    }
    _knownAddresses_ = current;
  }
  @catch (JavaLangException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplJmmDNSImpl_NetworkChecker_logger1)) warningWithNSString:JreStrcat("$@", @"Unexpected unhandled exception: ", e)];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaxJmdnsNetworkTopologyListener:withJavaxJmdnsNetworkTopologyDiscovery:);
  methods[1].selector = @selector(startWithJavaUtilTimer:);
  methods[2].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger1", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0xa, -1, 3, -1, -1 },
    { "_mmDNS_", "LJavaxJmdnsNetworkTopologyListener;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_topology_", "LJavaxJmdnsNetworkTopologyDiscovery;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_knownAddresses_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "LJavaxJmdnsNetworkTopologyListener;LJavaxJmdnsNetworkTopologyDiscovery;", "start", "LJavaUtilTimer;", &JavaxJmdnsImplJmmDNSImpl_NetworkChecker_logger1, "Ljava/util/Set<Ljava/net/InetAddress;>;", "LJavaxJmdnsImplJmmDNSImpl;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplJmmDNSImpl_NetworkChecker = { "NetworkChecker", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x8, 3, 4, 5, -1, -1, -1, -1 };
  return &_JavaxJmdnsImplJmmDNSImpl_NetworkChecker;
}

+ (void)initialize {
  if (self == [JavaxJmdnsImplJmmDNSImpl_NetworkChecker class]) {
    JavaxJmdnsImplJmmDNSImpl_NetworkChecker_logger1 = JavaUtilLoggingLogger_getLoggerWithNSString_([JavaxJmdnsImplJmmDNSImpl_NetworkChecker_class_() getName]);
    J2OBJC_SET_INITIALIZED(JavaxJmdnsImplJmmDNSImpl_NetworkChecker)
  }
}

@end

void JavaxJmdnsImplJmmDNSImpl_NetworkChecker_initWithJavaxJmdnsNetworkTopologyListener_withJavaxJmdnsNetworkTopologyDiscovery_(JavaxJmdnsImplJmmDNSImpl_NetworkChecker *self, id<JavaxJmdnsNetworkTopologyListener> mmDNS, id<JavaxJmdnsNetworkTopologyDiscovery> topology) {
  JavaUtilTimerTask_init(self);
  self->_mmDNS_ = mmDNS;
  self->_topology_ = topology;
  self->_knownAddresses_ = JavaUtilCollections_synchronizedSetWithJavaUtilSet_(new_JavaUtilHashSet_init());
}

JavaxJmdnsImplJmmDNSImpl_NetworkChecker *new_JavaxJmdnsImplJmmDNSImpl_NetworkChecker_initWithJavaxJmdnsNetworkTopologyListener_withJavaxJmdnsNetworkTopologyDiscovery_(id<JavaxJmdnsNetworkTopologyListener> mmDNS, id<JavaxJmdnsNetworkTopologyDiscovery> topology) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplJmmDNSImpl_NetworkChecker, initWithJavaxJmdnsNetworkTopologyListener_withJavaxJmdnsNetworkTopologyDiscovery_, mmDNS, topology)
}

JavaxJmdnsImplJmmDNSImpl_NetworkChecker *create_JavaxJmdnsImplJmmDNSImpl_NetworkChecker_initWithJavaxJmdnsNetworkTopologyListener_withJavaxJmdnsNetworkTopologyDiscovery_(id<JavaxJmdnsNetworkTopologyListener> mmDNS, id<JavaxJmdnsNetworkTopologyDiscovery> topology) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplJmmDNSImpl_NetworkChecker, initWithJavaxJmdnsNetworkTopologyListener_withJavaxJmdnsNetworkTopologyDiscovery_, mmDNS, topology)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplJmmDNSImpl_NetworkChecker)
