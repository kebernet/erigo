//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/jmdns/impl/ListenerStatus.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/StringBuilder.h"
#include "java/util/EventListener.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/ConcurrentMap.h"
#include "java/util/logging/Logger.h"
#include "javax/jmdns/ServiceEvent.h"
#include "javax/jmdns/ServiceInfo.h"
#include "javax/jmdns/ServiceListener.h"
#include "javax/jmdns/ServiceTypeListener.h"
#include "javax/jmdns/impl/ListenerStatus.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface JavaxJmdnsImplListenerStatus () {
 @public
  id<JavaUtilEventListener> _listener_;
  jboolean _synch_;
}

@end

J2OBJC_FIELD_SETTER(JavaxJmdnsImplListenerStatus, _listener_, id<JavaUtilEventListener>)

@interface JavaxJmdnsImplListenerStatus_ServiceListenerStatus () {
 @public
  id<JavaUtilConcurrentConcurrentMap> _addedServices_;
}

+ (jboolean)_sameInfoWithJavaxJmdnsServiceInfo:(JavaxJmdnsServiceInfo *)info
                     withJavaxJmdnsServiceInfo:(JavaxJmdnsServiceInfo *)lastInfo;

@end

J2OBJC_FIELD_SETTER(JavaxJmdnsImplListenerStatus_ServiceListenerStatus, _addedServices_, id<JavaUtilConcurrentConcurrentMap>)

inline JavaUtilLoggingLogger *JavaxJmdnsImplListenerStatus_ServiceListenerStatus_get_logger();
inline JavaUtilLoggingLogger *JavaxJmdnsImplListenerStatus_ServiceListenerStatus_set_logger(JavaUtilLoggingLogger *value);
static JavaUtilLoggingLogger *JavaxJmdnsImplListenerStatus_ServiceListenerStatus_logger;
J2OBJC_STATIC_FIELD_OBJ(JavaxJmdnsImplListenerStatus_ServiceListenerStatus, logger, JavaUtilLoggingLogger *)

__attribute__((unused)) static jboolean JavaxJmdnsImplListenerStatus_ServiceListenerStatus__sameInfoWithJavaxJmdnsServiceInfo_withJavaxJmdnsServiceInfo_(JavaxJmdnsServiceInfo *info, JavaxJmdnsServiceInfo *lastInfo);

@interface JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus () {
 @public
  id<JavaUtilConcurrentConcurrentMap> _addedTypes_;
}

@end

J2OBJC_FIELD_SETTER(JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus, _addedTypes_, id<JavaUtilConcurrentConcurrentMap>)

inline JavaUtilLoggingLogger *JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus_get_logger();
inline JavaUtilLoggingLogger *JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus_set_logger(JavaUtilLoggingLogger *value);
static JavaUtilLoggingLogger *JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus_logger;
J2OBJC_STATIC_FIELD_OBJ(JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus, logger, JavaUtilLoggingLogger *)

@implementation JavaxJmdnsImplListenerStatus

- (instancetype)initWithJavaUtilEventListener:(id<JavaUtilEventListener>)listener
                                  withBoolean:(jboolean)synch {
  JavaxJmdnsImplListenerStatus_initWithJavaUtilEventListener_withBoolean_(self, listener, synch);
  return self;
}

- (id<JavaUtilEventListener>)getListener {
  return _listener_;
}

- (jboolean)isSynchronous {
  return _synch_;
}

- (NSUInteger)hash {
  return ((jint) [((id<JavaUtilEventListener>) nil_chk([self getListener])) hash]);
}

- (jboolean)isEqual:(id)obj {
  return ([obj isKindOfClass:[JavaxJmdnsImplListenerStatus class]]) && [((id<JavaUtilEventListener>) nil_chk([self getListener])) isEqual:[((JavaxJmdnsImplListenerStatus *) nil_chk(((JavaxJmdnsImplListenerStatus *) cast_chk(obj, [JavaxJmdnsImplListenerStatus class])))) getListener]];
}

- (NSString *)description {
  return JreStrcat("$$C", @"[Status for ", [((id<JavaUtilEventListener>) nil_chk([self getListener])) description], ']');
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LJavaUtilEventListener;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilEventListener:withBoolean:);
  methods[1].selector = @selector(getListener);
  methods[2].selector = @selector(isSynchronous);
  methods[3].selector = @selector(hash);
  methods[4].selector = @selector(isEqual:);
  methods[5].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SYNCHONEOUS", "Z", .constantValue.asBOOL = JavaxJmdnsImplListenerStatus_SYNCHONEOUS, 0x19, -1, -1, -1, -1 },
    { "ASYNCHONEOUS", "Z", .constantValue.asBOOL = JavaxJmdnsImplListenerStatus_ASYNCHONEOUS, 0x19, -1, -1, -1, -1 },
    { "_listener_", "LJavaUtilEventListener;", .constantValue.asLong = 0, 0x12, -1, -1, 7, -1 },
    { "_synch_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilEventListener;Z", "(TT;Z)V", "()TT;", "hashCode", "equals", "LNSObject;", "toString", "TT;", "LJavaxJmdnsImplListenerStatus_ServiceListenerStatus;LJavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus;", "<T::Ljava/util/EventListener;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplListenerStatus = { "ListenerStatus", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x1, 6, 4, -1, 8, -1, 9, -1 };
  return &_JavaxJmdnsImplListenerStatus;
}

@end

void JavaxJmdnsImplListenerStatus_initWithJavaUtilEventListener_withBoolean_(JavaxJmdnsImplListenerStatus *self, id<JavaUtilEventListener> listener, jboolean synch) {
  NSObject_init(self);
  self->_listener_ = listener;
  self->_synch_ = synch;
}

JavaxJmdnsImplListenerStatus *new_JavaxJmdnsImplListenerStatus_initWithJavaUtilEventListener_withBoolean_(id<JavaUtilEventListener> listener, jboolean synch) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplListenerStatus, initWithJavaUtilEventListener_withBoolean_, listener, synch)
}

JavaxJmdnsImplListenerStatus *create_JavaxJmdnsImplListenerStatus_initWithJavaUtilEventListener_withBoolean_(id<JavaUtilEventListener> listener, jboolean synch) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplListenerStatus, initWithJavaUtilEventListener_withBoolean_, listener, synch)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplListenerStatus)

J2OBJC_INITIALIZED_DEFN(JavaxJmdnsImplListenerStatus_ServiceListenerStatus)

@implementation JavaxJmdnsImplListenerStatus_ServiceListenerStatus

- (instancetype)initWithJavaxJmdnsServiceListener:(id<JavaxJmdnsServiceListener>)listener
                                      withBoolean:(jboolean)synch {
  JavaxJmdnsImplListenerStatus_ServiceListenerStatus_initWithJavaxJmdnsServiceListener_withBoolean_(self, listener, synch);
  return self;
}

- (void)serviceAddedWithJavaxJmdnsServiceEvent:(JavaxJmdnsServiceEvent *)event {
  NSString *qualifiedName = JreStrcat("$C$", [((JavaxJmdnsServiceEvent *) nil_chk(event)) getName], '.', [event getType]);
  if (nil == [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_addedServices_)) putIfAbsentWithId:qualifiedName withId:[((JavaxJmdnsServiceInfo *) nil_chk([event getInfo])) java_clone]]) {
    [((id<JavaxJmdnsServiceListener>) nil_chk([self getListener])) serviceAddedWithJavaxJmdnsServiceEvent:event];
    JavaxJmdnsServiceInfo *info = [event getInfo];
    if ((info != nil) && ([((JavaxJmdnsServiceInfo *) nil_chk(info)) hasData])) {
      [((id<JavaxJmdnsServiceListener>) nil_chk([self getListener])) serviceResolvedWithJavaxJmdnsServiceEvent:event];
    }
  }
  else {
    [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplListenerStatus_ServiceListenerStatus_logger)) finerWithNSString:JreStrcat("$@", @"Service Added called for a service already added: ", event)];
  }
}

- (void)serviceRemovedWithJavaxJmdnsServiceEvent:(JavaxJmdnsServiceEvent *)event {
  NSString *qualifiedName = JreStrcat("$C$", [((JavaxJmdnsServiceEvent *) nil_chk(event)) getName], '.', [event getType]);
  if ([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_addedServices_)) removeWithId:qualifiedName withId:[_addedServices_ getWithId:qualifiedName]]) {
    [((id<JavaxJmdnsServiceListener>) nil_chk([self getListener])) serviceRemovedWithJavaxJmdnsServiceEvent:event];
  }
  else {
    [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplListenerStatus_ServiceListenerStatus_logger)) finerWithNSString:JreStrcat("$@", @"Service Removed called for a service already removed: ", event)];
  }
}

- (void)serviceResolvedWithJavaxJmdnsServiceEvent:(JavaxJmdnsServiceEvent *)event {
  @synchronized(self) {
    JavaxJmdnsServiceInfo *info = [((JavaxJmdnsServiceEvent *) nil_chk(event)) getInfo];
    if ((info != nil) && ([((JavaxJmdnsServiceInfo *) nil_chk(info)) hasData])) {
      NSString *qualifiedName = JreStrcat("$C$", [event getName], '.', [event getType]);
      JavaxJmdnsServiceInfo *previousServiceInfo = [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_addedServices_)) getWithId:qualifiedName];
      if (!JavaxJmdnsImplListenerStatus_ServiceListenerStatus__sameInfoWithJavaxJmdnsServiceInfo_withJavaxJmdnsServiceInfo_(info, previousServiceInfo)) {
        if (nil == previousServiceInfo) {
          if (nil == [_addedServices_ putIfAbsentWithId:qualifiedName withId:[((JavaxJmdnsServiceInfo *) nil_chk(info)) java_clone]]) {
            [((id<JavaxJmdnsServiceListener>) nil_chk([self getListener])) serviceResolvedWithJavaxJmdnsServiceEvent:event];
          }
        }
        else {
          if ([_addedServices_ replaceWithId:qualifiedName withId:previousServiceInfo withId:[((JavaxJmdnsServiceInfo *) nil_chk(info)) java_clone]]) {
            [((id<JavaxJmdnsServiceListener>) nil_chk([self getListener])) serviceResolvedWithJavaxJmdnsServiceEvent:event];
          }
        }
      }
      else {
        [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplListenerStatus_ServiceListenerStatus_logger)) finerWithNSString:JreStrcat("$@", @"Service Resolved called for a service already resolved: ", event)];
      }
    }
    else {
      [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplListenerStatus_ServiceListenerStatus_logger)) warningWithNSString:JreStrcat("$@", @"Service Resolved called for an unresolved event: ", event)];
    }
  }
}

+ (jboolean)_sameInfoWithJavaxJmdnsServiceInfo:(JavaxJmdnsServiceInfo *)info
                     withJavaxJmdnsServiceInfo:(JavaxJmdnsServiceInfo *)lastInfo {
  return JavaxJmdnsImplListenerStatus_ServiceListenerStatus__sameInfoWithJavaxJmdnsServiceInfo_withJavaxJmdnsServiceInfo_(info, lastInfo);
}

- (NSString *)description {
  JavaLangStringBuilder *aLog = new_JavaLangStringBuilder_initWithInt_(2048);
  (void) [aLog appendWithNSString:@"[Status for "];
  (void) [aLog appendWithNSString:[((id<JavaxJmdnsServiceListener>) nil_chk([self getListener])) description]];
  if ([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_addedServices_)) isEmpty]) {
    (void) [aLog appendWithNSString:@" no type event "];
  }
  else {
    (void) [aLog appendWithNSString:@" ("];
    for (NSString * __strong service in nil_chk([_addedServices_ keySet])) {
      (void) [aLog appendWithNSString:JreStrcat("$$", service, @", ")];
    }
    (void) [aLog appendWithNSString:@") "];
  }
  (void) [aLog appendWithNSString:@"]"];
  return [aLog description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x20, 4, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1a, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaxJmdnsServiceListener:withBoolean:);
  methods[1].selector = @selector(serviceAddedWithJavaxJmdnsServiceEvent:);
  methods[2].selector = @selector(serviceRemovedWithJavaxJmdnsServiceEvent:);
  methods[3].selector = @selector(serviceResolvedWithJavaxJmdnsServiceEvent:);
  methods[4].selector = @selector(_sameInfoWithJavaxJmdnsServiceInfo:withJavaxJmdnsServiceInfo:);
  methods[5].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0xa, -1, 8, -1, -1 },
    { "_addedServices_", "LJavaUtilConcurrentConcurrentMap;", .constantValue.asLong = 0, 0x12, -1, -1, 9, -1 },
  };
  static const void *ptrTable[] = { "LJavaxJmdnsServiceListener;Z", "serviceAdded", "LJavaxJmdnsServiceEvent;", "serviceRemoved", "serviceResolved", "_sameInfo", "LJavaxJmdnsServiceInfo;LJavaxJmdnsServiceInfo;", "toString", &JavaxJmdnsImplListenerStatus_ServiceListenerStatus_logger, "Ljava/util/concurrent/ConcurrentMap<Ljava/lang/String;Ljavax/jmdns/ServiceInfo;>;", "LJavaxJmdnsImplListenerStatus;", "Ljavax/jmdns/impl/ListenerStatus<Ljavax/jmdns/ServiceListener;>;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplListenerStatus_ServiceListenerStatus = { "ServiceListenerStatus", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x9, 6, 2, 10, -1, -1, 11, -1 };
  return &_JavaxJmdnsImplListenerStatus_ServiceListenerStatus;
}

+ (void)initialize {
  if (self == [JavaxJmdnsImplListenerStatus_ServiceListenerStatus class]) {
    JavaxJmdnsImplListenerStatus_ServiceListenerStatus_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([JavaxJmdnsImplListenerStatus_ServiceListenerStatus_class_() getName]);
    J2OBJC_SET_INITIALIZED(JavaxJmdnsImplListenerStatus_ServiceListenerStatus)
  }
}

@end

void JavaxJmdnsImplListenerStatus_ServiceListenerStatus_initWithJavaxJmdnsServiceListener_withBoolean_(JavaxJmdnsImplListenerStatus_ServiceListenerStatus *self, id<JavaxJmdnsServiceListener> listener, jboolean synch) {
  JavaxJmdnsImplListenerStatus_initWithJavaUtilEventListener_withBoolean_(self, listener, synch);
  self->_addedServices_ = new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(32);
}

JavaxJmdnsImplListenerStatus_ServiceListenerStatus *new_JavaxJmdnsImplListenerStatus_ServiceListenerStatus_initWithJavaxJmdnsServiceListener_withBoolean_(id<JavaxJmdnsServiceListener> listener, jboolean synch) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplListenerStatus_ServiceListenerStatus, initWithJavaxJmdnsServiceListener_withBoolean_, listener, synch)
}

JavaxJmdnsImplListenerStatus_ServiceListenerStatus *create_JavaxJmdnsImplListenerStatus_ServiceListenerStatus_initWithJavaxJmdnsServiceListener_withBoolean_(id<JavaxJmdnsServiceListener> listener, jboolean synch) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplListenerStatus_ServiceListenerStatus, initWithJavaxJmdnsServiceListener_withBoolean_, listener, synch)
}

jboolean JavaxJmdnsImplListenerStatus_ServiceListenerStatus__sameInfoWithJavaxJmdnsServiceInfo_withJavaxJmdnsServiceInfo_(JavaxJmdnsServiceInfo *info, JavaxJmdnsServiceInfo *lastInfo) {
  JavaxJmdnsImplListenerStatus_ServiceListenerStatus_initialize();
  if (info == nil) return false;
  if (lastInfo == nil) return false;
  if (![info isEqual:lastInfo]) return false;
  IOSByteArray *text = [info getTextBytes];
  IOSByteArray *lastText = [lastInfo getTextBytes];
  if (((IOSByteArray *) nil_chk(text))->size_ != ((IOSByteArray *) nil_chk(lastText))->size_) return false;
  for (jint i = 0; i < text->size_; i++) {
    if (IOSByteArray_Get(text, i) != IOSByteArray_Get(lastText, i)) return false;
  }
  return true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplListenerStatus_ServiceListenerStatus)

J2OBJC_INITIALIZED_DEFN(JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus)

@implementation JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus

- (instancetype)initWithJavaxJmdnsServiceTypeListener:(id<JavaxJmdnsServiceTypeListener>)listener
                                          withBoolean:(jboolean)synch {
  JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus_initWithJavaxJmdnsServiceTypeListener_withBoolean_(self, listener, synch);
  return self;
}

- (void)serviceTypeAddedWithJavaxJmdnsServiceEvent:(JavaxJmdnsServiceEvent *)event {
  if (nil == [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_addedTypes_)) putIfAbsentWithId:[((JavaxJmdnsServiceEvent *) nil_chk(event)) getType] withId:[event getType]]) {
    [((id<JavaxJmdnsServiceTypeListener>) nil_chk([self getListener])) serviceTypeAddedWithJavaxJmdnsServiceEvent:event];
  }
  else {
    [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus_logger)) finestWithNSString:JreStrcat("$@", @"Service Type Added called for a service type already added: ", event)];
  }
}

- (void)subTypeForServiceTypeAddedWithJavaxJmdnsServiceEvent:(JavaxJmdnsServiceEvent *)event {
  if (nil == [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_addedTypes_)) putIfAbsentWithId:[((JavaxJmdnsServiceEvent *) nil_chk(event)) getType] withId:[event getType]]) {
    [((id<JavaxJmdnsServiceTypeListener>) nil_chk([self getListener])) subTypeForServiceTypeAddedWithJavaxJmdnsServiceEvent:event];
  }
  else {
    [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus_logger)) finestWithNSString:JreStrcat("$@", @"Service Sub Type Added called for a service sub type already added: ", event)];
  }
}

- (NSString *)description {
  JavaLangStringBuilder *aLog = new_JavaLangStringBuilder_initWithInt_(2048);
  (void) [aLog appendWithNSString:@"[Status for "];
  (void) [aLog appendWithNSString:[((id<JavaxJmdnsServiceTypeListener>) nil_chk([self getListener])) description]];
  if ([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(_addedTypes_)) isEmpty]) {
    (void) [aLog appendWithNSString:@" no type event "];
  }
  else {
    (void) [aLog appendWithNSString:@" ("];
    for (NSString * __strong type in nil_chk([_addedTypes_ keySet])) {
      (void) [aLog appendWithNSString:JreStrcat("$$", type, @", ")];
    }
    (void) [aLog appendWithNSString:@") "];
  }
  (void) [aLog appendWithNSString:@"]"];
  return [aLog description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaxJmdnsServiceTypeListener:withBoolean:);
  methods[1].selector = @selector(serviceTypeAddedWithJavaxJmdnsServiceEvent:);
  methods[2].selector = @selector(subTypeForServiceTypeAddedWithJavaxJmdnsServiceEvent:);
  methods[3].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0xa, -1, 5, -1, -1 },
    { "_addedTypes_", "LJavaUtilConcurrentConcurrentMap;", .constantValue.asLong = 0, 0x12, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LJavaxJmdnsServiceTypeListener;Z", "serviceTypeAdded", "LJavaxJmdnsServiceEvent;", "subTypeForServiceTypeAdded", "toString", &JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus_logger, "Ljava/util/concurrent/ConcurrentMap<Ljava/lang/String;Ljava/lang/String;>;", "LJavaxJmdnsImplListenerStatus;", "Ljavax/jmdns/impl/ListenerStatus<Ljavax/jmdns/ServiceTypeListener;>;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus = { "ServiceTypeListenerStatus", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x9, 4, 2, 7, -1, -1, 8, -1 };
  return &_JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus;
}

+ (void)initialize {
  if (self == [JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus class]) {
    JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus_class_() getName]);
    J2OBJC_SET_INITIALIZED(JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus)
  }
}

@end

void JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus_initWithJavaxJmdnsServiceTypeListener_withBoolean_(JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus *self, id<JavaxJmdnsServiceTypeListener> listener, jboolean synch) {
  JavaxJmdnsImplListenerStatus_initWithJavaUtilEventListener_withBoolean_(self, listener, synch);
  self->_addedTypes_ = new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(32);
}

JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus *new_JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus_initWithJavaxJmdnsServiceTypeListener_withBoolean_(id<JavaxJmdnsServiceTypeListener> listener, jboolean synch) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus, initWithJavaxJmdnsServiceTypeListener_withBoolean_, listener, synch)
}

JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus *create_JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus_initWithJavaxJmdnsServiceTypeListener_withBoolean_(id<JavaxJmdnsServiceTypeListener> listener, jboolean synch) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus, initWithJavaxJmdnsServiceTypeListener_withBoolean_, listener, synch)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplListenerStatus_ServiceTypeListenerStatus)
