//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/jmdns/impl/NameRegister.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxJmdnsImplNameRegister")
#ifdef RESTRICT_JavaxJmdnsImplNameRegister
#define INCLUDE_ALL_JavaxJmdnsImplNameRegister 0
#else
#define INCLUDE_ALL_JavaxJmdnsImplNameRegister 1
#endif
#undef RESTRICT_JavaxJmdnsImplNameRegister
#ifdef INCLUDE_JavaxJmdnsImplNameRegister_UniqueNameAcrossInterface
#define INCLUDE_JavaxJmdnsImplNameRegister 1
#endif
#ifdef INCLUDE_JavaxJmdnsImplNameRegister_UniqueNamePerInterface
#define INCLUDE_JavaxJmdnsImplNameRegister 1
#endif

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (JavaxJmdnsImplNameRegister_) && (INCLUDE_ALL_JavaxJmdnsImplNameRegister || defined(INCLUDE_JavaxJmdnsImplNameRegister))
#define JavaxJmdnsImplNameRegister_

@class JavaNetInetAddress;
@class JavaxJmdnsImplNameRegister_NameType;

@protocol JavaxJmdnsImplNameRegister < JavaObject >

- (void)register__WithJavaNetInetAddress:(JavaNetInetAddress *)networkInterface
                            withNSString:(NSString *)name
 withJavaxJmdnsImplNameRegister_NameType:(JavaxJmdnsImplNameRegister_NameType *)type;

- (jboolean)checkNameWithJavaNetInetAddress:(JavaNetInetAddress *)networkInterface
                               withNSString:(NSString *)name
    withJavaxJmdnsImplNameRegister_NameType:(JavaxJmdnsImplNameRegister_NameType *)type;

- (NSString *)incrementHostNameWithJavaNetInetAddress:(JavaNetInetAddress *)networkInterface
                                         withNSString:(NSString *)name
              withJavaxJmdnsImplNameRegister_NameType:(JavaxJmdnsImplNameRegister_NameType *)type;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxJmdnsImplNameRegister)

J2OBJC_TYPE_LITERAL_HEADER(JavaxJmdnsImplNameRegister)

#endif

#if !defined (JavaxJmdnsImplNameRegister_NameType_) && (INCLUDE_ALL_JavaxJmdnsImplNameRegister || defined(INCLUDE_JavaxJmdnsImplNameRegister_NameType))
#define JavaxJmdnsImplNameRegister_NameType_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, JavaxJmdnsImplNameRegister_NameType_Enum) {
  JavaxJmdnsImplNameRegister_NameType_Enum_HOST = 0,
  JavaxJmdnsImplNameRegister_NameType_Enum_SERVICE = 1,
};

@interface JavaxJmdnsImplNameRegister_NameType : JavaLangEnum < NSCopying >

#pragma mark Public

+ (JavaxJmdnsImplNameRegister_NameType *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(JavaxJmdnsImplNameRegister_NameType)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT JavaxJmdnsImplNameRegister_NameType *JavaxJmdnsImplNameRegister_NameType_values_[];

inline JavaxJmdnsImplNameRegister_NameType *JavaxJmdnsImplNameRegister_NameType_get_HOST();
J2OBJC_ENUM_CONSTANT(JavaxJmdnsImplNameRegister_NameType, HOST)

inline JavaxJmdnsImplNameRegister_NameType *JavaxJmdnsImplNameRegister_NameType_get_SERVICE();
J2OBJC_ENUM_CONSTANT(JavaxJmdnsImplNameRegister_NameType, SERVICE)

FOUNDATION_EXPORT IOSObjectArray *JavaxJmdnsImplNameRegister_NameType_values();

FOUNDATION_EXPORT JavaxJmdnsImplNameRegister_NameType *JavaxJmdnsImplNameRegister_NameType_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT JavaxJmdnsImplNameRegister_NameType *JavaxJmdnsImplNameRegister_NameType_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(JavaxJmdnsImplNameRegister_NameType)

#endif

#if !defined (JavaxJmdnsImplNameRegister_UniqueNamePerInterface_) && (INCLUDE_ALL_JavaxJmdnsImplNameRegister || defined(INCLUDE_JavaxJmdnsImplNameRegister_UniqueNamePerInterface))
#define JavaxJmdnsImplNameRegister_UniqueNamePerInterface_

@class JavaNetInetAddress;
@class JavaxJmdnsImplNameRegister_NameType;

@interface JavaxJmdnsImplNameRegister_UniqueNamePerInterface : NSObject < JavaxJmdnsImplNameRegister >

#pragma mark Public

- (instancetype)init;

- (jboolean)checkNameWithJavaNetInetAddress:(JavaNetInetAddress *)networkInterface
                               withNSString:(NSString *)name
    withJavaxJmdnsImplNameRegister_NameType:(JavaxJmdnsImplNameRegister_NameType *)type;

- (NSString *)incrementHostNameWithJavaNetInetAddress:(JavaNetInetAddress *)networkInterface
                                         withNSString:(NSString *)name
              withJavaxJmdnsImplNameRegister_NameType:(JavaxJmdnsImplNameRegister_NameType *)type;

- (void)register__WithJavaNetInetAddress:(JavaNetInetAddress *)networkInterface
                            withNSString:(NSString *)name
 withJavaxJmdnsImplNameRegister_NameType:(JavaxJmdnsImplNameRegister_NameType *)type;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxJmdnsImplNameRegister_UniqueNamePerInterface)

FOUNDATION_EXPORT void JavaxJmdnsImplNameRegister_UniqueNamePerInterface_init(JavaxJmdnsImplNameRegister_UniqueNamePerInterface *self);

FOUNDATION_EXPORT JavaxJmdnsImplNameRegister_UniqueNamePerInterface *new_JavaxJmdnsImplNameRegister_UniqueNamePerInterface_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxJmdnsImplNameRegister_UniqueNamePerInterface *create_JavaxJmdnsImplNameRegister_UniqueNamePerInterface_init();

J2OBJC_TYPE_LITERAL_HEADER(JavaxJmdnsImplNameRegister_UniqueNamePerInterface)

#endif

#if !defined (JavaxJmdnsImplNameRegister_UniqueNameAcrossInterface_) && (INCLUDE_ALL_JavaxJmdnsImplNameRegister || defined(INCLUDE_JavaxJmdnsImplNameRegister_UniqueNameAcrossInterface))
#define JavaxJmdnsImplNameRegister_UniqueNameAcrossInterface_

@class JavaNetInetAddress;
@class JavaxJmdnsImplNameRegister_NameType;

@interface JavaxJmdnsImplNameRegister_UniqueNameAcrossInterface : NSObject < JavaxJmdnsImplNameRegister >

#pragma mark Public

- (instancetype)init;

- (jboolean)checkNameWithJavaNetInetAddress:(JavaNetInetAddress *)networkInterface
                               withNSString:(NSString *)name
    withJavaxJmdnsImplNameRegister_NameType:(JavaxJmdnsImplNameRegister_NameType *)type;

- (NSString *)incrementHostNameWithJavaNetInetAddress:(JavaNetInetAddress *)networkInterface
                                         withNSString:(NSString *)name
              withJavaxJmdnsImplNameRegister_NameType:(JavaxJmdnsImplNameRegister_NameType *)type;

- (void)register__WithJavaNetInetAddress:(JavaNetInetAddress *)networkInterface
                            withNSString:(NSString *)name
 withJavaxJmdnsImplNameRegister_NameType:(JavaxJmdnsImplNameRegister_NameType *)type;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxJmdnsImplNameRegister_UniqueNameAcrossInterface)

FOUNDATION_EXPORT void JavaxJmdnsImplNameRegister_UniqueNameAcrossInterface_init(JavaxJmdnsImplNameRegister_UniqueNameAcrossInterface *self);

FOUNDATION_EXPORT JavaxJmdnsImplNameRegister_UniqueNameAcrossInterface *new_JavaxJmdnsImplNameRegister_UniqueNameAcrossInterface_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxJmdnsImplNameRegister_UniqueNameAcrossInterface *create_JavaxJmdnsImplNameRegister_UniqueNameAcrossInterface_init();

J2OBJC_TYPE_LITERAL_HEADER(JavaxJmdnsImplNameRegister_UniqueNameAcrossInterface)

#endif

#if !defined (JavaxJmdnsImplNameRegister_Factory_) && (INCLUDE_ALL_JavaxJmdnsImplNameRegister || defined(INCLUDE_JavaxJmdnsImplNameRegister_Factory))
#define JavaxJmdnsImplNameRegister_Factory_

@protocol JavaxJmdnsImplNameRegister;

@interface JavaxJmdnsImplNameRegister_Factory : NSObject

#pragma mark Public

- (instancetype)init;

+ (id<JavaxJmdnsImplNameRegister>)getRegistry;

+ (void)setRegistryWithJavaxJmdnsImplNameRegister:(id<JavaxJmdnsImplNameRegister>)register_;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxJmdnsImplNameRegister_Factory)

FOUNDATION_EXPORT void JavaxJmdnsImplNameRegister_Factory_init(JavaxJmdnsImplNameRegister_Factory *self);

FOUNDATION_EXPORT JavaxJmdnsImplNameRegister_Factory *new_JavaxJmdnsImplNameRegister_Factory_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxJmdnsImplNameRegister_Factory *create_JavaxJmdnsImplNameRegister_Factory_init();

FOUNDATION_EXPORT void JavaxJmdnsImplNameRegister_Factory_setRegistryWithJavaxJmdnsImplNameRegister_(id<JavaxJmdnsImplNameRegister> register_);

FOUNDATION_EXPORT id<JavaxJmdnsImplNameRegister> JavaxJmdnsImplNameRegister_Factory_getRegistry();

J2OBJC_TYPE_LITERAL_HEADER(JavaxJmdnsImplNameRegister_Factory)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JavaxJmdnsImplNameRegister")
