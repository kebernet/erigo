//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/jmdns/impl/NameRegister.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/net/InetAddress.h"
#include "javax/jmdns/impl/NameRegister.h"

@interface JavaxJmdnsImplNameRegister : NSObject

@end

__attribute__((unused)) static void JavaxJmdnsImplNameRegister_NameType_initWithNSString_withInt_(JavaxJmdnsImplNameRegister_NameType *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static JavaxJmdnsImplNameRegister_NameType *new_JavaxJmdnsImplNameRegister_NameType_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

inline id<JavaxJmdnsImplNameRegister> JavaxJmdnsImplNameRegister_Factory_get__register();
inline id<JavaxJmdnsImplNameRegister> JavaxJmdnsImplNameRegister_Factory_set__register(id<JavaxJmdnsImplNameRegister> value);
static volatile_id JavaxJmdnsImplNameRegister_Factory__register;
J2OBJC_STATIC_FIELD_OBJ_VOLATILE(JavaxJmdnsImplNameRegister_Factory, _register, id<JavaxJmdnsImplNameRegister>)

@implementation JavaxJmdnsImplNameRegister

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 2, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, 3, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(register__WithJavaNetInetAddress:withNSString:withJavaxJmdnsImplNameRegister_NameType:);
  methods[1].selector = @selector(checkNameWithJavaNetInetAddress:withNSString:withJavaxJmdnsImplNameRegister_NameType:);
  methods[2].selector = @selector(incrementHostNameWithJavaNetInetAddress:withNSString:withJavaxJmdnsImplNameRegister_NameType:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "register", "LJavaNetInetAddress;LNSString;LJavaxJmdnsImplNameRegister_NameType;", "checkName", "incrementHostName", "LJavaxJmdnsImplNameRegister_NameType;LJavaxJmdnsImplNameRegister_UniqueNamePerInterface;LJavaxJmdnsImplNameRegister_UniqueNameAcrossInterface;LJavaxJmdnsImplNameRegister_Factory;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplNameRegister = { "NameRegister", "javax.jmdns.impl", ptrTable, methods, NULL, 7, 0x609, 3, 0, -1, 4, -1, -1, -1 };
  return &_JavaxJmdnsImplNameRegister;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxJmdnsImplNameRegister)

J2OBJC_INITIALIZED_DEFN(JavaxJmdnsImplNameRegister_NameType)

JavaxJmdnsImplNameRegister_NameType *JavaxJmdnsImplNameRegister_NameType_values_[2];

@implementation JavaxJmdnsImplNameRegister_NameType

+ (IOSObjectArray *)values {
  return JavaxJmdnsImplNameRegister_NameType_values();
}

+ (JavaxJmdnsImplNameRegister_NameType *)valueOfWithNSString:(NSString *)name {
  return JavaxJmdnsImplNameRegister_NameType_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LJavaxJmdnsImplNameRegister_NameType;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplNameRegister_NameType;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "HOST", "LJavaxJmdnsImplNameRegister_NameType;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "SERVICE", "LJavaxJmdnsImplNameRegister_NameType;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(JavaxJmdnsImplNameRegister_NameType, HOST), &JreEnum(JavaxJmdnsImplNameRegister_NameType, SERVICE), "LJavaxJmdnsImplNameRegister;", "Ljava/lang/Enum<Ljavax/jmdns/impl/NameRegister$NameType;>;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplNameRegister_NameType = { "NameType", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x4019, 2, 2, 4, -1, -1, 5, -1 };
  return &_JavaxJmdnsImplNameRegister_NameType;
}

+ (void)initialize {
  if (self == [JavaxJmdnsImplNameRegister_NameType class]) {
    JreEnum(JavaxJmdnsImplNameRegister_NameType, HOST) = new_JavaxJmdnsImplNameRegister_NameType_initWithNSString_withInt_(@"HOST", 0);
    JreEnum(JavaxJmdnsImplNameRegister_NameType, SERVICE) = new_JavaxJmdnsImplNameRegister_NameType_initWithNSString_withInt_(@"SERVICE", 1);
    J2OBJC_SET_INITIALIZED(JavaxJmdnsImplNameRegister_NameType)
  }
}

@end

void JavaxJmdnsImplNameRegister_NameType_initWithNSString_withInt_(JavaxJmdnsImplNameRegister_NameType *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

JavaxJmdnsImplNameRegister_NameType *new_JavaxJmdnsImplNameRegister_NameType_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplNameRegister_NameType, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *JavaxJmdnsImplNameRegister_NameType_values() {
  JavaxJmdnsImplNameRegister_NameType_initialize();
  return [IOSObjectArray arrayWithObjects:JavaxJmdnsImplNameRegister_NameType_values_ count:2 type:JavaxJmdnsImplNameRegister_NameType_class_()];
}

JavaxJmdnsImplNameRegister_NameType *JavaxJmdnsImplNameRegister_NameType_valueOfWithNSString_(NSString *name) {
  JavaxJmdnsImplNameRegister_NameType_initialize();
  for (int i = 0; i < 2; i++) {
    JavaxJmdnsImplNameRegister_NameType *e = JavaxJmdnsImplNameRegister_NameType_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

JavaxJmdnsImplNameRegister_NameType *JavaxJmdnsImplNameRegister_NameType_fromOrdinal(NSUInteger ordinal) {
  JavaxJmdnsImplNameRegister_NameType_initialize();
  if (ordinal >= 2) {
    return nil;
  }
  return JavaxJmdnsImplNameRegister_NameType_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplNameRegister_NameType)

@implementation JavaxJmdnsImplNameRegister_UniqueNamePerInterface

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  JavaxJmdnsImplNameRegister_UniqueNamePerInterface_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)register__WithJavaNetInetAddress:(JavaNetInetAddress *)networkInterface
                            withNSString:(NSString *)name
 withJavaxJmdnsImplNameRegister_NameType:(JavaxJmdnsImplNameRegister_NameType *)type {
}

- (jboolean)checkNameWithJavaNetInetAddress:(JavaNetInetAddress *)networkInterface
                               withNSString:(NSString *)name
    withJavaxJmdnsImplNameRegister_NameType:(JavaxJmdnsImplNameRegister_NameType *)type {
  return false;
}

- (NSString *)incrementHostNameWithJavaNetInetAddress:(JavaNetInetAddress *)networkInterface
                                         withNSString:(NSString *)name
              withJavaxJmdnsImplNameRegister_NameType:(JavaxJmdnsImplNameRegister_NameType *)type {
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(register__WithJavaNetInetAddress:withNSString:withJavaxJmdnsImplNameRegister_NameType:);
  methods[2].selector = @selector(checkNameWithJavaNetInetAddress:withNSString:withJavaxJmdnsImplNameRegister_NameType:);
  methods[3].selector = @selector(incrementHostNameWithJavaNetInetAddress:withNSString:withJavaxJmdnsImplNameRegister_NameType:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "register", "LJavaNetInetAddress;LNSString;LJavaxJmdnsImplNameRegister_NameType;", "checkName", "incrementHostName", "LJavaxJmdnsImplNameRegister;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplNameRegister_UniqueNamePerInterface = { "UniqueNamePerInterface", "javax.jmdns.impl", ptrTable, methods, NULL, 7, 0x9, 4, 0, 4, -1, -1, -1, -1 };
  return &_JavaxJmdnsImplNameRegister_UniqueNamePerInterface;
}

@end

void JavaxJmdnsImplNameRegister_UniqueNamePerInterface_init(JavaxJmdnsImplNameRegister_UniqueNamePerInterface *self) {
  NSObject_init(self);
}

JavaxJmdnsImplNameRegister_UniqueNamePerInterface *new_JavaxJmdnsImplNameRegister_UniqueNamePerInterface_init() {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplNameRegister_UniqueNamePerInterface, init)
}

JavaxJmdnsImplNameRegister_UniqueNamePerInterface *create_JavaxJmdnsImplNameRegister_UniqueNamePerInterface_init() {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplNameRegister_UniqueNamePerInterface, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplNameRegister_UniqueNamePerInterface)

@implementation JavaxJmdnsImplNameRegister_UniqueNameAcrossInterface

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  JavaxJmdnsImplNameRegister_UniqueNameAcrossInterface_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)register__WithJavaNetInetAddress:(JavaNetInetAddress *)networkInterface
                            withNSString:(NSString *)name
 withJavaxJmdnsImplNameRegister_NameType:(JavaxJmdnsImplNameRegister_NameType *)type {
}

- (jboolean)checkNameWithJavaNetInetAddress:(JavaNetInetAddress *)networkInterface
                               withNSString:(NSString *)name
    withJavaxJmdnsImplNameRegister_NameType:(JavaxJmdnsImplNameRegister_NameType *)type {
  return false;
}

- (NSString *)incrementHostNameWithJavaNetInetAddress:(JavaNetInetAddress *)networkInterface
                                         withNSString:(NSString *)name
              withJavaxJmdnsImplNameRegister_NameType:(JavaxJmdnsImplNameRegister_NameType *)type {
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(register__WithJavaNetInetAddress:withNSString:withJavaxJmdnsImplNameRegister_NameType:);
  methods[2].selector = @selector(checkNameWithJavaNetInetAddress:withNSString:withJavaxJmdnsImplNameRegister_NameType:);
  methods[3].selector = @selector(incrementHostNameWithJavaNetInetAddress:withNSString:withJavaxJmdnsImplNameRegister_NameType:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "register", "LJavaNetInetAddress;LNSString;LJavaxJmdnsImplNameRegister_NameType;", "checkName", "incrementHostName", "LJavaxJmdnsImplNameRegister;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplNameRegister_UniqueNameAcrossInterface = { "UniqueNameAcrossInterface", "javax.jmdns.impl", ptrTable, methods, NULL, 7, 0x9, 4, 0, 4, -1, -1, -1, -1 };
  return &_JavaxJmdnsImplNameRegister_UniqueNameAcrossInterface;
}

@end

void JavaxJmdnsImplNameRegister_UniqueNameAcrossInterface_init(JavaxJmdnsImplNameRegister_UniqueNameAcrossInterface *self) {
  NSObject_init(self);
}

JavaxJmdnsImplNameRegister_UniqueNameAcrossInterface *new_JavaxJmdnsImplNameRegister_UniqueNameAcrossInterface_init() {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplNameRegister_UniqueNameAcrossInterface, init)
}

JavaxJmdnsImplNameRegister_UniqueNameAcrossInterface *create_JavaxJmdnsImplNameRegister_UniqueNameAcrossInterface_init() {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplNameRegister_UniqueNameAcrossInterface, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplNameRegister_UniqueNameAcrossInterface)

@implementation JavaxJmdnsImplNameRegister_Factory

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  JavaxJmdnsImplNameRegister_Factory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)setRegistryWithJavaxJmdnsImplNameRegister:(id<JavaxJmdnsImplNameRegister>)register_ {
  JavaxJmdnsImplNameRegister_Factory_setRegistryWithJavaxJmdnsImplNameRegister_(register_);
}

+ (id<JavaxJmdnsImplNameRegister>)getRegistry {
  return JavaxJmdnsImplNameRegister_Factory_getRegistry();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplNameRegister;", 0x9, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setRegistryWithJavaxJmdnsImplNameRegister:);
  methods[2].selector = @selector(getRegistry);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_register", "LJavaxJmdnsImplNameRegister;", .constantValue.asLong = 0, 0x4a, -1, 3, -1, -1 },
  };
  static const void *ptrTable[] = { "setRegistry", "LJavaxJmdnsImplNameRegister;", "LJavaLangIllegalStateException;", &JavaxJmdnsImplNameRegister_Factory__register };
  static const J2ObjcClassInfo _JavaxJmdnsImplNameRegister_Factory = { "Factory", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x9, 3, 1, 1, -1, -1, -1, -1 };
  return &_JavaxJmdnsImplNameRegister_Factory;
}

@end

void JavaxJmdnsImplNameRegister_Factory_init(JavaxJmdnsImplNameRegister_Factory *self) {
  NSObject_init(self);
}

JavaxJmdnsImplNameRegister_Factory *new_JavaxJmdnsImplNameRegister_Factory_init() {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplNameRegister_Factory, init)
}

JavaxJmdnsImplNameRegister_Factory *create_JavaxJmdnsImplNameRegister_Factory_init() {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplNameRegister_Factory, init)
}

void JavaxJmdnsImplNameRegister_Factory_setRegistryWithJavaxJmdnsImplNameRegister_(id<JavaxJmdnsImplNameRegister> register_) {
  JavaxJmdnsImplNameRegister_Factory_initialize();
  if (JreLoadVolatileId(&JavaxJmdnsImplNameRegister_Factory__register) != nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"The register can only be set once.");
  }
  if (register_ != nil) {
    (void) JreVolatileStrongAssign(&JavaxJmdnsImplNameRegister_Factory__register, register_);
  }
}

id<JavaxJmdnsImplNameRegister> JavaxJmdnsImplNameRegister_Factory_getRegistry() {
  JavaxJmdnsImplNameRegister_Factory_initialize();
  if (JreLoadVolatileId(&JavaxJmdnsImplNameRegister_Factory__register) == nil) {
    (void) JreVolatileStrongAssign(&JavaxJmdnsImplNameRegister_Factory__register, new_JavaxJmdnsImplNameRegister_UniqueNamePerInterface_init());
  }
  return JreLoadVolatileId(&JavaxJmdnsImplNameRegister_Factory__register);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplNameRegister_Factory)
