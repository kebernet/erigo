//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/jmdns/impl/NetworkTopologyDiscoveryImpl.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/reflect/Method.h"
#include "java/net/InetAddress.h"
#include "java/net/NetworkInterface.h"
#include "java/net/SocketException.h"
#include "java/util/Enumeration.h"
#include "java/util/HashSet.h"
#include "java/util/Set.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "javax/jmdns/impl/NetworkTopologyDiscoveryImpl.h"

@interface JavaxJmdnsImplNetworkTopologyDiscoveryImpl () {
 @public
  JavaLangReflectMethod *_isUp_;
  JavaLangReflectMethod *_supportsMulticast_;
}

@end

J2OBJC_FIELD_SETTER(JavaxJmdnsImplNetworkTopologyDiscoveryImpl, _isUp_, JavaLangReflectMethod *)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplNetworkTopologyDiscoveryImpl, _supportsMulticast_, JavaLangReflectMethod *)

inline JavaUtilLoggingLogger *JavaxJmdnsImplNetworkTopologyDiscoveryImpl_get_logger();
static JavaUtilLoggingLogger *JavaxJmdnsImplNetworkTopologyDiscoveryImpl_logger;
J2OBJC_STATIC_FIELD_OBJ_FINAL(JavaxJmdnsImplNetworkTopologyDiscoveryImpl, logger, JavaUtilLoggingLogger *)

J2OBJC_INITIALIZED_DEFN(JavaxJmdnsImplNetworkTopologyDiscoveryImpl)

@implementation JavaxJmdnsImplNetworkTopologyDiscoveryImpl

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  JavaxJmdnsImplNetworkTopologyDiscoveryImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (IOSObjectArray *)getInetAddresses {
  id<JavaUtilSet> result = new_JavaUtilHashSet_init();
  @try {
    for (id<JavaUtilEnumeration> nifs = JavaNetNetworkInterface_getNetworkInterfaces(); [((id<JavaUtilEnumeration>) nil_chk(nifs)) hasMoreElements]; ) {
      JavaNetNetworkInterface *nif = [nifs nextElement];
      for (id<JavaUtilEnumeration> iaenum = [((JavaNetNetworkInterface *) nil_chk(nif)) getInetAddresses]; [((id<JavaUtilEnumeration>) nil_chk(iaenum)) hasMoreElements]; ) {
        JavaNetInetAddress *interfaceAddress = [iaenum nextElement];
        if ([((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplNetworkTopologyDiscoveryImpl_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINEST)]) {
          [JavaxJmdnsImplNetworkTopologyDiscoveryImpl_logger finestWithNSString:JreStrcat("$@$@", @"Found NetworkInterface/InetAddress: ", nif, @" -- ", interfaceAddress)];
        }
        if ([self useInetAddressWithJavaNetNetworkInterface:nif withJavaNetInetAddress:interfaceAddress]) {
          [result addWithId:interfaceAddress];
        }
      }
    }
  }
  @catch (JavaNetSocketException *se) {
    [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplNetworkTopologyDiscoveryImpl_logger)) warningWithNSString:JreStrcat("$@", @"Error while fetching network interfaces addresses: ", se)];
  }
  return [result toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[result size] type:JavaNetInetAddress_class_()]];
}

- (jboolean)useInetAddressWithJavaNetNetworkInterface:(JavaNetNetworkInterface *)networkInterface
                               withJavaNetInetAddress:(JavaNetInetAddress *)interfaceAddress {
  @try {
    if (_isUp_ != nil) {
      @try {
        if (![((JavaLangBoolean *) nil_chk(((JavaLangBoolean *) cast_chk([_isUp_ invokeWithId:networkInterface withNSObjectArray:nil], [JavaLangBoolean class])))) booleanValue]) {
          return false;
        }
      }
      @catch (JavaLangException *exception) {
      }
    }
    if (_supportsMulticast_ != nil) {
      @try {
        if (![((JavaLangBoolean *) nil_chk(((JavaLangBoolean *) cast_chk([_supportsMulticast_ invokeWithId:networkInterface withNSObjectArray:nil], [JavaLangBoolean class])))) booleanValue]) {
          return false;
        }
      }
      @catch (JavaLangException *exception) {
      }
    }
    if ([((JavaNetInetAddress *) nil_chk(interfaceAddress)) isLoopbackAddress]) {
      return false;
    }
    return true;
  }
  @catch (JavaLangException *exception) {
    return false;
  }
}

- (void)lockInetAddressWithJavaNetInetAddress:(JavaNetInetAddress *)interfaceAddress {
}

- (void)unlockInetAddressWithJavaNetInetAddress:(JavaNetInetAddress *)interfaceAddress {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LJavaNetInetAddress;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getInetAddresses);
  methods[2].selector = @selector(useInetAddressWithJavaNetNetworkInterface:withJavaNetInetAddress:);
  methods[3].selector = @selector(lockInetAddressWithJavaNetInetAddress:);
  methods[4].selector = @selector(unlockInetAddressWithJavaNetInetAddress:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 5, -1, -1 },
    { "_isUp_", "LJavaLangReflectMethod;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_supportsMulticast_", "LJavaLangReflectMethod;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "useInetAddress", "LJavaNetNetworkInterface;LJavaNetInetAddress;", "lockInetAddress", "LJavaNetInetAddress;", "unlockInetAddress", &JavaxJmdnsImplNetworkTopologyDiscoveryImpl_logger };
  static const J2ObjcClassInfo _JavaxJmdnsImplNetworkTopologyDiscoveryImpl = { "NetworkTopologyDiscoveryImpl", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x1, 5, 3, -1, -1, -1, -1, -1 };
  return &_JavaxJmdnsImplNetworkTopologyDiscoveryImpl;
}

+ (void)initialize {
  if (self == [JavaxJmdnsImplNetworkTopologyDiscoveryImpl class]) {
    JavaxJmdnsImplNetworkTopologyDiscoveryImpl_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([JavaxJmdnsImplNetworkTopologyDiscoveryImpl_class_() getName]);
    J2OBJC_SET_INITIALIZED(JavaxJmdnsImplNetworkTopologyDiscoveryImpl)
  }
}

@end

void JavaxJmdnsImplNetworkTopologyDiscoveryImpl_init(JavaxJmdnsImplNetworkTopologyDiscoveryImpl *self) {
  NSObject_init(self);
  JavaLangReflectMethod *isUp;
  @try {
    isUp = [JavaNetNetworkInterface_class_() getMethod:@"isUp" parameterTypes:nil];
  }
  @catch (JavaLangException *exception) {
    isUp = nil;
  }
  self->_isUp_ = isUp;
  JavaLangReflectMethod *supportsMulticast;
  @try {
    supportsMulticast = [JavaNetNetworkInterface_class_() getMethod:@"supportsMulticast" parameterTypes:nil];
  }
  @catch (JavaLangException *exception) {
    supportsMulticast = nil;
  }
  self->_supportsMulticast_ = supportsMulticast;
}

JavaxJmdnsImplNetworkTopologyDiscoveryImpl *new_JavaxJmdnsImplNetworkTopologyDiscoveryImpl_init() {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplNetworkTopologyDiscoveryImpl, init)
}

JavaxJmdnsImplNetworkTopologyDiscoveryImpl *create_JavaxJmdnsImplNetworkTopologyDiscoveryImpl_init() {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplNetworkTopologyDiscoveryImpl, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplNetworkTopologyDiscoveryImpl)
