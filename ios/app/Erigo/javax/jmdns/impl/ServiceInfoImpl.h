//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/jmdns/impl/ServiceInfoImpl.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxJmdnsImplServiceInfoImpl")
#ifdef RESTRICT_JavaxJmdnsImplServiceInfoImpl
#define INCLUDE_ALL_JavaxJmdnsImplServiceInfoImpl 0
#else
#define INCLUDE_ALL_JavaxJmdnsImplServiceInfoImpl 1
#endif
#undef RESTRICT_JavaxJmdnsImplServiceInfoImpl

#if !defined (JavaxJmdnsImplServiceInfoImpl_) && (INCLUDE_ALL_JavaxJmdnsImplServiceInfoImpl || defined(INCLUDE_JavaxJmdnsImplServiceInfoImpl))
#define JavaxJmdnsImplServiceInfoImpl_

#define RESTRICT_JavaxJmdnsServiceInfo 1
#define INCLUDE_JavaxJmdnsServiceInfo 1
#include "javax/jmdns/ServiceInfo.h"

#define RESTRICT_JavaxJmdnsImplDNSListener 1
#define INCLUDE_JavaxJmdnsImplDNSListener 1
#include "javax/jmdns/impl/DNSListener.h"

#define RESTRICT_JavaxJmdnsImplDNSStatefulObject 1
#define INCLUDE_JavaxJmdnsImplDNSStatefulObject 1
#include "javax/jmdns/impl/DNSStatefulObject.h"

@class IOSByteArray;
@class IOSObjectArray;
@class JavaIoOutputStream;
@class JavaNetInet4Address;
@class JavaNetInet6Address;
@class JavaNetInetAddress;
@class JavaxJmdnsImplConstantsDNSState;
@class JavaxJmdnsImplDNSCache;
@class JavaxJmdnsImplDNSEntry;
@class JavaxJmdnsImplHostInfo;
@class JavaxJmdnsImplJmDNSImpl;
@class JavaxJmdnsImplTasksDNSTask;
@protocol JavaUtilCollection;
@protocol JavaUtilEnumeration;
@protocol JavaUtilMap;
@protocol JavaxJmdnsImplServiceInfoImpl_Delegate;

@interface JavaxJmdnsImplServiceInfoImpl : JavaxJmdnsServiceInfo < JavaxJmdnsImplDNSListener, JavaxJmdnsImplDNSStatefulObject >

#pragma mark Public

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)qualifiedNameMap
                            withInt:(jint)port
                            withInt:(jint)weight
                            withInt:(jint)priority
                        withBoolean:(jboolean)persistent
                    withJavaUtilMap:(id<JavaUtilMap>)props;

- (instancetype)initWithNSString:(NSString *)type
                    withNSString:(NSString *)name
                    withNSString:(NSString *)subtype
                         withInt:(jint)port
                         withInt:(jint)weight
                         withInt:(jint)priority
                     withBoolean:(jboolean)persistent
                   withByteArray:(IOSByteArray *)text;

- (instancetype)initWithNSString:(NSString *)type
                    withNSString:(NSString *)name
                    withNSString:(NSString *)subtype
                         withInt:(jint)port
                         withInt:(jint)weight
                         withInt:(jint)priority
                     withBoolean:(jboolean)persistent
                 withJavaUtilMap:(id<JavaUtilMap>)props;

- (instancetype)initWithNSString:(NSString *)type
                    withNSString:(NSString *)name
                    withNSString:(NSString *)subtype
                         withInt:(jint)port
                         withInt:(jint)weight
                         withInt:(jint)priority
                     withBoolean:(jboolean)persistent
                    withNSString:(NSString *)text;

- (jboolean)advanceStateWithJavaxJmdnsImplTasksDNSTask:(JavaxJmdnsImplTasksDNSTask *)task;

- (id<JavaUtilCollection>)answersWithBoolean:(jboolean)unique
                                     withInt:(jint)ttl
                  withJavaxJmdnsImplHostInfo:(JavaxJmdnsImplHostInfo *)localHost;

- (void)associateWithTaskWithJavaxJmdnsImplTasksDNSTask:(JavaxJmdnsImplTasksDNSTask *)task
                    withJavaxJmdnsImplConstantsDNSState:(JavaxJmdnsImplConstantsDNSState *)state;

- (jboolean)cancelState;

- (JavaxJmdnsImplServiceInfoImpl *)java_clone;

- (jboolean)closeState;

+ (id<JavaUtilMap>)decodeQualifiedNameMapWithNSString:(NSString *)type
                                         withNSString:(NSString *)name
                                         withNSString:(NSString *)subtype;

+ (id<JavaUtilMap>)decodeQualifiedNameMapForTypeWithNSString:(NSString *)type;

- (jboolean)isEqual:(id)obj;

- (JavaNetInetAddress *)getAddress;

- (NSString *)getApplication;

- (JavaxJmdnsImplJmDNSImpl *)getDns;

- (NSString *)getDomain;

- (NSString *)getHostAddress;

- (IOSObjectArray *)getHostAddresses;

- (JavaNetInet4Address *)getInet4Address;

- (IOSObjectArray *)getInet4Addresses;

- (JavaNetInet6Address *)getInet6Address;

- (IOSObjectArray *)getInet6Addresses;

- (JavaNetInetAddress *)getInetAddress;

- (IOSObjectArray *)getInetAddresses;

- (NSString *)getKey;

- (NSString *)getName;

- (NSString *)getNiceTextString;

- (jint)getPort;

- (jint)getPriority;

- (IOSByteArray *)getPropertyBytesWithNSString:(NSString *)name;

- (id<JavaUtilEnumeration>)getPropertyNames;

- (NSString *)getPropertyStringWithNSString:(NSString *)name;

- (NSString *)getProtocol;

- (NSString *)getQualifiedName;

- (id<JavaUtilMap>)getQualifiedNameMap;

- (NSString *)getServer;

- (NSString *)getSubtype;

- (IOSByteArray *)getTextBytes;

- (NSString *)getTextString;

- (NSString *)getType;

- (NSString *)getTypeWithSubtype;

- (NSString *)getURL;

- (NSString *)getURLWithNSString:(NSString *)protocol;

- (IOSObjectArray *)getURLs;

- (IOSObjectArray *)getURLsWithNSString:(NSString *)protocol;

- (jint)getWeight;

- (jboolean)hasData;

- (NSUInteger)hash;

- (jboolean)isAnnounced;

- (jboolean)isAnnouncing;

- (jboolean)isAssociatedWithTaskWithJavaxJmdnsImplTasksDNSTask:(JavaxJmdnsImplTasksDNSTask *)task
                           withJavaxJmdnsImplConstantsDNSState:(JavaxJmdnsImplConstantsDNSState *)state;

- (jboolean)isCanceled;

- (jboolean)isCanceling;

- (jboolean)isClosed;

- (jboolean)isClosing;

- (jboolean)isPersistent;

- (jboolean)isProbing;

- (jboolean)needTextAnnouncing;

- (jboolean)recoverState;

- (void)removeAssociationWithTaskWithJavaxJmdnsImplTasksDNSTask:(JavaxJmdnsImplTasksDNSTask *)task;

- (jboolean)revertState;

- (void)setDnsWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns;

- (void)setNeedTextAnnouncingWithBoolean:(jboolean)needTextAnnouncing;

- (void)setTextWithByteArray:(IOSByteArray *)text;

- (void)setTextWithJavaUtilMap:(id<JavaUtilMap>)props;

- (NSString *)description;

- (void)updateRecordWithJavaxJmdnsImplDNSCache:(JavaxJmdnsImplDNSCache *)dnsCache
                                      withLong:(jlong)now
                    withJavaxJmdnsImplDNSEntry:(JavaxJmdnsImplDNSEntry *)rec;

- (jboolean)waitForAnnouncedWithLong:(jlong)timeout;

- (jboolean)waitForCanceledWithLong:(jlong)timeout;

#pragma mark Protected

+ (id<JavaUtilMap>)checkQualifiedNameMapWithJavaUtilMap:(id<JavaUtilMap>)qualifiedNameMap;

#pragma mark Package-Private

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)qualifiedNameMap
                            withInt:(jint)port
                            withInt:(jint)weight
                            withInt:(jint)priority
                        withBoolean:(jboolean)persistent
                      withByteArray:(IOSByteArray *)text;

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)qualifiedNameMap
                            withInt:(jint)port
                            withInt:(jint)weight
                            withInt:(jint)priority
                        withBoolean:(jboolean)persistent
                       withNSString:(NSString *)text;

- (instancetype)initWithJavaxJmdnsServiceInfo:(JavaxJmdnsServiceInfo *)info;

- (void)_setTextWithByteArray:(IOSByteArray *)text;

- (void)addAddressWithJavaNetInet4Address:(JavaNetInet4Address *)addr;

- (void)addAddressWithJavaNetInet6Address:(JavaNetInet6Address *)addr;

- (id<JavaxJmdnsImplServiceInfoImpl_Delegate>)getDelegate;

- (id<JavaUtilMap>)getProperties;

- (NSString *)readUTFWithByteArray:(IOSByteArray *)data
                           withInt:(jint)off
                           withInt:(jint)len;

- (void)setDelegateWithJavaxJmdnsImplServiceInfoImpl_Delegate:(id<JavaxJmdnsImplServiceInfoImpl_Delegate>)delegate;

- (void)setNameWithNSString:(NSString *)name;

- (void)setServerWithNSString:(NSString *)server;

+ (void)writeUTFWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                          withNSString:(NSString *)str;

@end

J2OBJC_STATIC_INIT(JavaxJmdnsImplServiceInfoImpl)

FOUNDATION_EXPORT void JavaxJmdnsImplServiceInfoImpl_initWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withNSString_(JavaxJmdnsImplServiceInfoImpl *self, NSString *type, NSString *name, NSString *subtype, jint port, jint weight, jint priority, jboolean persistent, NSString *text);

FOUNDATION_EXPORT JavaxJmdnsImplServiceInfoImpl *new_JavaxJmdnsImplServiceInfoImpl_initWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withNSString_(NSString *type, NSString *name, NSString *subtype, jint port, jint weight, jint priority, jboolean persistent, NSString *text) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxJmdnsImplServiceInfoImpl *create_JavaxJmdnsImplServiceInfoImpl_initWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withNSString_(NSString *type, NSString *name, NSString *subtype, jint port, jint weight, jint priority, jboolean persistent, NSString *text);

FOUNDATION_EXPORT void JavaxJmdnsImplServiceInfoImpl_initWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withJavaUtilMap_(JavaxJmdnsImplServiceInfoImpl *self, NSString *type, NSString *name, NSString *subtype, jint port, jint weight, jint priority, jboolean persistent, id<JavaUtilMap> props);

FOUNDATION_EXPORT JavaxJmdnsImplServiceInfoImpl *new_JavaxJmdnsImplServiceInfoImpl_initWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withJavaUtilMap_(NSString *type, NSString *name, NSString *subtype, jint port, jint weight, jint priority, jboolean persistent, id<JavaUtilMap> props) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxJmdnsImplServiceInfoImpl *create_JavaxJmdnsImplServiceInfoImpl_initWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withJavaUtilMap_(NSString *type, NSString *name, NSString *subtype, jint port, jint weight, jint priority, jboolean persistent, id<JavaUtilMap> props);

FOUNDATION_EXPORT void JavaxJmdnsImplServiceInfoImpl_initWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withByteArray_(JavaxJmdnsImplServiceInfoImpl *self, NSString *type, NSString *name, NSString *subtype, jint port, jint weight, jint priority, jboolean persistent, IOSByteArray *text);

FOUNDATION_EXPORT JavaxJmdnsImplServiceInfoImpl *new_JavaxJmdnsImplServiceInfoImpl_initWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withByteArray_(NSString *type, NSString *name, NSString *subtype, jint port, jint weight, jint priority, jboolean persistent, IOSByteArray *text) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxJmdnsImplServiceInfoImpl *create_JavaxJmdnsImplServiceInfoImpl_initWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withByteArray_(NSString *type, NSString *name, NSString *subtype, jint port, jint weight, jint priority, jboolean persistent, IOSByteArray *text);

FOUNDATION_EXPORT void JavaxJmdnsImplServiceInfoImpl_initWithJavaUtilMap_withInt_withInt_withInt_withBoolean_withJavaUtilMap_(JavaxJmdnsImplServiceInfoImpl *self, id<JavaUtilMap> qualifiedNameMap, jint port, jint weight, jint priority, jboolean persistent, id<JavaUtilMap> props);

FOUNDATION_EXPORT JavaxJmdnsImplServiceInfoImpl *new_JavaxJmdnsImplServiceInfoImpl_initWithJavaUtilMap_withInt_withInt_withInt_withBoolean_withJavaUtilMap_(id<JavaUtilMap> qualifiedNameMap, jint port, jint weight, jint priority, jboolean persistent, id<JavaUtilMap> props) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxJmdnsImplServiceInfoImpl *create_JavaxJmdnsImplServiceInfoImpl_initWithJavaUtilMap_withInt_withInt_withInt_withBoolean_withJavaUtilMap_(id<JavaUtilMap> qualifiedNameMap, jint port, jint weight, jint priority, jboolean persistent, id<JavaUtilMap> props);

FOUNDATION_EXPORT void JavaxJmdnsImplServiceInfoImpl_initWithJavaUtilMap_withInt_withInt_withInt_withBoolean_withNSString_(JavaxJmdnsImplServiceInfoImpl *self, id<JavaUtilMap> qualifiedNameMap, jint port, jint weight, jint priority, jboolean persistent, NSString *text);

FOUNDATION_EXPORT JavaxJmdnsImplServiceInfoImpl *new_JavaxJmdnsImplServiceInfoImpl_initWithJavaUtilMap_withInt_withInt_withInt_withBoolean_withNSString_(id<JavaUtilMap> qualifiedNameMap, jint port, jint weight, jint priority, jboolean persistent, NSString *text) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxJmdnsImplServiceInfoImpl *create_JavaxJmdnsImplServiceInfoImpl_initWithJavaUtilMap_withInt_withInt_withInt_withBoolean_withNSString_(id<JavaUtilMap> qualifiedNameMap, jint port, jint weight, jint priority, jboolean persistent, NSString *text);

FOUNDATION_EXPORT void JavaxJmdnsImplServiceInfoImpl_initWithJavaUtilMap_withInt_withInt_withInt_withBoolean_withByteArray_(JavaxJmdnsImplServiceInfoImpl *self, id<JavaUtilMap> qualifiedNameMap, jint port, jint weight, jint priority, jboolean persistent, IOSByteArray *text);

FOUNDATION_EXPORT JavaxJmdnsImplServiceInfoImpl *new_JavaxJmdnsImplServiceInfoImpl_initWithJavaUtilMap_withInt_withInt_withInt_withBoolean_withByteArray_(id<JavaUtilMap> qualifiedNameMap, jint port, jint weight, jint priority, jboolean persistent, IOSByteArray *text) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxJmdnsImplServiceInfoImpl *create_JavaxJmdnsImplServiceInfoImpl_initWithJavaUtilMap_withInt_withInt_withInt_withBoolean_withByteArray_(id<JavaUtilMap> qualifiedNameMap, jint port, jint weight, jint priority, jboolean persistent, IOSByteArray *text);

FOUNDATION_EXPORT void JavaxJmdnsImplServiceInfoImpl_initWithJavaxJmdnsServiceInfo_(JavaxJmdnsImplServiceInfoImpl *self, JavaxJmdnsServiceInfo *info);

FOUNDATION_EXPORT JavaxJmdnsImplServiceInfoImpl *new_JavaxJmdnsImplServiceInfoImpl_initWithJavaxJmdnsServiceInfo_(JavaxJmdnsServiceInfo *info) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxJmdnsImplServiceInfoImpl *create_JavaxJmdnsImplServiceInfoImpl_initWithJavaxJmdnsServiceInfo_(JavaxJmdnsServiceInfo *info);

FOUNDATION_EXPORT id<JavaUtilMap> JavaxJmdnsImplServiceInfoImpl_decodeQualifiedNameMapWithNSString_withNSString_withNSString_(NSString *type, NSString *name, NSString *subtype);

FOUNDATION_EXPORT id<JavaUtilMap> JavaxJmdnsImplServiceInfoImpl_decodeQualifiedNameMapForTypeWithNSString_(NSString *type);

FOUNDATION_EXPORT id<JavaUtilMap> JavaxJmdnsImplServiceInfoImpl_checkQualifiedNameMapWithJavaUtilMap_(id<JavaUtilMap> qualifiedNameMap);

FOUNDATION_EXPORT void JavaxJmdnsImplServiceInfoImpl_writeUTFWithJavaIoOutputStream_withNSString_(JavaIoOutputStream *outArg, NSString *str);

J2OBJC_TYPE_LITERAL_HEADER(JavaxJmdnsImplServiceInfoImpl)

#endif

#if !defined (JavaxJmdnsImplServiceInfoImpl_Delegate_) && (INCLUDE_ALL_JavaxJmdnsImplServiceInfoImpl || defined(INCLUDE_JavaxJmdnsImplServiceInfoImpl_Delegate))
#define JavaxJmdnsImplServiceInfoImpl_Delegate_

@class IOSByteArray;
@class JavaxJmdnsServiceInfo;

@protocol JavaxJmdnsImplServiceInfoImpl_Delegate < JavaObject >

- (void)textValueUpdatedWithJavaxJmdnsServiceInfo:(JavaxJmdnsServiceInfo *)target
                                    withByteArray:(IOSByteArray *)value;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxJmdnsImplServiceInfoImpl_Delegate)

J2OBJC_TYPE_LITERAL_HEADER(JavaxJmdnsImplServiceInfoImpl_Delegate)

#endif

#pragma pop_macro("INCLUDE_ALL_JavaxJmdnsImplServiceInfoImpl")
