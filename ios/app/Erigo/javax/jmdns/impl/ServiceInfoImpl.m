//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/jmdns/impl/ServiceInfoImpl.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/net/Inet4Address.h"
#include "java/net/Inet6Address.h"
#include "java/net/InetAddress.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Enumeration.h"
#include "java/util/HashMap.h"
#include "java/util/Hashtable.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/Vector.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "javax/jmdns/ServiceEvent.h"
#include "javax/jmdns/ServiceInfo.h"
#include "javax/jmdns/impl/DNSCache.h"
#include "javax/jmdns/impl/DNSEntry.h"
#include "javax/jmdns/impl/DNSRecord.h"
#include "javax/jmdns/impl/DNSStatefulObject.h"
#include "javax/jmdns/impl/HostInfo.h"
#include "javax/jmdns/impl/JmDNSImpl.h"
#include "javax/jmdns/impl/ServiceEventImpl.h"
#include "javax/jmdns/impl/ServiceInfoImpl.h"
#include "javax/jmdns/impl/constants/DNSRecordClass.h"
#include "javax/jmdns/impl/constants/DNSRecordType.h"
#include "javax/jmdns/impl/constants/DNSState.h"
#include "javax/jmdns/impl/tasks/DNSTask.h"

@class JavaxJmdnsImplServiceInfoImpl_ServiceInfoState;

@interface JavaxJmdnsImplServiceInfoImpl () {
 @public
  NSString *_domain_;
  NSString *_protocol_;
  NSString *_application_;
  NSString *_name_;
  NSString *_subtype_;
  NSString *_server_;
  jint _port_;
  jint _weight_;
  jint _priority_;
  IOSByteArray *_text_;
  id<JavaUtilMap> _props_;
  id<JavaUtilSet> _ipv4Addresses_;
  id<JavaUtilSet> _ipv6Addresses_;
  NSString *_key_;
  jboolean _persistent_;
  jboolean _needTextAnnouncing_;
  JavaxJmdnsImplServiceInfoImpl_ServiceInfoState *_state_;
  id<JavaxJmdnsImplServiceInfoImpl_Delegate> _delegate_;
}

+ (NSString *)removeSeparatorsWithNSString:(NSString *)name;

- (jboolean)hasInetAddress;

+ (IOSByteArray *)textFromPropertiesWithJavaUtilMap:(id<JavaUtilMap>)props;

@end

J2OBJC_FIELD_SETTER(JavaxJmdnsImplServiceInfoImpl, _domain_, NSString *)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplServiceInfoImpl, _protocol_, NSString *)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplServiceInfoImpl, _application_, NSString *)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplServiceInfoImpl, _name_, NSString *)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplServiceInfoImpl, _subtype_, NSString *)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplServiceInfoImpl, _server_, NSString *)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplServiceInfoImpl, _text_, IOSByteArray *)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplServiceInfoImpl, _props_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplServiceInfoImpl, _ipv4Addresses_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplServiceInfoImpl, _ipv6Addresses_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplServiceInfoImpl, _key_, NSString *)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplServiceInfoImpl, _state_, JavaxJmdnsImplServiceInfoImpl_ServiceInfoState *)
J2OBJC_FIELD_SETTER(JavaxJmdnsImplServiceInfoImpl, _delegate_, id<JavaxJmdnsImplServiceInfoImpl_Delegate>)

inline JavaUtilLoggingLogger *JavaxJmdnsImplServiceInfoImpl_get_logger();
inline JavaUtilLoggingLogger *JavaxJmdnsImplServiceInfoImpl_set_logger(JavaUtilLoggingLogger *value);
static JavaUtilLoggingLogger *JavaxJmdnsImplServiceInfoImpl_logger;
J2OBJC_STATIC_FIELD_OBJ(JavaxJmdnsImplServiceInfoImpl, logger, JavaUtilLoggingLogger *)

__attribute__((unused)) static NSString *JavaxJmdnsImplServiceInfoImpl_removeSeparatorsWithNSString_(NSString *name);

__attribute__((unused)) static jboolean JavaxJmdnsImplServiceInfoImpl_hasInetAddress(JavaxJmdnsImplServiceInfoImpl *self);

__attribute__((unused)) static IOSByteArray *JavaxJmdnsImplServiceInfoImpl_textFromPropertiesWithJavaUtilMap_(id<JavaUtilMap> props);

__attribute__((unused)) static IOSObjectArray *JavaxJmdnsImplServiceInfoImpl__Annotations$0();

__attribute__((unused)) static IOSObjectArray *JavaxJmdnsImplServiceInfoImpl__Annotations$1();

__attribute__((unused)) static IOSObjectArray *JavaxJmdnsImplServiceInfoImpl__Annotations$2();

__attribute__((unused)) static IOSObjectArray *JavaxJmdnsImplServiceInfoImpl__Annotations$3();

__attribute__((unused)) static IOSObjectArray *JavaxJmdnsImplServiceInfoImpl__Annotations$4();

__attribute__((unused)) static IOSObjectArray *JavaxJmdnsImplServiceInfoImpl__Annotations$5();

__attribute__((unused)) static IOSObjectArray *JavaxJmdnsImplServiceInfoImpl__Annotations$6();

__attribute__((unused)) static IOSObjectArray *JavaxJmdnsImplServiceInfoImpl__Annotations$7();

@interface JavaxJmdnsImplServiceInfoImpl_Delegate : NSObject

@end

@interface JavaxJmdnsImplServiceInfoImpl_ServiceInfoState : JavaxJmdnsImplDNSStatefulObject_DefaultImplementation {
 @public
  JavaxJmdnsImplServiceInfoImpl *_info_;
}

- (instancetype)initWithJavaxJmdnsImplServiceInfoImpl:(JavaxJmdnsImplServiceInfoImpl *)info;

- (void)setTaskWithJavaxJmdnsImplTasksDNSTask:(JavaxJmdnsImplTasksDNSTask *)task;

- (void)setDnsWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns;

@end

J2OBJC_EMPTY_STATIC_INIT(JavaxJmdnsImplServiceInfoImpl_ServiceInfoState)

J2OBJC_FIELD_SETTER(JavaxJmdnsImplServiceInfoImpl_ServiceInfoState, _info_, JavaxJmdnsImplServiceInfoImpl *)

inline jlong JavaxJmdnsImplServiceInfoImpl_ServiceInfoState_get_serialVersionUID();
#define JavaxJmdnsImplServiceInfoImpl_ServiceInfoState_serialVersionUID 1104131034952196820LL
J2OBJC_STATIC_FIELD_CONSTANT(JavaxJmdnsImplServiceInfoImpl_ServiceInfoState, serialVersionUID, jlong)

__attribute__((unused)) static void JavaxJmdnsImplServiceInfoImpl_ServiceInfoState_initWithJavaxJmdnsImplServiceInfoImpl_(JavaxJmdnsImplServiceInfoImpl_ServiceInfoState *self, JavaxJmdnsImplServiceInfoImpl *info);

__attribute__((unused)) static JavaxJmdnsImplServiceInfoImpl_ServiceInfoState *new_JavaxJmdnsImplServiceInfoImpl_ServiceInfoState_initWithJavaxJmdnsImplServiceInfoImpl_(JavaxJmdnsImplServiceInfoImpl *info) NS_RETURNS_RETAINED;

__attribute__((unused)) static JavaxJmdnsImplServiceInfoImpl_ServiceInfoState *create_JavaxJmdnsImplServiceInfoImpl_ServiceInfoState_initWithJavaxJmdnsImplServiceInfoImpl_(JavaxJmdnsImplServiceInfoImpl *info);

J2OBJC_TYPE_LITERAL_HEADER(JavaxJmdnsImplServiceInfoImpl_ServiceInfoState)

J2OBJC_INITIALIZED_DEFN(JavaxJmdnsImplServiceInfoImpl)

@implementation JavaxJmdnsImplServiceInfoImpl

- (instancetype)initWithNSString:(NSString *)type
                    withNSString:(NSString *)name
                    withNSString:(NSString *)subtype
                         withInt:(jint)port
                         withInt:(jint)weight
                         withInt:(jint)priority
                     withBoolean:(jboolean)persistent
                    withNSString:(NSString *)text {
  JavaxJmdnsImplServiceInfoImpl_initWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withNSString_(self, type, name, subtype, port, weight, priority, persistent, text);
  return self;
}

- (instancetype)initWithNSString:(NSString *)type
                    withNSString:(NSString *)name
                    withNSString:(NSString *)subtype
                         withInt:(jint)port
                         withInt:(jint)weight
                         withInt:(jint)priority
                     withBoolean:(jboolean)persistent
                 withJavaUtilMap:(id<JavaUtilMap>)props {
  JavaxJmdnsImplServiceInfoImpl_initWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withJavaUtilMap_(self, type, name, subtype, port, weight, priority, persistent, props);
  return self;
}

- (instancetype)initWithNSString:(NSString *)type
                    withNSString:(NSString *)name
                    withNSString:(NSString *)subtype
                         withInt:(jint)port
                         withInt:(jint)weight
                         withInt:(jint)priority
                     withBoolean:(jboolean)persistent
                   withByteArray:(IOSByteArray *)text {
  JavaxJmdnsImplServiceInfoImpl_initWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withByteArray_(self, type, name, subtype, port, weight, priority, persistent, text);
  return self;
}

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)qualifiedNameMap
                            withInt:(jint)port
                            withInt:(jint)weight
                            withInt:(jint)priority
                        withBoolean:(jboolean)persistent
                    withJavaUtilMap:(id<JavaUtilMap>)props {
  JavaxJmdnsImplServiceInfoImpl_initWithJavaUtilMap_withInt_withInt_withInt_withBoolean_withJavaUtilMap_(self, qualifiedNameMap, port, weight, priority, persistent, props);
  return self;
}

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)qualifiedNameMap
                            withInt:(jint)port
                            withInt:(jint)weight
                            withInt:(jint)priority
                        withBoolean:(jboolean)persistent
                       withNSString:(NSString *)text {
  JavaxJmdnsImplServiceInfoImpl_initWithJavaUtilMap_withInt_withInt_withInt_withBoolean_withNSString_(self, qualifiedNameMap, port, weight, priority, persistent, text);
  return self;
}

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)qualifiedNameMap
                            withInt:(jint)port
                            withInt:(jint)weight
                            withInt:(jint)priority
                        withBoolean:(jboolean)persistent
                      withByteArray:(IOSByteArray *)text {
  JavaxJmdnsImplServiceInfoImpl_initWithJavaUtilMap_withInt_withInt_withInt_withBoolean_withByteArray_(self, qualifiedNameMap, port, weight, priority, persistent, text);
  return self;
}

- (instancetype)initWithJavaxJmdnsServiceInfo:(JavaxJmdnsServiceInfo *)info {
  JavaxJmdnsImplServiceInfoImpl_initWithJavaxJmdnsServiceInfo_(self, info);
  return self;
}

+ (id<JavaUtilMap>)decodeQualifiedNameMapWithNSString:(NSString *)type
                                         withNSString:(NSString *)name
                                         withNSString:(NSString *)subtype {
  return JavaxJmdnsImplServiceInfoImpl_decodeQualifiedNameMapWithNSString_withNSString_withNSString_(type, name, subtype);
}

+ (id<JavaUtilMap>)decodeQualifiedNameMapForTypeWithNSString:(NSString *)type {
  return JavaxJmdnsImplServiceInfoImpl_decodeQualifiedNameMapForTypeWithNSString_(type);
}

+ (id<JavaUtilMap>)checkQualifiedNameMapWithJavaUtilMap:(id<JavaUtilMap>)qualifiedNameMap {
  return JavaxJmdnsImplServiceInfoImpl_checkQualifiedNameMapWithJavaUtilMap_(qualifiedNameMap);
}

+ (NSString *)removeSeparatorsWithNSString:(NSString *)name {
  return JavaxJmdnsImplServiceInfoImpl_removeSeparatorsWithNSString_(name);
}

- (NSString *)getType {
  NSString *domain = [self getDomain];
  NSString *protocol = [self getProtocol];
  NSString *application = [self getApplication];
  return JreStrcat("$$$C", ([((NSString *) nil_chk(application)) java_length] > 0 ? JreStrcat("C$C", '_', application, '.') : @""), ([((NSString *) nil_chk(protocol)) java_length] > 0 ? JreStrcat("C$C", '_', protocol, '.') : @""), domain, '.');
}

- (NSString *)getTypeWithSubtype {
  NSString *subtype = [self getSubtype];
  return JreStrcat("$$", ([((NSString *) nil_chk(subtype)) java_length] > 0 ? JreStrcat("C$$", '_', [subtype lowercaseString], @"._sub.") : @""), [self getType]);
}

- (NSString *)getName {
  return (_name_ != nil ? _name_ : @"");
}

- (NSString *)getKey {
  if (self->_key_ == nil) {
    self->_key_ = [((NSString *) nil_chk([self getQualifiedName])) lowercaseString];
  }
  return self->_key_;
}

- (void)setNameWithNSString:(NSString *)name {
  self->_name_ = name;
  self->_key_ = nil;
}

- (NSString *)getQualifiedName {
  NSString *domain = [self getDomain];
  NSString *protocol = [self getProtocol];
  NSString *application = [self getApplication];
  NSString *instance = [self getName];
  return JreStrcat("$$$$C", ([((NSString *) nil_chk(instance)) java_length] > 0 ? JreStrcat("$C", instance, '.') : @""), ([((NSString *) nil_chk(application)) java_length] > 0 ? JreStrcat("C$C", '_', application, '.') : @""), ([((NSString *) nil_chk(protocol)) java_length] > 0 ? JreStrcat("C$C", '_', protocol, '.') : @""), domain, '.');
}

- (NSString *)getServer {
  return (_server_ != nil ? _server_ : @"");
}

- (void)setServerWithNSString:(NSString *)server {
  self->_server_ = server;
}

- (NSString *)getHostAddress {
  IOSObjectArray *names = [self getHostAddresses];
  return (((IOSObjectArray *) nil_chk(names))->size_ > 0 ? IOSObjectArray_Get(names, 0) : @"");
}

- (IOSObjectArray *)getHostAddresses {
  IOSObjectArray *ip4Aaddresses = [self getInet4Addresses];
  IOSObjectArray *ip6Aaddresses = [self getInet6Addresses];
  IOSObjectArray *names = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(ip4Aaddresses))->size_ + ((IOSObjectArray *) nil_chk(ip6Aaddresses))->size_ type:NSString_class_()];
  for (jint i = 0; i < ip4Aaddresses->size_; i++) {
    (void) IOSObjectArray_Set(names, i, [((JavaNetInet4Address *) nil_chk(IOSObjectArray_Get(ip4Aaddresses, i))) getHostAddress]);
  }
  for (jint i = 0; i < ip6Aaddresses->size_; i++) {
    (void) IOSObjectArray_Set(names, i + ip4Aaddresses->size_, JreStrcat("C$C", '[', [((JavaNetInet6Address *) nil_chk(IOSObjectArray_Get(ip6Aaddresses, i))) getHostAddress], ']'));
  }
  return names;
}

- (void)addAddressWithJavaNetInet4Address:(JavaNetInet4Address *)addr {
  [((id<JavaUtilSet>) nil_chk(_ipv4Addresses_)) addWithId:addr];
}

- (void)addAddressWithJavaNetInet6Address:(JavaNetInet6Address *)addr {
  [((id<JavaUtilSet>) nil_chk(_ipv6Addresses_)) addWithId:addr];
}

- (JavaNetInetAddress *)getAddress {
  return [self getInetAddress];
}

- (JavaNetInetAddress *)getInetAddress {
  IOSObjectArray *addresses = [self getInetAddresses];
  return (((IOSObjectArray *) nil_chk(addresses))->size_ > 0 ? IOSObjectArray_Get(addresses, 0) : nil);
}

- (JavaNetInet4Address *)getInet4Address {
  IOSObjectArray *addresses = [self getInet4Addresses];
  return (((IOSObjectArray *) nil_chk(addresses))->size_ > 0 ? IOSObjectArray_Get(addresses, 0) : nil);
}

- (JavaNetInet6Address *)getInet6Address {
  IOSObjectArray *addresses = [self getInet6Addresses];
  return (((IOSObjectArray *) nil_chk(addresses))->size_ > 0 ? IOSObjectArray_Get(addresses, 0) : nil);
}

- (IOSObjectArray *)getInetAddresses {
  id<JavaUtilList> aList = new_JavaUtilArrayList_initWithInt_([((id<JavaUtilSet>) nil_chk(_ipv4Addresses_)) size] + [((id<JavaUtilSet>) nil_chk(_ipv6Addresses_)) size]);
  [aList addAllWithJavaUtilCollection:_ipv4Addresses_];
  [aList addAllWithJavaUtilCollection:_ipv6Addresses_];
  return [aList toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[aList size] type:JavaNetInetAddress_class_()]];
}

- (IOSObjectArray *)getInet4Addresses {
  return [((id<JavaUtilSet>) nil_chk(_ipv4Addresses_)) toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[_ipv4Addresses_ size] type:JavaNetInet4Address_class_()]];
}

- (IOSObjectArray *)getInet6Addresses {
  return [((id<JavaUtilSet>) nil_chk(_ipv6Addresses_)) toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[_ipv6Addresses_ size] type:JavaNetInet6Address_class_()]];
}

- (jint)getPort {
  return _port_;
}

- (jint)getPriority {
  return _priority_;
}

- (jint)getWeight {
  return _weight_;
}

- (IOSByteArray *)getTextBytes {
  return (self->_text_ != nil && self->_text_->size_ > 0 ? self->_text_ : JreLoadStatic(JavaxJmdnsImplDNSRecord, EMPTY_TXT));
}

- (NSString *)getTextString {
  id<JavaUtilMap> properties = [self getProperties];
  for (NSString * __strong key in nil_chk([((id<JavaUtilMap>) nil_chk(properties)) keySet])) {
    IOSByteArray *value = [properties getWithId:key];
    if ((value != nil) && (((IOSByteArray *) nil_chk(value))->size_ > 0)) {
      return JreStrcat("$C$", key, '=', [NSString java_stringWithBytes:value]);
    }
    return key;
  }
  return @"";
}

- (NSString *)getURL {
  return [self getURLWithNSString:@"http"];
}

- (IOSObjectArray *)getURLs {
  return [self getURLsWithNSString:@"http"];
}

- (NSString *)getURLWithNSString:(NSString *)protocol {
  IOSObjectArray *urls = [self getURLsWithNSString:protocol];
  return (((IOSObjectArray *) nil_chk(urls))->size_ > 0 ? IOSObjectArray_Get(urls, 0) : JreStrcat("$$I", protocol, @"://null:", [self getPort]));
}

- (IOSObjectArray *)getURLsWithNSString:(NSString *)protocol {
  IOSObjectArray *addresses = [self getInetAddresses];
  IOSObjectArray *urls = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(addresses))->size_ type:NSString_class_()];
  for (jint i = 0; i < addresses->size_; i++) {
    NSString *url = JreStrcat("$$$CI", protocol, @"://", [((JavaNetInetAddress *) nil_chk(IOSObjectArray_Get(addresses, i))) getHostAddress], ':', [self getPort]);
    NSString *path = [self getPropertyStringWithNSString:@"path"];
    if (path != nil) {
      if ([path java_indexOfString:@"://"] >= 0) {
        url = path;
      }
      else {
        (void) JreStrAppendStrong(&url, "$", [path java_hasPrefix:@"/"] ? path : JreStrcat("C$", '/', path));
      }
    }
    (void) IOSObjectArray_Set(urls, i, url);
  }
  return urls;
}

- (IOSByteArray *)getPropertyBytesWithNSString:(NSString *)name {
  @synchronized(self) {
    return [((id<JavaUtilMap>) nil_chk([self getProperties])) getWithId:name];
  }
}

- (NSString *)getPropertyStringWithNSString:(NSString *)name {
  @synchronized(self) {
    IOSByteArray *data = [((id<JavaUtilMap>) nil_chk([self getProperties])) getWithId:name];
    if (data == nil) {
      return nil;
    }
    if (data == JreLoadStatic(JavaxJmdnsServiceInfo, NO_VALUE)) {
      return @"true";
    }
    return [self readUTFWithByteArray:data withInt:0 withInt:data->size_];
  }
}

- (id<JavaUtilEnumeration>)getPropertyNames {
  id<JavaUtilMap> properties = [self getProperties];
  id<JavaUtilCollection> names = (properties != nil ? [properties keySet] : JavaUtilCollections_emptySet());
  return [new_JavaUtilVector_initWithJavaUtilCollection_(names) elements];
}

- (NSString *)getApplication {
  return (_application_ != nil ? _application_ : @"");
}

- (NSString *)getDomain {
  return (_domain_ != nil ? _domain_ : @"local");
}

- (NSString *)getProtocol {
  return (_protocol_ != nil ? _protocol_ : @"tcp");
}

- (NSString *)getSubtype {
  return (_subtype_ != nil ? _subtype_ : @"");
}

- (id<JavaUtilMap>)getQualifiedNameMap {
  id<JavaUtilMap> map = new_JavaUtilHashMap_initWithInt_(5);
  (void) [map putWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Domain) withId:[self getDomain]];
  (void) [map putWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Protocol) withId:[self getProtocol]];
  (void) [map putWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Application) withId:[self getApplication]];
  (void) [map putWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Instance) withId:[self getName]];
  (void) [map putWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Subtype) withId:[self getSubtype]];
  return map;
}

+ (void)writeUTFWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                          withNSString:(NSString *)str {
  JavaxJmdnsImplServiceInfoImpl_writeUTFWithJavaIoOutputStream_withNSString_(outArg, str);
}

- (NSString *)readUTFWithByteArray:(IOSByteArray *)data
                           withInt:(jint)off
                           withInt:(jint)len {
  jint offset = off;
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  for (jint end = offset + len; offset < end; ) {
    jint ch = IOSByteArray_Get(nil_chk(data), offset++) & (jint) 0xFF;
    switch (JreRShift32(ch, 4)) {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      break;
      case 12:
      case 13:
      if (offset >= len) {
        return nil;
      }
      ch = (JreLShift32((ch & (jint) 0x1F), 6)) | (IOSByteArray_Get(data, offset++) & (jint) 0x3F);
      break;
      case 14:
      if (offset + 2 >= len) {
        return nil;
      }
      {
        jint unseq$1 = offset++;
        ch = (JreLShift32((ch & (jint) 0x0f), 12)) | (JreLShift32((IOSByteArray_Get(data, unseq$1) & (jint) 0x3F), 6)) | (IOSByteArray_Get(data, offset++) & (jint) 0x3F);
      }
      break;
      default:
      if (offset + 1 >= len) {
        return nil;
      }
      ch = (JreLShift32((ch & (jint) 0x3F), 4)) | (IOSByteArray_Get(data, offset++) & (jint) 0x0f);
      break;
    }
    (void) [buf appendWithChar:(jchar) ch];
  }
  return [buf description];
}

- (id<JavaUtilMap>)getProperties {
  @synchronized(self) {
    if ((_props_ == nil) && ([self getTextBytes] != nil)) {
      JavaUtilHashtable *properties = new_JavaUtilHashtable_init();
      @try {
        jint off = 0;
        while (off < ((IOSByteArray *) nil_chk([self getTextBytes]))->size_) {
          jint len = IOSByteArray_Get(nil_chk([self getTextBytes]), off++) & (jint) 0xFF;
          if ((len == 0) || (off + len > ((IOSByteArray *) nil_chk([self getTextBytes]))->size_)) {
            [properties clear];
            break;
          }
          jint i = 0;
          for (; (i < len) && (IOSByteArray_Get(nil_chk([self getTextBytes]), off + i) != '='); i++) {
          }
          NSString *name = [self readUTFWithByteArray:[self getTextBytes] withInt:off withInt:i];
          if (name == nil) {
            [properties clear];
            break;
          }
          if (i == len) {
            (void) [properties putWithId:name withId:JreLoadStatic(JavaxJmdnsServiceInfo, NO_VALUE)];
          }
          else {
            IOSByteArray *value = [IOSByteArray newArrayWithLength:len - ++i];
            JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([self getTextBytes], off + i, value, 0, len - i);
            (void) [properties putWithId:name withId:value];
            off += len;
          }
        }
      }
      @catch (JavaLangException *exception) {
        [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplServiceInfoImpl_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:@"Malformed TXT Field " withNSException:exception];
      }
      self->_props_ = properties;
    }
    return (_props_ != nil ? _props_ : JavaUtilCollections_emptyMap());
  }
}

- (void)updateRecordWithJavaxJmdnsImplDNSCache:(JavaxJmdnsImplDNSCache *)dnsCache
                                      withLong:(jlong)now
                    withJavaxJmdnsImplDNSEntry:(JavaxJmdnsImplDNSEntry *)rec {
  if (([rec isKindOfClass:[JavaxJmdnsImplDNSRecord class]]) && ![((JavaxJmdnsImplDNSEntry *) nil_chk(rec)) isExpiredWithLong:now]) {
    jboolean serviceUpdated = false;
    switch ([[((JavaxJmdnsImplDNSEntry *) nil_chk(rec)) getRecordType] ordinal]) {
      case JavaxJmdnsImplConstantsDNSRecordType_Enum_TYPE_A:
      if ([((NSString *) nil_chk([rec getName])) java_equalsIgnoreCase:[self getServer]]) {
        [((id<JavaUtilSet>) nil_chk(_ipv4Addresses_)) addWithId:(JavaNetInet4Address *) cast_chk([((JavaxJmdnsImplDNSRecord_Address *) cast_chk(rec, [JavaxJmdnsImplDNSRecord_Address class])) getAddress], [JavaNetInet4Address class])];
        serviceUpdated = true;
      }
      break;
      case JavaxJmdnsImplConstantsDNSRecordType_Enum_TYPE_AAAA:
      if ([((NSString *) nil_chk([rec getName])) java_equalsIgnoreCase:[self getServer]]) {
        [((id<JavaUtilSet>) nil_chk(_ipv6Addresses_)) addWithId:(JavaNetInet6Address *) cast_chk([((JavaxJmdnsImplDNSRecord_Address *) cast_chk(rec, [JavaxJmdnsImplDNSRecord_Address class])) getAddress], [JavaNetInet6Address class])];
        serviceUpdated = true;
      }
      break;
      case JavaxJmdnsImplConstantsDNSRecordType_Enum_TYPE_SRV:
      if ([((NSString *) nil_chk([rec getName])) java_equalsIgnoreCase:[self getQualifiedName]]) {
        JavaxJmdnsImplDNSRecord_Service *srv = (JavaxJmdnsImplDNSRecord_Service *) cast_chk(rec, [JavaxJmdnsImplDNSRecord_Service class]);
        jboolean serverChanged = (_server_ == nil) || ![((NSString *) nil_chk(_server_)) java_equalsIgnoreCase:[srv getServer]];
        _server_ = [srv getServer];
        _port_ = [srv getPort];
        _weight_ = [srv getWeight];
        _priority_ = [srv getPriority];
        if (serverChanged) {
          [((id<JavaUtilSet>) nil_chk(_ipv4Addresses_)) clear];
          [((id<JavaUtilSet>) nil_chk(_ipv6Addresses_)) clear];
          for (JavaxJmdnsImplDNSEntry * __strong entry_ in nil_chk([((JavaxJmdnsImplDNSCache *) nil_chk(dnsCache)) getDNSEntryListWithNSString:_server_ withJavaxJmdnsImplConstantsDNSRecordType:JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordType, TYPE_A) withJavaxJmdnsImplConstantsDNSRecordClass:JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordClass, CLASS_IN)])) {
            [self updateRecordWithJavaxJmdnsImplDNSCache:dnsCache withLong:now withJavaxJmdnsImplDNSEntry:entry_];
          }
          for (JavaxJmdnsImplDNSEntry * __strong entry_ in nil_chk([dnsCache getDNSEntryListWithNSString:_server_ withJavaxJmdnsImplConstantsDNSRecordType:JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordType, TYPE_AAAA) withJavaxJmdnsImplConstantsDNSRecordClass:JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordClass, CLASS_IN)])) {
            [self updateRecordWithJavaxJmdnsImplDNSCache:dnsCache withLong:now withJavaxJmdnsImplDNSEntry:entry_];
          }
        }
        else {
          serviceUpdated = true;
        }
      }
      break;
      case JavaxJmdnsImplConstantsDNSRecordType_Enum_TYPE_TXT:
      if ([((NSString *) nil_chk([rec getName])) java_equalsIgnoreCase:[self getQualifiedName]]) {
        JavaxJmdnsImplDNSRecord_Text *txt = (JavaxJmdnsImplDNSRecord_Text *) cast_chk(rec, [JavaxJmdnsImplDNSRecord_Text class]);
        _text_ = [txt getText];
        serviceUpdated = true;
      }
      break;
      case JavaxJmdnsImplConstantsDNSRecordType_Enum_TYPE_PTR:
      if (([((NSString *) nil_chk([self getSubtype])) java_length] == 0) && ([((NSString *) nil_chk([rec getSubtype])) java_length] != 0)) {
        _subtype_ = [rec getSubtype];
        serviceUpdated = true;
      }
      break;
      default:
      break;
    }
    if (serviceUpdated && [self hasData]) {
      JavaxJmdnsImplJmDNSImpl *dns = [self getDns];
      if (dns != nil) {
        JavaxJmdnsServiceEvent *event = [((JavaxJmdnsImplDNSRecord *) cast_chk(rec, [JavaxJmdnsImplDNSRecord class])) getServiceEventWithJavaxJmdnsImplJmDNSImpl:dns];
        event = new_JavaxJmdnsImplServiceEventImpl_initWithJavaxJmdnsImplJmDNSImpl_withNSString_withNSString_withJavaxJmdnsServiceInfo_(dns, [((JavaxJmdnsServiceEvent *) nil_chk(event)) getType], [event getName], self);
        [dns handleServiceResolvedWithJavaxJmdnsServiceEvent:event];
      }
    }
    @synchronized(self) {
      [self java_notifyAll];
    }
  }
}

- (jboolean)hasData {
  @synchronized(self) {
    return [self getServer] != nil && JavaxJmdnsImplServiceInfoImpl_hasInetAddress(self) && [self getTextBytes] != nil && ((IOSByteArray *) nil_chk([self getTextBytes]))->size_ > 0;
  }
}

- (jboolean)hasInetAddress {
  return JavaxJmdnsImplServiceInfoImpl_hasInetAddress(self);
}

- (jboolean)advanceStateWithJavaxJmdnsImplTasksDNSTask:(JavaxJmdnsImplTasksDNSTask *)task {
  return [((JavaxJmdnsImplServiceInfoImpl_ServiceInfoState *) nil_chk(_state_)) advanceStateWithJavaxJmdnsImplTasksDNSTask:task];
}

- (jboolean)revertState {
  return [((JavaxJmdnsImplServiceInfoImpl_ServiceInfoState *) nil_chk(_state_)) revertState];
}

- (jboolean)cancelState {
  return [((JavaxJmdnsImplServiceInfoImpl_ServiceInfoState *) nil_chk(_state_)) cancelState];
}

- (jboolean)closeState {
  return [((JavaxJmdnsImplServiceInfoImpl_ServiceInfoState *) nil_chk(self->_state_)) closeState];
}

- (jboolean)recoverState {
  return [((JavaxJmdnsImplServiceInfoImpl_ServiceInfoState *) nil_chk(self->_state_)) recoverState];
}

- (void)removeAssociationWithTaskWithJavaxJmdnsImplTasksDNSTask:(JavaxJmdnsImplTasksDNSTask *)task {
  [((JavaxJmdnsImplServiceInfoImpl_ServiceInfoState *) nil_chk(_state_)) removeAssociationWithTaskWithJavaxJmdnsImplTasksDNSTask:task];
}

- (void)associateWithTaskWithJavaxJmdnsImplTasksDNSTask:(JavaxJmdnsImplTasksDNSTask *)task
                    withJavaxJmdnsImplConstantsDNSState:(JavaxJmdnsImplConstantsDNSState *)state {
  [((JavaxJmdnsImplServiceInfoImpl_ServiceInfoState *) nil_chk(_state_)) associateWithTaskWithJavaxJmdnsImplTasksDNSTask:task withJavaxJmdnsImplConstantsDNSState:state];
}

- (jboolean)isAssociatedWithTaskWithJavaxJmdnsImplTasksDNSTask:(JavaxJmdnsImplTasksDNSTask *)task
                           withJavaxJmdnsImplConstantsDNSState:(JavaxJmdnsImplConstantsDNSState *)state {
  return [((JavaxJmdnsImplServiceInfoImpl_ServiceInfoState *) nil_chk(_state_)) isAssociatedWithTaskWithJavaxJmdnsImplTasksDNSTask:task withJavaxJmdnsImplConstantsDNSState:state];
}

- (jboolean)isProbing {
  return [((JavaxJmdnsImplServiceInfoImpl_ServiceInfoState *) nil_chk(_state_)) isProbing];
}

- (jboolean)isAnnouncing {
  return [((JavaxJmdnsImplServiceInfoImpl_ServiceInfoState *) nil_chk(_state_)) isAnnouncing];
}

- (jboolean)isAnnounced {
  return [((JavaxJmdnsImplServiceInfoImpl_ServiceInfoState *) nil_chk(_state_)) isAnnounced];
}

- (jboolean)isCanceling {
  return [((JavaxJmdnsImplServiceInfoImpl_ServiceInfoState *) nil_chk(self->_state_)) isCanceling];
}

- (jboolean)isCanceled {
  return [((JavaxJmdnsImplServiceInfoImpl_ServiceInfoState *) nil_chk(_state_)) isCanceled];
}

- (jboolean)isClosing {
  return [((JavaxJmdnsImplServiceInfoImpl_ServiceInfoState *) nil_chk(_state_)) isClosing];
}

- (jboolean)isClosed {
  return [((JavaxJmdnsImplServiceInfoImpl_ServiceInfoState *) nil_chk(_state_)) isClosed];
}

- (jboolean)waitForAnnouncedWithLong:(jlong)timeout {
  return [((JavaxJmdnsImplServiceInfoImpl_ServiceInfoState *) nil_chk(_state_)) waitForAnnouncedWithLong:timeout];
}

- (jboolean)waitForCanceledWithLong:(jlong)timeout {
  return [((JavaxJmdnsImplServiceInfoImpl_ServiceInfoState *) nil_chk(_state_)) waitForCanceledWithLong:timeout];
}

- (NSUInteger)hash {
  return ((jint) [((NSString *) nil_chk([self getQualifiedName])) hash]);
}

- (jboolean)isEqual:(id)obj {
  return ([obj isKindOfClass:[JavaxJmdnsImplServiceInfoImpl class]]) && [((NSString *) nil_chk([self getQualifiedName])) isEqual:[((JavaxJmdnsImplServiceInfoImpl *) nil_chk(((JavaxJmdnsImplServiceInfoImpl *) cast_chk(obj, [JavaxJmdnsImplServiceInfoImpl class])))) getQualifiedName]];
}

- (NSString *)getNiceTextString {
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  for (jint i = 0, len = ((IOSByteArray *) nil_chk([self getTextBytes]))->size_; i < len; i++) {
    if (i >= 200) {
      (void) [buf appendWithNSString:@"..."];
      break;
    }
    jint ch = IOSByteArray_Get(nil_chk([self getTextBytes]), i) & (jint) 0xFF;
    if ((ch < ' ') || (ch > 127)) {
      (void) [buf appendWithNSString:@"\\0"];
      (void) [buf appendWithNSString:JavaLangInteger_toStringWithInt_withInt_(ch, 8)];
    }
    else {
      (void) [buf appendWithChar:(jchar) ch];
    }
  }
  return [buf description];
}

- (JavaxJmdnsImplServiceInfoImpl *)java_clone {
  JavaxJmdnsImplServiceInfoImpl *serviceInfo = new_JavaxJmdnsImplServiceInfoImpl_initWithJavaUtilMap_withInt_withInt_withInt_withBoolean_withByteArray_([self getQualifiedNameMap], _port_, _weight_, _priority_, _persistent_, _text_);
  IOSObjectArray *ipv6Addresses = [self getInet6Addresses];
  {
    IOSObjectArray *a__ = ipv6Addresses;
    JavaNetInet6Address * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaNetInet6Address * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaNetInet6Address *address = *b__++;
      [((id<JavaUtilSet>) nil_chk(serviceInfo->_ipv6Addresses_)) addWithId:address];
    }
  }
  IOSObjectArray *ipv4Addresses = [self getInet4Addresses];
  {
    IOSObjectArray *a__ = ipv4Addresses;
    JavaNetInet4Address * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaNetInet4Address * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaNetInet4Address *address = *b__++;
      [((id<JavaUtilSet>) nil_chk(serviceInfo->_ipv4Addresses_)) addWithId:address];
    }
  }
  return serviceInfo;
}

- (NSString *)description {
  JavaLangStringBuilder *buf = new_JavaLangStringBuilder_init();
  (void) [buf appendWithNSString:JreStrcat("C$CIC", '[', [[self java_getClass] getSimpleName], '@', JavaLangSystem_identityHashCodeWithId_(self), ' ')];
  (void) [buf appendWithNSString:@"name: '"];
  (void) [buf appendWithNSString:JreStrcat("$$", ([((NSString *) nil_chk([self getName])) java_length] > 0 ? JreStrcat("$C", [self getName], '.') : @""), [self getTypeWithSubtype])];
  (void) [buf appendWithNSString:@"' address: '"];
  IOSObjectArray *addresses = [self getInetAddresses];
  if (((IOSObjectArray *) nil_chk(addresses))->size_ > 0) {
    {
      IOSObjectArray *a__ = addresses;
      JavaNetInetAddress * const *b__ = a__->buffer_;
      JavaNetInetAddress * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        JavaNetInetAddress *address = *b__++;
        (void) [buf appendWithId:address];
        (void) [buf appendWithChar:':'];
        (void) [buf appendWithInt:[self getPort]];
        (void) [buf appendWithChar:' '];
      }
    }
  }
  else {
    (void) [buf appendWithNSString:@"(null):"];
    (void) [buf appendWithInt:[self getPort]];
  }
  (void) [buf appendWithNSString:@"' status: '"];
  (void) [buf appendWithNSString:[((JavaxJmdnsImplServiceInfoImpl_ServiceInfoState *) nil_chk(_state_)) description]];
  (void) [buf appendWithNSString:[self isPersistent] ? @"' is persistent," : @"',"];
  (void) [buf appendWithNSString:@" has "];
  (void) [buf appendWithNSString:[self hasData] ? @"" : @"NO "];
  (void) [buf appendWithNSString:@"data"];
  if (((IOSByteArray *) nil_chk([self getTextBytes]))->size_ > 0) {
    id<JavaUtilMap> properties = [self getProperties];
    if (![((id<JavaUtilMap>) nil_chk(properties)) isEmpty]) {
      (void) [buf appendWithNSString:@"\n"];
      for (NSString * __strong key in nil_chk([properties keySet])) {
        (void) [buf appendWithNSString:JreStrcat("C$$$C", 0x0009, key, @": ", [NSString java_stringWithBytes:[properties getWithId:key]], 0x000a)];
      }
    }
    else {
      (void) [buf appendWithNSString:@" empty"];
    }
  }
  (void) [buf appendWithChar:']'];
  return [buf description];
}

- (id<JavaUtilCollection>)answersWithBoolean:(jboolean)unique
                                     withInt:(jint)ttl
                  withJavaxJmdnsImplHostInfo:(JavaxJmdnsImplHostInfo *)localHost {
  id<JavaUtilList> list = new_JavaUtilArrayList_init();
  if ([((NSString *) nil_chk([self getSubtype])) java_length] > 0) {
    [list addWithId:new_JavaxJmdnsImplDNSRecord_Pointer_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withNSString_([self getTypeWithSubtype], JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordClass, CLASS_IN), JavaxJmdnsImplConstantsDNSRecordClass_NOT_UNIQUE, ttl, [self getQualifiedName])];
  }
  [list addWithId:new_JavaxJmdnsImplDNSRecord_Pointer_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withNSString_([self getType], JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordClass, CLASS_IN), JavaxJmdnsImplConstantsDNSRecordClass_NOT_UNIQUE, ttl, [self getQualifiedName])];
  [list addWithId:new_JavaxJmdnsImplDNSRecord_Service_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withInt_withInt_withInt_withNSString_([self getQualifiedName], JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordClass, CLASS_IN), unique, ttl, _priority_, _weight_, _port_, [((JavaxJmdnsImplHostInfo *) nil_chk(localHost)) getName])];
  [list addWithId:new_JavaxJmdnsImplDNSRecord_Text_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withByteArray_([self getQualifiedName], JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordClass, CLASS_IN), unique, ttl, [self getTextBytes])];
  return list;
}

- (void)setTextWithByteArray:(IOSByteArray *)text {
  @synchronized(self) {
    self->_text_ = text;
    self->_props_ = nil;
    [self setNeedTextAnnouncingWithBoolean:true];
  }
}

- (void)setTextWithJavaUtilMap:(id<JavaUtilMap>)props {
  [self setTextWithByteArray:JavaxJmdnsImplServiceInfoImpl_textFromPropertiesWithJavaUtilMap_(props)];
}

- (void)_setTextWithByteArray:(IOSByteArray *)text {
  self->_text_ = text;
  self->_props_ = nil;
}

+ (IOSByteArray *)textFromPropertiesWithJavaUtilMap:(id<JavaUtilMap>)props {
  return JavaxJmdnsImplServiceInfoImpl_textFromPropertiesWithJavaUtilMap_(props);
}

- (void)setDnsWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns {
  [((JavaxJmdnsImplServiceInfoImpl_ServiceInfoState *) nil_chk(self->_state_)) setDnsWithJavaxJmdnsImplJmDNSImpl:dns];
}

- (JavaxJmdnsImplJmDNSImpl *)getDns {
  return [((JavaxJmdnsImplServiceInfoImpl_ServiceInfoState *) nil_chk(self->_state_)) getDns];
}

- (jboolean)isPersistent {
  return _persistent_;
}

- (void)setNeedTextAnnouncingWithBoolean:(jboolean)needTextAnnouncing {
  self->_needTextAnnouncing_ = needTextAnnouncing;
  if (self->_needTextAnnouncing_) {
    [((JavaxJmdnsImplServiceInfoImpl_ServiceInfoState *) nil_chk(_state_)) setTaskWithJavaxJmdnsImplTasksDNSTask:nil];
  }
}

- (jboolean)needTextAnnouncing {
  return _needTextAnnouncing_;
}

- (id<JavaxJmdnsImplServiceInfoImpl_Delegate>)getDelegate {
  return self->_delegate_;
}

- (void)setDelegateWithJavaxJmdnsImplServiceInfoImpl_Delegate:(id<JavaxJmdnsImplServiceInfoImpl_Delegate>)delegate {
  self->_delegate_ = delegate;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, 5, -1, -1 },
    { NULL, NULL, 0x0, -1, 6, -1, 7, -1, -1 },
    { NULL, NULL, 0x0, -1, 8, -1, 9, -1, -1 },
    { NULL, NULL, 0x0, -1, 10, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x9, 11, 12, -1, 13, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x9, 14, 15, -1, 16, -1, -1 },
    { NULL, "LJavaUtilMap;", 0xc, 17, 18, -1, 19, -1, -1 },
    { NULL, "LNSString;", 0xa, 20, 15, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 21, 15, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 22, 15, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, 23, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 24, 26, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x1, -1, -1, -1, -1, 27, -1 },
    { NULL, "LJavaNetInetAddress;", 0x1, -1, -1, -1, -1, 28, -1 },
    { NULL, "LJavaNetInet4Address;", 0x1, -1, -1, -1, -1, 29, -1 },
    { NULL, "LJavaNetInet6Address;", 0x1, -1, -1, -1, -1, 30, -1 },
    { NULL, "[LJavaNetInetAddress;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LJavaNetInet4Address;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LJavaNetInet6Address;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, 31, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, 32, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 33, 15, -1, -1, 34, -1 },
    { NULL, "[LNSString;", 0x1, 35, 15, -1, -1, -1, -1 },
    { NULL, "[B", 0x21, 36, 15, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x21, 37, 15, -1, -1, -1, -1 },
    { NULL, "LJavaUtilEnumeration;", 0x1, -1, -1, -1, 38, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 39, -1, -1 },
    { NULL, "V", 0x8, 40, 41, 42, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 43, 44, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x20, -1, -1, -1, 45, -1, -1 },
    { NULL, "V", 0x1, 46, 47, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x12, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 48, 49, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 50, 49, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 51, 52, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 53, 52, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 54, 55, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 56, 55, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 57, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 58, 59, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplServiceInfoImpl;", 0x1, 60, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 61, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, 62, 63, -1, 64, -1, -1 },
    { NULL, "V", 0x1, 65, 66, 67, -1, -1, -1 },
    { NULL, "V", 0x1, 65, 18, 67, 68, -1, -1 },
    { NULL, "V", 0x0, 69, 66, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 70, 18, -1, 71, -1, -1 },
    { NULL, "V", 0x1, 72, 73, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplJmDNSImpl;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 74, 75, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplServiceInfoImpl_Delegate;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 76, 77, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withNSString:withNSString:withInt:withInt:withInt:withBoolean:withNSString:);
  methods[1].selector = @selector(initWithNSString:withNSString:withNSString:withInt:withInt:withInt:withBoolean:withJavaUtilMap:);
  methods[2].selector = @selector(initWithNSString:withNSString:withNSString:withInt:withInt:withInt:withBoolean:withByteArray:);
  methods[3].selector = @selector(initWithJavaUtilMap:withInt:withInt:withInt:withBoolean:withJavaUtilMap:);
  methods[4].selector = @selector(initWithJavaUtilMap:withInt:withInt:withInt:withBoolean:withNSString:);
  methods[5].selector = @selector(initWithJavaUtilMap:withInt:withInt:withInt:withBoolean:withByteArray:);
  methods[6].selector = @selector(initWithJavaxJmdnsServiceInfo:);
  methods[7].selector = @selector(decodeQualifiedNameMapWithNSString:withNSString:withNSString:);
  methods[8].selector = @selector(decodeQualifiedNameMapForTypeWithNSString:);
  methods[9].selector = @selector(checkQualifiedNameMapWithJavaUtilMap:);
  methods[10].selector = @selector(removeSeparatorsWithNSString:);
  methods[11].selector = @selector(getType);
  methods[12].selector = @selector(getTypeWithSubtype);
  methods[13].selector = @selector(getName);
  methods[14].selector = @selector(getKey);
  methods[15].selector = @selector(setNameWithNSString:);
  methods[16].selector = @selector(getQualifiedName);
  methods[17].selector = @selector(getServer);
  methods[18].selector = @selector(setServerWithNSString:);
  methods[19].selector = @selector(getHostAddress);
  methods[20].selector = @selector(getHostAddresses);
  methods[21].selector = @selector(addAddressWithJavaNetInet4Address:);
  methods[22].selector = @selector(addAddressWithJavaNetInet6Address:);
  methods[23].selector = @selector(getAddress);
  methods[24].selector = @selector(getInetAddress);
  methods[25].selector = @selector(getInet4Address);
  methods[26].selector = @selector(getInet6Address);
  methods[27].selector = @selector(getInetAddresses);
  methods[28].selector = @selector(getInet4Addresses);
  methods[29].selector = @selector(getInet6Addresses);
  methods[30].selector = @selector(getPort);
  methods[31].selector = @selector(getPriority);
  methods[32].selector = @selector(getWeight);
  methods[33].selector = @selector(getTextBytes);
  methods[34].selector = @selector(getTextString);
  methods[35].selector = @selector(getURL);
  methods[36].selector = @selector(getURLs);
  methods[37].selector = @selector(getURLWithNSString:);
  methods[38].selector = @selector(getURLsWithNSString:);
  methods[39].selector = @selector(getPropertyBytesWithNSString:);
  methods[40].selector = @selector(getPropertyStringWithNSString:);
  methods[41].selector = @selector(getPropertyNames);
  methods[42].selector = @selector(getApplication);
  methods[43].selector = @selector(getDomain);
  methods[44].selector = @selector(getProtocol);
  methods[45].selector = @selector(getSubtype);
  methods[46].selector = @selector(getQualifiedNameMap);
  methods[47].selector = @selector(writeUTFWithJavaIoOutputStream:withNSString:);
  methods[48].selector = @selector(readUTFWithByteArray:withInt:withInt:);
  methods[49].selector = @selector(getProperties);
  methods[50].selector = @selector(updateRecordWithJavaxJmdnsImplDNSCache:withLong:withJavaxJmdnsImplDNSEntry:);
  methods[51].selector = @selector(hasData);
  methods[52].selector = @selector(hasInetAddress);
  methods[53].selector = @selector(advanceStateWithJavaxJmdnsImplTasksDNSTask:);
  methods[54].selector = @selector(revertState);
  methods[55].selector = @selector(cancelState);
  methods[56].selector = @selector(closeState);
  methods[57].selector = @selector(recoverState);
  methods[58].selector = @selector(removeAssociationWithTaskWithJavaxJmdnsImplTasksDNSTask:);
  methods[59].selector = @selector(associateWithTaskWithJavaxJmdnsImplTasksDNSTask:withJavaxJmdnsImplConstantsDNSState:);
  methods[60].selector = @selector(isAssociatedWithTaskWithJavaxJmdnsImplTasksDNSTask:withJavaxJmdnsImplConstantsDNSState:);
  methods[61].selector = @selector(isProbing);
  methods[62].selector = @selector(isAnnouncing);
  methods[63].selector = @selector(isAnnounced);
  methods[64].selector = @selector(isCanceling);
  methods[65].selector = @selector(isCanceled);
  methods[66].selector = @selector(isClosing);
  methods[67].selector = @selector(isClosed);
  methods[68].selector = @selector(waitForAnnouncedWithLong:);
  methods[69].selector = @selector(waitForCanceledWithLong:);
  methods[70].selector = @selector(hash);
  methods[71].selector = @selector(isEqual:);
  methods[72].selector = @selector(getNiceTextString);
  methods[73].selector = @selector(java_clone);
  methods[74].selector = @selector(description);
  methods[75].selector = @selector(answersWithBoolean:withInt:withJavaxJmdnsImplHostInfo:);
  methods[76].selector = @selector(setTextWithByteArray:);
  methods[77].selector = @selector(setTextWithJavaUtilMap:);
  methods[78].selector = @selector(_setTextWithByteArray:);
  methods[79].selector = @selector(textFromPropertiesWithJavaUtilMap:);
  methods[80].selector = @selector(setDnsWithJavaxJmdnsImplJmDNSImpl:);
  methods[81].selector = @selector(getDns);
  methods[82].selector = @selector(isPersistent);
  methods[83].selector = @selector(setNeedTextAnnouncingWithBoolean:);
  methods[84].selector = @selector(needTextAnnouncing);
  methods[85].selector = @selector(getDelegate);
  methods[86].selector = @selector(setDelegateWithJavaxJmdnsImplServiceInfoImpl_Delegate:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0xa, -1, 78, -1, -1 },
    { "_domain_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_protocol_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_application_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_name_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_subtype_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_server_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_port_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_weight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_priority_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_text_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_props_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 79, -1 },
    { "_ipv4Addresses_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 80, -1 },
    { "_ipv6Addresses_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 81, -1 },
    { "_key_", "LNSString;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "_persistent_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_needTextAnnouncing_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_state_", "LJavaxJmdnsImplServiceInfoImpl_ServiceInfoState;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_delegate_", "LJavaxJmdnsImplServiceInfoImpl_Delegate;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;LNSString;IIIZLNSString;", "LNSString;LNSString;LNSString;IIIZLJavaUtilMap;", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIIZLjava/util/Map<Ljava/lang/String;*>;)V", "LNSString;LNSString;LNSString;IIIZ[B", "LJavaUtilMap;IIIZLJavaUtilMap;", "(Ljava/util/Map<Ljavax/jmdns/ServiceInfo$Fields;Ljava/lang/String;>;IIIZLjava/util/Map<Ljava/lang/String;*>;)V", "LJavaUtilMap;IIIZLNSString;", "(Ljava/util/Map<Ljavax/jmdns/ServiceInfo$Fields;Ljava/lang/String;>;IIIZLjava/lang/String;)V", "LJavaUtilMap;IIIZ[B", "(Ljava/util/Map<Ljavax/jmdns/ServiceInfo$Fields;Ljava/lang/String;>;IIIZ[B)V", "LJavaxJmdnsServiceInfo;", "decodeQualifiedNameMap", "LNSString;LNSString;LNSString;", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/util/Map<Ljavax/jmdns/ServiceInfo$Fields;Ljava/lang/String;>;", "decodeQualifiedNameMapForType", "LNSString;", "(Ljava/lang/String;)Ljava/util/Map<Ljavax/jmdns/ServiceInfo$Fields;Ljava/lang/String;>;", "checkQualifiedNameMap", "LJavaUtilMap;", "(Ljava/util/Map<Ljavax/jmdns/ServiceInfo$Fields;Ljava/lang/String;>;)Ljava/util/Map<Ljavax/jmdns/ServiceInfo$Fields;Ljava/lang/String;>;", "removeSeparators", "setName", "setServer", (void *)&JavaxJmdnsImplServiceInfoImpl__Annotations$0, "addAddress", "LJavaNetInet4Address;", "LJavaNetInet6Address;", (void *)&JavaxJmdnsImplServiceInfoImpl__Annotations$1, (void *)&JavaxJmdnsImplServiceInfoImpl__Annotations$2, (void *)&JavaxJmdnsImplServiceInfoImpl__Annotations$3, (void *)&JavaxJmdnsImplServiceInfoImpl__Annotations$4, (void *)&JavaxJmdnsImplServiceInfoImpl__Annotations$5, (void *)&JavaxJmdnsImplServiceInfoImpl__Annotations$6, "getURL", (void *)&JavaxJmdnsImplServiceInfoImpl__Annotations$7, "getURLs", "getPropertyBytes", "getPropertyString", "()Ljava/util/Enumeration<Ljava/lang/String;>;", "()Ljava/util/Map<Ljavax/jmdns/ServiceInfo$Fields;Ljava/lang/String;>;", "writeUTF", "LJavaIoOutputStream;LNSString;", "LJavaIoIOException;", "readUTF", "[BII", "()Ljava/util/Map<Ljava/lang/String;[B>;", "updateRecord", "LJavaxJmdnsImplDNSCache;JLJavaxJmdnsImplDNSEntry;", "advanceState", "LJavaxJmdnsImplTasksDNSTask;", "removeAssociationWithTask", "associateWithTask", "LJavaxJmdnsImplTasksDNSTask;LJavaxJmdnsImplConstantsDNSState;", "isAssociatedWithTask", "waitForAnnounced", "J", "waitForCanceled", "hashCode", "equals", "LNSObject;", "clone", "toString", "answers", "ZILJavaxJmdnsImplHostInfo;", "(ZILjavax/jmdns/impl/HostInfo;)Ljava/util/Collection<Ljavax/jmdns/impl/DNSRecord;>;", "setText", "[B", "LJavaLangIllegalStateException;", "(Ljava/util/Map<Ljava/lang/String;*>;)V", "_setText", "textFromProperties", "(Ljava/util/Map<Ljava/lang/String;*>;)[B", "setDns", "LJavaxJmdnsImplJmDNSImpl;", "setNeedTextAnnouncing", "Z", "setDelegate", "LJavaxJmdnsImplServiceInfoImpl_Delegate;", &JavaxJmdnsImplServiceInfoImpl_logger, "Ljava/util/Map<Ljava/lang/String;[B>;", "Ljava/util/Set<Ljava/net/Inet4Address;>;", "Ljava/util/Set<Ljava/net/Inet6Address;>;", "LJavaxJmdnsImplServiceInfoImpl_Delegate;LJavaxJmdnsImplServiceInfoImpl_ServiceInfoState;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplServiceInfoImpl = { "ServiceInfoImpl", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x1, 87, 19, -1, 82, -1, -1, -1 };
  return &_JavaxJmdnsImplServiceInfoImpl;
}

+ (void)initialize {
  if (self == [JavaxJmdnsImplServiceInfoImpl class]) {
    JavaxJmdnsImplServiceInfoImpl_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([JavaxJmdnsImplServiceInfoImpl_class_() getName]);
    J2OBJC_SET_INITIALIZED(JavaxJmdnsImplServiceInfoImpl)
  }
}

@end

void JavaxJmdnsImplServiceInfoImpl_initWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withNSString_(JavaxJmdnsImplServiceInfoImpl *self, NSString *type, NSString *name, NSString *subtype, jint port, jint weight, jint priority, jboolean persistent, NSString *text) {
  JavaxJmdnsImplServiceInfoImpl_initWithJavaUtilMap_withInt_withInt_withInt_withBoolean_withByteArray_(self, JavaxJmdnsImplServiceInfoImpl_decodeQualifiedNameMapWithNSString_withNSString_withNSString_(type, name, subtype), port, weight, priority, persistent, nil);
  self->_server_ = text;
  @try {
    JavaIoByteArrayOutputStream *out = new_JavaIoByteArrayOutputStream_initWithInt_([((NSString *) nil_chk(text)) java_length]);
    JavaxJmdnsImplServiceInfoImpl_writeUTFWithJavaIoOutputStream_withNSString_(out, text);
    self->_text_ = [out toByteArray];
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@", @"unexpected exception: ", e));
  }
}

JavaxJmdnsImplServiceInfoImpl *new_JavaxJmdnsImplServiceInfoImpl_initWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withNSString_(NSString *type, NSString *name, NSString *subtype, jint port, jint weight, jint priority, jboolean persistent, NSString *text) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplServiceInfoImpl, initWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withNSString_, type, name, subtype, port, weight, priority, persistent, text)
}

JavaxJmdnsImplServiceInfoImpl *create_JavaxJmdnsImplServiceInfoImpl_initWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withNSString_(NSString *type, NSString *name, NSString *subtype, jint port, jint weight, jint priority, jboolean persistent, NSString *text) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplServiceInfoImpl, initWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withNSString_, type, name, subtype, port, weight, priority, persistent, text)
}

void JavaxJmdnsImplServiceInfoImpl_initWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withJavaUtilMap_(JavaxJmdnsImplServiceInfoImpl *self, NSString *type, NSString *name, NSString *subtype, jint port, jint weight, jint priority, jboolean persistent, id<JavaUtilMap> props) {
  JavaxJmdnsImplServiceInfoImpl_initWithJavaUtilMap_withInt_withInt_withInt_withBoolean_withByteArray_(self, JavaxJmdnsImplServiceInfoImpl_decodeQualifiedNameMapWithNSString_withNSString_withNSString_(type, name, subtype), port, weight, priority, persistent, JavaxJmdnsImplServiceInfoImpl_textFromPropertiesWithJavaUtilMap_(props));
}

JavaxJmdnsImplServiceInfoImpl *new_JavaxJmdnsImplServiceInfoImpl_initWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withJavaUtilMap_(NSString *type, NSString *name, NSString *subtype, jint port, jint weight, jint priority, jboolean persistent, id<JavaUtilMap> props) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplServiceInfoImpl, initWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withJavaUtilMap_, type, name, subtype, port, weight, priority, persistent, props)
}

JavaxJmdnsImplServiceInfoImpl *create_JavaxJmdnsImplServiceInfoImpl_initWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withJavaUtilMap_(NSString *type, NSString *name, NSString *subtype, jint port, jint weight, jint priority, jboolean persistent, id<JavaUtilMap> props) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplServiceInfoImpl, initWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withJavaUtilMap_, type, name, subtype, port, weight, priority, persistent, props)
}

void JavaxJmdnsImplServiceInfoImpl_initWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withByteArray_(JavaxJmdnsImplServiceInfoImpl *self, NSString *type, NSString *name, NSString *subtype, jint port, jint weight, jint priority, jboolean persistent, IOSByteArray *text) {
  JavaxJmdnsImplServiceInfoImpl_initWithJavaUtilMap_withInt_withInt_withInt_withBoolean_withByteArray_(self, JavaxJmdnsImplServiceInfoImpl_decodeQualifiedNameMapWithNSString_withNSString_withNSString_(type, name, subtype), port, weight, priority, persistent, text);
}

JavaxJmdnsImplServiceInfoImpl *new_JavaxJmdnsImplServiceInfoImpl_initWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withByteArray_(NSString *type, NSString *name, NSString *subtype, jint port, jint weight, jint priority, jboolean persistent, IOSByteArray *text) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplServiceInfoImpl, initWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withByteArray_, type, name, subtype, port, weight, priority, persistent, text)
}

JavaxJmdnsImplServiceInfoImpl *create_JavaxJmdnsImplServiceInfoImpl_initWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withByteArray_(NSString *type, NSString *name, NSString *subtype, jint port, jint weight, jint priority, jboolean persistent, IOSByteArray *text) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplServiceInfoImpl, initWithNSString_withNSString_withNSString_withInt_withInt_withInt_withBoolean_withByteArray_, type, name, subtype, port, weight, priority, persistent, text)
}

void JavaxJmdnsImplServiceInfoImpl_initWithJavaUtilMap_withInt_withInt_withInt_withBoolean_withJavaUtilMap_(JavaxJmdnsImplServiceInfoImpl *self, id<JavaUtilMap> qualifiedNameMap, jint port, jint weight, jint priority, jboolean persistent, id<JavaUtilMap> props) {
  JavaxJmdnsImplServiceInfoImpl_initWithJavaUtilMap_withInt_withInt_withInt_withBoolean_withByteArray_(self, qualifiedNameMap, port, weight, priority, persistent, JavaxJmdnsImplServiceInfoImpl_textFromPropertiesWithJavaUtilMap_(props));
}

JavaxJmdnsImplServiceInfoImpl *new_JavaxJmdnsImplServiceInfoImpl_initWithJavaUtilMap_withInt_withInt_withInt_withBoolean_withJavaUtilMap_(id<JavaUtilMap> qualifiedNameMap, jint port, jint weight, jint priority, jboolean persistent, id<JavaUtilMap> props) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplServiceInfoImpl, initWithJavaUtilMap_withInt_withInt_withInt_withBoolean_withJavaUtilMap_, qualifiedNameMap, port, weight, priority, persistent, props)
}

JavaxJmdnsImplServiceInfoImpl *create_JavaxJmdnsImplServiceInfoImpl_initWithJavaUtilMap_withInt_withInt_withInt_withBoolean_withJavaUtilMap_(id<JavaUtilMap> qualifiedNameMap, jint port, jint weight, jint priority, jboolean persistent, id<JavaUtilMap> props) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplServiceInfoImpl, initWithJavaUtilMap_withInt_withInt_withInt_withBoolean_withJavaUtilMap_, qualifiedNameMap, port, weight, priority, persistent, props)
}

void JavaxJmdnsImplServiceInfoImpl_initWithJavaUtilMap_withInt_withInt_withInt_withBoolean_withNSString_(JavaxJmdnsImplServiceInfoImpl *self, id<JavaUtilMap> qualifiedNameMap, jint port, jint weight, jint priority, jboolean persistent, NSString *text) {
  JavaxJmdnsImplServiceInfoImpl_initWithJavaUtilMap_withInt_withInt_withInt_withBoolean_withByteArray_(self, qualifiedNameMap, port, weight, priority, persistent, nil);
  self->_server_ = text;
  @try {
    JavaIoByteArrayOutputStream *out = new_JavaIoByteArrayOutputStream_initWithInt_([((NSString *) nil_chk(text)) java_length]);
    JavaxJmdnsImplServiceInfoImpl_writeUTFWithJavaIoOutputStream_withNSString_(out, text);
    self->_text_ = [out toByteArray];
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@", @"unexpected exception: ", e));
  }
}

JavaxJmdnsImplServiceInfoImpl *new_JavaxJmdnsImplServiceInfoImpl_initWithJavaUtilMap_withInt_withInt_withInt_withBoolean_withNSString_(id<JavaUtilMap> qualifiedNameMap, jint port, jint weight, jint priority, jboolean persistent, NSString *text) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplServiceInfoImpl, initWithJavaUtilMap_withInt_withInt_withInt_withBoolean_withNSString_, qualifiedNameMap, port, weight, priority, persistent, text)
}

JavaxJmdnsImplServiceInfoImpl *create_JavaxJmdnsImplServiceInfoImpl_initWithJavaUtilMap_withInt_withInt_withInt_withBoolean_withNSString_(id<JavaUtilMap> qualifiedNameMap, jint port, jint weight, jint priority, jboolean persistent, NSString *text) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplServiceInfoImpl, initWithJavaUtilMap_withInt_withInt_withInt_withBoolean_withNSString_, qualifiedNameMap, port, weight, priority, persistent, text)
}

void JavaxJmdnsImplServiceInfoImpl_initWithJavaUtilMap_withInt_withInt_withInt_withBoolean_withByteArray_(JavaxJmdnsImplServiceInfoImpl *self, id<JavaUtilMap> qualifiedNameMap, jint port, jint weight, jint priority, jboolean persistent, IOSByteArray *text) {
  JavaxJmdnsServiceInfo_init(self);
  id<JavaUtilMap> map = JavaxJmdnsImplServiceInfoImpl_checkQualifiedNameMapWithJavaUtilMap_(qualifiedNameMap);
  self->_domain_ = [((id<JavaUtilMap>) nil_chk(map)) getWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Domain)];
  self->_protocol_ = [map getWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Protocol)];
  self->_application_ = [map getWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Application)];
  self->_name_ = [map getWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Instance)];
  self->_subtype_ = [map getWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Subtype)];
  self->_port_ = port;
  self->_weight_ = weight;
  self->_priority_ = priority;
  self->_text_ = text;
  [self setNeedTextAnnouncingWithBoolean:false];
  self->_state_ = new_JavaxJmdnsImplServiceInfoImpl_ServiceInfoState_initWithJavaxJmdnsImplServiceInfoImpl_(self);
  self->_persistent_ = persistent;
  self->_ipv4Addresses_ = JavaUtilCollections_synchronizedSetWithJavaUtilSet_(new_JavaUtilLinkedHashSet_init());
  self->_ipv6Addresses_ = JavaUtilCollections_synchronizedSetWithJavaUtilSet_(new_JavaUtilLinkedHashSet_init());
}

JavaxJmdnsImplServiceInfoImpl *new_JavaxJmdnsImplServiceInfoImpl_initWithJavaUtilMap_withInt_withInt_withInt_withBoolean_withByteArray_(id<JavaUtilMap> qualifiedNameMap, jint port, jint weight, jint priority, jboolean persistent, IOSByteArray *text) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplServiceInfoImpl, initWithJavaUtilMap_withInt_withInt_withInt_withBoolean_withByteArray_, qualifiedNameMap, port, weight, priority, persistent, text)
}

JavaxJmdnsImplServiceInfoImpl *create_JavaxJmdnsImplServiceInfoImpl_initWithJavaUtilMap_withInt_withInt_withInt_withBoolean_withByteArray_(id<JavaUtilMap> qualifiedNameMap, jint port, jint weight, jint priority, jboolean persistent, IOSByteArray *text) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplServiceInfoImpl, initWithJavaUtilMap_withInt_withInt_withInt_withBoolean_withByteArray_, qualifiedNameMap, port, weight, priority, persistent, text)
}

void JavaxJmdnsImplServiceInfoImpl_initWithJavaxJmdnsServiceInfo_(JavaxJmdnsImplServiceInfoImpl *self, JavaxJmdnsServiceInfo *info) {
  JavaxJmdnsServiceInfo_init(self);
  self->_ipv4Addresses_ = JavaUtilCollections_synchronizedSetWithJavaUtilSet_(new_JavaUtilLinkedHashSet_init());
  self->_ipv6Addresses_ = JavaUtilCollections_synchronizedSetWithJavaUtilSet_(new_JavaUtilLinkedHashSet_init());
  if (info != nil) {
    self->_domain_ = [info getDomain];
    self->_protocol_ = [info getProtocol];
    self->_application_ = [info getApplication];
    self->_name_ = [info getName];
    self->_subtype_ = [info getSubtype];
    self->_port_ = [info getPort];
    self->_weight_ = [info getWeight];
    self->_priority_ = [info getPriority];
    self->_text_ = [info getTextBytes];
    self->_persistent_ = [info isPersistent];
    IOSObjectArray *ipv6Addresses = [info getInet6Addresses];
    {
      IOSObjectArray *a__ = ipv6Addresses;
      JavaNetInet6Address * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      JavaNetInet6Address * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        JavaNetInet6Address *address = *b__++;
        [((id<JavaUtilSet>) nil_chk(self->_ipv6Addresses_)) addWithId:address];
      }
    }
    IOSObjectArray *ipv4Addresses = [info getInet4Addresses];
    {
      IOSObjectArray *a__ = ipv4Addresses;
      JavaNetInet4Address * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      JavaNetInet4Address * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        JavaNetInet4Address *address = *b__++;
        [((id<JavaUtilSet>) nil_chk(self->_ipv4Addresses_)) addWithId:address];
      }
    }
  }
  self->_state_ = new_JavaxJmdnsImplServiceInfoImpl_ServiceInfoState_initWithJavaxJmdnsImplServiceInfoImpl_(self);
}

JavaxJmdnsImplServiceInfoImpl *new_JavaxJmdnsImplServiceInfoImpl_initWithJavaxJmdnsServiceInfo_(JavaxJmdnsServiceInfo *info) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplServiceInfoImpl, initWithJavaxJmdnsServiceInfo_, info)
}

JavaxJmdnsImplServiceInfoImpl *create_JavaxJmdnsImplServiceInfoImpl_initWithJavaxJmdnsServiceInfo_(JavaxJmdnsServiceInfo *info) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplServiceInfoImpl, initWithJavaxJmdnsServiceInfo_, info)
}

id<JavaUtilMap> JavaxJmdnsImplServiceInfoImpl_decodeQualifiedNameMapWithNSString_withNSString_withNSString_(NSString *type, NSString *name, NSString *subtype) {
  JavaxJmdnsImplServiceInfoImpl_initialize();
  id<JavaUtilMap> qualifiedNameMap = JavaxJmdnsImplServiceInfoImpl_decodeQualifiedNameMapForTypeWithNSString_(type);
  (void) [((id<JavaUtilMap>) nil_chk(qualifiedNameMap)) putWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Instance) withId:name];
  (void) [qualifiedNameMap putWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Subtype) withId:subtype];
  return JavaxJmdnsImplServiceInfoImpl_checkQualifiedNameMapWithJavaUtilMap_(qualifiedNameMap);
}

id<JavaUtilMap> JavaxJmdnsImplServiceInfoImpl_decodeQualifiedNameMapForTypeWithNSString_(NSString *type) {
  JavaxJmdnsImplServiceInfoImpl_initialize();
  jint index;
  NSString *casePreservedType = type;
  NSString *aType = [((NSString *) nil_chk(type)) lowercaseString];
  NSString *application = aType;
  NSString *protocol = @"";
  NSString *subtype = @"";
  NSString *name = @"";
  NSString *domain = @"";
  if ([((NSString *) nil_chk(aType)) java_contains:@"in-addr.arpa"] || [aType java_contains:@"ip6.arpa"]) {
    index = ([aType java_contains:@"in-addr.arpa"] ? [aType java_indexOfString:@"in-addr.arpa"] : [aType java_indexOfString:@"ip6.arpa"]);
    name = JavaxJmdnsImplServiceInfoImpl_removeSeparatorsWithNSString_([((NSString *) nil_chk(casePreservedType)) java_substring:0 endIndex:index]);
    domain = [casePreservedType java_substring:index];
    application = @"";
  }
  else if ((![aType java_contains:@"_"]) && [aType java_contains:@"."]) {
    index = [aType java_indexOf:'.'];
    name = JavaxJmdnsImplServiceInfoImpl_removeSeparatorsWithNSString_([((NSString *) nil_chk(casePreservedType)) java_substring:0 endIndex:index]);
    domain = JavaxJmdnsImplServiceInfoImpl_removeSeparatorsWithNSString_([casePreservedType java_substring:index]);
    application = @"";
  }
  else {
    if (![aType java_hasPrefix:@"_"] || [aType java_hasPrefix:@"_services"]) {
      index = [aType java_indexOf:'.'];
      if (index > 0) {
        name = [((NSString *) nil_chk(casePreservedType)) java_substring:0 endIndex:index];
        if (index + 1 < [aType java_length]) {
          aType = [aType java_substring:index + 1];
          casePreservedType = [casePreservedType java_substring:index + 1];
        }
      }
    }
    index = [((NSString *) nil_chk(aType)) java_lastIndexOfString:@"._"];
    if (index > 0) {
      jint start = index + 2;
      jint end = [aType java_indexOf:'.' fromIndex:start];
      protocol = [((NSString *) nil_chk(casePreservedType)) java_substring:start endIndex:end];
    }
    if ([((NSString *) nil_chk(protocol)) java_length] > 0) {
      index = [aType java_indexOfString:JreStrcat("C$C", '_', [protocol lowercaseString], '.')];
      jint start = index + [protocol java_length] + 2;
      jint end = [aType java_length] - ([aType java_hasSuffix:@"."] ? 1 : 0);
      domain = [((NSString *) nil_chk(casePreservedType)) java_substring:start endIndex:end];
      application = [casePreservedType java_substring:0 endIndex:index - 1];
    }
    index = [((NSString *) nil_chk([((NSString *) nil_chk(application)) lowercaseString])) java_indexOfString:@"._sub"];
    if (index > 0) {
      jint start = index + 5;
      subtype = JavaxJmdnsImplServiceInfoImpl_removeSeparatorsWithNSString_([application java_substring:0 endIndex:index]);
      application = [application java_substring:start];
    }
  }
  id<JavaUtilMap> qualifiedNameMap = new_JavaUtilHashMap_initWithInt_(5);
  (void) [qualifiedNameMap putWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Domain) withId:JavaxJmdnsImplServiceInfoImpl_removeSeparatorsWithNSString_(domain)];
  (void) [qualifiedNameMap putWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Protocol) withId:protocol];
  (void) [qualifiedNameMap putWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Application) withId:JavaxJmdnsImplServiceInfoImpl_removeSeparatorsWithNSString_(application)];
  (void) [qualifiedNameMap putWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Instance) withId:name];
  (void) [qualifiedNameMap putWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Subtype) withId:subtype];
  return qualifiedNameMap;
}

id<JavaUtilMap> JavaxJmdnsImplServiceInfoImpl_checkQualifiedNameMapWithJavaUtilMap_(id<JavaUtilMap> qualifiedNameMap) {
  JavaxJmdnsImplServiceInfoImpl_initialize();
  id<JavaUtilMap> checkedQualifiedNameMap = new_JavaUtilHashMap_initWithInt_(5);
  NSString *domain = ([((id<JavaUtilMap>) nil_chk(qualifiedNameMap)) containsKeyWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Domain)] ? [qualifiedNameMap getWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Domain)] : @"local");
  if ((domain == nil) || ([domain java_length] == 0)) {
    domain = @"local";
  }
  domain = JavaxJmdnsImplServiceInfoImpl_removeSeparatorsWithNSString_(domain);
  (void) [checkedQualifiedNameMap putWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Domain) withId:domain];
  NSString *protocol = ([qualifiedNameMap containsKeyWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Protocol)] ? [qualifiedNameMap getWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Protocol)] : @"tcp");
  if ((protocol == nil) || ([protocol java_length] == 0)) {
    protocol = @"tcp";
  }
  protocol = JavaxJmdnsImplServiceInfoImpl_removeSeparatorsWithNSString_(protocol);
  (void) [checkedQualifiedNameMap putWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Protocol) withId:protocol];
  NSString *application = ([qualifiedNameMap containsKeyWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Application)] ? [qualifiedNameMap getWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Application)] : @"");
  if ((application == nil) || ([application java_length] == 0)) {
    application = @"";
  }
  application = JavaxJmdnsImplServiceInfoImpl_removeSeparatorsWithNSString_(application);
  (void) [checkedQualifiedNameMap putWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Application) withId:application];
  NSString *instance = ([qualifiedNameMap containsKeyWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Instance)] ? [qualifiedNameMap getWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Instance)] : @"");
  if ((instance == nil) || ([instance java_length] == 0)) {
    instance = @"";
  }
  instance = JavaxJmdnsImplServiceInfoImpl_removeSeparatorsWithNSString_(instance);
  (void) [checkedQualifiedNameMap putWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Instance) withId:instance];
  NSString *subtype = ([qualifiedNameMap containsKeyWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Subtype)] ? [qualifiedNameMap getWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Subtype)] : @"");
  if ((subtype == nil) || ([subtype java_length] == 0)) {
    subtype = @"";
  }
  subtype = JavaxJmdnsImplServiceInfoImpl_removeSeparatorsWithNSString_(subtype);
  (void) [checkedQualifiedNameMap putWithId:JreLoadEnum(JavaxJmdnsServiceInfo_Fields, Subtype) withId:subtype];
  return checkedQualifiedNameMap;
}

NSString *JavaxJmdnsImplServiceInfoImpl_removeSeparatorsWithNSString_(NSString *name) {
  JavaxJmdnsImplServiceInfoImpl_initialize();
  if (name == nil) {
    return @"";
  }
  NSString *newName = [name java_trim];
  if ([((NSString *) nil_chk(newName)) java_hasPrefix:@"."]) {
    newName = [newName java_substring:1];
  }
  if ([((NSString *) nil_chk(newName)) java_hasPrefix:@"_"]) {
    newName = [newName java_substring:1];
  }
  if ([((NSString *) nil_chk(newName)) java_hasSuffix:@"."]) {
    newName = [newName java_substring:0 endIndex:[newName java_length] - 1];
  }
  return newName;
}

void JavaxJmdnsImplServiceInfoImpl_writeUTFWithJavaIoOutputStream_withNSString_(JavaIoOutputStream *outArg, NSString *str) {
  JavaxJmdnsImplServiceInfoImpl_initialize();
  for (jint i = 0, len = [((NSString *) nil_chk(str)) java_length]; i < len; i++) {
    jint c = [str charAtWithInt:i];
    if ((c >= (jint) 0x0001) && (c <= (jint) 0x007F)) {
      [((JavaIoOutputStream *) nil_chk(outArg)) writeWithInt:c];
    }
    else {
      if (c > (jint) 0x07FF) {
        [((JavaIoOutputStream *) nil_chk(outArg)) writeWithInt:(jint) 0xE0 | ((JreRShift32(c, 12)) & (jint) 0x0F)];
        [outArg writeWithInt:(jint) 0x80 | ((JreRShift32(c, 6)) & (jint) 0x3F)];
        [outArg writeWithInt:(jint) 0x80 | ((JreRShift32(c, 0)) & (jint) 0x3F)];
      }
      else {
        [((JavaIoOutputStream *) nil_chk(outArg)) writeWithInt:(jint) 0xC0 | ((JreRShift32(c, 6)) & (jint) 0x1F)];
        [outArg writeWithInt:(jint) 0x80 | ((JreRShift32(c, 0)) & (jint) 0x3F)];
      }
    }
  }
}

jboolean JavaxJmdnsImplServiceInfoImpl_hasInetAddress(JavaxJmdnsImplServiceInfoImpl *self) {
  return [((id<JavaUtilSet>) nil_chk(self->_ipv4Addresses_)) size] > 0 || [((id<JavaUtilSet>) nil_chk(self->_ipv6Addresses_)) size] > 0;
}

IOSByteArray *JavaxJmdnsImplServiceInfoImpl_textFromPropertiesWithJavaUtilMap_(id<JavaUtilMap> props) {
  JavaxJmdnsImplServiceInfoImpl_initialize();
  IOSByteArray *text = nil;
  if (props != nil) {
    @try {
      JavaIoByteArrayOutputStream *out = new_JavaIoByteArrayOutputStream_initWithInt_(256);
      for (NSString * __strong key in nil_chk([props keySet])) {
        id val = [props getWithId:key];
        JavaIoByteArrayOutputStream *out2 = new_JavaIoByteArrayOutputStream_initWithInt_(100);
        JavaxJmdnsImplServiceInfoImpl_writeUTFWithJavaIoOutputStream_withNSString_(out2, key);
        if (val == nil) {
        }
        else if ([val isKindOfClass:[NSString class]]) {
          [out2 writeWithInt:'='];
          JavaxJmdnsImplServiceInfoImpl_writeUTFWithJavaIoOutputStream_withNSString_(out2, (NSString *) cast_chk(val, [NSString class]));
        }
        else if ([val isKindOfClass:[IOSByteArray class]]) {
          IOSByteArray *bval = (IOSByteArray *) cast_chk(val, [IOSByteArray class]);
          if (bval->size_ > 0) {
            [out2 writeWithInt:'='];
            [out2 writeWithByteArray:bval withInt:0 withInt:bval->size_];
          }
          else {
            val = nil;
          }
        }
        else {
          @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"invalid property value: ", val));
        }
        IOSByteArray *data = [out2 toByteArray];
        if (((IOSByteArray *) nil_chk(data))->size_ > 255) {
          @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$$", @"Cannot have individual values larger that 255 chars. Offending value: ", key, (val != nil ? @"" : JreStrcat("C@", '=', val))));
        }
        [out writeWithInt:(jbyte) data->size_];
        [out writeWithByteArray:data withInt:0 withInt:data->size_];
      }
      text = [out toByteArray];
    }
    @catch (JavaIoIOException *e) {
      @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@", @"unexpected exception: ", e));
    }
  }
  return (text != nil && text->size_ > 0 ? text : JreLoadStatic(JavaxJmdnsImplDNSRecord, EMPTY_TXT));
}

IOSObjectArray *JavaxJmdnsImplServiceInfoImpl__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *JavaxJmdnsImplServiceInfoImpl__Annotations$1() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *JavaxJmdnsImplServiceInfoImpl__Annotations$2() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *JavaxJmdnsImplServiceInfoImpl__Annotations$3() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *JavaxJmdnsImplServiceInfoImpl__Annotations$4() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *JavaxJmdnsImplServiceInfoImpl__Annotations$5() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *JavaxJmdnsImplServiceInfoImpl__Annotations$6() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *JavaxJmdnsImplServiceInfoImpl__Annotations$7() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplServiceInfoImpl)

@implementation JavaxJmdnsImplServiceInfoImpl_Delegate

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(textValueUpdatedWithJavaxJmdnsServiceInfo:withByteArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "textValueUpdated", "LJavaxJmdnsServiceInfo;[B", "LJavaxJmdnsImplServiceInfoImpl;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplServiceInfoImpl_Delegate = { "Delegate", "javax.jmdns.impl", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_JavaxJmdnsImplServiceInfoImpl_Delegate;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(JavaxJmdnsImplServiceInfoImpl_Delegate)

@implementation JavaxJmdnsImplServiceInfoImpl_ServiceInfoState

- (instancetype)initWithJavaxJmdnsImplServiceInfoImpl:(JavaxJmdnsImplServiceInfoImpl *)info {
  JavaxJmdnsImplServiceInfoImpl_ServiceInfoState_initWithJavaxJmdnsImplServiceInfoImpl_(self, info);
  return self;
}

- (void)setTaskWithJavaxJmdnsImplTasksDNSTask:(JavaxJmdnsImplTasksDNSTask *)task {
  [super setTaskWithJavaxJmdnsImplTasksDNSTask:task];
  if ((JreLoadVolatileId(&self->_task_) == nil) && [((JavaxJmdnsImplServiceInfoImpl *) nil_chk(_info_)) needTextAnnouncing]) {
    [self lock];
    @try {
      if ((JreLoadVolatileId(&self->_task_) == nil) && [((JavaxJmdnsImplServiceInfoImpl *) nil_chk(_info_)) needTextAnnouncing]) {
        if ([((JavaxJmdnsImplConstantsDNSState *) nil_chk(JreLoadVolatileId(&self->_state_))) isAnnounced]) {
          [self setStateWithJavaxJmdnsImplConstantsDNSState:JreLoadEnum(JavaxJmdnsImplConstantsDNSState, ANNOUNCING_1)];
          if ([self getDns] != nil) {
            [((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) startAnnouncer];
          }
        }
        [((JavaxJmdnsImplServiceInfoImpl *) nil_chk(_info_)) setNeedTextAnnouncingWithBoolean:false];
      }
    }
    @finally {
      [self unlock];
    }
  }
}

- (void)setDnsWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)dns {
  [super setDnsWithJavaxJmdnsImplJmDNSImpl:dns];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaxJmdnsImplServiceInfoImpl:);
  methods[1].selector = @selector(setTaskWithJavaxJmdnsImplTasksDNSTask:);
  methods[2].selector = @selector(setDnsWithJavaxJmdnsImplJmDNSImpl:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = JavaxJmdnsImplServiceInfoImpl_ServiceInfoState_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "_info_", "LJavaxJmdnsImplServiceInfoImpl;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaxJmdnsImplServiceInfoImpl;", "setTask", "LJavaxJmdnsImplTasksDNSTask;", "setDns", "LJavaxJmdnsImplJmDNSImpl;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplServiceInfoImpl_ServiceInfoState = { "ServiceInfoState", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x1a, 3, 2, 0, -1, -1, -1, -1 };
  return &_JavaxJmdnsImplServiceInfoImpl_ServiceInfoState;
}

@end

void JavaxJmdnsImplServiceInfoImpl_ServiceInfoState_initWithJavaxJmdnsImplServiceInfoImpl_(JavaxJmdnsImplServiceInfoImpl_ServiceInfoState *self, JavaxJmdnsImplServiceInfoImpl *info) {
  JavaxJmdnsImplDNSStatefulObject_DefaultImplementation_init(self);
  self->_info_ = info;
}

JavaxJmdnsImplServiceInfoImpl_ServiceInfoState *new_JavaxJmdnsImplServiceInfoImpl_ServiceInfoState_initWithJavaxJmdnsImplServiceInfoImpl_(JavaxJmdnsImplServiceInfoImpl *info) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplServiceInfoImpl_ServiceInfoState, initWithJavaxJmdnsImplServiceInfoImpl_, info)
}

JavaxJmdnsImplServiceInfoImpl_ServiceInfoState *create_JavaxJmdnsImplServiceInfoImpl_ServiceInfoState_initWithJavaxJmdnsImplServiceInfoImpl_(JavaxJmdnsImplServiceInfoImpl *info) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplServiceInfoImpl_ServiceInfoState, initWithJavaxJmdnsImplServiceInfoImpl_, info)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplServiceInfoImpl_ServiceInfoState)
