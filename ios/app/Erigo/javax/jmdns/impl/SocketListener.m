//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/jmdns/impl/SocketListener.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Thread.h"
#include "java/net/DatagramPacket.h"
#include "java/net/InetAddress.h"
#include "java/net/MulticastSocket.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "javax/jmdns/impl/DNSIncoming.h"
#include "javax/jmdns/impl/HostInfo.h"
#include "javax/jmdns/impl/JmDNSImpl.h"
#include "javax/jmdns/impl/SocketListener.h"
#include "javax/jmdns/impl/constants/DNSConstants.h"

@interface JavaxJmdnsImplSocketListener () {
 @public
  JavaxJmdnsImplJmDNSImpl *_jmDNSImpl_;
}

@end

J2OBJC_FIELD_SETTER(JavaxJmdnsImplSocketListener, _jmDNSImpl_, JavaxJmdnsImplJmDNSImpl *)

J2OBJC_INITIALIZED_DEFN(JavaxJmdnsImplSocketListener)

JavaUtilLoggingLogger *JavaxJmdnsImplSocketListener_logger;

@implementation JavaxJmdnsImplSocketListener

- (instancetype)initWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)jmDNSImpl {
  JavaxJmdnsImplSocketListener_initWithJavaxJmdnsImplJmDNSImpl_(self, jmDNSImpl);
  return self;
}

- (void)run {
  @try {
    IOSByteArray *buf = [IOSByteArray newArrayWithLength:JavaxJmdnsImplConstantsDNSConstants_MAX_MSG_ABSOLUTE];
    JavaNetDatagramPacket *packet = new_JavaNetDatagramPacket_initWithByteArray_withInt_(buf, buf->size_);
    while (![((JavaxJmdnsImplJmDNSImpl *) nil_chk(self->_jmDNSImpl_)) isCanceling] && ![self->_jmDNSImpl_ isCanceled]) {
      [packet setLengthWithInt:buf->size_];
      [((JavaNetMulticastSocket *) nil_chk([self->_jmDNSImpl_ getSocket])) receiveWithJavaNetDatagramPacket:packet];
      if ([self->_jmDNSImpl_ isCanceling] || [self->_jmDNSImpl_ isCanceled] || [self->_jmDNSImpl_ isClosing] || [self->_jmDNSImpl_ isClosed]) {
        break;
      }
      @try {
        if ([((JavaxJmdnsImplHostInfo *) nil_chk([self->_jmDNSImpl_ getLocalHost])) shouldIgnorePacketWithJavaNetDatagramPacket:packet]) {
          continue;
        }
        JavaxJmdnsImplDNSIncoming *msg = new_JavaxJmdnsImplDNSIncoming_initWithJavaNetDatagramPacket_(packet);
        if ([((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplSocketListener_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINEST)]) {
          [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplSocketListener_logger)) finestWithNSString:JreStrcat("$$$", [self getName], @".run() JmDNS in:", [msg printWithBoolean:true])];
        }
        if ([msg isQuery]) {
          if ([packet getPort] != JreLoadStatic(JavaxJmdnsImplConstantsDNSConstants, MDNS_PORT)) {
            [self->_jmDNSImpl_ handleQueryWithJavaxJmdnsImplDNSIncoming:msg withJavaNetInetAddress:[packet getAddress] withInt:[packet getPort]];
          }
          [self->_jmDNSImpl_ handleQueryWithJavaxJmdnsImplDNSIncoming:msg withJavaNetInetAddress:[self->_jmDNSImpl_ getGroup] withInt:JreLoadStatic(JavaxJmdnsImplConstantsDNSConstants, MDNS_PORT)];
        }
        else {
          [self->_jmDNSImpl_ handleResponseWithJavaxJmdnsImplDNSIncoming:msg];
        }
      }
      @catch (JavaIoIOException *e) {
        [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplSocketListener_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$$", [self getName], @".run() exception ") withNSException:e];
      }
    }
  }
  @catch (JavaIoIOException *e) {
    if (![((JavaxJmdnsImplJmDNSImpl *) nil_chk(self->_jmDNSImpl_)) isCanceling] && ![self->_jmDNSImpl_ isCanceled] && ![self->_jmDNSImpl_ isClosing] && ![self->_jmDNSImpl_ isClosed]) {
      [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplSocketListener_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$$", [self getName], @".run() exception ") withNSException:e];
      [self->_jmDNSImpl_ recover];
    }
  }
  if ([((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplSocketListener_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINEST)]) {
    [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplSocketListener_logger)) finestWithNSString:JreStrcat("$$", [self getName], @".run() exiting.")];
  }
}

- (JavaxJmdnsImplJmDNSImpl *)getDns {
  return _jmDNSImpl_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplJmDNSImpl;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaxJmdnsImplJmDNSImpl:);
  methods[1].selector = @selector(run);
  methods[2].selector = @selector(getDns);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x8, -1, 1, -1, -1 },
    { "_jmDNSImpl_", "LJavaxJmdnsImplJmDNSImpl;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaxJmdnsImplJmDNSImpl;", &JavaxJmdnsImplSocketListener_logger };
  static const J2ObjcClassInfo _JavaxJmdnsImplSocketListener = { "SocketListener", "javax.jmdns.impl", ptrTable, methods, fields, 7, 0x0, 3, 2, -1, -1, -1, -1, -1 };
  return &_JavaxJmdnsImplSocketListener;
}

+ (void)initialize {
  if (self == [JavaxJmdnsImplSocketListener class]) {
    JavaxJmdnsImplSocketListener_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([JavaxJmdnsImplSocketListener_class_() getName]);
    J2OBJC_SET_INITIALIZED(JavaxJmdnsImplSocketListener)
  }
}

@end

void JavaxJmdnsImplSocketListener_initWithJavaxJmdnsImplJmDNSImpl_(JavaxJmdnsImplSocketListener *self, JavaxJmdnsImplJmDNSImpl *jmDNSImpl) {
  JavaLangThread_initWithNSString_(self, JreStrcat("$$C", @"SocketListener(", (jmDNSImpl != nil ? [jmDNSImpl getName] : @""), ')'));
  [self setDaemonWithBoolean:true];
  self->_jmDNSImpl_ = jmDNSImpl;
}

JavaxJmdnsImplSocketListener *new_JavaxJmdnsImplSocketListener_initWithJavaxJmdnsImplJmDNSImpl_(JavaxJmdnsImplJmDNSImpl *jmDNSImpl) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplSocketListener, initWithJavaxJmdnsImplJmDNSImpl_, jmDNSImpl)
}

JavaxJmdnsImplSocketListener *create_JavaxJmdnsImplSocketListener_initWithJavaxJmdnsImplJmDNSImpl_(JavaxJmdnsImplJmDNSImpl *jmDNSImpl) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplSocketListener, initWithJavaxJmdnsImplJmDNSImpl_, jmDNSImpl)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplSocketListener)
