//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/jmdns/impl/constants/DNSConstants.java
//

#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "javax/jmdns/impl/constants/DNSConstants.h"

J2OBJC_INITIALIZED_DEFN(JavaxJmdnsImplConstantsDNSConstants)

NSString *JavaxJmdnsImplConstantsDNSConstants_MDNS_GROUP = @"224.0.0.251";
NSString *JavaxJmdnsImplConstantsDNSConstants_MDNS_GROUP_IPV6 = @"FF02::FB";
jint JavaxJmdnsImplConstantsDNSConstants_MDNS_PORT;

@implementation JavaxJmdnsImplConstantsDNSConstants

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  JavaxJmdnsImplConstantsDNSConstants_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MDNS_GROUP", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 0, -1, -1 },
    { "MDNS_GROUP_IPV6", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 1, -1, -1 },
    { "MDNS_PORT", "I", .constantValue.asLong = 0, 0x19, -1, 2, -1, -1 },
    { "DNS_PORT", "I", .constantValue.asInt = JavaxJmdnsImplConstantsDNSConstants_DNS_PORT, 0x19, -1, -1, -1, -1 },
    { "DNS_TTL", "I", .constantValue.asInt = JavaxJmdnsImplConstantsDNSConstants_DNS_TTL, 0x19, -1, -1, -1, -1 },
    { "MAX_MSG_TYPICAL", "I", .constantValue.asInt = JavaxJmdnsImplConstantsDNSConstants_MAX_MSG_TYPICAL, 0x19, -1, -1, -1, -1 },
    { "MAX_MSG_ABSOLUTE", "I", .constantValue.asInt = JavaxJmdnsImplConstantsDNSConstants_MAX_MSG_ABSOLUTE, 0x19, -1, -1, -1, -1 },
    { "FLAGS_QR_MASK", "I", .constantValue.asInt = JavaxJmdnsImplConstantsDNSConstants_FLAGS_QR_MASK, 0x19, -1, -1, -1, -1 },
    { "FLAGS_QR_QUERY", "I", .constantValue.asInt = JavaxJmdnsImplConstantsDNSConstants_FLAGS_QR_QUERY, 0x19, -1, -1, -1, -1 },
    { "FLAGS_QR_RESPONSE", "I", .constantValue.asInt = JavaxJmdnsImplConstantsDNSConstants_FLAGS_QR_RESPONSE, 0x19, -1, -1, -1, -1 },
    { "FLAGS_AA", "I", .constantValue.asInt = JavaxJmdnsImplConstantsDNSConstants_FLAGS_AA, 0x19, -1, -1, -1, -1 },
    { "FLAGS_TC", "I", .constantValue.asInt = JavaxJmdnsImplConstantsDNSConstants_FLAGS_TC, 0x19, -1, -1, -1, -1 },
    { "FLAGS_RD", "I", .constantValue.asInt = JavaxJmdnsImplConstantsDNSConstants_FLAGS_RD, 0x19, -1, -1, -1, -1 },
    { "FLAGS_RA", "I", .constantValue.asInt = JavaxJmdnsImplConstantsDNSConstants_FLAGS_RA, 0x19, -1, -1, -1, -1 },
    { "FLAGS_Z", "I", .constantValue.asInt = JavaxJmdnsImplConstantsDNSConstants_FLAGS_Z, 0x19, -1, -1, -1, -1 },
    { "FLAGS_AD", "I", .constantValue.asInt = JavaxJmdnsImplConstantsDNSConstants_FLAGS_AD, 0x19, -1, -1, -1, -1 },
    { "FLAGS_CD", "I", .constantValue.asInt = JavaxJmdnsImplConstantsDNSConstants_FLAGS_CD, 0x19, -1, -1, -1, -1 },
    { "SHARED_QUERY_TIME", "I", .constantValue.asInt = JavaxJmdnsImplConstantsDNSConstants_SHARED_QUERY_TIME, 0x19, -1, -1, -1, -1 },
    { "QUERY_WAIT_INTERVAL", "I", .constantValue.asInt = JavaxJmdnsImplConstantsDNSConstants_QUERY_WAIT_INTERVAL, 0x19, -1, -1, -1, -1 },
    { "PROBE_WAIT_INTERVAL", "I", .constantValue.asInt = JavaxJmdnsImplConstantsDNSConstants_PROBE_WAIT_INTERVAL, 0x19, -1, -1, -1, -1 },
    { "RESPONSE_MIN_WAIT_INTERVAL", "I", .constantValue.asInt = JavaxJmdnsImplConstantsDNSConstants_RESPONSE_MIN_WAIT_INTERVAL, 0x19, -1, -1, -1, -1 },
    { "RESPONSE_MAX_WAIT_INTERVAL", "I", .constantValue.asInt = JavaxJmdnsImplConstantsDNSConstants_RESPONSE_MAX_WAIT_INTERVAL, 0x19, -1, -1, -1, -1 },
    { "PROBE_CONFLICT_INTERVAL", "I", .constantValue.asInt = JavaxJmdnsImplConstantsDNSConstants_PROBE_CONFLICT_INTERVAL, 0x19, -1, -1, -1, -1 },
    { "PROBE_THROTTLE_COUNT", "I", .constantValue.asInt = JavaxJmdnsImplConstantsDNSConstants_PROBE_THROTTLE_COUNT, 0x19, -1, -1, -1, -1 },
    { "PROBE_THROTTLE_COUNT_INTERVAL", "I", .constantValue.asInt = JavaxJmdnsImplConstantsDNSConstants_PROBE_THROTTLE_COUNT_INTERVAL, 0x19, -1, -1, -1, -1 },
    { "ANNOUNCE_WAIT_INTERVAL", "I", .constantValue.asInt = JavaxJmdnsImplConstantsDNSConstants_ANNOUNCE_WAIT_INTERVAL, 0x19, -1, -1, -1, -1 },
    { "RECORD_REAPER_INTERVAL", "I", .constantValue.asInt = JavaxJmdnsImplConstantsDNSConstants_RECORD_REAPER_INTERVAL, 0x19, -1, -1, -1, -1 },
    { "RECORD_EXPIRY_DELAY", "I", .constantValue.asInt = JavaxJmdnsImplConstantsDNSConstants_RECORD_EXPIRY_DELAY, 0x19, -1, -1, -1, -1 },
    { "KNOWN_ANSWER_TTL", "I", .constantValue.asInt = JavaxJmdnsImplConstantsDNSConstants_KNOWN_ANSWER_TTL, 0x19, -1, -1, -1, -1 },
    { "ANNOUNCED_RENEWAL_TTL_INTERVAL", "I", .constantValue.asInt = JavaxJmdnsImplConstantsDNSConstants_ANNOUNCED_RENEWAL_TTL_INTERVAL, 0x19, -1, -1, -1, -1 },
    { "CLOSE_TIMEOUT", "J", .constantValue.asLong = JavaxJmdnsImplConstantsDNSConstants_CLOSE_TIMEOUT, 0x19, -1, -1, -1, -1 },
    { "SERVICE_INFO_TIMEOUT", "J", .constantValue.asLong = JavaxJmdnsImplConstantsDNSConstants_SERVICE_INFO_TIMEOUT, 0x19, -1, -1, -1, -1 },
    { "NETWORK_CHECK_INTERVAL", "I", .constantValue.asInt = JavaxJmdnsImplConstantsDNSConstants_NETWORK_CHECK_INTERVAL, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { &JavaxJmdnsImplConstantsDNSConstants_MDNS_GROUP, &JavaxJmdnsImplConstantsDNSConstants_MDNS_GROUP_IPV6, &JavaxJmdnsImplConstantsDNSConstants_MDNS_PORT };
  static const J2ObjcClassInfo _JavaxJmdnsImplConstantsDNSConstants = { "DNSConstants", "javax.jmdns.impl.constants", ptrTable, methods, fields, 7, 0x11, 1, 33, -1, -1, -1, -1, -1 };
  return &_JavaxJmdnsImplConstantsDNSConstants;
}

+ (void)initialize {
  if (self == [JavaxJmdnsImplConstantsDNSConstants class]) {
    JavaxJmdnsImplConstantsDNSConstants_MDNS_PORT = JavaLangInteger_parseIntWithNSString_(JavaLangSystem_getPropertyWithNSString_withNSString_(@"net.mdns.port", @"5353"));
    J2OBJC_SET_INITIALIZED(JavaxJmdnsImplConstantsDNSConstants)
  }
}

@end

void JavaxJmdnsImplConstantsDNSConstants_init(JavaxJmdnsImplConstantsDNSConstants *self) {
  NSObject_init(self);
}

JavaxJmdnsImplConstantsDNSConstants *new_JavaxJmdnsImplConstantsDNSConstants_init() {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplConstantsDNSConstants, init)
}

JavaxJmdnsImplConstantsDNSConstants *create_JavaxJmdnsImplConstantsDNSConstants_init() {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplConstantsDNSConstants, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplConstantsDNSConstants)
