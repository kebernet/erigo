//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/jmdns/impl/constants/DNSLabel.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "javax/jmdns/impl/constants/DNSLabel.h"

@interface JavaxJmdnsImplConstantsDNSLabel () {
 @public
  NSString *_externalName_;
  jint _index_;
}

@end

J2OBJC_FIELD_SETTER(JavaxJmdnsImplConstantsDNSLabel, _externalName_, NSString *)

__attribute__((unused)) static void JavaxJmdnsImplConstantsDNSLabel_initWithNSString_withInt_withNSString_withInt_(JavaxJmdnsImplConstantsDNSLabel *self, NSString *name, jint index, NSString *__name, jint __ordinal);

__attribute__((unused)) static JavaxJmdnsImplConstantsDNSLabel *new_JavaxJmdnsImplConstantsDNSLabel_initWithNSString_withInt_withNSString_withInt_(NSString *name, jint index, NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

J2OBJC_INITIALIZED_DEFN(JavaxJmdnsImplConstantsDNSLabel)

JavaxJmdnsImplConstantsDNSLabel *JavaxJmdnsImplConstantsDNSLabel_values_[4];

@implementation JavaxJmdnsImplConstantsDNSLabel

- (NSString *)externalName {
  return _externalName_;
}

- (jint)indexValue {
  return _index_;
}

+ (JavaxJmdnsImplConstantsDNSLabel *)labelForByteWithInt:(jint)index {
  return JavaxJmdnsImplConstantsDNSLabel_labelForByteWithInt_(index);
}

+ (jint)labelValueWithInt:(jint)index {
  return JavaxJmdnsImplConstantsDNSLabel_labelValueWithInt_(index);
}

- (NSString *)description {
  return JreStrcat("$$I", [self name], @" index ", [self indexValue]);
}

+ (IOSObjectArray *)values {
  return JavaxJmdnsImplConstantsDNSLabel_values();
}

+ (JavaxJmdnsImplConstantsDNSLabel *)valueOfWithNSString:(NSString *)name {
  return JavaxJmdnsImplConstantsDNSLabel_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplConstantsDNSLabel;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "[LJavaxJmdnsImplConstantsDNSLabel;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplConstantsDNSLabel;", 0x9, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(externalName);
  methods[1].selector = @selector(indexValue);
  methods[2].selector = @selector(labelForByteWithInt:);
  methods[3].selector = @selector(labelValueWithInt:);
  methods[4].selector = @selector(description);
  methods[5].selector = @selector(values);
  methods[6].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "Unknown", "LJavaxJmdnsImplConstantsDNSLabel;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "Standard", "LJavaxJmdnsImplConstantsDNSLabel;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
    { "Compressed", "LJavaxJmdnsImplConstantsDNSLabel;", .constantValue.asLong = 0, 0x4019, -1, 8, -1, -1 },
    { "Extended", "LJavaxJmdnsImplConstantsDNSLabel;", .constantValue.asLong = 0, 0x4019, -1, 9, -1, -1 },
    { "LABEL_MASK", "I", .constantValue.asInt = JavaxJmdnsImplConstantsDNSLabel_LABEL_MASK, 0x18, -1, -1, -1, -1 },
    { "LABEL_NOT_MASK", "I", .constantValue.asInt = JavaxJmdnsImplConstantsDNSLabel_LABEL_NOT_MASK, 0x18, -1, -1, -1, -1 },
    { "_externalName_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_index_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "labelForByte", "I", "labelValue", "toString", "valueOf", "LNSString;", &JreEnum(JavaxJmdnsImplConstantsDNSLabel, Unknown), &JreEnum(JavaxJmdnsImplConstantsDNSLabel, Standard), &JreEnum(JavaxJmdnsImplConstantsDNSLabel, Compressed), &JreEnum(JavaxJmdnsImplConstantsDNSLabel, Extended), "Ljava/lang/Enum<Ljavax/jmdns/impl/constants/DNSLabel;>;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplConstantsDNSLabel = { "DNSLabel", "javax.jmdns.impl.constants", ptrTable, methods, fields, 7, 0x4011, 7, 8, -1, -1, -1, 10, -1 };
  return &_JavaxJmdnsImplConstantsDNSLabel;
}

+ (void)initialize {
  if (self == [JavaxJmdnsImplConstantsDNSLabel class]) {
    JreEnum(JavaxJmdnsImplConstantsDNSLabel, Unknown) = new_JavaxJmdnsImplConstantsDNSLabel_initWithNSString_withInt_withNSString_withInt_(@"", (jint) 0x80, @"Unknown", 0);
    JreEnum(JavaxJmdnsImplConstantsDNSLabel, Standard) = new_JavaxJmdnsImplConstantsDNSLabel_initWithNSString_withInt_withNSString_withInt_(@"standard label", (jint) 0x00, @"Standard", 1);
    JreEnum(JavaxJmdnsImplConstantsDNSLabel, Compressed) = new_JavaxJmdnsImplConstantsDNSLabel_initWithNSString_withInt_withNSString_withInt_(@"compressed label", (jint) 0xC0, @"Compressed", 2);
    JreEnum(JavaxJmdnsImplConstantsDNSLabel, Extended) = new_JavaxJmdnsImplConstantsDNSLabel_initWithNSString_withInt_withNSString_withInt_(@"extended label", (jint) 0x40, @"Extended", 3);
    J2OBJC_SET_INITIALIZED(JavaxJmdnsImplConstantsDNSLabel)
  }
}

@end

void JavaxJmdnsImplConstantsDNSLabel_initWithNSString_withInt_withNSString_withInt_(JavaxJmdnsImplConstantsDNSLabel *self, NSString *name, jint index, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
  self->_externalName_ = name;
  self->_index_ = index;
}

JavaxJmdnsImplConstantsDNSLabel *new_JavaxJmdnsImplConstantsDNSLabel_initWithNSString_withInt_withNSString_withInt_(NSString *name, jint index, NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplConstantsDNSLabel, initWithNSString_withInt_withNSString_withInt_, name, index, __name, __ordinal)
}

JavaxJmdnsImplConstantsDNSLabel *JavaxJmdnsImplConstantsDNSLabel_labelForByteWithInt_(jint index) {
  JavaxJmdnsImplConstantsDNSLabel_initialize();
  jint maskedIndex = index & JavaxJmdnsImplConstantsDNSLabel_LABEL_MASK;
  {
    IOSObjectArray *a__ = JavaxJmdnsImplConstantsDNSLabel_values();
    JavaxJmdnsImplConstantsDNSLabel * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaxJmdnsImplConstantsDNSLabel * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaxJmdnsImplConstantsDNSLabel *aLabel = *b__++;
      if (((JavaxJmdnsImplConstantsDNSLabel *) nil_chk(aLabel))->_index_ == maskedIndex) return aLabel;
    }
  }
  return JreEnum(JavaxJmdnsImplConstantsDNSLabel, Unknown);
}

jint JavaxJmdnsImplConstantsDNSLabel_labelValueWithInt_(jint index) {
  JavaxJmdnsImplConstantsDNSLabel_initialize();
  return index & JavaxJmdnsImplConstantsDNSLabel_LABEL_NOT_MASK;
}

IOSObjectArray *JavaxJmdnsImplConstantsDNSLabel_values() {
  JavaxJmdnsImplConstantsDNSLabel_initialize();
  return [IOSObjectArray arrayWithObjects:JavaxJmdnsImplConstantsDNSLabel_values_ count:4 type:JavaxJmdnsImplConstantsDNSLabel_class_()];
}

JavaxJmdnsImplConstantsDNSLabel *JavaxJmdnsImplConstantsDNSLabel_valueOfWithNSString_(NSString *name) {
  JavaxJmdnsImplConstantsDNSLabel_initialize();
  for (int i = 0; i < 4; i++) {
    JavaxJmdnsImplConstantsDNSLabel *e = JavaxJmdnsImplConstantsDNSLabel_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

JavaxJmdnsImplConstantsDNSLabel *JavaxJmdnsImplConstantsDNSLabel_fromOrdinal(NSUInteger ordinal) {
  JavaxJmdnsImplConstantsDNSLabel_initialize();
  if (ordinal >= 4) {
    return nil;
  }
  return JavaxJmdnsImplConstantsDNSLabel_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplConstantsDNSLabel)
