//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/jmdns/impl/constants/DNSOptionCode.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "javax/jmdns/impl/constants/DNSOptionCode.h"

@interface JavaxJmdnsImplConstantsDNSOptionCode () {
 @public
  NSString *_externalName_;
  jint _index_;
}

@end

J2OBJC_FIELD_SETTER(JavaxJmdnsImplConstantsDNSOptionCode, _externalName_, NSString *)

__attribute__((unused)) static void JavaxJmdnsImplConstantsDNSOptionCode_initWithNSString_withInt_withNSString_withInt_(JavaxJmdnsImplConstantsDNSOptionCode *self, NSString *name, jint index, NSString *__name, jint __ordinal);

__attribute__((unused)) static JavaxJmdnsImplConstantsDNSOptionCode *new_JavaxJmdnsImplConstantsDNSOptionCode_initWithNSString_withInt_withNSString_withInt_(NSString *name, jint index, NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

J2OBJC_INITIALIZED_DEFN(JavaxJmdnsImplConstantsDNSOptionCode)

JavaxJmdnsImplConstantsDNSOptionCode *JavaxJmdnsImplConstantsDNSOptionCode_values_[5];

@implementation JavaxJmdnsImplConstantsDNSOptionCode

- (NSString *)externalName {
  return _externalName_;
}

- (jint)indexValue {
  return _index_;
}

+ (JavaxJmdnsImplConstantsDNSOptionCode *)resultCodeForFlagsWithInt:(jint)optioncode {
  return JavaxJmdnsImplConstantsDNSOptionCode_resultCodeForFlagsWithInt_(optioncode);
}

- (NSString *)description {
  return JreStrcat("$$I", [self name], @" index ", [self indexValue]);
}

+ (IOSObjectArray *)values {
  return JavaxJmdnsImplConstantsDNSOptionCode_values();
}

+ (JavaxJmdnsImplConstantsDNSOptionCode *)valueOfWithNSString:(NSString *)name {
  return JavaxJmdnsImplConstantsDNSOptionCode_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplConstantsDNSOptionCode;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
    { NULL, "[LJavaxJmdnsImplConstantsDNSOptionCode;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplConstantsDNSOptionCode;", 0x9, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(externalName);
  methods[1].selector = @selector(indexValue);
  methods[2].selector = @selector(resultCodeForFlagsWithInt:);
  methods[3].selector = @selector(description);
  methods[4].selector = @selector(values);
  methods[5].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "Unknown", "LJavaxJmdnsImplConstantsDNSOptionCode;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "LLQ", "LJavaxJmdnsImplConstantsDNSOptionCode;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "UL", "LJavaxJmdnsImplConstantsDNSOptionCode;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
    { "NSID", "LJavaxJmdnsImplConstantsDNSOptionCode;", .constantValue.asLong = 0, 0x4019, -1, 8, -1, -1 },
    { "Owner", "LJavaxJmdnsImplConstantsDNSOptionCode;", .constantValue.asLong = 0, 0x4019, -1, 9, -1, -1 },
    { "_externalName_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_index_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "resultCodeForFlags", "I", "toString", "valueOf", "LNSString;", &JreEnum(JavaxJmdnsImplConstantsDNSOptionCode, Unknown), &JreEnum(JavaxJmdnsImplConstantsDNSOptionCode, LLQ), &JreEnum(JavaxJmdnsImplConstantsDNSOptionCode, UL), &JreEnum(JavaxJmdnsImplConstantsDNSOptionCode, NSID), &JreEnum(JavaxJmdnsImplConstantsDNSOptionCode, Owner), "Ljava/lang/Enum<Ljavax/jmdns/impl/constants/DNSOptionCode;>;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplConstantsDNSOptionCode = { "DNSOptionCode", "javax.jmdns.impl.constants", ptrTable, methods, fields, 7, 0x4011, 6, 7, -1, -1, -1, 10, -1 };
  return &_JavaxJmdnsImplConstantsDNSOptionCode;
}

+ (void)initialize {
  if (self == [JavaxJmdnsImplConstantsDNSOptionCode class]) {
    JreEnum(JavaxJmdnsImplConstantsDNSOptionCode, Unknown) = new_JavaxJmdnsImplConstantsDNSOptionCode_initWithNSString_withInt_withNSString_withInt_(@"Unknown", 65535, @"Unknown", 0);
    JreEnum(JavaxJmdnsImplConstantsDNSOptionCode, LLQ) = new_JavaxJmdnsImplConstantsDNSOptionCode_initWithNSString_withInt_withNSString_withInt_(@"LLQ", 1, @"LLQ", 1);
    JreEnum(JavaxJmdnsImplConstantsDNSOptionCode, UL) = new_JavaxJmdnsImplConstantsDNSOptionCode_initWithNSString_withInt_withNSString_withInt_(@"UL", 2, @"UL", 2);
    JreEnum(JavaxJmdnsImplConstantsDNSOptionCode, NSID) = new_JavaxJmdnsImplConstantsDNSOptionCode_initWithNSString_withInt_withNSString_withInt_(@"NSID", 3, @"NSID", 3);
    JreEnum(JavaxJmdnsImplConstantsDNSOptionCode, Owner) = new_JavaxJmdnsImplConstantsDNSOptionCode_initWithNSString_withInt_withNSString_withInt_(@"Owner", 4, @"Owner", 4);
    J2OBJC_SET_INITIALIZED(JavaxJmdnsImplConstantsDNSOptionCode)
  }
}

@end

void JavaxJmdnsImplConstantsDNSOptionCode_initWithNSString_withInt_withNSString_withInt_(JavaxJmdnsImplConstantsDNSOptionCode *self, NSString *name, jint index, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
  self->_externalName_ = name;
  self->_index_ = index;
}

JavaxJmdnsImplConstantsDNSOptionCode *new_JavaxJmdnsImplConstantsDNSOptionCode_initWithNSString_withInt_withNSString_withInt_(NSString *name, jint index, NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplConstantsDNSOptionCode, initWithNSString_withInt_withNSString_withInt_, name, index, __name, __ordinal)
}

JavaxJmdnsImplConstantsDNSOptionCode *JavaxJmdnsImplConstantsDNSOptionCode_resultCodeForFlagsWithInt_(jint optioncode) {
  JavaxJmdnsImplConstantsDNSOptionCode_initialize();
  jint maskedIndex = optioncode;
  {
    IOSObjectArray *a__ = JavaxJmdnsImplConstantsDNSOptionCode_values();
    JavaxJmdnsImplConstantsDNSOptionCode * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaxJmdnsImplConstantsDNSOptionCode * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaxJmdnsImplConstantsDNSOptionCode *aCode = *b__++;
      if (((JavaxJmdnsImplConstantsDNSOptionCode *) nil_chk(aCode))->_index_ == maskedIndex) return aCode;
    }
  }
  return JreEnum(JavaxJmdnsImplConstantsDNSOptionCode, Unknown);
}

IOSObjectArray *JavaxJmdnsImplConstantsDNSOptionCode_values() {
  JavaxJmdnsImplConstantsDNSOptionCode_initialize();
  return [IOSObjectArray arrayWithObjects:JavaxJmdnsImplConstantsDNSOptionCode_values_ count:5 type:JavaxJmdnsImplConstantsDNSOptionCode_class_()];
}

JavaxJmdnsImplConstantsDNSOptionCode *JavaxJmdnsImplConstantsDNSOptionCode_valueOfWithNSString_(NSString *name) {
  JavaxJmdnsImplConstantsDNSOptionCode_initialize();
  for (int i = 0; i < 5; i++) {
    JavaxJmdnsImplConstantsDNSOptionCode *e = JavaxJmdnsImplConstantsDNSOptionCode_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

JavaxJmdnsImplConstantsDNSOptionCode *JavaxJmdnsImplConstantsDNSOptionCode_fromOrdinal(NSUInteger ordinal) {
  JavaxJmdnsImplConstantsDNSOptionCode_initialize();
  if (ordinal >= 5) {
    return nil;
  }
  return JavaxJmdnsImplConstantsDNSOptionCode_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplConstantsDNSOptionCode)
