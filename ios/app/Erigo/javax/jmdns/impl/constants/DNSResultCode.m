//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/jmdns/impl/constants/DNSResultCode.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "javax/jmdns/impl/constants/DNSResultCode.h"

@interface JavaxJmdnsImplConstantsDNSResultCode () {
 @public
  NSString *_externalName_;
  jint _index_;
}

@end

J2OBJC_FIELD_SETTER(JavaxJmdnsImplConstantsDNSResultCode, _externalName_, NSString *)

__attribute__((unused)) static void JavaxJmdnsImplConstantsDNSResultCode_initWithNSString_withInt_withNSString_withInt_(JavaxJmdnsImplConstantsDNSResultCode *self, NSString *name, jint index, NSString *__name, jint __ordinal);

__attribute__((unused)) static JavaxJmdnsImplConstantsDNSResultCode *new_JavaxJmdnsImplConstantsDNSResultCode_initWithNSString_withInt_withNSString_withInt_(NSString *name, jint index, NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

J2OBJC_INITIALIZED_DEFN(JavaxJmdnsImplConstantsDNSResultCode)

JavaxJmdnsImplConstantsDNSResultCode *JavaxJmdnsImplConstantsDNSResultCode_values_[12];

@implementation JavaxJmdnsImplConstantsDNSResultCode

- (NSString *)externalName {
  return _externalName_;
}

- (jint)indexValue {
  return _index_;
}

+ (JavaxJmdnsImplConstantsDNSResultCode *)resultCodeForFlagsWithInt:(jint)flags {
  return JavaxJmdnsImplConstantsDNSResultCode_resultCodeForFlagsWithInt_(flags);
}

+ (JavaxJmdnsImplConstantsDNSResultCode *)resultCodeForFlagsWithInt:(jint)flags
                                                            withInt:(jint)extendedRCode {
  return JavaxJmdnsImplConstantsDNSResultCode_resultCodeForFlagsWithInt_withInt_(flags, extendedRCode);
}

- (NSString *)description {
  return JreStrcat("$$I", [self name], @" index ", [self indexValue]);
}

+ (IOSObjectArray *)values {
  return JavaxJmdnsImplConstantsDNSResultCode_values();
}

+ (JavaxJmdnsImplConstantsDNSResultCode *)valueOfWithNSString:(NSString *)name {
  return JavaxJmdnsImplConstantsDNSResultCode_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplConstantsDNSResultCode;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplConstantsDNSResultCode;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "[LJavaxJmdnsImplConstantsDNSResultCode;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplConstantsDNSResultCode;", 0x9, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(externalName);
  methods[1].selector = @selector(indexValue);
  methods[2].selector = @selector(resultCodeForFlagsWithInt:);
  methods[3].selector = @selector(resultCodeForFlagsWithInt:withInt:);
  methods[4].selector = @selector(description);
  methods[5].selector = @selector(values);
  methods[6].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "Unknown", "LJavaxJmdnsImplConstantsDNSResultCode;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "NoError", "LJavaxJmdnsImplConstantsDNSResultCode;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
    { "FormErr", "LJavaxJmdnsImplConstantsDNSResultCode;", .constantValue.asLong = 0, 0x4019, -1, 8, -1, -1 },
    { "ServFail", "LJavaxJmdnsImplConstantsDNSResultCode;", .constantValue.asLong = 0, 0x4019, -1, 9, -1, -1 },
    { "NXDomain", "LJavaxJmdnsImplConstantsDNSResultCode;", .constantValue.asLong = 0, 0x4019, -1, 10, -1, -1 },
    { "NotImp", "LJavaxJmdnsImplConstantsDNSResultCode;", .constantValue.asLong = 0, 0x4019, -1, 11, -1, -1 },
    { "Refused", "LJavaxJmdnsImplConstantsDNSResultCode;", .constantValue.asLong = 0, 0x4019, -1, 12, -1, -1 },
    { "YXDomain", "LJavaxJmdnsImplConstantsDNSResultCode;", .constantValue.asLong = 0, 0x4019, -1, 13, -1, -1 },
    { "YXRRSet", "LJavaxJmdnsImplConstantsDNSResultCode;", .constantValue.asLong = 0, 0x4019, -1, 14, -1, -1 },
    { "NXRRSet", "LJavaxJmdnsImplConstantsDNSResultCode;", .constantValue.asLong = 0, 0x4019, -1, 15, -1, -1 },
    { "NotAuth", "LJavaxJmdnsImplConstantsDNSResultCode;", .constantValue.asLong = 0, 0x4019, -1, 16, -1, -1 },
    { "NotZone", "LJavaxJmdnsImplConstantsDNSResultCode;", .constantValue.asLong = 0, 0x4019, -1, 17, -1, -1 },
    { "RCode_MASK", "I", .constantValue.asInt = JavaxJmdnsImplConstantsDNSResultCode_RCode_MASK, 0x18, -1, -1, -1, -1 },
    { "ExtendedRCode_MASK", "I", .constantValue.asInt = JavaxJmdnsImplConstantsDNSResultCode_ExtendedRCode_MASK, 0x18, -1, -1, -1, -1 },
    { "_externalName_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_index_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "resultCodeForFlags", "I", "II", "toString", "valueOf", "LNSString;", &JreEnum(JavaxJmdnsImplConstantsDNSResultCode, Unknown), &JreEnum(JavaxJmdnsImplConstantsDNSResultCode, NoError), &JreEnum(JavaxJmdnsImplConstantsDNSResultCode, FormErr), &JreEnum(JavaxJmdnsImplConstantsDNSResultCode, ServFail), &JreEnum(JavaxJmdnsImplConstantsDNSResultCode, NXDomain), &JreEnum(JavaxJmdnsImplConstantsDNSResultCode, NotImp), &JreEnum(JavaxJmdnsImplConstantsDNSResultCode, Refused), &JreEnum(JavaxJmdnsImplConstantsDNSResultCode, YXDomain), &JreEnum(JavaxJmdnsImplConstantsDNSResultCode, YXRRSet), &JreEnum(JavaxJmdnsImplConstantsDNSResultCode, NXRRSet), &JreEnum(JavaxJmdnsImplConstantsDNSResultCode, NotAuth), &JreEnum(JavaxJmdnsImplConstantsDNSResultCode, NotZone), "Ljava/lang/Enum<Ljavax/jmdns/impl/constants/DNSResultCode;>;" };
  static const J2ObjcClassInfo _JavaxJmdnsImplConstantsDNSResultCode = { "DNSResultCode", "javax.jmdns.impl.constants", ptrTable, methods, fields, 7, 0x4011, 7, 16, -1, -1, -1, 18, -1 };
  return &_JavaxJmdnsImplConstantsDNSResultCode;
}

+ (void)initialize {
  if (self == [JavaxJmdnsImplConstantsDNSResultCode class]) {
    JreEnum(JavaxJmdnsImplConstantsDNSResultCode, Unknown) = new_JavaxJmdnsImplConstantsDNSResultCode_initWithNSString_withInt_withNSString_withInt_(@"Unknown", 65535, @"Unknown", 0);
    JreEnum(JavaxJmdnsImplConstantsDNSResultCode, NoError) = new_JavaxJmdnsImplConstantsDNSResultCode_initWithNSString_withInt_withNSString_withInt_(@"No Error", 0, @"NoError", 1);
    JreEnum(JavaxJmdnsImplConstantsDNSResultCode, FormErr) = new_JavaxJmdnsImplConstantsDNSResultCode_initWithNSString_withInt_withNSString_withInt_(@"Format Error", 1, @"FormErr", 2);
    JreEnum(JavaxJmdnsImplConstantsDNSResultCode, ServFail) = new_JavaxJmdnsImplConstantsDNSResultCode_initWithNSString_withInt_withNSString_withInt_(@"Server Failure", 2, @"ServFail", 3);
    JreEnum(JavaxJmdnsImplConstantsDNSResultCode, NXDomain) = new_JavaxJmdnsImplConstantsDNSResultCode_initWithNSString_withInt_withNSString_withInt_(@"Non-Existent Domain", 3, @"NXDomain", 4);
    JreEnum(JavaxJmdnsImplConstantsDNSResultCode, NotImp) = new_JavaxJmdnsImplConstantsDNSResultCode_initWithNSString_withInt_withNSString_withInt_(@"Not Implemented", 4, @"NotImp", 5);
    JreEnum(JavaxJmdnsImplConstantsDNSResultCode, Refused) = new_JavaxJmdnsImplConstantsDNSResultCode_initWithNSString_withInt_withNSString_withInt_(@"Query Refused", 5, @"Refused", 6);
    JreEnum(JavaxJmdnsImplConstantsDNSResultCode, YXDomain) = new_JavaxJmdnsImplConstantsDNSResultCode_initWithNSString_withInt_withNSString_withInt_(@"Name Exists when it should not", 6, @"YXDomain", 7);
    JreEnum(JavaxJmdnsImplConstantsDNSResultCode, YXRRSet) = new_JavaxJmdnsImplConstantsDNSResultCode_initWithNSString_withInt_withNSString_withInt_(@"RR Set Exists when it should not", 7, @"YXRRSet", 8);
    JreEnum(JavaxJmdnsImplConstantsDNSResultCode, NXRRSet) = new_JavaxJmdnsImplConstantsDNSResultCode_initWithNSString_withInt_withNSString_withInt_(@"RR Set that should exist does not", 8, @"NXRRSet", 9);
    JreEnum(JavaxJmdnsImplConstantsDNSResultCode, NotAuth) = new_JavaxJmdnsImplConstantsDNSResultCode_initWithNSString_withInt_withNSString_withInt_(@"Server Not Authoritative for zone", 9, @"NotAuth", 10);
    JreEnum(JavaxJmdnsImplConstantsDNSResultCode, NotZone) = new_JavaxJmdnsImplConstantsDNSResultCode_initWithNSString_withInt_withNSString_withInt_(@"NotZone Name not contained in zone", 10, @"NotZone", 11);
    J2OBJC_SET_INITIALIZED(JavaxJmdnsImplConstantsDNSResultCode)
  }
}

@end

void JavaxJmdnsImplConstantsDNSResultCode_initWithNSString_withInt_withNSString_withInt_(JavaxJmdnsImplConstantsDNSResultCode *self, NSString *name, jint index, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
  self->_externalName_ = name;
  self->_index_ = index;
}

JavaxJmdnsImplConstantsDNSResultCode *new_JavaxJmdnsImplConstantsDNSResultCode_initWithNSString_withInt_withNSString_withInt_(NSString *name, jint index, NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplConstantsDNSResultCode, initWithNSString_withInt_withNSString_withInt_, name, index, __name, __ordinal)
}

JavaxJmdnsImplConstantsDNSResultCode *JavaxJmdnsImplConstantsDNSResultCode_resultCodeForFlagsWithInt_(jint flags) {
  JavaxJmdnsImplConstantsDNSResultCode_initialize();
  jint maskedIndex = flags & JavaxJmdnsImplConstantsDNSResultCode_RCode_MASK;
  {
    IOSObjectArray *a__ = JavaxJmdnsImplConstantsDNSResultCode_values();
    JavaxJmdnsImplConstantsDNSResultCode * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaxJmdnsImplConstantsDNSResultCode * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaxJmdnsImplConstantsDNSResultCode *aCode = *b__++;
      if (((JavaxJmdnsImplConstantsDNSResultCode *) nil_chk(aCode))->_index_ == maskedIndex) return aCode;
    }
  }
  return JreEnum(JavaxJmdnsImplConstantsDNSResultCode, Unknown);
}

JavaxJmdnsImplConstantsDNSResultCode *JavaxJmdnsImplConstantsDNSResultCode_resultCodeForFlagsWithInt_withInt_(jint flags, jint extendedRCode) {
  JavaxJmdnsImplConstantsDNSResultCode_initialize();
  jint maskedIndex = ((JreRShift32(extendedRCode, 28)) & JavaxJmdnsImplConstantsDNSResultCode_ExtendedRCode_MASK) | (flags & JavaxJmdnsImplConstantsDNSResultCode_RCode_MASK);
  {
    IOSObjectArray *a__ = JavaxJmdnsImplConstantsDNSResultCode_values();
    JavaxJmdnsImplConstantsDNSResultCode * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaxJmdnsImplConstantsDNSResultCode * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaxJmdnsImplConstantsDNSResultCode *aCode = *b__++;
      if (((JavaxJmdnsImplConstantsDNSResultCode *) nil_chk(aCode))->_index_ == maskedIndex) return aCode;
    }
  }
  return JreEnum(JavaxJmdnsImplConstantsDNSResultCode, Unknown);
}

IOSObjectArray *JavaxJmdnsImplConstantsDNSResultCode_values() {
  JavaxJmdnsImplConstantsDNSResultCode_initialize();
  return [IOSObjectArray arrayWithObjects:JavaxJmdnsImplConstantsDNSResultCode_values_ count:12 type:JavaxJmdnsImplConstantsDNSResultCode_class_()];
}

JavaxJmdnsImplConstantsDNSResultCode *JavaxJmdnsImplConstantsDNSResultCode_valueOfWithNSString_(NSString *name) {
  JavaxJmdnsImplConstantsDNSResultCode_initialize();
  for (int i = 0; i < 12; i++) {
    JavaxJmdnsImplConstantsDNSResultCode *e = JavaxJmdnsImplConstantsDNSResultCode_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

JavaxJmdnsImplConstantsDNSResultCode *JavaxJmdnsImplConstantsDNSResultCode_fromOrdinal(NSUInteger ordinal) {
  JavaxJmdnsImplConstantsDNSResultCode_initialize();
  if (ordinal >= 12) {
    return nil;
  }
  return JavaxJmdnsImplConstantsDNSResultCode_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplConstantsDNSResultCode)
