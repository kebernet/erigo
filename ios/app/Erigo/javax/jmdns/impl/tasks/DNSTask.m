//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/jmdns/impl/tasks/DNSTask.java
//

#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/util/Timer.h"
#include "java/util/TimerTask.h"
#include "javax/jmdns/impl/DNSIncoming.h"
#include "javax/jmdns/impl/DNSOutgoing.h"
#include "javax/jmdns/impl/DNSQuestion.h"
#include "javax/jmdns/impl/DNSRecord.h"
#include "javax/jmdns/impl/JmDNSImpl.h"
#include "javax/jmdns/impl/constants/DNSConstants.h"
#include "javax/jmdns/impl/tasks/DNSTask.h"

@interface JavaxJmdnsImplTasksDNSTask () {
 @public
  JavaxJmdnsImplJmDNSImpl *_jmDNSImpl_;
}

@end

J2OBJC_FIELD_SETTER(JavaxJmdnsImplTasksDNSTask, _jmDNSImpl_, JavaxJmdnsImplJmDNSImpl *)

@implementation JavaxJmdnsImplTasksDNSTask

- (instancetype)initWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)jmDNSImpl {
  JavaxJmdnsImplTasksDNSTask_initWithJavaxJmdnsImplJmDNSImpl_(self, jmDNSImpl);
  return self;
}

- (JavaxJmdnsImplJmDNSImpl *)getDns {
  return _jmDNSImpl_;
}

- (void)startWithJavaUtilTimer:(JavaUtilTimer *)timer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (NSString *)getName {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)description {
  return [self getName];
}

- (JavaxJmdnsImplDNSOutgoing *)addQuestionWithJavaxJmdnsImplDNSOutgoing:(JavaxJmdnsImplDNSOutgoing *)outArg
                                          withJavaxJmdnsImplDNSQuestion:(JavaxJmdnsImplDNSQuestion *)rec {
  JavaxJmdnsImplDNSOutgoing *newOut = outArg;
  @try {
    [((JavaxJmdnsImplDNSOutgoing *) nil_chk(newOut)) addQuestionWithJavaxJmdnsImplDNSQuestion:rec];
  }
  @catch (JavaIoIOException *e) {
    jint flags = [newOut getFlags];
    jboolean multicast = [newOut isMulticast];
    jint maxUDPPayload = [newOut getMaxUDPPayload];
    jint id_ = [newOut getId];
    [newOut setFlagsWithInt:flags | JavaxJmdnsImplConstantsDNSConstants_FLAGS_TC];
    [newOut setIdWithInt:id_];
    [((JavaxJmdnsImplJmDNSImpl *) nil_chk(self->_jmDNSImpl_)) sendWithJavaxJmdnsImplDNSOutgoing:newOut];
    newOut = new_JavaxJmdnsImplDNSOutgoing_initWithInt_withBoolean_withInt_(flags, multicast, maxUDPPayload);
    [newOut addQuestionWithJavaxJmdnsImplDNSQuestion:rec];
  }
  return newOut;
}

- (JavaxJmdnsImplDNSOutgoing *)addAnswerWithJavaxJmdnsImplDNSOutgoing:(JavaxJmdnsImplDNSOutgoing *)outArg
                                        withJavaxJmdnsImplDNSIncoming:(JavaxJmdnsImplDNSIncoming *)inArg
                                          withJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *)rec {
  JavaxJmdnsImplDNSOutgoing *newOut = outArg;
  @try {
    [((JavaxJmdnsImplDNSOutgoing *) nil_chk(newOut)) addAnswerWithJavaxJmdnsImplDNSIncoming:inArg withJavaxJmdnsImplDNSRecord:rec];
  }
  @catch (JavaIoIOException *e) {
    jint flags = [newOut getFlags];
    jboolean multicast = [newOut isMulticast];
    jint maxUDPPayload = [newOut getMaxUDPPayload];
    jint id_ = [newOut getId];
    [newOut setFlagsWithInt:flags | JavaxJmdnsImplConstantsDNSConstants_FLAGS_TC];
    [newOut setIdWithInt:id_];
    [((JavaxJmdnsImplJmDNSImpl *) nil_chk(self->_jmDNSImpl_)) sendWithJavaxJmdnsImplDNSOutgoing:newOut];
    newOut = new_JavaxJmdnsImplDNSOutgoing_initWithInt_withBoolean_withInt_(flags, multicast, maxUDPPayload);
    [newOut addAnswerWithJavaxJmdnsImplDNSIncoming:inArg withJavaxJmdnsImplDNSRecord:rec];
  }
  return newOut;
}

- (JavaxJmdnsImplDNSOutgoing *)addAnswerWithJavaxJmdnsImplDNSOutgoing:(JavaxJmdnsImplDNSOutgoing *)outArg
                                          withJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *)rec
                                                             withLong:(jlong)now {
  JavaxJmdnsImplDNSOutgoing *newOut = outArg;
  @try {
    [((JavaxJmdnsImplDNSOutgoing *) nil_chk(newOut)) addAnswerWithJavaxJmdnsImplDNSRecord:rec withLong:now];
  }
  @catch (JavaIoIOException *e) {
    jint flags = [newOut getFlags];
    jboolean multicast = [newOut isMulticast];
    jint maxUDPPayload = [newOut getMaxUDPPayload];
    jint id_ = [newOut getId];
    [newOut setFlagsWithInt:flags | JavaxJmdnsImplConstantsDNSConstants_FLAGS_TC];
    [newOut setIdWithInt:id_];
    [((JavaxJmdnsImplJmDNSImpl *) nil_chk(self->_jmDNSImpl_)) sendWithJavaxJmdnsImplDNSOutgoing:newOut];
    newOut = new_JavaxJmdnsImplDNSOutgoing_initWithInt_withBoolean_withInt_(flags, multicast, maxUDPPayload);
    [newOut addAnswerWithJavaxJmdnsImplDNSRecord:rec withLong:now];
  }
  return newOut;
}

- (JavaxJmdnsImplDNSOutgoing *)addAuthoritativeAnswerWithJavaxJmdnsImplDNSOutgoing:(JavaxJmdnsImplDNSOutgoing *)outArg
                                                       withJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *)rec {
  JavaxJmdnsImplDNSOutgoing *newOut = outArg;
  @try {
    [((JavaxJmdnsImplDNSOutgoing *) nil_chk(newOut)) addAuthorativeAnswerWithJavaxJmdnsImplDNSRecord:rec];
  }
  @catch (JavaIoIOException *e) {
    jint flags = [newOut getFlags];
    jboolean multicast = [newOut isMulticast];
    jint maxUDPPayload = [newOut getMaxUDPPayload];
    jint id_ = [newOut getId];
    [newOut setFlagsWithInt:flags | JavaxJmdnsImplConstantsDNSConstants_FLAGS_TC];
    [newOut setIdWithInt:id_];
    [((JavaxJmdnsImplJmDNSImpl *) nil_chk(self->_jmDNSImpl_)) sendWithJavaxJmdnsImplDNSOutgoing:newOut];
    newOut = new_JavaxJmdnsImplDNSOutgoing_initWithInt_withBoolean_withInt_(flags, multicast, maxUDPPayload);
    [newOut addAuthorativeAnswerWithJavaxJmdnsImplDNSRecord:rec];
  }
  return newOut;
}

- (JavaxJmdnsImplDNSOutgoing *)addAdditionalAnswerWithJavaxJmdnsImplDNSOutgoing:(JavaxJmdnsImplDNSOutgoing *)outArg
                                                  withJavaxJmdnsImplDNSIncoming:(JavaxJmdnsImplDNSIncoming *)inArg
                                                    withJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *)rec {
  JavaxJmdnsImplDNSOutgoing *newOut = outArg;
  @try {
    [((JavaxJmdnsImplDNSOutgoing *) nil_chk(newOut)) addAdditionalAnswerWithJavaxJmdnsImplDNSIncoming:inArg withJavaxJmdnsImplDNSRecord:rec];
  }
  @catch (JavaIoIOException *e) {
    jint flags = [newOut getFlags];
    jboolean multicast = [newOut isMulticast];
    jint maxUDPPayload = [newOut getMaxUDPPayload];
    jint id_ = [newOut getId];
    [newOut setFlagsWithInt:flags | JavaxJmdnsImplConstantsDNSConstants_FLAGS_TC];
    [newOut setIdWithInt:id_];
    [((JavaxJmdnsImplJmDNSImpl *) nil_chk(self->_jmDNSImpl_)) sendWithJavaxJmdnsImplDNSOutgoing:newOut];
    newOut = new_JavaxJmdnsImplDNSOutgoing_initWithInt_withBoolean_withInt_(flags, multicast, maxUDPPayload);
    [newOut addAdditionalAnswerWithJavaxJmdnsImplDNSIncoming:inArg withJavaxJmdnsImplDNSRecord:rec];
  }
  return newOut;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplJmDNSImpl;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplDNSOutgoing;", 0x1, 4, 5, 6, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplDNSOutgoing;", 0x1, 7, 8, 6, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplDNSOutgoing;", 0x1, 7, 9, 6, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplDNSOutgoing;", 0x1, 10, 11, 6, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplDNSOutgoing;", 0x1, 12, 8, 6, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaxJmdnsImplJmDNSImpl:);
  methods[1].selector = @selector(getDns);
  methods[2].selector = @selector(startWithJavaUtilTimer:);
  methods[3].selector = @selector(getName);
  methods[4].selector = @selector(description);
  methods[5].selector = @selector(addQuestionWithJavaxJmdnsImplDNSOutgoing:withJavaxJmdnsImplDNSQuestion:);
  methods[6].selector = @selector(addAnswerWithJavaxJmdnsImplDNSOutgoing:withJavaxJmdnsImplDNSIncoming:withJavaxJmdnsImplDNSRecord:);
  methods[7].selector = @selector(addAnswerWithJavaxJmdnsImplDNSOutgoing:withJavaxJmdnsImplDNSRecord:withLong:);
  methods[8].selector = @selector(addAuthoritativeAnswerWithJavaxJmdnsImplDNSOutgoing:withJavaxJmdnsImplDNSRecord:);
  methods[9].selector = @selector(addAdditionalAnswerWithJavaxJmdnsImplDNSOutgoing:withJavaxJmdnsImplDNSIncoming:withJavaxJmdnsImplDNSRecord:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_jmDNSImpl_", "LJavaxJmdnsImplJmDNSImpl;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaxJmdnsImplJmDNSImpl;", "start", "LJavaUtilTimer;", "toString", "addQuestion", "LJavaxJmdnsImplDNSOutgoing;LJavaxJmdnsImplDNSQuestion;", "LJavaIoIOException;", "addAnswer", "LJavaxJmdnsImplDNSOutgoing;LJavaxJmdnsImplDNSIncoming;LJavaxJmdnsImplDNSRecord;", "LJavaxJmdnsImplDNSOutgoing;LJavaxJmdnsImplDNSRecord;J", "addAuthoritativeAnswer", "LJavaxJmdnsImplDNSOutgoing;LJavaxJmdnsImplDNSRecord;", "addAdditionalAnswer" };
  static const J2ObjcClassInfo _JavaxJmdnsImplTasksDNSTask = { "DNSTask", "javax.jmdns.impl.tasks", ptrTable, methods, fields, 7, 0x401, 10, 1, -1, -1, -1, -1, -1 };
  return &_JavaxJmdnsImplTasksDNSTask;
}

@end

void JavaxJmdnsImplTasksDNSTask_initWithJavaxJmdnsImplJmDNSImpl_(JavaxJmdnsImplTasksDNSTask *self, JavaxJmdnsImplJmDNSImpl *jmDNSImpl) {
  JavaUtilTimerTask_init(self);
  self->_jmDNSImpl_ = jmDNSImpl;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplTasksDNSTask)
