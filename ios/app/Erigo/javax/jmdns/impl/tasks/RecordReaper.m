//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/jmdns/impl/tasks/RecordReaper.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/util/Timer.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "javax/jmdns/impl/JmDNSImpl.h"
#include "javax/jmdns/impl/constants/DNSConstants.h"
#include "javax/jmdns/impl/tasks/DNSTask.h"
#include "javax/jmdns/impl/tasks/RecordReaper.h"

J2OBJC_INITIALIZED_DEFN(JavaxJmdnsImplTasksRecordReaper)

JavaUtilLoggingLogger *JavaxJmdnsImplTasksRecordReaper_logger;

@implementation JavaxJmdnsImplTasksRecordReaper

- (instancetype)initWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)jmDNSImpl {
  JavaxJmdnsImplTasksRecordReaper_initWithJavaxJmdnsImplJmDNSImpl_(self, jmDNSImpl);
  return self;
}

- (NSString *)getName {
  return JreStrcat("$$C", @"RecordReaper(", ([self getDns] != nil ? [((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) getName] : @""), ')');
}

- (void)startWithJavaUtilTimer:(JavaUtilTimer *)timer {
  if (![((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) isCanceling] && ![((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) isCanceled]) {
    [((JavaUtilTimer *) nil_chk(timer)) scheduleWithJavaUtilTimerTask:self withLong:JavaxJmdnsImplConstantsDNSConstants_RECORD_REAPER_INTERVAL withLong:JavaxJmdnsImplConstantsDNSConstants_RECORD_REAPER_INTERVAL];
  }
}

- (void)run {
  if ([((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) isCanceling] || [((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) isCanceled]) {
    return;
  }
  if ([((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplTasksRecordReaper_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINEST)]) {
    [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplTasksRecordReaper_logger)) finestWithNSString:JreStrcat("$$", [self getName], @".run() JmDNS reaping cache")];
  }
  [((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) cleanCache];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaxJmdnsImplJmDNSImpl:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(startWithJavaUtilTimer:);
  methods[3].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x8, -1, 3, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaxJmdnsImplJmDNSImpl;", "start", "LJavaUtilTimer;", &JavaxJmdnsImplTasksRecordReaper_logger };
  static const J2ObjcClassInfo _JavaxJmdnsImplTasksRecordReaper = { "RecordReaper", "javax.jmdns.impl.tasks", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_JavaxJmdnsImplTasksRecordReaper;
}

+ (void)initialize {
  if (self == [JavaxJmdnsImplTasksRecordReaper class]) {
    JavaxJmdnsImplTasksRecordReaper_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([JavaxJmdnsImplTasksRecordReaper_class_() getName]);
    J2OBJC_SET_INITIALIZED(JavaxJmdnsImplTasksRecordReaper)
  }
}

@end

void JavaxJmdnsImplTasksRecordReaper_initWithJavaxJmdnsImplJmDNSImpl_(JavaxJmdnsImplTasksRecordReaper *self, JavaxJmdnsImplJmDNSImpl *jmDNSImpl) {
  JavaxJmdnsImplTasksDNSTask_initWithJavaxJmdnsImplJmDNSImpl_(self, jmDNSImpl);
}

JavaxJmdnsImplTasksRecordReaper *new_JavaxJmdnsImplTasksRecordReaper_initWithJavaxJmdnsImplJmDNSImpl_(JavaxJmdnsImplJmDNSImpl *jmDNSImpl) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplTasksRecordReaper, initWithJavaxJmdnsImplJmDNSImpl_, jmDNSImpl)
}

JavaxJmdnsImplTasksRecordReaper *create_JavaxJmdnsImplTasksRecordReaper_initWithJavaxJmdnsImplJmDNSImpl_(JavaxJmdnsImplJmDNSImpl *jmDNSImpl) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplTasksRecordReaper, initWithJavaxJmdnsImplJmDNSImpl_, jmDNSImpl)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplTasksRecordReaper)
