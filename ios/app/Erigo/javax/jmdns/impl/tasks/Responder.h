//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/jmdns/impl/tasks/Responder.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxJmdnsImplTasksResponder")
#ifdef RESTRICT_JavaxJmdnsImplTasksResponder
#define INCLUDE_ALL_JavaxJmdnsImplTasksResponder 0
#else
#define INCLUDE_ALL_JavaxJmdnsImplTasksResponder 1
#endif
#undef RESTRICT_JavaxJmdnsImplTasksResponder

#if !defined (JavaxJmdnsImplTasksResponder_) && (INCLUDE_ALL_JavaxJmdnsImplTasksResponder || defined(INCLUDE_JavaxJmdnsImplTasksResponder))
#define JavaxJmdnsImplTasksResponder_

#define RESTRICT_JavaxJmdnsImplTasksDNSTask 1
#define INCLUDE_JavaxJmdnsImplTasksDNSTask 1
#include "javax/jmdns/impl/tasks/DNSTask.h"

@class JavaUtilLoggingLogger;
@class JavaUtilTimer;
@class JavaxJmdnsImplDNSIncoming;
@class JavaxJmdnsImplJmDNSImpl;

@interface JavaxJmdnsImplTasksResponder : JavaxJmdnsImplTasksDNSTask

#pragma mark Public

- (instancetype)initWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)jmDNSImpl
                  withJavaxJmdnsImplDNSIncoming:(JavaxJmdnsImplDNSIncoming *)inArg
                                        withInt:(jint)port;

- (NSString *)getName;

- (void)run;

- (void)startWithJavaUtilTimer:(JavaUtilTimer *)timer;

- (NSString *)description;

@end

J2OBJC_STATIC_INIT(JavaxJmdnsImplTasksResponder)

inline JavaUtilLoggingLogger *JavaxJmdnsImplTasksResponder_get_logger();
inline JavaUtilLoggingLogger *JavaxJmdnsImplTasksResponder_set_logger(JavaUtilLoggingLogger *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilLoggingLogger *JavaxJmdnsImplTasksResponder_logger;
J2OBJC_STATIC_FIELD_OBJ(JavaxJmdnsImplTasksResponder, logger, JavaUtilLoggingLogger *)

FOUNDATION_EXPORT void JavaxJmdnsImplTasksResponder_initWithJavaxJmdnsImplJmDNSImpl_withJavaxJmdnsImplDNSIncoming_withInt_(JavaxJmdnsImplTasksResponder *self, JavaxJmdnsImplJmDNSImpl *jmDNSImpl, JavaxJmdnsImplDNSIncoming *inArg, jint port);

FOUNDATION_EXPORT JavaxJmdnsImplTasksResponder *new_JavaxJmdnsImplTasksResponder_initWithJavaxJmdnsImplJmDNSImpl_withJavaxJmdnsImplDNSIncoming_withInt_(JavaxJmdnsImplJmDNSImpl *jmDNSImpl, JavaxJmdnsImplDNSIncoming *inArg, jint port) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT JavaxJmdnsImplTasksResponder *create_JavaxJmdnsImplTasksResponder_initWithJavaxJmdnsImplJmDNSImpl_withJavaxJmdnsImplDNSIncoming_withInt_(JavaxJmdnsImplJmDNSImpl *jmDNSImpl, JavaxJmdnsImplDNSIncoming *inArg, jint port);

J2OBJC_TYPE_LITERAL_HEADER(JavaxJmdnsImplTasksResponder)

#endif

#pragma pop_macro("INCLUDE_ALL_JavaxJmdnsImplTasksResponder")
