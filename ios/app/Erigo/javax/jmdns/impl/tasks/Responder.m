//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/jmdns/impl/tasks/Responder.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "java/util/Collection.h"
#include "java/util/HashSet.h"
#include "java/util/Random.h"
#include "java/util/Set.h"
#include "java/util/Timer.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "javax/jmdns/impl/DNSIncoming.h"
#include "javax/jmdns/impl/DNSOutgoing.h"
#include "javax/jmdns/impl/DNSQuestion.h"
#include "javax/jmdns/impl/DNSRecord.h"
#include "javax/jmdns/impl/JmDNSImpl.h"
#include "javax/jmdns/impl/constants/DNSConstants.h"
#include "javax/jmdns/impl/tasks/DNSTask.h"
#include "javax/jmdns/impl/tasks/Responder.h"

@interface JavaxJmdnsImplTasksResponder () {
 @public
  JavaxJmdnsImplDNSIncoming *_in_;
  jboolean _unicast_;
}

@end

J2OBJC_FIELD_SETTER(JavaxJmdnsImplTasksResponder, _in_, JavaxJmdnsImplDNSIncoming *)

J2OBJC_INITIALIZED_DEFN(JavaxJmdnsImplTasksResponder)

JavaUtilLoggingLogger *JavaxJmdnsImplTasksResponder_logger;

@implementation JavaxJmdnsImplTasksResponder

- (instancetype)initWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)jmDNSImpl
                  withJavaxJmdnsImplDNSIncoming:(JavaxJmdnsImplDNSIncoming *)inArg
                                        withInt:(jint)port {
  JavaxJmdnsImplTasksResponder_initWithJavaxJmdnsImplJmDNSImpl_withJavaxJmdnsImplDNSIncoming_withInt_(self, jmDNSImpl, inArg, port);
  return self;
}

- (NSString *)getName {
  return JreStrcat("$$C", @"Responder(", ([self getDns] != nil ? [((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) getName] : @""), ')');
}

- (NSString *)description {
  return JreStrcat("$$@", [super description], @" incomming: ", _in_);
}

- (void)startWithJavaUtilTimer:(JavaUtilTimer *)timer {
  jboolean iAmTheOnlyOne = true;
  for (JavaxJmdnsImplDNSQuestion * __strong question in nil_chk([((JavaxJmdnsImplDNSIncoming *) nil_chk(_in_)) getQuestions])) {
    if ([((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplTasksResponder_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINEST)]) {
      [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplTasksResponder_logger)) finestWithNSString:JreStrcat("$$@", [self getName], @"start() question=", question)];
    }
    iAmTheOnlyOne = [((JavaxJmdnsImplDNSQuestion *) nil_chk(question)) iAmTheOnlyOneWithJavaxJmdnsImplJmDNSImpl:[self getDns]];
    if (!iAmTheOnlyOne) {
      break;
    }
  }
  jint delay = (iAmTheOnlyOne && ![_in_ isTruncated]) ? 0 : JavaxJmdnsImplConstantsDNSConstants_RESPONSE_MIN_WAIT_INTERVAL + [((JavaUtilRandom *) nil_chk(JavaxJmdnsImplJmDNSImpl_getRandom())) nextIntWithInt:JavaxJmdnsImplConstantsDNSConstants_RESPONSE_MAX_WAIT_INTERVAL - JavaxJmdnsImplConstantsDNSConstants_RESPONSE_MIN_WAIT_INTERVAL + 1] - [_in_ elapseSinceArrival];
  if (delay < 0) {
    delay = 0;
  }
  if ([((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplTasksResponder_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINEST)]) {
    [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplTasksResponder_logger)) finestWithNSString:JreStrcat("$$I", [self getName], @"start() Responder chosen delay=", delay)];
  }
  if (![((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) isCanceling] && ![((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) isCanceled]) {
    [((JavaUtilTimer *) nil_chk(timer)) scheduleWithJavaUtilTimerTask:self withLong:delay];
  }
}

- (void)run {
  [((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) respondToQueryWithJavaxJmdnsImplDNSIncoming:_in_];
  id<JavaUtilSet> questions = new_JavaUtilHashSet_init();
  id<JavaUtilSet> answers = new_JavaUtilHashSet_init();
  if ([((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) isAnnounced]) {
    @try {
      for (JavaxJmdnsImplDNSQuestion * __strong question in nil_chk([((JavaxJmdnsImplDNSIncoming *) nil_chk(_in_)) getQuestions])) {
        if ([((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplTasksResponder_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINER)]) {
          [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplTasksResponder_logger)) finerWithNSString:JreStrcat("$$@", [self getName], @"run() JmDNS responding to: ", question)];
        }
        if (_unicast_) {
          [questions addWithId:question];
        }
        [((JavaxJmdnsImplDNSQuestion *) nil_chk(question)) addAnswersWithJavaxJmdnsImplJmDNSImpl:[self getDns] withJavaUtilSet:answers];
      }
      jlong now = JavaLangSystem_currentTimeMillis();
      for (JavaxJmdnsImplDNSRecord * __strong knownAnswer in nil_chk([_in_ getAnswers])) {
        if ([((JavaxJmdnsImplDNSRecord *) nil_chk(knownAnswer)) isStaleWithLong:now]) {
          [answers removeWithId:knownAnswer];
          if ([((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplTasksResponder_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINER)]) {
            [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplTasksResponder_logger)) finerWithNSString:JreStrcat("$$", [self getName], @"JmDNS Responder Known Answer Removed")];
          }
        }
      }
      if (![answers isEmpty]) {
        if ([((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplTasksResponder_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINER)]) {
          [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplTasksResponder_logger)) finerWithNSString:JreStrcat("$$", [self getName], @"run() JmDNS responding")];
        }
        JavaxJmdnsImplDNSOutgoing *out = new_JavaxJmdnsImplDNSOutgoing_initWithInt_withBoolean_withInt_(JavaxJmdnsImplConstantsDNSConstants_FLAGS_QR_RESPONSE | JavaxJmdnsImplConstantsDNSConstants_FLAGS_AA, !_unicast_, [_in_ getSenderUDPPayload]);
        [out setIdWithInt:[_in_ getId]];
        for (JavaxJmdnsImplDNSQuestion * __strong question in questions) {
          if (question != nil) {
            out = [self addQuestionWithJavaxJmdnsImplDNSOutgoing:out withJavaxJmdnsImplDNSQuestion:question];
          }
        }
        for (JavaxJmdnsImplDNSRecord * __strong answer in answers) {
          if (answer != nil) {
            out = [self addAnswerWithJavaxJmdnsImplDNSOutgoing:out withJavaxJmdnsImplDNSIncoming:_in_ withJavaxJmdnsImplDNSRecord:answer];
          }
        }
        if (![out isEmpty]) [((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) sendWithJavaxJmdnsImplDNSOutgoing:out];
      }
    }
    @catch (NSException *e) {
      [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplTasksResponder_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$$", [self getName], @"run() exception ") withNSException:e];
      [((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) close];
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaxJmdnsImplJmDNSImpl:withJavaxJmdnsImplDNSIncoming:withInt:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(description);
  methods[3].selector = @selector(startWithJavaUtilTimer:);
  methods[4].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x8, -1, 4, -1, -1 },
    { "_in_", "LJavaxJmdnsImplDNSIncoming;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_unicast_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaxJmdnsImplJmDNSImpl;LJavaxJmdnsImplDNSIncoming;I", "toString", "start", "LJavaUtilTimer;", &JavaxJmdnsImplTasksResponder_logger };
  static const J2ObjcClassInfo _JavaxJmdnsImplTasksResponder = { "Responder", "javax.jmdns.impl.tasks", ptrTable, methods, fields, 7, 0x1, 5, 3, -1, -1, -1, -1, -1 };
  return &_JavaxJmdnsImplTasksResponder;
}

+ (void)initialize {
  if (self == [JavaxJmdnsImplTasksResponder class]) {
    JavaxJmdnsImplTasksResponder_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([JavaxJmdnsImplTasksResponder_class_() getName]);
    J2OBJC_SET_INITIALIZED(JavaxJmdnsImplTasksResponder)
  }
}

@end

void JavaxJmdnsImplTasksResponder_initWithJavaxJmdnsImplJmDNSImpl_withJavaxJmdnsImplDNSIncoming_withInt_(JavaxJmdnsImplTasksResponder *self, JavaxJmdnsImplJmDNSImpl *jmDNSImpl, JavaxJmdnsImplDNSIncoming *inArg, jint port) {
  JavaxJmdnsImplTasksDNSTask_initWithJavaxJmdnsImplJmDNSImpl_(self, jmDNSImpl);
  self->_in_ = inArg;
  self->_unicast_ = (port != JreLoadStatic(JavaxJmdnsImplConstantsDNSConstants, MDNS_PORT));
}

JavaxJmdnsImplTasksResponder *new_JavaxJmdnsImplTasksResponder_initWithJavaxJmdnsImplJmDNSImpl_withJavaxJmdnsImplDNSIncoming_withInt_(JavaxJmdnsImplJmDNSImpl *jmDNSImpl, JavaxJmdnsImplDNSIncoming *inArg, jint port) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplTasksResponder, initWithJavaxJmdnsImplJmDNSImpl_withJavaxJmdnsImplDNSIncoming_withInt_, jmDNSImpl, inArg, port)
}

JavaxJmdnsImplTasksResponder *create_JavaxJmdnsImplTasksResponder_initWithJavaxJmdnsImplJmDNSImpl_withJavaxJmdnsImplDNSIncoming_withInt_(JavaxJmdnsImplJmDNSImpl *jmDNSImpl, JavaxJmdnsImplDNSIncoming *inArg, jint port) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplTasksResponder, initWithJavaxJmdnsImplJmDNSImpl_withJavaxJmdnsImplDNSIncoming_withInt_, jmDNSImpl, inArg, port)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplTasksResponder)
