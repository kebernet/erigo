//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/jmdns/impl/tasks/resolver/DNSResolverTask.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/util/Timer.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "javax/jmdns/impl/DNSOutgoing.h"
#include "javax/jmdns/impl/JmDNSImpl.h"
#include "javax/jmdns/impl/constants/DNSConstants.h"
#include "javax/jmdns/impl/tasks/DNSTask.h"
#include "javax/jmdns/impl/tasks/resolver/DNSResolverTask.h"

inline JavaUtilLoggingLogger *JavaxJmdnsImplTasksResolverDNSResolverTask_get_logger();
inline JavaUtilLoggingLogger *JavaxJmdnsImplTasksResolverDNSResolverTask_set_logger(JavaUtilLoggingLogger *value);
static JavaUtilLoggingLogger *JavaxJmdnsImplTasksResolverDNSResolverTask_logger;
J2OBJC_STATIC_FIELD_OBJ(JavaxJmdnsImplTasksResolverDNSResolverTask, logger, JavaUtilLoggingLogger *)

J2OBJC_INITIALIZED_DEFN(JavaxJmdnsImplTasksResolverDNSResolverTask)

@implementation JavaxJmdnsImplTasksResolverDNSResolverTask

- (instancetype)initWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)jmDNSImpl {
  JavaxJmdnsImplTasksResolverDNSResolverTask_initWithJavaxJmdnsImplJmDNSImpl_(self, jmDNSImpl);
  return self;
}

- (NSString *)description {
  return JreStrcat("$$I", [super description], @" count: ", _count_);
}

- (void)startWithJavaUtilTimer:(JavaUtilTimer *)timer {
  if (![((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) isCanceling] && ![((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) isCanceled]) {
    [((JavaUtilTimer *) nil_chk(timer)) scheduleWithJavaUtilTimerTask:self withLong:JavaxJmdnsImplConstantsDNSConstants_QUERY_WAIT_INTERVAL withLong:JavaxJmdnsImplConstantsDNSConstants_QUERY_WAIT_INTERVAL];
  }
}

- (void)run {
  @try {
    if ([((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) isCanceling] || [((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) isCanceled]) {
      [self cancel];
    }
    else {
      if (_count_++ < 3) {
        if ([((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplTasksResolverDNSResolverTask_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINER)]) {
          [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplTasksResolverDNSResolverTask_logger)) finerWithNSString:JreStrcat("$$$", [self getName], @".run() JmDNS ", [self description__])];
        }
        JavaxJmdnsImplDNSOutgoing *out = new_JavaxJmdnsImplDNSOutgoing_initWithInt_(JavaxJmdnsImplConstantsDNSConstants_FLAGS_QR_QUERY);
        out = [self addQuestionsWithJavaxJmdnsImplDNSOutgoing:out];
        if ([((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) isAnnounced]) {
          out = [self addAnswersWithJavaxJmdnsImplDNSOutgoing:out];
        }
        if (![((JavaxJmdnsImplDNSOutgoing *) nil_chk(out)) isEmpty]) {
          [((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) sendWithJavaxJmdnsImplDNSOutgoing:out];
        }
      }
      else {
        [self cancel];
      }
    }
  }
  @catch (NSException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplTasksResolverDNSResolverTask_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$$", [self getName], @".run() exception ") withNSException:e];
    [((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) recover];
  }
}

- (JavaxJmdnsImplDNSOutgoing *)addQuestionsWithJavaxJmdnsImplDNSOutgoing:(JavaxJmdnsImplDNSOutgoing *)outArg {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaxJmdnsImplDNSOutgoing *)addAnswersWithJavaxJmdnsImplDNSOutgoing:(JavaxJmdnsImplDNSOutgoing *)outArg {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)description__ {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplDNSOutgoing;", 0x404, 4, 5, 6, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplDNSOutgoing;", 0x404, 7, 5, 6, -1, -1, -1 },
    { NULL, "LNSString;", 0x404, 8, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaxJmdnsImplJmDNSImpl:);
  methods[1].selector = @selector(description);
  methods[2].selector = @selector(startWithJavaUtilTimer:);
  methods[3].selector = @selector(run);
  methods[4].selector = @selector(addQuestionsWithJavaxJmdnsImplDNSOutgoing:);
  methods[5].selector = @selector(addAnswersWithJavaxJmdnsImplDNSOutgoing:);
  methods[6].selector = @selector(description__);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0xa, -1, 9, -1, -1 },
    { "_count_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaxJmdnsImplJmDNSImpl;", "toString", "start", "LJavaUtilTimer;", "addQuestions", "LJavaxJmdnsImplDNSOutgoing;", "LJavaIoIOException;", "addAnswers", "description", &JavaxJmdnsImplTasksResolverDNSResolverTask_logger };
  static const J2ObjcClassInfo _JavaxJmdnsImplTasksResolverDNSResolverTask = { "DNSResolverTask", "javax.jmdns.impl.tasks.resolver", ptrTable, methods, fields, 7, 0x401, 7, 2, -1, -1, -1, -1, -1 };
  return &_JavaxJmdnsImplTasksResolverDNSResolverTask;
}

+ (void)initialize {
  if (self == [JavaxJmdnsImplTasksResolverDNSResolverTask class]) {
    JavaxJmdnsImplTasksResolverDNSResolverTask_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([JavaxJmdnsImplTasksResolverDNSResolverTask_class_() getName]);
    J2OBJC_SET_INITIALIZED(JavaxJmdnsImplTasksResolverDNSResolverTask)
  }
}

@end

void JavaxJmdnsImplTasksResolverDNSResolverTask_initWithJavaxJmdnsImplJmDNSImpl_(JavaxJmdnsImplTasksResolverDNSResolverTask *self, JavaxJmdnsImplJmDNSImpl *jmDNSImpl) {
  JavaxJmdnsImplTasksDNSTask_initWithJavaxJmdnsImplJmDNSImpl_(self, jmDNSImpl);
  self->_count_ = 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplTasksResolverDNSResolverTask)
