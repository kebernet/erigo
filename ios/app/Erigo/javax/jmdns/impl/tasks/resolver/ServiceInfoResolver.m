//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/jmdns/impl/tasks/resolver/ServiceInfoResolver.java
//

#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "javax/jmdns/impl/DNSCache.h"
#include "javax/jmdns/impl/DNSEntry.h"
#include "javax/jmdns/impl/DNSOutgoing.h"
#include "javax/jmdns/impl/DNSQuestion.h"
#include "javax/jmdns/impl/DNSRecord.h"
#include "javax/jmdns/impl/JmDNSImpl.h"
#include "javax/jmdns/impl/ServiceInfoImpl.h"
#include "javax/jmdns/impl/constants/DNSRecordClass.h"
#include "javax/jmdns/impl/constants/DNSRecordType.h"
#include "javax/jmdns/impl/tasks/resolver/DNSResolverTask.h"
#include "javax/jmdns/impl/tasks/resolver/ServiceInfoResolver.h"

@interface JavaxJmdnsImplTasksResolverServiceInfoResolver () {
 @public
  JavaxJmdnsImplServiceInfoImpl *_info_;
}

@end

J2OBJC_FIELD_SETTER(JavaxJmdnsImplTasksResolverServiceInfoResolver, _info_, JavaxJmdnsImplServiceInfoImpl *)

@implementation JavaxJmdnsImplTasksResolverServiceInfoResolver

- (instancetype)initWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)jmDNSImpl
              withJavaxJmdnsImplServiceInfoImpl:(JavaxJmdnsImplServiceInfoImpl *)info {
  JavaxJmdnsImplTasksResolverServiceInfoResolver_initWithJavaxJmdnsImplJmDNSImpl_withJavaxJmdnsImplServiceInfoImpl_(self, jmDNSImpl, info);
  return self;
}

- (NSString *)getName {
  return JreStrcat("$$C", @"ServiceInfoResolver(", ([self getDns] != nil ? [((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) getName] : @""), ')');
}

- (jboolean)cancel {
  jboolean result = [super cancel];
  if (![((JavaxJmdnsImplServiceInfoImpl *) nil_chk(_info_)) isPersistent]) {
    [((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) removeListenerWithJavaxJmdnsImplDNSListener:_info_];
  }
  return result;
}

- (JavaxJmdnsImplDNSOutgoing *)addAnswersWithJavaxJmdnsImplDNSOutgoing:(JavaxJmdnsImplDNSOutgoing *)outArg {
  JavaxJmdnsImplDNSOutgoing *newOut = outArg;
  if (![((JavaxJmdnsImplServiceInfoImpl *) nil_chk(_info_)) hasData]) {
    jlong now = JavaLangSystem_currentTimeMillis();
    newOut = [self addAnswerWithJavaxJmdnsImplDNSOutgoing:newOut withJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *) cast_chk([((JavaxJmdnsImplDNSCache *) nil_chk([((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) getCache])) getDNSEntryWithNSString:[_info_ getQualifiedName] withJavaxJmdnsImplConstantsDNSRecordType:JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordType, TYPE_SRV) withJavaxJmdnsImplConstantsDNSRecordClass:JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordClass, CLASS_IN)], [JavaxJmdnsImplDNSRecord class]) withLong:now];
    newOut = [self addAnswerWithJavaxJmdnsImplDNSOutgoing:newOut withJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *) cast_chk([((JavaxJmdnsImplDNSCache *) nil_chk([((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) getCache])) getDNSEntryWithNSString:[_info_ getQualifiedName] withJavaxJmdnsImplConstantsDNSRecordType:JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordType, TYPE_TXT) withJavaxJmdnsImplConstantsDNSRecordClass:JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordClass, CLASS_IN)], [JavaxJmdnsImplDNSRecord class]) withLong:now];
    if ([((NSString *) nil_chk([_info_ getServer])) java_length] > 0) {
      newOut = [self addAnswerWithJavaxJmdnsImplDNSOutgoing:newOut withJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *) cast_chk([((JavaxJmdnsImplDNSCache *) nil_chk([((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) getCache])) getDNSEntryWithNSString:[_info_ getServer] withJavaxJmdnsImplConstantsDNSRecordType:JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordType, TYPE_A) withJavaxJmdnsImplConstantsDNSRecordClass:JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordClass, CLASS_IN)], [JavaxJmdnsImplDNSRecord class]) withLong:now];
      newOut = [self addAnswerWithJavaxJmdnsImplDNSOutgoing:newOut withJavaxJmdnsImplDNSRecord:(JavaxJmdnsImplDNSRecord *) cast_chk([((JavaxJmdnsImplDNSCache *) nil_chk([((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) getCache])) getDNSEntryWithNSString:[_info_ getServer] withJavaxJmdnsImplConstantsDNSRecordType:JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordType, TYPE_AAAA) withJavaxJmdnsImplConstantsDNSRecordClass:JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordClass, CLASS_IN)], [JavaxJmdnsImplDNSRecord class]) withLong:now];
    }
  }
  return newOut;
}

- (JavaxJmdnsImplDNSOutgoing *)addQuestionsWithJavaxJmdnsImplDNSOutgoing:(JavaxJmdnsImplDNSOutgoing *)outArg {
  JavaxJmdnsImplDNSOutgoing *newOut = outArg;
  if (![((JavaxJmdnsImplServiceInfoImpl *) nil_chk(_info_)) hasData]) {
    newOut = [self addQuestionWithJavaxJmdnsImplDNSOutgoing:newOut withJavaxJmdnsImplDNSQuestion:JavaxJmdnsImplDNSQuestion_newQuestionWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_([_info_ getQualifiedName], JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordType, TYPE_SRV), JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordClass, CLASS_IN), JavaxJmdnsImplConstantsDNSRecordClass_NOT_UNIQUE)];
    newOut = [self addQuestionWithJavaxJmdnsImplDNSOutgoing:newOut withJavaxJmdnsImplDNSQuestion:JavaxJmdnsImplDNSQuestion_newQuestionWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_([_info_ getQualifiedName], JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordType, TYPE_TXT), JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordClass, CLASS_IN), JavaxJmdnsImplConstantsDNSRecordClass_NOT_UNIQUE)];
    if ([((NSString *) nil_chk([_info_ getServer])) java_length] > 0) {
      newOut = [self addQuestionWithJavaxJmdnsImplDNSOutgoing:newOut withJavaxJmdnsImplDNSQuestion:JavaxJmdnsImplDNSQuestion_newQuestionWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_([_info_ getServer], JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordType, TYPE_A), JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordClass, CLASS_IN), JavaxJmdnsImplConstantsDNSRecordClass_NOT_UNIQUE)];
      newOut = [self addQuestionWithJavaxJmdnsImplDNSOutgoing:newOut withJavaxJmdnsImplDNSQuestion:JavaxJmdnsImplDNSQuestion_newQuestionWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_([_info_ getServer], JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordType, TYPE_AAAA), JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordClass, CLASS_IN), JavaxJmdnsImplConstantsDNSRecordClass_NOT_UNIQUE)];
    }
  }
  return newOut;
}

- (NSString *)description__ {
  return JreStrcat("$$", @"querying service info: ", (_info_ != nil ? [_info_ getQualifiedName] : @"null"));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplDNSOutgoing;", 0x4, 1, 2, 3, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplDNSOutgoing;", 0x4, 4, 2, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaxJmdnsImplJmDNSImpl:withJavaxJmdnsImplServiceInfoImpl:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(cancel);
  methods[3].selector = @selector(addAnswersWithJavaxJmdnsImplDNSOutgoing:);
  methods[4].selector = @selector(addQuestionsWithJavaxJmdnsImplDNSOutgoing:);
  methods[5].selector = @selector(description__);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_info_", "LJavaxJmdnsImplServiceInfoImpl;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaxJmdnsImplJmDNSImpl;LJavaxJmdnsImplServiceInfoImpl;", "addAnswers", "LJavaxJmdnsImplDNSOutgoing;", "LJavaIoIOException;", "addQuestions", "description" };
  static const J2ObjcClassInfo _JavaxJmdnsImplTasksResolverServiceInfoResolver = { "ServiceInfoResolver", "javax.jmdns.impl.tasks.resolver", ptrTable, methods, fields, 7, 0x1, 6, 1, -1, -1, -1, -1, -1 };
  return &_JavaxJmdnsImplTasksResolverServiceInfoResolver;
}

@end

void JavaxJmdnsImplTasksResolverServiceInfoResolver_initWithJavaxJmdnsImplJmDNSImpl_withJavaxJmdnsImplServiceInfoImpl_(JavaxJmdnsImplTasksResolverServiceInfoResolver *self, JavaxJmdnsImplJmDNSImpl *jmDNSImpl, JavaxJmdnsImplServiceInfoImpl *info) {
  JavaxJmdnsImplTasksResolverDNSResolverTask_initWithJavaxJmdnsImplJmDNSImpl_(self, jmDNSImpl);
  self->_info_ = info;
  [((JavaxJmdnsImplServiceInfoImpl *) nil_chk(info)) setDnsWithJavaxJmdnsImplJmDNSImpl:[self getDns]];
  [((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) addListenerWithJavaxJmdnsImplDNSListener:info withJavaxJmdnsImplDNSQuestion:JavaxJmdnsImplDNSQuestion_newQuestionWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_([info getQualifiedName], JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordType, TYPE_ANY), JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordClass, CLASS_IN), JavaxJmdnsImplConstantsDNSRecordClass_NOT_UNIQUE)];
}

JavaxJmdnsImplTasksResolverServiceInfoResolver *new_JavaxJmdnsImplTasksResolverServiceInfoResolver_initWithJavaxJmdnsImplJmDNSImpl_withJavaxJmdnsImplServiceInfoImpl_(JavaxJmdnsImplJmDNSImpl *jmDNSImpl, JavaxJmdnsImplServiceInfoImpl *info) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplTasksResolverServiceInfoResolver, initWithJavaxJmdnsImplJmDNSImpl_withJavaxJmdnsImplServiceInfoImpl_, jmDNSImpl, info)
}

JavaxJmdnsImplTasksResolverServiceInfoResolver *create_JavaxJmdnsImplTasksResolverServiceInfoResolver_initWithJavaxJmdnsImplJmDNSImpl_withJavaxJmdnsImplServiceInfoImpl_(JavaxJmdnsImplJmDNSImpl *jmDNSImpl, JavaxJmdnsImplServiceInfoImpl *info) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplTasksResolverServiceInfoResolver, initWithJavaxJmdnsImplJmDNSImpl_withJavaxJmdnsImplServiceInfoImpl_, jmDNSImpl, info)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplTasksResolverServiceInfoResolver)
