//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/jmdns/impl/tasks/resolver/TypeResolver.java
//

#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "javax/jmdns/impl/DNSOutgoing.h"
#include "javax/jmdns/impl/DNSQuestion.h"
#include "javax/jmdns/impl/DNSRecord.h"
#include "javax/jmdns/impl/JmDNSImpl.h"
#include "javax/jmdns/impl/constants/DNSConstants.h"
#include "javax/jmdns/impl/constants/DNSRecordClass.h"
#include "javax/jmdns/impl/constants/DNSRecordType.h"
#include "javax/jmdns/impl/tasks/resolver/DNSResolverTask.h"
#include "javax/jmdns/impl/tasks/resolver/TypeResolver.h"

@implementation JavaxJmdnsImplTasksResolverTypeResolver

- (instancetype)initWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)jmDNSImpl {
  JavaxJmdnsImplTasksResolverTypeResolver_initWithJavaxJmdnsImplJmDNSImpl_(self, jmDNSImpl);
  return self;
}

- (NSString *)getName {
  return JreStrcat("$$C", @"TypeResolver(", ([self getDns] != nil ? [((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) getName] : @""), ')');
}

- (JavaxJmdnsImplDNSOutgoing *)addAnswersWithJavaxJmdnsImplDNSOutgoing:(JavaxJmdnsImplDNSOutgoing *)outArg {
  JavaxJmdnsImplDNSOutgoing *newOut = outArg;
  jlong now = JavaLangSystem_currentTimeMillis();
  for (NSString * __strong type in nil_chk([((id<JavaUtilMap>) nil_chk([((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) getServiceTypes])) keySet])) {
    JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry *typeEntry = [((id<JavaUtilMap>) nil_chk([((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) getServiceTypes])) getWithId:type];
    newOut = [self addAnswerWithJavaxJmdnsImplDNSOutgoing:newOut withJavaxJmdnsImplDNSRecord:new_JavaxJmdnsImplDNSRecord_Pointer_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withNSString_(@"_services._dns-sd._udp.local.", JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordClass, CLASS_IN), JavaxJmdnsImplConstantsDNSRecordClass_NOT_UNIQUE, JavaxJmdnsImplConstantsDNSConstants_DNS_TTL, [((JavaxJmdnsImplJmDNSImpl_ServiceTypeEntry *) nil_chk(typeEntry)) getType]) withLong:now];
  }
  return newOut;
}

- (JavaxJmdnsImplDNSOutgoing *)addQuestionsWithJavaxJmdnsImplDNSOutgoing:(JavaxJmdnsImplDNSOutgoing *)outArg {
  return [self addQuestionWithJavaxJmdnsImplDNSOutgoing:outArg withJavaxJmdnsImplDNSQuestion:JavaxJmdnsImplDNSQuestion_newQuestionWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_(@"_services._dns-sd._udp.local.", JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordType, TYPE_PTR), JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordClass, CLASS_IN), JavaxJmdnsImplConstantsDNSRecordClass_NOT_UNIQUE)];
}

- (NSString *)description__ {
  return @"querying type";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplDNSOutgoing;", 0x4, 1, 2, 3, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplDNSOutgoing;", 0x4, 4, 2, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaxJmdnsImplJmDNSImpl:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(addAnswersWithJavaxJmdnsImplDNSOutgoing:);
  methods[3].selector = @selector(addQuestionsWithJavaxJmdnsImplDNSOutgoing:);
  methods[4].selector = @selector(description__);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaxJmdnsImplJmDNSImpl;", "addAnswers", "LJavaxJmdnsImplDNSOutgoing;", "LJavaIoIOException;", "addQuestions", "description" };
  static const J2ObjcClassInfo _JavaxJmdnsImplTasksResolverTypeResolver = { "TypeResolver", "javax.jmdns.impl.tasks.resolver", ptrTable, methods, NULL, 7, 0x1, 5, 0, -1, -1, -1, -1, -1 };
  return &_JavaxJmdnsImplTasksResolverTypeResolver;
}

@end

void JavaxJmdnsImplTasksResolverTypeResolver_initWithJavaxJmdnsImplJmDNSImpl_(JavaxJmdnsImplTasksResolverTypeResolver *self, JavaxJmdnsImplJmDNSImpl *jmDNSImpl) {
  JavaxJmdnsImplTasksResolverDNSResolverTask_initWithJavaxJmdnsImplJmDNSImpl_(self, jmDNSImpl);
}

JavaxJmdnsImplTasksResolverTypeResolver *new_JavaxJmdnsImplTasksResolverTypeResolver_initWithJavaxJmdnsImplJmDNSImpl_(JavaxJmdnsImplJmDNSImpl *jmDNSImpl) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplTasksResolverTypeResolver, initWithJavaxJmdnsImplJmDNSImpl_, jmDNSImpl)
}

JavaxJmdnsImplTasksResolverTypeResolver *create_JavaxJmdnsImplTasksResolverTypeResolver_initWithJavaxJmdnsImplJmDNSImpl_(JavaxJmdnsImplJmDNSImpl *jmDNSImpl) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplTasksResolverTypeResolver, initWithJavaxJmdnsImplJmDNSImpl_, jmDNSImpl)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplTasksResolverTypeResolver)
