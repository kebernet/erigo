//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/jmdns/impl/tasks/state/DNSStateTask.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JavaxJmdnsImplTasksStateDNSStateTask")
#ifdef RESTRICT_JavaxJmdnsImplTasksStateDNSStateTask
#define INCLUDE_ALL_JavaxJmdnsImplTasksStateDNSStateTask 0
#else
#define INCLUDE_ALL_JavaxJmdnsImplTasksStateDNSStateTask 1
#endif
#undef RESTRICT_JavaxJmdnsImplTasksStateDNSStateTask

#if !defined (JavaxJmdnsImplTasksStateDNSStateTask_) && (INCLUDE_ALL_JavaxJmdnsImplTasksStateDNSStateTask || defined(INCLUDE_JavaxJmdnsImplTasksStateDNSStateTask))
#define JavaxJmdnsImplTasksStateDNSStateTask_

#define RESTRICT_JavaxJmdnsImplTasksDNSTask 1
#define INCLUDE_JavaxJmdnsImplTasksDNSTask 1
#include "javax/jmdns/impl/tasks/DNSTask.h"

@class JavaUtilLoggingLogger;
@class JavaxJmdnsImplConstantsDNSState;
@class JavaxJmdnsImplDNSOutgoing;
@class JavaxJmdnsImplJmDNSImpl;
@class JavaxJmdnsImplServiceInfoImpl;
@protocol JavaUtilList;

@interface JavaxJmdnsImplTasksStateDNSStateTask : JavaxJmdnsImplTasksDNSTask

#pragma mark Public

- (instancetype)initWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)jmDNSImpl
                                        withInt:(jint)ttl;

+ (jint)defaultTTL;

- (NSString *)getTaskDescription;

- (jint)getTTL;

- (void)run;

+ (void)setDefaultTTLWithInt:(jint)value;

#pragma mark Protected

- (void)advanceObjectsStateWithJavaUtilList:(id<JavaUtilList>)list;

- (void)advanceTask;

- (void)associateWithJavaxJmdnsImplConstantsDNSState:(JavaxJmdnsImplConstantsDNSState *)state;

- (JavaxJmdnsImplDNSOutgoing *)buildOutgoingForDNSWithJavaxJmdnsImplDNSOutgoing:(JavaxJmdnsImplDNSOutgoing *)outArg;

- (JavaxJmdnsImplDNSOutgoing *)buildOutgoingForInfoWithJavaxJmdnsImplServiceInfoImpl:(JavaxJmdnsImplServiceInfoImpl *)info
                                                       withJavaxJmdnsImplDNSOutgoing:(JavaxJmdnsImplDNSOutgoing *)outArg;

- (jboolean)checkRunCondition;

- (JavaxJmdnsImplDNSOutgoing *)createOugoing;

- (JavaxJmdnsImplConstantsDNSState *)getTaskState;

- (void)recoverTaskWithNSException:(NSException *)e;
#define recoverTaskWithJavaLangThrowable recoverTaskWithNSException

- (void)removeAssociation;

- (void)setTaskStateWithJavaxJmdnsImplConstantsDNSState:(JavaxJmdnsImplConstantsDNSState *)taskState;

@end

J2OBJC_STATIC_INIT(JavaxJmdnsImplTasksStateDNSStateTask)

inline JavaUtilLoggingLogger *JavaxJmdnsImplTasksStateDNSStateTask_get_logger1();
inline JavaUtilLoggingLogger *JavaxJmdnsImplTasksStateDNSStateTask_set_logger1(JavaUtilLoggingLogger *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilLoggingLogger *JavaxJmdnsImplTasksStateDNSStateTask_logger1;
J2OBJC_STATIC_FIELD_OBJ(JavaxJmdnsImplTasksStateDNSStateTask, logger1, JavaUtilLoggingLogger *)

FOUNDATION_EXPORT jint JavaxJmdnsImplTasksStateDNSStateTask_defaultTTL();

FOUNDATION_EXPORT void JavaxJmdnsImplTasksStateDNSStateTask_setDefaultTTLWithInt_(jint value);

FOUNDATION_EXPORT void JavaxJmdnsImplTasksStateDNSStateTask_initWithJavaxJmdnsImplJmDNSImpl_withInt_(JavaxJmdnsImplTasksStateDNSStateTask *self, JavaxJmdnsImplJmDNSImpl *jmDNSImpl, jint ttl);

J2OBJC_TYPE_LITERAL_HEADER(JavaxJmdnsImplTasksStateDNSStateTask)

#endif

#pragma pop_macro("INCLUDE_ALL_JavaxJmdnsImplTasksStateDNSStateTask")
