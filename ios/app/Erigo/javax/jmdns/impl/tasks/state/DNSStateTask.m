//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/jmdns/impl/tasks/state/DNSStateTask.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "javax/jmdns/ServiceInfo.h"
#include "javax/jmdns/impl/DNSOutgoing.h"
#include "javax/jmdns/impl/DNSStatefulObject.h"
#include "javax/jmdns/impl/JmDNSImpl.h"
#include "javax/jmdns/impl/ServiceInfoImpl.h"
#include "javax/jmdns/impl/constants/DNSState.h"
#include "javax/jmdns/impl/tasks/DNSTask.h"
#include "javax/jmdns/impl/tasks/state/DNSStateTask.h"

@interface JavaxJmdnsImplTasksStateDNSStateTask () {
 @public
  jint _ttl_;
  JavaxJmdnsImplConstantsDNSState *_taskState_;
}

@end

J2OBJC_FIELD_SETTER(JavaxJmdnsImplTasksStateDNSStateTask, _taskState_, JavaxJmdnsImplConstantsDNSState *)

inline jint JavaxJmdnsImplTasksStateDNSStateTask_get__defaultTTL();
inline jint JavaxJmdnsImplTasksStateDNSStateTask_set__defaultTTL(jint value);
inline jint *JavaxJmdnsImplTasksStateDNSStateTask_getRef__defaultTTL();
static jint JavaxJmdnsImplTasksStateDNSStateTask__defaultTTL = 3600;
J2OBJC_STATIC_FIELD_PRIMITIVE(JavaxJmdnsImplTasksStateDNSStateTask, _defaultTTL, jint)

J2OBJC_INITIALIZED_DEFN(JavaxJmdnsImplTasksStateDNSStateTask)

JavaUtilLoggingLogger *JavaxJmdnsImplTasksStateDNSStateTask_logger1;

@implementation JavaxJmdnsImplTasksStateDNSStateTask

- (NSString *)getTaskDescription {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (jint)defaultTTL {
  return JavaxJmdnsImplTasksStateDNSStateTask_defaultTTL();
}

+ (void)setDefaultTTLWithInt:(jint)value {
  JavaxJmdnsImplTasksStateDNSStateTask_setDefaultTTLWithInt_(value);
}

- (instancetype)initWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)jmDNSImpl
                                        withInt:(jint)ttl {
  JavaxJmdnsImplTasksStateDNSStateTask_initWithJavaxJmdnsImplJmDNSImpl_withInt_(self, jmDNSImpl, ttl);
  return self;
}

- (jint)getTTL {
  return _ttl_;
}

- (void)associateWithJavaxJmdnsImplConstantsDNSState:(JavaxJmdnsImplConstantsDNSState *)state {
  @synchronized([self getDns]) {
    [((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) associateWithTaskWithJavaxJmdnsImplTasksDNSTask:self withJavaxJmdnsImplConstantsDNSState:state];
  }
  for (JavaxJmdnsServiceInfo * __strong serviceInfo in nil_chk([((id<JavaUtilMap>) nil_chk([((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) getServices])) values])) {
    [((JavaxJmdnsImplServiceInfoImpl *) nil_chk(((JavaxJmdnsImplServiceInfoImpl *) cast_chk(serviceInfo, [JavaxJmdnsImplServiceInfoImpl class])))) associateWithTaskWithJavaxJmdnsImplTasksDNSTask:self withJavaxJmdnsImplConstantsDNSState:state];
  }
}

- (void)removeAssociation {
  @synchronized([self getDns]) {
    [((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) removeAssociationWithTaskWithJavaxJmdnsImplTasksDNSTask:self];
  }
  for (JavaxJmdnsServiceInfo * __strong serviceInfo in nil_chk([((id<JavaUtilMap>) nil_chk([((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) getServices])) values])) {
    [((JavaxJmdnsImplServiceInfoImpl *) nil_chk(((JavaxJmdnsImplServiceInfoImpl *) cast_chk(serviceInfo, [JavaxJmdnsImplServiceInfoImpl class])))) removeAssociationWithTaskWithJavaxJmdnsImplTasksDNSTask:self];
  }
}

- (void)run {
  JavaxJmdnsImplDNSOutgoing *out = [self createOugoing];
  @try {
    if (![self checkRunCondition]) {
      [self cancel];
      return;
    }
    id<JavaUtilList> stateObjects = new_JavaUtilArrayList_init();
    @synchronized([self getDns]) {
      if ([((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) isAssociatedWithTaskWithJavaxJmdnsImplTasksDNSTask:self withJavaxJmdnsImplConstantsDNSState:[self getTaskState]]) {
        [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplTasksStateDNSStateTask_logger1)) finerWithNSString:JreStrcat("$$$C$", [self getName], @".run() JmDNS ", [self getTaskDescription], ' ', [((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) getName])];
        [stateObjects addWithId:[self getDns]];
        out = [self buildOutgoingForDNSWithJavaxJmdnsImplDNSOutgoing:out];
      }
    }
    for (JavaxJmdnsServiceInfo * __strong serviceInfo in nil_chk([((id<JavaUtilMap>) nil_chk([((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) getServices])) values])) {
      JavaxJmdnsImplServiceInfoImpl *info = (JavaxJmdnsImplServiceInfoImpl *) cast_chk(serviceInfo, [JavaxJmdnsImplServiceInfoImpl class]);
      @synchronized(info) {
        if ([((JavaxJmdnsImplServiceInfoImpl *) nil_chk(info)) isAssociatedWithTaskWithJavaxJmdnsImplTasksDNSTask:self withJavaxJmdnsImplConstantsDNSState:[self getTaskState]]) {
          [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplTasksStateDNSStateTask_logger1)) fineWithNSString:JreStrcat("$$$C$", [self getName], @".run() JmDNS ", [self getTaskDescription], ' ', [info getQualifiedName])];
          [stateObjects addWithId:info];
          out = [self buildOutgoingForInfoWithJavaxJmdnsImplServiceInfoImpl:info withJavaxJmdnsImplDNSOutgoing:out];
        }
      }
    }
    if (![((JavaxJmdnsImplDNSOutgoing *) nil_chk(out)) isEmpty]) {
      [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplTasksStateDNSStateTask_logger1)) finerWithNSString:JreStrcat("$$$$@", [self getName], @".run() JmDNS ", [self getTaskDescription], @" #", [self getTaskState])];
      [((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) sendWithJavaxJmdnsImplDNSOutgoing:out];
      [self advanceObjectsStateWithJavaUtilList:stateObjects];
    }
    else {
      [self advanceObjectsStateWithJavaUtilList:stateObjects];
      [self cancel];
      return;
    }
  }
  @catch (NSException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(JavaxJmdnsImplTasksStateDNSStateTask_logger1)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$$", [self getName], @".run() exception ") withNSException:e];
    [self recoverTaskWithNSException:e];
  }
  [self advanceTask];
}

- (jboolean)checkRunCondition {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaxJmdnsImplDNSOutgoing *)buildOutgoingForDNSWithJavaxJmdnsImplDNSOutgoing:(JavaxJmdnsImplDNSOutgoing *)outArg {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaxJmdnsImplDNSOutgoing *)buildOutgoingForInfoWithJavaxJmdnsImplServiceInfoImpl:(JavaxJmdnsImplServiceInfoImpl *)info
                                                       withJavaxJmdnsImplDNSOutgoing:(JavaxJmdnsImplDNSOutgoing *)outArg {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaxJmdnsImplDNSOutgoing *)createOugoing {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)advanceObjectsStateWithJavaUtilList:(id<JavaUtilList>)list {
  if (list != nil) {
    for (id<JavaxJmdnsImplDNSStatefulObject> __strong object in list) {
      @synchronized(object) {
        [((id<JavaxJmdnsImplDNSStatefulObject>) nil_chk(object)) advanceStateWithJavaxJmdnsImplTasksDNSTask:self];
      }
    }
  }
}

- (void)recoverTaskWithNSException:(NSException *)e {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)advanceTask {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (JavaxJmdnsImplConstantsDNSState *)getTaskState {
  return self->_taskState_;
}

- (void)setTaskStateWithJavaxJmdnsImplConstantsDNSState:(JavaxJmdnsImplConstantsDNSState *)taskState {
  self->_taskState_ = taskState;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplDNSOutgoing;", 0x404, 5, 6, 7, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplDNSOutgoing;", 0x404, 8, 9, 7, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplDNSOutgoing;", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 10, 11, -1, 12, -1, -1 },
    { NULL, "V", 0x404, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplConstantsDNSState;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 15, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getTaskDescription);
  methods[1].selector = @selector(defaultTTL);
  methods[2].selector = @selector(setDefaultTTLWithInt:);
  methods[3].selector = @selector(initWithJavaxJmdnsImplJmDNSImpl:withInt:);
  methods[4].selector = @selector(getTTL);
  methods[5].selector = @selector(associateWithJavaxJmdnsImplConstantsDNSState:);
  methods[6].selector = @selector(removeAssociation);
  methods[7].selector = @selector(run);
  methods[8].selector = @selector(checkRunCondition);
  methods[9].selector = @selector(buildOutgoingForDNSWithJavaxJmdnsImplDNSOutgoing:);
  methods[10].selector = @selector(buildOutgoingForInfoWithJavaxJmdnsImplServiceInfoImpl:withJavaxJmdnsImplDNSOutgoing:);
  methods[11].selector = @selector(createOugoing);
  methods[12].selector = @selector(advanceObjectsStateWithJavaUtilList:);
  methods[13].selector = @selector(recoverTaskWithNSException:);
  methods[14].selector = @selector(advanceTask);
  methods[15].selector = @selector(getTaskState);
  methods[16].selector = @selector(setTaskStateWithJavaxJmdnsImplConstantsDNSState:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger1", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x8, -1, 16, -1, -1 },
    { "_ttl_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_defaultTTL", "I", .constantValue.asLong = 0, 0xa, -1, 17, -1, -1 },
    { "_taskState_", "LJavaxJmdnsImplConstantsDNSState;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setDefaultTTL", "I", "LJavaxJmdnsImplJmDNSImpl;I", "associate", "LJavaxJmdnsImplConstantsDNSState;", "buildOutgoingForDNS", "LJavaxJmdnsImplDNSOutgoing;", "LJavaIoIOException;", "buildOutgoingForInfo", "LJavaxJmdnsImplServiceInfoImpl;LJavaxJmdnsImplDNSOutgoing;", "advanceObjectsState", "LJavaUtilList;", "(Ljava/util/List<Ljavax/jmdns/impl/DNSStatefulObject;>;)V", "recoverTask", "LNSException;", "setTaskState", &JavaxJmdnsImplTasksStateDNSStateTask_logger1, &JavaxJmdnsImplTasksStateDNSStateTask__defaultTTL };
  static const J2ObjcClassInfo _JavaxJmdnsImplTasksStateDNSStateTask = { "DNSStateTask", "javax.jmdns.impl.tasks.state", ptrTable, methods, fields, 7, 0x401, 17, 4, -1, -1, -1, -1, -1 };
  return &_JavaxJmdnsImplTasksStateDNSStateTask;
}

+ (void)initialize {
  if (self == [JavaxJmdnsImplTasksStateDNSStateTask class]) {
    JavaxJmdnsImplTasksStateDNSStateTask_logger1 = JavaUtilLoggingLogger_getLoggerWithNSString_([JavaxJmdnsImplTasksStateDNSStateTask_class_() getName]);
    J2OBJC_SET_INITIALIZED(JavaxJmdnsImplTasksStateDNSStateTask)
  }
}

@end

jint JavaxJmdnsImplTasksStateDNSStateTask_defaultTTL() {
  JavaxJmdnsImplTasksStateDNSStateTask_initialize();
  return JavaxJmdnsImplTasksStateDNSStateTask__defaultTTL;
}

void JavaxJmdnsImplTasksStateDNSStateTask_setDefaultTTLWithInt_(jint value) {
  JavaxJmdnsImplTasksStateDNSStateTask_initialize();
  JavaxJmdnsImplTasksStateDNSStateTask__defaultTTL = value;
}

void JavaxJmdnsImplTasksStateDNSStateTask_initWithJavaxJmdnsImplJmDNSImpl_withInt_(JavaxJmdnsImplTasksStateDNSStateTask *self, JavaxJmdnsImplJmDNSImpl *jmDNSImpl, jint ttl) {
  JavaxJmdnsImplTasksDNSTask_initWithJavaxJmdnsImplJmDNSImpl_(self, jmDNSImpl);
  self->_taskState_ = nil;
  self->_ttl_ = ttl;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplTasksStateDNSStateTask)
