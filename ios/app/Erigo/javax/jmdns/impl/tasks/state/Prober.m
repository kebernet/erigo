//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/javax/jmdns/impl/tasks/state/Prober.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "java/util/Collection.h"
#include "java/util/Random.h"
#include "java/util/Timer.h"
#include "java/util/logging/Logger.h"
#include "javax/jmdns/impl/DNSOutgoing.h"
#include "javax/jmdns/impl/DNSQuestion.h"
#include "javax/jmdns/impl/DNSRecord.h"
#include "javax/jmdns/impl/HostInfo.h"
#include "javax/jmdns/impl/JmDNSImpl.h"
#include "javax/jmdns/impl/ServiceInfoImpl.h"
#include "javax/jmdns/impl/constants/DNSConstants.h"
#include "javax/jmdns/impl/constants/DNSRecordClass.h"
#include "javax/jmdns/impl/constants/DNSRecordType.h"
#include "javax/jmdns/impl/constants/DNSState.h"
#include "javax/jmdns/impl/tasks/state/DNSStateTask.h"
#include "javax/jmdns/impl/tasks/state/Prober.h"

J2OBJC_INITIALIZED_DEFN(JavaxJmdnsImplTasksStateProber)

JavaUtilLoggingLogger *JavaxJmdnsImplTasksStateProber_logger;

@implementation JavaxJmdnsImplTasksStateProber

- (instancetype)initWithJavaxJmdnsImplJmDNSImpl:(JavaxJmdnsImplJmDNSImpl *)jmDNSImpl {
  JavaxJmdnsImplTasksStateProber_initWithJavaxJmdnsImplJmDNSImpl_(self, jmDNSImpl);
  return self;
}

- (NSString *)getName {
  return JreStrcat("$$C", @"Prober(", ([self getDns] != nil ? [((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) getName] : @""), ')');
}

- (NSString *)description {
  return JreStrcat("$$@", [super description], @" state: ", [self getTaskState]);
}

- (void)startWithJavaUtilTimer:(JavaUtilTimer *)timer {
  jlong now = JavaLangSystem_currentTimeMillis();
  if (now - [((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) getLastThrottleIncrement] < JavaxJmdnsImplConstantsDNSConstants_PROBE_THROTTLE_COUNT_INTERVAL) {
    [((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) setThrottleWithInt:[((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) getThrottle] + 1];
  }
  else {
    [((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) setThrottleWithInt:1];
  }
  [((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) setLastThrottleIncrementWithLong:now];
  if ([((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) isAnnounced] && [((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) getThrottle] < JavaxJmdnsImplConstantsDNSConstants_PROBE_THROTTLE_COUNT) {
    [((JavaUtilTimer *) nil_chk(timer)) scheduleWithJavaUtilTimerTask:self withLong:[((JavaUtilRandom *) nil_chk(JavaxJmdnsImplJmDNSImpl_getRandom())) nextIntWithInt:1 + JavaxJmdnsImplConstantsDNSConstants_PROBE_WAIT_INTERVAL] withLong:JavaxJmdnsImplConstantsDNSConstants_PROBE_WAIT_INTERVAL];
  }
  else if (![((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) isCanceling] && ![((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) isCanceled]) {
    [((JavaUtilTimer *) nil_chk(timer)) scheduleWithJavaUtilTimerTask:self withLong:JavaxJmdnsImplConstantsDNSConstants_PROBE_CONFLICT_INTERVAL withLong:JavaxJmdnsImplConstantsDNSConstants_PROBE_CONFLICT_INTERVAL];
  }
}

- (jboolean)cancel {
  [self removeAssociation];
  return [super cancel];
}

- (NSString *)getTaskDescription {
  return @"probing";
}

- (jboolean)checkRunCondition {
  return ![((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) isCanceling] && ![((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) isCanceled];
}

- (JavaxJmdnsImplDNSOutgoing *)createOugoing {
  return new_JavaxJmdnsImplDNSOutgoing_initWithInt_(JavaxJmdnsImplConstantsDNSConstants_FLAGS_QR_QUERY);
}

- (JavaxJmdnsImplDNSOutgoing *)buildOutgoingForDNSWithJavaxJmdnsImplDNSOutgoing:(JavaxJmdnsImplDNSOutgoing *)outArg {
  JavaxJmdnsImplDNSOutgoing *newOut = outArg;
  [((JavaxJmdnsImplDNSOutgoing *) nil_chk(newOut)) addQuestionWithJavaxJmdnsImplDNSQuestion:JavaxJmdnsImplDNSQuestion_newQuestionWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_([((JavaxJmdnsImplHostInfo *) nil_chk([((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) getLocalHost])) getName], JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordType, TYPE_ANY), JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordClass, CLASS_IN), JavaxJmdnsImplConstantsDNSRecordClass_NOT_UNIQUE)];
  for (JavaxJmdnsImplDNSRecord * __strong answer in nil_chk([((JavaxJmdnsImplHostInfo *) nil_chk([((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) getLocalHost])) answersWithBoolean:JavaxJmdnsImplConstantsDNSRecordClass_NOT_UNIQUE withInt:[self getTTL]])) {
    newOut = [self addAuthoritativeAnswerWithJavaxJmdnsImplDNSOutgoing:newOut withJavaxJmdnsImplDNSRecord:answer];
  }
  return newOut;
}

- (JavaxJmdnsImplDNSOutgoing *)buildOutgoingForInfoWithJavaxJmdnsImplServiceInfoImpl:(JavaxJmdnsImplServiceInfoImpl *)info
                                                       withJavaxJmdnsImplDNSOutgoing:(JavaxJmdnsImplDNSOutgoing *)outArg {
  JavaxJmdnsImplDNSOutgoing *newOut = outArg;
  newOut = [self addQuestionWithJavaxJmdnsImplDNSOutgoing:newOut withJavaxJmdnsImplDNSQuestion:JavaxJmdnsImplDNSQuestion_newQuestionWithNSString_withJavaxJmdnsImplConstantsDNSRecordType_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_([((JavaxJmdnsImplServiceInfoImpl *) nil_chk(info)) getQualifiedName], JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordType, TYPE_ANY), JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordClass, CLASS_IN), JavaxJmdnsImplConstantsDNSRecordClass_NOT_UNIQUE)];
  newOut = [self addAuthoritativeAnswerWithJavaxJmdnsImplDNSOutgoing:newOut withJavaxJmdnsImplDNSRecord:new_JavaxJmdnsImplDNSRecord_Service_initWithNSString_withJavaxJmdnsImplConstantsDNSRecordClass_withBoolean_withInt_withInt_withInt_withInt_withNSString_([info getQualifiedName], JreLoadEnum(JavaxJmdnsImplConstantsDNSRecordClass, CLASS_IN), JavaxJmdnsImplConstantsDNSRecordClass_NOT_UNIQUE, [self getTTL], [info getPriority], [info getWeight], [info getPort], [((JavaxJmdnsImplHostInfo *) nil_chk([((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) getLocalHost])) getName])];
  return newOut;
}

- (void)recoverTaskWithNSException:(NSException *)e {
  [((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) recover];
}

- (void)advanceTask {
  [self setTaskStateWithJavaxJmdnsImplConstantsDNSState:[((JavaxJmdnsImplConstantsDNSState *) nil_chk([self getTaskState])) advance]];
  if (![((JavaxJmdnsImplConstantsDNSState *) nil_chk([self getTaskState])) isProbing]) {
    [self cancel];
    [((JavaxJmdnsImplJmDNSImpl *) nil_chk([self getDns])) startAnnouncer];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplDNSOutgoing;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplDNSOutgoing;", 0x4, 4, 5, 6, -1, -1, -1 },
    { NULL, "LJavaxJmdnsImplDNSOutgoing;", 0x4, 7, 8, 6, -1, -1, -1 },
    { NULL, "V", 0x4, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaxJmdnsImplJmDNSImpl:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(description);
  methods[3].selector = @selector(startWithJavaUtilTimer:);
  methods[4].selector = @selector(cancel);
  methods[5].selector = @selector(getTaskDescription);
  methods[6].selector = @selector(checkRunCondition);
  methods[7].selector = @selector(createOugoing);
  methods[8].selector = @selector(buildOutgoingForDNSWithJavaxJmdnsImplDNSOutgoing:);
  methods[9].selector = @selector(buildOutgoingForInfoWithJavaxJmdnsImplServiceInfoImpl:withJavaxJmdnsImplDNSOutgoing:);
  methods[10].selector = @selector(recoverTaskWithNSException:);
  methods[11].selector = @selector(advanceTask);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x8, -1, 11, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaxJmdnsImplJmDNSImpl;", "toString", "start", "LJavaUtilTimer;", "buildOutgoingForDNS", "LJavaxJmdnsImplDNSOutgoing;", "LJavaIoIOException;", "buildOutgoingForInfo", "LJavaxJmdnsImplServiceInfoImpl;LJavaxJmdnsImplDNSOutgoing;", "recoverTask", "LNSException;", &JavaxJmdnsImplTasksStateProber_logger };
  static const J2ObjcClassInfo _JavaxJmdnsImplTasksStateProber = { "Prober", "javax.jmdns.impl.tasks.state", ptrTable, methods, fields, 7, 0x1, 12, 1, -1, -1, -1, -1, -1 };
  return &_JavaxJmdnsImplTasksStateProber;
}

+ (void)initialize {
  if (self == [JavaxJmdnsImplTasksStateProber class]) {
    JavaxJmdnsImplTasksStateProber_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([JavaxJmdnsImplTasksStateProber_class_() getName]);
    J2OBJC_SET_INITIALIZED(JavaxJmdnsImplTasksStateProber)
  }
}

@end

void JavaxJmdnsImplTasksStateProber_initWithJavaxJmdnsImplJmDNSImpl_(JavaxJmdnsImplTasksStateProber *self, JavaxJmdnsImplJmDNSImpl *jmDNSImpl) {
  JavaxJmdnsImplTasksStateDNSStateTask_initWithJavaxJmdnsImplJmDNSImpl_withInt_(self, jmDNSImpl, JavaxJmdnsImplTasksStateDNSStateTask_defaultTTL());
  [self setTaskStateWithJavaxJmdnsImplConstantsDNSState:JreLoadEnum(JavaxJmdnsImplConstantsDNSState, PROBING_1)];
  [self associateWithJavaxJmdnsImplConstantsDNSState:JreLoadEnum(JavaxJmdnsImplConstantsDNSState, PROBING_1)];
}

JavaxJmdnsImplTasksStateProber *new_JavaxJmdnsImplTasksStateProber_initWithJavaxJmdnsImplJmDNSImpl_(JavaxJmdnsImplJmDNSImpl *jmDNSImpl) {
  J2OBJC_NEW_IMPL(JavaxJmdnsImplTasksStateProber, initWithJavaxJmdnsImplJmDNSImpl_, jmDNSImpl)
}

JavaxJmdnsImplTasksStateProber *create_JavaxJmdnsImplTasksStateProber_initWithJavaxJmdnsImplJmDNSImpl_(JavaxJmdnsImplJmDNSImpl *jmDNSImpl) {
  J2OBJC_CREATE_IMPL(JavaxJmdnsImplTasksStateProber, initWithJavaxJmdnsImplJmDNSImpl_, jmDNSImpl)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(JavaxJmdnsImplTasksStateProber)
