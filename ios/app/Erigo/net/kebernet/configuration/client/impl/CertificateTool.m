//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/net/kebernet/configuration/client/impl/CertificateTool.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/math/BigInteger.h"
#include "java/net/Socket.h"
#include "java/net/URL.h"
#include "java/security/KeyStore.h"
#include "java/security/SecureRandom.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/CertificateExpiredException.h"
#include "java/security/cert/CertificateNotYetValidException.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/function/Function.h"
#include "java/util/stream/Collector.h"
#include "java/util/stream/Collectors.h"
#include "java/util/stream/Stream.h"
#include "javax/annotation/Nonnull.h"
#include "javax/annotation/meta/When.h"
#include "javax/net/SocketFactory.h"
#include "javax/net/ssl/KeyManager.h"
#include "javax/net/ssl/SSLContext.h"
#include "javax/net/ssl/SSLSession.h"
#include "javax/net/ssl/SSLSocket.h"
#include "javax/net/ssl/SSLSocketFactory.h"
#include "javax/net/ssl/TrustManager.h"
#include "javax/net/ssl/X509TrustManager.h"
#include "net/kebernet/configuration/client/impl/CertificateTool.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface NetKebernetConfigurationClientImplCertificateTool () {
 @public
  JavaSecurityKeyStore *trustStore_;
}

@end

J2OBJC_FIELD_SETTER(NetKebernetConfigurationClientImplCertificateTool, trustStore_, JavaSecurityKeyStore *)

__attribute__((unused)) static IOSObjectArray *NetKebernetConfigurationClientImplCertificateTool__Annotations$0();

__attribute__((unused)) static IOSObjectArray *NetKebernetConfigurationClientImplCertificateTool__Annotations$1();

__attribute__((unused)) static IOSObjectArray *NetKebernetConfigurationClientImplCertificateTool__Annotations$2();

__attribute__((unused)) static IOSObjectArray *NetKebernetConfigurationClientImplCertificateTool__Annotations$3();

__attribute__((unused)) static IOSObjectArray *NetKebernetConfigurationClientImplCertificateTool__Annotations$4();

@interface NetKebernetConfigurationClientImplCertificateTool_1 : NSObject < JavaxNetSslX509TrustManager >

- (instancetype)init;

- (IOSObjectArray *)getAcceptedIssuers;

- (void)checkClientTrustedWithJavaSecurityCertX509CertificateArray:(IOSObjectArray *)certs
                                                      withNSString:(NSString *)authType;

- (void)checkServerTrustedWithJavaSecurityCertX509CertificateArray:(IOSObjectArray *)certs
                                                      withNSString:(NSString *)authType;

@end

J2OBJC_EMPTY_STATIC_INIT(NetKebernetConfigurationClientImplCertificateTool_1)

__attribute__((unused)) static void NetKebernetConfigurationClientImplCertificateTool_1_init(NetKebernetConfigurationClientImplCertificateTool_1 *self);

__attribute__((unused)) static NetKebernetConfigurationClientImplCertificateTool_1 *new_NetKebernetConfigurationClientImplCertificateTool_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static NetKebernetConfigurationClientImplCertificateTool_1 *create_NetKebernetConfigurationClientImplCertificateTool_1_init();

@interface NetKebernetConfigurationClientImplCertificateTool_$Lambda$1 : NSObject < JavaUtilFunctionFunction >

- (id)applyWithId:(JavaSecurityCertCertificate *)c;

@end

J2OBJC_STATIC_INIT(NetKebernetConfigurationClientImplCertificateTool_$Lambda$1)

inline NetKebernetConfigurationClientImplCertificateTool_$Lambda$1 *NetKebernetConfigurationClientImplCertificateTool_$Lambda$1_get_instance();
static NetKebernetConfigurationClientImplCertificateTool_$Lambda$1 *NetKebernetConfigurationClientImplCertificateTool_$Lambda$1_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetKebernetConfigurationClientImplCertificateTool_$Lambda$1, instance, NetKebernetConfigurationClientImplCertificateTool_$Lambda$1 *)

__attribute__((unused)) static void NetKebernetConfigurationClientImplCertificateTool_$Lambda$1_init(NetKebernetConfigurationClientImplCertificateTool_$Lambda$1 *self);

__attribute__((unused)) static NetKebernetConfigurationClientImplCertificateTool_$Lambda$1 *new_NetKebernetConfigurationClientImplCertificateTool_$Lambda$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static NetKebernetConfigurationClientImplCertificateTool_$Lambda$1 *create_NetKebernetConfigurationClientImplCertificateTool_$Lambda$1_init();

@implementation NetKebernetConfigurationClientImplCertificateTool

- (instancetype)initWithJavaSecurityKeyStore:(JavaSecurityKeyStore *)trustStore {
  NetKebernetConfigurationClientImplCertificateTool_initWithJavaSecurityKeyStore_(self, trustStore);
  return self;
}

- (jboolean)addCertificatesForUrlWithNSString:(NSString *)url {
  return [self addCertificatesToKeyStoreWithJavaUtilList:[self fetchCertificatesForUrlWithNSString:url]];
}

- (jboolean)addCertificatesToKeyStoreWithJavaUtilList:(id<JavaUtilList>)certificates {
  for (JavaSecurityCertX509Certificate * __strong c in nil_chk(certificates)) {
    @try {
      JavaSecurityKeyStore_TrustedCertificateEntry *trust = new_JavaSecurityKeyStore_TrustedCertificateEntry_initWithJavaSecurityCertCertificate_(c);
      [((JavaSecurityKeyStore *) nil_chk(trustStore_)) setEntryWithNSString:JreStrcat("$@", @"imported-", [((JavaSecurityCertX509Certificate *) nil_chk(c)) getSerialNumber]) withJavaSecurityKeyStore_Entry:trust withJavaSecurityKeyStore_ProtectionParameter:nil];
    }
    @catch (JavaLangException *e) {
      @throw new_JavaLangRuntimeException_initWithNSException_(e);
    }
  }
  return true;
}

- (id<JavaUtilList>)fetchCertificatesForUrlWithNSString:(NSString *)aURL {
  JavaNetURL *url = new_JavaNetURL_initWithNSString_(aURL);
  return [self fetchCertificatesForSocketWithNSString:[url getHost] withInt:[url getPort]];
}

- (id<JavaUtilList>)fetchCertificatesForSocketWithNSString:(NSString *)host
                                                   withInt:(jint)port {
  JavaxNetSslSSLContext *context = JavaxNetSslSSLContext_getInstanceWithNSString_(@"SSL");
  id<JavaxNetSslTrustManager> trustValidCerts = new_NetKebernetConfigurationClientImplCertificateTool_1_init();
  IOSObjectArray *tm = [IOSObjectArray newArrayWithObjects:(id[]){ trustValidCerts } count:1 type:JavaxNetSslTrustManager_class_()];
  [((JavaxNetSslSSLContext *) nil_chk(context)) init__WithJavaxNetSslKeyManagerArray:[IOSObjectArray newArrayWithLength:0 type:JavaxNetSslKeyManager_class_()] withJavaxNetSslTrustManagerArray:tm withJavaSecuritySecureRandom:new_JavaSecuritySecureRandom_init()];
  JavaxNetSocketFactory *factory = [context getSocketFactory];
  {
    JavaxNetSslSSLSocket *socket = (JavaxNetSslSSLSocket *) cast_chk([((JavaxNetSocketFactory *) nil_chk(factory)) createSocketWithNSString:host withInt:port], [JavaxNetSslSSLSocket class]);
    NSException *__primaryException1 = nil;
    @try {
      [((JavaxNetSslSSLSocket *) nil_chk(socket)) startHandshake];
      IOSObjectArray *certs = [((id<JavaxNetSslSSLSession>) nil_chk([socket getSession])) getPeerCertificates];
      return [((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilStreamStream>) nil_chk(JavaUtilArrays_streamWithNSObjectArray_(certs))) mapWithJavaUtilFunctionFunction:JreLoadStatic(NetKebernetConfigurationClientImplCertificateTool_$Lambda$1, instance)])) collectWithJavaUtilStreamCollector:JavaUtilStreamCollectors_toList()];
    }
    @catch (NSException *e) {
      __primaryException1 = e;
      @throw e;
    }
    @finally {
      if (socket != nil) {
        if (__primaryException1 != nil) {
          @try {
            [socket close];
          }
          @catch (NSException *e) {
            [__primaryException1 addSuppressedWithNSException:e];
          }
        }
        else {
          [socket close];
        }
      }
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, 1 },
    { NULL, "Z", 0x1, 2, 3, 4, -1, -1, 5 },
    { NULL, "Z", 0x1, 6, 7, 8, 9, -1, 10 },
    { NULL, "LJavaUtilList;", 0x1, 11, 3, 4, 12, -1, 13 },
    { NULL, "LJavaUtilList;", 0x1, 14, 15, 4, 16, -1, 17 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaSecurityKeyStore:);
  methods[1].selector = @selector(addCertificatesForUrlWithNSString:);
  methods[2].selector = @selector(addCertificatesToKeyStoreWithJavaUtilList:);
  methods[3].selector = @selector(fetchCertificatesForUrlWithNSString:);
  methods[4].selector = @selector(fetchCertificatesForSocketWithNSString:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "trustStore_", "LJavaSecurityKeyStore;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaSecurityKeyStore;", (void *)&NetKebernetConfigurationClientImplCertificateTool__Annotations$0, "addCertificatesForUrl", "LNSString;", "LJavaLangException;", (void *)&NetKebernetConfigurationClientImplCertificateTool__Annotations$1, "addCertificatesToKeyStore", "LJavaUtilList;", "LJavaSecurityKeyStoreException;", "(Ljava/util/List<Ljava/security/cert/X509Certificate;>;)Z", (void *)&NetKebernetConfigurationClientImplCertificateTool__Annotations$2, "fetchCertificatesForUrl", "(Ljava/lang/String;)Ljava/util/List<Ljava/security/cert/X509Certificate;>;", (void *)&NetKebernetConfigurationClientImplCertificateTool__Annotations$3, "fetchCertificatesForSocket", "LNSString;I", "(Ljava/lang/String;I)Ljava/util/List<Ljava/security/cert/X509Certificate;>;", (void *)&NetKebernetConfigurationClientImplCertificateTool__Annotations$4 };
  static const J2ObjcClassInfo _NetKebernetConfigurationClientImplCertificateTool = { "CertificateTool", "net.kebernet.configuration.client.impl", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, -1, -1 };
  return &_NetKebernetConfigurationClientImplCertificateTool;
}

@end

void NetKebernetConfigurationClientImplCertificateTool_initWithJavaSecurityKeyStore_(NetKebernetConfigurationClientImplCertificateTool *self, JavaSecurityKeyStore *trustStore) {
  NSObject_init(self);
  self->trustStore_ = trustStore;
}

NetKebernetConfigurationClientImplCertificateTool *new_NetKebernetConfigurationClientImplCertificateTool_initWithJavaSecurityKeyStore_(JavaSecurityKeyStore *trustStore) {
  J2OBJC_NEW_IMPL(NetKebernetConfigurationClientImplCertificateTool, initWithJavaSecurityKeyStore_, trustStore)
}

NetKebernetConfigurationClientImplCertificateTool *create_NetKebernetConfigurationClientImplCertificateTool_initWithJavaSecurityKeyStore_(JavaSecurityKeyStore *trustStore) {
  J2OBJC_CREATE_IMPL(NetKebernetConfigurationClientImplCertificateTool, initWithJavaSecurityKeyStore_, trustStore)
}

IOSObjectArray *NetKebernetConfigurationClientImplCertificateTool__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *NetKebernetConfigurationClientImplCertificateTool__Annotations$1() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *NetKebernetConfigurationClientImplCertificateTool__Annotations$2() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *NetKebernetConfigurationClientImplCertificateTool__Annotations$3() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *NetKebernetConfigurationClientImplCertificateTool__Annotations$4() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()] } count:2 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetKebernetConfigurationClientImplCertificateTool)

@implementation NetKebernetConfigurationClientImplCertificateTool_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetKebernetConfigurationClientImplCertificateTool_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (IOSObjectArray *)getAcceptedIssuers {
  return nil;
}

- (void)checkClientTrustedWithJavaSecurityCertX509CertificateArray:(IOSObjectArray *)certs
                                                      withNSString:(NSString *)authType {
  {
    IOSObjectArray *a__ = certs;
    JavaSecurityCertX509Certificate * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaSecurityCertX509Certificate * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaSecurityCertX509Certificate *cert = *b__++;
      @try {
        [((JavaSecurityCertX509Certificate *) nil_chk(cert)) checkValidity];
      }
      @catch (JavaSecurityCertCertificateNotYetValidException *e) {
        @throw new_JavaLangRuntimeException_initWithNSException_(e);
      }
      @catch (JavaSecurityCertCertificateExpiredException *e) {
        @throw new_JavaLangRuntimeException_initWithNSException_(e);
      }
    }
  }
}

- (void)checkServerTrustedWithJavaSecurityCertX509CertificateArray:(IOSObjectArray *)certs
                                                      withNSString:(NSString *)authType {
  {
    IOSObjectArray *a__ = certs;
    JavaSecurityCertX509Certificate * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaSecurityCertX509Certificate * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaSecurityCertX509Certificate *cert = *b__++;
      @try {
        [((JavaSecurityCertX509Certificate *) nil_chk(cert)) checkValidity];
      }
      @catch (JavaSecurityCertCertificateNotYetValidException *e) {
        @throw new_JavaLangRuntimeException_initWithNSException_(e);
      }
      @catch (JavaSecurityCertCertificateExpiredException *e) {
        @throw new_JavaLangRuntimeException_initWithNSException_(e);
      }
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LJavaSecurityCertX509Certificate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getAcceptedIssuers);
  methods[2].selector = @selector(checkClientTrustedWithJavaSecurityCertX509CertificateArray:withNSString:);
  methods[3].selector = @selector(checkServerTrustedWithJavaSecurityCertX509CertificateArray:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "checkClientTrusted", "[LJavaSecurityCertX509Certificate;LNSString;", "checkServerTrusted", "LNetKebernetConfigurationClientImplCertificateTool;", "fetchCertificatesForSocketWithNSString:withInt:" };
  static const J2ObjcClassInfo _NetKebernetConfigurationClientImplCertificateTool_1 = { "", "net.kebernet.configuration.client.impl", ptrTable, methods, NULL, 7, 0x8018, 4, 0, 3, -1, 4, -1, -1 };
  return &_NetKebernetConfigurationClientImplCertificateTool_1;
}

@end

void NetKebernetConfigurationClientImplCertificateTool_1_init(NetKebernetConfigurationClientImplCertificateTool_1 *self) {
  NSObject_init(self);
}

NetKebernetConfigurationClientImplCertificateTool_1 *new_NetKebernetConfigurationClientImplCertificateTool_1_init() {
  J2OBJC_NEW_IMPL(NetKebernetConfigurationClientImplCertificateTool_1, init)
}

NetKebernetConfigurationClientImplCertificateTool_1 *create_NetKebernetConfigurationClientImplCertificateTool_1_init() {
  J2OBJC_CREATE_IMPL(NetKebernetConfigurationClientImplCertificateTool_1, init)
}

J2OBJC_INITIALIZED_DEFN(NetKebernetConfigurationClientImplCertificateTool_$Lambda$1)

@implementation NetKebernetConfigurationClientImplCertificateTool_$Lambda$1

- (id)applyWithId:(JavaSecurityCertCertificate *)c {
  return (JavaSecurityCertX509Certificate *) cast_chk(c, [JavaSecurityCertX509Certificate class]);
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [NetKebernetConfigurationClientImplCertificateTool_$Lambda$1 class]) {
    NetKebernetConfigurationClientImplCertificateTool_$Lambda$1_instance = new_NetKebernetConfigurationClientImplCertificateTool_$Lambda$1_init();
    J2OBJC_SET_INITIALIZED(NetKebernetConfigurationClientImplCertificateTool_$Lambda$1)
  }
}

@end

void NetKebernetConfigurationClientImplCertificateTool_$Lambda$1_init(NetKebernetConfigurationClientImplCertificateTool_$Lambda$1 *self) {
  NSObject_init(self);
}

NetKebernetConfigurationClientImplCertificateTool_$Lambda$1 *new_NetKebernetConfigurationClientImplCertificateTool_$Lambda$1_init() {
  J2OBJC_NEW_IMPL(NetKebernetConfigurationClientImplCertificateTool_$Lambda$1, init)
}

NetKebernetConfigurationClientImplCertificateTool_$Lambda$1 *create_NetKebernetConfigurationClientImplCertificateTool_$Lambda$1_init() {
  J2OBJC_CREATE_IMPL(NetKebernetConfigurationClientImplCertificateTool_$Lambda$1, init)
}
