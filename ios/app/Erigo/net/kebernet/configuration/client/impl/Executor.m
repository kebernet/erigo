//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/net/kebernet/configuration/client/impl/Executor.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Executors.h"
#include "javax/annotation/Nonnull.h"
#include "javax/annotation/meta/When.h"
#include "net/kebernet/configuration/client/impl/Executor.h"

inline id<JavaUtilConcurrentExecutorService> NetKebernetConfigurationClientImplExecutor_get_EXECUTOR_SERVICE();
static id<JavaUtilConcurrentExecutorService> NetKebernetConfigurationClientImplExecutor_EXECUTOR_SERVICE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetKebernetConfigurationClientImplExecutor, EXECUTOR_SERVICE, id<JavaUtilConcurrentExecutorService>)

__attribute__((unused)) static IOSObjectArray *NetKebernetConfigurationClientImplExecutor__Annotations$0();

J2OBJC_INITIALIZED_DEFN(NetKebernetConfigurationClientImplExecutor)

@implementation NetKebernetConfigurationClientImplExecutor

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetKebernetConfigurationClientImplExecutor_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id<JavaUtilConcurrentExecutorService>)getInstance {
  return NetKebernetConfigurationClientImplExecutor_getInstance();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentExecutorService;", 0x9, -1, -1, -1, -1, 0, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getInstance);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EXECUTOR_SERVICE", "LJavaUtilConcurrentExecutorService;", .constantValue.asLong = 0, 0x1a, -1, 1, -1, -1 },
  };
  static const void *ptrTable[] = { (void *)&NetKebernetConfigurationClientImplExecutor__Annotations$0, &NetKebernetConfigurationClientImplExecutor_EXECUTOR_SERVICE };
  static const J2ObjcClassInfo _NetKebernetConfigurationClientImplExecutor = { "Executor", "net.kebernet.configuration.client.impl", ptrTable, methods, fields, 7, 0x1, 2, 1, -1, -1, -1, -1, -1 };
  return &_NetKebernetConfigurationClientImplExecutor;
}

+ (void)initialize {
  if (self == [NetKebernetConfigurationClientImplExecutor class]) {
    NetKebernetConfigurationClientImplExecutor_EXECUTOR_SERVICE = JavaUtilConcurrentExecutors_newFixedThreadPoolWithInt_(3);
    J2OBJC_SET_INITIALIZED(NetKebernetConfigurationClientImplExecutor)
  }
}

@end

void NetKebernetConfigurationClientImplExecutor_init(NetKebernetConfigurationClientImplExecutor *self) {
  NSObject_init(self);
}

NetKebernetConfigurationClientImplExecutor *new_NetKebernetConfigurationClientImplExecutor_init() {
  J2OBJC_NEW_IMPL(NetKebernetConfigurationClientImplExecutor, init)
}

NetKebernetConfigurationClientImplExecutor *create_NetKebernetConfigurationClientImplExecutor_init() {
  J2OBJC_CREATE_IMPL(NetKebernetConfigurationClientImplExecutor, init)
}

id<JavaUtilConcurrentExecutorService> NetKebernetConfigurationClientImplExecutor_getInstance() {
  NetKebernetConfigurationClientImplExecutor_initialize();
  return NetKebernetConfigurationClientImplExecutor_EXECUTOR_SERVICE;
}

IOSObjectArray *NetKebernetConfigurationClientImplExecutor__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetKebernetConfigurationClientImplExecutor)
