//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/net/kebernet/configuration/client/impl/GsonFactory.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Charsets.h"
#include "com/google/gson/Gson.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/nio/charset/Charset.h"
#include "net/kebernet/configuration/client/impl/GsonFactory.h"

@implementation NetKebernetConfigurationClientImplGsonFactory

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetKebernetConfigurationClientImplGsonFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (ComGoogleGsonGson *)newInstance {
  return NetKebernetConfigurationClientImplGsonFactory_newInstance();
}

+ (id)readStreamAsUTF8WithJavaIoInputStream:(JavaIoInputStream *)stream
                               withIOSClass:(IOSClass *)clazz {
  return NetKebernetConfigurationClientImplGsonFactory_readStreamAsUTF8WithJavaIoInputStream_withIOSClass_(stream, clazz);
}

+ (id)readFileAsUTF8WithJavaIoFile:(JavaIoFile *)file
                      withIOSClass:(IOSClass *)clazz {
  return NetKebernetConfigurationClientImplGsonFactory_readFileAsUTF8WithJavaIoFile_withIOSClass_(file, clazz);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleGsonGson;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x9, 3, 4, 5, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(newInstance);
  methods[2].selector = @selector(readStreamAsUTF8WithJavaIoInputStream:withIOSClass:);
  methods[3].selector = @selector(readFileAsUTF8WithJavaIoFile:withIOSClass:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "readStreamAsUTF8", "LJavaIoInputStream;LIOSClass;", "<T:Ljava/lang/Object;>(Ljava/io/InputStream;Ljava/lang/Class<TT;>;)TT;", "readFileAsUTF8", "LJavaIoFile;LIOSClass;", "LJavaIoFileNotFoundException;", "<T:Ljava/lang/Object;>(Ljava/io/File;Ljava/lang/Class<TT;>;)TT;" };
  static const J2ObjcClassInfo _NetKebernetConfigurationClientImplGsonFactory = { "GsonFactory", "net.kebernet.configuration.client.impl", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, -1, -1, -1, -1 };
  return &_NetKebernetConfigurationClientImplGsonFactory;
}

@end

void NetKebernetConfigurationClientImplGsonFactory_init(NetKebernetConfigurationClientImplGsonFactory *self) {
  NSObject_init(self);
}

NetKebernetConfigurationClientImplGsonFactory *new_NetKebernetConfigurationClientImplGsonFactory_init() {
  J2OBJC_NEW_IMPL(NetKebernetConfigurationClientImplGsonFactory, init)
}

NetKebernetConfigurationClientImplGsonFactory *create_NetKebernetConfigurationClientImplGsonFactory_init() {
  J2OBJC_CREATE_IMPL(NetKebernetConfigurationClientImplGsonFactory, init)
}

ComGoogleGsonGson *NetKebernetConfigurationClientImplGsonFactory_newInstance() {
  NetKebernetConfigurationClientImplGsonFactory_initialize();
  return new_ComGoogleGsonGson_init();
}

id NetKebernetConfigurationClientImplGsonFactory_readStreamAsUTF8WithJavaIoInputStream_withIOSClass_(JavaIoInputStream *stream, IOSClass *clazz) {
  NetKebernetConfigurationClientImplGsonFactory_initialize();
  return [((ComGoogleGsonGson *) nil_chk(NetKebernetConfigurationClientImplGsonFactory_newInstance())) fromJsonWithJavaIoReader:new_JavaIoInputStreamReader_initWithJavaIoInputStream_withJavaNioCharsetCharset_(stream, JreLoadStatic(GVBCharsets, UTF_8)) withIOSClass:clazz];
}

id NetKebernetConfigurationClientImplGsonFactory_readFileAsUTF8WithJavaIoFile_withIOSClass_(JavaIoFile *file, IOSClass *clazz) {
  NetKebernetConfigurationClientImplGsonFactory_initialize();
  return NetKebernetConfigurationClientImplGsonFactory_readStreamAsUTF8WithJavaIoInputStream_withIOSClass_(new_JavaIoFileInputStream_initWithJavaIoFile_(file), clazz);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetKebernetConfigurationClientImplGsonFactory)
