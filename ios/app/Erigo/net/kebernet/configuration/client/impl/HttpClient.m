//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/net/kebernet/configuration/client/impl/HttpClient.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Charsets.h"
#include "com/google/common/base/MoreObjects.h"
#include "com/google/common/base/Objects.h"
#include "com/google/common/base/Preconditions.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/lang/Exception.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/annotation/Annotation.h"
#include "java/net/HttpURLConnection.h"
#include "java/net/MalformedURLException.h"
#include "java/net/URI.h"
#include "java/net/URISyntaxException.h"
#include "java/net/URL.h"
#include "java/net/URLConnection.h"
#include "java/nio/charset/Charset.h"
#include "java/security/KeyManagementException.h"
#include "java/security/KeyStore.h"
#include "java/security/KeyStoreException.h"
#include "java/security/NoSuchAlgorithmException.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Base64.h"
#include "java/util/Enumeration.h"
#include "java/util/List.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Future.h"
#include "java/util/function/Consumer.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "javax/annotation/Nonnull.h"
#include "javax/annotation/Nullable.h"
#include "javax/annotation/meta/When.h"
#include "javax/inject/Inject.h"
#include "javax/inject/Singleton.h"
#include "javax/net/ssl/HostnameVerifier.h"
#include "javax/net/ssl/HttpsURLConnection.h"
#include "javax/net/ssl/SSLContext.h"
#include "javax/net/ssl/SSLHandshakeException.h"
#include "javax/net/ssl/SSLSession.h"
#include "javax/net/ssl/SSLSocketFactory.h"
#include "javax/net/ssl/TrustManager.h"
#include "javax/net/ssl/TrustManagerFactory.h"
#include "javax/net/ssl/X509TrustManager.h"
#include "net/kebernet/configuration/client/impl/CertificateTool.h"
#include "net/kebernet/configuration/client/impl/Executor.h"
#include "net/kebernet/configuration/client/impl/HttpClient.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface NetKebernetConfigurationClientImplHttpClient () {
 @public
  NetKebernetConfigurationClientImplCertificateTool *certificateTool_;
  JavaxNetSslSSLSocketFactory *sslSocketFactory_;
  id<NetKebernetConfigurationClientImplHttpClient_AuthenticationCallback> authenticationCallback_;
  id<NetKebernetConfigurationClientImplHttpClient_ErrorCallback> errorCallback_;
}

+ (NSString *)urlToKeyWithNSString:(NSString *)url;

- (void)maybeSendErrorWithNSString:(NSString *)message;

- (void)requestAuthorizationWithNSString:(NSString *)deviceName
                            withNSString:(NSString *)url
withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken:(id<NetKebernetConfigurationClientImplHttpClient_AuthenticationToken>)token
            withJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)callback;

@end

J2OBJC_FIELD_SETTER(NetKebernetConfigurationClientImplHttpClient, certificateTool_, NetKebernetConfigurationClientImplCertificateTool *)
J2OBJC_FIELD_SETTER(NetKebernetConfigurationClientImplHttpClient, sslSocketFactory_, JavaxNetSslSSLSocketFactory *)
J2OBJC_FIELD_SETTER(NetKebernetConfigurationClientImplHttpClient, authenticationCallback_, id<NetKebernetConfigurationClientImplHttpClient_AuthenticationCallback>)
J2OBJC_FIELD_SETTER(NetKebernetConfigurationClientImplHttpClient, errorCallback_, id<NetKebernetConfigurationClientImplHttpClient_ErrorCallback>)

inline id<JavaUtilConcurrentExecutorService> NetKebernetConfigurationClientImplHttpClient_get_DEFAULT_EXECUTOR();
static id<JavaUtilConcurrentExecutorService> NetKebernetConfigurationClientImplHttpClient_DEFAULT_EXECUTOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetKebernetConfigurationClientImplHttpClient, DEFAULT_EXECUTOR, id<JavaUtilConcurrentExecutorService>)

inline JavaUtilLoggingLogger *NetKebernetConfigurationClientImplHttpClient_get_LOGGER();
static JavaUtilLoggingLogger *NetKebernetConfigurationClientImplHttpClient_LOGGER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetKebernetConfigurationClientImplHttpClient, LOGGER, JavaUtilLoggingLogger *)

inline JavaUtilConcurrentConcurrentHashMap *NetKebernetConfigurationClientImplHttpClient_get_PERMANENT_REDIRECTS();
static JavaUtilConcurrentConcurrentHashMap *NetKebernetConfigurationClientImplHttpClient_PERMANENT_REDIRECTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetKebernetConfigurationClientImplHttpClient, PERMANENT_REDIRECTS, JavaUtilConcurrentConcurrentHashMap *)

inline JavaUtilConcurrentConcurrentHashMap *NetKebernetConfigurationClientImplHttpClient_get_TOKEN_MAP();
static JavaUtilConcurrentConcurrentHashMap *NetKebernetConfigurationClientImplHttpClient_TOKEN_MAP;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetKebernetConfigurationClientImplHttpClient, TOKEN_MAP, JavaUtilConcurrentConcurrentHashMap *)

__attribute__((unused)) static NSString *NetKebernetConfigurationClientImplHttpClient_urlToKeyWithNSString_(NSString *url);

__attribute__((unused)) static void NetKebernetConfigurationClientImplHttpClient_maybeSendErrorWithNSString_(NetKebernetConfigurationClientImplHttpClient *self, NSString *message);

__attribute__((unused)) static void NetKebernetConfigurationClientImplHttpClient_requestAuthorizationWithNSString_withNSString_withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken_withJavaUtilFunctionConsumer_(NetKebernetConfigurationClientImplHttpClient *self, NSString *deviceName, NSString *url, id<NetKebernetConfigurationClientImplHttpClient_AuthenticationToken> token, id<JavaUtilFunctionConsumer> callback);

__attribute__((unused)) static IOSObjectArray *NetKebernetConfigurationClientImplHttpClient__Annotations$0();

__attribute__((unused)) static IOSObjectArray *NetKebernetConfigurationClientImplHttpClient__Annotations$1();

__attribute__((unused)) static IOSObjectArray *NetKebernetConfigurationClientImplHttpClient__Annotations$2();

__attribute__((unused)) static IOSObjectArray *NetKebernetConfigurationClientImplHttpClient__Annotations$3();

__attribute__((unused)) static IOSObjectArray *NetKebernetConfigurationClientImplHttpClient__Annotations$4();

__attribute__((unused)) static IOSObjectArray *NetKebernetConfigurationClientImplHttpClient__Annotations$5();

@interface NetKebernetConfigurationClientImplHttpClient_1 : NSObject < JavaxNetSslX509TrustManager > {
 @public
  JavaSecurityKeyStore *val$keyStore_;
  id<JavaxNetSslX509TrustManager> val$finalMyTm_;
  id<JavaxNetSslX509TrustManager> val$finalDefaultTm_;
}

- (instancetype)initWithJavaSecurityKeyStore:(JavaSecurityKeyStore *)capture$0
             withJavaxNetSslX509TrustManager:(id<JavaxNetSslX509TrustManager>)capture$1
             withJavaxNetSslX509TrustManager:(id<JavaxNetSslX509TrustManager>)capture$2;

- (IOSObjectArray *)getAcceptedIssuers;

- (void)checkServerTrustedWithJavaSecurityCertX509CertificateArray:(IOSObjectArray *)chain
                                                      withNSString:(NSString *)authType;

- (void)checkClientTrustedWithJavaSecurityCertX509CertificateArray:(IOSObjectArray *)chain
                                                      withNSString:(NSString *)authType;

@end

J2OBJC_EMPTY_STATIC_INIT(NetKebernetConfigurationClientImplHttpClient_1)

__attribute__((unused)) static void NetKebernetConfigurationClientImplHttpClient_1_initWithJavaSecurityKeyStore_withJavaxNetSslX509TrustManager_withJavaxNetSslX509TrustManager_(NetKebernetConfigurationClientImplHttpClient_1 *self, JavaSecurityKeyStore *capture$0, id<JavaxNetSslX509TrustManager> capture$1, id<JavaxNetSslX509TrustManager> capture$2);

__attribute__((unused)) static NetKebernetConfigurationClientImplHttpClient_1 *new_NetKebernetConfigurationClientImplHttpClient_1_initWithJavaSecurityKeyStore_withJavaxNetSslX509TrustManager_withJavaxNetSslX509TrustManager_(JavaSecurityKeyStore *capture$0, id<JavaxNetSslX509TrustManager> capture$1, id<JavaxNetSslX509TrustManager> capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetKebernetConfigurationClientImplHttpClient_1 *create_NetKebernetConfigurationClientImplHttpClient_1_initWithJavaSecurityKeyStore_withJavaxNetSslX509TrustManager_withJavaxNetSslX509TrustManager_(JavaSecurityKeyStore *capture$0, id<JavaxNetSslX509TrustManager> capture$1, id<JavaxNetSslX509TrustManager> capture$2);

@interface NetKebernetConfigurationClientImplHttpClient_AuthenticationCallback : NSObject

@end

@interface NetKebernetConfigurationClientImplHttpClient_AuthenticationToken : NSObject

@end

@interface NetKebernetConfigurationClientImplHttpClient_ErrorCallback : NSObject

@end

@interface NetKebernetConfigurationClientImplHttpClient_BasicAuthenticationToken () {
 @public
  NSString *username_;
  NSString *password_;
}

@end

J2OBJC_FIELD_SETTER(NetKebernetConfigurationClientImplHttpClient_BasicAuthenticationToken, username_, NSString *)
J2OBJC_FIELD_SETTER(NetKebernetConfigurationClientImplHttpClient_BasicAuthenticationToken, password_, NSString *)

@interface NetKebernetConfigurationClientImplHttpClient_BearerAuthenticationToken () {
 @public
  NSString *token_;
}

@end

J2OBJC_FIELD_SETTER(NetKebernetConfigurationClientImplHttpClient_BearerAuthenticationToken, token_, NSString *)

@interface NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback : NSObject < NetKebernetConfigurationClientImplHttpClient_AuthenticationCallback > {
 @public
  NetKebernetConfigurationClientImplHttpClient *this$0_;
  id<NetKebernetConfigurationClientImplHttpClient_AuthenticationCallback> wrapped_;
}

- (instancetype)initWithNetKebernetConfigurationClientImplHttpClient:(NetKebernetConfigurationClientImplHttpClient *)outer$
withNetKebernetConfigurationClientImplHttpClient_AuthenticationCallback:(id<NetKebernetConfigurationClientImplHttpClient_AuthenticationCallback>)wrapped;

- (void)authenticationRequiredWithNSString:(NSString *)deviceName
                              withNSString:(NSString *)url
withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken:(id<NetKebernetConfigurationClientImplHttpClient_AuthenticationToken>)previousToken
              withJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)callback;

@end

J2OBJC_EMPTY_STATIC_INIT(NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback)

J2OBJC_FIELD_SETTER(NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback, wrapped_, id<NetKebernetConfigurationClientImplHttpClient_AuthenticationCallback>)

__attribute__((unused)) static void NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback_initWithNetKebernetConfigurationClientImplHttpClient_withNetKebernetConfigurationClientImplHttpClient_AuthenticationCallback_(NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback *self, NetKebernetConfigurationClientImplHttpClient *outer$, id<NetKebernetConfigurationClientImplHttpClient_AuthenticationCallback> wrapped);

__attribute__((unused)) static NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback *new_NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback_initWithNetKebernetConfigurationClientImplHttpClient_withNetKebernetConfigurationClientImplHttpClient_AuthenticationCallback_(NetKebernetConfigurationClientImplHttpClient *outer$, id<NetKebernetConfigurationClientImplHttpClient_AuthenticationCallback> wrapped) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback *create_NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback_initWithNetKebernetConfigurationClientImplHttpClient_withNetKebernetConfigurationClientImplHttpClient_AuthenticationCallback_(NetKebernetConfigurationClientImplHttpClient *outer$, id<NetKebernetConfigurationClientImplHttpClient_AuthenticationCallback> wrapped);

J2OBJC_TYPE_LITERAL_HEADER(NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback)

@interface NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback_$Lambda$1 : NSObject < JavaUtilFunctionConsumer > {
 @public
  NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback *this$0_;
  id<NetKebernetConfigurationClientImplHttpClient_AuthenticationToken> val$previousToken_;
  NSString *val$url_;
  id<JavaUtilFunctionConsumer> val$callback_;
}

- (void)acceptWithId:(id<NetKebernetConfigurationClientImplHttpClient_AuthenticationToken>)nextToken;

@end

J2OBJC_EMPTY_STATIC_INIT(NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback_$Lambda$1)

__attribute__((unused)) static void NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback_$Lambda$1_initWithNetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback_withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken_withNSString_withJavaUtilFunctionConsumer_(NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback_$Lambda$1 *self, NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback *outer$, id<NetKebernetConfigurationClientImplHttpClient_AuthenticationToken> capture$0, NSString *capture$1, id<JavaUtilFunctionConsumer> capture$2);

__attribute__((unused)) static NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback_$Lambda$1 *new_NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback_$Lambda$1_initWithNetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback_withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken_withNSString_withJavaUtilFunctionConsumer_(NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback *outer$, id<NetKebernetConfigurationClientImplHttpClient_AuthenticationToken> capture$0, NSString *capture$1, id<JavaUtilFunctionConsumer> capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback_$Lambda$1 *create_NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback_$Lambda$1_initWithNetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback_withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken_withNSString_withJavaUtilFunctionConsumer_(NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback *outer$, id<NetKebernetConfigurationClientImplHttpClient_AuthenticationToken> capture$0, NSString *capture$1, id<JavaUtilFunctionConsumer> capture$2);

@interface NetKebernetConfigurationClientImplHttpClient_$Lambda$2 : NSObject < JavaxNetSslHostnameVerifier > {
 @public
  NSString *val$deviceName_;
  JavaNetURL *val$u_;
}

- (jboolean)verifyWithNSString:(NSString *)s
     withJavaxNetSslSSLSession:(id<JavaxNetSslSSLSession>)sslSession;

@end

J2OBJC_EMPTY_STATIC_INIT(NetKebernetConfigurationClientImplHttpClient_$Lambda$2)

__attribute__((unused)) static void NetKebernetConfigurationClientImplHttpClient_$Lambda$2_initWithNSString_withJavaNetURL_(NetKebernetConfigurationClientImplHttpClient_$Lambda$2 *self, NSString *capture$0, JavaNetURL *capture$1);

__attribute__((unused)) static NetKebernetConfigurationClientImplHttpClient_$Lambda$2 *new_NetKebernetConfigurationClientImplHttpClient_$Lambda$2_initWithNSString_withJavaNetURL_(NSString *capture$0, JavaNetURL *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetKebernetConfigurationClientImplHttpClient_$Lambda$2 *create_NetKebernetConfigurationClientImplHttpClient_$Lambda$2_initWithNSString_withJavaNetURL_(NSString *capture$0, JavaNetURL *capture$1);

@interface NetKebernetConfigurationClientImplHttpClient_$Lambda$1 : NSObject < JavaLangRunnable > {
 @public
  NetKebernetConfigurationClientImplHttpClient *this$0_;
  JavaNetURL *val$u_;
  NSString *val$deviceName_;
  id<NetKebernetConfigurationClientImplHttpClient_AuthenticationToken> val$token_;
  NSString *val$url_;
  id<JavaUtilFunctionConsumer> val$callback_;
  id<NetKebernetConfigurationClientImplHttpClient_AuthenticationToken> val$authenticationToken_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(NetKebernetConfigurationClientImplHttpClient_$Lambda$1)

__attribute__((unused)) static void NetKebernetConfigurationClientImplHttpClient_$Lambda$1_initWithNetKebernetConfigurationClientImplHttpClient_withJavaNetURL_withNSString_withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken_withNSString_withJavaUtilFunctionConsumer_withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken_(NetKebernetConfigurationClientImplHttpClient_$Lambda$1 *self, NetKebernetConfigurationClientImplHttpClient *outer$, JavaNetURL *capture$0, NSString *capture$1, id<NetKebernetConfigurationClientImplHttpClient_AuthenticationToken> capture$2, NSString *capture$3, id<JavaUtilFunctionConsumer> capture$4, id<NetKebernetConfigurationClientImplHttpClient_AuthenticationToken> capture$5);

__attribute__((unused)) static NetKebernetConfigurationClientImplHttpClient_$Lambda$1 *new_NetKebernetConfigurationClientImplHttpClient_$Lambda$1_initWithNetKebernetConfigurationClientImplHttpClient_withJavaNetURL_withNSString_withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken_withNSString_withJavaUtilFunctionConsumer_withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken_(NetKebernetConfigurationClientImplHttpClient *outer$, JavaNetURL *capture$0, NSString *capture$1, id<NetKebernetConfigurationClientImplHttpClient_AuthenticationToken> capture$2, NSString *capture$3, id<JavaUtilFunctionConsumer> capture$4, id<NetKebernetConfigurationClientImplHttpClient_AuthenticationToken> capture$5) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetKebernetConfigurationClientImplHttpClient_$Lambda$1 *create_NetKebernetConfigurationClientImplHttpClient_$Lambda$1_initWithNetKebernetConfigurationClientImplHttpClient_withJavaNetURL_withNSString_withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken_withNSString_withJavaUtilFunctionConsumer_withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken_(NetKebernetConfigurationClientImplHttpClient *outer$, JavaNetURL *capture$0, NSString *capture$1, id<NetKebernetConfigurationClientImplHttpClient_AuthenticationToken> capture$2, NSString *capture$3, id<JavaUtilFunctionConsumer> capture$4, id<NetKebernetConfigurationClientImplHttpClient_AuthenticationToken> capture$5);

@interface NetKebernetConfigurationClientImplHttpClient_$Lambda$3 : NSObject < JavaUtilFunctionConsumer > {
 @public
  NetKebernetConfigurationClientImplHttpClient *this$0_;
  NSString *val$url_;
  NSString *val$deviceName_;
  id<JavaUtilFunctionConsumer> val$callback_;
}

- (void)acceptWithId:(id<NetKebernetConfigurationClientImplHttpClient_AuthenticationToken>)authenticationToken;

@end

J2OBJC_EMPTY_STATIC_INIT(NetKebernetConfigurationClientImplHttpClient_$Lambda$3)

__attribute__((unused)) static void NetKebernetConfigurationClientImplHttpClient_$Lambda$3_initWithNetKebernetConfigurationClientImplHttpClient_withNSString_withNSString_withJavaUtilFunctionConsumer_(NetKebernetConfigurationClientImplHttpClient_$Lambda$3 *self, NetKebernetConfigurationClientImplHttpClient *outer$, NSString *capture$0, NSString *capture$1, id<JavaUtilFunctionConsumer> capture$2);

__attribute__((unused)) static NetKebernetConfigurationClientImplHttpClient_$Lambda$3 *new_NetKebernetConfigurationClientImplHttpClient_$Lambda$3_initWithNetKebernetConfigurationClientImplHttpClient_withNSString_withNSString_withJavaUtilFunctionConsumer_(NetKebernetConfigurationClientImplHttpClient *outer$, NSString *capture$0, NSString *capture$1, id<JavaUtilFunctionConsumer> capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetKebernetConfigurationClientImplHttpClient_$Lambda$3 *create_NetKebernetConfigurationClientImplHttpClient_$Lambda$3_initWithNetKebernetConfigurationClientImplHttpClient_withNSString_withNSString_withJavaUtilFunctionConsumer_(NetKebernetConfigurationClientImplHttpClient *outer$, NSString *capture$0, NSString *capture$1, id<JavaUtilFunctionConsumer> capture$2);

J2OBJC_INITIALIZED_DEFN(NetKebernetConfigurationClientImplHttpClient)

NSString *NetKebernetConfigurationClientImplHttpClient_AUTHENTICATION_HEADER = @"Authorization";

@implementation NetKebernetConfigurationClientImplHttpClient

- (instancetype)initWithJavaSecurityKeyStore:(JavaSecurityKeyStore *)keyStore
withNetKebernetConfigurationClientImplHttpClient_AuthenticationCallback:(id<NetKebernetConfigurationClientImplHttpClient_AuthenticationCallback>)authenticationCallback {
  NetKebernetConfigurationClientImplHttpClient_initWithJavaSecurityKeyStore_withNetKebernetConfigurationClientImplHttpClient_AuthenticationCallback_(self, keyStore, authenticationCallback);
  return self;
}

+ (NSString *)urlToKeyWithNSString:(NSString *)url {
  return NetKebernetConfigurationClientImplHttpClient_urlToKeyWithNSString_(url);
}

+ (NSString *)uriToKeyWithJavaNetURI:(JavaNetURI *)uri {
  return NetKebernetConfigurationClientImplHttpClient_uriToKeyWithJavaNetURI_(uri);
}

+ (void)clearCachedAuthentication {
  NetKebernetConfigurationClientImplHttpClient_clearCachedAuthentication();
}

- (void)getToStreamWithNSString:(NSString *)deviceName
                   withNSString:(NSString *)url
   withJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)callback {
  [self getToStreamWithNSString:deviceName withNSString:url withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken:nil withJavaUtilFunctionConsumer:callback];
}

- (void)getToStreamWithNSString:(NSString *)deviceName
                   withNSString:(NSString *)url
withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken:(id<NetKebernetConfigurationClientImplHttpClient_AuthenticationToken>)authenticationToken
   withJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)callback {
  @try {
    JavaNetURL *u = new_JavaNetURL_initWithNSString_([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(NetKebernetConfigurationClientImplHttpClient_PERMANENT_REDIRECTS)) getOrDefaultWithId:url withId:url]);
    id<NetKebernetConfigurationClientImplHttpClient_AuthenticationToken> token = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(NetKebernetConfigurationClientImplHttpClient_TOKEN_MAP)) getOrDefaultWithId:NetKebernetConfigurationClientImplHttpClient_uriToKeyWithJavaNetURI_([u toURI]) withId:authenticationToken];
    (void) [((id<JavaUtilConcurrentExecutorService>) nil_chk(NetKebernetConfigurationClientImplHttpClient_DEFAULT_EXECUTOR)) submitWithJavaLangRunnable:new_NetKebernetConfigurationClientImplHttpClient_$Lambda$1_initWithNetKebernetConfigurationClientImplHttpClient_withJavaNetURL_withNSString_withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken_withNSString_withJavaUtilFunctionConsumer_withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken_(self, u, deviceName, token, url, callback, authenticationToken)];
  }
  @catch (JavaNetURISyntaxException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(NetKebernetConfigurationClientImplHttpClient_LOGGER)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$$", @"Failed to parse ", url) withNSException:e];
    NetKebernetConfigurationClientImplHttpClient_maybeSendErrorWithNSString_(self, NSString_java_formatWithNSString_withNSObjectArray_(@"Unknown URL: %s", [IOSObjectArray newArrayWithObjects:(id[]){ url } count:1 type:NSObject_class_()]));
  }
  @catch (JavaNetMalformedURLException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(NetKebernetConfigurationClientImplHttpClient_LOGGER)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$$", @"Failed to parse ", url) withNSException:e];
    NetKebernetConfigurationClientImplHttpClient_maybeSendErrorWithNSString_(self, NSString_java_formatWithNSString_withNSObjectArray_(@"Unknown URL: %s", [IOSObjectArray newArrayWithObjects:(id[]){ url } count:1 type:NSObject_class_()]));
  }
}

- (void)setAuthenticationCallbackWithNetKebernetConfigurationClientImplHttpClient_AuthenticationCallback:(id<NetKebernetConfigurationClientImplHttpClient_AuthenticationCallback>)callback {
  self->authenticationCallback_ = callback;
}

- (void)setErrorCallbackWithNetKebernetConfigurationClientImplHttpClient_ErrorCallback:(id<NetKebernetConfigurationClientImplHttpClient_ErrorCallback>)callback {
  self->errorCallback_ = callback;
}

- (void)maybeSendErrorWithNSString:(NSString *)message {
  NetKebernetConfigurationClientImplHttpClient_maybeSendErrorWithNSString_(self, message);
}

- (void)requestAuthorizationWithNSString:(NSString *)deviceName
                            withNSString:(NSString *)url
withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken:(id<NetKebernetConfigurationClientImplHttpClient_AuthenticationToken>)token
            withJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)callback {
  NetKebernetConfigurationClientImplHttpClient_requestAuthorizationWithNSString_withNSString_withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken_withJavaUtilFunctionConsumer_(self, deviceName, url, token, callback);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, 1, 2 },
    { NULL, "LNSString;", 0xa, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 5, 6, -1, -1, -1, 7 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, 10, -1, 11 },
    { NULL, "V", 0x1, 8, 12, -1, 13, -1, 14 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 19, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 20, 12, 21, 13, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaSecurityKeyStore:withNetKebernetConfigurationClientImplHttpClient_AuthenticationCallback:);
  methods[1].selector = @selector(urlToKeyWithNSString:);
  methods[2].selector = @selector(uriToKeyWithJavaNetURI:);
  methods[3].selector = @selector(clearCachedAuthentication);
  methods[4].selector = @selector(getToStreamWithNSString:withNSString:withJavaUtilFunctionConsumer:);
  methods[5].selector = @selector(getToStreamWithNSString:withNSString:withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken:withJavaUtilFunctionConsumer:);
  methods[6].selector = @selector(setAuthenticationCallbackWithNetKebernetConfigurationClientImplHttpClient_AuthenticationCallback:);
  methods[7].selector = @selector(setErrorCallbackWithNetKebernetConfigurationClientImplHttpClient_ErrorCallback:);
  methods[8].selector = @selector(maybeSendErrorWithNSString:);
  methods[9].selector = @selector(requestAuthorizationWithNSString:withNSString:withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken:withJavaUtilFunctionConsumer:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "AUTHENTICATION_HEADER", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 22, -1, -1 },
    { "DEFAULT_EXECUTOR", "LJavaUtilConcurrentExecutorService;", .constantValue.asLong = 0, 0x1a, -1, 23, -1, -1 },
    { "LOGGER", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 24, -1, -1 },
    { "PERMANENT_REDIRECTS", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x1a, -1, 25, 26, -1 },
    { "TOKEN_MAP", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x1a, -1, 27, 28, -1 },
    { "certificateTool_", "LNetKebernetConfigurationClientImplCertificateTool;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "sslSocketFactory_", "LJavaxNetSslSSLSocketFactory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "authenticationCallback_", "LNetKebernetConfigurationClientImplHttpClient_AuthenticationCallback;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "errorCallback_", "LNetKebernetConfigurationClientImplHttpClient_ErrorCallback;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaSecurityKeyStore;LNetKebernetConfigurationClientImplHttpClient_AuthenticationCallback;", (void *)&NetKebernetConfigurationClientImplHttpClient__Annotations$0, (void *)&NetKebernetConfigurationClientImplHttpClient__Annotations$1, "urlToKey", "LNSString;", "uriToKey", "LJavaNetURI;", (void *)&NetKebernetConfigurationClientImplHttpClient__Annotations$2, "getToStream", "LNSString;LNSString;LJavaUtilFunctionConsumer;", "(Ljava/lang/String;Ljava/lang/String;Ljava/util/function/Consumer<Ljava/io/InputStreamReader;>;)V", (void *)&NetKebernetConfigurationClientImplHttpClient__Annotations$3, "LNSString;LNSString;LNetKebernetConfigurationClientImplHttpClient_AuthenticationToken;LJavaUtilFunctionConsumer;", "(Ljava/lang/String;Ljava/lang/String;Lnet/kebernet/configuration/client/impl/HttpClient$AuthenticationToken;Ljava/util/function/Consumer<Ljava/io/InputStreamReader;>;)V", (void *)&NetKebernetConfigurationClientImplHttpClient__Annotations$4, "setAuthenticationCallback", "LNetKebernetConfigurationClientImplHttpClient_AuthenticationCallback;", "setErrorCallback", "LNetKebernetConfigurationClientImplHttpClient_ErrorCallback;", "maybeSendError", "requestAuthorization", "LJavaIoIOException;", &NetKebernetConfigurationClientImplHttpClient_AUTHENTICATION_HEADER, &NetKebernetConfigurationClientImplHttpClient_DEFAULT_EXECUTOR, &NetKebernetConfigurationClientImplHttpClient_LOGGER, &NetKebernetConfigurationClientImplHttpClient_PERMANENT_REDIRECTS, "Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Ljava/lang/String;>;", &NetKebernetConfigurationClientImplHttpClient_TOKEN_MAP, "Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Lnet/kebernet/configuration/client/impl/HttpClient$AuthenticationToken;>;", "LNetKebernetConfigurationClientImplHttpClient_AuthenticationCallback;LNetKebernetConfigurationClientImplHttpClient_AuthenticationToken;LNetKebernetConfigurationClientImplHttpClient_ErrorCallback;LNetKebernetConfigurationClientImplHttpClient_BasicAuthenticationToken;LNetKebernetConfigurationClientImplHttpClient_BearerAuthenticationToken;LNetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback;", (void *)&NetKebernetConfigurationClientImplHttpClient__Annotations$5 };
  static const J2ObjcClassInfo _NetKebernetConfigurationClientImplHttpClient = { "HttpClient", "net.kebernet.configuration.client.impl", ptrTable, methods, fields, 7, 0x1, 10, 9, -1, 29, -1, -1, 30 };
  return &_NetKebernetConfigurationClientImplHttpClient;
}

+ (void)initialize {
  if (self == [NetKebernetConfigurationClientImplHttpClient class]) {
    NetKebernetConfigurationClientImplHttpClient_DEFAULT_EXECUTOR = NetKebernetConfigurationClientImplExecutor_getInstance();
    NetKebernetConfigurationClientImplHttpClient_LOGGER = JavaUtilLoggingLogger_getLoggerWithNSString_([NetKebernetConfigurationClientImplHttpClient_class_() getCanonicalName]);
    NetKebernetConfigurationClientImplHttpClient_PERMANENT_REDIRECTS = new_JavaUtilConcurrentConcurrentHashMap_init();
    NetKebernetConfigurationClientImplHttpClient_TOKEN_MAP = new_JavaUtilConcurrentConcurrentHashMap_init();
    J2OBJC_SET_INITIALIZED(NetKebernetConfigurationClientImplHttpClient)
  }
}

@end

void NetKebernetConfigurationClientImplHttpClient_initWithJavaSecurityKeyStore_withNetKebernetConfigurationClientImplHttpClient_AuthenticationCallback_(NetKebernetConfigurationClientImplHttpClient *self, JavaSecurityKeyStore *keyStore, id<NetKebernetConfigurationClientImplHttpClient_AuthenticationCallback> authenticationCallback) {
  NSObject_init(self);
  JavaxNetSslSSLContext *ctx = nil;
  if (keyStore == nil) {
    [((JavaUtilLoggingLogger *) nil_chk(NetKebernetConfigurationClientImplHttpClient_LOGGER)) warningWithNSString:@"No keystore for SSL."];
    self->certificateTool_ = nil;
    @try {
      ctx = JavaxNetSslSSLContext_getDefault();
    }
    @catch (JavaSecurityNoSuchAlgorithmException *e) {
      [NetKebernetConfigurationClientImplHttpClient_LOGGER logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:@"Failed to get TLS context" withNSException:e];
    }
  }
  else {
    self->certificateTool_ = new_NetKebernetConfigurationClientImplCertificateTool_initWithJavaSecurityKeyStore_(keyStore);
    @try {
      JavaxNetSslTrustManagerFactory *tmf = JavaxNetSslTrustManagerFactory_getInstanceWithNSString_(JavaxNetSslTrustManagerFactory_getDefaultAlgorithm());
      [((JavaxNetSslTrustManagerFactory *) nil_chk(tmf)) init__WithJavaSecurityKeyStore:nil];
      id<JavaxNetSslX509TrustManager> defaultTm = nil;
      {
        IOSObjectArray *a__ = [tmf getTrustManagers];
        id<JavaxNetSslTrustManager> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        id<JavaxNetSslTrustManager> const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          id<JavaxNetSslTrustManager> tm = *b__++;
          if ([JavaxNetSslX509TrustManager_class_() isInstance:tm]) {
            defaultTm = (id<JavaxNetSslX509TrustManager>) cast_check(tm, JavaxNetSslX509TrustManager_class_());
            break;
          }
        }
      }
      tmf = JavaxNetSslTrustManagerFactory_getInstanceWithNSString_(JavaxNetSslTrustManagerFactory_getDefaultAlgorithm());
      [((JavaxNetSslTrustManagerFactory *) nil_chk(tmf)) init__WithJavaSecurityKeyStore:keyStore];
      id<JavaxNetSslX509TrustManager> myTm = nil;
      {
        IOSObjectArray *a__ = [tmf getTrustManagers];
        id<JavaxNetSslTrustManager> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        id<JavaxNetSslTrustManager> const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          id<JavaxNetSslTrustManager> tm = *b__++;
          if ([JavaxNetSslX509TrustManager_class_() isInstance:tm]) {
            myTm = (id<JavaxNetSslX509TrustManager>) cast_check(tm, JavaxNetSslX509TrustManager_class_());
            break;
          }
        }
      }
      GVBPreconditions_checkStateWithBoolean_withId_(defaultTm != nil, @"Unable to get a default trust manager.");
      id<JavaxNetSslX509TrustManager> finalDefaultTm = defaultTm;
      id<JavaxNetSslX509TrustManager> finalMyTm = myTm;
      id<JavaxNetSslX509TrustManager> delegatingTM = new_NetKebernetConfigurationClientImplHttpClient_1_initWithJavaSecurityKeyStore_withJavaxNetSslX509TrustManager_withJavaxNetSslX509TrustManager_(keyStore, finalMyTm, finalDefaultTm);
      ctx = JavaxNetSslSSLContext_getInstanceWithNSString_(@"TLS");
      [((JavaxNetSslSSLContext *) nil_chk(ctx)) init__WithJavaxNetSslKeyManagerArray:nil withJavaxNetSslTrustManagerArray:[IOSObjectArray newArrayWithObjects:(id[]){ delegatingTM } count:1 type:JavaxNetSslTrustManager_class_()] withJavaSecuritySecureRandom:nil];
    }
    @catch (JavaLangNullPointerException *e) {
      [((JavaUtilLoggingLogger *) nil_chk(NetKebernetConfigurationClientImplHttpClient_LOGGER)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:@"Failed to initialize SSL with keystore."];
    }
    @catch (JavaSecurityKeyStoreException *e) {
      [((JavaUtilLoggingLogger *) nil_chk(NetKebernetConfigurationClientImplHttpClient_LOGGER)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:@"Failed to initialize SSL with keystore."];
    }
    @catch (JavaSecurityKeyManagementException *e) {
      [((JavaUtilLoggingLogger *) nil_chk(NetKebernetConfigurationClientImplHttpClient_LOGGER)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:@"Failed to initialize SSL with keystore."];
    }
    @catch (JavaSecurityNoSuchAlgorithmException *e) {
      [((JavaUtilLoggingLogger *) nil_chk(NetKebernetConfigurationClientImplHttpClient_LOGGER)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:@"Failed to initialize SSL with keystore."];
    }
  }
  self->authenticationCallback_ = authenticationCallback;
  if (ctx != nil) {
    self->sslSocketFactory_ = [ctx getSocketFactory];
  }
  else {
    self->sslSocketFactory_ = nil;
  }
}

NetKebernetConfigurationClientImplHttpClient *new_NetKebernetConfigurationClientImplHttpClient_initWithJavaSecurityKeyStore_withNetKebernetConfigurationClientImplHttpClient_AuthenticationCallback_(JavaSecurityKeyStore *keyStore, id<NetKebernetConfigurationClientImplHttpClient_AuthenticationCallback> authenticationCallback) {
  J2OBJC_NEW_IMPL(NetKebernetConfigurationClientImplHttpClient, initWithJavaSecurityKeyStore_withNetKebernetConfigurationClientImplHttpClient_AuthenticationCallback_, keyStore, authenticationCallback)
}

NetKebernetConfigurationClientImplHttpClient *create_NetKebernetConfigurationClientImplHttpClient_initWithJavaSecurityKeyStore_withNetKebernetConfigurationClientImplHttpClient_AuthenticationCallback_(JavaSecurityKeyStore *keyStore, id<NetKebernetConfigurationClientImplHttpClient_AuthenticationCallback> authenticationCallback) {
  J2OBJC_CREATE_IMPL(NetKebernetConfigurationClientImplHttpClient, initWithJavaSecurityKeyStore_withNetKebernetConfigurationClientImplHttpClient_AuthenticationCallback_, keyStore, authenticationCallback)
}

NSString *NetKebernetConfigurationClientImplHttpClient_urlToKeyWithNSString_(NSString *url) {
  NetKebernetConfigurationClientImplHttpClient_initialize();
  @try {
    return NetKebernetConfigurationClientImplHttpClient_uriToKeyWithJavaNetURI_(new_JavaNetURI_initWithNSString_(url));
  }
  @catch (JavaNetURISyntaxException *e) {
    @throw new_JavaLangRuntimeException_initWithNSException_(e);
  }
}

NSString *NetKebernetConfigurationClientImplHttpClient_uriToKeyWithJavaNetURI_(JavaNetURI *uri) {
  NetKebernetConfigurationClientImplHttpClient_initialize();
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([new_JavaLangStringBuilder_initWithNSString_([((JavaNetURI *) nil_chk(uri)) getScheme]) appendWithNSString:@"::"])) appendWithNSString:[uri getHost]])) appendWithNSString:@"::"])) appendWithInt:[uri getPort]])) description];
}

void NetKebernetConfigurationClientImplHttpClient_clearCachedAuthentication() {
  NetKebernetConfigurationClientImplHttpClient_initialize();
  [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(NetKebernetConfigurationClientImplHttpClient_TOKEN_MAP)) clear];
}

void NetKebernetConfigurationClientImplHttpClient_maybeSendErrorWithNSString_(NetKebernetConfigurationClientImplHttpClient *self, NSString *message) {
  if (self->errorCallback_ != nil) {
    [self->errorCallback_ onErrorWithNSString:message];
  }
}

void NetKebernetConfigurationClientImplHttpClient_requestAuthorizationWithNSString_withNSString_withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken_withJavaUtilFunctionConsumer_(NetKebernetConfigurationClientImplHttpClient *self, NSString *deviceName, NSString *url, id<NetKebernetConfigurationClientImplHttpClient_AuthenticationToken> token, id<JavaUtilFunctionConsumer> callback) {
  if (self->authenticationCallback_ == nil) {
    NSString *error = NSString_java_formatWithNSString_withNSObjectArray_(@"The following URL requires authentication, but there is no handler: %s", [IOSObjectArray newArrayWithObjects:(id[]){ url } count:1 type:NSObject_class_()]);
    NetKebernetConfigurationClientImplHttpClient_maybeSendErrorWithNSString_(self, error);
    @throw new_JavaIoIOException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"The following URL requires authentication, but there is no handler: %s", [IOSObjectArray newArrayWithObjects:(id[]){ url } count:1 type:NSObject_class_()]));
  }
  [new_NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback_initWithNetKebernetConfigurationClientImplHttpClient_withNetKebernetConfigurationClientImplHttpClient_AuthenticationCallback_(self, self->authenticationCallback_) authenticationRequiredWithNSString:deviceName withNSString:url withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken:token withJavaUtilFunctionConsumer:new_NetKebernetConfigurationClientImplHttpClient_$Lambda$3_initWithNetKebernetConfigurationClientImplHttpClient_withNSString_withNSString_withJavaUtilFunctionConsumer_(self, url, deviceName, callback)];
}

IOSObjectArray *NetKebernetConfigurationClientImplHttpClient__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxInjectInject() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetKebernetConfigurationClientImplHttpClient__Annotations$1() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:2 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *NetKebernetConfigurationClientImplHttpClient__Annotations$2() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *NetKebernetConfigurationClientImplHttpClient__Annotations$3() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:3 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *NetKebernetConfigurationClientImplHttpClient__Annotations$4() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:4 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *NetKebernetConfigurationClientImplHttpClient__Annotations$5() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxInjectSingleton() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetKebernetConfigurationClientImplHttpClient)

@implementation NetKebernetConfigurationClientImplHttpClient_1

- (instancetype)initWithJavaSecurityKeyStore:(JavaSecurityKeyStore *)capture$0
             withJavaxNetSslX509TrustManager:(id<JavaxNetSslX509TrustManager>)capture$1
             withJavaxNetSslX509TrustManager:(id<JavaxNetSslX509TrustManager>)capture$2 {
  NetKebernetConfigurationClientImplHttpClient_1_initWithJavaSecurityKeyStore_withJavaxNetSslX509TrustManager_withJavaxNetSslX509TrustManager_(self, capture$0, capture$1, capture$2);
  return self;
}

- (IOSObjectArray *)getAcceptedIssuers {
  JavaUtilArrayList *certs = new_JavaUtilArrayList_init();
  @try {
    id<JavaUtilEnumeration> a = [((JavaSecurityKeyStore *) nil_chk(val$keyStore_)) aliases];
    while ([((id<JavaUtilEnumeration>) nil_chk(a)) hasMoreElements]) {
      JavaSecurityCertCertificate *c = [val$keyStore_ getCertificateWithNSString:[a nextElement]];
      if ([c isKindOfClass:[JavaSecurityCertX509Certificate class]]) {
        [certs addWithId:(JavaSecurityCertX509Certificate *) cast_chk(c, [JavaSecurityCertX509Certificate class])];
      }
    }
  }
  @catch (JavaSecurityKeyStoreException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(NetKebernetConfigurationClientImplHttpClient, LOGGER))) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:@"Failed to read certificates from keystore!" withNSException:e];
  }
  if (val$finalMyTm_ != nil) {
    [certs addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_([val$finalMyTm_ getAcceptedIssuers])];
  }
  return [certs toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[certs size] type:JavaSecurityCertX509Certificate_class_()]];
}

- (void)checkServerTrustedWithJavaSecurityCertX509CertificateArray:(IOSObjectArray *)chain
                                                      withNSString:(NSString *)authType {
  @try {
    {
      IOSObjectArray *a__ = chain;
      JavaSecurityCertX509Certificate * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      JavaSecurityCertX509Certificate * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        JavaSecurityCertX509Certificate *c = *b__++;
        if ([((JavaSecurityKeyStore *) nil_chk(val$keyStore_)) getCertificateAliasWithJavaSecurityCertCertificate:c] != nil) {
          return;
        }
      }
    }
    if (val$finalMyTm_ != nil) {
      [val$finalMyTm_ checkServerTrustedWithJavaSecurityCertX509CertificateArray:chain withNSString:authType];
    }
  }
  @catch (JavaLangException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(NetKebernetConfigurationClientImplHttpClient, LOGGER))) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, INFO) withNSString:@"Certificate miss on internal keystore." withNSException:e];
    [((id<JavaxNetSslX509TrustManager>) nil_chk(val$finalDefaultTm_)) checkServerTrustedWithJavaSecurityCertX509CertificateArray:chain withNSString:authType];
  }
}

- (void)checkClientTrustedWithJavaSecurityCertX509CertificateArray:(IOSObjectArray *)chain
                                                      withNSString:(NSString *)authType {
  [((id<JavaxNetSslX509TrustManager>) nil_chk(val$finalDefaultTm_)) checkClientTrustedWithJavaSecurityCertX509CertificateArray:chain withNSString:authType];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LJavaSecurityCertX509Certificate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaSecurityKeyStore:withJavaxNetSslX509TrustManager:withJavaxNetSslX509TrustManager:);
  methods[1].selector = @selector(getAcceptedIssuers);
  methods[2].selector = @selector(checkServerTrustedWithJavaSecurityCertX509CertificateArray:withNSString:);
  methods[3].selector = @selector(checkClientTrustedWithJavaSecurityCertX509CertificateArray:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$keyStore_", "LJavaSecurityKeyStore;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$finalMyTm_", "LJavaxNetSslX509TrustManager;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$finalDefaultTm_", "LJavaxNetSslX509TrustManager;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "checkServerTrusted", "[LJavaSecurityCertX509Certificate;LNSString;", "LJavaSecurityCertCertificateException;", "checkClientTrusted", "LNetKebernetConfigurationClientImplHttpClient;", "initWithJavaSecurityKeyStore:withNetKebernetConfigurationClientImplHttpClient_AuthenticationCallback:" };
  static const J2ObjcClassInfo _NetKebernetConfigurationClientImplHttpClient_1 = { "", "net.kebernet.configuration.client.impl", ptrTable, methods, fields, 7, 0x8018, 4, 3, 4, -1, 5, -1, -1 };
  return &_NetKebernetConfigurationClientImplHttpClient_1;
}

@end

void NetKebernetConfigurationClientImplHttpClient_1_initWithJavaSecurityKeyStore_withJavaxNetSslX509TrustManager_withJavaxNetSslX509TrustManager_(NetKebernetConfigurationClientImplHttpClient_1 *self, JavaSecurityKeyStore *capture$0, id<JavaxNetSslX509TrustManager> capture$1, id<JavaxNetSslX509TrustManager> capture$2) {
  self->val$keyStore_ = capture$0;
  self->val$finalMyTm_ = capture$1;
  self->val$finalDefaultTm_ = capture$2;
  NSObject_init(self);
}

NetKebernetConfigurationClientImplHttpClient_1 *new_NetKebernetConfigurationClientImplHttpClient_1_initWithJavaSecurityKeyStore_withJavaxNetSslX509TrustManager_withJavaxNetSslX509TrustManager_(JavaSecurityKeyStore *capture$0, id<JavaxNetSslX509TrustManager> capture$1, id<JavaxNetSslX509TrustManager> capture$2) {
  J2OBJC_NEW_IMPL(NetKebernetConfigurationClientImplHttpClient_1, initWithJavaSecurityKeyStore_withJavaxNetSslX509TrustManager_withJavaxNetSslX509TrustManager_, capture$0, capture$1, capture$2)
}

NetKebernetConfigurationClientImplHttpClient_1 *create_NetKebernetConfigurationClientImplHttpClient_1_initWithJavaSecurityKeyStore_withJavaxNetSslX509TrustManager_withJavaxNetSslX509TrustManager_(JavaSecurityKeyStore *capture$0, id<JavaxNetSslX509TrustManager> capture$1, id<JavaxNetSslX509TrustManager> capture$2) {
  J2OBJC_CREATE_IMPL(NetKebernetConfigurationClientImplHttpClient_1, initWithJavaSecurityKeyStore_withJavaxNetSslX509TrustManager_withJavaxNetSslX509TrustManager_, capture$0, capture$1, capture$2)
}

@implementation NetKebernetConfigurationClientImplHttpClient_AuthenticationCallback

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(authenticationRequiredWithNSString:withNSString:withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken:withJavaUtilFunctionConsumer:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "authenticationRequired", "LNSString;LNSString;LNetKebernetConfigurationClientImplHttpClient_AuthenticationToken;LJavaUtilFunctionConsumer;", "(Ljava/lang/String;Ljava/lang/String;Lnet/kebernet/configuration/client/impl/HttpClient$AuthenticationToken;Ljava/util/function/Consumer<Lnet/kebernet/configuration/client/impl/HttpClient$AuthenticationToken;>;)V", "LNetKebernetConfigurationClientImplHttpClient;" };
  static const J2ObjcClassInfo _NetKebernetConfigurationClientImplHttpClient_AuthenticationCallback = { "AuthenticationCallback", "net.kebernet.configuration.client.impl", ptrTable, methods, NULL, 7, 0x609, 1, 0, 3, -1, -1, -1, -1 };
  return &_NetKebernetConfigurationClientImplHttpClient_AuthenticationCallback;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(NetKebernetConfigurationClientImplHttpClient_AuthenticationCallback)

@implementation NetKebernetConfigurationClientImplHttpClient_AuthenticationToken

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getScheme);
  methods[1].selector = @selector(getValue);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNetKebernetConfigurationClientImplHttpClient;" };
  static const J2ObjcClassInfo _NetKebernetConfigurationClientImplHttpClient_AuthenticationToken = { "AuthenticationToken", "net.kebernet.configuration.client.impl", ptrTable, methods, NULL, 7, 0x609, 2, 0, 0, -1, -1, -1, -1 };
  return &_NetKebernetConfigurationClientImplHttpClient_AuthenticationToken;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(NetKebernetConfigurationClientImplHttpClient_AuthenticationToken)

@implementation NetKebernetConfigurationClientImplHttpClient_ErrorCallback

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onErrorWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onError", "LNSString;", "LNetKebernetConfigurationClientImplHttpClient;" };
  static const J2ObjcClassInfo _NetKebernetConfigurationClientImplHttpClient_ErrorCallback = { "ErrorCallback", "net.kebernet.configuration.client.impl", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_NetKebernetConfigurationClientImplHttpClient_ErrorCallback;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(NetKebernetConfigurationClientImplHttpClient_ErrorCallback)

@implementation NetKebernetConfigurationClientImplHttpClient_BasicAuthenticationToken

- (instancetype)initWithNSString:(NSString *)username
                    withNSString:(NSString *)password {
  NetKebernetConfigurationClientImplHttpClient_BasicAuthenticationToken_initWithNSString_withNSString_(self, username, password);
  return self;
}

- (NSString *)getScheme {
  return @"Basic";
}

- (NSString *)getValue {
  return [((JavaUtilBase64_Encoder *) nil_chk(JavaUtilBase64_getEncoder())) encodeToStringWithByteArray:[((NSString *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([new_JavaLangStringBuilder_initWithNSString_(username_) appendWithChar:':'])) appendWithNSString:password_])) description])) java_getBytesWithCharset:JreLoadStatic(GVBCharsets, UTF_8)]];
}

- (jboolean)isEqual:(id)o {
  if (self == o) return true;
  if (!([o isKindOfClass:[NetKebernetConfigurationClientImplHttpClient_BasicAuthenticationToken class]])) return false;
  NetKebernetConfigurationClientImplHttpClient_BasicAuthenticationToken *that = (NetKebernetConfigurationClientImplHttpClient_BasicAuthenticationToken *) cast_chk(o, [NetKebernetConfigurationClientImplHttpClient_BasicAuthenticationToken class]);
  return GVBObjects_equalWithId_withId_(username_, ((NetKebernetConfigurationClientImplHttpClient_BasicAuthenticationToken *) nil_chk(that))->username_) && GVBObjects_equalWithId_withId_(password_, that->password_);
}

- (NSUInteger)hash {
  return GVBObjects_hashCodeWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ username_, password_ } count:2 type:NSObject_class_()]);
}

- (NSString *)description {
  return [((GVBMoreObjects_ToStringHelper *) nil_chk([((GVBMoreObjects_ToStringHelper *) nil_chk([((GVBMoreObjects_ToStringHelper *) nil_chk(GVBMoreObjects_toStringHelperWithId_(self))) addWithNSString:@"username" withId:username_])) addWithNSString:@"password" withId:password_])) description];
}

- (NSString *)getUsername {
  return username_;
}

- (NSString *)getPassword {
  return password_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withNSString:);
  methods[1].selector = @selector(getScheme);
  methods[2].selector = @selector(getValue);
  methods[3].selector = @selector(isEqual:);
  methods[4].selector = @selector(hash);
  methods[5].selector = @selector(description);
  methods[6].selector = @selector(getUsername);
  methods[7].selector = @selector(getPassword);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "username_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "password_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;", "equals", "LNSObject;", "hashCode", "toString", "LNetKebernetConfigurationClientImplHttpClient;" };
  static const J2ObjcClassInfo _NetKebernetConfigurationClientImplHttpClient_BasicAuthenticationToken = { "BasicAuthenticationToken", "net.kebernet.configuration.client.impl", ptrTable, methods, fields, 7, 0x9, 8, 2, 5, -1, -1, -1, -1 };
  return &_NetKebernetConfigurationClientImplHttpClient_BasicAuthenticationToken;
}

@end

void NetKebernetConfigurationClientImplHttpClient_BasicAuthenticationToken_initWithNSString_withNSString_(NetKebernetConfigurationClientImplHttpClient_BasicAuthenticationToken *self, NSString *username, NSString *password) {
  NSObject_init(self);
  self->username_ = username;
  self->password_ = password;
}

NetKebernetConfigurationClientImplHttpClient_BasicAuthenticationToken *new_NetKebernetConfigurationClientImplHttpClient_BasicAuthenticationToken_initWithNSString_withNSString_(NSString *username, NSString *password) {
  J2OBJC_NEW_IMPL(NetKebernetConfigurationClientImplHttpClient_BasicAuthenticationToken, initWithNSString_withNSString_, username, password)
}

NetKebernetConfigurationClientImplHttpClient_BasicAuthenticationToken *create_NetKebernetConfigurationClientImplHttpClient_BasicAuthenticationToken_initWithNSString_withNSString_(NSString *username, NSString *password) {
  J2OBJC_CREATE_IMPL(NetKebernetConfigurationClientImplHttpClient_BasicAuthenticationToken, initWithNSString_withNSString_, username, password)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetKebernetConfigurationClientImplHttpClient_BasicAuthenticationToken)

@implementation NetKebernetConfigurationClientImplHttpClient_BearerAuthenticationToken

- (instancetype)initWithNSString:(NSString *)token {
  NetKebernetConfigurationClientImplHttpClient_BearerAuthenticationToken_initWithNSString_(self, token);
  return self;
}

- (NSString *)getScheme {
  return @"Bearer";
}

- (NSString *)getValue {
  return token_;
}

- (jboolean)isEqual:(id)o {
  if (self == o) return true;
  if (!([o isKindOfClass:[NetKebernetConfigurationClientImplHttpClient_BearerAuthenticationToken class]])) return false;
  __unused NetKebernetConfigurationClientImplHttpClient_BearerAuthenticationToken *that = (NetKebernetConfigurationClientImplHttpClient_BearerAuthenticationToken *) cast_chk(o, [NetKebernetConfigurationClientImplHttpClient_BearerAuthenticationToken class]);
  return GVBObjects_equalWithId_withId_(token_, ((NetKebernetConfigurationClientImplHttpClient_BearerAuthenticationToken *) nil_chk(that))->token_);
}

- (NSUInteger)hash {
  return GVBObjects_hashCodeWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ token_ } count:1 type:NSObject_class_()]);
}

- (NSString *)description {
  return [((GVBMoreObjects_ToStringHelper *) nil_chk([((GVBMoreObjects_ToStringHelper *) nil_chk(GVBMoreObjects_toStringHelperWithId_(self))) addWithNSString:@"token" withId:token_])) description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(getScheme);
  methods[2].selector = @selector(getValue);
  methods[3].selector = @selector(isEqual:);
  methods[4].selector = @selector(hash);
  methods[5].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "token_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "equals", "LNSObject;", "hashCode", "toString", "LNetKebernetConfigurationClientImplHttpClient;" };
  static const J2ObjcClassInfo _NetKebernetConfigurationClientImplHttpClient_BearerAuthenticationToken = { "BearerAuthenticationToken", "net.kebernet.configuration.client.impl", ptrTable, methods, fields, 7, 0x9, 6, 1, 5, -1, -1, -1, -1 };
  return &_NetKebernetConfigurationClientImplHttpClient_BearerAuthenticationToken;
}

@end

void NetKebernetConfigurationClientImplHttpClient_BearerAuthenticationToken_initWithNSString_(NetKebernetConfigurationClientImplHttpClient_BearerAuthenticationToken *self, NSString *token) {
  NSObject_init(self);
  self->token_ = token;
}

NetKebernetConfigurationClientImplHttpClient_BearerAuthenticationToken *new_NetKebernetConfigurationClientImplHttpClient_BearerAuthenticationToken_initWithNSString_(NSString *token) {
  J2OBJC_NEW_IMPL(NetKebernetConfigurationClientImplHttpClient_BearerAuthenticationToken, initWithNSString_, token)
}

NetKebernetConfigurationClientImplHttpClient_BearerAuthenticationToken *create_NetKebernetConfigurationClientImplHttpClient_BearerAuthenticationToken_initWithNSString_(NSString *token) {
  J2OBJC_CREATE_IMPL(NetKebernetConfigurationClientImplHttpClient_BearerAuthenticationToken, initWithNSString_, token)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetKebernetConfigurationClientImplHttpClient_BearerAuthenticationToken)

@implementation NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback

- (instancetype)initWithNetKebernetConfigurationClientImplHttpClient:(NetKebernetConfigurationClientImplHttpClient *)outer$
withNetKebernetConfigurationClientImplHttpClient_AuthenticationCallback:(id<NetKebernetConfigurationClientImplHttpClient_AuthenticationCallback>)wrapped {
  NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback_initWithNetKebernetConfigurationClientImplHttpClient_withNetKebernetConfigurationClientImplHttpClient_AuthenticationCallback_(self, outer$, wrapped);
  return self;
}

- (void)authenticationRequiredWithNSString:(NSString *)deviceName
                              withNSString:(NSString *)url
withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken:(id<NetKebernetConfigurationClientImplHttpClient_AuthenticationToken>)previousToken
              withJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)callback {
  @try {
    [((id<NetKebernetConfigurationClientImplHttpClient_AuthenticationCallback>) nil_chk(wrapped_)) authenticationRequiredWithNSString:deviceName withNSString:url withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken:previousToken withJavaUtilFunctionConsumer:new_NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback_$Lambda$1_initWithNetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback_withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken_withNSString_withJavaUtilFunctionConsumer_(self, previousToken, url, callback)];
  }
  @catch (JavaLangException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(NetKebernetConfigurationClientImplHttpClient, LOGGER))) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:nil withNSException:e];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNetKebernetConfigurationClientImplHttpClient:withNetKebernetConfigurationClientImplHttpClient_AuthenticationCallback:);
  methods[1].selector = @selector(authenticationRequiredWithNSString:withNSString:withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken:withJavaUtilFunctionConsumer:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetKebernetConfigurationClientImplHttpClient;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "wrapped_", "LNetKebernetConfigurationClientImplHttpClient_AuthenticationCallback;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetKebernetConfigurationClientImplHttpClient_AuthenticationCallback;", "authenticationRequired", "LNSString;LNSString;LNetKebernetConfigurationClientImplHttpClient_AuthenticationToken;LJavaUtilFunctionConsumer;", "(Ljava/lang/String;Ljava/lang/String;Lnet/kebernet/configuration/client/impl/HttpClient$AuthenticationToken;Ljava/util/function/Consumer<Lnet/kebernet/configuration/client/impl/HttpClient$AuthenticationToken;>;)V", "LNetKebernetConfigurationClientImplHttpClient;" };
  static const J2ObjcClassInfo _NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback = { "NoRetryAuthenticationCallback", "net.kebernet.configuration.client.impl", ptrTable, methods, fields, 7, 0x2, 2, 2, 4, -1, -1, -1, -1 };
  return &_NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback;
}

@end

void NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback_initWithNetKebernetConfigurationClientImplHttpClient_withNetKebernetConfigurationClientImplHttpClient_AuthenticationCallback_(NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback *self, NetKebernetConfigurationClientImplHttpClient *outer$, id<NetKebernetConfigurationClientImplHttpClient_AuthenticationCallback> wrapped) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->wrapped_ = wrapped;
}

NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback *new_NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback_initWithNetKebernetConfigurationClientImplHttpClient_withNetKebernetConfigurationClientImplHttpClient_AuthenticationCallback_(NetKebernetConfigurationClientImplHttpClient *outer$, id<NetKebernetConfigurationClientImplHttpClient_AuthenticationCallback> wrapped) {
  J2OBJC_NEW_IMPL(NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback, initWithNetKebernetConfigurationClientImplHttpClient_withNetKebernetConfigurationClientImplHttpClient_AuthenticationCallback_, outer$, wrapped)
}

NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback *create_NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback_initWithNetKebernetConfigurationClientImplHttpClient_withNetKebernetConfigurationClientImplHttpClient_AuthenticationCallback_(NetKebernetConfigurationClientImplHttpClient *outer$, id<NetKebernetConfigurationClientImplHttpClient_AuthenticationCallback> wrapped) {
  J2OBJC_CREATE_IMPL(NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback, initWithNetKebernetConfigurationClientImplHttpClient_withNetKebernetConfigurationClientImplHttpClient_AuthenticationCallback_, outer$, wrapped)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback)

@implementation NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback_$Lambda$1

- (void)acceptWithId:(id<NetKebernetConfigurationClientImplHttpClient_AuthenticationToken>)nextToken {
  if (GVBObjects_equalWithId_withId_(nextToken, val$previousToken_)) {
    NetKebernetConfigurationClientImplHttpClient_maybeSendErrorWithNSString_(this$0_->this$0_, NSString_java_formatWithNSString_withNSObjectArray_(@"Couldn't authenticate with %s", [IOSObjectArray newArrayWithObjects:(id[]){ val$url_ } count:1 type:NSObject_class_()]));
  }
  else {
    [((id<JavaUtilFunctionConsumer>) nil_chk(val$callback_)) acceptWithId:nextToken];
  }
}

- (id<JavaUtilFunctionConsumer>)andThenWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  return JavaUtilFunctionConsumer_andThenWithJavaUtilFunctionConsumer_(self, arg0);
}

@end

void NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback_$Lambda$1_initWithNetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback_withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken_withNSString_withJavaUtilFunctionConsumer_(NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback_$Lambda$1 *self, NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback *outer$, id<NetKebernetConfigurationClientImplHttpClient_AuthenticationToken> capture$0, NSString *capture$1, id<JavaUtilFunctionConsumer> capture$2) {
  self->this$0_ = outer$;
  self->val$previousToken_ = capture$0;
  self->val$url_ = capture$1;
  self->val$callback_ = capture$2;
  NSObject_init(self);
}

NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback_$Lambda$1 *new_NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback_$Lambda$1_initWithNetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback_withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken_withNSString_withJavaUtilFunctionConsumer_(NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback *outer$, id<NetKebernetConfigurationClientImplHttpClient_AuthenticationToken> capture$0, NSString *capture$1, id<JavaUtilFunctionConsumer> capture$2) {
  J2OBJC_NEW_IMPL(NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback_$Lambda$1, initWithNetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback_withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken_withNSString_withJavaUtilFunctionConsumer_, outer$, capture$0, capture$1, capture$2)
}

NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback_$Lambda$1 *create_NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback_$Lambda$1_initWithNetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback_withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken_withNSString_withJavaUtilFunctionConsumer_(NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback *outer$, id<NetKebernetConfigurationClientImplHttpClient_AuthenticationToken> capture$0, NSString *capture$1, id<JavaUtilFunctionConsumer> capture$2) {
  J2OBJC_CREATE_IMPL(NetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback_$Lambda$1, initWithNetKebernetConfigurationClientImplHttpClient_NoRetryAuthenticationCallback_withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken_withNSString_withJavaUtilFunctionConsumer_, outer$, capture$0, capture$1, capture$2)
}

@implementation NetKebernetConfigurationClientImplHttpClient_$Lambda$2

- (jboolean)verifyWithNSString:(NSString *)s
     withJavaxNetSslSSLSession:(id<JavaxNetSslSSLSession>)sslSession {
  id<JavaxNetSslHostnameVerifier> defaultVerifier = JavaxNetSslHttpsURLConnection_getDefaultHostnameVerifier();
  return [((id<JavaxNetSslHostnameVerifier>) nil_chk(defaultVerifier)) verifyWithNSString:s withJavaxNetSslSSLSession:sslSession] || [defaultVerifier verifyWithNSString:val$deviceName_ withJavaxNetSslSSLSession:sslSession] || [((NSString *) nil_chk(s)) isEqual:[((JavaNetURL *) nil_chk(val$u_)) getHost]];
}

@end

void NetKebernetConfigurationClientImplHttpClient_$Lambda$2_initWithNSString_withJavaNetURL_(NetKebernetConfigurationClientImplHttpClient_$Lambda$2 *self, NSString *capture$0, JavaNetURL *capture$1) {
  self->val$deviceName_ = capture$0;
  self->val$u_ = capture$1;
  NSObject_init(self);
}

NetKebernetConfigurationClientImplHttpClient_$Lambda$2 *new_NetKebernetConfigurationClientImplHttpClient_$Lambda$2_initWithNSString_withJavaNetURL_(NSString *capture$0, JavaNetURL *capture$1) {
  J2OBJC_NEW_IMPL(NetKebernetConfigurationClientImplHttpClient_$Lambda$2, initWithNSString_withJavaNetURL_, capture$0, capture$1)
}

NetKebernetConfigurationClientImplHttpClient_$Lambda$2 *create_NetKebernetConfigurationClientImplHttpClient_$Lambda$2_initWithNSString_withJavaNetURL_(NSString *capture$0, JavaNetURL *capture$1) {
  J2OBJC_CREATE_IMPL(NetKebernetConfigurationClientImplHttpClient_$Lambda$2, initWithNSString_withJavaNetURL_, capture$0, capture$1)
}

@implementation NetKebernetConfigurationClientImplHttpClient_$Lambda$1

- (void)run {
  @try {
    JavaNetHttpURLConnection *connection = (JavaNetHttpURLConnection *) cast_chk([((JavaNetURL *) nil_chk(val$u_)) openConnection], [JavaNetHttpURLConnection class]);
    if (this$0_->sslSocketFactory_ != nil && [connection isKindOfClass:[JavaxNetSslHttpsURLConnection class]]) {
      JavaxNetSslHttpsURLConnection *httpsConnection = (JavaxNetSslHttpsURLConnection *) cast_chk(connection, [JavaxNetSslHttpsURLConnection class]);
      [((JavaxNetSslHttpsURLConnection *) nil_chk(httpsConnection)) setSSLSocketFactoryWithJavaxNetSslSSLSocketFactory:this$0_->sslSocketFactory_];
      [httpsConnection setHostnameVerifierWithJavaxNetSslHostnameVerifier:new_NetKebernetConfigurationClientImplHttpClient_$Lambda$2_initWithNSString_withJavaNetURL_(val$deviceName_, val$u_)];
    }
    [((JavaNetHttpURLConnection *) nil_chk(connection)) setInstanceFollowRedirectsWithBoolean:false];
    if (val$token_ != nil) {
      [connection setRequestPropertyWithNSString:NetKebernetConfigurationClientImplHttpClient_AUTHENTICATION_HEADER withNSString:[((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([new_JavaLangStringBuilder_initWithNSString_([val$token_ getScheme]) appendWithChar:' '])) appendWithNSString:[val$token_ getValue]])) description]];
    }
    [connection setUseCachesWithBoolean:false];
    [connection setInstanceFollowRedirectsWithBoolean:false];
    switch ([connection getResponseCode]) {
      case 200:
      break;
      case 301:
      (void) [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(JreLoadStatic(NetKebernetConfigurationClientImplHttpClient, PERMANENT_REDIRECTS))) putWithId:val$url_ withId:[connection getHeaderFieldWithNSString:@"Location"]];
      case 302:
      case 303:
      [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(NetKebernetConfigurationClientImplHttpClient, LOGGER))) infoWithNSString:JreStrcat("$$", @"Following redirect to ", [connection getHeaderFieldWithNSString:@"Location"])];
      [this$0_ getToStreamWithNSString:val$deviceName_ withNSString:[connection getHeaderFieldWithNSString:@"Location"] withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken:val$token_ withJavaUtilFunctionConsumer:val$callback_];
      return;
      case 401:
      case 403:
      NetKebernetConfigurationClientImplHttpClient_requestAuthorizationWithNSString_withNSString_withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken_withJavaUtilFunctionConsumer_(this$0_, val$deviceName_, val$url_, val$token_, val$callback_);
      return;
      default:
      @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$I$$", @"Unexpected response code ", [connection getResponseCode], @" from ", val$url_));
    }
    [((id<JavaUtilFunctionConsumer>) nil_chk(val$callback_)) acceptWithId:new_JavaIoInputStreamReader_initWithJavaIoInputStream_withJavaNioCharsetCharset_([connection getInputStream], JreLoadStatic(GVBCharsets, UTF_8))];
  }
  @catch (JavaxNetSslSSLHandshakeException *ce) {
    @try {
      if (this$0_->certificateTool_ != nil && [this$0_->certificateTool_ addCertificatesForUrlWithNSString:val$url_]) {
        [this$0_ getToStreamWithNSString:val$deviceName_ withNSString:val$url_ withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken:val$authenticationToken_ withJavaUtilFunctionConsumer:val$callback_];
      }
      else {
        NetKebernetConfigurationClientImplHttpClient_maybeSendErrorWithNSString_(this$0_, JreStrcat("$$", @"There is no configured SSL/TLS support to communicate with ", val$url_));
      }
    }
    @catch (JavaLangException *e) {
      [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(NetKebernetConfigurationClientImplHttpClient, LOGGER))) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:JreStrcat("$$", @"Couldn't get certificate for ", val$url_)];
      NetKebernetConfigurationClientImplHttpClient_maybeSendErrorWithNSString_(this$0_, JreStrcat("$$", @"There was a problem communicating securely with ", val$url_));
    }
  }
  @catch (JavaIoIOException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(NetKebernetConfigurationClientImplHttpClient, LOGGER))) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$$", @"Failed to fetch ", val$url_) withNSException:e];
    NetKebernetConfigurationClientImplHttpClient_maybeSendErrorWithNSString_(this$0_, JreStrcat("$$$$C", @"Failed to read from ", val$url_, @" (", [e getMessage], ')'));
  }
}

@end

void NetKebernetConfigurationClientImplHttpClient_$Lambda$1_initWithNetKebernetConfigurationClientImplHttpClient_withJavaNetURL_withNSString_withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken_withNSString_withJavaUtilFunctionConsumer_withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken_(NetKebernetConfigurationClientImplHttpClient_$Lambda$1 *self, NetKebernetConfigurationClientImplHttpClient *outer$, JavaNetURL *capture$0, NSString *capture$1, id<NetKebernetConfigurationClientImplHttpClient_AuthenticationToken> capture$2, NSString *capture$3, id<JavaUtilFunctionConsumer> capture$4, id<NetKebernetConfigurationClientImplHttpClient_AuthenticationToken> capture$5) {
  self->this$0_ = outer$;
  self->val$u_ = capture$0;
  self->val$deviceName_ = capture$1;
  self->val$token_ = capture$2;
  self->val$url_ = capture$3;
  self->val$callback_ = capture$4;
  self->val$authenticationToken_ = capture$5;
  NSObject_init(self);
}

NetKebernetConfigurationClientImplHttpClient_$Lambda$1 *new_NetKebernetConfigurationClientImplHttpClient_$Lambda$1_initWithNetKebernetConfigurationClientImplHttpClient_withJavaNetURL_withNSString_withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken_withNSString_withJavaUtilFunctionConsumer_withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken_(NetKebernetConfigurationClientImplHttpClient *outer$, JavaNetURL *capture$0, NSString *capture$1, id<NetKebernetConfigurationClientImplHttpClient_AuthenticationToken> capture$2, NSString *capture$3, id<JavaUtilFunctionConsumer> capture$4, id<NetKebernetConfigurationClientImplHttpClient_AuthenticationToken> capture$5) {
  J2OBJC_NEW_IMPL(NetKebernetConfigurationClientImplHttpClient_$Lambda$1, initWithNetKebernetConfigurationClientImplHttpClient_withJavaNetURL_withNSString_withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken_withNSString_withJavaUtilFunctionConsumer_withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken_, outer$, capture$0, capture$1, capture$2, capture$3, capture$4, capture$5)
}

NetKebernetConfigurationClientImplHttpClient_$Lambda$1 *create_NetKebernetConfigurationClientImplHttpClient_$Lambda$1_initWithNetKebernetConfigurationClientImplHttpClient_withJavaNetURL_withNSString_withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken_withNSString_withJavaUtilFunctionConsumer_withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken_(NetKebernetConfigurationClientImplHttpClient *outer$, JavaNetURL *capture$0, NSString *capture$1, id<NetKebernetConfigurationClientImplHttpClient_AuthenticationToken> capture$2, NSString *capture$3, id<JavaUtilFunctionConsumer> capture$4, id<NetKebernetConfigurationClientImplHttpClient_AuthenticationToken> capture$5) {
  J2OBJC_CREATE_IMPL(NetKebernetConfigurationClientImplHttpClient_$Lambda$1, initWithNetKebernetConfigurationClientImplHttpClient_withJavaNetURL_withNSString_withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken_withNSString_withJavaUtilFunctionConsumer_withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken_, outer$, capture$0, capture$1, capture$2, capture$3, capture$4, capture$5)
}

@implementation NetKebernetConfigurationClientImplHttpClient_$Lambda$3

- (void)acceptWithId:(id<NetKebernetConfigurationClientImplHttpClient_AuthenticationToken>)authenticationToken {
  if (authenticationToken == nil) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Didn't get authentication token!");
  }
  @try {
    (void) [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(JreLoadStatic(NetKebernetConfigurationClientImplHttpClient, TOKEN_MAP))) putWithId:NetKebernetConfigurationClientImplHttpClient_urlToKeyWithNSString_(val$url_) withId:authenticationToken];
    [this$0_ getToStreamWithNSString:val$deviceName_ withNSString:val$url_ withNetKebernetConfigurationClientImplHttpClient_AuthenticationToken:authenticationToken withJavaUtilFunctionConsumer:val$callback_];
  }
  @catch (JavaLangException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(NetKebernetConfigurationClientImplHttpClient, LOGGER))) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:nil withNSException:e];
  }
}

- (id<JavaUtilFunctionConsumer>)andThenWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  return JavaUtilFunctionConsumer_andThenWithJavaUtilFunctionConsumer_(self, arg0);
}

@end

void NetKebernetConfigurationClientImplHttpClient_$Lambda$3_initWithNetKebernetConfigurationClientImplHttpClient_withNSString_withNSString_withJavaUtilFunctionConsumer_(NetKebernetConfigurationClientImplHttpClient_$Lambda$3 *self, NetKebernetConfigurationClientImplHttpClient *outer$, NSString *capture$0, NSString *capture$1, id<JavaUtilFunctionConsumer> capture$2) {
  self->this$0_ = outer$;
  self->val$url_ = capture$0;
  self->val$deviceName_ = capture$1;
  self->val$callback_ = capture$2;
  NSObject_init(self);
}

NetKebernetConfigurationClientImplHttpClient_$Lambda$3 *new_NetKebernetConfigurationClientImplHttpClient_$Lambda$3_initWithNetKebernetConfigurationClientImplHttpClient_withNSString_withNSString_withJavaUtilFunctionConsumer_(NetKebernetConfigurationClientImplHttpClient *outer$, NSString *capture$0, NSString *capture$1, id<JavaUtilFunctionConsumer> capture$2) {
  J2OBJC_NEW_IMPL(NetKebernetConfigurationClientImplHttpClient_$Lambda$3, initWithNetKebernetConfigurationClientImplHttpClient_withNSString_withNSString_withJavaUtilFunctionConsumer_, outer$, capture$0, capture$1, capture$2)
}

NetKebernetConfigurationClientImplHttpClient_$Lambda$3 *create_NetKebernetConfigurationClientImplHttpClient_$Lambda$3_initWithNetKebernetConfigurationClientImplHttpClient_withNSString_withNSString_withJavaUtilFunctionConsumer_(NetKebernetConfigurationClientImplHttpClient *outer$, NSString *capture$0, NSString *capture$1, id<JavaUtilFunctionConsumer> capture$2) {
  J2OBJC_CREATE_IMPL(NetKebernetConfigurationClientImplHttpClient_$Lambda$3, initWithNetKebernetConfigurationClientImplHttpClient_withNSString_withNSString_withJavaUtilFunctionConsumer_, outer$, capture$0, capture$1, capture$2)
}
