//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/net/kebernet/configuration/client/impl/HttpDeviceSettings.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/collect/ImmutableSet.h"
#include "com/google/common/reflect/TypeToken.h"
#include "com/google/gson/Gson.h"
#include "java/io/InputStreamReader.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/Type.h"
#include "java/net/URI.h"
#include "java/net/URISyntaxException.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "java/util/function/Consumer.h"
#include "java/util/logging/Logger.h"
#include "javax/annotation/Nonnull.h"
#include "javax/annotation/meta/When.h"
#include "javax/inject/Inject.h"
#include "net/kebernet/configuration/client/impl/GsonFactory.h"
#include "net/kebernet/configuration/client/impl/HttpClient.h"
#include "net/kebernet/configuration/client/impl/HttpDeviceSettings.h"
#include "net/kebernet/configuration/client/model/Settings.h"
#include "net/kebernet/configuration/client/service/SettingsService.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface NetKebernetConfigurationClientImplHttpDeviceSettings () {
 @public
  NetKebernetConfigurationClientImplHttpClient *client_;
}

@end

J2OBJC_FIELD_SETTER(NetKebernetConfigurationClientImplHttpDeviceSettings, client_, NetKebernetConfigurationClientImplHttpClient *)

inline id<JavaLangReflectType> NetKebernetConfigurationClientImplHttpDeviceSettings_get_VALUES_LIST_TYPE();
static id<JavaLangReflectType> NetKebernetConfigurationClientImplHttpDeviceSettings_VALUES_LIST_TYPE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetKebernetConfigurationClientImplHttpDeviceSettings, VALUES_LIST_TYPE, id<JavaLangReflectType>)

inline JavaUtilLoggingLogger *NetKebernetConfigurationClientImplHttpDeviceSettings_get_LOGGER();
static JavaUtilLoggingLogger *NetKebernetConfigurationClientImplHttpDeviceSettings_LOGGER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetKebernetConfigurationClientImplHttpDeviceSettings, LOGGER, JavaUtilLoggingLogger *)

inline id<JavaUtilSet> NetKebernetConfigurationClientImplHttpDeviceSettings_get_SCHEMES();
static id<JavaUtilSet> NetKebernetConfigurationClientImplHttpDeviceSettings_SCHEMES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetKebernetConfigurationClientImplHttpDeviceSettings, SCHEMES, id<JavaUtilSet>)

__attribute__((unused)) static IOSObjectArray *NetKebernetConfigurationClientImplHttpDeviceSettings__Annotations$0();

__attribute__((unused)) static IOSObjectArray *NetKebernetConfigurationClientImplHttpDeviceSettings__Annotations$1();

__attribute__((unused)) static IOSObjectArray *NetKebernetConfigurationClientImplHttpDeviceSettings__Annotations$2();

__attribute__((unused)) static IOSObjectArray *NetKebernetConfigurationClientImplHttpDeviceSettings__Annotations$3();

__attribute__((unused)) static IOSObjectArray *NetKebernetConfigurationClientImplHttpDeviceSettings__Annotations$4();

@interface NetKebernetConfigurationClientImplHttpDeviceSettings_1 : ComGoogleCommonReflectTypeToken

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(NetKebernetConfigurationClientImplHttpDeviceSettings_1)

__attribute__((unused)) static void NetKebernetConfigurationClientImplHttpDeviceSettings_1_init(NetKebernetConfigurationClientImplHttpDeviceSettings_1 *self);

__attribute__((unused)) static NetKebernetConfigurationClientImplHttpDeviceSettings_1 *new_NetKebernetConfigurationClientImplHttpDeviceSettings_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static NetKebernetConfigurationClientImplHttpDeviceSettings_1 *create_NetKebernetConfigurationClientImplHttpDeviceSettings_1_init();

@interface NetKebernetConfigurationClientImplHttpDeviceSettings_$Lambda$1 : NSObject < JavaUtilFunctionConsumer > {
 @public
  id<ERSSettingsService_SettingsCallback> val$callback_;
}

- (void)acceptWithId:(JavaIoInputStreamReader *)stream;

@end

J2OBJC_EMPTY_STATIC_INIT(NetKebernetConfigurationClientImplHttpDeviceSettings_$Lambda$1)

__attribute__((unused)) static void NetKebernetConfigurationClientImplHttpDeviceSettings_$Lambda$1_initWithERSSettingsService_SettingsCallback_(NetKebernetConfigurationClientImplHttpDeviceSettings_$Lambda$1 *self, id<ERSSettingsService_SettingsCallback> capture$0);

__attribute__((unused)) static NetKebernetConfigurationClientImplHttpDeviceSettings_$Lambda$1 *new_NetKebernetConfigurationClientImplHttpDeviceSettings_$Lambda$1_initWithERSSettingsService_SettingsCallback_(id<ERSSettingsService_SettingsCallback> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetKebernetConfigurationClientImplHttpDeviceSettings_$Lambda$1 *create_NetKebernetConfigurationClientImplHttpDeviceSettings_$Lambda$1_initWithERSSettingsService_SettingsCallback_(id<ERSSettingsService_SettingsCallback> capture$0);

@interface NetKebernetConfigurationClientImplHttpDeviceSettings_$Lambda$2 : NSObject < JavaUtilFunctionConsumer > {
 @public
  id<ERSSettingsService_ValuesCallback> val$callback_;
}

- (void)acceptWithId:(JavaIoInputStreamReader *)stream;

@end

J2OBJC_EMPTY_STATIC_INIT(NetKebernetConfigurationClientImplHttpDeviceSettings_$Lambda$2)

__attribute__((unused)) static void NetKebernetConfigurationClientImplHttpDeviceSettings_$Lambda$2_initWithERSSettingsService_ValuesCallback_(NetKebernetConfigurationClientImplHttpDeviceSettings_$Lambda$2 *self, id<ERSSettingsService_ValuesCallback> capture$0);

__attribute__((unused)) static NetKebernetConfigurationClientImplHttpDeviceSettings_$Lambda$2 *new_NetKebernetConfigurationClientImplHttpDeviceSettings_$Lambda$2_initWithERSSettingsService_ValuesCallback_(id<ERSSettingsService_ValuesCallback> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetKebernetConfigurationClientImplHttpDeviceSettings_$Lambda$2 *create_NetKebernetConfigurationClientImplHttpDeviceSettings_$Lambda$2_initWithERSSettingsService_ValuesCallback_(id<ERSSettingsService_ValuesCallback> capture$0);

J2OBJC_INITIALIZED_DEFN(NetKebernetConfigurationClientImplHttpDeviceSettings)

NSString *NetKebernetConfigurationClientImplHttpDeviceSettings_YOU_MUST_PROVIDE_A_CALLBACK = @"You must provide a callback.";
NSString *NetKebernetConfigurationClientImplHttpDeviceSettings_NO_SETTINGS_ADDRESS_PROVIDED = @"No settings address provided.";

@implementation NetKebernetConfigurationClientImplHttpDeviceSettings

- (instancetype)initWithNetKebernetConfigurationClientImplHttpClient:(NetKebernetConfigurationClientImplHttpClient *)client {
  NetKebernetConfigurationClientImplHttpDeviceSettings_initWithNetKebernetConfigurationClientImplHttpClient_(self, client);
  return self;
}

- (jboolean)canResolveWithNSString:(NSString *)settingsAddress {
  (void) GVBPreconditions_checkNotNullWithId_withId_(settingsAddress, NetKebernetConfigurationClientImplHttpDeviceSettings_NO_SETTINGS_ADDRESS_PROVIDED);
  @try {
    return [((id<JavaUtilSet>) nil_chk(NetKebernetConfigurationClientImplHttpDeviceSettings_SCHEMES)) containsWithId:[((NSString *) nil_chk([new_JavaNetURI_initWithNSString_(settingsAddress) getScheme])) lowercaseString]];
  }
  @catch (JavaNetURISyntaxException *e) {
    return false;
  }
}

- (void)listSettingsWithNSString:(NSString *)deviceName
                    withNSString:(NSString *)settingsAddress
withERSSettingsService_SettingsCallback:(id<ERSSettingsService_SettingsCallback>)callback {
  (void) GVBPreconditions_checkNotNullWithId_withId_(settingsAddress, NetKebernetConfigurationClientImplHttpDeviceSettings_NO_SETTINGS_ADDRESS_PROVIDED);
  (void) GVBPreconditions_checkNotNullWithId_withId_(callback, NetKebernetConfigurationClientImplHttpDeviceSettings_YOU_MUST_PROVIDE_A_CALLBACK);
  [((NetKebernetConfigurationClientImplHttpClient *) nil_chk(client_)) getToStreamWithNSString:deviceName withNSString:settingsAddress withJavaUtilFunctionConsumer:new_NetKebernetConfigurationClientImplHttpDeviceSettings_$Lambda$1_initWithERSSettingsService_SettingsCallback_(callback)];
}

- (void)listValuesWithNSString:(NSString *)deviceName
                  withNSString:(NSString *)valuesUrl
withERSSettingsService_ValuesCallback:(id<ERSSettingsService_ValuesCallback>)callback {
  (void) GVBPreconditions_checkNotNullWithId_withId_(valuesUrl, @"No values address provided.");
  (void) GVBPreconditions_checkNotNullWithId_withId_(callback, NetKebernetConfigurationClientImplHttpDeviceSettings_YOU_MUST_PROVIDE_A_CALLBACK);
  [((NetKebernetConfigurationClientImplHttpClient *) nil_chk(client_)) getToStreamWithNSString:deviceName withNSString:valuesUrl withJavaUtilFunctionConsumer:new_NetKebernetConfigurationClientImplHttpDeviceSettings_$Lambda$2_initWithERSSettingsService_ValuesCallback_(callback)];
}

- (void)saveSettingsWithNSString:(NSString *)deviceName
                    withNSString:(NSString *)valuesAddress
                withJavaUtilList:(id<JavaUtilList>)values
withERSSettingsService_SaveCallback:(id<ERSSettingsService_SaveCallback>)callback {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, 1, 2 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, 5 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, 8 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, 11 },
    { NULL, "V", 0x1, 12, 13, -1, 14, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNetKebernetConfigurationClientImplHttpClient:);
  methods[1].selector = @selector(canResolveWithNSString:);
  methods[2].selector = @selector(listSettingsWithNSString:withNSString:withERSSettingsService_SettingsCallback:);
  methods[3].selector = @selector(listValuesWithNSString:withNSString:withERSSettingsService_ValuesCallback:);
  methods[4].selector = @selector(saveSettingsWithNSString:withNSString:withJavaUtilList:withERSSettingsService_SaveCallback:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "VALUES_LIST_TYPE", "LJavaLangReflectType;", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "LOGGER", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 16, -1, -1 },
    { "SCHEMES", "LJavaUtilSet;", .constantValue.asLong = 0, 0x1a, -1, 17, 18, -1 },
    { "YOU_MUST_PROVIDE_A_CALLBACK", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 19, -1, -1 },
    { "NO_SETTINGS_ADDRESS_PROVIDED", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 20, -1, -1 },
    { "client_", "LNetKebernetConfigurationClientImplHttpClient;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetKebernetConfigurationClientImplHttpClient;", (void *)&NetKebernetConfigurationClientImplHttpDeviceSettings__Annotations$0, (void *)&NetKebernetConfigurationClientImplHttpDeviceSettings__Annotations$1, "canResolve", "LNSString;", (void *)&NetKebernetConfigurationClientImplHttpDeviceSettings__Annotations$2, "listSettings", "LNSString;LNSString;LERSSettingsService_SettingsCallback;", (void *)&NetKebernetConfigurationClientImplHttpDeviceSettings__Annotations$3, "listValues", "LNSString;LNSString;LERSSettingsService_ValuesCallback;", (void *)&NetKebernetConfigurationClientImplHttpDeviceSettings__Annotations$4, "saveSettings", "LNSString;LNSString;LJavaUtilList;LERSSettingsService_SaveCallback;", "(Ljava/lang/String;Ljava/lang/String;Ljava/util/List<Lnet/kebernet/configuration/client/model/SettingValue;>;Lnet/kebernet/configuration/client/service/SettingsService$SaveCallback;)V", &NetKebernetConfigurationClientImplHttpDeviceSettings_VALUES_LIST_TYPE, &NetKebernetConfigurationClientImplHttpDeviceSettings_LOGGER, &NetKebernetConfigurationClientImplHttpDeviceSettings_SCHEMES, "Ljava/util/Set<Ljava/lang/String;>;", &NetKebernetConfigurationClientImplHttpDeviceSettings_YOU_MUST_PROVIDE_A_CALLBACK, &NetKebernetConfigurationClientImplHttpDeviceSettings_NO_SETTINGS_ADDRESS_PROVIDED };
  static const J2ObjcClassInfo _NetKebernetConfigurationClientImplHttpDeviceSettings = { "HttpDeviceSettings", "net.kebernet.configuration.client.impl", ptrTable, methods, fields, 7, 0x1, 5, 6, -1, -1, -1, -1, -1 };
  return &_NetKebernetConfigurationClientImplHttpDeviceSettings;
}

+ (void)initialize {
  if (self == [NetKebernetConfigurationClientImplHttpDeviceSettings class]) {
    NetKebernetConfigurationClientImplHttpDeviceSettings_VALUES_LIST_TYPE = [new_NetKebernetConfigurationClientImplHttpDeviceSettings_1_init() getType];
    NetKebernetConfigurationClientImplHttpDeviceSettings_LOGGER = JavaUtilLoggingLogger_getLoggerWithNSString_([NetKebernetConfigurationClientImplHttpDeviceSettings_class_() getCanonicalName]);
    NetKebernetConfigurationClientImplHttpDeviceSettings_SCHEMES = GVCImmutableSet_ofWithId_withId_(@"http", @"https");
    J2OBJC_SET_INITIALIZED(NetKebernetConfigurationClientImplHttpDeviceSettings)
  }
}

@end

void NetKebernetConfigurationClientImplHttpDeviceSettings_initWithNetKebernetConfigurationClientImplHttpClient_(NetKebernetConfigurationClientImplHttpDeviceSettings *self, NetKebernetConfigurationClientImplHttpClient *client) {
  NSObject_init(self);
  (void) GVBPreconditions_checkNotNullWithId_withId_(client, @"No HttpClient provided.");
  self->client_ = client;
}

NetKebernetConfigurationClientImplHttpDeviceSettings *new_NetKebernetConfigurationClientImplHttpDeviceSettings_initWithNetKebernetConfigurationClientImplHttpClient_(NetKebernetConfigurationClientImplHttpClient *client) {
  J2OBJC_NEW_IMPL(NetKebernetConfigurationClientImplHttpDeviceSettings, initWithNetKebernetConfigurationClientImplHttpClient_, client)
}

NetKebernetConfigurationClientImplHttpDeviceSettings *create_NetKebernetConfigurationClientImplHttpDeviceSettings_initWithNetKebernetConfigurationClientImplHttpClient_(NetKebernetConfigurationClientImplHttpClient *client) {
  J2OBJC_CREATE_IMPL(NetKebernetConfigurationClientImplHttpDeviceSettings, initWithNetKebernetConfigurationClientImplHttpClient_, client)
}

IOSObjectArray *NetKebernetConfigurationClientImplHttpDeviceSettings__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxInjectInject() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetKebernetConfigurationClientImplHttpDeviceSettings__Annotations$1() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *NetKebernetConfigurationClientImplHttpDeviceSettings__Annotations$2() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *NetKebernetConfigurationClientImplHttpDeviceSettings__Annotations$3() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:3 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *NetKebernetConfigurationClientImplHttpDeviceSettings__Annotations$4() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:3 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetKebernetConfigurationClientImplHttpDeviceSettings)

@implementation NetKebernetConfigurationClientImplHttpDeviceSettings_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  NetKebernetConfigurationClientImplHttpDeviceSettings_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNetKebernetConfigurationClientImplHttpDeviceSettings;", "Lcom/google/common/reflect/TypeToken<Ljava/util/List<Lnet/kebernet/configuration/client/model/SettingValue;>;>;" };
  static const J2ObjcClassInfo _NetKebernetConfigurationClientImplHttpDeviceSettings_1 = { "", "net.kebernet.configuration.client.impl", ptrTable, methods, NULL, 7, 0x8018, 1, 0, 0, -1, -1, 1, -1 };
  return &_NetKebernetConfigurationClientImplHttpDeviceSettings_1;
}

@end

void NetKebernetConfigurationClientImplHttpDeviceSettings_1_init(NetKebernetConfigurationClientImplHttpDeviceSettings_1 *self) {
  ComGoogleCommonReflectTypeToken_init(self);
}

NetKebernetConfigurationClientImplHttpDeviceSettings_1 *new_NetKebernetConfigurationClientImplHttpDeviceSettings_1_init() {
  J2OBJC_NEW_IMPL(NetKebernetConfigurationClientImplHttpDeviceSettings_1, init)
}

NetKebernetConfigurationClientImplHttpDeviceSettings_1 *create_NetKebernetConfigurationClientImplHttpDeviceSettings_1_init() {
  J2OBJC_CREATE_IMPL(NetKebernetConfigurationClientImplHttpDeviceSettings_1, init)
}

@implementation NetKebernetConfigurationClientImplHttpDeviceSettings_$Lambda$1

- (void)acceptWithId:(JavaIoInputStreamReader *)stream {
  [((id<ERSSettingsService_SettingsCallback>) nil_chk(val$callback_)) onSettingsResponseWithERMSettings:[new_ComGoogleGsonGson_init() fromJsonWithJavaIoReader:stream withIOSClass:ERMSettings_class_()]];
}

- (id<JavaUtilFunctionConsumer>)andThenWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  return JavaUtilFunctionConsumer_andThenWithJavaUtilFunctionConsumer_(self, arg0);
}

@end

void NetKebernetConfigurationClientImplHttpDeviceSettings_$Lambda$1_initWithERSSettingsService_SettingsCallback_(NetKebernetConfigurationClientImplHttpDeviceSettings_$Lambda$1 *self, id<ERSSettingsService_SettingsCallback> capture$0) {
  self->val$callback_ = capture$0;
  NSObject_init(self);
}

NetKebernetConfigurationClientImplHttpDeviceSettings_$Lambda$1 *new_NetKebernetConfigurationClientImplHttpDeviceSettings_$Lambda$1_initWithERSSettingsService_SettingsCallback_(id<ERSSettingsService_SettingsCallback> capture$0) {
  J2OBJC_NEW_IMPL(NetKebernetConfigurationClientImplHttpDeviceSettings_$Lambda$1, initWithERSSettingsService_SettingsCallback_, capture$0)
}

NetKebernetConfigurationClientImplHttpDeviceSettings_$Lambda$1 *create_NetKebernetConfigurationClientImplHttpDeviceSettings_$Lambda$1_initWithERSSettingsService_SettingsCallback_(id<ERSSettingsService_SettingsCallback> capture$0) {
  J2OBJC_CREATE_IMPL(NetKebernetConfigurationClientImplHttpDeviceSettings_$Lambda$1, initWithERSSettingsService_SettingsCallback_, capture$0)
}

@implementation NetKebernetConfigurationClientImplHttpDeviceSettings_$Lambda$2

- (void)acceptWithId:(JavaIoInputStreamReader *)stream {
  [((id<ERSSettingsService_ValuesCallback>) nil_chk(val$callback_)) onValuesResponseWithJavaUtilList:[((ComGoogleGsonGson *) nil_chk(NetKebernetConfigurationClientImplGsonFactory_newInstance())) fromJsonWithJavaIoReader:stream withJavaLangReflectType:JreLoadStatic(NetKebernetConfigurationClientImplHttpDeviceSettings, VALUES_LIST_TYPE)]];
}

- (id<JavaUtilFunctionConsumer>)andThenWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  return JavaUtilFunctionConsumer_andThenWithJavaUtilFunctionConsumer_(self, arg0);
}

@end

void NetKebernetConfigurationClientImplHttpDeviceSettings_$Lambda$2_initWithERSSettingsService_ValuesCallback_(NetKebernetConfigurationClientImplHttpDeviceSettings_$Lambda$2 *self, id<ERSSettingsService_ValuesCallback> capture$0) {
  self->val$callback_ = capture$0;
  NSObject_init(self);
}

NetKebernetConfigurationClientImplHttpDeviceSettings_$Lambda$2 *new_NetKebernetConfigurationClientImplHttpDeviceSettings_$Lambda$2_initWithERSSettingsService_ValuesCallback_(id<ERSSettingsService_ValuesCallback> capture$0) {
  J2OBJC_NEW_IMPL(NetKebernetConfigurationClientImplHttpDeviceSettings_$Lambda$2, initWithERSSettingsService_ValuesCallback_, capture$0)
}

NetKebernetConfigurationClientImplHttpDeviceSettings_$Lambda$2 *create_NetKebernetConfigurationClientImplHttpDeviceSettings_$Lambda$2_initWithERSSettingsService_ValuesCallback_(id<ERSSettingsService_ValuesCallback> capture$0) {
  J2OBJC_CREATE_IMPL(NetKebernetConfigurationClientImplHttpDeviceSettings_$Lambda$2, initWithERSSettingsService_ValuesCallback_, capture$0)
}
