//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/net/kebernet/configuration/client/impl/MulticastDNSDevices.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NetKebernetConfigurationClientImplMulticastDNSDevices")
#ifdef RESTRICT_NetKebernetConfigurationClientImplMulticastDNSDevices
#define INCLUDE_ALL_NetKebernetConfigurationClientImplMulticastDNSDevices 0
#else
#define INCLUDE_ALL_NetKebernetConfigurationClientImplMulticastDNSDevices 1
#endif
#undef RESTRICT_NetKebernetConfigurationClientImplMulticastDNSDevices

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (NetKebernetConfigurationClientImplMulticastDNSDevices_) && (INCLUDE_ALL_NetKebernetConfigurationClientImplMulticastDNSDevices || defined(INCLUDE_NetKebernetConfigurationClientImplMulticastDNSDevices))
#define NetKebernetConfigurationClientImplMulticastDNSDevices_

#define RESTRICT_NetKebernetConfigurationClientServiceDiscoveryService 1
#define INCLUDE_ERSDiscoveryService 1
#include "net/kebernet/configuration/client/service/DiscoveryService.h"

@class NetKebernetConfigurationClientImplHttpClient;
@protocol ERSDiscoveryService_DeviceListCallback;
@protocol ERSDiscoveryService_ErrorCallback;

@interface NetKebernetConfigurationClientImplMulticastDNSDevices : NSObject < ERSDiscoveryService >

#pragma mark Public

- (instancetype)initWithNetKebernetConfigurationClientImplHttpClient:(NetKebernetConfigurationClientImplHttpClient *)httpClient;

- (void)listenForDevicesWithERSDiscoveryService_DeviceListCallback:(id<ERSDiscoveryService_DeviceListCallback>)callback;

- (void)listKnownDevicesWithERSDiscoveryService_DeviceListCallback:(id<ERSDiscoveryService_DeviceListCallback>)callback;

- (void)refresh;

- (void)setErrorCallbackWithERSDiscoveryService_ErrorCallback:(id<ERSDiscoveryService_ErrorCallback>)callback;

- (void)startListening;

- (void)stopListening;

@end

J2OBJC_STATIC_INIT(NetKebernetConfigurationClientImplMulticastDNSDevices)

inline NSString *NetKebernetConfigurationClientImplMulticastDNSDevices_get_MDNS_SERVICE_TYPE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *NetKebernetConfigurationClientImplMulticastDNSDevices_MDNS_SERVICE_TYPE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetKebernetConfigurationClientImplMulticastDNSDevices, MDNS_SERVICE_TYPE, NSString *)

FOUNDATION_EXPORT void NetKebernetConfigurationClientImplMulticastDNSDevices_initWithNetKebernetConfigurationClientImplHttpClient_(NetKebernetConfigurationClientImplMulticastDNSDevices *self, NetKebernetConfigurationClientImplHttpClient *httpClient);

FOUNDATION_EXPORT NetKebernetConfigurationClientImplMulticastDNSDevices *new_NetKebernetConfigurationClientImplMulticastDNSDevices_initWithNetKebernetConfigurationClientImplHttpClient_(NetKebernetConfigurationClientImplHttpClient *httpClient) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NetKebernetConfigurationClientImplMulticastDNSDevices *create_NetKebernetConfigurationClientImplMulticastDNSDevices_initWithNetKebernetConfigurationClientImplHttpClient_(NetKebernetConfigurationClientImplHttpClient *httpClient);

J2OBJC_TYPE_LITERAL_HEADER(NetKebernetConfigurationClientImplMulticastDNSDevices)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NetKebernetConfigurationClientImplMulticastDNSDevices")
