//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/net/kebernet/configuration/client/impl/MulticastDNSDevices.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Objects.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/io/CharStreams.h"
#include "com/google/gson/Gson.h"
#include "java/io/IOException.h"
#include "java/io/InputStreamReader.h"
#include "java/lang/Exception.h"
#include "java/lang/Runnable.h"
#include "java/lang/annotation/Annotation.h"
#include "java/net/InetAddress.h"
#include "java/net/UnknownHostException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/Timer.h"
#include "java/util/TimerTask.h"
#include "java/util/concurrent/CopyOnWriteArrayList.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Future.h"
#include "java/util/function/Consumer.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "java/util/stream/Stream.h"
#include "javax/annotation/Nonnull.h"
#include "javax/annotation/Nullable.h"
#include "javax/annotation/meta/When.h"
#include "javax/inject/Inject.h"
#include "javax/inject/Singleton.h"
#include "javax/jmdns/JmDNS.h"
#include "javax/jmdns/ServiceEvent.h"
#include "javax/jmdns/ServiceInfo.h"
#include "javax/jmdns/ServiceListener.h"
#include "net/kebernet/configuration/client/impl/Executor.h"
#include "net/kebernet/configuration/client/impl/HttpClient.h"
#include "net/kebernet/configuration/client/impl/MulticastDNSDevices.h"
#include "net/kebernet/configuration/client/model/Device.h"
#include "net/kebernet/configuration/client/service/DiscoveryService.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface NetKebernetConfigurationClientImplMulticastDNSDevices () {
 @public
  JavaUtilConcurrentCopyOnWriteArrayList *listeningCallbacks_;
  JavaUtilTimer *timer_;
  JavaxJmdnsJmDNS *jmdns_;
  JavaNetInetAddress *localhost_;
  id<ERSDiscoveryService_ErrorCallback> callback_;
  JavaUtilLinkedHashMap *devices_;
  JavaUtilConcurrentCopyOnWriteArrayList *queuedForDispatch_;
  id<ERSDiscoveryService_ErrorCallback> errorCallback_;
  id<JavaxJmdnsServiceListener> serviceListener_;
  NetKebernetConfigurationClientImplHttpClient *httpClient_;
}

- (void)dispatchKnownDevicesWithERSDiscoveryService_DeviceListCallback:(id<ERSDiscoveryService_DeviceListCallback>)callback;

- (void)maybeSendErrorWithNSString:(NSString *)error;

- (void)queryDeviceInfoWithJavaxJmdnsServiceInfo:(JavaxJmdnsServiceInfo *)info;

- (void)saveServiceWithNSString:(NSString *)name
                  withERMDevice:(ERMDevice *)device;

- (void)enqueueForFireWithERMDevice:(ERMDevice *)device;

- (void)dispatch;

- (void)addAllDevicesWithJavaUtilArrayList:(JavaUtilArrayList *)dispatch;

- (void)removeServiceWithNSString:(NSString *)name;

@end

J2OBJC_FIELD_SETTER(NetKebernetConfigurationClientImplMulticastDNSDevices, listeningCallbacks_, JavaUtilConcurrentCopyOnWriteArrayList *)
J2OBJC_FIELD_SETTER(NetKebernetConfigurationClientImplMulticastDNSDevices, timer_, JavaUtilTimer *)
J2OBJC_FIELD_SETTER(NetKebernetConfigurationClientImplMulticastDNSDevices, jmdns_, JavaxJmdnsJmDNS *)
J2OBJC_FIELD_SETTER(NetKebernetConfigurationClientImplMulticastDNSDevices, localhost_, JavaNetInetAddress *)
J2OBJC_FIELD_SETTER(NetKebernetConfigurationClientImplMulticastDNSDevices, callback_, id<ERSDiscoveryService_ErrorCallback>)
J2OBJC_FIELD_SETTER(NetKebernetConfigurationClientImplMulticastDNSDevices, devices_, JavaUtilLinkedHashMap *)
J2OBJC_FIELD_SETTER(NetKebernetConfigurationClientImplMulticastDNSDevices, queuedForDispatch_, JavaUtilConcurrentCopyOnWriteArrayList *)
J2OBJC_FIELD_SETTER(NetKebernetConfigurationClientImplMulticastDNSDevices, errorCallback_, id<ERSDiscoveryService_ErrorCallback>)
J2OBJC_FIELD_SETTER(NetKebernetConfigurationClientImplMulticastDNSDevices, serviceListener_, id<JavaxJmdnsServiceListener>)
J2OBJC_FIELD_SETTER(NetKebernetConfigurationClientImplMulticastDNSDevices, httpClient_, NetKebernetConfigurationClientImplHttpClient *)

inline JavaUtilLoggingLogger *NetKebernetConfigurationClientImplMulticastDNSDevices_get_LOGGER();
static JavaUtilLoggingLogger *NetKebernetConfigurationClientImplMulticastDNSDevices_LOGGER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetKebernetConfigurationClientImplMulticastDNSDevices, LOGGER, JavaUtilLoggingLogger *)

inline id<JavaUtilConcurrentExecutorService> NetKebernetConfigurationClientImplMulticastDNSDevices_get_DEFAULT_EXECUTOR();
static id<JavaUtilConcurrentExecutorService> NetKebernetConfigurationClientImplMulticastDNSDevices_DEFAULT_EXECUTOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(NetKebernetConfigurationClientImplMulticastDNSDevices, DEFAULT_EXECUTOR, id<JavaUtilConcurrentExecutorService>)

__attribute__((unused)) static void NetKebernetConfigurationClientImplMulticastDNSDevices_dispatchKnownDevicesWithERSDiscoveryService_DeviceListCallback_(NetKebernetConfigurationClientImplMulticastDNSDevices *self, id<ERSDiscoveryService_DeviceListCallback> callback);

__attribute__((unused)) static void NetKebernetConfigurationClientImplMulticastDNSDevices_maybeSendErrorWithNSString_(NetKebernetConfigurationClientImplMulticastDNSDevices *self, NSString *error);

__attribute__((unused)) static void NetKebernetConfigurationClientImplMulticastDNSDevices_queryDeviceInfoWithJavaxJmdnsServiceInfo_(NetKebernetConfigurationClientImplMulticastDNSDevices *self, JavaxJmdnsServiceInfo *info);

__attribute__((unused)) static void NetKebernetConfigurationClientImplMulticastDNSDevices_saveServiceWithNSString_withERMDevice_(NetKebernetConfigurationClientImplMulticastDNSDevices *self, NSString *name, ERMDevice *device);

__attribute__((unused)) static void NetKebernetConfigurationClientImplMulticastDNSDevices_enqueueForFireWithERMDevice_(NetKebernetConfigurationClientImplMulticastDNSDevices *self, ERMDevice *device);

__attribute__((unused)) static void NetKebernetConfigurationClientImplMulticastDNSDevices_dispatch(NetKebernetConfigurationClientImplMulticastDNSDevices *self);

__attribute__((unused)) static void NetKebernetConfigurationClientImplMulticastDNSDevices_addAllDevicesWithJavaUtilArrayList_(NetKebernetConfigurationClientImplMulticastDNSDevices *self, JavaUtilArrayList *dispatch);

__attribute__((unused)) static void NetKebernetConfigurationClientImplMulticastDNSDevices_removeServiceWithNSString_(NetKebernetConfigurationClientImplMulticastDNSDevices *self, NSString *name);

__attribute__((unused)) static IOSObjectArray *NetKebernetConfigurationClientImplMulticastDNSDevices__Annotations$0();

__attribute__((unused)) static IOSObjectArray *NetKebernetConfigurationClientImplMulticastDNSDevices__Annotations$1();

__attribute__((unused)) static IOSObjectArray *NetKebernetConfigurationClientImplMulticastDNSDevices__Annotations$2();

__attribute__((unused)) static IOSObjectArray *NetKebernetConfigurationClientImplMulticastDNSDevices__Annotations$3();

__attribute__((unused)) static IOSObjectArray *NetKebernetConfigurationClientImplMulticastDNSDevices__Annotations$4();

__attribute__((unused)) static IOSObjectArray *NetKebernetConfigurationClientImplMulticastDNSDevices__Annotations$5();

@interface NetKebernetConfigurationClientImplMulticastDNSDevices_1 : NSObject < JavaxJmdnsServiceListener > {
 @public
  NetKebernetConfigurationClientImplMulticastDNSDevices *this$0_;
}

- (instancetype)initWithNetKebernetConfigurationClientImplMulticastDNSDevices:(NetKebernetConfigurationClientImplMulticastDNSDevices *)outer$;

- (void)serviceAddedWithJavaxJmdnsServiceEvent:(JavaxJmdnsServiceEvent *)event;

- (void)serviceRemovedWithJavaxJmdnsServiceEvent:(JavaxJmdnsServiceEvent *)event;

- (void)serviceResolvedWithJavaxJmdnsServiceEvent:(JavaxJmdnsServiceEvent *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(NetKebernetConfigurationClientImplMulticastDNSDevices_1)

__attribute__((unused)) static void NetKebernetConfigurationClientImplMulticastDNSDevices_1_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_(NetKebernetConfigurationClientImplMulticastDNSDevices_1 *self, NetKebernetConfigurationClientImplMulticastDNSDevices *outer$);

__attribute__((unused)) static NetKebernetConfigurationClientImplMulticastDNSDevices_1 *new_NetKebernetConfigurationClientImplMulticastDNSDevices_1_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_(NetKebernetConfigurationClientImplMulticastDNSDevices *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetKebernetConfigurationClientImplMulticastDNSDevices_1 *create_NetKebernetConfigurationClientImplMulticastDNSDevices_1_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_(NetKebernetConfigurationClientImplMulticastDNSDevices *outer$);

@interface NetKebernetConfigurationClientImplMulticastDNSDevices_2 : JavaUtilTimerTask {
 @public
  NetKebernetConfigurationClientImplMulticastDNSDevices *this$0_;
}

- (instancetype)initWithNetKebernetConfigurationClientImplMulticastDNSDevices:(NetKebernetConfigurationClientImplMulticastDNSDevices *)outer$;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(NetKebernetConfigurationClientImplMulticastDNSDevices_2)

__attribute__((unused)) static void NetKebernetConfigurationClientImplMulticastDNSDevices_2_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_(NetKebernetConfigurationClientImplMulticastDNSDevices_2 *self, NetKebernetConfigurationClientImplMulticastDNSDevices *outer$);

__attribute__((unused)) static NetKebernetConfigurationClientImplMulticastDNSDevices_2 *new_NetKebernetConfigurationClientImplMulticastDNSDevices_2_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_(NetKebernetConfigurationClientImplMulticastDNSDevices *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetKebernetConfigurationClientImplMulticastDNSDevices_2 *create_NetKebernetConfigurationClientImplMulticastDNSDevices_2_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_(NetKebernetConfigurationClientImplMulticastDNSDevices *outer$);

@interface NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$1 : NSObject < JavaLangRunnable > {
 @public
  NetKebernetConfigurationClientImplMulticastDNSDevices *this$0_;
  id<ERSDiscoveryService_DeviceListCallback> val$callback_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$1)

__attribute__((unused)) static void NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$1_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_withERSDiscoveryService_DeviceListCallback_(NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$1 *self, NetKebernetConfigurationClientImplMulticastDNSDevices *outer$, id<ERSDiscoveryService_DeviceListCallback> capture$0);

__attribute__((unused)) static NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$1 *new_NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$1_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_withERSDiscoveryService_DeviceListCallback_(NetKebernetConfigurationClientImplMulticastDNSDevices *outer$, id<ERSDiscoveryService_DeviceListCallback> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$1 *create_NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$1_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_withERSDiscoveryService_DeviceListCallback_(NetKebernetConfigurationClientImplMulticastDNSDevices *outer$, id<ERSDiscoveryService_DeviceListCallback> capture$0);

@interface NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$3 : NSObject < JavaUtilFunctionConsumer > {
 @public
  NetKebernetConfigurationClientImplMulticastDNSDevices *this$0_;
  JavaxJmdnsServiceInfo *val$info_;
  NSString *val$url_;
}

- (void)acceptWithId:(JavaIoInputStreamReader *)inputStreamReader;

@end

J2OBJC_EMPTY_STATIC_INIT(NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$3)

__attribute__((unused)) static void NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$3_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_withJavaxJmdnsServiceInfo_withNSString_(NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$3 *self, NetKebernetConfigurationClientImplMulticastDNSDevices *outer$, JavaxJmdnsServiceInfo *capture$0, NSString *capture$1);

__attribute__((unused)) static NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$3 *new_NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$3_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_withJavaxJmdnsServiceInfo_withNSString_(NetKebernetConfigurationClientImplMulticastDNSDevices *outer$, JavaxJmdnsServiceInfo *capture$0, NSString *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$3 *create_NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$3_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_withJavaxJmdnsServiceInfo_withNSString_(NetKebernetConfigurationClientImplMulticastDNSDevices *outer$, JavaxJmdnsServiceInfo *capture$0, NSString *capture$1);

@interface NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$2 : NSObject < JavaLangRunnable > {
 @public
  NetKebernetConfigurationClientImplMulticastDNSDevices *this$0_;
  JavaxJmdnsServiceInfo *val$info_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$2)

__attribute__((unused)) static void NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$2_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_withJavaxJmdnsServiceInfo_(NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$2 *self, NetKebernetConfigurationClientImplMulticastDNSDevices *outer$, JavaxJmdnsServiceInfo *capture$0);

__attribute__((unused)) static NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$2 *new_NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$2_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_withJavaxJmdnsServiceInfo_(NetKebernetConfigurationClientImplMulticastDNSDevices *outer$, JavaxJmdnsServiceInfo *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$2 *create_NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$2_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_withJavaxJmdnsServiceInfo_(NetKebernetConfigurationClientImplMulticastDNSDevices *outer$, JavaxJmdnsServiceInfo *capture$0);

@interface NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$4 : NSObject < JavaLangRunnable > {
 @public
  NetKebernetConfigurationClientImplMulticastDNSDevices *target$_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$4)

__attribute__((unused)) static void NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$4_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_(NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$4 *self, NetKebernetConfigurationClientImplMulticastDNSDevices *outer$);

__attribute__((unused)) static NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$4 *new_NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$4_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_(NetKebernetConfigurationClientImplMulticastDNSDevices *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$4 *create_NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$4_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_(NetKebernetConfigurationClientImplMulticastDNSDevices *outer$);

@interface NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$5 : NSObject < JavaUtilFunctionConsumer > {
 @public
  NetKebernetConfigurationClientImplMulticastDNSDevices *this$0_;
  JavaUtilArrayList *val$dispatch_;
}

- (void)acceptWithId:(ERMDevice *)d;

@end

J2OBJC_EMPTY_STATIC_INIT(NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$5)

__attribute__((unused)) static void NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$5_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_withJavaUtilArrayList_(NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$5 *self, NetKebernetConfigurationClientImplMulticastDNSDevices *outer$, JavaUtilArrayList *capture$0);

__attribute__((unused)) static NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$5 *new_NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$5_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_withJavaUtilArrayList_(NetKebernetConfigurationClientImplMulticastDNSDevices *outer$, JavaUtilArrayList *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$5 *create_NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$5_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_withJavaUtilArrayList_(NetKebernetConfigurationClientImplMulticastDNSDevices *outer$, JavaUtilArrayList *capture$0);

@interface NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$6 : NSObject < JavaUtilFunctionConsumer > {
 @public
  NetKebernetConfigurationClientImplMulticastDNSDevices *this$0_;
  JavaUtilArrayList *val$dispatch_;
}

- (void)acceptWithId:(id<ERSDiscoveryService_DeviceListCallback>)callback;

@end

J2OBJC_EMPTY_STATIC_INIT(NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$6)

__attribute__((unused)) static void NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$6_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_withJavaUtilArrayList_(NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$6 *self, NetKebernetConfigurationClientImplMulticastDNSDevices *outer$, JavaUtilArrayList *capture$0);

__attribute__((unused)) static NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$6 *new_NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$6_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_withJavaUtilArrayList_(NetKebernetConfigurationClientImplMulticastDNSDevices *outer$, JavaUtilArrayList *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$6 *create_NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$6_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_withJavaUtilArrayList_(NetKebernetConfigurationClientImplMulticastDNSDevices *outer$, JavaUtilArrayList *capture$0);

@interface NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$7 : NSObject < JavaUtilFunctionConsumer > {
 @public
  NetKebernetConfigurationClientImplMulticastDNSDevices *this$0_;
}

- (void)acceptWithId:(ERMDevice *)d;

@end

J2OBJC_EMPTY_STATIC_INIT(NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$7)

__attribute__((unused)) static void NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$7_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_(NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$7 *self, NetKebernetConfigurationClientImplMulticastDNSDevices *outer$);

__attribute__((unused)) static NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$7 *new_NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$7_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_(NetKebernetConfigurationClientImplMulticastDNSDevices *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$7 *create_NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$7_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_(NetKebernetConfigurationClientImplMulticastDNSDevices *outer$);

J2OBJC_INITIALIZED_DEFN(NetKebernetConfigurationClientImplMulticastDNSDevices)

NSString *NetKebernetConfigurationClientImplMulticastDNSDevices_MDNS_SERVICE_TYPE = @"_v1._iotconfig._tcp.local.";

@implementation NetKebernetConfigurationClientImplMulticastDNSDevices

- (instancetype)initWithNetKebernetConfigurationClientImplHttpClient:(NetKebernetConfigurationClientImplHttpClient *)httpClient {
  NetKebernetConfigurationClientImplMulticastDNSDevices_initWithNetKebernetConfigurationClientImplHttpClient_(self, httpClient);
  return self;
}

- (void)listenForDevicesWithERSDiscoveryService_DeviceListCallback:(id<ERSDiscoveryService_DeviceListCallback>)callback {
  (void) GVBPreconditions_checkNotNullWithId_withId_(callback, @"Cannot use a null callback.");
  [((JavaUtilConcurrentCopyOnWriteArrayList *) nil_chk(self->listeningCallbacks_)) addWithId:callback];
}

- (void)listKnownDevicesWithERSDiscoveryService_DeviceListCallback:(id<ERSDiscoveryService_DeviceListCallback>)callback {
  (void) GVBPreconditions_checkNotNullWithId_withId_(callback, @"Cannot use a null callback.");
  (void) [((id<JavaUtilConcurrentExecutorService>) nil_chk(NetKebernetConfigurationClientImplMulticastDNSDevices_DEFAULT_EXECUTOR)) submitWithJavaLangRunnable:new_NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$1_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_withERSDiscoveryService_DeviceListCallback_(self, callback)];
}

- (void)dispatchKnownDevicesWithERSDiscoveryService_DeviceListCallback:(id<ERSDiscoveryService_DeviceListCallback>)callback {
  NetKebernetConfigurationClientImplMulticastDNSDevices_dispatchKnownDevicesWithERSDiscoveryService_DeviceListCallback_(self, callback);
}

- (void)setErrorCallbackWithERSDiscoveryService_ErrorCallback:(id<ERSDiscoveryService_ErrorCallback>)callback {
  self->errorCallback_ = callback;
}

- (void)refresh {
  [self stopListening];
  [self startListening];
}

- (void)maybeSendErrorWithNSString:(NSString *)error {
  NetKebernetConfigurationClientImplMulticastDNSDevices_maybeSendErrorWithNSString_(self, error);
}

- (void)stopListening {
  if (self->jmdns_ != nil) {
    [self->jmdns_ unregisterAllServices];
    [((JavaxJmdnsJmDNS *) nil_chk(self->jmdns_)) removeServiceListenerWithNSString:NetKebernetConfigurationClientImplMulticastDNSDevices_MDNS_SERVICE_TYPE withJavaxJmdnsServiceListener:self->serviceListener_];
  }
  if (self->timer_ != nil) {
    [timer_ cancel];
  }
  [((JavaUtilLoggingLogger *) nil_chk(NetKebernetConfigurationClientImplMulticastDNSDevices_LOGGER)) infoWithNSString:@"Stop listening done."];
}

- (void)startListening {
  @try {
    localhost_ = JavaNetInetAddress_getLocalHost();
    jmdns_ = JavaxJmdnsJmDNS_createWithJavaNetInetAddress_(localhost_);
    [((JavaxJmdnsJmDNS *) nil_chk(jmdns_)) addServiceListenerWithNSString:NetKebernetConfigurationClientImplMulticastDNSDevices_MDNS_SERVICE_TYPE withJavaxJmdnsServiceListener:self->serviceListener_ = new_NetKebernetConfigurationClientImplMulticastDNSDevices_1_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_(self)];
  }
  @catch (JavaIoIOException *ioe) {
    [((JavaUtilLoggingLogger *) nil_chk(NetKebernetConfigurationClientImplMulticastDNSDevices_LOGGER)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:nil withNSException:ioe];
    NetKebernetConfigurationClientImplMulticastDNSDevices_maybeSendErrorWithNSString_(self, JreStrcat("$$", @"Error starting MDNS Listener ", [ioe getMessage]));
  }
  timer_ = new_JavaUtilTimer_init();
  [timer_ scheduleAtFixedRateWithJavaUtilTimerTask:new_NetKebernetConfigurationClientImplMulticastDNSDevices_2_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_(self) withLong:2000LL withLong:2000LL];
  [((JavaUtilLoggingLogger *) nil_chk(NetKebernetConfigurationClientImplMulticastDNSDevices_LOGGER)) infoWithNSString:@"Start listening done."];
}

- (void)queryDeviceInfoWithJavaxJmdnsServiceInfo:(JavaxJmdnsServiceInfo *)info {
  NetKebernetConfigurationClientImplMulticastDNSDevices_queryDeviceInfoWithJavaxJmdnsServiceInfo_(self, info);
}

- (void)saveServiceWithNSString:(NSString *)name
                  withERMDevice:(ERMDevice *)device {
  NetKebernetConfigurationClientImplMulticastDNSDevices_saveServiceWithNSString_withERMDevice_(self, name, device);
}

- (void)enqueueForFireWithERMDevice:(ERMDevice *)device {
  NetKebernetConfigurationClientImplMulticastDNSDevices_enqueueForFireWithERMDevice_(self, device);
}

- (void)dispatch {
  NetKebernetConfigurationClientImplMulticastDNSDevices_dispatch(self);
}

- (void)addAllDevicesWithJavaUtilArrayList:(JavaUtilArrayList *)dispatch {
  NetKebernetConfigurationClientImplMulticastDNSDevices_addAllDevicesWithJavaUtilArrayList_(self, dispatch);
}

- (void)removeServiceWithNSString:(NSString *)name {
  NetKebernetConfigurationClientImplMulticastDNSDevices_removeServiceWithNSString_(self, name);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, 1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, 4 },
    { NULL, "V", 0x1, 5, 3, -1, -1, -1, 6 },
    { NULL, "V", 0x2, 7, 3, -1, -1, -1, 8 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, 11 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 20, 21, -1, 22, -1, -1 },
    { NULL, "V", 0x2, 23, 13, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNetKebernetConfigurationClientImplHttpClient:);
  methods[1].selector = @selector(listenForDevicesWithERSDiscoveryService_DeviceListCallback:);
  methods[2].selector = @selector(listKnownDevicesWithERSDiscoveryService_DeviceListCallback:);
  methods[3].selector = @selector(dispatchKnownDevicesWithERSDiscoveryService_DeviceListCallback:);
  methods[4].selector = @selector(setErrorCallbackWithERSDiscoveryService_ErrorCallback:);
  methods[5].selector = @selector(refresh);
  methods[6].selector = @selector(maybeSendErrorWithNSString:);
  methods[7].selector = @selector(stopListening);
  methods[8].selector = @selector(startListening);
  methods[9].selector = @selector(queryDeviceInfoWithJavaxJmdnsServiceInfo:);
  methods[10].selector = @selector(saveServiceWithNSString:withERMDevice:);
  methods[11].selector = @selector(enqueueForFireWithERMDevice:);
  methods[12].selector = @selector(dispatch);
  methods[13].selector = @selector(addAllDevicesWithJavaUtilArrayList:);
  methods[14].selector = @selector(removeServiceWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MDNS_SERVICE_TYPE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 24, -1, -1 },
    { "LOGGER", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 25, -1, -1 },
    { "DEFAULT_EXECUTOR", "LJavaUtilConcurrentExecutorService;", .constantValue.asLong = 0, 0x1a, -1, 26, -1, -1 },
    { "listeningCallbacks_", "LJavaUtilConcurrentCopyOnWriteArrayList;", .constantValue.asLong = 0, 0x12, -1, -1, 27, -1 },
    { "timer_", "LJavaUtilTimer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "jmdns_", "LJavaxJmdnsJmDNS;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "localhost_", "LJavaNetInetAddress;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "callback_", "LERSDiscoveryService_ErrorCallback;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "devices_", "LJavaUtilLinkedHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 28, -1 },
    { "queuedForDispatch_", "LJavaUtilConcurrentCopyOnWriteArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, 29, -1 },
    { "errorCallback_", "LERSDiscoveryService_ErrorCallback;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "serviceListener_", "LJavaxJmdnsServiceListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "httpClient_", "LNetKebernetConfigurationClientImplHttpClient;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetKebernetConfigurationClientImplHttpClient;", (void *)&NetKebernetConfigurationClientImplMulticastDNSDevices__Annotations$0, "listenForDevices", "LERSDiscoveryService_DeviceListCallback;", (void *)&NetKebernetConfigurationClientImplMulticastDNSDevices__Annotations$1, "listKnownDevices", (void *)&NetKebernetConfigurationClientImplMulticastDNSDevices__Annotations$2, "dispatchKnownDevices", (void *)&NetKebernetConfigurationClientImplMulticastDNSDevices__Annotations$3, "setErrorCallback", "LERSDiscoveryService_ErrorCallback;", (void *)&NetKebernetConfigurationClientImplMulticastDNSDevices__Annotations$4, "maybeSendError", "LNSString;", "queryDeviceInfo", "LJavaxJmdnsServiceInfo;", "saveService", "LNSString;LERMDevice;", "enqueueForFire", "LERMDevice;", "addAllDevices", "LJavaUtilArrayList;", "(Ljava/util/ArrayList<Lnet/kebernet/configuration/client/model/Device;>;)V", "removeService", &NetKebernetConfigurationClientImplMulticastDNSDevices_MDNS_SERVICE_TYPE, &NetKebernetConfigurationClientImplMulticastDNSDevices_LOGGER, &NetKebernetConfigurationClientImplMulticastDNSDevices_DEFAULT_EXECUTOR, "Ljava/util/concurrent/CopyOnWriteArrayList<Lnet/kebernet/configuration/client/service/DiscoveryService$DeviceListCallback;>;", "Ljava/util/LinkedHashMap<Ljava/lang/String;Lnet/kebernet/configuration/client/model/Device;>;", "Ljava/util/concurrent/CopyOnWriteArrayList<Lnet/kebernet/configuration/client/model/Device;>;", (void *)&NetKebernetConfigurationClientImplMulticastDNSDevices__Annotations$5 };
  static const J2ObjcClassInfo _NetKebernetConfigurationClientImplMulticastDNSDevices = { "MulticastDNSDevices", "net.kebernet.configuration.client.impl", ptrTable, methods, fields, 7, 0x1, 15, 13, -1, -1, -1, -1, 30 };
  return &_NetKebernetConfigurationClientImplMulticastDNSDevices;
}

+ (void)initialize {
  if (self == [NetKebernetConfigurationClientImplMulticastDNSDevices class]) {
    NetKebernetConfigurationClientImplMulticastDNSDevices_LOGGER = JavaUtilLoggingLogger_getLoggerWithNSString_([NetKebernetConfigurationClientImplMulticastDNSDevices_class_() getCanonicalName]);
    NetKebernetConfigurationClientImplMulticastDNSDevices_DEFAULT_EXECUTOR = NetKebernetConfigurationClientImplExecutor_getInstance();
    J2OBJC_SET_INITIALIZED(NetKebernetConfigurationClientImplMulticastDNSDevices)
  }
}

@end

void NetKebernetConfigurationClientImplMulticastDNSDevices_initWithNetKebernetConfigurationClientImplHttpClient_(NetKebernetConfigurationClientImplMulticastDNSDevices *self, NetKebernetConfigurationClientImplHttpClient *httpClient) {
  NSObject_init(self);
  self->listeningCallbacks_ = new_JavaUtilConcurrentCopyOnWriteArrayList_init();
  self->devices_ = new_JavaUtilLinkedHashMap_init();
  self->queuedForDispatch_ = new_JavaUtilConcurrentCopyOnWriteArrayList_init();
  self->httpClient_ = httpClient;
}

NetKebernetConfigurationClientImplMulticastDNSDevices *new_NetKebernetConfigurationClientImplMulticastDNSDevices_initWithNetKebernetConfigurationClientImplHttpClient_(NetKebernetConfigurationClientImplHttpClient *httpClient) {
  J2OBJC_NEW_IMPL(NetKebernetConfigurationClientImplMulticastDNSDevices, initWithNetKebernetConfigurationClientImplHttpClient_, httpClient)
}

NetKebernetConfigurationClientImplMulticastDNSDevices *create_NetKebernetConfigurationClientImplMulticastDNSDevices_initWithNetKebernetConfigurationClientImplHttpClient_(NetKebernetConfigurationClientImplHttpClient *httpClient) {
  J2OBJC_CREATE_IMPL(NetKebernetConfigurationClientImplMulticastDNSDevices, initWithNetKebernetConfigurationClientImplHttpClient_, httpClient)
}

void NetKebernetConfigurationClientImplMulticastDNSDevices_dispatchKnownDevicesWithERSDiscoveryService_DeviceListCallback_(NetKebernetConfigurationClientImplMulticastDNSDevices *self, id<ERSDiscoveryService_DeviceListCallback> callback) {
  @synchronized(self->devices_) {
    @try {
      [((id<ERSDiscoveryService_DeviceListCallback>) nil_chk(callback)) onDevicesWithJavaUtilList:new_JavaUtilArrayList_initWithJavaUtilCollection_([((JavaUtilLinkedHashMap *) nil_chk(self->devices_)) values])];
    }
    @catch (JavaLangException *e) {
      [((JavaUtilLoggingLogger *) nil_chk(NetKebernetConfigurationClientImplMulticastDNSDevices_LOGGER)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:@"Exception dispatching to known devices callback." withNSException:e];
    }
  }
}

void NetKebernetConfigurationClientImplMulticastDNSDevices_maybeSendErrorWithNSString_(NetKebernetConfigurationClientImplMulticastDNSDevices *self, NSString *error) {
  if (self->errorCallback_ != nil) {
    [self->errorCallback_ onErrorWithNSString:error];
  }
}

void NetKebernetConfigurationClientImplMulticastDNSDevices_queryDeviceInfoWithJavaxJmdnsServiceInfo_(NetKebernetConfigurationClientImplMulticastDNSDevices *self, JavaxJmdnsServiceInfo *info) {
  (void) [((id<JavaUtilConcurrentExecutorService>) nil_chk(NetKebernetConfigurationClientImplMulticastDNSDevices_DEFAULT_EXECUTOR)) submitWithJavaLangRunnable:new_NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$2_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_withJavaxJmdnsServiceInfo_(self, info)];
}

void NetKebernetConfigurationClientImplMulticastDNSDevices_saveServiceWithNSString_withERMDevice_(NetKebernetConfigurationClientImplMulticastDNSDevices *self, NSString *name, ERMDevice *device) {
  @synchronized(self->devices_) {
    (void) [((JavaUtilLinkedHashMap *) nil_chk(self->devices_)) putWithId:name withId:device];
    NetKebernetConfigurationClientImplMulticastDNSDevices_enqueueForFireWithERMDevice_(self, device);
  }
}

void NetKebernetConfigurationClientImplMulticastDNSDevices_enqueueForFireWithERMDevice_(NetKebernetConfigurationClientImplMulticastDNSDevices *self, ERMDevice *device) {
  [((JavaUtilConcurrentCopyOnWriteArrayList *) nil_chk(self->queuedForDispatch_)) addWithId:device];
  (void) [((id<JavaUtilConcurrentExecutorService>) nil_chk(NetKebernetConfigurationClientImplMulticastDNSDevices_DEFAULT_EXECUTOR)) submitWithJavaLangRunnable:new_NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$4_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_(self)];
}

void NetKebernetConfigurationClientImplMulticastDNSDevices_dispatch(NetKebernetConfigurationClientImplMulticastDNSDevices *self) {
  JavaUtilArrayList *dispatch = new_JavaUtilArrayList_init();
  [((id<JavaUtilStreamStream>) nil_chk([((JavaUtilConcurrentCopyOnWriteArrayList *) nil_chk(self->queuedForDispatch_)) stream])) forEachWithJavaUtilFunctionConsumer:new_NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$5_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_withJavaUtilArrayList_(self, dispatch)];
  [((id<JavaUtilStreamStream>) nil_chk([((JavaUtilConcurrentCopyOnWriteArrayList *) nil_chk(self->listeningCallbacks_)) parallelStream])) forEachWithJavaUtilFunctionConsumer:new_NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$6_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_withJavaUtilArrayList_(self, dispatch)];
  NetKebernetConfigurationClientImplMulticastDNSDevices_addAllDevicesWithJavaUtilArrayList_(self, dispatch);
}

void NetKebernetConfigurationClientImplMulticastDNSDevices_addAllDevicesWithJavaUtilArrayList_(NetKebernetConfigurationClientImplMulticastDNSDevices *self, JavaUtilArrayList *dispatch) {
  @synchronized(self->devices_) {
    [((JavaUtilArrayList *) nil_chk(dispatch)) forEachWithJavaUtilFunctionConsumer:new_NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$7_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_(self)];
  }
}

void NetKebernetConfigurationClientImplMulticastDNSDevices_removeServiceWithNSString_(NetKebernetConfigurationClientImplMulticastDNSDevices *self, NSString *name) {
  @synchronized(self->devices_) {
    (void) [((JavaUtilLinkedHashMap *) nil_chk(self->devices_)) removeWithId:name];
  }
}

IOSObjectArray *NetKebernetConfigurationClientImplMulticastDNSDevices__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxInjectInject() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *NetKebernetConfigurationClientImplMulticastDNSDevices__Annotations$1() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *NetKebernetConfigurationClientImplMulticastDNSDevices__Annotations$2() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *NetKebernetConfigurationClientImplMulticastDNSDevices__Annotations$3() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNonnull(JreLoadEnum(JavaxAnnotationMetaWhen, ALWAYS)) } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *NetKebernetConfigurationClientImplMulticastDNSDevices__Annotations$4() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:1 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *NetKebernetConfigurationClientImplMulticastDNSDevices__Annotations$5() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaxInjectSingleton() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NetKebernetConfigurationClientImplMulticastDNSDevices)

@implementation NetKebernetConfigurationClientImplMulticastDNSDevices_1

- (instancetype)initWithNetKebernetConfigurationClientImplMulticastDNSDevices:(NetKebernetConfigurationClientImplMulticastDNSDevices *)outer$ {
  NetKebernetConfigurationClientImplMulticastDNSDevices_1_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_(self, outer$);
  return self;
}

- (void)serviceAddedWithJavaxJmdnsServiceEvent:(JavaxJmdnsServiceEvent *)event {
  [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(NetKebernetConfigurationClientImplMulticastDNSDevices, LOGGER))) infoWithNSString:JreStrcat("$$C@", @"Service added: ", [((JavaxJmdnsServiceEvent *) nil_chk(event)) getName], ' ', [event getInfo])];
  [((JavaxJmdnsJmDNS *) nil_chk(this$0_->jmdns_)) requestServiceInfoWithNSString:[event getType] withNSString:[event getName]];
}

- (void)serviceRemovedWithJavaxJmdnsServiceEvent:(JavaxJmdnsServiceEvent *)event {
  NetKebernetConfigurationClientImplMulticastDNSDevices_removeServiceWithNSString_(this$0_, [((JavaxJmdnsServiceEvent *) nil_chk(event)) getName]);
}

- (void)serviceResolvedWithJavaxJmdnsServiceEvent:(JavaxJmdnsServiceEvent *)event {
  [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(NetKebernetConfigurationClientImplMulticastDNSDevices, LOGGER))) infoWithNSString:JreStrcat("$$", @"Service service resovled: ", [((JavaxJmdnsServiceEvent *) nil_chk(event)) getName])];
  NetKebernetConfigurationClientImplMulticastDNSDevices_queryDeviceInfoWithJavaxJmdnsServiceInfo_(this$0_, [event getInfo]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNetKebernetConfigurationClientImplMulticastDNSDevices:);
  methods[1].selector = @selector(serviceAddedWithJavaxJmdnsServiceEvent:);
  methods[2].selector = @selector(serviceRemovedWithJavaxJmdnsServiceEvent:);
  methods[3].selector = @selector(serviceResolvedWithJavaxJmdnsServiceEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetKebernetConfigurationClientImplMulticastDNSDevices;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "serviceAdded", "LJavaxJmdnsServiceEvent;", "serviceRemoved", "serviceResolved", "LNetKebernetConfigurationClientImplMulticastDNSDevices;", "startListening" };
  static const J2ObjcClassInfo _NetKebernetConfigurationClientImplMulticastDNSDevices_1 = { "", "net.kebernet.configuration.client.impl", ptrTable, methods, fields, 7, 0x8018, 4, 1, 4, -1, 5, -1, -1 };
  return &_NetKebernetConfigurationClientImplMulticastDNSDevices_1;
}

@end

void NetKebernetConfigurationClientImplMulticastDNSDevices_1_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_(NetKebernetConfigurationClientImplMulticastDNSDevices_1 *self, NetKebernetConfigurationClientImplMulticastDNSDevices *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

NetKebernetConfigurationClientImplMulticastDNSDevices_1 *new_NetKebernetConfigurationClientImplMulticastDNSDevices_1_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_(NetKebernetConfigurationClientImplMulticastDNSDevices *outer$) {
  J2OBJC_NEW_IMPL(NetKebernetConfigurationClientImplMulticastDNSDevices_1, initWithNetKebernetConfigurationClientImplMulticastDNSDevices_, outer$)
}

NetKebernetConfigurationClientImplMulticastDNSDevices_1 *create_NetKebernetConfigurationClientImplMulticastDNSDevices_1_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_(NetKebernetConfigurationClientImplMulticastDNSDevices *outer$) {
  J2OBJC_CREATE_IMPL(NetKebernetConfigurationClientImplMulticastDNSDevices_1, initWithNetKebernetConfigurationClientImplMulticastDNSDevices_, outer$)
}

@implementation NetKebernetConfigurationClientImplMulticastDNSDevices_2

- (instancetype)initWithNetKebernetConfigurationClientImplMulticastDNSDevices:(NetKebernetConfigurationClientImplMulticastDNSDevices *)outer$ {
  NetKebernetConfigurationClientImplMulticastDNSDevices_2_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_(self, outer$);
  return self;
}

- (void)run {
  @try {
    JavaNetInetAddress *currentHost = JavaNetInetAddress_getLocalHost();
    if (!GVBObjects_equalWithId_withId_(currentHost, this$0_->localhost_)) {
      [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(NetKebernetConfigurationClientImplMulticastDNSDevices, LOGGER))) infoWithNSString:@"Detected network change. Restarting MDNS."];
      [this$0_ refresh];
    }
  }
  @catch (JavaNetUnknownHostException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(NetKebernetConfigurationClientImplMulticastDNSDevices, LOGGER))) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:@"Failed to query local host address" withNSException:e];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNetKebernetConfigurationClientImplMulticastDNSDevices:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LNetKebernetConfigurationClientImplMulticastDNSDevices;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNetKebernetConfigurationClientImplMulticastDNSDevices;", "startListening" };
  static const J2ObjcClassInfo _NetKebernetConfigurationClientImplMulticastDNSDevices_2 = { "", "net.kebernet.configuration.client.impl", ptrTable, methods, fields, 7, 0x8018, 2, 1, 0, -1, 1, -1, -1 };
  return &_NetKebernetConfigurationClientImplMulticastDNSDevices_2;
}

@end

void NetKebernetConfigurationClientImplMulticastDNSDevices_2_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_(NetKebernetConfigurationClientImplMulticastDNSDevices_2 *self, NetKebernetConfigurationClientImplMulticastDNSDevices *outer$) {
  self->this$0_ = outer$;
  JavaUtilTimerTask_init(self);
}

NetKebernetConfigurationClientImplMulticastDNSDevices_2 *new_NetKebernetConfigurationClientImplMulticastDNSDevices_2_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_(NetKebernetConfigurationClientImplMulticastDNSDevices *outer$) {
  J2OBJC_NEW_IMPL(NetKebernetConfigurationClientImplMulticastDNSDevices_2, initWithNetKebernetConfigurationClientImplMulticastDNSDevices_, outer$)
}

NetKebernetConfigurationClientImplMulticastDNSDevices_2 *create_NetKebernetConfigurationClientImplMulticastDNSDevices_2_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_(NetKebernetConfigurationClientImplMulticastDNSDevices *outer$) {
  J2OBJC_CREATE_IMPL(NetKebernetConfigurationClientImplMulticastDNSDevices_2, initWithNetKebernetConfigurationClientImplMulticastDNSDevices_, outer$)
}

@implementation NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$1

- (void)run {
  NetKebernetConfigurationClientImplMulticastDNSDevices_dispatchKnownDevicesWithERSDiscoveryService_DeviceListCallback_(this$0_, val$callback_);
}

@end

void NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$1_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_withERSDiscoveryService_DeviceListCallback_(NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$1 *self, NetKebernetConfigurationClientImplMulticastDNSDevices *outer$, id<ERSDiscoveryService_DeviceListCallback> capture$0) {
  self->this$0_ = outer$;
  self->val$callback_ = capture$0;
  NSObject_init(self);
}

NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$1 *new_NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$1_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_withERSDiscoveryService_DeviceListCallback_(NetKebernetConfigurationClientImplMulticastDNSDevices *outer$, id<ERSDiscoveryService_DeviceListCallback> capture$0) {
  J2OBJC_NEW_IMPL(NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$1, initWithNetKebernetConfigurationClientImplMulticastDNSDevices_withERSDiscoveryService_DeviceListCallback_, outer$, capture$0)
}

NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$1 *create_NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$1_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_withERSDiscoveryService_DeviceListCallback_(NetKebernetConfigurationClientImplMulticastDNSDevices *outer$, id<ERSDiscoveryService_DeviceListCallback> capture$0) {
  J2OBJC_CREATE_IMPL(NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$1, initWithNetKebernetConfigurationClientImplMulticastDNSDevices_withERSDiscoveryService_DeviceListCallback_, outer$, capture$0)
}

@implementation NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$3

- (void)acceptWithId:(JavaIoInputStreamReader *)inputStreamReader {
  @try {
    NSString *body = GIOCharStreams_toStringWithJavaLangReadable_(inputStreamReader);
    ERMDevice *device = [new_ComGoogleGsonGson_init() fromJsonWithNSString:body withIOSClass:ERMDevice_class_()];
    [((ERMDevice *) nil_chk(device)) setNameWithNSString:[((JavaxJmdnsServiceInfo *) nil_chk(val$info_)) getName]];
    [device setAddressWithNSString:val$url_];
    NetKebernetConfigurationClientImplMulticastDNSDevices_saveServiceWithNSString_withERMDevice_(this$0_, [val$info_ getName], device);
  }
  @catch (JavaIoIOException *e) {
    NSString *error = JreStrcat("$$$$C", @"Failed to get URL(", val$url_, @") for name(", [((JavaxJmdnsServiceInfo *) nil_chk(val$info_)) getName], ')');
    [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(NetKebernetConfigurationClientImplMulticastDNSDevices, LOGGER))) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:error withNSException:e];
    NetKebernetConfigurationClientImplMulticastDNSDevices_maybeSendErrorWithNSString_(this$0_, error);
  }
}

- (id<JavaUtilFunctionConsumer>)andThenWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  return JavaUtilFunctionConsumer_andThenWithJavaUtilFunctionConsumer_(self, arg0);
}

@end

void NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$3_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_withJavaxJmdnsServiceInfo_withNSString_(NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$3 *self, NetKebernetConfigurationClientImplMulticastDNSDevices *outer$, JavaxJmdnsServiceInfo *capture$0, NSString *capture$1) {
  self->this$0_ = outer$;
  self->val$info_ = capture$0;
  self->val$url_ = capture$1;
  NSObject_init(self);
}

NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$3 *new_NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$3_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_withJavaxJmdnsServiceInfo_withNSString_(NetKebernetConfigurationClientImplMulticastDNSDevices *outer$, JavaxJmdnsServiceInfo *capture$0, NSString *capture$1) {
  J2OBJC_NEW_IMPL(NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$3, initWithNetKebernetConfigurationClientImplMulticastDNSDevices_withJavaxJmdnsServiceInfo_withNSString_, outer$, capture$0, capture$1)
}

NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$3 *create_NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$3_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_withJavaxJmdnsServiceInfo_withNSString_(NetKebernetConfigurationClientImplMulticastDNSDevices *outer$, JavaxJmdnsServiceInfo *capture$0, NSString *capture$1) {
  J2OBJC_CREATE_IMPL(NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$3, initWithNetKebernetConfigurationClientImplMulticastDNSDevices_withJavaxJmdnsServiceInfo_withNSString_, outer$, capture$0, capture$1)
}

@implementation NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$2

- (void)run {
  {
    IOSObjectArray *a__ = [((JavaxJmdnsServiceInfo *) nil_chk(val$info_)) getURLs];
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *url = *b__++;
      [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(NetKebernetConfigurationClientImplMulticastDNSDevices, LOGGER))) infoWithNSString:JreStrcat("$$", @"Fetching ", url)];
      [((NetKebernetConfigurationClientImplHttpClient *) nil_chk(this$0_->httpClient_)) getToStreamWithNSString:[val$info_ getName] withNSString:url withJavaUtilFunctionConsumer:(new_NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$3_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_withJavaxJmdnsServiceInfo_withNSString_(this$0_, val$info_, url))];
    }
  }
}

@end

void NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$2_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_withJavaxJmdnsServiceInfo_(NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$2 *self, NetKebernetConfigurationClientImplMulticastDNSDevices *outer$, JavaxJmdnsServiceInfo *capture$0) {
  self->this$0_ = outer$;
  self->val$info_ = capture$0;
  NSObject_init(self);
}

NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$2 *new_NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$2_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_withJavaxJmdnsServiceInfo_(NetKebernetConfigurationClientImplMulticastDNSDevices *outer$, JavaxJmdnsServiceInfo *capture$0) {
  J2OBJC_NEW_IMPL(NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$2, initWithNetKebernetConfigurationClientImplMulticastDNSDevices_withJavaxJmdnsServiceInfo_, outer$, capture$0)
}

NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$2 *create_NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$2_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_withJavaxJmdnsServiceInfo_(NetKebernetConfigurationClientImplMulticastDNSDevices *outer$, JavaxJmdnsServiceInfo *capture$0) {
  J2OBJC_CREATE_IMPL(NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$2, initWithNetKebernetConfigurationClientImplMulticastDNSDevices_withJavaxJmdnsServiceInfo_, outer$, capture$0)
}

@implementation NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$4

- (void)run {
  NetKebernetConfigurationClientImplMulticastDNSDevices_dispatch(target$_);
}

@end

void NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$4_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_(NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$4 *self, NetKebernetConfigurationClientImplMulticastDNSDevices *outer$) {
  self->target$_ = outer$;
  NSObject_init(self);
}

NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$4 *new_NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$4_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_(NetKebernetConfigurationClientImplMulticastDNSDevices *outer$) {
  J2OBJC_NEW_IMPL(NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$4, initWithNetKebernetConfigurationClientImplMulticastDNSDevices_, outer$)
}

NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$4 *create_NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$4_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_(NetKebernetConfigurationClientImplMulticastDNSDevices *outer$) {
  J2OBJC_CREATE_IMPL(NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$4, initWithNetKebernetConfigurationClientImplMulticastDNSDevices_, outer$)
}

@implementation NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$5

- (void)acceptWithId:(ERMDevice *)d {
  [((JavaUtilArrayList *) nil_chk(val$dispatch_)) addWithId:d];
  [((JavaUtilConcurrentCopyOnWriteArrayList *) nil_chk(this$0_->queuedForDispatch_)) removeWithId:d];
}

- (id<JavaUtilFunctionConsumer>)andThenWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  return JavaUtilFunctionConsumer_andThenWithJavaUtilFunctionConsumer_(self, arg0);
}

@end

void NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$5_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_withJavaUtilArrayList_(NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$5 *self, NetKebernetConfigurationClientImplMulticastDNSDevices *outer$, JavaUtilArrayList *capture$0) {
  self->this$0_ = outer$;
  self->val$dispatch_ = capture$0;
  NSObject_init(self);
}

NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$5 *new_NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$5_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_withJavaUtilArrayList_(NetKebernetConfigurationClientImplMulticastDNSDevices *outer$, JavaUtilArrayList *capture$0) {
  J2OBJC_NEW_IMPL(NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$5, initWithNetKebernetConfigurationClientImplMulticastDNSDevices_withJavaUtilArrayList_, outer$, capture$0)
}

NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$5 *create_NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$5_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_withJavaUtilArrayList_(NetKebernetConfigurationClientImplMulticastDNSDevices *outer$, JavaUtilArrayList *capture$0) {
  J2OBJC_CREATE_IMPL(NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$5, initWithNetKebernetConfigurationClientImplMulticastDNSDevices_withJavaUtilArrayList_, outer$, capture$0)
}

@implementation NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$6

- (void)acceptWithId:(id<ERSDiscoveryService_DeviceListCallback>)callback {
  @try {
    if (![((id<ERSDiscoveryService_DeviceListCallback>) nil_chk(callback)) onDevicesWithJavaUtilList:new_JavaUtilArrayList_initWithJavaUtilCollection_(val$dispatch_)]) {
      [((JavaUtilConcurrentCopyOnWriteArrayList *) nil_chk(this$0_->listeningCallbacks_)) removeWithId:callback];
    }
  }
  @catch (JavaLangException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(NetKebernetConfigurationClientImplMulticastDNSDevices, LOGGER))) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:@"Failed to dispatch to listening callback" withNSException:e];
  }
}

- (id<JavaUtilFunctionConsumer>)andThenWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  return JavaUtilFunctionConsumer_andThenWithJavaUtilFunctionConsumer_(self, arg0);
}

@end

void NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$6_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_withJavaUtilArrayList_(NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$6 *self, NetKebernetConfigurationClientImplMulticastDNSDevices *outer$, JavaUtilArrayList *capture$0) {
  self->this$0_ = outer$;
  self->val$dispatch_ = capture$0;
  NSObject_init(self);
}

NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$6 *new_NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$6_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_withJavaUtilArrayList_(NetKebernetConfigurationClientImplMulticastDNSDevices *outer$, JavaUtilArrayList *capture$0) {
  J2OBJC_NEW_IMPL(NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$6, initWithNetKebernetConfigurationClientImplMulticastDNSDevices_withJavaUtilArrayList_, outer$, capture$0)
}

NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$6 *create_NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$6_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_withJavaUtilArrayList_(NetKebernetConfigurationClientImplMulticastDNSDevices *outer$, JavaUtilArrayList *capture$0) {
  J2OBJC_CREATE_IMPL(NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$6, initWithNetKebernetConfigurationClientImplMulticastDNSDevices_withJavaUtilArrayList_, outer$, capture$0)
}

@implementation NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$7

- (void)acceptWithId:(ERMDevice *)d {
  (void) [((JavaUtilLinkedHashMap *) nil_chk(this$0_->devices_)) putWithId:[((ERMDevice *) nil_chk(d)) getName] withId:d];
}

- (id<JavaUtilFunctionConsumer>)andThenWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  return JavaUtilFunctionConsumer_andThenWithJavaUtilFunctionConsumer_(self, arg0);
}

@end

void NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$7_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_(NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$7 *self, NetKebernetConfigurationClientImplMulticastDNSDevices *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$7 *new_NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$7_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_(NetKebernetConfigurationClientImplMulticastDNSDevices *outer$) {
  J2OBJC_NEW_IMPL(NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$7, initWithNetKebernetConfigurationClientImplMulticastDNSDevices_, outer$)
}

NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$7 *create_NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$7_initWithNetKebernetConfigurationClientImplMulticastDNSDevices_(NetKebernetConfigurationClientImplMulticastDNSDevices *outer$) {
  J2OBJC_CREATE_IMPL(NetKebernetConfigurationClientImplMulticastDNSDevices_$Lambda$7, initWithNetKebernetConfigurationClientImplMulticastDNSDevices_, outer$)
}
