//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/net/kebernet/configuration/client/model/Group.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "net/kebernet/configuration/client/model/Group.h"

@interface ERMGroup () {
 @public
  jint index_;
  NSString *name_;
  NSString *description__;
  id<JavaUtilList> settings_;
  jboolean requiresReboot_;
}

@end

J2OBJC_FIELD_SETTER(ERMGroup, name_, NSString *)
J2OBJC_FIELD_SETTER(ERMGroup, description__, NSString *)
J2OBJC_FIELD_SETTER(ERMGroup, settings_, id<JavaUtilList>)

@implementation ERMGroup

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ERMGroup_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)getIndex {
  return index_;
}

- (void)setIndexWithInt:(jint)index {
  self->index_ = index;
}

- (NSString *)getName {
  return name_;
}

- (void)setNameWithNSString:(NSString *)name {
  self->name_ = name;
}

- (NSString *)getDescription {
  return description__;
}

- (void)setDescriptionWithNSString:(NSString *)description_ {
  self->description__ = description_;
}

- (id<JavaUtilList>)getSettings {
  return settings_;
}

- (void)setSettingsWithJavaUtilList:(id<JavaUtilList>)settings {
  self->settings_ = settings;
}

- (jboolean)isRequiresReboot {
  return requiresReboot_;
}

- (void)setRequiresRebootWithBoolean:(jboolean)requiresReboot {
  self->requiresReboot_ = requiresReboot;
}

- (jboolean)isEqual:(id)o {
  if (self == o) return true;
  if (o == nil || [self java_getClass] != [o java_getClass]) return false;
  ERMGroup *group = (ERMGroup *) cast_chk(o, [ERMGroup class]);
  if (index_ != group->index_) return false;
  if (requiresReboot_ != group->requiresReboot_) return false;
  if (name_ != nil ? ![name_ isEqual:group->name_] : group->name_ != nil) return false;
  if (description__ != nil ? ![description__ isEqual:group->description__] : group->description__ != nil) return false;
  return settings_ != nil ? [settings_ isEqual:group->settings_] : group->settings_ == nil;
}

- (NSUInteger)hash {
  jint result = index_;
  result = 31 * result + (name_ != nil ? ((jint) [name_ hash]) : 0);
  result = 31 * result + (description__ != nil ? ((jint) [description__ hash]) : 0);
  result = 31 * result + (settings_ != nil ? ((jint) [settings_ hash]) : 0);
  result = 31 * result + (requiresReboot_ ? 1 : 0);
  return result;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, 8, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 13, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getIndex);
  methods[2].selector = @selector(setIndexWithInt:);
  methods[3].selector = @selector(getName);
  methods[4].selector = @selector(setNameWithNSString:);
  methods[5].selector = @selector(getDescription);
  methods[6].selector = @selector(setDescriptionWithNSString:);
  methods[7].selector = @selector(getSettings);
  methods[8].selector = @selector(setSettingsWithJavaUtilList:);
  methods[9].selector = @selector(isRequiresReboot);
  methods[10].selector = @selector(setRequiresRebootWithBoolean:);
  methods[11].selector = @selector(isEqual:);
  methods[12].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "index_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "description__", "LNSString;", .constantValue.asLong = 0, 0x2, 14, -1, -1, -1 },
    { "settings_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 15, -1 },
    { "requiresReboot_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setIndex", "I", "setName", "LNSString;", "setDescription", "()Ljava/util/List<Lnet/kebernet/configuration/client/model/Setting;>;", "setSettings", "LJavaUtilList;", "(Ljava/util/List<Lnet/kebernet/configuration/client/model/Setting;>;)V", "setRequiresReboot", "Z", "equals", "LNSObject;", "hashCode", "description", "Ljava/util/List<Lnet/kebernet/configuration/client/model/Setting;>;" };
  static const J2ObjcClassInfo _ERMGroup = { "Group", "net.kebernet.configuration.client.model", ptrTable, methods, fields, 7, 0x1, 13, 5, -1, -1, -1, -1, -1 };
  return &_ERMGroup;
}

@end

void ERMGroup_init(ERMGroup *self) {
  NSObject_init(self);
  self->settings_ = new_JavaUtilArrayList_init();
}

ERMGroup *new_ERMGroup_init() {
  J2OBJC_NEW_IMPL(ERMGroup, init)
}

ERMGroup *create_ERMGroup_init() {
  J2OBJC_CREATE_IMPL(ERMGroup, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ERMGroup)
