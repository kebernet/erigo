//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/Personal/Documents/raspi-config/client-framework/build/j2oSources/net/kebernet/configuration/client/model/SettingValue.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/MoreObjects.h"
#include "com/google/common/base/Objects.h"
#include "net/kebernet/configuration/client/model/SettingValue.h"

@interface ERMSettingValue () {
 @public
  NSString *name_;
  NSString *value_;
}

@end

J2OBJC_FIELD_SETTER(ERMSettingValue, name_, NSString *)
J2OBJC_FIELD_SETTER(ERMSettingValue, value_, NSString *)

@implementation ERMSettingValue

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ERMSettingValue_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)name
                    withNSString:(NSString *)value {
  ERMSettingValue_initWithNSString_withNSString_(self, name, value);
  return self;
}

- (NSString *)getName {
  return name_;
}

- (void)setNameWithNSString:(NSString *)name {
  self->name_ = name;
}

- (NSString *)getValue {
  return value_;
}

- (void)setValueWithNSString:(NSString *)value {
  self->value_ = value;
}

- (NSString *)description {
  return [((GVBMoreObjects_ToStringHelper *) nil_chk([((GVBMoreObjects_ToStringHelper *) nil_chk([((GVBMoreObjects_ToStringHelper *) nil_chk(GVBMoreObjects_toStringHelperWithId_(self))) addWithNSString:@"name" withId:name_])) addWithNSString:@"value" withId:value_])) description];
}

- (jboolean)isEqual:(id)o {
  if (self == o) return true;
  if (!([o isKindOfClass:[ERMSettingValue class]])) return false;
  ERMSettingValue *that = (ERMSettingValue *) cast_chk(o, [ERMSettingValue class]);
  return GVBObjects_equalWithId_withId_(name_, ((ERMSettingValue *) nil_chk(that))->name_) && GVBObjects_equalWithId_withId_(value_, that->value_);
}

- (NSUInteger)hash {
  return GVBObjects_hashCodeWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ name_, value_ } count:2 type:NSObject_class_()]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:withNSString:);
  methods[2].selector = @selector(getName);
  methods[3].selector = @selector(setNameWithNSString:);
  methods[4].selector = @selector(getValue);
  methods[5].selector = @selector(setValueWithNSString:);
  methods[6].selector = @selector(description);
  methods[7].selector = @selector(isEqual:);
  methods[8].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "value_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;", "setName", "LNSString;", "setValue", "toString", "equals", "LNSObject;", "hashCode" };
  static const J2ObjcClassInfo _ERMSettingValue = { "SettingValue", "net.kebernet.configuration.client.model", ptrTable, methods, fields, 7, 0x1, 9, 2, -1, -1, -1, -1, -1 };
  return &_ERMSettingValue;
}

@end

void ERMSettingValue_init(ERMSettingValue *self) {
  NSObject_init(self);
}

ERMSettingValue *new_ERMSettingValue_init() {
  J2OBJC_NEW_IMPL(ERMSettingValue, init)
}

ERMSettingValue *create_ERMSettingValue_init() {
  J2OBJC_CREATE_IMPL(ERMSettingValue, init)
}

void ERMSettingValue_initWithNSString_withNSString_(ERMSettingValue *self, NSString *name, NSString *value) {
  NSObject_init(self);
  self->name_ = name;
  self->value_ = value;
}

ERMSettingValue *new_ERMSettingValue_initWithNSString_withNSString_(NSString *name, NSString *value) {
  J2OBJC_NEW_IMPL(ERMSettingValue, initWithNSString_withNSString_, name, value)
}

ERMSettingValue *create_ERMSettingValue_initWithNSString_withNSString_(NSString *name, NSString *value) {
  J2OBJC_CREATE_IMPL(ERMSettingValue, initWithNSString_withNSString_, name, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ERMSettingValue)
